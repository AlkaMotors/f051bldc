
f051bldc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055cc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800568c  0800568c  0001568c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080056f4  080056f4  000156f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080056f8  080056f8  000156f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  20000000  080056fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000490  20000070  08005768  00020070  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  20000500  08005768  00020500  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001b60e  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003652  00000000  00000000  0003b6a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000e9ff  00000000  00000000  0003ecf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000a78  00000000  00000000  0004d6f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000028e0  00000000  00000000  0004e170  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007f55  00000000  00000000  00050a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000413d  00000000  00000000  000589a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0005cae2  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001e4c  00000000  00000000  0005cb60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005674 	.word	0x08005674

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08005674 	.word	0x08005674

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003f4:	b510      	push	{r4, lr}
 80003f6:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 80003f8:	f001 f9f2 	bl	80017e0 <HAL_RCC_GetHCLKFreq>
 80003fc:	21fa      	movs	r1, #250	; 0xfa
 80003fe:	0089      	lsls	r1, r1, #2
 8000400:	f7ff fe82 	bl	8000108 <__udivsi3>
 8000404:	f000 fb2c 	bl	8000a60 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000408:	2001      	movs	r0, #1
 800040a:	2200      	movs	r2, #0
 800040c:	0021      	movs	r1, r4
 800040e:	4240      	negs	r0, r0
 8000410:	f000 fae8 	bl	80009e4 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000414:	2000      	movs	r0, #0
 8000416:	bd10      	pop	{r4, pc}

08000418 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000418:	2110      	movs	r1, #16
 800041a:	4a06      	ldr	r2, [pc, #24]	; (8000434 <HAL_Init+0x1c>)
{
 800041c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800041e:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000420:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000422:	430b      	orrs	r3, r1
 8000424:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000426:	f7ff ffe5 	bl	80003f4 <HAL_InitTick>
  HAL_MspInit();
 800042a:	f004 ff23 	bl	8005274 <HAL_MspInit>
}
 800042e:	2000      	movs	r0, #0
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			; (mov r8, r8)
 8000434:	40022000 	.word	0x40022000

08000438 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000438:	4a02      	ldr	r2, [pc, #8]	; (8000444 <HAL_IncTick+0xc>)
 800043a:	6813      	ldr	r3, [r2, #0]
 800043c:	3301      	adds	r3, #1
 800043e:	6013      	str	r3, [r2, #0]
}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	20000148 	.word	0x20000148

08000448 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000448:	4b01      	ldr	r3, [pc, #4]	; (8000450 <HAL_GetTick+0x8>)
 800044a:	6818      	ldr	r0, [r3, #0]
}
 800044c:	4770      	bx	lr
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	20000148 	.word	0x20000148

08000454 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000454:	b530      	push	{r4, r5, lr}
 8000456:	b083      	sub	sp, #12
 8000458:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 800045a:	f7ff fff5 	bl	8000448 <HAL_GetTick>
  uint32_t wait = Delay;
 800045e:	9c01      	ldr	r4, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000460:	0005      	movs	r5, r0
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
     wait++;
 8000462:	1c63      	adds	r3, r4, #1
 8000464:	1e5a      	subs	r2, r3, #1
 8000466:	4193      	sbcs	r3, r2
 8000468:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800046a:	f7ff ffed 	bl	8000448 <HAL_GetTick>
 800046e:	1b40      	subs	r0, r0, r5
 8000470:	42a0      	cmp	r0, r4
 8000472:	d3fa      	bcc.n	800046a <HAL_Delay+0x16>
  {
  }
}
 8000474:	b003      	add	sp, #12
 8000476:	bd30      	pop	{r4, r5, pc}

08000478 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800047a:	1e04      	subs	r4, r0, #0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0U;

  /* Check ADC handle */
  if(hadc == NULL)
 800047c:	d100      	bne.n	8000480 <HAL_ADC_Init+0x8>
 800047e:	e080      	b.n	8000582 <HAL_ADC_Init+0x10a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000480:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000482:	2b00      	cmp	r3, #0
 8000484:	d067      	beq.n	8000556 <HAL_ADC_Init+0xde>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000486:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000488:	06db      	lsls	r3, r3, #27
 800048a:	d45e      	bmi.n	800054a <HAL_ADC_Init+0xd2>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800048c:	2004      	movs	r0, #4
 800048e:	6823      	ldr	r3, [r4, #0]
 8000490:	689a      	ldr	r2, [r3, #8]
 8000492:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000494:	d159      	bne.n	800054a <HAL_ADC_Init+0xd2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000496:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000498:	4948      	ldr	r1, [pc, #288]	; (80005bc <HAL_ADC_Init+0x144>)
 800049a:	400a      	ands	r2, r1
 800049c:	3106      	adds	r1, #6
 800049e:	31ff      	adds	r1, #255	; 0xff
 80004a0:	430a      	orrs	r2, r1
 80004a2:	6462      	str	r2, [r4, #68]	; 0x44
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80004a4:	2203      	movs	r2, #3
 80004a6:	6899      	ldr	r1, [r3, #8]
 80004a8:	400a      	ands	r2, r1
 80004aa:	2a01      	cmp	r2, #1
 80004ac:	d059      	beq.n	8000562 <HAL_ADC_Init+0xea>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80004ae:	2118      	movs	r1, #24
 80004b0:	68da      	ldr	r2, [r3, #12]
 80004b2:	438a      	bics	r2, r1
 80004b4:	68a1      	ldr	r1, [r4, #8]
 80004b6:	430a      	orrs	r2, r1
 80004b8:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80004ba:	691a      	ldr	r2, [r3, #16]
 80004bc:	6861      	ldr	r1, [r4, #4]
 80004be:	0092      	lsls	r2, r2, #2
 80004c0:	0892      	lsrs	r2, r2, #2
 80004c2:	430a      	orrs	r2, r1
 80004c4:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80004c6:	68da      	ldr	r2, [r3, #12]
 80004c8:	493d      	ldr	r1, [pc, #244]	; (80005c0 <HAL_ADC_Init+0x148>)
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80004ca:	6a26      	ldr	r6, [r4, #32]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80004cc:	400a      	ands	r2, r1
 80004ce:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80004d0:	69a2      	ldr	r2, [r4, #24]
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80004d2:	0377      	lsls	r7, r6, #13
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80004d4:	0391      	lsls	r1, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 80004d6:	69e2      	ldr	r2, [r4, #28]
 80004d8:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80004da:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 80004dc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80004de:	3a01      	subs	r2, #1
 80004e0:	1e55      	subs	r5, r2, #1
 80004e2:	41aa      	sbcs	r2, r5
 80004e4:	0315      	lsls	r5, r2, #12
 80004e6:	68e2      	ldr	r2, [r4, #12]
 80004e8:	4311      	orrs	r1, r2
                 hadc->Init.DataAlign                                   |
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80004ea:	6922      	ldr	r2, [r4, #16]
 80004ec:	4339      	orrs	r1, r7
 80004ee:	2a02      	cmp	r2, #2
 80004f0:	d059      	beq.n	80005a6 <HAL_ADC_Init+0x12e>
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 80004f2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80004f4:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80004f6:	430a      	orrs	r2, r1
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80004f8:	6a61      	ldr	r1, [r4, #36]	; 0x24
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80004fa:	432a      	orrs	r2, r5
 80004fc:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80004fe:	2901      	cmp	r1, #1
 8000500:	d04b      	beq.n	800059a <HAL_ADC_Init+0x122>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000502:	20c2      	movs	r0, #194	; 0xc2
 8000504:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000506:	30ff      	adds	r0, #255	; 0xff
 8000508:	4281      	cmp	r1, r0
 800050a:	d002      	beq.n	8000512 <HAL_ADC_Init+0x9a>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800050c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800050e:	4301      	orrs	r1, r0
 8000510:	430a      	orrs	r2, r1
                    hadc->Init.ExternalTrigConvEdge );
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000512:	68d9      	ldr	r1, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000514:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000516:	4311      	orrs	r1, r2
 8000518:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800051a:	2180      	movs	r1, #128	; 0x80
 800051c:	0549      	lsls	r1, r1, #21
 800051e:	428d      	cmp	r5, r1
 8000520:	d026      	beq.n	8000570 <HAL_ADC_Init+0xf8>
 8000522:	1e69      	subs	r1, r5, #1
 8000524:	2906      	cmp	r1, #6
 8000526:	d923      	bls.n	8000570 <HAL_ADC_Init+0xf8>
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000528:	68db      	ldr	r3, [r3, #12]
 800052a:	4926      	ldr	r1, [pc, #152]	; (80005c4 <HAL_ADC_Init+0x14c>)
 800052c:	400b      	ands	r3, r1
 800052e:	429a      	cmp	r2, r3
 8000530:	d029      	beq.n	8000586 <HAL_ADC_Init+0x10e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000532:	2212      	movs	r2, #18
 8000534:	6c63      	ldr	r3, [r4, #68]	; 0x44
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
      
      tmp_hal_status = HAL_ERROR;
 8000536:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8000538:	4393      	bics	r3, r2
 800053a:	3a02      	subs	r2, #2
 800053c:	4313      	orrs	r3, r2
 800053e:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000540:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000542:	3a0f      	subs	r2, #15
 8000544:	4313      	orrs	r3, r2
 8000546:	64a3      	str	r3, [r4, #72]	; 0x48
 8000548:	e004      	b.n	8000554 <HAL_ADC_Init+0xdc>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800054a:	2210      	movs	r2, #16
        
    tmp_hal_status = HAL_ERROR;
 800054c:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800054e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000550:	4313      	orrs	r3, r2
 8000552:	6463      	str	r3, [r4, #68]	; 0x44
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8000554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hadc->Lock = HAL_UNLOCKED;
 8000556:	2240      	movs	r2, #64	; 0x40
    ADC_CLEAR_ERRORCODE(hadc);
 8000558:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 800055a:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 800055c:	f004 feac 	bl	80052b8 <HAL_ADC_MspInit>
 8000560:	e791      	b.n	8000486 <HAL_ADC_Init+0xe>
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000562:	6819      	ldr	r1, [r3, #0]
 8000564:	420a      	tst	r2, r1
 8000566:	d1ae      	bne.n	80004c6 <HAL_ADC_Init+0x4e>
 8000568:	68da      	ldr	r2, [r3, #12]
 800056a:	0412      	lsls	r2, r2, #16
 800056c:	d59f      	bpl.n	80004ae <HAL_ADC_Init+0x36>
 800056e:	e7aa      	b.n	80004c6 <HAL_ADC_Init+0x4e>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000570:	2107      	movs	r1, #7
 8000572:	6958      	ldr	r0, [r3, #20]
 8000574:	4388      	bics	r0, r1
 8000576:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000578:	6958      	ldr	r0, [r3, #20]
 800057a:	4029      	ands	r1, r5
 800057c:	4301      	orrs	r1, r0
 800057e:	6159      	str	r1, [r3, #20]
 8000580:	e7d2      	b.n	8000528 <HAL_ADC_Init+0xb0>
    return HAL_ERROR;
 8000582:	2001      	movs	r0, #1
 8000584:	e7e6      	b.n	8000554 <HAL_ADC_Init+0xdc>
      ADC_CLEAR_ERRORCODE(hadc);
 8000586:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 8000588:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 800058a:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 800058c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800058e:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8000590:	4393      	bics	r3, r2
 8000592:	3a02      	subs	r2, #2
 8000594:	4313      	orrs	r3, r2
 8000596:	6463      	str	r3, [r4, #68]	; 0x44
 8000598:	e7dc      	b.n	8000554 <HAL_ADC_Init+0xdc>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800059a:	2e00      	cmp	r6, #0
 800059c:	d105      	bne.n	80005aa <HAL_ADC_Init+0x132>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800059e:	2180      	movs	r1, #128	; 0x80
 80005a0:	0249      	lsls	r1, r1, #9
 80005a2:	430a      	orrs	r2, r1
 80005a4:	e7ad      	b.n	8000502 <HAL_ADC_Init+0x8a>
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80005a6:	2004      	movs	r0, #4
 80005a8:	e7a3      	b.n	80004f2 <HAL_ADC_Init+0x7a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80005aa:	2520      	movs	r5, #32
 80005ac:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80005ae:	4328      	orrs	r0, r5
 80005b0:	6460      	str	r0, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80005b2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80005b4:	4301      	orrs	r1, r0
 80005b6:	64a1      	str	r1, [r4, #72]	; 0x48
 80005b8:	e7a3      	b.n	8000502 <HAL_ADC_Init+0x8a>
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	fffffefd 	.word	0xfffffefd
 80005c0:	fffe0219 	.word	0xfffe0219
 80005c4:	833fffe7 	.word	0x833fffe7

080005c8 <HAL_ADC_LevelOutOfWindowCallback>:
 80005c8:	4770      	bx	lr
 80005ca:	46c0      	nop			; (mov r8, r8)

080005cc <HAL_ADC_ErrorCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80005cc:	4770      	bx	lr
 80005ce:	46c0      	nop			; (mov r8, r8)

080005d0 <HAL_ADC_IRQHandler>:
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80005d0:	2204      	movs	r2, #4
 80005d2:	6803      	ldr	r3, [r0, #0]
{
 80005d4:	b570      	push	{r4, r5, r6, lr}
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80005d6:	6819      	ldr	r1, [r3, #0]
{
 80005d8:	0004      	movs	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80005da:	420a      	tst	r2, r1
 80005dc:	d04a      	beq.n	8000674 <HAL_ADC_IRQHandler+0xa4>
 80005de:	6859      	ldr	r1, [r3, #4]
 80005e0:	420a      	tst	r2, r1
 80005e2:	d047      	beq.n	8000674 <HAL_ADC_IRQHandler+0xa4>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80005e4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80005e6:	06d2      	lsls	r2, r2, #27
 80005e8:	d404      	bmi.n	80005f4 <HAL_ADC_IRQHandler+0x24>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80005ea:	2280      	movs	r2, #128	; 0x80
 80005ec:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80005ee:	0092      	lsls	r2, r2, #2
 80005f0:	430a      	orrs	r2, r1
 80005f2:	6462      	str	r2, [r4, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80005f4:	22c0      	movs	r2, #192	; 0xc0
 80005f6:	68d9      	ldr	r1, [r3, #12]
 80005f8:	0112      	lsls	r2, r2, #4
 80005fa:	4211      	tst	r1, r2
 80005fc:	d113      	bne.n	8000626 <HAL_ADC_IRQHandler+0x56>
 80005fe:	6a22      	ldr	r2, [r4, #32]
 8000600:	2a00      	cmp	r2, #0
 8000602:	d110      	bne.n	8000626 <HAL_ADC_IRQHandler+0x56>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	0712      	lsls	r2, r2, #28
 8000608:	d50d      	bpl.n	8000626 <HAL_ADC_IRQHandler+0x56>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800060a:	689a      	ldr	r2, [r3, #8]
 800060c:	0752      	lsls	r2, r2, #29
 800060e:	d444      	bmi.n	800069a <HAL_ADC_IRQHandler+0xca>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000610:	210c      	movs	r1, #12
 8000612:	685a      	ldr	r2, [r3, #4]
 8000614:	438a      	bics	r2, r1
 8000616:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8000618:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800061a:	4a24      	ldr	r2, [pc, #144]	; (80006ac <HAL_ADC_IRQHandler+0xdc>)
 800061c:	4013      	ands	r3, r2
 800061e:	3204      	adds	r2, #4
 8000620:	32ff      	adds	r2, #255	; 0xff
 8000622:	4313      	orrs	r3, r2
 8000624:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ConvCpltCallback(hadc);
 8000626:	0020      	movs	r0, r4
 8000628:	f003 f9d6 	bl	80039d8 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800062c:	220c      	movs	r2, #12
 800062e:	6823      	ldr	r3, [r4, #0]
 8000630:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000632:	2580      	movs	r5, #128	; 0x80
 8000634:	681a      	ldr	r2, [r3, #0]
 8000636:	4215      	tst	r5, r2
 8000638:	d002      	beq.n	8000640 <HAL_ADC_IRQHandler+0x70>
 800063a:	685a      	ldr	r2, [r3, #4]
 800063c:	4215      	tst	r5, r2
 800063e:	d121      	bne.n	8000684 <HAL_ADC_IRQHandler+0xb4>
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8000640:	2210      	movs	r2, #16
 8000642:	6819      	ldr	r1, [r3, #0]
 8000644:	420a      	tst	r2, r1
 8000646:	d014      	beq.n	8000672 <HAL_ADC_IRQHandler+0xa2>
 8000648:	6859      	ldr	r1, [r3, #4]
 800064a:	420a      	tst	r2, r1
 800064c:	d011      	beq.n	8000672 <HAL_ADC_IRQHandler+0xa2>
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800064e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000650:	2a01      	cmp	r2, #1
 8000652:	d002      	beq.n	800065a <HAL_ADC_IRQHandler+0x8a>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8000654:	68da      	ldr	r2, [r3, #12]
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8000656:	07d2      	lsls	r2, r2, #31
 8000658:	d509      	bpl.n	800066e <HAL_ADC_IRQHandler+0x9e>
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800065a:	2102      	movs	r1, #2
 800065c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
      HAL_ADC_ErrorCallback(hadc);
 800065e:	0020      	movs	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000660:	430a      	orrs	r2, r1
 8000662:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000664:	2210      	movs	r2, #16
 8000666:	601a      	str	r2, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 8000668:	f7ff ffb0 	bl	80005cc <HAL_ADC_ErrorCallback>
 800066c:	6823      	ldr	r3, [r4, #0]
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800066e:	2210      	movs	r2, #16
 8000670:	601a      	str	r2, [r3, #0]
}
 8000672:	bd70      	pop	{r4, r5, r6, pc}
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000674:	2208      	movs	r2, #8
 8000676:	6819      	ldr	r1, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000678:	420a      	tst	r2, r1
 800067a:	d0da      	beq.n	8000632 <HAL_ADC_IRQHandler+0x62>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800067c:	6859      	ldr	r1, [r3, #4]
 800067e:	420a      	tst	r2, r1
 8000680:	d0d7      	beq.n	8000632 <HAL_ADC_IRQHandler+0x62>
 8000682:	e7af      	b.n	80005e4 <HAL_ADC_IRQHandler+0x14>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000684:	2380      	movs	r3, #128	; 0x80
 8000686:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000688:	025b      	lsls	r3, r3, #9
 800068a:	4313      	orrs	r3, r2
 800068c:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800068e:	0020      	movs	r0, r4
 8000690:	f7ff ff9a 	bl	80005c8 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000694:	6823      	ldr	r3, [r4, #0]
 8000696:	601d      	str	r5, [r3, #0]
 8000698:	e7d2      	b.n	8000640 <HAL_ADC_IRQHandler+0x70>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800069a:	2220      	movs	r2, #32
 800069c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800069e:	4313      	orrs	r3, r2
 80006a0:	6463      	str	r3, [r4, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80006a2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80006a4:	3a1f      	subs	r2, #31
 80006a6:	4313      	orrs	r3, r2
 80006a8:	64a3      	str	r3, [r4, #72]	; 0x48
 80006aa:	e7bc      	b.n	8000626 <HAL_ADC_IRQHandler+0x56>
 80006ac:	fffffefe 	.word	0xfffffefe

080006b0 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80006b0:	2300      	movs	r3, #0
{
 80006b2:	b570      	push	{r4, r5, r6, lr}
 80006b4:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 80006b6:	9301      	str	r3, [sp, #4]
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80006b8:	3340      	adds	r3, #64	; 0x40
 80006ba:	5cc2      	ldrb	r2, [r0, r3]
{
 80006bc:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80006be:	2002      	movs	r0, #2
 80006c0:	2a01      	cmp	r2, #1
 80006c2:	d03c      	beq.n	800073e <HAL_ADC_ConfigChannel+0x8e>
 80006c4:	2201      	movs	r2, #1
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80006c6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  __HAL_LOCK(hadc);
 80006c8:	54e2      	strb	r2, [r4, r3]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80006ca:	6823      	ldr	r3, [r4, #0]
 80006cc:	689d      	ldr	r5, [r3, #8]
 80006ce:	076d      	lsls	r5, r5, #29
 80006d0:	d42d      	bmi.n	800072e <HAL_ADC_ConfigChannel+0x7e>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80006d2:	4d35      	ldr	r5, [pc, #212]	; (80007a8 <HAL_ADC_ConfigChannel+0xf8>)
 80006d4:	684e      	ldr	r6, [r1, #4]
 80006d6:	42ae      	cmp	r6, r5
 80006d8:	d033      	beq.n	8000742 <HAL_ADC_ConfigChannel+0x92>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80006da:	680d      	ldr	r5, [r1, #0]
 80006dc:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 80006de:	40aa      	lsls	r2, r5
 80006e0:	4332      	orrs	r2, r6
 80006e2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80006e4:	2280      	movs	r2, #128	; 0x80
 80006e6:	0552      	lsls	r2, r2, #21
 80006e8:	4290      	cmp	r0, r2
 80006ea:	d00f      	beq.n	800070c <HAL_ADC_ConfigChannel+0x5c>
 80006ec:	3801      	subs	r0, #1
 80006ee:	2806      	cmp	r0, #6
 80006f0:	d90c      	bls.n	800070c <HAL_ADC_ConfigChannel+0x5c>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80006f2:	2207      	movs	r2, #7
 80006f4:	6888      	ldr	r0, [r1, #8]
 80006f6:	6959      	ldr	r1, [r3, #20]
 80006f8:	4011      	ands	r1, r2
 80006fa:	4288      	cmp	r0, r1
 80006fc:	d006      	beq.n	800070c <HAL_ADC_ConfigChannel+0x5c>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80006fe:	6959      	ldr	r1, [r3, #20]
 8000700:	4391      	bics	r1, r2
 8000702:	6159      	str	r1, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000704:	6959      	ldr	r1, [r3, #20]
 8000706:	4002      	ands	r2, r0
 8000708:	430a      	orrs	r2, r1
 800070a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800070c:	002b      	movs	r3, r5
 800070e:	3b10      	subs	r3, #16
 8000710:	2b02      	cmp	r3, #2
 8000712:	d829      	bhi.n	8000768 <HAL_ADC_ConfigChannel+0xb8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000714:	4a25      	ldr	r2, [pc, #148]	; (80007ac <HAL_ADC_ConfigChannel+0xfc>)
 8000716:	6813      	ldr	r3, [r2, #0]
 8000718:	2d10      	cmp	r5, #16
 800071a:	d027      	beq.n	800076c <HAL_ADC_ConfigChannel+0xbc>
 800071c:	2280      	movs	r2, #128	; 0x80
 800071e:	2d11      	cmp	r5, #17
 8000720:	d03c      	beq.n	800079c <HAL_ADC_ConfigChannel+0xec>
 8000722:	0452      	lsls	r2, r2, #17
 8000724:	4313      	orrs	r3, r2
 8000726:	4a21      	ldr	r2, [pc, #132]	; (80007ac <HAL_ADC_ConfigChannel+0xfc>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000728:	2000      	movs	r0, #0
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800072a:	6013      	str	r3, [r2, #0]
 800072c:	e004      	b.n	8000738 <HAL_ADC_ConfigChannel+0x88>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800072e:	2220      	movs	r2, #32
    
    tmp_hal_status = HAL_ERROR;
 8000730:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000732:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000734:	4313      	orrs	r3, r2
 8000736:	6463      	str	r3, [r4, #68]	; 0x44
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000738:	2200      	movs	r2, #0
 800073a:	2340      	movs	r3, #64	; 0x40
 800073c:	54e2      	strb	r2, [r4, r3]
  
  /* Return function status */
  return tmp_hal_status;
}
 800073e:	b002      	add	sp, #8
 8000740:	bd70      	pop	{r4, r5, r6, pc}
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000742:	6809      	ldr	r1, [r1, #0]
 8000744:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000746:	408a      	lsls	r2, r1
 8000748:	4390      	bics	r0, r2
 800074a:	6298      	str	r0, [r3, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800074c:	000b      	movs	r3, r1
 800074e:	3b10      	subs	r3, #16
 8000750:	2b02      	cmp	r3, #2
 8000752:	d809      	bhi.n	8000768 <HAL_ADC_ConfigChannel+0xb8>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000754:	4b15      	ldr	r3, [pc, #84]	; (80007ac <HAL_ADC_ConfigChannel+0xfc>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2910      	cmp	r1, #16
 800075a:	d021      	beq.n	80007a0 <HAL_ADC_ConfigChannel+0xf0>
 800075c:	2911      	cmp	r1, #17
 800075e:	d021      	beq.n	80007a4 <HAL_ADC_ConfigChannel+0xf4>
 8000760:	4a13      	ldr	r2, [pc, #76]	; (80007b0 <HAL_ADC_ConfigChannel+0x100>)
 8000762:	4013      	ands	r3, r2
 8000764:	4a11      	ldr	r2, [pc, #68]	; (80007ac <HAL_ADC_ConfigChannel+0xfc>)
 8000766:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000768:	2000      	movs	r0, #0
 800076a:	e7e5      	b.n	8000738 <HAL_ADC_ConfigChannel+0x88>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800076c:	2180      	movs	r1, #128	; 0x80
 800076e:	0409      	lsls	r1, r1, #16
 8000770:	430b      	orrs	r3, r1
 8000772:	6013      	str	r3, [r2, #0]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000774:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <HAL_ADC_ConfigChannel+0x104>)
 8000776:	4910      	ldr	r1, [pc, #64]	; (80007b8 <HAL_ADC_ConfigChannel+0x108>)
 8000778:	6818      	ldr	r0, [r3, #0]
 800077a:	f7ff fcc5 	bl	8000108 <__udivsi3>
 800077e:	0083      	lsls	r3, r0, #2
 8000780:	1818      	adds	r0, r3, r0
 8000782:	0040      	lsls	r0, r0, #1
 8000784:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 8000786:	9b01      	ldr	r3, [sp, #4]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d0ed      	beq.n	8000768 <HAL_ADC_ConfigChannel+0xb8>
            wait_loop_index--;
 800078c:	9b01      	ldr	r3, [sp, #4]
 800078e:	3b01      	subs	r3, #1
 8000790:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000792:	9b01      	ldr	r3, [sp, #4]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d1f9      	bne.n	800078c <HAL_ADC_ConfigChannel+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000798:	2000      	movs	r0, #0
 800079a:	e7cd      	b.n	8000738 <HAL_ADC_ConfigChannel+0x88>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800079c:	03d2      	lsls	r2, r2, #15
 800079e:	e7c1      	b.n	8000724 <HAL_ADC_ConfigChannel+0x74>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80007a0:	4a06      	ldr	r2, [pc, #24]	; (80007bc <HAL_ADC_ConfigChannel+0x10c>)
 80007a2:	e7de      	b.n	8000762 <HAL_ADC_ConfigChannel+0xb2>
 80007a4:	4a06      	ldr	r2, [pc, #24]	; (80007c0 <HAL_ADC_ConfigChannel+0x110>)
 80007a6:	e7dc      	b.n	8000762 <HAL_ADC_ConfigChannel+0xb2>
 80007a8:	00001001 	.word	0x00001001
 80007ac:	40012708 	.word	0x40012708
 80007b0:	feffffff 	.word	0xfeffffff
 80007b4:	20000068 	.word	0x20000068
 80007b8:	000f4240 	.word	0x000f4240
 80007bc:	ff7fffff 	.word	0xff7fffff
 80007c0:	ffbfffff 	.word	0xffbfffff

080007c4 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80007c4:	b570      	push	{r4, r5, r6, lr}
 80007c6:	0004      	movs	r4, r0
 80007c8:	b082      	sub	sp, #8
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t regshift = COMP_CSR_COMP1_SHIFT;
  
  /* Check the COMP handle allocation and lock status */
  if((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 80007ca:	2800      	cmp	r0, #0
 80007cc:	d03b      	beq.n	8000846 <HAL_COMP_Init+0x82>
 80007ce:	6a83      	ldr	r3, [r0, #40]	; 0x28
  {
    status = HAL_ERROR;
 80007d0:	2001      	movs	r0, #1
  if((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 80007d2:	06db      	lsls	r3, r3, #27
 80007d4:	d501      	bpl.n	80007da <HAL_COMP_Init+0x16>
    /* Initialize the COMP state*/
    hcomp->State = HAL_COMP_STATE_READY;
  }
  
  return status;
}
 80007d6:	b002      	add	sp, #8
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SYSCFG_CLK_ENABLE();  
 80007da:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <HAL_COMP_Init+0x8c>)
 80007dc:	699a      	ldr	r2, [r3, #24]
 80007de:	4302      	orrs	r2, r0
 80007e0:	619a      	str	r2, [r3, #24]
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4018      	ands	r0, r3
 80007e6:	9001      	str	r0, [sp, #4]
    HAL_COMP_MspInit(hcomp);
 80007e8:	0020      	movs	r0, r4
    __HAL_RCC_SYSCFG_CLK_ENABLE();  
 80007ea:	9b01      	ldr	r3, [sp, #4]
    HAL_COMP_MspInit(hcomp);
 80007ec:	f004 fdb0 	bl	8005350 <HAL_COMP_MspInit>
    if(hcomp->State == HAL_COMP_STATE_RESET)
 80007f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d024      	beq.n	8000840 <HAL_COMP_Init+0x7c>
    hcomp->State = HAL_COMP_STATE_BUSY;
 80007f6:	2302      	movs	r3, #2
    if(hcomp->Instance == COMP2)
 80007f8:	6822      	ldr	r2, [r4, #0]
    hcomp->State = HAL_COMP_STATE_BUSY;
 80007fa:	62a3      	str	r3, [r4, #40]	; 0x28
    if(hcomp->Instance == COMP2)
 80007fc:	4b15      	ldr	r3, [pc, #84]	; (8000854 <HAL_COMP_Init+0x90>)
 80007fe:	429a      	cmp	r2, r3
 8000800:	d023      	beq.n	800084a <HAL_COMP_Init+0x86>
  uint32_t regshift = COMP_CSR_COMP1_SHIFT;
 8000802:	2500      	movs	r5, #0
    if(hcomp->Instance == COMP2)
 8000804:	4914      	ldr	r1, [pc, #80]	; (8000858 <HAL_COMP_Init+0x94>)
    MODIFY_REG(COMP->CSR, 
 8000806:	68a6      	ldr	r6, [r4, #8]
 8000808:	6863      	ldr	r3, [r4, #4]
 800080a:	4a14      	ldr	r2, [pc, #80]	; (800085c <HAL_COMP_Init+0x98>)
 800080c:	4333      	orrs	r3, r6
 800080e:	68e6      	ldr	r6, [r4, #12]
 8000810:	6810      	ldr	r0, [r2, #0]
 8000812:	4333      	orrs	r3, r6
 8000814:	6926      	ldr	r6, [r4, #16]
 8000816:	4001      	ands	r1, r0
 8000818:	4333      	orrs	r3, r6
 800081a:	6966      	ldr	r6, [r4, #20]
 800081c:	4333      	orrs	r3, r6
 800081e:	69a6      	ldr	r6, [r4, #24]
 8000820:	4333      	orrs	r3, r6
 8000822:	40ab      	lsls	r3, r5
 8000824:	430b      	orrs	r3, r1
 8000826:	6013      	str	r3, [r2, #0]
    if(hcomp->Init.WindowMode != COMP_WINDOWMODE_DISABLE)
 8000828:	69e3      	ldr	r3, [r4, #28]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d004      	beq.n	8000838 <HAL_COMP_Init+0x74>
      COMP->CSR |= COMP_CSR_WNDWEN;
 800082e:	2380      	movs	r3, #128	; 0x80
 8000830:	6811      	ldr	r1, [r2, #0]
 8000832:	041b      	lsls	r3, r3, #16
 8000834:	430b      	orrs	r3, r1
 8000836:	6013      	str	r3, [r2, #0]
    hcomp->State = HAL_COMP_STATE_READY;
 8000838:	2301      	movs	r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 800083a:	2000      	movs	r0, #0
    hcomp->State = HAL_COMP_STATE_READY;
 800083c:	62a3      	str	r3, [r4, #40]	; 0x28
 800083e:	e7ca      	b.n	80007d6 <HAL_COMP_Init+0x12>
      hcomp->Lock = HAL_UNLOCKED;
 8000840:	2224      	movs	r2, #36	; 0x24
 8000842:	54a3      	strb	r3, [r4, r2]
 8000844:	e7d7      	b.n	80007f6 <HAL_COMP_Init+0x32>
    status = HAL_ERROR;
 8000846:	2001      	movs	r0, #1
 8000848:	e7c5      	b.n	80007d6 <HAL_COMP_Init+0x12>
 800084a:	4905      	ldr	r1, [pc, #20]	; (8000860 <HAL_COMP_Init+0x9c>)
      regshift = COMP_CSR_COMP2_SHIFT;
 800084c:	2510      	movs	r5, #16
 800084e:	e7da      	b.n	8000806 <HAL_COMP_Init+0x42>
 8000850:	40021000 	.word	0x40021000
 8000854:	4001001e 	.word	0x4001001e
 8000858:	ffffc081 	.word	0xffffc081
 800085c:	4001001c 	.word	0x4001001c
 8000860:	c081ffff 	.word	0xc081ffff

08000864 <HAL_COMP_Start>:
  * @brief  Start the comparator 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{ 
 8000864:	1e03      	subs	r3, r0, #0
  uint32_t wait_loop_index = 0U;
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t regshift = COMP_CSR_COMP1_SHIFT;
  
  /* Check the COMP handle allocation and lock status */
  if((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8000866:	d013      	beq.n	8000890 <HAL_COMP_Start+0x2c>
 8000868:	6a82      	ldr	r2, [r0, #40]	; 0x28
  {
    status = HAL_ERROR;
 800086a:	2001      	movs	r0, #1
  if((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 800086c:	06d2      	lsls	r2, r2, #27
 800086e:	d402      	bmi.n	8000876 <HAL_COMP_Start+0x12>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 8000870:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000872:	2a01      	cmp	r2, #1
 8000874:	d000      	beq.n	8000878 <HAL_COMP_Start+0x14>
      status = HAL_ERROR;
    }
  }

  return status;
}
 8000876:	4770      	bx	lr
      if(hcomp->Instance == COMP2)
 8000878:	4a08      	ldr	r2, [pc, #32]	; (800089c <HAL_COMP_Start+0x38>)
 800087a:	6819      	ldr	r1, [r3, #0]
 800087c:	4291      	cmp	r1, r2
 800087e:	d009      	beq.n	8000894 <HAL_COMP_Start+0x30>
      SET_BIT(COMP->CSR, COMP_CSR_COMPxEN << regshift);
 8000880:	4907      	ldr	r1, [pc, #28]	; (80008a0 <HAL_COMP_Start+0x3c>)
 8000882:	680a      	ldr	r2, [r1, #0]
 8000884:	4302      	orrs	r2, r0
 8000886:	600a      	str	r2, [r1, #0]
      hcomp->State = HAL_COMP_STATE_BUSY;
 8000888:	2202      	movs	r2, #2
 800088a:	2000      	movs	r0, #0
 800088c:	629a      	str	r2, [r3, #40]	; 0x28
 800088e:	e7f2      	b.n	8000876 <HAL_COMP_Start+0x12>
    status = HAL_ERROR;
 8000890:	2001      	movs	r0, #1
 8000892:	e7f0      	b.n	8000876 <HAL_COMP_Start+0x12>
      if(hcomp->Instance == COMP2)
 8000894:	2080      	movs	r0, #128	; 0x80
 8000896:	0240      	lsls	r0, r0, #9
 8000898:	e7f2      	b.n	8000880 <HAL_COMP_Start+0x1c>
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	4001001e 	.word	0x4001001e
 80008a0:	4001001c 	.word	0x4001001c

080008a4 <HAL_COMP_Stop>:
  * @brief  Stop the comparator 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Stop(COMP_HandleTypeDef *hcomp)
{ 
 80008a4:	1e03      	subs	r3, r0, #0
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t regshift = COMP_CSR_COMP1_SHIFT;
  
  /* Check the COMP handle allocation and lock status */
  if((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 80008a6:	d014      	beq.n	80008d2 <HAL_COMP_Stop+0x2e>
 80008a8:	6a82      	ldr	r2, [r0, #40]	; 0x28
  {
    status = HAL_ERROR;
 80008aa:	2001      	movs	r0, #1
  if((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 80008ac:	06d2      	lsls	r2, r2, #27
 80008ae:	d402      	bmi.n	80008b6 <HAL_COMP_Stop+0x12>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_BUSY)
 80008b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80008b2:	2a02      	cmp	r2, #2
 80008b4:	d000      	beq.n	80008b8 <HAL_COMP_Stop+0x14>
      status = HAL_ERROR;
    }
  }
  
  return status;
}
 80008b6:	4770      	bx	lr
      if(hcomp->Instance == COMP2)
 80008b8:	4a08      	ldr	r2, [pc, #32]	; (80008dc <HAL_COMP_Stop+0x38>)
 80008ba:	6819      	ldr	r1, [r3, #0]
 80008bc:	4291      	cmp	r1, r2
 80008be:	d00a      	beq.n	80008d6 <HAL_COMP_Stop+0x32>
 80008c0:	3803      	subs	r0, #3
      CLEAR_BIT(COMP->CSR, COMP_CSR_COMPxEN << regshift);
 80008c2:	4907      	ldr	r1, [pc, #28]	; (80008e0 <HAL_COMP_Stop+0x3c>)
 80008c4:	680a      	ldr	r2, [r1, #0]
 80008c6:	4002      	ands	r2, r0
 80008c8:	600a      	str	r2, [r1, #0]
      hcomp->State = HAL_COMP_STATE_READY;
 80008ca:	2201      	movs	r2, #1
 80008cc:	2000      	movs	r0, #0
 80008ce:	629a      	str	r2, [r3, #40]	; 0x28
 80008d0:	e7f1      	b.n	80008b6 <HAL_COMP_Stop+0x12>
    status = HAL_ERROR;
 80008d2:	2001      	movs	r0, #1
 80008d4:	e7ef      	b.n	80008b6 <HAL_COMP_Stop+0x12>
      if(hcomp->Instance == COMP2)
 80008d6:	4803      	ldr	r0, [pc, #12]	; (80008e4 <HAL_COMP_Stop+0x40>)
 80008d8:	e7f3      	b.n	80008c2 <HAL_COMP_Stop+0x1e>
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	4001001e 	.word	0x4001001e
 80008e0:	4001001c 	.word	0x4001001c
 80008e4:	fffeffff 	.word	0xfffeffff

080008e8 <HAL_COMP_Start_IT>:
  * @brief  Enables the interrupt and starts the comparator
  * @param  hcomp COMP handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_COMP_Start_IT(COMP_HandleTypeDef *hcomp)
{
 80008e8:	b510      	push	{r4, lr}
 80008ea:	1e03      	subs	r3, r0, #0
  if((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 80008ec:	d034      	beq.n	8000958 <HAL_COMP_Start_IT+0x70>
 80008ee:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80008f0:	2001      	movs	r0, #1
 80008f2:	06d2      	lsls	r2, r2, #27
 80008f4:	d402      	bmi.n	80008fc <HAL_COMP_Start_IT+0x14>
    if(hcomp->State == HAL_COMP_STATE_READY)
 80008f6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80008f8:	2c01      	cmp	r4, #1
 80008fa:	d000      	beq.n	80008fe <HAL_COMP_Start_IT+0x16>
    /* Enable Exti interrupt mode */
    SET_BIT(EXTI->IMR, extiline);
  }

  return status;
}
 80008fc:	bd10      	pop	{r4, pc}
      if(hcomp->Instance == COMP2)
 80008fe:	6818      	ldr	r0, [r3, #0]
 8000900:	4a1e      	ldr	r2, [pc, #120]	; (800097c <HAL_COMP_Start_IT+0x94>)
 8000902:	4290      	cmp	r0, r2
 8000904:	d02e      	beq.n	8000964 <HAL_COMP_Start_IT+0x7c>
      SET_BIT(COMP->CSR, COMP_CSR_COMPxEN << regshift);
 8000906:	4a1e      	ldr	r2, [pc, #120]	; (8000980 <HAL_COMP_Start_IT+0x98>)
 8000908:	6811      	ldr	r1, [r2, #0]
 800090a:	4321      	orrs	r1, r4
 800090c:	6011      	str	r1, [r2, #0]
      hcomp->State = HAL_COMP_STATE_BUSY;
 800090e:	2102      	movs	r1, #2
 8000910:	6299      	str	r1, [r3, #40]	; 0x28
    extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 8000912:	4290      	cmp	r0, r2
 8000914:	d022      	beq.n	800095c <HAL_COMP_Start_IT+0x74>
 8000916:	2180      	movs	r1, #128	; 0x80
 8000918:	4a1a      	ldr	r2, [pc, #104]	; (8000984 <HAL_COMP_Start_IT+0x9c>)
 800091a:	03c9      	lsls	r1, r1, #15
    if((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_IT_RISING) != RESET)
 800091c:	6a1b      	ldr	r3, [r3, #32]
      SET_BIT(EXTI->RTSR, extiline);
 800091e:	4c1a      	ldr	r4, [pc, #104]	; (8000988 <HAL_COMP_Start_IT+0xa0>)
    if((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_IT_RISING) != RESET)
 8000920:	07d8      	lsls	r0, r3, #31
 8000922:	d50f      	bpl.n	8000944 <HAL_COMP_Start_IT+0x5c>
      SET_BIT(EXTI->RTSR, extiline);
 8000924:	68a0      	ldr	r0, [r4, #8]
 8000926:	4308      	orrs	r0, r1
 8000928:	60a0      	str	r0, [r4, #8]
    if((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_IT_FALLING) != RESET)
 800092a:	079b      	lsls	r3, r3, #30
 800092c:	d50f      	bpl.n	800094e <HAL_COMP_Start_IT+0x66>
      SET_BIT(EXTI->FTSR, extiline);
 800092e:	4a16      	ldr	r2, [pc, #88]	; (8000988 <HAL_COMP_Start_IT+0xa0>)
 8000930:	68d3      	ldr	r3, [r2, #12]
 8000932:	430b      	orrs	r3, r1
 8000934:	60d3      	str	r3, [r2, #12]
    WRITE_REG(EXTI->PR, extiline);
 8000936:	4b14      	ldr	r3, [pc, #80]	; (8000988 <HAL_COMP_Start_IT+0xa0>)
    SET_BIT(EXTI->IMR, extiline);
 8000938:	2000      	movs	r0, #0
    WRITE_REG(EXTI->PR, extiline);
 800093a:	6159      	str	r1, [r3, #20]
    SET_BIT(EXTI->IMR, extiline);
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	430a      	orrs	r2, r1
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	e7db      	b.n	80008fc <HAL_COMP_Start_IT+0x14>
      CLEAR_BIT(EXTI->RTSR, extiline);
 8000944:	68a0      	ldr	r0, [r4, #8]
 8000946:	4010      	ands	r0, r2
 8000948:	60a0      	str	r0, [r4, #8]
    if((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_IT_FALLING) != RESET)
 800094a:	079b      	lsls	r3, r3, #30
 800094c:	d4ef      	bmi.n	800092e <HAL_COMP_Start_IT+0x46>
      CLEAR_BIT(EXTI->FTSR, extiline);
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <HAL_COMP_Start_IT+0xa0>)
 8000950:	68d8      	ldr	r0, [r3, #12]
 8000952:	4002      	ands	r2, r0
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	e7ee      	b.n	8000936 <HAL_COMP_Start_IT+0x4e>
  if((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8000958:	2001      	movs	r0, #1
 800095a:	e7cf      	b.n	80008fc <HAL_COMP_Start_IT+0x14>
    extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 800095c:	2180      	movs	r1, #128	; 0x80
 800095e:	4a0b      	ldr	r2, [pc, #44]	; (800098c <HAL_COMP_Start_IT+0xa4>)
 8000960:	0389      	lsls	r1, r1, #14
 8000962:	e7db      	b.n	800091c <HAL_COMP_Start_IT+0x34>
      SET_BIT(COMP->CSR, COMP_CSR_COMPxEN << regshift);
 8000964:	2280      	movs	r2, #128	; 0x80
 8000966:	4906      	ldr	r1, [pc, #24]	; (8000980 <HAL_COMP_Start_IT+0x98>)
 8000968:	0252      	lsls	r2, r2, #9
 800096a:	6808      	ldr	r0, [r1, #0]
 800096c:	4302      	orrs	r2, r0
 800096e:	600a      	str	r2, [r1, #0]
      hcomp->State = HAL_COMP_STATE_BUSY;
 8000970:	2202      	movs	r2, #2
    extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 8000972:	2180      	movs	r1, #128	; 0x80
      hcomp->State = HAL_COMP_STATE_BUSY;
 8000974:	629a      	str	r2, [r3, #40]	; 0x28
    extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 8000976:	03c9      	lsls	r1, r1, #15
      hcomp->State = HAL_COMP_STATE_BUSY;
 8000978:	4a02      	ldr	r2, [pc, #8]	; (8000984 <HAL_COMP_Start_IT+0x9c>)
 800097a:	e7cf      	b.n	800091c <HAL_COMP_Start_IT+0x34>
 800097c:	4001001e 	.word	0x4001001e
 8000980:	4001001c 	.word	0x4001001c
 8000984:	ffbfffff 	.word	0xffbfffff
 8000988:	40010400 	.word	0x40010400
 800098c:	ffdfffff 	.word	0xffdfffff

08000990 <HAL_COMP_GetOutputLevel>:
  uint32_t regshift = COMP_CSR_COMP1_SHIFT;
  
  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));
  
  if(hcomp->Instance == COMP2)
 8000990:	6802      	ldr	r2, [r0, #0]
 8000992:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <HAL_COMP_GetOutputLevel+0x20>)
 8000994:	2080      	movs	r0, #128	; 0x80
 8000996:	429a      	cmp	r2, r3
 8000998:	d007      	beq.n	80009aa <HAL_COMP_GetOutputLevel+0x1a>
 800099a:	01c0      	lsls	r0, r0, #7
  {
    regshift = COMP_CSR_COMP2_SHIFT;
  }
  level = READ_BIT(COMP->CSR, COMP_CSR_COMPxOUT << regshift);
 800099c:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <HAL_COMP_GetOutputLevel+0x24>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4018      	ands	r0, r3
  
  if(level != 0U)
 80009a2:	d001      	beq.n	80009a8 <HAL_COMP_GetOutputLevel+0x18>
  {
    return(COMP_OUTPUTLEVEL_HIGH);
 80009a4:	2080      	movs	r0, #128	; 0x80
 80009a6:	01c0      	lsls	r0, r0, #7
  }
  return(COMP_OUTPUTLEVEL_LOW);
}
 80009a8:	4770      	bx	lr
 80009aa:	05c0      	lsls	r0, r0, #23
 80009ac:	e7f6      	b.n	800099c <HAL_COMP_GetOutputLevel+0xc>
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	4001001e 	.word	0x4001001e
 80009b4:	4001001c 	.word	0x4001001c

080009b8 <HAL_COMP_IRQHandler>:
  uint32_t extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 80009b8:	4b08      	ldr	r3, [pc, #32]	; (80009dc <HAL_COMP_IRQHandler+0x24>)
 80009ba:	6802      	ldr	r2, [r0, #0]
{
 80009bc:	b510      	push	{r4, lr}
  uint32_t extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 80009be:	429a      	cmp	r2, r3
 80009c0:	d009      	beq.n	80009d6 <HAL_COMP_IRQHandler+0x1e>
 80009c2:	2280      	movs	r2, #128	; 0x80
 80009c4:	03d2      	lsls	r2, r2, #15
  if(READ_BIT(EXTI->PR, extiline) != RESET)
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <HAL_COMP_IRQHandler+0x28>)
 80009c8:	6959      	ldr	r1, [r3, #20]
 80009ca:	4211      	tst	r1, r2
 80009cc:	d002      	beq.n	80009d4 <HAL_COMP_IRQHandler+0x1c>
    WRITE_REG(EXTI->PR, extiline);
 80009ce:	615a      	str	r2, [r3, #20]
    HAL_COMP_TriggerCallback(hcomp);    
 80009d0:	f002 fe9a 	bl	8003708 <HAL_COMP_TriggerCallback>
}
 80009d4:	bd10      	pop	{r4, pc}
  uint32_t extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 80009d6:	2280      	movs	r2, #128	; 0x80
 80009d8:	0392      	lsls	r2, r2, #14
 80009da:	e7f4      	b.n	80009c6 <HAL_COMP_IRQHandler+0xe>
 80009dc:	4001001c 	.word	0x4001001c
 80009e0:	40010400 	.word	0x40010400

080009e4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009e4:	b570      	push	{r4, r5, r6, lr}
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80009e6:	2800      	cmp	r0, #0
 80009e8:	db14      	blt.n	8000a14 <HAL_NVIC_SetPriority+0x30>
 80009ea:	4a16      	ldr	r2, [pc, #88]	; (8000a44 <HAL_NVIC_SetPriority+0x60>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009ec:	2403      	movs	r4, #3
 80009ee:	4694      	mov	ip, r2
 80009f0:	22ff      	movs	r2, #255	; 0xff
 80009f2:	0883      	lsrs	r3, r0, #2
 80009f4:	4020      	ands	r0, r4
 80009f6:	0014      	movs	r4, r2
 80009f8:	26c0      	movs	r6, #192	; 0xc0
 80009fa:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009fc:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009fe:	4084      	lsls	r4, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a00:	400a      	ands	r2, r1
 8000a02:	4082      	lsls	r2, r0
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	4463      	add	r3, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a08:	00b6      	lsls	r6, r6, #2
 8000a0a:	599d      	ldr	r5, [r3, r6]
 8000a0c:	43a5      	bics	r5, r4
 8000a0e:	432a      	orrs	r2, r5
 8000a10:	519a      	str	r2, [r3, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000a12:	bd70      	pop	{r4, r5, r6, pc}
 8000a14:	4a0c      	ldr	r2, [pc, #48]	; (8000a48 <HAL_NVIC_SetPriority+0x64>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a16:	24ff      	movs	r4, #255	; 0xff
 8000a18:	4694      	mov	ip, r2
 8000a1a:	230f      	movs	r3, #15
 8000a1c:	2203      	movs	r2, #3
 8000a1e:	b2c0      	uxtb	r0, r0
 8000a20:	4003      	ands	r3, r0
 8000a22:	4010      	ands	r0, r2
 8000a24:	0022      	movs	r2, r4
 8000a26:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a28:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a2a:	4082      	lsls	r2, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a2c:	400c      	ands	r4, r1
 8000a2e:	4084      	lsls	r4, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a30:	3b08      	subs	r3, #8
 8000a32:	089b      	lsrs	r3, r3, #2
 8000a34:	009b      	lsls	r3, r3, #2
 8000a36:	4463      	add	r3, ip
 8000a38:	69dd      	ldr	r5, [r3, #28]
 8000a3a:	4395      	bics	r5, r2
 8000a3c:	432c      	orrs	r4, r5
 8000a3e:	61dc      	str	r4, [r3, #28]
 8000a40:	e7e7      	b.n	8000a12 <HAL_NVIC_SetPriority+0x2e>
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	e000e100 	.word	0xe000e100
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000a4c:	231f      	movs	r3, #31
 8000a4e:	4018      	ands	r0, r3
 8000a50:	3b1e      	subs	r3, #30
 8000a52:	4083      	lsls	r3, r0
 8000a54:	4a01      	ldr	r2, [pc, #4]	; (8000a5c <HAL_NVIC_EnableIRQ+0x10>)
 8000a56:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000a58:	4770      	bx	lr
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	e000e100 	.word	0xe000e100

08000a60 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a60:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <HAL_SYSTICK_Config+0x2c>)
 8000a62:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a64:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d80e      	bhi.n	8000a88 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a6a:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a6c:	4a08      	ldr	r2, [pc, #32]	; (8000a90 <HAL_SYSTICK_Config+0x30>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a6e:	4809      	ldr	r0, [pc, #36]	; (8000a94 <HAL_SYSTICK_Config+0x34>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a70:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a72:	6a03      	ldr	r3, [r0, #32]
 8000a74:	0609      	lsls	r1, r1, #24
 8000a76:	021b      	lsls	r3, r3, #8
 8000a78:	0a1b      	lsrs	r3, r3, #8
 8000a7a:	430b      	orrs	r3, r1
 8000a7c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a7e:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a80:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a82:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a84:	3307      	adds	r3, #7
 8000a86:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000a88:	4770      	bx	lr
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	00ffffff 	.word	0x00ffffff
 8000a90:	e000e010 	.word	0xe000e010
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000a98:	4a05      	ldr	r2, [pc, #20]	; (8000ab0 <HAL_SYSTICK_CLKSourceConfig+0x18>)
 8000a9a:	6813      	ldr	r3, [r2, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000a9c:	2804      	cmp	r0, #4
 8000a9e:	d003      	beq.n	8000aa8 <HAL_SYSTICK_CLKSourceConfig+0x10>
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000aa0:	2104      	movs	r1, #4
 8000aa2:	438b      	bics	r3, r1
 8000aa4:	6013      	str	r3, [r2, #0]
  }
}
 8000aa6:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000aa8:	4318      	orrs	r0, r3
 8000aaa:	6010      	str	r0, [r2, #0]
 8000aac:	e7fb      	b.n	8000aa6 <HAL_SYSTICK_CLKSourceConfig+0xe>
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	e000e010 	.word	0xe000e010

08000ab4 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000ab4:	4770      	bx	lr
 8000ab6:	46c0      	nop			; (mov r8, r8)

08000ab8 <HAL_SYSTICK_IRQHandler>:
{
 8000ab8:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 8000aba:	f7ff fffb 	bl	8000ab4 <HAL_SYSTICK_Callback>
}
 8000abe:	bd10      	pop	{r4, pc}

08000ac0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000ac0:	b570      	push	{r4, r5, r6, lr}
 8000ac2:	1e04      	subs	r4, r0, #0
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000ac4:	d02b      	beq.n	8000b1e <HAL_DMA_Init+0x5e>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ac6:	2521      	movs	r5, #33	; 0x21
 8000ac8:	2302      	movs	r3, #2
 8000aca:	5543      	strb	r3, [r0, r5]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000acc:	6800      	ldr	r0, [r0, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000ace:	4a15      	ldr	r2, [pc, #84]	; (8000b24 <HAL_DMA_Init+0x64>)
  tmp = hdma->Instance->CCR;
 8000ad0:	6803      	ldr	r3, [r0, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ad2:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000ad4:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8000ad6:	6863      	ldr	r3, [r4, #4]
 8000ad8:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ada:	68e1      	ldr	r1, [r4, #12]
 8000adc:	430b      	orrs	r3, r1
 8000ade:	6921      	ldr	r1, [r4, #16]
 8000ae0:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ae2:	6961      	ldr	r1, [r4, #20]
 8000ae4:	430b      	orrs	r3, r1
 8000ae6:	69a1      	ldr	r1, [r4, #24]
 8000ae8:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8000aea:	69e1      	ldr	r1, [r4, #28]
 8000aec:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8000aee:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000af0:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000af2:	4b0d      	ldr	r3, [pc, #52]	; (8000b28 <HAL_DMA_Init+0x68>)
 8000af4:	2114      	movs	r1, #20
 8000af6:	469c      	mov	ip, r3
 8000af8:	4460      	add	r0, ip
 8000afa:	f7ff fb05 	bl	8000108 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8000afe:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <HAL_DMA_Init+0x6c>)
  hdma->State = HAL_DMA_STATE_READY;
 8000b00:	2201      	movs	r2, #1
  hdma->DmaBaseAddress = DMA1;
 8000b02:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->XferCpltCallback = NULL;
 8000b04:	2300      	movs	r3, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000b06:	0080      	lsls	r0, r0, #2
 8000b08:	6420      	str	r0, [r4, #64]	; 0x40
  return HAL_OK;
 8000b0a:	2000      	movs	r0, #0
  hdma->XferCpltCallback = NULL;
 8000b0c:	62a3      	str	r3, [r4, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8000b0e:	62e3      	str	r3, [r4, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8000b10:	6323      	str	r3, [r4, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8000b12:	6363      	str	r3, [r4, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b14:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8000b16:	5562      	strb	r2, [r4, r5]
  hdma->Lock = HAL_UNLOCKED;
 8000b18:	321f      	adds	r2, #31
 8000b1a:	54a3      	strb	r3, [r4, r2]
}  
 8000b1c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000b1e:	2001      	movs	r0, #1
 8000b20:	e7fc      	b.n	8000b1c <HAL_DMA_Init+0x5c>
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	ffffc00f 	.word	0xffffc00f
 8000b28:	bffdfff8 	.word	0xbffdfff8
 8000b2c:	40020000 	.word	0x40020000

08000b30 <HAL_DMA_Start_IT>:
{
 8000b30:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8000b32:	2420      	movs	r4, #32
 8000b34:	5d05      	ldrb	r5, [r0, r4]
 8000b36:	2602      	movs	r6, #2
 8000b38:	2d01      	cmp	r5, #1
 8000b3a:	d008      	beq.n	8000b4e <HAL_DMA_Start_IT+0x1e>
 8000b3c:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8000b3e:	2721      	movs	r7, #33	; 0x21
  __HAL_LOCK(hdma);
 8000b40:	5505      	strb	r5, [r0, r4]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000b42:	5dc5      	ldrb	r5, [r0, r7]
 8000b44:	b2ed      	uxtb	r5, r5
 8000b46:	2d01      	cmp	r5, #1
 8000b48:	d003      	beq.n	8000b52 <HAL_DMA_Start_IT+0x22>
    __HAL_UNLOCK(hdma); 
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	5503      	strb	r3, [r0, r4]
} 
 8000b4e:	0030      	movs	r0, r6
 8000b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b52:	2400      	movs	r4, #0
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000b54:	55c6      	strb	r6, [r0, r7]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b56:	6384      	str	r4, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b58:	6804      	ldr	r4, [r0, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000b5a:	6c07      	ldr	r7, [r0, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b5c:	6826      	ldr	r6, [r4, #0]
 8000b5e:	43ae      	bics	r6, r5
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000b60:	40bd      	lsls	r5, r7
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b62:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000b64:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8000b66:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8000b68:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000b6a:	6843      	ldr	r3, [r0, #4]
 8000b6c:	2b10      	cmp	r3, #16
 8000b6e:	d00e      	beq.n	8000b8e <HAL_DMA_Start_IT+0x5e>
    hdma->Instance->CPAR = SrcAddress;
 8000b70:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 8000b72:	60e2      	str	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8000b74:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d00c      	beq.n	8000b94 <HAL_DMA_Start_IT+0x64>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b7a:	220e      	movs	r2, #14
 8000b7c:	6823      	ldr	r3, [r4, #0]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000b82:	2201      	movs	r2, #1
 8000b84:	6823      	ldr	r3, [r4, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000b86:	2600      	movs	r6, #0
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	6023      	str	r3, [r4, #0]
 8000b8c:	e7df      	b.n	8000b4e <HAL_DMA_Start_IT+0x1e>
    hdma->Instance->CPAR = DstAddress;
 8000b8e:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000b90:	60e1      	str	r1, [r4, #12]
 8000b92:	e7ef      	b.n	8000b74 <HAL_DMA_Start_IT+0x44>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000b94:	220a      	movs	r2, #10
 8000b96:	6823      	ldr	r3, [r4, #0]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000b9c:	6823      	ldr	r3, [r4, #0]
 8000b9e:	3a06      	subs	r2, #6
 8000ba0:	4393      	bics	r3, r2
 8000ba2:	6023      	str	r3, [r4, #0]
 8000ba4:	e7ed      	b.n	8000b82 <HAL_DMA_Start_IT+0x52>
 8000ba6:	46c0      	nop			; (mov r8, r8)

08000ba8 <HAL_DMA_IRQHandler>:
{
 8000ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000baa:	2504      	movs	r5, #4
 8000bac:	002e      	movs	r6, r5
 8000bae:	6c03      	ldr	r3, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000bb0:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000bb2:	409e      	lsls	r6, r3
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000bb4:	6822      	ldr	r2, [r4, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000bb6:	6801      	ldr	r1, [r0, #0]
 8000bb8:	680f      	ldr	r7, [r1, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000bba:	4216      	tst	r6, r2
 8000bbc:	d00d      	beq.n	8000bda <HAL_DMA_IRQHandler+0x32>
 8000bbe:	423d      	tst	r5, r7
 8000bc0:	d00b      	beq.n	8000bda <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000bc2:	680b      	ldr	r3, [r1, #0]
 8000bc4:	069b      	lsls	r3, r3, #26
 8000bc6:	d402      	bmi.n	8000bce <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000bc8:	680b      	ldr	r3, [r1, #0]
 8000bca:	43ab      	bics	r3, r5
 8000bcc:	600b      	str	r3, [r1, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000bce:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000bd0:	6066      	str	r6, [r4, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d000      	beq.n	8000bd8 <HAL_DMA_IRQHandler+0x30>
    	hdma->XferErrorCallback(hdma);
 8000bd6:	4798      	blx	r3
}  
 8000bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000bda:	2502      	movs	r5, #2
 8000bdc:	002e      	movs	r6, r5
 8000bde:	409e      	lsls	r6, r3
 8000be0:	4216      	tst	r6, r2
 8000be2:	d014      	beq.n	8000c0e <HAL_DMA_IRQHandler+0x66>
 8000be4:	423d      	tst	r5, r7
 8000be6:	d012      	beq.n	8000c0e <HAL_DMA_IRQHandler+0x66>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000be8:	680b      	ldr	r3, [r1, #0]
 8000bea:	069b      	lsls	r3, r3, #26
 8000bec:	d406      	bmi.n	8000bfc <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000bee:	220a      	movs	r2, #10
 8000bf0:	680b      	ldr	r3, [r1, #0]
 8000bf2:	4393      	bics	r3, r2
 8000bf4:	600b      	str	r3, [r1, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8000bf6:	2321      	movs	r3, #33	; 0x21
 8000bf8:	3a09      	subs	r2, #9
 8000bfa:	54c2      	strb	r2, [r0, r3]
  	__HAL_UNLOCK(hdma);
 8000bfc:	2320      	movs	r3, #32
 8000bfe:	2200      	movs	r2, #0
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000c00:	6066      	str	r6, [r4, #4]
  	__HAL_UNLOCK(hdma);
 8000c02:	54c2      	strb	r2, [r0, r3]
  	if(hdma->XferCpltCallback != NULL)
 8000c04:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d0e6      	beq.n	8000bd8 <HAL_DMA_IRQHandler+0x30>
    	hdma->XferErrorCallback(hdma);
 8000c0a:	4798      	blx	r3
 8000c0c:	e7e4      	b.n	8000bd8 <HAL_DMA_IRQHandler+0x30>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000c0e:	2508      	movs	r5, #8
 8000c10:	002e      	movs	r6, r5
 8000c12:	409e      	lsls	r6, r3
 8000c14:	4232      	tst	r2, r6
 8000c16:	d0df      	beq.n	8000bd8 <HAL_DMA_IRQHandler+0x30>
 8000c18:	423d      	tst	r5, r7
 8000c1a:	d0dd      	beq.n	8000bd8 <HAL_DMA_IRQHandler+0x30>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c1c:	680a      	ldr	r2, [r1, #0]
 8000c1e:	3506      	adds	r5, #6
 8000c20:	43aa      	bics	r2, r5
 8000c22:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000c24:	2201      	movs	r2, #1
 8000c26:	0011      	movs	r1, r2
 8000c28:	4099      	lsls	r1, r3
    hdma->State = HAL_DMA_STATE_READY;    
 8000c2a:	2321      	movs	r3, #33	; 0x21
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000c2c:	6061      	str	r1, [r4, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000c2e:	6382      	str	r2, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8000c30:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma); 
 8000c32:	2200      	movs	r2, #0
 8000c34:	3b01      	subs	r3, #1
 8000c36:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferErrorCallback != NULL)
 8000c38:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d0cc      	beq.n	8000bd8 <HAL_DMA_IRQHandler+0x30>
    	hdma->XferErrorCallback(hdma);
 8000c3e:	4798      	blx	r3
 8000c40:	e7ca      	b.n	8000bd8 <HAL_DMA_IRQHandler+0x30>
 8000c42:	46c0      	nop			; (mov r8, r8)

08000c44 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c46:	46de      	mov	lr, fp
 8000c48:	4657      	mov	r7, sl
 8000c4a:	464e      	mov	r6, r9
 8000c4c:	4645      	mov	r5, r8
 8000c4e:	b5e0      	push	{r5, r6, r7, lr}
 8000c50:	469b      	mov	fp, r3
 8000c52:	b083      	sub	sp, #12
  HAL_StatusTypeDef status = HAL_ERROR;
  uint8_t index = 0U;
  uint8_t nbiterations = 0U;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000c54:	4b67      	ldr	r3, [pc, #412]	; (8000df4 <HAL_FLASH_Program+0x1b0>)
{
 8000c56:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(&pFlash);
 8000c58:	469a      	mov	sl, r3
 8000c5a:	7e1b      	ldrb	r3, [r3, #24]
{
 8000c5c:	4680      	mov	r8, r0
 8000c5e:	4689      	mov	r9, r1
  __HAL_LOCK(&pFlash);
 8000c60:	2002      	movs	r0, #2
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d106      	bne.n	8000c74 <HAL_FLASH_Program+0x30>

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);

  return status;
}
 8000c66:	b003      	add	sp, #12
 8000c68:	bc3c      	pop	{r2, r3, r4, r5}
 8000c6a:	4690      	mov	r8, r2
 8000c6c:	4699      	mov	r9, r3
 8000c6e:	46a2      	mov	sl, r4
 8000c70:	46ab      	mov	fp, r5
 8000c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8000c74:	2301      	movs	r3, #1
 8000c76:	4652      	mov	r2, sl
 8000c78:	7613      	strb	r3, [r2, #24]
{
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000c7a:	f7ff fbe5 	bl	8000448 <HAL_GetTick>
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000c7e:	4c5e      	ldr	r4, [pc, #376]	; (8000df8 <HAL_FLASH_Program+0x1b4>)
  uint32_t tickstart = HAL_GetTick();
 8000c80:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000c82:	2501      	movs	r5, #1
  { 
    if (Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000c84:	4e5d      	ldr	r6, [pc, #372]	; (8000dfc <HAL_FLASH_Program+0x1b8>)
 8000c86:	e005      	b.n	8000c94 <HAL_FLASH_Program+0x50>
 8000c88:	f7ff fbde 	bl	8000448 <HAL_GetTick>
 8000c8c:	1bc0      	subs	r0, r0, r7
 8000c8e:	42b0      	cmp	r0, r6
 8000c90:	d900      	bls.n	8000c94 <HAL_FLASH_Program+0x50>
 8000c92:	e0a6      	b.n	8000de2 <HAL_FLASH_Program+0x19e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000c94:	68e3      	ldr	r3, [r4, #12]
 8000c96:	421d      	tst	r5, r3
 8000c98:	d1f6      	bne.n	8000c88 <HAL_FLASH_Program+0x44>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000c9a:	2320      	movs	r3, #32
 8000c9c:	68e2      	ldr	r2, [r4, #12]
 8000c9e:	4213      	tst	r3, r2
 8000ca0:	d000      	beq.n	8000ca4 <HAL_FLASH_Program+0x60>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000ca2:	60e3      	str	r3, [r4, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000ca4:	4b54      	ldr	r3, [pc, #336]	; (8000df8 <HAL_FLASH_Program+0x1b4>)
 8000ca6:	68da      	ldr	r2, [r3, #12]
 8000ca8:	06d2      	lsls	r2, r2, #27
 8000caa:	d402      	bmi.n	8000cb2 <HAL_FLASH_Program+0x6e>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000cac:	68db      	ldr	r3, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000cae:	075b      	lsls	r3, r3, #29
 8000cb0:	d51e      	bpl.n	8000cf0 <HAL_FLASH_Program+0xac>
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000cb2:	4b51      	ldr	r3, [pc, #324]	; (8000df8 <HAL_FLASH_Program+0x1b4>)
 8000cb4:	68db      	ldr	r3, [r3, #12]
 8000cb6:	06db      	lsls	r3, r3, #27
 8000cb8:	d400      	bmi.n	8000cbc <HAL_FLASH_Program+0x78>
 8000cba:	e094      	b.n	8000de6 <HAL_FLASH_Program+0x1a2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000cbc:	4653      	mov	r3, sl
 8000cbe:	2202      	movs	r2, #2
 8000cc0:	69db      	ldr	r3, [r3, #28]
 8000cc2:	2114      	movs	r1, #20
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	4652      	mov	r2, sl
 8000cc8:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8000cca:	2310      	movs	r3, #16
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000ccc:	4a4a      	ldr	r2, [pc, #296]	; (8000df8 <HAL_FLASH_Program+0x1b4>)
 8000cce:	68d2      	ldr	r2, [r2, #12]
 8000cd0:	0752      	lsls	r2, r2, #29
 8000cd2:	d506      	bpl.n	8000ce2 <HAL_FLASH_Program+0x9e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000cd4:	4653      	mov	r3, sl
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	69db      	ldr	r3, [r3, #28]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	4652      	mov	r2, sl
 8000cde:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8000ce0:	000b      	movs	r3, r1
    return HAL_ERROR;
 8000ce2:	2001      	movs	r0, #1
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000ce4:	4a44      	ldr	r2, [pc, #272]	; (8000df8 <HAL_FLASH_Program+0x1b4>)
 8000ce6:	60d3      	str	r3, [r2, #12]
  __HAL_UNLOCK(&pFlash);
 8000ce8:	2300      	movs	r3, #0
 8000cea:	4652      	mov	r2, sl
 8000cec:	7613      	strb	r3, [r2, #24]
  return status;
 8000cee:	e7ba      	b.n	8000c66 <HAL_FLASH_Program+0x22>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000cf0:	4643      	mov	r3, r8
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d07a      	beq.n	8000dec <HAL_FLASH_Program+0x1a8>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000cf6:	4642      	mov	r2, r8
      nbiterations = 4U;
 8000cf8:	2304      	movs	r3, #4
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000cfa:	2a02      	cmp	r2, #2
 8000cfc:	d078      	beq.n	8000df0 <HAL_FLASH_Program+0x1ac>
 8000cfe:	464a      	mov	r2, r9
 8000d00:	3b01      	subs	r3, #1
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	3202      	adds	r2, #2
 8000d08:	189b      	adds	r3, r3, r2
 8000d0a:	9300      	str	r3, [sp, #0]
      nbiterations = 4U;
 8000d0c:	2300      	movs	r3, #0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000d0e:	2501      	movs	r5, #1
      nbiterations = 4U;
 8000d10:	4698      	mov	r8, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000d12:	4c39      	ldr	r4, [pc, #228]	; (8000df8 <HAL_FLASH_Program+0x1b4>)
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000d14:	2220      	movs	r2, #32
 8000d16:	4643      	mov	r3, r8
 8000d18:	4252      	negs	r2, r2
 8000d1a:	189b      	adds	r3, r3, r2
 8000d1c:	d457      	bmi.n	8000dce <HAL_FLASH_Program+0x18a>
 8000d1e:	465a      	mov	r2, fp
 8000d20:	40da      	lsrs	r2, r3
 8000d22:	0013      	movs	r3, r2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000d24:	2200      	movs	r2, #0
 8000d26:	4651      	mov	r1, sl
 8000d28:	61ca      	str	r2, [r1, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000d2a:	6922      	ldr	r2, [r4, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000d2c:	b29b      	uxth	r3, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000d2e:	432a      	orrs	r2, r5
 8000d30:	6122      	str	r2, [r4, #16]
  *(__IO uint16_t*)Address = Data;
 8000d32:	464a      	mov	r2, r9
 8000d34:	8013      	strh	r3, [r2, #0]
  uint32_t tickstart = HAL_GetTick();
 8000d36:	f7ff fb87 	bl	8000448 <HAL_GetTick>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000d3a:	4e30      	ldr	r6, [pc, #192]	; (8000dfc <HAL_FLASH_Program+0x1b8>)
  uint32_t tickstart = HAL_GetTick();
 8000d3c:	0007      	movs	r7, r0
 8000d3e:	e004      	b.n	8000d4a <HAL_FLASH_Program+0x106>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000d40:	f7ff fb82 	bl	8000448 <HAL_GetTick>
 8000d44:	1bc0      	subs	r0, r0, r7
 8000d46:	42b0      	cmp	r0, r6
 8000d48:	d83c      	bhi.n	8000dc4 <HAL_FLASH_Program+0x180>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000d4a:	68e3      	ldr	r3, [r4, #12]
 8000d4c:	421d      	tst	r5, r3
 8000d4e:	d1f7      	bne.n	8000d40 <HAL_FLASH_Program+0xfc>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000d50:	2220      	movs	r2, #32
 8000d52:	68e3      	ldr	r3, [r4, #12]
 8000d54:	421a      	tst	r2, r3
 8000d56:	d001      	beq.n	8000d5c <HAL_FLASH_Program+0x118>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000d58:	2320      	movs	r3, #32
 8000d5a:	60e3      	str	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000d5c:	68e3      	ldr	r3, [r4, #12]
 8000d5e:	06db      	lsls	r3, r3, #27
 8000d60:	d402      	bmi.n	8000d68 <HAL_FLASH_Program+0x124>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000d62:	68e3      	ldr	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000d64:	075b      	lsls	r3, r3, #29
 8000d66:	d51f      	bpl.n	8000da8 <HAL_FLASH_Program+0x164>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000d68:	4b23      	ldr	r3, [pc, #140]	; (8000df8 <HAL_FLASH_Program+0x1b4>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	06db      	lsls	r3, r3, #27
 8000d6e:	d52b      	bpl.n	8000dc8 <HAL_FLASH_Program+0x184>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000d70:	4653      	mov	r3, sl
 8000d72:	2202      	movs	r2, #2
 8000d74:	69db      	ldr	r3, [r3, #28]
 8000d76:	2114      	movs	r1, #20
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	4652      	mov	r2, sl
 8000d7c:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8000d7e:	2310      	movs	r3, #16
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000d80:	4a1d      	ldr	r2, [pc, #116]	; (8000df8 <HAL_FLASH_Program+0x1b4>)
 8000d82:	68d2      	ldr	r2, [r2, #12]
 8000d84:	0752      	lsls	r2, r2, #29
 8000d86:	d506      	bpl.n	8000d96 <HAL_FLASH_Program+0x152>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000d88:	4653      	mov	r3, sl
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	69db      	ldr	r3, [r3, #28]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	4652      	mov	r2, sl
 8000d92:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8000d94:	000b      	movs	r3, r1
    return HAL_ERROR;
 8000d96:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000d98:	4a17      	ldr	r2, [pc, #92]	; (8000df8 <HAL_FLASH_Program+0x1b4>)
 8000d9a:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	4a16      	ldr	r2, [pc, #88]	; (8000df8 <HAL_FLASH_Program+0x1b4>)
 8000da0:	6913      	ldr	r3, [r2, #16]
 8000da2:	438b      	bics	r3, r1
 8000da4:	6113      	str	r3, [r2, #16]
 8000da6:	e79f      	b.n	8000ce8 <HAL_FLASH_Program+0xa4>
 8000da8:	6923      	ldr	r3, [r4, #16]
 8000daa:	43ab      	bics	r3, r5
 8000dac:	6123      	str	r3, [r4, #16]
 8000dae:	2310      	movs	r3, #16
 8000db0:	469c      	mov	ip, r3
 8000db2:	3b0e      	subs	r3, #14
 8000db4:	44e0      	add	r8, ip
 8000db6:	469c      	mov	ip, r3
    for (index = 0U; index < nbiterations; index++)
 8000db8:	9b00      	ldr	r3, [sp, #0]
 8000dba:	44e1      	add	r9, ip
 8000dbc:	454b      	cmp	r3, r9
 8000dbe:	d1a9      	bne.n	8000d14 <HAL_FLASH_Program+0xd0>
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	e791      	b.n	8000ce8 <HAL_FLASH_Program+0xa4>
        return HAL_TIMEOUT;
 8000dc4:	2003      	movs	r0, #3
 8000dc6:	e7e9      	b.n	8000d9c <HAL_FLASH_Program+0x158>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000dc8:	2104      	movs	r1, #4
  uint32_t flags = 0U;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	e7d8      	b.n	8000d80 <HAL_FLASH_Program+0x13c>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000dce:	4642      	mov	r2, r8
 8000dd0:	2320      	movs	r3, #32
 8000dd2:	1a9b      	subs	r3, r3, r2
 8000dd4:	465a      	mov	r2, fp
 8000dd6:	4641      	mov	r1, r8
 8000dd8:	409a      	lsls	r2, r3
 8000dda:	9b01      	ldr	r3, [sp, #4]
 8000ddc:	40cb      	lsrs	r3, r1
 8000dde:	4313      	orrs	r3, r2
 8000de0:	e7a0      	b.n	8000d24 <HAL_FLASH_Program+0xe0>
        return HAL_TIMEOUT;
 8000de2:	2003      	movs	r0, #3
 8000de4:	e780      	b.n	8000ce8 <HAL_FLASH_Program+0xa4>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000de6:	2104      	movs	r1, #4
  uint32_t flags = 0U;
 8000de8:	2300      	movs	r3, #0
 8000dea:	e76f      	b.n	8000ccc <HAL_FLASH_Program+0x88>
      nbiterations = 1U;
 8000dec:	2301      	movs	r3, #1
 8000dee:	e786      	b.n	8000cfe <HAL_FLASH_Program+0xba>
      nbiterations = 2U;
 8000df0:	3b02      	subs	r3, #2
 8000df2:	e784      	b.n	8000cfe <HAL_FLASH_Program+0xba>
 8000df4:	20000150 	.word	0x20000150
 8000df8:	40022000 	.word	0x40022000
 8000dfc:	0000c350 	.word	0x0000c350

08000e00 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8000e00:	4b05      	ldr	r3, [pc, #20]	; (8000e18 <HAL_FLASH_Unlock+0x18>)
    return HAL_ERROR;
 8000e02:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8000e04:	691a      	ldr	r2, [r3, #16]
 8000e06:	0612      	lsls	r2, r2, #24
 8000e08:	d504      	bpl.n	8000e14 <HAL_FLASH_Unlock+0x14>
  return HAL_OK; 
 8000e0a:	2000      	movs	r0, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000e0c:	4a03      	ldr	r2, [pc, #12]	; (8000e1c <HAL_FLASH_Unlock+0x1c>)
 8000e0e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000e10:	4a03      	ldr	r2, [pc, #12]	; (8000e20 <HAL_FLASH_Unlock+0x20>)
 8000e12:	605a      	str	r2, [r3, #4]
}
 8000e14:	4770      	bx	lr
 8000e16:	46c0      	nop			; (mov r8, r8)
 8000e18:	40022000 	.word	0x40022000
 8000e1c:	45670123 	.word	0x45670123
 8000e20:	cdef89ab 	.word	0xcdef89ab

08000e24 <FLASH_WaitForLastOperation>:
{
 8000e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e26:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000e28:	f7ff fb0e 	bl	8000448 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000e2c:	2501      	movs	r5, #1
  uint32_t tickstart = HAL_GetTick();
 8000e2e:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000e30:	4e1f      	ldr	r6, [pc, #124]	; (8000eb0 <FLASH_WaitForLastOperation+0x8c>)
 8000e32:	1c63      	adds	r3, r4, #1
 8000e34:	d125      	bne.n	8000e82 <FLASH_WaitForLastOperation+0x5e>
 8000e36:	2201      	movs	r2, #1
 8000e38:	491d      	ldr	r1, [pc, #116]	; (8000eb0 <FLASH_WaitForLastOperation+0x8c>)
 8000e3a:	68cb      	ldr	r3, [r1, #12]
 8000e3c:	421a      	tst	r2, r3
 8000e3e:	d1fc      	bne.n	8000e3a <FLASH_WaitForLastOperation+0x16>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000e40:	2220      	movs	r2, #32
 8000e42:	4b1b      	ldr	r3, [pc, #108]	; (8000eb0 <FLASH_WaitForLastOperation+0x8c>)
 8000e44:	68d9      	ldr	r1, [r3, #12]
 8000e46:	420a      	tst	r2, r1
 8000e48:	d127      	bne.n	8000e9a <FLASH_WaitForLastOperation+0x76>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000e4a:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <FLASH_WaitForLastOperation+0x8c>)
 8000e4c:	68da      	ldr	r2, [r3, #12]
 8000e4e:	06d2      	lsls	r2, r2, #27
 8000e50:	d403      	bmi.n	8000e5a <FLASH_WaitForLastOperation+0x36>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000e52:	68db      	ldr	r3, [r3, #12]
  return HAL_OK;
 8000e54:	2000      	movs	r0, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000e56:	075b      	lsls	r3, r3, #29
 8000e58:	d512      	bpl.n	8000e80 <FLASH_WaitForLastOperation+0x5c>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000e5a:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <FLASH_WaitForLastOperation+0x8c>)
 8000e5c:	68db      	ldr	r3, [r3, #12]
 8000e5e:	06db      	lsls	r3, r3, #27
 8000e60:	d41d      	bmi.n	8000e9e <FLASH_WaitForLastOperation+0x7a>
 8000e62:	2104      	movs	r1, #4
  uint32_t flags = 0U;
 8000e64:	2300      	movs	r3, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000e66:	4a12      	ldr	r2, [pc, #72]	; (8000eb0 <FLASH_WaitForLastOperation+0x8c>)
 8000e68:	68d2      	ldr	r2, [r2, #12]
 8000e6a:	0752      	lsls	r2, r2, #29
 8000e6c:	d505      	bpl.n	8000e7a <FLASH_WaitForLastOperation+0x56>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000e6e:	2001      	movs	r0, #1
 8000e70:	4a10      	ldr	r2, [pc, #64]	; (8000eb4 <FLASH_WaitForLastOperation+0x90>)
 8000e72:	69d3      	ldr	r3, [r2, #28]
 8000e74:	4303      	orrs	r3, r0
 8000e76:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8000e78:	000b      	movs	r3, r1
    return HAL_ERROR;
 8000e7a:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000e7c:	4a0c      	ldr	r2, [pc, #48]	; (8000eb0 <FLASH_WaitForLastOperation+0x8c>)
 8000e7e:	60d3      	str	r3, [r2, #12]
}
 8000e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000e82:	68f3      	ldr	r3, [r6, #12]
 8000e84:	421d      	tst	r5, r3
 8000e86:	d0db      	beq.n	8000e40 <FLASH_WaitForLastOperation+0x1c>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000e88:	2c00      	cmp	r4, #0
 8000e8a:	d004      	beq.n	8000e96 <FLASH_WaitForLastOperation+0x72>
 8000e8c:	f7ff fadc 	bl	8000448 <HAL_GetTick>
 8000e90:	1bc0      	subs	r0, r0, r7
 8000e92:	4284      	cmp	r4, r0
 8000e94:	d2cd      	bcs.n	8000e32 <FLASH_WaitForLastOperation+0xe>
        return HAL_TIMEOUT;
 8000e96:	2003      	movs	r0, #3
 8000e98:	e7f2      	b.n	8000e80 <FLASH_WaitForLastOperation+0x5c>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000e9a:	60da      	str	r2, [r3, #12]
 8000e9c:	e7d5      	b.n	8000e4a <FLASH_WaitForLastOperation+0x26>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000e9e:	2102      	movs	r1, #2
 8000ea0:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <FLASH_WaitForLastOperation+0x90>)
 8000ea2:	69d3      	ldr	r3, [r2, #28]
 8000ea4:	430b      	orrs	r3, r1
 8000ea6:	61d3      	str	r3, [r2, #28]
 8000ea8:	3112      	adds	r1, #18
    flags |= FLASH_FLAG_WRPERR;
 8000eaa:	2310      	movs	r3, #16
 8000eac:	e7db      	b.n	8000e66 <FLASH_WaitForLastOperation+0x42>
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	40022000 	.word	0x40022000
 8000eb4:	20000150 	.word	0x20000150

08000eb8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eba:	464f      	mov	r7, r9
 8000ebc:	4646      	mov	r6, r8
 8000ebe:	46d6      	mov	lr, sl
 8000ec0:	b5c0      	push	{r6, r7, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t address = 0U;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000ec2:	4f2f      	ldr	r7, [pc, #188]	; (8000f80 <HAL_FLASHEx_Erase+0xc8>)
{
 8000ec4:	0006      	movs	r6, r0
  __HAL_LOCK(&pFlash);
 8000ec6:	7e3b      	ldrb	r3, [r7, #24]
{
 8000ec8:	4689      	mov	r9, r1
  __HAL_LOCK(&pFlash);
 8000eca:	2002      	movs	r0, #2
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d041      	beq.n	8000f54 <HAL_FLASHEx_Erase+0x9c>
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	763b      	strb	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000ed4:	6833      	ldr	r3, [r6, #0]
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000ed6:	482b      	ldr	r0, [pc, #172]	; (8000f84 <HAL_FLASHEx_Erase+0xcc>)
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d034      	beq.n	8000f46 <HAL_FLASHEx_Erase+0x8e>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000edc:	f7ff ffa2 	bl	8000e24 <FLASH_WaitForLastOperation>
 8000ee0:	2800      	cmp	r0, #0
 8000ee2:	d134      	bne.n	8000f4e <HAL_FLASHEx_Erase+0x96>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	464a      	mov	r2, r9
 8000ee8:	425b      	negs	r3, r3
 8000eea:	6013      	str	r3, [r2, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000eec:	68b3      	ldr	r3, [r6, #8]
        for(address = pEraseInit->PageAddress;
 8000eee:	6875      	ldr	r5, [r6, #4]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000ef0:	029b      	lsls	r3, r3, #10
 8000ef2:	195b      	adds	r3, r3, r5
        for(address = pEraseInit->PageAddress;
 8000ef4:	429d      	cmp	r5, r3
 8000ef6:	d22a      	bcs.n	8000f4e <HAL_FLASHEx_Erase+0x96>
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000ef8:	2300      	movs	r3, #0

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000efa:	4c23      	ldr	r4, [pc, #140]	; (8000f88 <HAL_FLASHEx_Erase+0xd0>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000efc:	4698      	mov	r8, r3
 8000efe:	e00a      	b.n	8000f16 <HAL_FLASHEx_Erase+0x5e>
            address += FLASH_PAGE_SIZE)
 8000f00:	2380      	movs	r3, #128	; 0x80
 8000f02:	00db      	lsls	r3, r3, #3
 8000f04:	469c      	mov	ip, r3
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000f06:	6872      	ldr	r2, [r6, #4]
            address += FLASH_PAGE_SIZE)
 8000f08:	4465      	add	r5, ip
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000f0a:	4694      	mov	ip, r2
 8000f0c:	68b3      	ldr	r3, [r6, #8]
 8000f0e:	029b      	lsls	r3, r3, #10
 8000f10:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 8000f12:	42ab      	cmp	r3, r5
 8000f14:	d91c      	bls.n	8000f50 <HAL_FLASHEx_Erase+0x98>
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000f16:	2202      	movs	r2, #2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000f18:	4643      	mov	r3, r8
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000f1a:	4692      	mov	sl, r2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000f1c:	61fb      	str	r3, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000f1e:	6923      	ldr	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f20:	4818      	ldr	r0, [pc, #96]	; (8000f84 <HAL_FLASHEx_Erase+0xcc>)
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000f22:	4313      	orrs	r3, r2
 8000f24:	6123      	str	r3, [r4, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000f26:	6165      	str	r5, [r4, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000f28:	6923      	ldr	r3, [r4, #16]
 8000f2a:	323e      	adds	r2, #62	; 0x3e
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	6123      	str	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f30:	f7ff ff78 	bl	8000e24 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000f34:	4652      	mov	r2, sl
 8000f36:	6923      	ldr	r3, [r4, #16]
 8000f38:	4393      	bics	r3, r2
 8000f3a:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8000f3c:	2800      	cmp	r0, #0
 8000f3e:	d0df      	beq.n	8000f00 <HAL_FLASHEx_Erase+0x48>
            *PageError = address;
 8000f40:	464b      	mov	r3, r9
 8000f42:	601d      	str	r5, [r3, #0]
            break;
 8000f44:	e004      	b.n	8000f50 <HAL_FLASHEx_Erase+0x98>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000f46:	f7ff ff6d 	bl	8000e24 <FLASH_WaitForLastOperation>
 8000f4a:	2800      	cmp	r0, #0
 8000f4c:	d007      	beq.n	8000f5e <HAL_FLASHEx_Erase+0xa6>
  HAL_StatusTypeDef status = HAL_ERROR;
 8000f4e:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8000f50:	2300      	movs	r3, #0
 8000f52:	763b      	strb	r3, [r7, #24]
}
 8000f54:	bc1c      	pop	{r2, r3, r4}
 8000f56:	4690      	mov	r8, r2
 8000f58:	4699      	mov	r9, r3
 8000f5a:	46a2      	mov	sl, r4
 8000f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000f5e:	2504      	movs	r5, #4
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000f60:	2240      	movs	r2, #64	; 0x40
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000f62:	4c09      	ldr	r4, [pc, #36]	; (8000f88 <HAL_FLASHEx_Erase+0xd0>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000f64:	61f8      	str	r0, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000f66:	6923      	ldr	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f68:	4806      	ldr	r0, [pc, #24]	; (8000f84 <HAL_FLASHEx_Erase+0xcc>)
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000f6a:	432b      	orrs	r3, r5
 8000f6c:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000f6e:	6923      	ldr	r3, [r4, #16]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f74:	f7ff ff56 	bl	8000e24 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000f78:	6923      	ldr	r3, [r4, #16]
 8000f7a:	43ab      	bics	r3, r5
 8000f7c:	6123      	str	r3, [r4, #16]
 8000f7e:	e7e7      	b.n	8000f50 <HAL_FLASHEx_Erase+0x98>
 8000f80:	20000150 	.word	0x20000150
 8000f84:	0000c350 	.word	0x0000c350
 8000f88:	40022000 	.word	0x40022000

08000f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f8e:	46de      	mov	lr, fp
 8000f90:	4657      	mov	r7, sl
 8000f92:	464e      	mov	r6, r9
 8000f94:	4645      	mov	r5, r8
 8000f96:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000f98:	680b      	ldr	r3, [r1, #0]
{ 
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	468b      	mov	fp, r1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000f9e:	469c      	mov	ip, r3
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d100      	bne.n	8000fa8 <HAL_GPIO_Init+0x1c>
 8000fa6:	e0b7      	b.n	8001118 <HAL_GPIO_Init+0x18c>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa8:	4b64      	ldr	r3, [pc, #400]	; (800113c <HAL_GPIO_Init+0x1b0>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000faa:	46e1      	mov	r9, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fac:	469a      	mov	sl, r3
        temp = EXTI->IMR;
 8000fae:	4b64      	ldr	r3, [pc, #400]	; (8001140 <HAL_GPIO_Init+0x1b4>)
 8000fb0:	4698      	mov	r8, r3
 8000fb2:	e067      	b.n	8001084 <HAL_GPIO_Init+0xf8>
      temp = GPIOx->MODER;
 8000fb4:	6803      	ldr	r3, [r0, #0]
 8000fb6:	0056      	lsls	r6, r2, #1
 8000fb8:	469c      	mov	ip, r3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000fba:	2303      	movs	r3, #3
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fbc:	2703      	movs	r7, #3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000fbe:	40b3      	lsls	r3, r6
 8000fc0:	4664      	mov	r4, ip
 8000fc2:	43db      	mvns	r3, r3
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fc4:	400f      	ands	r7, r1
 8000fc6:	40b7      	lsls	r7, r6
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000fc8:	401c      	ands	r4, r3
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fca:	433c      	orrs	r4, r7
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fcc:	9f01      	ldr	r7, [sp, #4]
      GPIOx->MODER = temp;
 8000fce:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fd0:	3f01      	subs	r7, #1
 8000fd2:	2f01      	cmp	r7, #1
 8000fd4:	d800      	bhi.n	8000fd8 <HAL_GPIO_Init+0x4c>
 8000fd6:	e081      	b.n	80010dc <HAL_GPIO_Init+0x150>
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000fd8:	465c      	mov	r4, fp
      temp = GPIOx->PUPDR;
 8000fda:	68c5      	ldr	r5, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fdc:	402b      	ands	r3, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000fde:	68a5      	ldr	r5, [r4, #8]
 8000fe0:	40b5      	lsls	r5, r6
 8000fe2:	432b      	orrs	r3, r5
      GPIOx->PUPDR = temp;
 8000fe4:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000fe6:	2380      	movs	r3, #128	; 0x80
 8000fe8:	055b      	lsls	r3, r3, #21
 8000fea:	4219      	tst	r1, r3
 8000fec:	d046      	beq.n	800107c <HAL_GPIO_Init+0xf0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fee:	4653      	mov	r3, sl
 8000ff0:	2401      	movs	r4, #1
 8000ff2:	699b      	ldr	r3, [r3, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000ff4:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff6:	4323      	orrs	r3, r4
 8000ff8:	4654      	mov	r4, sl
 8000ffa:	61a3      	str	r3, [r4, #24]
 8000ffc:	69a3      	ldr	r3, [r4, #24]
 8000ffe:	2401      	movs	r4, #1
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001000:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001002:	4023      	ands	r3, r4
 8001004:	4c4f      	ldr	r4, [pc, #316]	; (8001144 <HAL_GPIO_Init+0x1b8>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001006:	4016      	ands	r6, r2
 8001008:	46a4      	mov	ip, r4
 800100a:	00b6      	lsls	r6, r6, #2
 800100c:	40b7      	lsls	r7, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800100e:	2490      	movs	r4, #144	; 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001010:	9303      	str	r3, [sp, #12]
 8001012:	9b03      	ldr	r3, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8001014:	0893      	lsrs	r3, r2, #2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	4463      	add	r3, ip
 800101a:	689d      	ldr	r5, [r3, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800101c:	05e4      	lsls	r4, r4, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800101e:	43bd      	bics	r5, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001020:	42a0      	cmp	r0, r4
 8001022:	d100      	bne.n	8001026 <HAL_GPIO_Init+0x9a>
 8001024:	e07f      	b.n	8001126 <HAL_GPIO_Init+0x19a>
 8001026:	4f48      	ldr	r7, [pc, #288]	; (8001148 <HAL_GPIO_Init+0x1bc>)
 8001028:	42b8      	cmp	r0, r7
 800102a:	d100      	bne.n	800102e <HAL_GPIO_Init+0xa2>
 800102c:	e07d      	b.n	800112a <HAL_GPIO_Init+0x19e>
 800102e:	4f47      	ldr	r7, [pc, #284]	; (800114c <HAL_GPIO_Init+0x1c0>)
 8001030:	42b8      	cmp	r0, r7
 8001032:	d100      	bne.n	8001036 <HAL_GPIO_Init+0xaa>
 8001034:	e07c      	b.n	8001130 <HAL_GPIO_Init+0x1a4>
 8001036:	4f46      	ldr	r7, [pc, #280]	; (8001150 <HAL_GPIO_Init+0x1c4>)
 8001038:	42b8      	cmp	r0, r7
 800103a:	d100      	bne.n	800103e <HAL_GPIO_Init+0xb2>
 800103c:	e07b      	b.n	8001136 <HAL_GPIO_Init+0x1aa>
 800103e:	2705      	movs	r7, #5
 8001040:	40b7      	lsls	r7, r6
 8001042:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8001044:	609d      	str	r5, [r3, #8]
        temp = EXTI->IMR;
 8001046:	4643      	mov	r3, r8
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001048:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->IMR;
 800104a:	681b      	ldr	r3, [r3, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800104c:	43e5      	mvns	r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800104e:	03cc      	lsls	r4, r1, #15
 8001050:	d45f      	bmi.n	8001112 <HAL_GPIO_Init+0x186>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001052:	402b      	ands	r3, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 8001054:	4644      	mov	r4, r8
 8001056:	6023      	str	r3, [r4, #0]

        temp = EXTI->EMR;
 8001058:	6863      	ldr	r3, [r4, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800105a:	038c      	lsls	r4, r1, #14
 800105c:	d456      	bmi.n	800110c <HAL_GPIO_Init+0x180>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 800105e:	402b      	ands	r3, r5
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 8001060:	4644      	mov	r4, r8
 8001062:	6063      	str	r3, [r4, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001064:	68a3      	ldr	r3, [r4, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001066:	02cc      	lsls	r4, r1, #11
 8001068:	d44d      	bmi.n	8001106 <HAL_GPIO_Init+0x17a>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800106a:	402b      	ands	r3, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 800106c:	4644      	mov	r4, r8
 800106e:	60a3      	str	r3, [r4, #8]

        temp = EXTI->FTSR;
 8001070:	68e3      	ldr	r3, [r4, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001072:	0289      	lsls	r1, r1, #10
 8001074:	d444      	bmi.n	8001100 <HAL_GPIO_Init+0x174>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001076:	402b      	ands	r3, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 8001078:	4641      	mov	r1, r8
 800107a:	60cb      	str	r3, [r1, #12]
  while (((GPIO_Init->Pin) >> position) != RESET)
 800107c:	464b      	mov	r3, r9
      }
    }
    
    position++;
 800107e:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001080:	40d3      	lsrs	r3, r2
 8001082:	d049      	beq.n	8001118 <HAL_GPIO_Init+0x18c>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001084:	2501      	movs	r5, #1
 8001086:	464c      	mov	r4, r9
 8001088:	4095      	lsls	r5, r2
 800108a:	402c      	ands	r4, r5
 800108c:	9400      	str	r4, [sp, #0]
    if(iocurrent)
 800108e:	d0f5      	beq.n	800107c <HAL_GPIO_Init+0xf0>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001090:	465b      	mov	r3, fp
 8001092:	6859      	ldr	r1, [r3, #4]
 8001094:	2310      	movs	r3, #16
 8001096:	000f      	movs	r7, r1
 8001098:	439f      	bics	r7, r3
 800109a:	003b      	movs	r3, r7
 800109c:	9701      	str	r7, [sp, #4]
 800109e:	2f02      	cmp	r7, #2
 80010a0:	d188      	bne.n	8000fb4 <HAL_GPIO_Init+0x28>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80010a2:	240f      	movs	r4, #15
 80010a4:	3305      	adds	r3, #5
 80010a6:	4013      	ands	r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	409c      	lsls	r4, r3
        temp = GPIOx->AFR[position >> 3];
 80010ac:	08d6      	lsrs	r6, r2, #3
 80010ae:	00b6      	lsls	r6, r6, #2
 80010b0:	1986      	adds	r6, r0, r6
 80010b2:	6a37      	ldr	r7, [r6, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80010b4:	43a7      	bics	r7, r4
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80010b6:	465c      	mov	r4, fp
 80010b8:	6924      	ldr	r4, [r4, #16]
 80010ba:	409c      	lsls	r4, r3
 80010bc:	0023      	movs	r3, r4
 80010be:	433b      	orrs	r3, r7
        GPIOx->AFR[position >> 3U] = temp;
 80010c0:	6233      	str	r3, [r6, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80010c2:	2303      	movs	r3, #3
 80010c4:	0056      	lsls	r6, r2, #1
 80010c6:	40b3      	lsls	r3, r6
 80010c8:	43db      	mvns	r3, r3
      temp = GPIOx->MODER;
 80010ca:	6807      	ldr	r7, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80010cc:	401f      	ands	r7, r3
 80010ce:	46bc      	mov	ip, r7
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010d0:	2703      	movs	r7, #3
 80010d2:	400f      	ands	r7, r1
 80010d4:	40b7      	lsls	r7, r6
 80010d6:	4664      	mov	r4, ip
 80010d8:	4327      	orrs	r7, r4
      GPIOx->MODER = temp;
 80010da:	6007      	str	r7, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 80010dc:	6887      	ldr	r7, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80010de:	465c      	mov	r4, fp
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010e0:	401f      	ands	r7, r3
 80010e2:	46bc      	mov	ip, r7
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80010e4:	68e7      	ldr	r7, [r4, #12]
 80010e6:	4664      	mov	r4, ip
 80010e8:	40b7      	lsls	r7, r6
 80010ea:	4327      	orrs	r7, r4
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010ec:	2401      	movs	r4, #1
        GPIOx->OSPEEDR = temp;
 80010ee:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80010f0:	6847      	ldr	r7, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80010f2:	43af      	bics	r7, r5
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010f4:	090d      	lsrs	r5, r1, #4
 80010f6:	4025      	ands	r5, r4
 80010f8:	4095      	lsls	r5, r2
 80010fa:	433d      	orrs	r5, r7
        GPIOx->OTYPER = temp;
 80010fc:	6045      	str	r5, [r0, #4]
 80010fe:	e76b      	b.n	8000fd8 <HAL_GPIO_Init+0x4c>
          SET_BIT(temp, iocurrent); 
 8001100:	9900      	ldr	r1, [sp, #0]
 8001102:	430b      	orrs	r3, r1
 8001104:	e7b8      	b.n	8001078 <HAL_GPIO_Init+0xec>
          SET_BIT(temp, iocurrent); 
 8001106:	9c00      	ldr	r4, [sp, #0]
 8001108:	4323      	orrs	r3, r4
 800110a:	e7af      	b.n	800106c <HAL_GPIO_Init+0xe0>
          SET_BIT(temp, iocurrent); 
 800110c:	9c00      	ldr	r4, [sp, #0]
 800110e:	4323      	orrs	r3, r4
 8001110:	e7a6      	b.n	8001060 <HAL_GPIO_Init+0xd4>
          SET_BIT(temp, iocurrent); 
 8001112:	9c00      	ldr	r4, [sp, #0]
 8001114:	4323      	orrs	r3, r4
 8001116:	e79d      	b.n	8001054 <HAL_GPIO_Init+0xc8>
  } 
}
 8001118:	b005      	add	sp, #20
 800111a:	bc3c      	pop	{r2, r3, r4, r5}
 800111c:	4690      	mov	r8, r2
 800111e:	4699      	mov	r9, r3
 8001120:	46a2      	mov	sl, r4
 8001122:	46ab      	mov	fp, r5
 8001124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001126:	2700      	movs	r7, #0
 8001128:	e78b      	b.n	8001042 <HAL_GPIO_Init+0xb6>
 800112a:	2701      	movs	r7, #1
 800112c:	40b7      	lsls	r7, r6
 800112e:	e788      	b.n	8001042 <HAL_GPIO_Init+0xb6>
 8001130:	2702      	movs	r7, #2
 8001132:	40b7      	lsls	r7, r6
 8001134:	e785      	b.n	8001042 <HAL_GPIO_Init+0xb6>
 8001136:	2703      	movs	r7, #3
 8001138:	40b7      	lsls	r7, r6
 800113a:	e782      	b.n	8001042 <HAL_GPIO_Init+0xb6>
 800113c:	40021000 	.word	0x40021000
 8001140:	40010400 	.word	0x40010400
 8001144:	40010000 	.word	0x40010000
 8001148:	48000400 	.word	0x48000400
 800114c:	48000800 	.word	0x48000800
 8001150:	48000c00 	.word	0x48000c00

08001154 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001154:	6900      	ldr	r0, [r0, #16]
 8001156:	4008      	ands	r0, r1
 8001158:	1e41      	subs	r1, r0, #1
 800115a:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 800115c:	b2c0      	uxtb	r0, r0
  }
 800115e:	4770      	bx	lr

08001160 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001160:	b570      	push	{r4, r5, r6, lr}
 8001162:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 8001164:	d01e      	beq.n	80011a4 <HAL_IWDG_Init+0x44>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 8001166:	6803      	ldr	r3, [r0, #0]
 8001168:	4a11      	ldr	r2, [pc, #68]	; (80011b0 <HAL_IWDG_Init+0x50>)
 800116a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800116c:	4a11      	ldr	r2, [pc, #68]	; (80011b4 <HAL_IWDG_Init+0x54>)
 800116e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001170:	6842      	ldr	r2, [r0, #4]
 8001172:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001174:	6882      	ldr	r2, [r0, #8]
 8001176:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001178:	f7ff f966 	bl	8000448 <HAL_GetTick>
 800117c:	0005      	movs	r5, r0

   /* Wait for register to be updated */
  while(hiwdg->Instance->SR != RESET)
 800117e:	e004      	b.n	800118a <HAL_IWDG_Init+0x2a>
  {
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001180:	f7ff f962 	bl	8000448 <HAL_GetTick>
 8001184:	1b40      	subs	r0, r0, r5
 8001186:	2827      	cmp	r0, #39	; 0x27
 8001188:	d80a      	bhi.n	80011a0 <HAL_IWDG_Init+0x40>
  while(hiwdg->Instance->SR != RESET)
 800118a:	6823      	ldr	r3, [r4, #0]
 800118c:	68da      	ldr	r2, [r3, #12]
 800118e:	2a00      	cmp	r2, #0
 8001190:	d1f6      	bne.n	8001180 <HAL_IWDG_Init+0x20>
    }
  }

  /* If window parameter is different than current value, modify window 
  register */
  if(hiwdg->Instance->WINR != hiwdg->Init.Window)
 8001192:	6919      	ldr	r1, [r3, #16]
 8001194:	68e2      	ldr	r2, [r4, #12]
 8001196:	4291      	cmp	r1, r2
 8001198:	d006      	beq.n	80011a8 <HAL_IWDG_Init+0x48>
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
  }

  /* Return function status */
  return HAL_OK;
 800119a:	2000      	movs	r0, #0
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800119c:	611a      	str	r2, [r3, #16]
}
 800119e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 80011a0:	2003      	movs	r0, #3
 80011a2:	e7fc      	b.n	800119e <HAL_IWDG_Init+0x3e>
    return HAL_ERROR;
 80011a4:	2001      	movs	r0, #1
 80011a6:	e7fa      	b.n	800119e <HAL_IWDG_Init+0x3e>
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80011a8:	4a03      	ldr	r2, [pc, #12]	; (80011b8 <HAL_IWDG_Init+0x58>)
  return HAL_OK;
 80011aa:	2000      	movs	r0, #0
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	e7f6      	b.n	800119e <HAL_IWDG_Init+0x3e>
 80011b0:	0000cccc 	.word	0x0000cccc
 80011b4:	00005555 	.word	0x00005555
 80011b8:	0000aaaa 	.word	0x0000aaaa

080011bc <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80011bc:	6803      	ldr	r3, [r0, #0]
 80011be:	4a02      	ldr	r2, [pc, #8]	; (80011c8 <HAL_IWDG_Refresh+0xc>)

  /* Return function status */
  return HAL_OK;
}
 80011c0:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80011c2:	601a      	str	r2, [r3, #0]
}
 80011c4:	4770      	bx	lr
 80011c6:	46c0      	nop			; (mov r8, r8)
 80011c8:	0000aaaa 	.word	0x0000aaaa

080011cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ce:	46ce      	mov	lr, r9
 80011d0:	4647      	mov	r7, r8
 80011d2:	b580      	push	{r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011d4:	6803      	ldr	r3, [r0, #0]
{
 80011d6:	b083      	sub	sp, #12
 80011d8:	0004      	movs	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011da:	07da      	lsls	r2, r3, #31
 80011dc:	d52f      	bpl.n	800123e <HAL_RCC_OscConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80011de:	220c      	movs	r2, #12
 80011e0:	48c4      	ldr	r0, [pc, #784]	; (80014f4 <HAL_RCC_OscConfig+0x328>)
 80011e2:	6841      	ldr	r1, [r0, #4]
 80011e4:	4011      	ands	r1, r2
 80011e6:	2904      	cmp	r1, #4
 80011e8:	d100      	bne.n	80011ec <HAL_RCC_OscConfig+0x20>
 80011ea:	e110      	b.n	800140e <HAL_RCC_OscConfig+0x242>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011ec:	6841      	ldr	r1, [r0, #4]
 80011ee:	400a      	ands	r2, r1
 80011f0:	2a08      	cmp	r2, #8
 80011f2:	d100      	bne.n	80011f6 <HAL_RCC_OscConfig+0x2a>
 80011f4:	e107      	b.n	8001406 <HAL_RCC_OscConfig+0x23a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011f6:	6863      	ldr	r3, [r4, #4]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d100      	bne.n	80011fe <HAL_RCC_OscConfig+0x32>
 80011fc:	e186      	b.n	800150c <HAL_RCC_OscConfig+0x340>
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d100      	bne.n	8001204 <HAL_RCC_OscConfig+0x38>
 8001202:	e11a      	b.n	800143a <HAL_RCC_OscConfig+0x26e>
 8001204:	2b05      	cmp	r3, #5
 8001206:	d100      	bne.n	800120a <HAL_RCC_OscConfig+0x3e>
 8001208:	e1db      	b.n	80015c2 <HAL_RCC_OscConfig+0x3f6>
 800120a:	4bba      	ldr	r3, [pc, #744]	; (80014f4 <HAL_RCC_OscConfig+0x328>)
 800120c:	49ba      	ldr	r1, [pc, #744]	; (80014f8 <HAL_RCC_OscConfig+0x32c>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	400a      	ands	r2, r1
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	49b9      	ldr	r1, [pc, #740]	; (80014fc <HAL_RCC_OscConfig+0x330>)
 8001218:	400a      	ands	r2, r1
 800121a:	601a      	str	r2, [r3, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800121c:	f7ff f914 	bl	8000448 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001220:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8001222:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001224:	4eb3      	ldr	r6, [pc, #716]	; (80014f4 <HAL_RCC_OscConfig+0x328>)
 8001226:	02ad      	lsls	r5, r5, #10
 8001228:	e005      	b.n	8001236 <HAL_RCC_OscConfig+0x6a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800122a:	f7ff f90d 	bl	8000448 <HAL_GetTick>
 800122e:	1bc0      	subs	r0, r0, r7
 8001230:	2864      	cmp	r0, #100	; 0x64
 8001232:	d900      	bls.n	8001236 <HAL_RCC_OscConfig+0x6a>
 8001234:	e12f      	b.n	8001496 <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001236:	6833      	ldr	r3, [r6, #0]
 8001238:	422b      	tst	r3, r5
 800123a:	d0f6      	beq.n	800122a <HAL_RCC_OscConfig+0x5e>
 800123c:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800123e:	079a      	lsls	r2, r3, #30
 8001240:	d529      	bpl.n	8001296 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001242:	220c      	movs	r2, #12
 8001244:	49ab      	ldr	r1, [pc, #684]	; (80014f4 <HAL_RCC_OscConfig+0x328>)
 8001246:	6848      	ldr	r0, [r1, #4]
 8001248:	4202      	tst	r2, r0
 800124a:	d100      	bne.n	800124e <HAL_RCC_OscConfig+0x82>
 800124c:	e0bf      	b.n	80013ce <HAL_RCC_OscConfig+0x202>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800124e:	6848      	ldr	r0, [r1, #4]
 8001250:	4002      	ands	r2, r0
 8001252:	2a08      	cmp	r2, #8
 8001254:	d100      	bne.n	8001258 <HAL_RCC_OscConfig+0x8c>
 8001256:	e0b6      	b.n	80013c6 <HAL_RCC_OscConfig+0x1fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001258:	68e3      	ldr	r3, [r4, #12]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800125a:	4da6      	ldr	r5, [pc, #664]	; (80014f4 <HAL_RCC_OscConfig+0x328>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800125c:	2b00      	cmp	r3, #0
 800125e:	d100      	bne.n	8001262 <HAL_RCC_OscConfig+0x96>
 8001260:	e134      	b.n	80014cc <HAL_RCC_OscConfig+0x300>
        __HAL_RCC_HSI_ENABLE();
 8001262:	2201      	movs	r2, #1
 8001264:	682b      	ldr	r3, [r5, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001266:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8001268:	4313      	orrs	r3, r2
 800126a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800126c:	f7ff f8ec 	bl	8000448 <HAL_GetTick>
 8001270:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001272:	e005      	b.n	8001280 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001274:	f7ff f8e8 	bl	8000448 <HAL_GetTick>
 8001278:	1bc0      	subs	r0, r0, r7
 800127a:	2802      	cmp	r0, #2
 800127c:	d900      	bls.n	8001280 <HAL_RCC_OscConfig+0xb4>
 800127e:	e10a      	b.n	8001496 <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001280:	682b      	ldr	r3, [r5, #0]
 8001282:	421e      	tst	r6, r3
 8001284:	d0f6      	beq.n	8001274 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001286:	21f8      	movs	r1, #248	; 0xf8
 8001288:	682a      	ldr	r2, [r5, #0]
 800128a:	6923      	ldr	r3, [r4, #16]
 800128c:	438a      	bics	r2, r1
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	4313      	orrs	r3, r2
 8001292:	602b      	str	r3, [r5, #0]
 8001294:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001296:	071a      	lsls	r2, r3, #28
 8001298:	d500      	bpl.n	800129c <HAL_RCC_OscConfig+0xd0>
 800129a:	e07d      	b.n	8001398 <HAL_RCC_OscConfig+0x1cc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800129c:	075a      	lsls	r2, r3, #29
 800129e:	d540      	bpl.n	8001322 <HAL_RCC_OscConfig+0x156>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012a0:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80012a2:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012a4:	4b93      	ldr	r3, [pc, #588]	; (80014f4 <HAL_RCC_OscConfig+0x328>)
 80012a6:	0552      	lsls	r2, r2, #21
 80012a8:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 80012aa:	4680      	mov	r8, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012ac:	4211      	tst	r1, r2
 80012ae:	d108      	bne.n	80012c2 <HAL_RCC_OscConfig+0xf6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012b0:	69d9      	ldr	r1, [r3, #28]
 80012b2:	4311      	orrs	r1, r2
 80012b4:	61d9      	str	r1, [r3, #28]
 80012b6:	69db      	ldr	r3, [r3, #28]
 80012b8:	401a      	ands	r2, r3
 80012ba:	9201      	str	r2, [sp, #4]
 80012bc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80012be:	2301      	movs	r3, #1
 80012c0:	4698      	mov	r8, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012c2:	2780      	movs	r7, #128	; 0x80
 80012c4:	4e8e      	ldr	r6, [pc, #568]	; (8001500 <HAL_RCC_OscConfig+0x334>)
 80012c6:	007f      	lsls	r7, r7, #1
 80012c8:	6833      	ldr	r3, [r6, #0]
 80012ca:	423b      	tst	r3, r7
 80012cc:	d100      	bne.n	80012d0 <HAL_RCC_OscConfig+0x104>
 80012ce:	e0cd      	b.n	800146c <HAL_RCC_OscConfig+0x2a0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012d0:	68a3      	ldr	r3, [r4, #8]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d100      	bne.n	80012d8 <HAL_RCC_OscConfig+0x10c>
 80012d6:	e0d9      	b.n	800148c <HAL_RCC_OscConfig+0x2c0>
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d100      	bne.n	80012de <HAL_RCC_OscConfig+0x112>
 80012dc:	e0dd      	b.n	800149a <HAL_RCC_OscConfig+0x2ce>
 80012de:	2b05      	cmp	r3, #5
 80012e0:	d100      	bne.n	80012e4 <HAL_RCC_OscConfig+0x118>
 80012e2:	e198      	b.n	8001616 <HAL_RCC_OscConfig+0x44a>
 80012e4:	2101      	movs	r1, #1
 80012e6:	4b83      	ldr	r3, [pc, #524]	; (80014f4 <HAL_RCC_OscConfig+0x328>)
 80012e8:	6a1a      	ldr	r2, [r3, #32]
 80012ea:	438a      	bics	r2, r1
 80012ec:	621a      	str	r2, [r3, #32]
 80012ee:	6a1a      	ldr	r2, [r3, #32]
 80012f0:	3103      	adds	r1, #3
 80012f2:	438a      	bics	r2, r1
 80012f4:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012f6:	f7ff f8a7 	bl	8000448 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012fa:	4f7e      	ldr	r7, [pc, #504]	; (80014f4 <HAL_RCC_OscConfig+0x328>)
      tickstart = HAL_GetTick();
 80012fc:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012fe:	2602      	movs	r6, #2
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001300:	4d80      	ldr	r5, [pc, #512]	; (8001504 <HAL_RCC_OscConfig+0x338>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001302:	e006      	b.n	8001312 <HAL_RCC_OscConfig+0x146>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001304:	f7ff f8a0 	bl	8000448 <HAL_GetTick>
 8001308:	464b      	mov	r3, r9
 800130a:	1ac0      	subs	r0, r0, r3
 800130c:	42a8      	cmp	r0, r5
 800130e:	d900      	bls.n	8001312 <HAL_RCC_OscConfig+0x146>
 8001310:	e0c1      	b.n	8001496 <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001312:	6a3b      	ldr	r3, [r7, #32]
 8001314:	421e      	tst	r6, r3
 8001316:	d0f5      	beq.n	8001304 <HAL_RCC_OscConfig+0x138>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001318:	4643      	mov	r3, r8
 800131a:	2b01      	cmp	r3, #1
 800131c:	d100      	bne.n	8001320 <HAL_RCC_OscConfig+0x154>
 800131e:	e113      	b.n	8001548 <HAL_RCC_OscConfig+0x37c>
 8001320:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001322:	06db      	lsls	r3, r3, #27
 8001324:	d512      	bpl.n	800134c <HAL_RCC_OscConfig+0x180>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001326:	6963      	ldr	r3, [r4, #20]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d100      	bne.n	800132e <HAL_RCC_OscConfig+0x162>
 800132c:	e155      	b.n	80015da <HAL_RCC_OscConfig+0x40e>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800132e:	3305      	adds	r3, #5
 8001330:	d000      	beq.n	8001334 <HAL_RCC_OscConfig+0x168>
 8001332:	e0f2      	b.n	800151a <HAL_RCC_OscConfig+0x34e>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001334:	2104      	movs	r1, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001336:	20f8      	movs	r0, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 8001338:	4a6e      	ldr	r2, [pc, #440]	; (80014f4 <HAL_RCC_OscConfig+0x328>)
 800133a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800133c:	438b      	bics	r3, r1
 800133e:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001340:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8001342:	69a3      	ldr	r3, [r4, #24]
 8001344:	4381      	bics	r1, r0
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	430b      	orrs	r3, r1
 800134a:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800134c:	6a23      	ldr	r3, [r4, #32]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d01c      	beq.n	800138c <HAL_RCC_OscConfig+0x1c0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001352:	220c      	movs	r2, #12
 8001354:	4d67      	ldr	r5, [pc, #412]	; (80014f4 <HAL_RCC_OscConfig+0x328>)
 8001356:	6869      	ldr	r1, [r5, #4]
 8001358:	400a      	ands	r2, r1
 800135a:	2a08      	cmp	r2, #8
 800135c:	d03e      	beq.n	80013dc <HAL_RCC_OscConfig+0x210>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800135e:	2b02      	cmp	r3, #2
 8001360:	d100      	bne.n	8001364 <HAL_RCC_OscConfig+0x198>
 8001362:	e0f8      	b.n	8001556 <HAL_RCC_OscConfig+0x38a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001364:	682b      	ldr	r3, [r5, #0]
 8001366:	4a68      	ldr	r2, [pc, #416]	; (8001508 <HAL_RCC_OscConfig+0x33c>)
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001368:	002c      	movs	r4, r5
        __HAL_RCC_PLL_DISABLE();
 800136a:	4013      	ands	r3, r2
 800136c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800136e:	f7ff f86b 	bl	8000448 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001372:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8001374:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001376:	04ad      	lsls	r5, r5, #18
 8001378:	e005      	b.n	8001386 <HAL_RCC_OscConfig+0x1ba>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800137a:	f7ff f865 	bl	8000448 <HAL_GetTick>
 800137e:	1b80      	subs	r0, r0, r6
 8001380:	2802      	cmp	r0, #2
 8001382:	d900      	bls.n	8001386 <HAL_RCC_OscConfig+0x1ba>
 8001384:	e087      	b.n	8001496 <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001386:	6823      	ldr	r3, [r4, #0]
 8001388:	422b      	tst	r3, r5
 800138a:	d1f6      	bne.n	800137a <HAL_RCC_OscConfig+0x1ae>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800138c:	2000      	movs	r0, #0
}
 800138e:	b003      	add	sp, #12
 8001390:	bc0c      	pop	{r2, r3}
 8001392:	4690      	mov	r8, r2
 8001394:	4699      	mov	r9, r3
 8001396:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001398:	69e3      	ldr	r3, [r4, #28]
      __HAL_RCC_LSI_ENABLE();
 800139a:	4d56      	ldr	r5, [pc, #344]	; (80014f4 <HAL_RCC_OscConfig+0x328>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800139c:	2b00      	cmp	r3, #0
 800139e:	d01f      	beq.n	80013e0 <HAL_RCC_OscConfig+0x214>
      __HAL_RCC_LSI_ENABLE();
 80013a0:	2201      	movs	r2, #1
 80013a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013a4:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 80013a6:	4313      	orrs	r3, r2
 80013a8:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80013aa:	f7ff f84d 	bl	8000448 <HAL_GetTick>
 80013ae:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013b0:	e004      	b.n	80013bc <HAL_RCC_OscConfig+0x1f0>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013b2:	f7ff f849 	bl	8000448 <HAL_GetTick>
 80013b6:	1bc0      	subs	r0, r0, r7
 80013b8:	2802      	cmp	r0, #2
 80013ba:	d86c      	bhi.n	8001496 <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013bc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80013be:	421e      	tst	r6, r3
 80013c0:	d0f7      	beq.n	80013b2 <HAL_RCC_OscConfig+0x1e6>
 80013c2:	6823      	ldr	r3, [r4, #0]
 80013c4:	e76a      	b.n	800129c <HAL_RCC_OscConfig+0xd0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80013c6:	684a      	ldr	r2, [r1, #4]
 80013c8:	03d2      	lsls	r2, r2, #15
 80013ca:	d500      	bpl.n	80013ce <HAL_RCC_OscConfig+0x202>
 80013cc:	e744      	b.n	8001258 <HAL_RCC_OscConfig+0x8c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ce:	4a49      	ldr	r2, [pc, #292]	; (80014f4 <HAL_RCC_OscConfig+0x328>)
 80013d0:	6812      	ldr	r2, [r2, #0]
 80013d2:	0792      	lsls	r2, r2, #30
 80013d4:	d525      	bpl.n	8001422 <HAL_RCC_OscConfig+0x256>
 80013d6:	68e2      	ldr	r2, [r4, #12]
 80013d8:	2a01      	cmp	r2, #1
 80013da:	d022      	beq.n	8001422 <HAL_RCC_OscConfig+0x256>
      return HAL_ERROR;
 80013dc:	2001      	movs	r0, #1
 80013de:	e7d6      	b.n	800138e <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_DISABLE();
 80013e0:	2201      	movs	r2, #1
 80013e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013e4:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 80013e6:	4393      	bics	r3, r2
 80013e8:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80013ea:	f7ff f82d 	bl	8000448 <HAL_GetTick>
 80013ee:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013f0:	e004      	b.n	80013fc <HAL_RCC_OscConfig+0x230>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013f2:	f7ff f829 	bl	8000448 <HAL_GetTick>
 80013f6:	1bc0      	subs	r0, r0, r7
 80013f8:	2802      	cmp	r0, #2
 80013fa:	d84c      	bhi.n	8001496 <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013fc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80013fe:	421e      	tst	r6, r3
 8001400:	d1f7      	bne.n	80013f2 <HAL_RCC_OscConfig+0x226>
 8001402:	6823      	ldr	r3, [r4, #0]
 8001404:	e74a      	b.n	800129c <HAL_RCC_OscConfig+0xd0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001406:	6842      	ldr	r2, [r0, #4]
 8001408:	03d2      	lsls	r2, r2, #15
 800140a:	d400      	bmi.n	800140e <HAL_RCC_OscConfig+0x242>
 800140c:	e6f3      	b.n	80011f6 <HAL_RCC_OscConfig+0x2a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800140e:	4a39      	ldr	r2, [pc, #228]	; (80014f4 <HAL_RCC_OscConfig+0x328>)
 8001410:	6812      	ldr	r2, [r2, #0]
 8001412:	0392      	lsls	r2, r2, #14
 8001414:	d400      	bmi.n	8001418 <HAL_RCC_OscConfig+0x24c>
 8001416:	e712      	b.n	800123e <HAL_RCC_OscConfig+0x72>
 8001418:	6862      	ldr	r2, [r4, #4]
 800141a:	2a00      	cmp	r2, #0
 800141c:	d000      	beq.n	8001420 <HAL_RCC_OscConfig+0x254>
 800141e:	e70e      	b.n	800123e <HAL_RCC_OscConfig+0x72>
 8001420:	e7dc      	b.n	80013dc <HAL_RCC_OscConfig+0x210>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001422:	25f8      	movs	r5, #248	; 0xf8
 8001424:	4833      	ldr	r0, [pc, #204]	; (80014f4 <HAL_RCC_OscConfig+0x328>)
 8001426:	6922      	ldr	r2, [r4, #16]
 8001428:	6801      	ldr	r1, [r0, #0]
 800142a:	00d2      	lsls	r2, r2, #3
 800142c:	43a9      	bics	r1, r5
 800142e:	430a      	orrs	r2, r1
 8001430:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001432:	071a      	lsls	r2, r3, #28
 8001434:	d400      	bmi.n	8001438 <HAL_RCC_OscConfig+0x26c>
 8001436:	e731      	b.n	800129c <HAL_RCC_OscConfig+0xd0>
 8001438:	e7ae      	b.n	8001398 <HAL_RCC_OscConfig+0x1cc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800143a:	4d2e      	ldr	r5, [pc, #184]	; (80014f4 <HAL_RCC_OscConfig+0x328>)
 800143c:	4a2e      	ldr	r2, [pc, #184]	; (80014f8 <HAL_RCC_OscConfig+0x32c>)
 800143e:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001440:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001442:	4013      	ands	r3, r2
 8001444:	602b      	str	r3, [r5, #0]
 8001446:	682b      	ldr	r3, [r5, #0]
 8001448:	4a2c      	ldr	r2, [pc, #176]	; (80014fc <HAL_RCC_OscConfig+0x330>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800144a:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800144c:	4013      	ands	r3, r2
 800144e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001450:	f7fe fffa 	bl	8000448 <HAL_GetTick>
 8001454:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001456:	e004      	b.n	8001462 <HAL_RCC_OscConfig+0x296>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001458:	f7fe fff6 	bl	8000448 <HAL_GetTick>
 800145c:	1bc0      	subs	r0, r0, r7
 800145e:	2864      	cmp	r0, #100	; 0x64
 8001460:	d819      	bhi.n	8001496 <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001462:	682b      	ldr	r3, [r5, #0]
 8001464:	4233      	tst	r3, r6
 8001466:	d1f7      	bne.n	8001458 <HAL_RCC_OscConfig+0x28c>
 8001468:	6823      	ldr	r3, [r4, #0]
 800146a:	e6e8      	b.n	800123e <HAL_RCC_OscConfig+0x72>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800146c:	6833      	ldr	r3, [r6, #0]
 800146e:	433b      	orrs	r3, r7
 8001470:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001472:	f7fe ffe9 	bl	8000448 <HAL_GetTick>
 8001476:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001478:	e004      	b.n	8001484 <HAL_RCC_OscConfig+0x2b8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800147a:	f7fe ffe5 	bl	8000448 <HAL_GetTick>
 800147e:	1b40      	subs	r0, r0, r5
 8001480:	2864      	cmp	r0, #100	; 0x64
 8001482:	d808      	bhi.n	8001496 <HAL_RCC_OscConfig+0x2ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001484:	6833      	ldr	r3, [r6, #0]
 8001486:	423b      	tst	r3, r7
 8001488:	d0f7      	beq.n	800147a <HAL_RCC_OscConfig+0x2ae>
 800148a:	e721      	b.n	80012d0 <HAL_RCC_OscConfig+0x104>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800148c:	4919      	ldr	r1, [pc, #100]	; (80014f4 <HAL_RCC_OscConfig+0x328>)
 800148e:	6a0a      	ldr	r2, [r1, #32]
 8001490:	4313      	orrs	r3, r2
 8001492:	620b      	str	r3, [r1, #32]
 8001494:	e72f      	b.n	80012f6 <HAL_RCC_OscConfig+0x12a>
            return HAL_TIMEOUT;
 8001496:	2003      	movs	r0, #3
 8001498:	e779      	b.n	800138e <HAL_RCC_OscConfig+0x1c2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800149a:	2201      	movs	r2, #1
 800149c:	4e15      	ldr	r6, [pc, #84]	; (80014f4 <HAL_RCC_OscConfig+0x328>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800149e:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014a0:	6a33      	ldr	r3, [r6, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014a2:	4d18      	ldr	r5, [pc, #96]	; (8001504 <HAL_RCC_OscConfig+0x338>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014a4:	4393      	bics	r3, r2
 80014a6:	6233      	str	r3, [r6, #32]
 80014a8:	6a33      	ldr	r3, [r6, #32]
 80014aa:	3203      	adds	r2, #3
 80014ac:	4393      	bics	r3, r2
 80014ae:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 80014b0:	f7fe ffca 	bl	8000448 <HAL_GetTick>
 80014b4:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014b6:	e005      	b.n	80014c4 <HAL_RCC_OscConfig+0x2f8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014b8:	f7fe ffc6 	bl	8000448 <HAL_GetTick>
 80014bc:	464b      	mov	r3, r9
 80014be:	1ac0      	subs	r0, r0, r3
 80014c0:	42a8      	cmp	r0, r5
 80014c2:	d8e8      	bhi.n	8001496 <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014c4:	6a33      	ldr	r3, [r6, #32]
 80014c6:	421f      	tst	r7, r3
 80014c8:	d1f6      	bne.n	80014b8 <HAL_RCC_OscConfig+0x2ec>
 80014ca:	e725      	b.n	8001318 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_DISABLE();
 80014cc:	2201      	movs	r2, #1
 80014ce:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014d0:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 80014d2:	4393      	bics	r3, r2
 80014d4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80014d6:	f7fe ffb7 	bl	8000448 <HAL_GetTick>
 80014da:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014dc:	e004      	b.n	80014e8 <HAL_RCC_OscConfig+0x31c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014de:	f7fe ffb3 	bl	8000448 <HAL_GetTick>
 80014e2:	1bc0      	subs	r0, r0, r7
 80014e4:	2802      	cmp	r0, #2
 80014e6:	d8d6      	bhi.n	8001496 <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014e8:	682b      	ldr	r3, [r5, #0]
 80014ea:	421e      	tst	r6, r3
 80014ec:	d1f7      	bne.n	80014de <HAL_RCC_OscConfig+0x312>
 80014ee:	6823      	ldr	r3, [r4, #0]
 80014f0:	e6d1      	b.n	8001296 <HAL_RCC_OscConfig+0xca>
 80014f2:	46c0      	nop			; (mov r8, r8)
 80014f4:	40021000 	.word	0x40021000
 80014f8:	fffeffff 	.word	0xfffeffff
 80014fc:	fffbffff 	.word	0xfffbffff
 8001500:	40007000 	.word	0x40007000
 8001504:	00001388 	.word	0x00001388
 8001508:	feffffff 	.word	0xfeffffff
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800150c:	2380      	movs	r3, #128	; 0x80
 800150e:	4a47      	ldr	r2, [pc, #284]	; (800162c <HAL_RCC_OscConfig+0x460>)
 8001510:	025b      	lsls	r3, r3, #9
 8001512:	6811      	ldr	r1, [r2, #0]
 8001514:	430b      	orrs	r3, r1
 8001516:	6013      	str	r3, [r2, #0]
 8001518:	e680      	b.n	800121c <HAL_RCC_OscConfig+0x50>
      __HAL_RCC_HSI14ADC_DISABLE();
 800151a:	2204      	movs	r2, #4
 800151c:	4d43      	ldr	r5, [pc, #268]	; (800162c <HAL_RCC_OscConfig+0x460>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800151e:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001520:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001522:	4313      	orrs	r3, r2
 8001524:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8001526:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001528:	3a03      	subs	r2, #3
 800152a:	4393      	bics	r3, r2
 800152c:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 800152e:	f7fe ff8b 	bl	8000448 <HAL_GetTick>
 8001532:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001534:	e004      	b.n	8001540 <HAL_RCC_OscConfig+0x374>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001536:	f7fe ff87 	bl	8000448 <HAL_GetTick>
 800153a:	1bc0      	subs	r0, r0, r7
 800153c:	2802      	cmp	r0, #2
 800153e:	d8aa      	bhi.n	8001496 <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001540:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001542:	421e      	tst	r6, r3
 8001544:	d1f7      	bne.n	8001536 <HAL_RCC_OscConfig+0x36a>
 8001546:	e701      	b.n	800134c <HAL_RCC_OscConfig+0x180>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001548:	4a38      	ldr	r2, [pc, #224]	; (800162c <HAL_RCC_OscConfig+0x460>)
 800154a:	4939      	ldr	r1, [pc, #228]	; (8001630 <HAL_RCC_OscConfig+0x464>)
 800154c:	69d3      	ldr	r3, [r2, #28]
 800154e:	400b      	ands	r3, r1
 8001550:	61d3      	str	r3, [r2, #28]
 8001552:	6823      	ldr	r3, [r4, #0]
 8001554:	e6e5      	b.n	8001322 <HAL_RCC_OscConfig+0x156>
        __HAL_RCC_PLL_DISABLE();
 8001556:	682b      	ldr	r3, [r5, #0]
 8001558:	4a36      	ldr	r2, [pc, #216]	; (8001634 <HAL_RCC_OscConfig+0x468>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800155a:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800155c:	4013      	ands	r3, r2
 800155e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001560:	f7fe ff72 	bl	8000448 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001564:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8001566:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001568:	e004      	b.n	8001574 <HAL_RCC_OscConfig+0x3a8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800156a:	f7fe ff6d 	bl	8000448 <HAL_GetTick>
 800156e:	1bc0      	subs	r0, r0, r7
 8001570:	2802      	cmp	r0, #2
 8001572:	d890      	bhi.n	8001496 <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001574:	682b      	ldr	r3, [r5, #0]
 8001576:	4233      	tst	r3, r6
 8001578:	d1f7      	bne.n	800156a <HAL_RCC_OscConfig+0x39e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800157a:	220f      	movs	r2, #15
 800157c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800157e:	4393      	bics	r3, r2
 8001580:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001582:	4313      	orrs	r3, r2
 8001584:	62eb      	str	r3, [r5, #44]	; 0x2c
 8001586:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001588:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800158a:	686a      	ldr	r2, [r5, #4]
 800158c:	430b      	orrs	r3, r1
 800158e:	492a      	ldr	r1, [pc, #168]	; (8001638 <HAL_RCC_OscConfig+0x46c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001590:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001592:	400a      	ands	r2, r1
 8001594:	4313      	orrs	r3, r2
 8001596:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001598:	2380      	movs	r3, #128	; 0x80
 800159a:	682a      	ldr	r2, [r5, #0]
 800159c:	045b      	lsls	r3, r3, #17
 800159e:	4313      	orrs	r3, r2
 80015a0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80015a2:	f7fe ff51 	bl	8000448 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015a6:	4d21      	ldr	r5, [pc, #132]	; (800162c <HAL_RCC_OscConfig+0x460>)
        tickstart = HAL_GetTick();
 80015a8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015aa:	04a4      	lsls	r4, r4, #18
 80015ac:	e005      	b.n	80015ba <HAL_RCC_OscConfig+0x3ee>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ae:	f7fe ff4b 	bl	8000448 <HAL_GetTick>
 80015b2:	1b80      	subs	r0, r0, r6
 80015b4:	2802      	cmp	r0, #2
 80015b6:	d900      	bls.n	80015ba <HAL_RCC_OscConfig+0x3ee>
 80015b8:	e76d      	b.n	8001496 <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015ba:	682b      	ldr	r3, [r5, #0]
 80015bc:	4223      	tst	r3, r4
 80015be:	d0f6      	beq.n	80015ae <HAL_RCC_OscConfig+0x3e2>
 80015c0:	e6e4      	b.n	800138c <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015c2:	2280      	movs	r2, #128	; 0x80
 80015c4:	4b19      	ldr	r3, [pc, #100]	; (800162c <HAL_RCC_OscConfig+0x460>)
 80015c6:	02d2      	lsls	r2, r2, #11
 80015c8:	6819      	ldr	r1, [r3, #0]
 80015ca:	430a      	orrs	r2, r1
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	2280      	movs	r2, #128	; 0x80
 80015d0:	6819      	ldr	r1, [r3, #0]
 80015d2:	0252      	lsls	r2, r2, #9
 80015d4:	430a      	orrs	r2, r1
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	e620      	b.n	800121c <HAL_RCC_OscConfig+0x50>
      __HAL_RCC_HSI14ADC_DISABLE();
 80015da:	2104      	movs	r1, #4
 80015dc:	4d13      	ldr	r5, [pc, #76]	; (800162c <HAL_RCC_OscConfig+0x460>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80015de:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80015e0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80015e2:	430a      	orrs	r2, r1
 80015e4:	636a      	str	r2, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80015e6:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80015e8:	4313      	orrs	r3, r2
 80015ea:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80015ec:	f7fe ff2c 	bl	8000448 <HAL_GetTick>
 80015f0:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80015f2:	e005      	b.n	8001600 <HAL_RCC_OscConfig+0x434>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80015f4:	f7fe ff28 	bl	8000448 <HAL_GetTick>
 80015f8:	1bc0      	subs	r0, r0, r7
 80015fa:	2802      	cmp	r0, #2
 80015fc:	d900      	bls.n	8001600 <HAL_RCC_OscConfig+0x434>
 80015fe:	e74a      	b.n	8001496 <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001600:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001602:	421e      	tst	r6, r3
 8001604:	d0f6      	beq.n	80015f4 <HAL_RCC_OscConfig+0x428>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001606:	21f8      	movs	r1, #248	; 0xf8
 8001608:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800160a:	69a3      	ldr	r3, [r4, #24]
 800160c:	438a      	bics	r2, r1
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	4313      	orrs	r3, r2
 8001612:	636b      	str	r3, [r5, #52]	; 0x34
 8001614:	e69a      	b.n	800134c <HAL_RCC_OscConfig+0x180>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001616:	2104      	movs	r1, #4
 8001618:	4b04      	ldr	r3, [pc, #16]	; (800162c <HAL_RCC_OscConfig+0x460>)
 800161a:	6a1a      	ldr	r2, [r3, #32]
 800161c:	430a      	orrs	r2, r1
 800161e:	621a      	str	r2, [r3, #32]
 8001620:	6a1a      	ldr	r2, [r3, #32]
 8001622:	3903      	subs	r1, #3
 8001624:	430a      	orrs	r2, r1
 8001626:	621a      	str	r2, [r3, #32]
 8001628:	e665      	b.n	80012f6 <HAL_RCC_OscConfig+0x12a>
 800162a:	46c0      	nop			; (mov r8, r8)
 800162c:	40021000 	.word	0x40021000
 8001630:	efffffff 	.word	0xefffffff
 8001634:	feffffff 	.word	0xfeffffff
 8001638:	ffc2ffff 	.word	0xffc2ffff

0800163c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800163c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800163e:	46ce      	mov	lr, r9
 8001640:	4647      	mov	r7, r8
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001642:	2201      	movs	r2, #1
{
 8001644:	b580      	push	{r7, lr}
 8001646:	000c      	movs	r4, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001648:	495c      	ldr	r1, [pc, #368]	; (80017bc <HAL_RCC_ClockConfig+0x180>)
{
 800164a:	b089      	sub	sp, #36	; 0x24
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800164c:	680b      	ldr	r3, [r1, #0]
{
 800164e:	0005      	movs	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001650:	4013      	ands	r3, r2
 8001652:	42a3      	cmp	r3, r4
 8001654:	d20d      	bcs.n	8001672 <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001656:	680b      	ldr	r3, [r1, #0]
 8001658:	4393      	bics	r3, r2
 800165a:	4323      	orrs	r3, r4
 800165c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800165e:	680b      	ldr	r3, [r1, #0]
 8001660:	401a      	ands	r2, r3
 8001662:	4294      	cmp	r4, r2
 8001664:	d005      	beq.n	8001672 <HAL_RCC_ClockConfig+0x36>
    {
      return HAL_ERROR;
 8001666:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8001668:	b009      	add	sp, #36	; 0x24
 800166a:	bc0c      	pop	{r2, r3}
 800166c:	4690      	mov	r8, r2
 800166e:	4699      	mov	r9, r3
 8001670:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001672:	682b      	ldr	r3, [r5, #0]
 8001674:	079a      	lsls	r2, r3, #30
 8001676:	d506      	bpl.n	8001686 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001678:	20f0      	movs	r0, #240	; 0xf0
 800167a:	4951      	ldr	r1, [pc, #324]	; (80017c0 <HAL_RCC_ClockConfig+0x184>)
 800167c:	684a      	ldr	r2, [r1, #4]
 800167e:	4382      	bics	r2, r0
 8001680:	68a8      	ldr	r0, [r5, #8]
 8001682:	4302      	orrs	r2, r0
 8001684:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001686:	07db      	lsls	r3, r3, #31
 8001688:	d524      	bpl.n	80016d4 <HAL_RCC_ClockConfig+0x98>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168a:	4b4d      	ldr	r3, [pc, #308]	; (80017c0 <HAL_RCC_ClockConfig+0x184>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800168c:	686a      	ldr	r2, [r5, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168e:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001690:	2a01      	cmp	r2, #1
 8001692:	d06a      	beq.n	800176a <HAL_RCC_ClockConfig+0x12e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001694:	2a02      	cmp	r2, #2
 8001696:	d063      	beq.n	8001760 <HAL_RCC_ClockConfig+0x124>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001698:	079b      	lsls	r3, r3, #30
 800169a:	d5e4      	bpl.n	8001666 <HAL_RCC_ClockConfig+0x2a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800169c:	2103      	movs	r1, #3
 800169e:	4e48      	ldr	r6, [pc, #288]	; (80017c0 <HAL_RCC_ClockConfig+0x184>)
 80016a0:	6873      	ldr	r3, [r6, #4]
 80016a2:	438b      	bics	r3, r1
 80016a4:	4313      	orrs	r3, r2
 80016a6:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80016a8:	f7fe fece 	bl	8000448 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ac:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80016ae:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d05d      	beq.n	8001770 <HAL_RCC_ClockConfig+0x134>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d06b      	beq.n	8001790 <HAL_RCC_ClockConfig+0x154>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80016b8:	230c      	movs	r3, #12
 80016ba:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016bc:	4b41      	ldr	r3, [pc, #260]	; (80017c4 <HAL_RCC_ClockConfig+0x188>)
 80016be:	4699      	mov	r9, r3
 80016c0:	e004      	b.n	80016cc <HAL_RCC_ClockConfig+0x90>
 80016c2:	f7fe fec1 	bl	8000448 <HAL_GetTick>
 80016c6:	1bc0      	subs	r0, r0, r7
 80016c8:	4548      	cmp	r0, r9
 80016ca:	d84c      	bhi.n	8001766 <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80016cc:	4642      	mov	r2, r8
 80016ce:	6873      	ldr	r3, [r6, #4]
 80016d0:	421a      	tst	r2, r3
 80016d2:	d1f6      	bne.n	80016c2 <HAL_RCC_ClockConfig+0x86>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80016d4:	2101      	movs	r1, #1
 80016d6:	4a39      	ldr	r2, [pc, #228]	; (80017bc <HAL_RCC_ClockConfig+0x180>)
 80016d8:	6813      	ldr	r3, [r2, #0]
 80016da:	400b      	ands	r3, r1
 80016dc:	429c      	cmp	r4, r3
 80016de:	d205      	bcs.n	80016ec <HAL_RCC_ClockConfig+0xb0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016e0:	6813      	ldr	r3, [r2, #0]
 80016e2:	438b      	bics	r3, r1
 80016e4:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016e6:	6813      	ldr	r3, [r2, #0]
 80016e8:	4219      	tst	r1, r3
 80016ea:	d1bc      	bne.n	8001666 <HAL_RCC_ClockConfig+0x2a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016ec:	682b      	ldr	r3, [r5, #0]
 80016ee:	075b      	lsls	r3, r3, #29
 80016f0:	d506      	bpl.n	8001700 <HAL_RCC_ClockConfig+0xc4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80016f2:	4a33      	ldr	r2, [pc, #204]	; (80017c0 <HAL_RCC_ClockConfig+0x184>)
 80016f4:	4934      	ldr	r1, [pc, #208]	; (80017c8 <HAL_RCC_ClockConfig+0x18c>)
 80016f6:	6853      	ldr	r3, [r2, #4]
 80016f8:	400b      	ands	r3, r1
 80016fa:	68e9      	ldr	r1, [r5, #12]
 80016fc:	430b      	orrs	r3, r1
 80016fe:	6053      	str	r3, [r2, #4]
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001700:	4b32      	ldr	r3, [pc, #200]	; (80017cc <HAL_RCC_ClockConfig+0x190>)
 8001702:	466a      	mov	r2, sp
 8001704:	0018      	movs	r0, r3
 8001706:	c870      	ldmia	r0!, {r4, r5, r6}
 8001708:	c270      	stmia	r2!, {r4, r5, r6}
 800170a:	6800      	ldr	r0, [r0, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800170c:	3310      	adds	r3, #16
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800170e:	6010      	str	r0, [r2, #0]
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001710:	aa04      	add	r2, sp, #16
 8001712:	0010      	movs	r0, r2
 8001714:	cb70      	ldmia	r3!, {r4, r5, r6}
 8001716:	c070      	stmia	r0!, {r4, r5, r6}
 8001718:	681b      	ldr	r3, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 800171a:	4d29      	ldr	r5, [pc, #164]	; (80017c0 <HAL_RCC_ClockConfig+0x184>)
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800171c:	6003      	str	r3, [r0, #0]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800171e:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8001720:	6868      	ldr	r0, [r5, #4]
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001722:	4669      	mov	r1, sp
  switch (tmpreg & RCC_CFGR_SWS)
 8001724:	4003      	ands	r3, r0
 8001726:	2b08      	cmp	r3, #8
 8001728:	d10b      	bne.n	8001742 <HAL_RCC_ClockConfig+0x106>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800172a:	3307      	adds	r3, #7
 800172c:	0c84      	lsrs	r4, r0, #18
 800172e:	401c      	ands	r4, r3
 8001730:	5d0c      	ldrb	r4, [r1, r4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001732:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8001734:	400b      	ands	r3, r1
 8001736:	5cd1      	ldrb	r1, [r2, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001738:	03c3      	lsls	r3, r0, #15
 800173a:	d439      	bmi.n	80017b0 <HAL_RCC_ClockConfig+0x174>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 800173c:	4824      	ldr	r0, [pc, #144]	; (80017d0 <HAL_RCC_ClockConfig+0x194>)
 800173e:	4360      	muls	r0, r4
 8001740:	e000      	b.n	8001744 <HAL_RCC_ClockConfig+0x108>
      sysclockfreq = HSE_VALUE;
 8001742:	4824      	ldr	r0, [pc, #144]	; (80017d4 <HAL_RCC_ClockConfig+0x198>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001744:	4b1e      	ldr	r3, [pc, #120]	; (80017c0 <HAL_RCC_ClockConfig+0x184>)
 8001746:	4a24      	ldr	r2, [pc, #144]	; (80017d8 <HAL_RCC_ClockConfig+0x19c>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	061b      	lsls	r3, r3, #24
 800174c:	0f1b      	lsrs	r3, r3, #28
 800174e:	5cd3      	ldrb	r3, [r2, r3]
 8001750:	40d8      	lsrs	r0, r3
 8001752:	4b22      	ldr	r3, [pc, #136]	; (80017dc <HAL_RCC_ClockConfig+0x1a0>)
 8001754:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001756:	2000      	movs	r0, #0
 8001758:	f7fe fe4c 	bl	80003f4 <HAL_InitTick>
  return HAL_OK;
 800175c:	2000      	movs	r0, #0
 800175e:	e783      	b.n	8001668 <HAL_RCC_ClockConfig+0x2c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001760:	019b      	lsls	r3, r3, #6
 8001762:	d49b      	bmi.n	800169c <HAL_RCC_ClockConfig+0x60>
 8001764:	e77f      	b.n	8001666 <HAL_RCC_ClockConfig+0x2a>
          return HAL_TIMEOUT;
 8001766:	2003      	movs	r0, #3
 8001768:	e77e      	b.n	8001668 <HAL_RCC_ClockConfig+0x2c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800176a:	039b      	lsls	r3, r3, #14
 800176c:	d496      	bmi.n	800169c <HAL_RCC_ClockConfig+0x60>
 800176e:	e77a      	b.n	8001666 <HAL_RCC_ClockConfig+0x2a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001770:	330b      	adds	r3, #11
 8001772:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001774:	4b13      	ldr	r3, [pc, #76]	; (80017c4 <HAL_RCC_ClockConfig+0x188>)
 8001776:	4699      	mov	r9, r3
 8001778:	e004      	b.n	8001784 <HAL_RCC_ClockConfig+0x148>
 800177a:	f7fe fe65 	bl	8000448 <HAL_GetTick>
 800177e:	1bc0      	subs	r0, r0, r7
 8001780:	4548      	cmp	r0, r9
 8001782:	d8f0      	bhi.n	8001766 <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001784:	4642      	mov	r2, r8
 8001786:	6873      	ldr	r3, [r6, #4]
 8001788:	4013      	ands	r3, r2
 800178a:	2b04      	cmp	r3, #4
 800178c:	d1f5      	bne.n	800177a <HAL_RCC_ClockConfig+0x13e>
 800178e:	e7a1      	b.n	80016d4 <HAL_RCC_ClockConfig+0x98>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001790:	330a      	adds	r3, #10
 8001792:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001794:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <HAL_RCC_ClockConfig+0x188>)
 8001796:	4699      	mov	r9, r3
 8001798:	e004      	b.n	80017a4 <HAL_RCC_ClockConfig+0x168>
 800179a:	f7fe fe55 	bl	8000448 <HAL_GetTick>
 800179e:	1bc0      	subs	r0, r0, r7
 80017a0:	4548      	cmp	r0, r9
 80017a2:	d8e0      	bhi.n	8001766 <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017a4:	4642      	mov	r2, r8
 80017a6:	6873      	ldr	r3, [r6, #4]
 80017a8:	4013      	ands	r3, r2
 80017aa:	2b08      	cmp	r3, #8
 80017ac:	d1f5      	bne.n	800179a <HAL_RCC_ClockConfig+0x15e>
 80017ae:	e791      	b.n	80016d4 <HAL_RCC_ClockConfig+0x98>
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80017b0:	4808      	ldr	r0, [pc, #32]	; (80017d4 <HAL_RCC_ClockConfig+0x198>)
 80017b2:	f7fe fca9 	bl	8000108 <__udivsi3>
 80017b6:	4360      	muls	r0, r4
 80017b8:	e7c4      	b.n	8001744 <HAL_RCC_ClockConfig+0x108>
 80017ba:	46c0      	nop			; (mov r8, r8)
 80017bc:	40022000 	.word	0x40022000
 80017c0:	40021000 	.word	0x40021000
 80017c4:	00001388 	.word	0x00001388
 80017c8:	fffff8ff 	.word	0xfffff8ff
 80017cc:	0800568c 	.word	0x0800568c
 80017d0:	003d0900 	.word	0x003d0900
 80017d4:	007a1200 	.word	0x007a1200
 80017d8:	080056e4 	.word	0x080056e4
 80017dc:	20000068 	.word	0x20000068

080017e0 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80017e0:	4b01      	ldr	r3, [pc, #4]	; (80017e8 <HAL_RCC_GetHCLKFreq+0x8>)
 80017e2:	6818      	ldr	r0, [r3, #0]
}
 80017e4:	4770      	bx	lr
 80017e6:	46c0      	nop			; (mov r8, r8)
 80017e8:	20000068 	.word	0x20000068

080017ec <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80017ec:	b510      	push	{r4, lr}
 80017ee:	1e04      	subs	r4, r0, #0
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80017f0:	d064      	beq.n	80018bc <HAL_TIM_Base_Init+0xd0>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80017f2:	233d      	movs	r3, #61	; 0x3d
 80017f4:	5cc3      	ldrb	r3, [r0, r3]
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d03d      	beq.n	8001878 <HAL_TIM_Base_Init+0x8c>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80017fc:	2202      	movs	r2, #2
 80017fe:	233d      	movs	r3, #61	; 0x3d
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001800:	492f      	ldr	r1, [pc, #188]	; (80018c0 <HAL_TIM_Base_Init+0xd4>)
  htim->State= HAL_TIM_STATE_BUSY;
 8001802:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001804:	6823      	ldr	r3, [r4, #0]
  tmpcr1 = TIMx->CR1;
 8001806:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001808:	428b      	cmp	r3, r1
 800180a:	d021      	beq.n	8001850 <HAL_TIM_Base_Init+0x64>
 800180c:	2180      	movs	r1, #128	; 0x80
 800180e:	05c9      	lsls	r1, r1, #23
 8001810:	428b      	cmp	r3, r1
 8001812:	d036      	beq.n	8001882 <HAL_TIM_Base_Init+0x96>
 8001814:	492b      	ldr	r1, [pc, #172]	; (80018c4 <HAL_TIM_Base_Init+0xd8>)
 8001816:	428b      	cmp	r3, r1
 8001818:	d033      	beq.n	8001882 <HAL_TIM_Base_Init+0x96>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800181a:	492b      	ldr	r1, [pc, #172]	; (80018c8 <HAL_TIM_Base_Init+0xdc>)
 800181c:	428b      	cmp	r3, r1
 800181e:	d048      	beq.n	80018b2 <HAL_TIM_Base_Init+0xc6>
 8001820:	492a      	ldr	r1, [pc, #168]	; (80018cc <HAL_TIM_Base_Init+0xe0>)
 8001822:	428b      	cmp	r3, r1
 8001824:	d018      	beq.n	8001858 <HAL_TIM_Base_Init+0x6c>
 8001826:	492a      	ldr	r1, [pc, #168]	; (80018d0 <HAL_TIM_Base_Init+0xe4>)
 8001828:	428b      	cmp	r3, r1
 800182a:	d015      	beq.n	8001858 <HAL_TIM_Base_Init+0x6c>
 800182c:	4929      	ldr	r1, [pc, #164]	; (80018d4 <HAL_TIM_Base_Init+0xe8>)
 800182e:	428b      	cmp	r3, r1
 8001830:	d012      	beq.n	8001858 <HAL_TIM_Base_Init+0x6c>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001832:	2180      	movs	r1, #128	; 0x80
 8001834:	438a      	bics	r2, r1
 8001836:	69a1      	ldr	r1, [r4, #24]
 8001838:	430a      	orrs	r2, r1

  TIMx->CR1 = tmpcr1;
 800183a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800183c:	68e2      	ldr	r2, [r4, #12]
 800183e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001840:	6862      	ldr	r2, [r4, #4]
 8001842:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001844:	2201      	movs	r2, #1
 8001846:	615a      	str	r2, [r3, #20]
  htim->State= HAL_TIM_STATE_READY;
 8001848:	233d      	movs	r3, #61	; 0x3d
  return HAL_OK;
 800184a:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800184c:	54e2      	strb	r2, [r4, r3]
}
 800184e:	bd10      	pop	{r4, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001850:	2170      	movs	r1, #112	; 0x70
 8001852:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 8001854:	68a1      	ldr	r1, [r4, #8]
 8001856:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8001858:	491f      	ldr	r1, [pc, #124]	; (80018d8 <HAL_TIM_Base_Init+0xec>)
 800185a:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800185c:	6921      	ldr	r1, [r4, #16]
 800185e:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001860:	2180      	movs	r1, #128	; 0x80
 8001862:	438a      	bics	r2, r1
 8001864:	69a1      	ldr	r1, [r4, #24]
 8001866:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8001868:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800186a:	68e2      	ldr	r2, [r4, #12]
 800186c:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800186e:	6862      	ldr	r2, [r4, #4]
 8001870:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8001872:	6962      	ldr	r2, [r4, #20]
 8001874:	631a      	str	r2, [r3, #48]	; 0x30
 8001876:	e7e5      	b.n	8001844 <HAL_TIM_Base_Init+0x58>
    htim->Lock = HAL_UNLOCKED;
 8001878:	223c      	movs	r2, #60	; 0x3c
 800187a:	5483      	strb	r3, [r0, r2]
    HAL_TIM_Base_MspInit(htim);
 800187c:	f003 fd86 	bl	800538c <HAL_TIM_Base_MspInit>
 8001880:	e7bc      	b.n	80017fc <HAL_TIM_Base_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001882:	2170      	movs	r1, #112	; 0x70
 8001884:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 8001886:	68a1      	ldr	r1, [r4, #8]
 8001888:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800188a:	4913      	ldr	r1, [pc, #76]	; (80018d8 <HAL_TIM_Base_Init+0xec>)
 800188c:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800188e:	6921      	ldr	r1, [r4, #16]
 8001890:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001892:	2180      	movs	r1, #128	; 0x80
 8001894:	438a      	bics	r2, r1
 8001896:	69a1      	ldr	r1, [r4, #24]
 8001898:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 800189a:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800189c:	68e2      	ldr	r2, [r4, #12]
 800189e:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80018a0:	6862      	ldr	r2, [r4, #4]
 80018a2:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80018a4:	4a0a      	ldr	r2, [pc, #40]	; (80018d0 <HAL_TIM_Base_Init+0xe4>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d0e3      	beq.n	8001872 <HAL_TIM_Base_Init+0x86>
 80018aa:	4a0a      	ldr	r2, [pc, #40]	; (80018d4 <HAL_TIM_Base_Init+0xe8>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d0e0      	beq.n	8001872 <HAL_TIM_Base_Init+0x86>
 80018b0:	e7c8      	b.n	8001844 <HAL_TIM_Base_Init+0x58>
    tmpcr1 &= ~TIM_CR1_CKD;
 80018b2:	4909      	ldr	r1, [pc, #36]	; (80018d8 <HAL_TIM_Base_Init+0xec>)
 80018b4:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80018b6:	6921      	ldr	r1, [r4, #16]
 80018b8:	430a      	orrs	r2, r1
 80018ba:	e7ba      	b.n	8001832 <HAL_TIM_Base_Init+0x46>
    return HAL_ERROR;
 80018bc:	2001      	movs	r0, #1
 80018be:	e7c6      	b.n	800184e <HAL_TIM_Base_Init+0x62>
 80018c0:	40012c00 	.word	0x40012c00
 80018c4:	40000400 	.word	0x40000400
 80018c8:	40002000 	.word	0x40002000
 80018cc:	40014000 	.word	0x40014000
 80018d0:	40014400 	.word	0x40014400
 80018d4:	40014800 	.word	0x40014800
 80018d8:	fffffcff 	.word	0xfffffcff

080018dc <HAL_TIM_Base_Start>:
  htim->State= HAL_TIM_STATE_BUSY;
 80018dc:	223d      	movs	r2, #61	; 0x3d
 80018de:	2302      	movs	r3, #2
  __HAL_TIM_ENABLE(htim);
 80018e0:	2101      	movs	r1, #1
{
 80018e2:	b510      	push	{r4, lr}
  __HAL_TIM_ENABLE(htim);
 80018e4:	6804      	ldr	r4, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80018e6:	5483      	strb	r3, [r0, r2]
  __HAL_TIM_ENABLE(htim);
 80018e8:	6823      	ldr	r3, [r4, #0]
 80018ea:	430b      	orrs	r3, r1
 80018ec:	6023      	str	r3, [r4, #0]
  htim->State= HAL_TIM_STATE_READY;
 80018ee:	5481      	strb	r1, [r0, r2]
}
 80018f0:	2000      	movs	r0, #0
 80018f2:	bd10      	pop	{r4, pc}

080018f4 <HAL_TIM_Base_Stop>:
  htim->State= HAL_TIM_STATE_BUSY;
 80018f4:	2202      	movs	r2, #2
 80018f6:	233d      	movs	r3, #61	; 0x3d
 80018f8:	54c2      	strb	r2, [r0, r3]
  __HAL_TIM_DISABLE(htim);
 80018fa:	6803      	ldr	r3, [r0, #0]
 80018fc:	4a08      	ldr	r2, [pc, #32]	; (8001920 <HAL_TIM_Base_Stop+0x2c>)
 80018fe:	6a19      	ldr	r1, [r3, #32]
 8001900:	4211      	tst	r1, r2
 8001902:	d107      	bne.n	8001914 <HAL_TIM_Base_Stop+0x20>
 8001904:	6a19      	ldr	r1, [r3, #32]
 8001906:	4a07      	ldr	r2, [pc, #28]	; (8001924 <HAL_TIM_Base_Stop+0x30>)
 8001908:	4211      	tst	r1, r2
 800190a:	d103      	bne.n	8001914 <HAL_TIM_Base_Stop+0x20>
 800190c:	2101      	movs	r1, #1
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	438a      	bics	r2, r1
 8001912:	601a      	str	r2, [r3, #0]
  htim->State= HAL_TIM_STATE_READY;
 8001914:	2201      	movs	r2, #1
 8001916:	233d      	movs	r3, #61	; 0x3d
 8001918:	54c2      	strb	r2, [r0, r3]
}
 800191a:	2000      	movs	r0, #0
 800191c:	4770      	bx	lr
 800191e:	46c0      	nop			; (mov r8, r8)
 8001920:	00001111 	.word	0x00001111
 8001924:	00000444 	.word	0x00000444

08001928 <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001928:	6803      	ldr	r3, [r0, #0]
 800192a:	2001      	movs	r0, #1
 800192c:	68d9      	ldr	r1, [r3, #12]
 800192e:	4301      	orrs	r1, r0
 8001930:	60d9      	str	r1, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	4302      	orrs	r2, r0
 8001936:	601a      	str	r2, [r3, #0]
}
 8001938:	2000      	movs	r0, #0
 800193a:	4770      	bx	lr

0800193c <HAL_TIM_OC_Start_IT>:
 800193c:	2904      	cmp	r1, #4
 800193e:	d023      	beq.n	8001988 <HAL_TIM_OC_Start_IT+0x4c>
 8001940:	d92d      	bls.n	800199e <HAL_TIM_OC_Start_IT+0x62>
 8001942:	2908      	cmp	r1, #8
 8001944:	d020      	beq.n	8001988 <HAL_TIM_OC_Start_IT+0x4c>
 8001946:	290c      	cmp	r1, #12
 8001948:	d131      	bne.n	80019ae <HAL_TIM_OC_Start_IT+0x72>
 800194a:	6803      	ldr	r3, [r0, #0]
 800194c:	2010      	movs	r0, #16
 800194e:	68da      	ldr	r2, [r3, #12]
 8001950:	4302      	orrs	r2, r0
 8001952:	60da      	str	r2, [r3, #12]
 8001954:	2201      	movs	r2, #1
 8001956:	408a      	lsls	r2, r1
 8001958:	6a19      	ldr	r1, [r3, #32]
 800195a:	4391      	bics	r1, r2
 800195c:	6219      	str	r1, [r3, #32]
 800195e:	6a19      	ldr	r1, [r3, #32]
 8001960:	430a      	orrs	r2, r1
 8001962:	621a      	str	r2, [r3, #32]
 8001964:	4a13      	ldr	r2, [pc, #76]	; (80019b4 <HAL_TIM_OC_Start_IT+0x78>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d013      	beq.n	8001992 <HAL_TIM_OC_Start_IT+0x56>
 800196a:	4a13      	ldr	r2, [pc, #76]	; (80019b8 <HAL_TIM_OC_Start_IT+0x7c>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d010      	beq.n	8001992 <HAL_TIM_OC_Start_IT+0x56>
 8001970:	4a12      	ldr	r2, [pc, #72]	; (80019bc <HAL_TIM_OC_Start_IT+0x80>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d00d      	beq.n	8001992 <HAL_TIM_OC_Start_IT+0x56>
 8001976:	4a12      	ldr	r2, [pc, #72]	; (80019c0 <HAL_TIM_OC_Start_IT+0x84>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d00a      	beq.n	8001992 <HAL_TIM_OC_Start_IT+0x56>
 800197c:	2101      	movs	r1, #1
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	2000      	movs	r0, #0
 8001982:	430a      	orrs	r2, r1
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	4770      	bx	lr
 8001988:	6803      	ldr	r3, [r0, #0]
 800198a:	68da      	ldr	r2, [r3, #12]
 800198c:	430a      	orrs	r2, r1
 800198e:	60da      	str	r2, [r3, #12]
 8001990:	e7e0      	b.n	8001954 <HAL_TIM_OC_Start_IT+0x18>
 8001992:	2280      	movs	r2, #128	; 0x80
 8001994:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001996:	0212      	lsls	r2, r2, #8
 8001998:	430a      	orrs	r2, r1
 800199a:	645a      	str	r2, [r3, #68]	; 0x44
 800199c:	e7ee      	b.n	800197c <HAL_TIM_OC_Start_IT+0x40>
 800199e:	2900      	cmp	r1, #0
 80019a0:	d105      	bne.n	80019ae <HAL_TIM_OC_Start_IT+0x72>
 80019a2:	6803      	ldr	r3, [r0, #0]
 80019a4:	2002      	movs	r0, #2
 80019a6:	68da      	ldr	r2, [r3, #12]
 80019a8:	4302      	orrs	r2, r0
 80019aa:	60da      	str	r2, [r3, #12]
 80019ac:	e7d2      	b.n	8001954 <HAL_TIM_OC_Start_IT+0x18>
 80019ae:	6803      	ldr	r3, [r0, #0]
 80019b0:	e7d0      	b.n	8001954 <HAL_TIM_OC_Start_IT+0x18>
 80019b2:	46c0      	nop			; (mov r8, r8)
 80019b4:	40012c00 	.word	0x40012c00
 80019b8:	40014000 	.word	0x40014000
 80019bc:	40014400 	.word	0x40014400
 80019c0:	40014800 	.word	0x40014800

080019c4 <HAL_TIM_PWM_MspInit>:
 80019c4:	4770      	bx	lr
 80019c6:	46c0      	nop			; (mov r8, r8)

080019c8 <HAL_TIM_PWM_Init>:
{
 80019c8:	b510      	push	{r4, lr}
 80019ca:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 80019cc:	d064      	beq.n	8001a98 <HAL_TIM_PWM_Init+0xd0>
  if(htim->State == HAL_TIM_STATE_RESET)
 80019ce:	233d      	movs	r3, #61	; 0x3d
 80019d0:	5cc3      	ldrb	r3, [r0, r3]
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d03d      	beq.n	8001a54 <HAL_TIM_PWM_Init+0x8c>
  htim->State= HAL_TIM_STATE_BUSY;
 80019d8:	2202      	movs	r2, #2
 80019da:	233d      	movs	r3, #61	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019dc:	492f      	ldr	r1, [pc, #188]	; (8001a9c <HAL_TIM_PWM_Init+0xd4>)
  htim->State= HAL_TIM_STATE_BUSY;
 80019de:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019e0:	6823      	ldr	r3, [r4, #0]
  tmpcr1 = TIMx->CR1;
 80019e2:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019e4:	428b      	cmp	r3, r1
 80019e6:	d021      	beq.n	8001a2c <HAL_TIM_PWM_Init+0x64>
 80019e8:	2180      	movs	r1, #128	; 0x80
 80019ea:	05c9      	lsls	r1, r1, #23
 80019ec:	428b      	cmp	r3, r1
 80019ee:	d036      	beq.n	8001a5e <HAL_TIM_PWM_Init+0x96>
 80019f0:	492b      	ldr	r1, [pc, #172]	; (8001aa0 <HAL_TIM_PWM_Init+0xd8>)
 80019f2:	428b      	cmp	r3, r1
 80019f4:	d033      	beq.n	8001a5e <HAL_TIM_PWM_Init+0x96>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80019f6:	492b      	ldr	r1, [pc, #172]	; (8001aa4 <HAL_TIM_PWM_Init+0xdc>)
 80019f8:	428b      	cmp	r3, r1
 80019fa:	d048      	beq.n	8001a8e <HAL_TIM_PWM_Init+0xc6>
 80019fc:	492a      	ldr	r1, [pc, #168]	; (8001aa8 <HAL_TIM_PWM_Init+0xe0>)
 80019fe:	428b      	cmp	r3, r1
 8001a00:	d018      	beq.n	8001a34 <HAL_TIM_PWM_Init+0x6c>
 8001a02:	492a      	ldr	r1, [pc, #168]	; (8001aac <HAL_TIM_PWM_Init+0xe4>)
 8001a04:	428b      	cmp	r3, r1
 8001a06:	d015      	beq.n	8001a34 <HAL_TIM_PWM_Init+0x6c>
 8001a08:	4929      	ldr	r1, [pc, #164]	; (8001ab0 <HAL_TIM_PWM_Init+0xe8>)
 8001a0a:	428b      	cmp	r3, r1
 8001a0c:	d012      	beq.n	8001a34 <HAL_TIM_PWM_Init+0x6c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a0e:	2180      	movs	r1, #128	; 0x80
 8001a10:	438a      	bics	r2, r1
 8001a12:	69a1      	ldr	r1, [r4, #24]
 8001a14:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8001a16:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a18:	68e2      	ldr	r2, [r4, #12]
 8001a1a:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001a1c:	6862      	ldr	r2, [r4, #4]
 8001a1e:	629a      	str	r2, [r3, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8001a20:	2201      	movs	r2, #1
 8001a22:	615a      	str	r2, [r3, #20]
  htim->State= HAL_TIM_STATE_READY;
 8001a24:	233d      	movs	r3, #61	; 0x3d
  return HAL_OK;
 8001a26:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001a28:	54e2      	strb	r2, [r4, r3]
}
 8001a2a:	bd10      	pop	{r4, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a2c:	2170      	movs	r1, #112	; 0x70
 8001a2e:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 8001a30:	68a1      	ldr	r1, [r4, #8]
 8001a32:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a34:	491f      	ldr	r1, [pc, #124]	; (8001ab4 <HAL_TIM_PWM_Init+0xec>)
 8001a36:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a38:	6921      	ldr	r1, [r4, #16]
 8001a3a:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a3c:	2180      	movs	r1, #128	; 0x80
 8001a3e:	438a      	bics	r2, r1
 8001a40:	69a1      	ldr	r1, [r4, #24]
 8001a42:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8001a44:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a46:	68e2      	ldr	r2, [r4, #12]
 8001a48:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001a4a:	6862      	ldr	r2, [r4, #4]
 8001a4c:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8001a4e:	6962      	ldr	r2, [r4, #20]
 8001a50:	631a      	str	r2, [r3, #48]	; 0x30
 8001a52:	e7e5      	b.n	8001a20 <HAL_TIM_PWM_Init+0x58>
    htim->Lock = HAL_UNLOCKED;
 8001a54:	223c      	movs	r2, #60	; 0x3c
 8001a56:	5483      	strb	r3, [r0, r2]
    HAL_TIM_PWM_MspInit(htim);
 8001a58:	f7ff ffb4 	bl	80019c4 <HAL_TIM_PWM_MspInit>
 8001a5c:	e7bc      	b.n	80019d8 <HAL_TIM_PWM_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a5e:	2170      	movs	r1, #112	; 0x70
 8001a60:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 8001a62:	68a1      	ldr	r1, [r4, #8]
 8001a64:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a66:	4913      	ldr	r1, [pc, #76]	; (8001ab4 <HAL_TIM_PWM_Init+0xec>)
 8001a68:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a6a:	6921      	ldr	r1, [r4, #16]
 8001a6c:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a6e:	2180      	movs	r1, #128	; 0x80
 8001a70:	438a      	bics	r2, r1
 8001a72:	69a1      	ldr	r1, [r4, #24]
 8001a74:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8001a76:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a78:	68e2      	ldr	r2, [r4, #12]
 8001a7a:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001a7c:	6862      	ldr	r2, [r4, #4]
 8001a7e:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a80:	4a0a      	ldr	r2, [pc, #40]	; (8001aac <HAL_TIM_PWM_Init+0xe4>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d0e3      	beq.n	8001a4e <HAL_TIM_PWM_Init+0x86>
 8001a86:	4a0a      	ldr	r2, [pc, #40]	; (8001ab0 <HAL_TIM_PWM_Init+0xe8>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d0e0      	beq.n	8001a4e <HAL_TIM_PWM_Init+0x86>
 8001a8c:	e7c8      	b.n	8001a20 <HAL_TIM_PWM_Init+0x58>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a8e:	4909      	ldr	r1, [pc, #36]	; (8001ab4 <HAL_TIM_PWM_Init+0xec>)
 8001a90:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a92:	6921      	ldr	r1, [r4, #16]
 8001a94:	430a      	orrs	r2, r1
 8001a96:	e7ba      	b.n	8001a0e <HAL_TIM_PWM_Init+0x46>
    return HAL_ERROR;
 8001a98:	2001      	movs	r0, #1
 8001a9a:	e7c6      	b.n	8001a2a <HAL_TIM_PWM_Init+0x62>
 8001a9c:	40012c00 	.word	0x40012c00
 8001aa0:	40000400 	.word	0x40000400
 8001aa4:	40002000 	.word	0x40002000
 8001aa8:	40014000 	.word	0x40014000
 8001aac:	40014400 	.word	0x40014400
 8001ab0:	40014800 	.word	0x40014800
 8001ab4:	fffffcff 	.word	0xfffffcff

08001ab8 <HAL_TIM_PWM_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8001ab8:	2201      	movs	r2, #1
 8001aba:	408a      	lsls	r2, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001abc:	6803      	ldr	r3, [r0, #0]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001abe:	6a19      	ldr	r1, [r3, #32]
 8001ac0:	4391      	bics	r1, r2
 8001ac2:	6219      	str	r1, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001ac4:	6a19      	ldr	r1, [r3, #32]
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	621a      	str	r2, [r3, #32]
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001aca:	4a0c      	ldr	r2, [pc, #48]	; (8001afc <HAL_TIM_PWM_Start+0x44>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d00e      	beq.n	8001aee <HAL_TIM_PWM_Start+0x36>
 8001ad0:	4a0b      	ldr	r2, [pc, #44]	; (8001b00 <HAL_TIM_PWM_Start+0x48>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d00b      	beq.n	8001aee <HAL_TIM_PWM_Start+0x36>
 8001ad6:	4a0b      	ldr	r2, [pc, #44]	; (8001b04 <HAL_TIM_PWM_Start+0x4c>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d008      	beq.n	8001aee <HAL_TIM_PWM_Start+0x36>
 8001adc:	4a0a      	ldr	r2, [pc, #40]	; (8001b08 <HAL_TIM_PWM_Start+0x50>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d005      	beq.n	8001aee <HAL_TIM_PWM_Start+0x36>
  __HAL_TIM_ENABLE(htim);
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	681a      	ldr	r2, [r3, #0]
}
 8001ae6:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	601a      	str	r2, [r3, #0]
}
 8001aec:	4770      	bx	lr
    __HAL_TIM_MOE_ENABLE(htim);
 8001aee:	2280      	movs	r2, #128	; 0x80
 8001af0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001af2:	0212      	lsls	r2, r2, #8
 8001af4:	430a      	orrs	r2, r1
 8001af6:	645a      	str	r2, [r3, #68]	; 0x44
 8001af8:	e7f3      	b.n	8001ae2 <HAL_TIM_PWM_Start+0x2a>
 8001afa:	46c0      	nop			; (mov r8, r8)
 8001afc:	40012c00 	.word	0x40012c00
 8001b00:	40014000 	.word	0x40014000
 8001b04:	40014400 	.word	0x40014400
 8001b08:	40014800 	.word	0x40014800

08001b0c <HAL_TIM_IC_MspInit>:
 8001b0c:	4770      	bx	lr
 8001b0e:	46c0      	nop			; (mov r8, r8)

08001b10 <HAL_TIM_IC_Init>:
{
 8001b10:	b510      	push	{r4, lr}
 8001b12:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8001b14:	d064      	beq.n	8001be0 <HAL_TIM_IC_Init+0xd0>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001b16:	233d      	movs	r3, #61	; 0x3d
 8001b18:	5cc3      	ldrb	r3, [r0, r3]
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d03d      	beq.n	8001b9c <HAL_TIM_IC_Init+0x8c>
  htim->State= HAL_TIM_STATE_BUSY;
 8001b20:	2202      	movs	r2, #2
 8001b22:	233d      	movs	r3, #61	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b24:	492f      	ldr	r1, [pc, #188]	; (8001be4 <HAL_TIM_IC_Init+0xd4>)
  htim->State= HAL_TIM_STATE_BUSY;
 8001b26:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b28:	6823      	ldr	r3, [r4, #0]
  tmpcr1 = TIMx->CR1;
 8001b2a:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b2c:	428b      	cmp	r3, r1
 8001b2e:	d021      	beq.n	8001b74 <HAL_TIM_IC_Init+0x64>
 8001b30:	2180      	movs	r1, #128	; 0x80
 8001b32:	05c9      	lsls	r1, r1, #23
 8001b34:	428b      	cmp	r3, r1
 8001b36:	d036      	beq.n	8001ba6 <HAL_TIM_IC_Init+0x96>
 8001b38:	492b      	ldr	r1, [pc, #172]	; (8001be8 <HAL_TIM_IC_Init+0xd8>)
 8001b3a:	428b      	cmp	r3, r1
 8001b3c:	d033      	beq.n	8001ba6 <HAL_TIM_IC_Init+0x96>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b3e:	492b      	ldr	r1, [pc, #172]	; (8001bec <HAL_TIM_IC_Init+0xdc>)
 8001b40:	428b      	cmp	r3, r1
 8001b42:	d048      	beq.n	8001bd6 <HAL_TIM_IC_Init+0xc6>
 8001b44:	492a      	ldr	r1, [pc, #168]	; (8001bf0 <HAL_TIM_IC_Init+0xe0>)
 8001b46:	428b      	cmp	r3, r1
 8001b48:	d018      	beq.n	8001b7c <HAL_TIM_IC_Init+0x6c>
 8001b4a:	492a      	ldr	r1, [pc, #168]	; (8001bf4 <HAL_TIM_IC_Init+0xe4>)
 8001b4c:	428b      	cmp	r3, r1
 8001b4e:	d015      	beq.n	8001b7c <HAL_TIM_IC_Init+0x6c>
 8001b50:	4929      	ldr	r1, [pc, #164]	; (8001bf8 <HAL_TIM_IC_Init+0xe8>)
 8001b52:	428b      	cmp	r3, r1
 8001b54:	d012      	beq.n	8001b7c <HAL_TIM_IC_Init+0x6c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b56:	2180      	movs	r1, #128	; 0x80
 8001b58:	438a      	bics	r2, r1
 8001b5a:	69a1      	ldr	r1, [r4, #24]
 8001b5c:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8001b5e:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b60:	68e2      	ldr	r2, [r4, #12]
 8001b62:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001b64:	6862      	ldr	r2, [r4, #4]
 8001b66:	629a      	str	r2, [r3, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8001b68:	2201      	movs	r2, #1
 8001b6a:	615a      	str	r2, [r3, #20]
  htim->State= HAL_TIM_STATE_READY;
 8001b6c:	233d      	movs	r3, #61	; 0x3d
  return HAL_OK;
 8001b6e:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001b70:	54e2      	strb	r2, [r4, r3]
}
 8001b72:	bd10      	pop	{r4, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b74:	2170      	movs	r1, #112	; 0x70
 8001b76:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 8001b78:	68a1      	ldr	r1, [r4, #8]
 8001b7a:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b7c:	491f      	ldr	r1, [pc, #124]	; (8001bfc <HAL_TIM_IC_Init+0xec>)
 8001b7e:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b80:	6921      	ldr	r1, [r4, #16]
 8001b82:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b84:	2180      	movs	r1, #128	; 0x80
 8001b86:	438a      	bics	r2, r1
 8001b88:	69a1      	ldr	r1, [r4, #24]
 8001b8a:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8001b8c:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b8e:	68e2      	ldr	r2, [r4, #12]
 8001b90:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001b92:	6862      	ldr	r2, [r4, #4]
 8001b94:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8001b96:	6962      	ldr	r2, [r4, #20]
 8001b98:	631a      	str	r2, [r3, #48]	; 0x30
 8001b9a:	e7e5      	b.n	8001b68 <HAL_TIM_IC_Init+0x58>
    htim->Lock = HAL_UNLOCKED;
 8001b9c:	223c      	movs	r2, #60	; 0x3c
 8001b9e:	5483      	strb	r3, [r0, r2]
    HAL_TIM_IC_MspInit(htim);
 8001ba0:	f7ff ffb4 	bl	8001b0c <HAL_TIM_IC_MspInit>
 8001ba4:	e7bc      	b.n	8001b20 <HAL_TIM_IC_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ba6:	2170      	movs	r1, #112	; 0x70
 8001ba8:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 8001baa:	68a1      	ldr	r1, [r4, #8]
 8001bac:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8001bae:	4913      	ldr	r1, [pc, #76]	; (8001bfc <HAL_TIM_IC_Init+0xec>)
 8001bb0:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bb2:	6921      	ldr	r1, [r4, #16]
 8001bb4:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001bb6:	2180      	movs	r1, #128	; 0x80
 8001bb8:	438a      	bics	r2, r1
 8001bba:	69a1      	ldr	r1, [r4, #24]
 8001bbc:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8001bbe:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001bc0:	68e2      	ldr	r2, [r4, #12]
 8001bc2:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001bc4:	6862      	ldr	r2, [r4, #4]
 8001bc6:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001bc8:	4a0a      	ldr	r2, [pc, #40]	; (8001bf4 <HAL_TIM_IC_Init+0xe4>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d0e3      	beq.n	8001b96 <HAL_TIM_IC_Init+0x86>
 8001bce:	4a0a      	ldr	r2, [pc, #40]	; (8001bf8 <HAL_TIM_IC_Init+0xe8>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d0e0      	beq.n	8001b96 <HAL_TIM_IC_Init+0x86>
 8001bd4:	e7c8      	b.n	8001b68 <HAL_TIM_IC_Init+0x58>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001bd6:	4909      	ldr	r1, [pc, #36]	; (8001bfc <HAL_TIM_IC_Init+0xec>)
 8001bd8:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bda:	6921      	ldr	r1, [r4, #16]
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	e7ba      	b.n	8001b56 <HAL_TIM_IC_Init+0x46>
    return HAL_ERROR;
 8001be0:	2001      	movs	r0, #1
 8001be2:	e7c6      	b.n	8001b72 <HAL_TIM_IC_Init+0x62>
 8001be4:	40012c00 	.word	0x40012c00
 8001be8:	40000400 	.word	0x40000400
 8001bec:	40002000 	.word	0x40002000
 8001bf0:	40014000 	.word	0x40014000
 8001bf4:	40014400 	.word	0x40014400
 8001bf8:	40014800 	.word	0x40014800
 8001bfc:	fffffcff 	.word	0xfffffcff

08001c00 <HAL_TIM_IC_Start_DMA>:
{
 8001c00:	b570      	push	{r4, r5, r6, lr}
 8001c02:	000d      	movs	r5, r1
  if((htim->State == HAL_TIM_STATE_BUSY))
 8001c04:	213d      	movs	r1, #61	; 0x3d
 8001c06:	5c46      	ldrb	r6, [r0, r1]
{
 8001c08:	0004      	movs	r4, r0
     return HAL_BUSY;
 8001c0a:	2002      	movs	r0, #2
  if((htim->State == HAL_TIM_STATE_BUSY))
 8001c0c:	2e02      	cmp	r6, #2
 8001c0e:	d026      	beq.n	8001c5e <HAL_TIM_IC_Start_DMA+0x5e>
  else if((htim->State == HAL_TIM_STATE_READY))
 8001c10:	5c61      	ldrb	r1, [r4, r1]
 8001c12:	2901      	cmp	r1, #1
 8001c14:	d024      	beq.n	8001c60 <HAL_TIM_IC_Start_DMA+0x60>
  switch (Channel)
 8001c16:	2d04      	cmp	r5, #4
 8001c18:	d03a      	beq.n	8001c90 <HAL_TIM_IC_Start_DMA+0x90>
 8001c1a:	2d04      	cmp	r5, #4
 8001c1c:	d948      	bls.n	8001cb0 <HAL_TIM_IC_Start_DMA+0xb0>
 8001c1e:	2d08      	cmp	r5, #8
 8001c20:	d026      	beq.n	8001c70 <HAL_TIM_IC_Start_DMA+0x70>
 8001c22:	2d0c      	cmp	r5, #12
 8001c24:	d156      	bne.n	8001cd4 <HAL_TIM_IC_Start_DMA+0xd4>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8001c26:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001c28:	492d      	ldr	r1, [pc, #180]	; (8001ce0 <HAL_TIM_IC_Start_DMA+0xe0>)
 8001c2a:	6281      	str	r1, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8001c2c:	492d      	ldr	r1, [pc, #180]	; (8001ce4 <HAL_TIM_IC_Start_DMA+0xe4>)
 8001c2e:	6301      	str	r1, [r0, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length);
 8001c30:	6821      	ldr	r1, [r4, #0]
 8001c32:	3140      	adds	r1, #64	; 0x40
 8001c34:	f7fe ff7c 	bl	8000b30 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8001c38:	2280      	movs	r2, #128	; 0x80
 8001c3a:	6823      	ldr	r3, [r4, #0]
 8001c3c:	0152      	lsls	r2, r2, #5
 8001c3e:	68d9      	ldr	r1, [r3, #12]
 8001c40:	430a      	orrs	r2, r1
 8001c42:	60da      	str	r2, [r3, #12]
  tmp = TIM_CCER_CC1E << Channel;
 8001c44:	2001      	movs	r0, #1
 8001c46:	0002      	movs	r2, r0
 8001c48:	40aa      	lsls	r2, r5
  TIMx->CCER &= ~tmp;
 8001c4a:	6a19      	ldr	r1, [r3, #32]
 8001c4c:	4391      	bics	r1, r2
 8001c4e:	6219      	str	r1, [r3, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001c50:	6a19      	ldr	r1, [r3, #32]
 8001c52:	430a      	orrs	r2, r1
 8001c54:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	4302      	orrs	r2, r0
  return HAL_OK;
 8001c5a:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8001c5c:	601a      	str	r2, [r3, #0]
}
 8001c5e:	bd70      	pop	{r4, r5, r6, pc}
    if((pData == 0U ) && (Length > 0U))
 8001c60:	2a00      	cmp	r2, #0
 8001c62:	d039      	beq.n	8001cd8 <HAL_TIM_IC_Start_DMA+0xd8>
      htim->State = HAL_TIM_STATE_BUSY;
 8001c64:	2002      	movs	r0, #2
 8001c66:	213d      	movs	r1, #61	; 0x3d
 8001c68:	5460      	strb	r0, [r4, r1]
  switch (Channel)
 8001c6a:	2d04      	cmp	r5, #4
 8001c6c:	d1d5      	bne.n	8001c1a <HAL_TIM_IC_Start_DMA+0x1a>
 8001c6e:	e00f      	b.n	8001c90 <HAL_TIM_IC_Start_DMA+0x90>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8001c70:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001c72:	491b      	ldr	r1, [pc, #108]	; (8001ce0 <HAL_TIM_IC_Start_DMA+0xe0>)
 8001c74:	6281      	str	r1, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8001c76:	491b      	ldr	r1, [pc, #108]	; (8001ce4 <HAL_TIM_IC_Start_DMA+0xe4>)
 8001c78:	6301      	str	r1, [r0, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length);
 8001c7a:	6821      	ldr	r1, [r4, #0]
 8001c7c:	313c      	adds	r1, #60	; 0x3c
 8001c7e:	f7fe ff57 	bl	8000b30 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8001c82:	2280      	movs	r2, #128	; 0x80
 8001c84:	6823      	ldr	r3, [r4, #0]
 8001c86:	0112      	lsls	r2, r2, #4
 8001c88:	68d9      	ldr	r1, [r3, #12]
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	60da      	str	r2, [r3, #12]
    break;
 8001c8e:	e7d9      	b.n	8001c44 <HAL_TIM_IC_Start_DMA+0x44>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8001c90:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001c92:	4913      	ldr	r1, [pc, #76]	; (8001ce0 <HAL_TIM_IC_Start_DMA+0xe0>)
 8001c94:	6281      	str	r1, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8001c96:	4913      	ldr	r1, [pc, #76]	; (8001ce4 <HAL_TIM_IC_Start_DMA+0xe4>)
 8001c98:	6301      	str	r1, [r0, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length);
 8001c9a:	6821      	ldr	r1, [r4, #0]
 8001c9c:	3138      	adds	r1, #56	; 0x38
 8001c9e:	f7fe ff47 	bl	8000b30 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8001ca2:	2280      	movs	r2, #128	; 0x80
 8001ca4:	6823      	ldr	r3, [r4, #0]
 8001ca6:	00d2      	lsls	r2, r2, #3
 8001ca8:	68d9      	ldr	r1, [r3, #12]
 8001caa:	430a      	orrs	r2, r1
 8001cac:	60da      	str	r2, [r3, #12]
    break;
 8001cae:	e7c9      	b.n	8001c44 <HAL_TIM_IC_Start_DMA+0x44>
  switch (Channel)
 8001cb0:	2d00      	cmp	r5, #0
 8001cb2:	d10f      	bne.n	8001cd4 <HAL_TIM_IC_Start_DMA+0xd4>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8001cb4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001cb6:	490a      	ldr	r1, [pc, #40]	; (8001ce0 <HAL_TIM_IC_Start_DMA+0xe0>)
 8001cb8:	6281      	str	r1, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8001cba:	490a      	ldr	r1, [pc, #40]	; (8001ce4 <HAL_TIM_IC_Start_DMA+0xe4>)
 8001cbc:	6301      	str	r1, [r0, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length);
 8001cbe:	6821      	ldr	r1, [r4, #0]
 8001cc0:	3134      	adds	r1, #52	; 0x34
 8001cc2:	f7fe ff35 	bl	8000b30 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8001cc6:	2280      	movs	r2, #128	; 0x80
 8001cc8:	6823      	ldr	r3, [r4, #0]
 8001cca:	0092      	lsls	r2, r2, #2
 8001ccc:	68d9      	ldr	r1, [r3, #12]
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	60da      	str	r2, [r3, #12]
    break;
 8001cd2:	e7b7      	b.n	8001c44 <HAL_TIM_IC_Start_DMA+0x44>
 8001cd4:	6823      	ldr	r3, [r4, #0]
 8001cd6:	e7b5      	b.n	8001c44 <HAL_TIM_IC_Start_DMA+0x44>
      return HAL_ERROR;
 8001cd8:	3801      	subs	r0, #1
    if((pData == 0U ) && (Length > 0U))
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0c2      	beq.n	8001c64 <HAL_TIM_IC_Start_DMA+0x64>
 8001cde:	e7be      	b.n	8001c5e <HAL_TIM_IC_Start_DMA+0x5e>
 8001ce0:	08002419 	.word	0x08002419
 8001ce4:	080025bd 	.word	0x080025bd

08001ce8 <HAL_TIM_IC_Stop_DMA>:
{
 8001ce8:	b530      	push	{r4, r5, lr}
  switch (Channel)
 8001cea:	2904      	cmp	r1, #4
 8001cec:	d031      	beq.n	8001d52 <HAL_TIM_IC_Stop_DMA+0x6a>
 8001cee:	d926      	bls.n	8001d3e <HAL_TIM_IC_Stop_DMA+0x56>
 8001cf0:	2908      	cmp	r1, #8
 8001cf2:	d01e      	beq.n	8001d32 <HAL_TIM_IC_Stop_DMA+0x4a>
 8001cf4:	290c      	cmp	r1, #12
 8001cf6:	d12a      	bne.n	8001d4e <HAL_TIM_IC_Stop_DMA+0x66>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8001cf8:	6803      	ldr	r3, [r0, #0]
 8001cfa:	4c19      	ldr	r4, [pc, #100]	; (8001d60 <HAL_TIM_IC_Stop_DMA+0x78>)
 8001cfc:	68da      	ldr	r2, [r3, #12]
 8001cfe:	4022      	ands	r2, r4
 8001d00:	60da      	str	r2, [r3, #12]
  tmp = TIM_CCER_CC1E << Channel;
 8001d02:	2401      	movs	r4, #1
 8001d04:	0025      	movs	r5, r4
 8001d06:	408d      	lsls	r5, r1
  TIMx->CCER &= ~tmp;
 8001d08:	6a1a      	ldr	r2, [r3, #32]
 8001d0a:	43aa      	bics	r2, r5
 8001d0c:	621a      	str	r2, [r3, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001d0e:	6a1a      	ldr	r2, [r3, #32]
 8001d10:	621a      	str	r2, [r3, #32]
  __HAL_TIM_DISABLE(htim);
 8001d12:	6a19      	ldr	r1, [r3, #32]
 8001d14:	4a13      	ldr	r2, [pc, #76]	; (8001d64 <HAL_TIM_IC_Stop_DMA+0x7c>)
 8001d16:	4211      	tst	r1, r2
 8001d18:	d106      	bne.n	8001d28 <HAL_TIM_IC_Stop_DMA+0x40>
 8001d1a:	6a19      	ldr	r1, [r3, #32]
 8001d1c:	4a12      	ldr	r2, [pc, #72]	; (8001d68 <HAL_TIM_IC_Stop_DMA+0x80>)
 8001d1e:	4211      	tst	r1, r2
 8001d20:	d102      	bne.n	8001d28 <HAL_TIM_IC_Stop_DMA+0x40>
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	43a2      	bics	r2, r4
 8001d26:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8001d28:	2201      	movs	r2, #1
 8001d2a:	233d      	movs	r3, #61	; 0x3d
 8001d2c:	54c2      	strb	r2, [r0, r3]
}
 8001d2e:	2000      	movs	r0, #0
 8001d30:	bd30      	pop	{r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8001d32:	6803      	ldr	r3, [r0, #0]
 8001d34:	4c0d      	ldr	r4, [pc, #52]	; (8001d6c <HAL_TIM_IC_Stop_DMA+0x84>)
 8001d36:	68da      	ldr	r2, [r3, #12]
 8001d38:	4022      	ands	r2, r4
 8001d3a:	60da      	str	r2, [r3, #12]
    break;
 8001d3c:	e7e1      	b.n	8001d02 <HAL_TIM_IC_Stop_DMA+0x1a>
  switch (Channel)
 8001d3e:	2900      	cmp	r1, #0
 8001d40:	d105      	bne.n	8001d4e <HAL_TIM_IC_Stop_DMA+0x66>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8001d42:	6803      	ldr	r3, [r0, #0]
 8001d44:	4c0a      	ldr	r4, [pc, #40]	; (8001d70 <HAL_TIM_IC_Stop_DMA+0x88>)
 8001d46:	68da      	ldr	r2, [r3, #12]
 8001d48:	4022      	ands	r2, r4
 8001d4a:	60da      	str	r2, [r3, #12]
    break;
 8001d4c:	e7d9      	b.n	8001d02 <HAL_TIM_IC_Stop_DMA+0x1a>
 8001d4e:	6803      	ldr	r3, [r0, #0]
 8001d50:	e7d7      	b.n	8001d02 <HAL_TIM_IC_Stop_DMA+0x1a>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8001d52:	6803      	ldr	r3, [r0, #0]
 8001d54:	4c07      	ldr	r4, [pc, #28]	; (8001d74 <HAL_TIM_IC_Stop_DMA+0x8c>)
 8001d56:	68da      	ldr	r2, [r3, #12]
 8001d58:	4022      	ands	r2, r4
 8001d5a:	60da      	str	r2, [r3, #12]
    break;
 8001d5c:	e7d1      	b.n	8001d02 <HAL_TIM_IC_Stop_DMA+0x1a>
 8001d5e:	46c0      	nop			; (mov r8, r8)
 8001d60:	ffffefff 	.word	0xffffefff
 8001d64:	00001111 	.word	0x00001111
 8001d68:	00000444 	.word	0x00000444
 8001d6c:	fffff7ff 	.word	0xfffff7ff
 8001d70:	fffffdff 	.word	0xfffffdff
 8001d74:	fffffbff 	.word	0xfffffbff

08001d78 <HAL_TIM_IC_ConfigChannel>:
{
 8001d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d7a:	46ce      	mov	lr, r9
 8001d7c:	4647      	mov	r7, r8
  __HAL_LOCK(htim);
 8001d7e:	243c      	movs	r4, #60	; 0x3c
{
 8001d80:	b580      	push	{r7, lr}
  __HAL_LOCK(htim);
 8001d82:	5d05      	ldrb	r5, [r0, r4]
{
 8001d84:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8001d86:	2002      	movs	r0, #2
 8001d88:	2d01      	cmp	r5, #1
 8001d8a:	d038      	beq.n	8001dfe <HAL_TIM_IC_ConfigChannel+0x86>
 8001d8c:	2501      	movs	r5, #1
 8001d8e:	551d      	strb	r5, [r3, r4]
  htim->State = HAL_TIM_STATE_BUSY;
 8001d90:	3401      	adds	r4, #1
 8001d92:	5518      	strb	r0, [r3, r4]
  if (Channel == TIM_CHANNEL_1)
 8001d94:	2a00      	cmp	r2, #0
 8001d96:	d036      	beq.n	8001e06 <HAL_TIM_IC_ConfigChannel+0x8e>
  else if (Channel == TIM_CHANNEL_2)
 8001d98:	2a04      	cmp	r2, #4
 8001d9a:	d063      	beq.n	8001e64 <HAL_TIM_IC_ConfigChannel+0xec>
  else if (Channel == TIM_CHANNEL_3)
 8001d9c:	2a08      	cmp	r2, #8
 8001d9e:	d100      	bne.n	8001da2 <HAL_TIM_IC_ConfigChannel+0x2a>
 8001da0:	e086      	b.n	8001eb0 <HAL_TIM_IC_ConfigChannel+0x138>
    TIM_TI4_SetConfig(htim->Instance,
 8001da2:	6808      	ldr	r0, [r1, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	4680      	mov	r8, r0
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001da8:	6a16      	ldr	r6, [r2, #32]
 8001daa:	4f58      	ldr	r7, [pc, #352]	; (8001f0c <HAL_TIM_IC_ConfigChannel+0x194>)
    TIM_TI4_SetConfig(htim->Instance,
 8001dac:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001dae:	403e      	ands	r6, r7
    TIM_TI4_SetConfig(htim->Instance,
 8001db0:	68cc      	ldr	r4, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001db2:	6216      	str	r6, [r2, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001db4:	69d7      	ldr	r7, [r2, #28]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8001db6:	4856      	ldr	r0, [pc, #344]	; (8001f10 <HAL_TIM_IC_ConfigChannel+0x198>)
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8001db8:	022d      	lsls	r5, r5, #8
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8001dba:	4007      	ands	r7, r0
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8001dbc:	433d      	orrs	r5, r7
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8001dbe:	4f55      	ldr	r7, [pc, #340]	; (8001f14 <HAL_TIM_IC_ConfigChannel+0x19c>)
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001dc0:	0724      	lsls	r4, r4, #28
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8001dc2:	403d      	ands	r5, r7
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001dc4:	0c24      	lsrs	r4, r4, #16
  tmpccer = TIMx->CCER;
 8001dc6:	6a16      	ldr	r6, [r2, #32]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001dc8:	432c      	orrs	r4, r5
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8001dca:	4d53      	ldr	r5, [pc, #332]	; (8001f18 <HAL_TIM_IC_ConfigChannel+0x1a0>)
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001dcc:	4640      	mov	r0, r8
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8001dce:	4035      	ands	r5, r6
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001dd0:	26a0      	movs	r6, #160	; 0xa0
 8001dd2:	0300      	lsls	r0, r0, #12
 8001dd4:	0236      	lsls	r6, r6, #8
 8001dd6:	4030      	ands	r0, r6
 8001dd8:	4328      	orrs	r0, r5
  TIMx->CCMR2 = tmpccmr2;
 8001dda:	61d4      	str	r4, [r2, #28]
  TIMx->CCER = tmpccer ;
 8001ddc:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001dde:	69d0      	ldr	r0, [r2, #28]
 8001de0:	4c4e      	ldr	r4, [pc, #312]	; (8001f1c <HAL_TIM_IC_ConfigChannel+0x1a4>)
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001de2:	6889      	ldr	r1, [r1, #8]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001de4:	4020      	ands	r0, r4
 8001de6:	61d0      	str	r0, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001de8:	69d0      	ldr	r0, [r2, #28]
 8001dea:	0209      	lsls	r1, r1, #8
 8001dec:	4301      	orrs	r1, r0
 8001dee:	61d1      	str	r1, [r2, #28]
  htim->State = HAL_TIM_STATE_READY;
 8001df0:	2101      	movs	r1, #1
 8001df2:	223d      	movs	r2, #61	; 0x3d
 8001df4:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(htim);
 8001df6:	2100      	movs	r1, #0
  return HAL_OK;
 8001df8:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8001dfa:	3a01      	subs	r2, #1
 8001dfc:	5499      	strb	r1, [r3, r2]
}
 8001dfe:	bc0c      	pop	{r2, r3}
 8001e00:	4690      	mov	r8, r2
 8001e02:	4699      	mov	r9, r3
 8001e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    TIM_TI1_SetConfig(htim->Instance,
 8001e06:	6848      	ldr	r0, [r1, #4]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	4680      	mov	r8, r0
 8001e0c:	68c8      	ldr	r0, [r1, #12]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001e0e:	4c44      	ldr	r4, [pc, #272]	; (8001f20 <HAL_TIM_IC_ConfigChannel+0x1a8>)
    TIM_TI1_SetConfig(htim->Instance,
 8001e10:	4681      	mov	r9, r0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e12:	6a10      	ldr	r0, [r2, #32]
    TIM_TI1_SetConfig(htim->Instance,
 8001e14:	680f      	ldr	r7, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e16:	43a8      	bics	r0, r5
 8001e18:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e1a:	6990      	ldr	r0, [r2, #24]
  tmpccer = TIMx->CCER;
 8001e1c:	6a16      	ldr	r6, [r2, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001e1e:	42a2      	cmp	r2, r4
 8001e20:	d06d      	beq.n	8001efe <HAL_TIM_IC_ConfigChannel+0x186>
 8001e22:	2480      	movs	r4, #128	; 0x80
 8001e24:	05e4      	lsls	r4, r4, #23
 8001e26:	42a2      	cmp	r2, r4
 8001e28:	d069      	beq.n	8001efe <HAL_TIM_IC_ConfigChannel+0x186>
 8001e2a:	4c3e      	ldr	r4, [pc, #248]	; (8001f24 <HAL_TIM_IC_ConfigChannel+0x1ac>)
 8001e2c:	42a2      	cmp	r2, r4
 8001e2e:	d066      	beq.n	8001efe <HAL_TIM_IC_ConfigChannel+0x186>
 8001e30:	4c3d      	ldr	r4, [pc, #244]	; (8001f28 <HAL_TIM_IC_ConfigChannel+0x1b0>)
 8001e32:	42a2      	cmp	r2, r4
 8001e34:	d063      	beq.n	8001efe <HAL_TIM_IC_ConfigChannel+0x186>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8001e36:	4305      	orrs	r5, r0
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e38:	20f0      	movs	r0, #240	; 0xf0
 8001e3a:	4385      	bics	r5, r0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001e3c:	4648      	mov	r0, r9
 8001e3e:	24ff      	movs	r4, #255	; 0xff
 8001e40:	0100      	lsls	r0, r0, #4
 8001e42:	4004      	ands	r4, r0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e44:	200a      	movs	r0, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001e46:	4325      	orrs	r5, r4
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001e48:	240c      	movs	r4, #12
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e4a:	4386      	bics	r6, r0
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001e4c:	4038      	ands	r0, r7
 8001e4e:	4330      	orrs	r0, r6
  TIMx->CCMR1 = tmpccmr1;
 8001e50:	6195      	str	r5, [r2, #24]
  TIMx->CCER = tmpccer;
 8001e52:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001e54:	6990      	ldr	r0, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001e56:	6889      	ldr	r1, [r1, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001e58:	43a0      	bics	r0, r4
 8001e5a:	6190      	str	r0, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001e5c:	6990      	ldr	r0, [r2, #24]
 8001e5e:	4301      	orrs	r1, r0
 8001e60:	6191      	str	r1, [r2, #24]
 8001e62:	e7c5      	b.n	8001df0 <HAL_TIM_IC_ConfigChannel+0x78>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e64:	2710      	movs	r7, #16
    TIM_TI2_SetConfig(htim->Instance,
 8001e66:	68c8      	ldr	r0, [r1, #12]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	4680      	mov	r8, r0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e6c:	6a15      	ldr	r5, [r2, #32]
    TIM_TI2_SetConfig(htim->Instance,
 8001e6e:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e70:	43bd      	bics	r5, r7
    TIM_TI2_SetConfig(htim->Instance,
 8001e72:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e74:	6215      	str	r5, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e76:	6997      	ldr	r7, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8001e78:	4825      	ldr	r0, [pc, #148]	; (8001f10 <HAL_TIM_IC_ConfigChannel+0x198>)
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8001e7a:	0224      	lsls	r4, r4, #8
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8001e7c:	4007      	ands	r7, r0
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001e7e:	4640      	mov	r0, r8
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8001e80:	433c      	orrs	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001e82:	4f24      	ldr	r7, [pc, #144]	; (8001f14 <HAL_TIM_IC_ConfigChannel+0x19c>)
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001e84:	0700      	lsls	r0, r0, #28
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001e86:	403c      	ands	r4, r7
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001e88:	0c00      	lsrs	r0, r0, #16
 8001e8a:	4320      	orrs	r0, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001e8c:	24a0      	movs	r4, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8001e8e:	6a15      	ldr	r5, [r2, #32]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001e90:	0136      	lsls	r6, r6, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001e92:	43a5      	bics	r5, r4
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001e94:	4034      	ands	r4, r6
 8001e96:	4325      	orrs	r5, r4
  TIMx->CCMR1 = tmpccmr1 ;
 8001e98:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 8001e9a:	6215      	str	r5, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001e9c:	6990      	ldr	r0, [r2, #24]
 8001e9e:	4c1f      	ldr	r4, [pc, #124]	; (8001f1c <HAL_TIM_IC_ConfigChannel+0x1a4>)
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001ea0:	6889      	ldr	r1, [r1, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001ea2:	4020      	ands	r0, r4
 8001ea4:	6190      	str	r0, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001ea6:	6990      	ldr	r0, [r2, #24]
 8001ea8:	0209      	lsls	r1, r1, #8
 8001eaa:	4301      	orrs	r1, r0
 8001eac:	6191      	str	r1, [r2, #24]
 8001eae:	e79f      	b.n	8001df0 <HAL_TIM_IC_ConfigChannel+0x78>
    TIM_TI3_SetConfig(htim->Instance,
 8001eb0:	6808      	ldr	r0, [r1, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	4680      	mov	r8, r0
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8001eb6:	2003      	movs	r0, #3
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001eb8:	6a16      	ldr	r6, [r2, #32]
 8001eba:	4f1c      	ldr	r7, [pc, #112]	; (8001f2c <HAL_TIM_IC_ConfigChannel+0x1b4>)
    TIM_TI3_SetConfig(htim->Instance,
 8001ebc:	68cc      	ldr	r4, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001ebe:	403e      	ands	r6, r7
    TIM_TI3_SetConfig(htim->Instance,
 8001ec0:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001ec2:	6216      	str	r6, [r2, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001ec4:	69d7      	ldr	r7, [r2, #28]
  tmpccer = TIMx->CCER;
 8001ec6:	6a16      	ldr	r6, [r2, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8001ec8:	4387      	bics	r7, r0
  tmpccmr2 |= TIM_ICSelection;
 8001eca:	433d      	orrs	r5, r7
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8001ecc:	27f0      	movs	r7, #240	; 0xf0
 8001ece:	43bd      	bics	r5, r7
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8001ed0:	0127      	lsls	r7, r4, #4
 8001ed2:	24ff      	movs	r4, #255	; 0xff
 8001ed4:	403c      	ands	r4, r7
 8001ed6:	432c      	orrs	r4, r5
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8001ed8:	4d15      	ldr	r5, [pc, #84]	; (8001f30 <HAL_TIM_IC_ConfigChannel+0x1b8>)
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001eda:	4640      	mov	r0, r8
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8001edc:	4035      	ands	r5, r6
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001ede:	26a0      	movs	r6, #160	; 0xa0
  TIMx->CCMR2 = tmpccmr2;
 8001ee0:	61d4      	str	r4, [r2, #28]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001ee2:	240c      	movs	r4, #12
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001ee4:	0200      	lsls	r0, r0, #8
 8001ee6:	0136      	lsls	r6, r6, #4
 8001ee8:	4030      	ands	r0, r6
 8001eea:	4328      	orrs	r0, r5
  TIMx->CCER = tmpccer;
 8001eec:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001eee:	69d0      	ldr	r0, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001ef0:	6889      	ldr	r1, [r1, #8]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001ef2:	43a0      	bics	r0, r4
 8001ef4:	61d0      	str	r0, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001ef6:	69d0      	ldr	r0, [r2, #28]
 8001ef8:	4301      	orrs	r1, r0
 8001efa:	61d1      	str	r1, [r2, #28]
 8001efc:	e778      	b.n	8001df0 <HAL_TIM_IC_ConfigChannel+0x78>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8001efe:	2503      	movs	r5, #3
 8001f00:	43a8      	bics	r0, r5
 8001f02:	0005      	movs	r5, r0
    tmpccmr1 |= TIM_ICSelection;
 8001f04:	4640      	mov	r0, r8
 8001f06:	4328      	orrs	r0, r5
 8001f08:	0005      	movs	r5, r0
 8001f0a:	e795      	b.n	8001e38 <HAL_TIM_IC_ConfigChannel+0xc0>
 8001f0c:	ffffefff 	.word	0xffffefff
 8001f10:	fffffcff 	.word	0xfffffcff
 8001f14:	ffff0fff 	.word	0xffff0fff
 8001f18:	ffff5fff 	.word	0xffff5fff
 8001f1c:	fffff3ff 	.word	0xfffff3ff
 8001f20:	40012c00 	.word	0x40012c00
 8001f24:	40000400 	.word	0x40000400
 8001f28:	40014000 	.word	0x40014000
 8001f2c:	fffffeff 	.word	0xfffffeff
 8001f30:	fffff5ff 	.word	0xfffff5ff

08001f34 <HAL_TIM_PWM_ConfigChannel>:
{
 8001f34:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8001f36:	243c      	movs	r4, #60	; 0x3c
 8001f38:	5d05      	ldrb	r5, [r0, r4]
{
 8001f3a:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8001f3c:	2002      	movs	r0, #2
 8001f3e:	2d01      	cmp	r5, #1
 8001f40:	d048      	beq.n	8001fd4 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8001f42:	2501      	movs	r5, #1
 8001f44:	551d      	strb	r5, [r3, r4]
  htim->State = HAL_TIM_STATE_BUSY;
 8001f46:	3401      	adds	r4, #1
 8001f48:	5518      	strb	r0, [r3, r4]
  switch (Channel)
 8001f4a:	2a04      	cmp	r2, #4
 8001f4c:	d043      	beq.n	8001fd6 <HAL_TIM_PWM_ConfigChannel+0xa2>
 8001f4e:	d800      	bhi.n	8001f52 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001f50:	e0a6      	b.n	80020a0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001f52:	2a08      	cmp	r2, #8
 8001f54:	d100      	bne.n	8001f58 <HAL_TIM_PWM_ConfigChannel+0x24>
 8001f56:	e074      	b.n	8002042 <HAL_TIM_PWM_ConfigChannel+0x10e>
 8001f58:	2a0c      	cmp	r2, #12
 8001f5a:	d134      	bne.n	8001fc6 <HAL_TIM_PWM_ConfigChannel+0x92>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001f5c:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001f5e:	4c81      	ldr	r4, [pc, #516]	; (8002164 <HAL_TIM_PWM_ConfigChannel+0x230>)
 8001f60:	6a10      	ldr	r0, [r2, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001f62:	4d81      	ldr	r5, [pc, #516]	; (8002168 <HAL_TIM_PWM_ConfigChannel+0x234>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001f64:	4020      	ands	r0, r4
 8001f66:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8001f68:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8001f6a:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8001f6c:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001f6e:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f70:	680d      	ldr	r5, [r1, #0]
 8001f72:	022d      	lsls	r5, r5, #8
 8001f74:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC4P;
 8001f76:	4c7d      	ldr	r4, [pc, #500]	; (800216c <HAL_TIM_PWM_ConfigChannel+0x238>)
 8001f78:	4004      	ands	r4, r0
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001f7a:	6888      	ldr	r0, [r1, #8]
 8001f7c:	0300      	lsls	r0, r0, #12
 8001f7e:	4320      	orrs	r0, r4
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001f80:	4c7b      	ldr	r4, [pc, #492]	; (8002170 <HAL_TIM_PWM_ConfigChannel+0x23c>)
 8001f82:	42a2      	cmp	r2, r4
 8001f84:	d100      	bne.n	8001f88 <HAL_TIM_PWM_ConfigChannel+0x54>
 8001f86:	e0ca      	b.n	800211e <HAL_TIM_PWM_ConfigChannel+0x1ea>
 8001f88:	4c7a      	ldr	r4, [pc, #488]	; (8002174 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8001f8a:	42a2      	cmp	r2, r4
 8001f8c:	d100      	bne.n	8001f90 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001f8e:	e0c6      	b.n	800211e <HAL_TIM_PWM_ConfigChannel+0x1ea>
 8001f90:	4c79      	ldr	r4, [pc, #484]	; (8002178 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8001f92:	42a2      	cmp	r2, r4
 8001f94:	d100      	bne.n	8001f98 <HAL_TIM_PWM_ConfigChannel+0x64>
 8001f96:	e0c2      	b.n	800211e <HAL_TIM_PWM_ConfigChannel+0x1ea>
 8001f98:	4c78      	ldr	r4, [pc, #480]	; (800217c <HAL_TIM_PWM_ConfigChannel+0x248>)
 8001f9a:	42a2      	cmp	r2, r4
 8001f9c:	d100      	bne.n	8001fa0 <HAL_TIM_PWM_ConfigChannel+0x6c>
 8001f9e:	e0be      	b.n	800211e <HAL_TIM_PWM_ConfigChannel+0x1ea>
  TIMx->CCR4 = OC_Config->Pulse;
 8001fa0:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001fa2:	6056      	str	r6, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001fa4:	61d5      	str	r5, [r2, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8001fa6:	6414      	str	r4, [r2, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8001fa8:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001faa:	2080      	movs	r0, #128	; 0x80
 8001fac:	69d4      	ldr	r4, [r2, #28]
 8001fae:	0100      	lsls	r0, r0, #4
 8001fb0:	4320      	orrs	r0, r4
 8001fb2:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001fb4:	69d0      	ldr	r0, [r2, #28]
 8001fb6:	4c72      	ldr	r4, [pc, #456]	; (8002180 <HAL_TIM_PWM_ConfigChannel+0x24c>)
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001fb8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001fba:	4020      	ands	r0, r4
 8001fbc:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001fbe:	69d0      	ldr	r0, [r2, #28]
 8001fc0:	0209      	lsls	r1, r1, #8
 8001fc2:	4301      	orrs	r1, r0
 8001fc4:	61d1      	str	r1, [r2, #28]
  htim->State = HAL_TIM_STATE_READY;
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	223d      	movs	r2, #61	; 0x3d
 8001fca:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(htim);
 8001fcc:	2100      	movs	r1, #0
  return HAL_OK;
 8001fce:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8001fd0:	3a01      	subs	r2, #1
 8001fd2:	5499      	strb	r1, [r3, r2]
}
 8001fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fd6:	2410      	movs	r4, #16
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001fd8:	681a      	ldr	r2, [r3, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001fda:	4d63      	ldr	r5, [pc, #396]	; (8002168 <HAL_TIM_PWM_ConfigChannel+0x234>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fdc:	6a10      	ldr	r0, [r2, #32]
 8001fde:	43a0      	bics	r0, r4
 8001fe0:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8001fe2:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8001fe4:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8001fe6:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001fe8:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001fea:	680d      	ldr	r5, [r1, #0]
 8001fec:	022d      	lsls	r5, r5, #8
 8001fee:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC2P;
 8001ff0:	2420      	movs	r4, #32
 8001ff2:	43a0      	bics	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001ff4:	688c      	ldr	r4, [r1, #8]
 8001ff6:	0124      	lsls	r4, r4, #4
 8001ff8:	4320      	orrs	r0, r4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001ffa:	4c5d      	ldr	r4, [pc, #372]	; (8002170 <HAL_TIM_PWM_ConfigChannel+0x23c>)
 8001ffc:	42a2      	cmp	r2, r4
 8001ffe:	d100      	bne.n	8002002 <HAL_TIM_PWM_ConfigChannel+0xce>
 8002000:	e093      	b.n	800212a <HAL_TIM_PWM_ConfigChannel+0x1f6>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002002:	4c5c      	ldr	r4, [pc, #368]	; (8002174 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8002004:	42a2      	cmp	r2, r4
 8002006:	d100      	bne.n	800200a <HAL_TIM_PWM_ConfigChannel+0xd6>
 8002008:	e096      	b.n	8002138 <HAL_TIM_PWM_ConfigChannel+0x204>
 800200a:	4c5b      	ldr	r4, [pc, #364]	; (8002178 <HAL_TIM_PWM_ConfigChannel+0x244>)
 800200c:	42a2      	cmp	r2, r4
 800200e:	d100      	bne.n	8002012 <HAL_TIM_PWM_ConfigChannel+0xde>
 8002010:	e092      	b.n	8002138 <HAL_TIM_PWM_ConfigChannel+0x204>
 8002012:	4c5a      	ldr	r4, [pc, #360]	; (800217c <HAL_TIM_PWM_ConfigChannel+0x248>)
 8002014:	42a2      	cmp	r2, r4
 8002016:	d100      	bne.n	800201a <HAL_TIM_PWM_ConfigChannel+0xe6>
 8002018:	e08e      	b.n	8002138 <HAL_TIM_PWM_ConfigChannel+0x204>
  TIMx->CCR2 = OC_Config->Pulse;
 800201a:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800201c:	6056      	str	r6, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 800201e:	6195      	str	r5, [r2, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002020:	6394      	str	r4, [r2, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002022:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002024:	2080      	movs	r0, #128	; 0x80
 8002026:	6994      	ldr	r4, [r2, #24]
 8002028:	0100      	lsls	r0, r0, #4
 800202a:	4320      	orrs	r0, r4
 800202c:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800202e:	6990      	ldr	r0, [r2, #24]
 8002030:	4c53      	ldr	r4, [pc, #332]	; (8002180 <HAL_TIM_PWM_ConfigChannel+0x24c>)
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002032:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002034:	4020      	ands	r0, r4
 8002036:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002038:	6990      	ldr	r0, [r2, #24]
 800203a:	0209      	lsls	r1, r1, #8
 800203c:	4301      	orrs	r1, r0
 800203e:	6191      	str	r1, [r2, #24]
    break;
 8002040:	e7c1      	b.n	8001fc6 <HAL_TIM_PWM_ConfigChannel+0x92>
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002042:	2673      	movs	r6, #115	; 0x73
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002044:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002046:	4c4f      	ldr	r4, [pc, #316]	; (8002184 <HAL_TIM_PWM_ConfigChannel+0x250>)
 8002048:	6a10      	ldr	r0, [r2, #32]
 800204a:	4020      	ands	r0, r4
 800204c:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 800204e:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8002050:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8002052:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002054:	43b4      	bics	r4, r6
  tmpccmrx |= OC_Config->OCMode;
 8002056:	680e      	ldr	r6, [r1, #0]
 8002058:	4326      	orrs	r6, r4
  tmpccer &= ~TIM_CCER_CC3P;
 800205a:	4c4b      	ldr	r4, [pc, #300]	; (8002188 <HAL_TIM_PWM_ConfigChannel+0x254>)
 800205c:	4020      	ands	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800205e:	688c      	ldr	r4, [r1, #8]
 8002060:	0224      	lsls	r4, r4, #8
 8002062:	4320      	orrs	r0, r4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002064:	4c42      	ldr	r4, [pc, #264]	; (8002170 <HAL_TIM_PWM_ConfigChannel+0x23c>)
 8002066:	42a2      	cmp	r2, r4
 8002068:	d04a      	beq.n	8002100 <HAL_TIM_PWM_ConfigChannel+0x1cc>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800206a:	4c42      	ldr	r4, [pc, #264]	; (8002174 <HAL_TIM_PWM_ConfigChannel+0x240>)
 800206c:	42a2      	cmp	r2, r4
 800206e:	d04e      	beq.n	800210e <HAL_TIM_PWM_ConfigChannel+0x1da>
 8002070:	4c41      	ldr	r4, [pc, #260]	; (8002178 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8002072:	42a2      	cmp	r2, r4
 8002074:	d04b      	beq.n	800210e <HAL_TIM_PWM_ConfigChannel+0x1da>
 8002076:	4c41      	ldr	r4, [pc, #260]	; (800217c <HAL_TIM_PWM_ConfigChannel+0x248>)
 8002078:	42a2      	cmp	r2, r4
 800207a:	d048      	beq.n	800210e <HAL_TIM_PWM_ConfigChannel+0x1da>
  TIMx->CCR3 = OC_Config->Pulse;
 800207c:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800207e:	6055      	str	r5, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002080:	61d6      	str	r6, [r2, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8002082:	63d4      	str	r4, [r2, #60]	; 0x3c
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002084:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 8002086:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002088:	69d0      	ldr	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800208a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800208c:	4320      	orrs	r0, r4
 800208e:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002090:	69d0      	ldr	r0, [r2, #28]
 8002092:	3c04      	subs	r4, #4
 8002094:	43a0      	bics	r0, r4
 8002096:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002098:	69d0      	ldr	r0, [r2, #28]
 800209a:	4301      	orrs	r1, r0
 800209c:	61d1      	str	r1, [r2, #28]
    break;
 800209e:	e792      	b.n	8001fc6 <HAL_TIM_PWM_ConfigChannel+0x92>
  switch (Channel)
 80020a0:	2a00      	cmp	r2, #0
 80020a2:	d000      	beq.n	80020a6 <HAL_TIM_PWM_ConfigChannel+0x172>
 80020a4:	e78f      	b.n	8001fc6 <HAL_TIM_PWM_ConfigChannel+0x92>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80020a6:	681a      	ldr	r2, [r3, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80020a8:	2773      	movs	r7, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020aa:	6a14      	ldr	r4, [r2, #32]
 80020ac:	43ac      	bics	r4, r5
 80020ae:	6214      	str	r4, [r2, #32]
  tmpccer = TIMx->CCER;
 80020b0:	6a14      	ldr	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 80020b2:	6856      	ldr	r6, [r2, #4]
  tmpccer &= ~TIM_CCER_CC1P;
 80020b4:	4384      	bics	r4, r0
 80020b6:	0020      	movs	r0, r4
  tmpccmrx = TIMx->CCMR1;
 80020b8:	6995      	ldr	r5, [r2, #24]
  tmpccer |= OC_Config->OCPolarity;
 80020ba:	688c      	ldr	r4, [r1, #8]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80020bc:	43bd      	bics	r5, r7
  tmpccer |= OC_Config->OCPolarity;
 80020be:	4320      	orrs	r0, r4
  tmpccmrx |= OC_Config->OCMode;
 80020c0:	680f      	ldr	r7, [r1, #0]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80020c2:	4c2b      	ldr	r4, [pc, #172]	; (8002170 <HAL_TIM_PWM_ConfigChannel+0x23c>)
  tmpccmrx |= OC_Config->OCMode;
 80020c4:	433d      	orrs	r5, r7
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80020c6:	42a2      	cmp	r2, r4
 80020c8:	d03e      	beq.n	8002148 <HAL_TIM_PWM_ConfigChannel+0x214>
 80020ca:	4c2a      	ldr	r4, [pc, #168]	; (8002174 <HAL_TIM_PWM_ConfigChannel+0x240>)
 80020cc:	42a2      	cmp	r2, r4
 80020ce:	d03b      	beq.n	8002148 <HAL_TIM_PWM_ConfigChannel+0x214>
 80020d0:	4c29      	ldr	r4, [pc, #164]	; (8002178 <HAL_TIM_PWM_ConfigChannel+0x244>)
 80020d2:	42a2      	cmp	r2, r4
 80020d4:	d038      	beq.n	8002148 <HAL_TIM_PWM_ConfigChannel+0x214>
 80020d6:	4c29      	ldr	r4, [pc, #164]	; (800217c <HAL_TIM_PWM_ConfigChannel+0x248>)
 80020d8:	42a2      	cmp	r2, r4
 80020da:	d035      	beq.n	8002148 <HAL_TIM_PWM_ConfigChannel+0x214>
  TIMx->CCR1 = OC_Config->Pulse;
 80020dc:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80020de:	6056      	str	r6, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 80020e0:	6195      	str	r5, [r2, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80020e2:	6354      	str	r4, [r2, #52]	; 0x34
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80020e4:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 80020e6:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80020e8:	6990      	ldr	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80020ea:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80020ec:	4320      	orrs	r0, r4
 80020ee:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80020f0:	6990      	ldr	r0, [r2, #24]
 80020f2:	3c04      	subs	r4, #4
 80020f4:	43a0      	bics	r0, r4
 80020f6:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80020f8:	6990      	ldr	r0, [r2, #24]
 80020fa:	4301      	orrs	r1, r0
 80020fc:	6191      	str	r1, [r2, #24]
    break;
 80020fe:	e762      	b.n	8001fc6 <HAL_TIM_PWM_ConfigChannel+0x92>
    tmpccer &= ~TIM_CCER_CC3NP;
 8002100:	4c22      	ldr	r4, [pc, #136]	; (800218c <HAL_TIM_PWM_ConfigChannel+0x258>)
 8002102:	4004      	ands	r4, r0
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002104:	68c8      	ldr	r0, [r1, #12]
 8002106:	0200      	lsls	r0, r0, #8
 8002108:	4320      	orrs	r0, r4
    tmpccer &= ~TIM_CCER_CC3NE;
 800210a:	4c1d      	ldr	r4, [pc, #116]	; (8002180 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 800210c:	4020      	ands	r0, r4
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800210e:	4c20      	ldr	r4, [pc, #128]	; (8002190 <HAL_TIM_PWM_ConfigChannel+0x25c>)
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002110:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002112:	402c      	ands	r4, r5
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002114:	698d      	ldr	r5, [r1, #24]
 8002116:	433d      	orrs	r5, r7
 8002118:	012d      	lsls	r5, r5, #4
 800211a:	4325      	orrs	r5, r4
 800211c:	e7ae      	b.n	800207c <HAL_TIM_PWM_ConfigChannel+0x148>
    tmpcr2 &= ~TIM_CR2_OIS4;
 800211e:	4c1d      	ldr	r4, [pc, #116]	; (8002194 <HAL_TIM_PWM_ConfigChannel+0x260>)
 8002120:	4034      	ands	r4, r6
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002122:	694e      	ldr	r6, [r1, #20]
 8002124:	01b6      	lsls	r6, r6, #6
 8002126:	4326      	orrs	r6, r4
 8002128:	e73a      	b.n	8001fa0 <HAL_TIM_PWM_ConfigChannel+0x6c>
    tmpccer &= ~TIM_CCER_CC2NP;
 800212a:	2480      	movs	r4, #128	; 0x80
 800212c:	43a0      	bics	r0, r4
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800212e:	68cc      	ldr	r4, [r1, #12]
 8002130:	0127      	lsls	r7, r4, #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8002132:	2440      	movs	r4, #64	; 0x40
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002134:	4338      	orrs	r0, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 8002136:	43a0      	bics	r0, r4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002138:	4c17      	ldr	r4, [pc, #92]	; (8002198 <HAL_TIM_PWM_ConfigChannel+0x264>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800213a:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800213c:	4034      	ands	r4, r6
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800213e:	698e      	ldr	r6, [r1, #24]
 8002140:	433e      	orrs	r6, r7
 8002142:	00b6      	lsls	r6, r6, #2
 8002144:	4326      	orrs	r6, r4
 8002146:	e768      	b.n	800201a <HAL_TIM_PWM_ConfigChannel+0xe6>
    tmpccer &= ~TIM_CCER_CC1NP;
 8002148:	2408      	movs	r4, #8
 800214a:	43a0      	bics	r0, r4
    tmpccer |= OC_Config->OCNPolarity;
 800214c:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 800214e:	698f      	ldr	r7, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 8002150:	4320      	orrs	r0, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 8002152:	2404      	movs	r4, #4
 8002154:	43a0      	bics	r0, r4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002156:	4c11      	ldr	r4, [pc, #68]	; (800219c <HAL_TIM_PWM_ConfigChannel+0x268>)
 8002158:	4026      	ands	r6, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 800215a:	694c      	ldr	r4, [r1, #20]
 800215c:	433c      	orrs	r4, r7
 800215e:	4326      	orrs	r6, r4
 8002160:	e7bc      	b.n	80020dc <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8002162:	46c0      	nop			; (mov r8, r8)
 8002164:	ffffefff 	.word	0xffffefff
 8002168:	ffff8cff 	.word	0xffff8cff
 800216c:	ffffdfff 	.word	0xffffdfff
 8002170:	40012c00 	.word	0x40012c00
 8002174:	40014000 	.word	0x40014000
 8002178:	40014400 	.word	0x40014400
 800217c:	40014800 	.word	0x40014800
 8002180:	fffffbff 	.word	0xfffffbff
 8002184:	fffffeff 	.word	0xfffffeff
 8002188:	fffffdff 	.word	0xfffffdff
 800218c:	fffff7ff 	.word	0xfffff7ff
 8002190:	ffffcfff 	.word	0xffffcfff
 8002194:	ffffbfff 	.word	0xffffbfff
 8002198:	fffff3ff 	.word	0xfffff3ff
 800219c:	fffffcff 	.word	0xfffffcff

080021a0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80021a0:	223c      	movs	r2, #60	; 0x3c
{
 80021a2:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80021a4:	5c84      	ldrb	r4, [r0, r2]
 80021a6:	2302      	movs	r3, #2
 80021a8:	2c01      	cmp	r4, #1
 80021aa:	d03d      	beq.n	8002228 <HAL_TIM_ConfigClockSource+0x88>
 80021ac:	2401      	movs	r4, #1
 80021ae:	5484      	strb	r4, [r0, r2]
  htim->State = HAL_TIM_STATE_BUSY;
 80021b0:	3201      	adds	r2, #1
 80021b2:	5483      	strb	r3, [r0, r2]
  tmpsmcr = htim->Instance->SMCR;
 80021b4:	6803      	ldr	r3, [r0, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021b6:	4d59      	ldr	r5, [pc, #356]	; (800231c <HAL_TIM_ConfigClockSource+0x17c>)
  tmpsmcr = htim->Instance->SMCR;
 80021b8:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021ba:	402a      	ands	r2, r5
  htim->Instance->SMCR = tmpsmcr;
 80021bc:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80021be:	680a      	ldr	r2, [r1, #0]
 80021c0:	2a40      	cmp	r2, #64	; 0x40
 80021c2:	d100      	bne.n	80021c6 <HAL_TIM_ConfigClockSource+0x26>
 80021c4:	e074      	b.n	80022b0 <HAL_TIM_ConfigClockSource+0x110>
 80021c6:	d91b      	bls.n	8002200 <HAL_TIM_ConfigClockSource+0x60>
 80021c8:	2a70      	cmp	r2, #112	; 0x70
 80021ca:	d061      	beq.n	8002290 <HAL_TIM_ConfigClockSource+0xf0>
 80021cc:	d92e      	bls.n	800222c <HAL_TIM_ConfigClockSource+0x8c>
 80021ce:	2480      	movs	r4, #128	; 0x80
 80021d0:	0164      	lsls	r4, r4, #5
 80021d2:	42a2      	cmp	r2, r4
 80021d4:	d057      	beq.n	8002286 <HAL_TIM_ConfigClockSource+0xe6>
 80021d6:	2480      	movs	r4, #128	; 0x80
 80021d8:	01a4      	lsls	r4, r4, #6
 80021da:	42a2      	cmp	r2, r4
 80021dc:	d11d      	bne.n	800221a <HAL_TIM_ConfigClockSource+0x7a>
  tmpsmcr = TIMx->SMCR;
 80021de:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021e0:	4c4f      	ldr	r4, [pc, #316]	; (8002320 <HAL_TIM_ConfigClockSource+0x180>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021e2:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021e4:	4014      	ands	r4, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021e6:	688a      	ldr	r2, [r1, #8]
 80021e8:	68c9      	ldr	r1, [r1, #12]
 80021ea:	432a      	orrs	r2, r5
 80021ec:	0209      	lsls	r1, r1, #8
 80021ee:	430a      	orrs	r2, r1
 80021f0:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 80021f2:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021f4:	2280      	movs	r2, #128	; 0x80
 80021f6:	6899      	ldr	r1, [r3, #8]
 80021f8:	01d2      	lsls	r2, r2, #7
 80021fa:	430a      	orrs	r2, r1
 80021fc:	609a      	str	r2, [r3, #8]
    break;
 80021fe:	e00c      	b.n	800221a <HAL_TIM_ConfigClockSource+0x7a>
  switch (sClockSourceConfig->ClockSource)
 8002200:	2a10      	cmp	r2, #16
 8002202:	d030      	beq.n	8002266 <HAL_TIM_ConfigClockSource+0xc6>
 8002204:	d936      	bls.n	8002274 <HAL_TIM_ConfigClockSource+0xd4>
 8002206:	2a20      	cmp	r2, #32
 8002208:	d069      	beq.n	80022de <HAL_TIM_ConfigClockSource+0x13e>
 800220a:	2a30      	cmp	r2, #48	; 0x30
 800220c:	d105      	bne.n	800221a <HAL_TIM_ConfigClockSource+0x7a>
   tmpsmcr &= ~TIM_SMCR_TS;
 800220e:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8002210:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002212:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002214:	3939      	subs	r1, #57	; 0x39
 8002216:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 8002218:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 800221a:	2201      	movs	r2, #1
 800221c:	233d      	movs	r3, #61	; 0x3d
 800221e:	54c2      	strb	r2, [r0, r3]
  __HAL_UNLOCK(htim);
 8002220:	2200      	movs	r2, #0
 8002222:	3b01      	subs	r3, #1
 8002224:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	0018      	movs	r0, r3
 800222a:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800222c:	2a50      	cmp	r2, #80	; 0x50
 800222e:	d05d      	beq.n	80022ec <HAL_TIM_ConfigClockSource+0x14c>
 8002230:	2a60      	cmp	r2, #96	; 0x60
 8002232:	d1f2      	bne.n	800221a <HAL_TIM_ConfigClockSource+0x7a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002234:	2510      	movs	r5, #16
 8002236:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002238:	684a      	ldr	r2, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800223a:	43ac      	bics	r4, r5
      TIM_TI2_ConfigInputStage(htim->Instance,
 800223c:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800223e:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002240:	699d      	ldr	r5, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002242:	4e38      	ldr	r6, [pc, #224]	; (8002324 <HAL_TIM_ConfigClockSource+0x184>)
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002244:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002246:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002248:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800224a:	25a0      	movs	r5, #160	; 0xa0
  tmpccer = TIMx->CCER;
 800224c:	6a1c      	ldr	r4, [r3, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 800224e:	6199      	str	r1, [r3, #24]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002250:	2170      	movs	r1, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002252:	43ac      	bics	r4, r5
  tmpccer |= (TIM_ICPolarity << 4U);
 8002254:	0112      	lsls	r2, r2, #4
 8002256:	4322      	orrs	r2, r4
  TIMx->CCER = tmpccer;
 8002258:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800225a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800225c:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800225e:	3909      	subs	r1, #9
 8002260:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 8002262:	609a      	str	r2, [r3, #8]
 8002264:	e7d9      	b.n	800221a <HAL_TIM_ConfigClockSource+0x7a>
   tmpsmcr &= ~TIM_SMCR_TS;
 8002266:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8002268:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800226a:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800226c:	3959      	subs	r1, #89	; 0x59
 800226e:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 8002270:	609a      	str	r2, [r3, #8]
 8002272:	e7d2      	b.n	800221a <HAL_TIM_ConfigClockSource+0x7a>
  switch (sClockSourceConfig->ClockSource)
 8002274:	2a00      	cmp	r2, #0
 8002276:	d1d0      	bne.n	800221a <HAL_TIM_ConfigClockSource+0x7a>
   tmpsmcr &= ~TIM_SMCR_TS;
 8002278:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 800227a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800227c:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800227e:	3969      	subs	r1, #105	; 0x69
 8002280:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 8002282:	609a      	str	r2, [r3, #8]
 8002284:	e7c9      	b.n	800221a <HAL_TIM_ConfigClockSource+0x7a>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002286:	2107      	movs	r1, #7
 8002288:	689a      	ldr	r2, [r3, #8]
 800228a:	438a      	bics	r2, r1
 800228c:	609a      	str	r2, [r3, #8]
    break;
 800228e:	e7c4      	b.n	800221a <HAL_TIM_ConfigClockSource+0x7a>
  tmpsmcr = TIMx->SMCR;
 8002290:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002292:	4c23      	ldr	r4, [pc, #140]	; (8002320 <HAL_TIM_ConfigClockSource+0x180>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002294:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002296:	4014      	ands	r4, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002298:	688a      	ldr	r2, [r1, #8]
 800229a:	68c9      	ldr	r1, [r1, #12]
 800229c:	432a      	orrs	r2, r5
 800229e:	0209      	lsls	r1, r1, #8
 80022a0:	430a      	orrs	r2, r1
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80022a2:	2177      	movs	r1, #119	; 0x77
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022a4:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 80022a6:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 80022a8:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80022aa:	430a      	orrs	r2, r1
      htim->Instance->SMCR = tmpsmcr;
 80022ac:	609a      	str	r2, [r3, #8]
    break;
 80022ae:	e7b4      	b.n	800221a <HAL_TIM_ConfigClockSource+0x7a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022b0:	684d      	ldr	r5, [r1, #4]
 80022b2:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 80022b4:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022b6:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80022b8:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022ba:	43a6      	bics	r6, r4
 80022bc:	621e      	str	r6, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80022be:	26f0      	movs	r6, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 80022c0:	699c      	ldr	r4, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80022c2:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80022c4:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80022c6:	240a      	movs	r4, #10
 80022c8:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 80022ca:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 80022cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022ce:	6219      	str	r1, [r3, #32]
   tmpsmcr &= ~TIM_SMCR_TS;
 80022d0:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 80022d2:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80022d4:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80022d6:	3929      	subs	r1, #41	; 0x29
 80022d8:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 80022da:	609a      	str	r2, [r3, #8]
 80022dc:	e79d      	b.n	800221a <HAL_TIM_ConfigClockSource+0x7a>
   tmpsmcr &= ~TIM_SMCR_TS;
 80022de:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 80022e0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80022e2:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80022e4:	3949      	subs	r1, #73	; 0x49
 80022e6:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 80022e8:	609a      	str	r2, [r3, #8]
 80022ea:	e796      	b.n	800221a <HAL_TIM_ConfigClockSource+0x7a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022ec:	684d      	ldr	r5, [r1, #4]
 80022ee:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 80022f0:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022f2:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80022f4:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022f6:	43a6      	bics	r6, r4
 80022f8:	621e      	str	r6, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80022fa:	26f0      	movs	r6, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 80022fc:	699c      	ldr	r4, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80022fe:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002300:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002302:	240a      	movs	r4, #10
 8002304:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8002306:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8002308:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800230a:	6219      	str	r1, [r3, #32]
   tmpsmcr &= ~TIM_SMCR_TS;
 800230c:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 800230e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002310:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002312:	3919      	subs	r1, #25
 8002314:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 8002316:	609a      	str	r2, [r3, #8]
 8002318:	e77f      	b.n	800221a <HAL_TIM_ConfigClockSource+0x7a>
 800231a:	46c0      	nop			; (mov r8, r8)
 800231c:	ffff0088 	.word	0xffff0088
 8002320:	ffff00ff 	.word	0xffff00ff
 8002324:	ffff0fff 	.word	0xffff0fff

08002328 <HAL_TIM_SlaveConfigSynchronization>:
  __HAL_LOCK(htim);
 8002328:	233c      	movs	r3, #60	; 0x3c
{
 800232a:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800232c:	5cc4      	ldrb	r4, [r0, r3]
{
 800232e:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 8002330:	2002      	movs	r0, #2
 8002332:	2c01      	cmp	r4, #1
 8002334:	d100      	bne.n	8002338 <HAL_TIM_SlaveConfigSynchronization+0x10>
    }
 8002336:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 8002338:	2501      	movs	r5, #1
  tmpsmcr &= ~TIM_SMCR_TS;
 800233a:	2470      	movs	r4, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_SMS;
 800233c:	2607      	movs	r6, #7
  __HAL_LOCK(htim);
 800233e:	54d5      	strb	r5, [r2, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8002340:	3301      	adds	r3, #1
 8002342:	54d0      	strb	r0, [r2, r3]
  tmpsmcr = htim->Instance->SMCR;
 8002344:	6813      	ldr	r3, [r2, #0]
 8002346:	6898      	ldr	r0, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002348:	43a0      	bics	r0, r4
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800234a:	684c      	ldr	r4, [r1, #4]
 800234c:	4320      	orrs	r0, r4
  tmpsmcr &= ~TIM_SMCR_SMS;
 800234e:	43b0      	bics	r0, r6
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002350:	680e      	ldr	r6, [r1, #0]
 8002352:	4330      	orrs	r0, r6
  htim->Instance->SMCR = tmpsmcr;
 8002354:	6098      	str	r0, [r3, #8]
  switch (sSlaveConfig->InputTrigger)
 8002356:	2c50      	cmp	r4, #80	; 0x50
 8002358:	d042      	beq.n	80023e0 <HAL_TIM_SlaveConfigSynchronization+0xb8>
 800235a:	d91e      	bls.n	800239a <HAL_TIM_SlaveConfigSynchronization+0x72>
 800235c:	2c60      	cmp	r4, #96	; 0x60
 800235e:	d02b      	beq.n	80023b8 <HAL_TIM_SlaveConfigSynchronization+0x90>
 8002360:	2c70      	cmp	r4, #112	; 0x70
 8002362:	d10a      	bne.n	800237a <HAL_TIM_SlaveConfigSynchronization+0x52>
  tmpsmcr = TIMx->SMCR;
 8002364:	689c      	ldr	r4, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002366:	4827      	ldr	r0, [pc, #156]	; (8002404 <HAL_TIM_SlaveConfigSynchronization+0xdc>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002368:	688d      	ldr	r5, [r1, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800236a:	4004      	ands	r4, r0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800236c:	68c8      	ldr	r0, [r1, #12]
 800236e:	6909      	ldr	r1, [r1, #16]
 8002370:	4328      	orrs	r0, r5
 8002372:	0209      	lsls	r1, r1, #8
 8002374:	4301      	orrs	r1, r0
 8002376:	4321      	orrs	r1, r4
  TIMx->SMCR = tmpsmcr;
 8002378:	6099      	str	r1, [r3, #8]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800237a:	2040      	movs	r0, #64	; 0x40
 800237c:	68d9      	ldr	r1, [r3, #12]
 800237e:	4381      	bics	r1, r0
 8002380:	60d9      	str	r1, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002382:	68d9      	ldr	r1, [r3, #12]
 8002384:	4820      	ldr	r0, [pc, #128]	; (8002408 <HAL_TIM_SlaveConfigSynchronization+0xe0>)
 8002386:	4001      	ands	r1, r0
 8002388:	60d9      	str	r1, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 800238a:	2101      	movs	r1, #1
 800238c:	233d      	movs	r3, #61	; 0x3d
 800238e:	54d1      	strb	r1, [r2, r3]
  __HAL_UNLOCK(htim);
 8002390:	2100      	movs	r1, #0
 8002392:	3b01      	subs	r3, #1
 8002394:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8002396:	2000      	movs	r0, #0
 8002398:	e7cd      	b.n	8002336 <HAL_TIM_SlaveConfigSynchronization+0xe>
  switch (sSlaveConfig->InputTrigger)
 800239a:	2c40      	cmp	r4, #64	; 0x40
 800239c:	d1ed      	bne.n	800237a <HAL_TIM_SlaveConfigSynchronization+0x52>
      tmpccer = htim->Instance->CCER;
 800239e:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80023a0:	6a18      	ldr	r0, [r3, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80023a2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80023a4:	43a8      	bics	r0, r5
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023a6:	25f0      	movs	r5, #240	; 0xf0
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80023a8:	6218      	str	r0, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80023aa:	6998      	ldr	r0, [r3, #24]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80023ac:	0109      	lsls	r1, r1, #4
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023ae:	43a8      	bics	r0, r5
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80023b0:	4301      	orrs	r1, r0
      htim->Instance->CCMR1 = tmpccmr1;
 80023b2:	6199      	str	r1, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80023b4:	621c      	str	r4, [r3, #32]
 80023b6:	e7e0      	b.n	800237a <HAL_TIM_SlaveConfigSynchronization+0x52>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023b8:	2510      	movs	r5, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 80023ba:	6888      	ldr	r0, [r1, #8]
 80023bc:	690c      	ldr	r4, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023be:	6a19      	ldr	r1, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023c0:	4e12      	ldr	r6, [pc, #72]	; (800240c <HAL_TIM_SlaveConfigSynchronization+0xe4>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023c2:	43a9      	bics	r1, r5
 80023c4:	6219      	str	r1, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023c6:	699d      	ldr	r5, [r3, #24]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80023c8:	0324      	lsls	r4, r4, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023ca:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80023cc:	432c      	orrs	r4, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80023ce:	25a0      	movs	r5, #160	; 0xa0
  tmpccer = TIMx->CCER;
 80023d0:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 80023d2:	619c      	str	r4, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80023d4:	43a9      	bics	r1, r5
 80023d6:	000d      	movs	r5, r1
  tmpccer |= (TIM_ICPolarity << 4U);
 80023d8:	0101      	lsls	r1, r0, #4
 80023da:	4329      	orrs	r1, r5
  TIMx->CCER = tmpccer;
 80023dc:	6219      	str	r1, [r3, #32]
 80023de:	e7cc      	b.n	800237a <HAL_TIM_SlaveConfigSynchronization+0x52>
  tmpccer = TIMx->CCER;
 80023e0:	6a1c      	ldr	r4, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023e2:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023e4:	6888      	ldr	r0, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023e6:	43ae      	bics	r6, r5
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023e8:	6909      	ldr	r1, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023ea:	621e      	str	r6, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023ec:	26f0      	movs	r6, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 80023ee:	699d      	ldr	r5, [r3, #24]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023f0:	0109      	lsls	r1, r1, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023f2:	43b5      	bics	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023f4:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023f6:	250a      	movs	r5, #10
 80023f8:	43ac      	bics	r4, r5
  tmpccer |= TIM_ICPolarity;
 80023fa:	4320      	orrs	r0, r4
  TIMx->CCMR1 = tmpccmr1;
 80023fc:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80023fe:	6218      	str	r0, [r3, #32]
 8002400:	e7bb      	b.n	800237a <HAL_TIM_SlaveConfigSynchronization+0x52>
 8002402:	46c0      	nop			; (mov r8, r8)
 8002404:	ffff00ff 	.word	0xffff00ff
 8002408:	ffffbfff 	.word	0xffffbfff
 800240c:	ffff0fff 	.word	0xffff0fff

08002410 <HAL_TIM_OC_DelayElapsedCallback>:
 8002410:	4770      	bx	lr
 8002412:	46c0      	nop			; (mov r8, r8)

08002414 <HAL_TIM_IC_CaptureCallback>:
 8002414:	4770      	bx	lr
 8002416:	46c0      	nop			; (mov r8, r8)

08002418 <TIM_DMACaptureCplt>:
  htim->State= HAL_TIM_STATE_READY;
 8002418:	223d      	movs	r2, #61	; 0x3d
 800241a:	2301      	movs	r3, #1
{
 800241c:	b510      	push	{r4, lr}
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800241e:	6a44      	ldr	r4, [r0, #36]	; 0x24
  htim->State= HAL_TIM_STATE_READY;
 8002420:	54a3      	strb	r3, [r4, r2]
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002422:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002424:	4290      	cmp	r0, r2
 8002426:	d00f      	beq.n	8002448 <TIM_DMACaptureCplt+0x30>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002428:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800242a:	4298      	cmp	r0, r3
 800242c:	d00e      	beq.n	800244c <TIM_DMACaptureCplt+0x34>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800242e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002430:	4298      	cmp	r0, r3
 8002432:	d00e      	beq.n	8002452 <TIM_DMACaptureCplt+0x3a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002434:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002436:	4298      	cmp	r0, r3
 8002438:	d005      	beq.n	8002446 <TIM_DMACaptureCplt+0x2e>
  HAL_TIM_IC_CaptureCallback(htim);
 800243a:	0020      	movs	r0, r4
 800243c:	f7ff ffea 	bl	8002414 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002440:	2300      	movs	r3, #0
 8002442:	7723      	strb	r3, [r4, #28]
}
 8002444:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002446:	2308      	movs	r3, #8
 8002448:	7723      	strb	r3, [r4, #28]
 800244a:	e7f6      	b.n	800243a <TIM_DMACaptureCplt+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800244c:	2302      	movs	r3, #2
 800244e:	7723      	strb	r3, [r4, #28]
 8002450:	e7f3      	b.n	800243a <TIM_DMACaptureCplt+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002452:	2304      	movs	r3, #4
 8002454:	7723      	strb	r3, [r4, #28]
 8002456:	e7f0      	b.n	800243a <TIM_DMACaptureCplt+0x22>

08002458 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002458:	4770      	bx	lr
 800245a:	46c0      	nop			; (mov r8, r8)

0800245c <HAL_TIM_TriggerCallback>:
 800245c:	4770      	bx	lr
 800245e:	46c0      	nop			; (mov r8, r8)

08002460 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002460:	2202      	movs	r2, #2
 8002462:	6803      	ldr	r3, [r0, #0]
{
 8002464:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002466:	6919      	ldr	r1, [r3, #16]
{
 8002468:	0004      	movs	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800246a:	420a      	tst	r2, r1
 800246c:	d002      	beq.n	8002474 <HAL_TIM_IRQHandler+0x14>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800246e:	68d9      	ldr	r1, [r3, #12]
 8002470:	420a      	tst	r2, r1
 8002472:	d168      	bne.n	8002546 <HAL_TIM_IRQHandler+0xe6>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002474:	2204      	movs	r2, #4
 8002476:	6919      	ldr	r1, [r3, #16]
 8002478:	420a      	tst	r2, r1
 800247a:	d002      	beq.n	8002482 <HAL_TIM_IRQHandler+0x22>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800247c:	68d9      	ldr	r1, [r3, #12]
 800247e:	420a      	tst	r2, r1
 8002480:	d14e      	bne.n	8002520 <HAL_TIM_IRQHandler+0xc0>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002482:	2208      	movs	r2, #8
 8002484:	6919      	ldr	r1, [r3, #16]
 8002486:	420a      	tst	r2, r1
 8002488:	d002      	beq.n	8002490 <HAL_TIM_IRQHandler+0x30>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800248a:	68d9      	ldr	r1, [r3, #12]
 800248c:	420a      	tst	r2, r1
 800248e:	d136      	bne.n	80024fe <HAL_TIM_IRQHandler+0x9e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002490:	2210      	movs	r2, #16
 8002492:	6919      	ldr	r1, [r3, #16]
 8002494:	420a      	tst	r2, r1
 8002496:	d002      	beq.n	800249e <HAL_TIM_IRQHandler+0x3e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002498:	68d9      	ldr	r1, [r3, #12]
 800249a:	420a      	tst	r2, r1
 800249c:	d11c      	bne.n	80024d8 <HAL_TIM_IRQHandler+0x78>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800249e:	2201      	movs	r2, #1
 80024a0:	6919      	ldr	r1, [r3, #16]
 80024a2:	420a      	tst	r2, r1
 80024a4:	d002      	beq.n	80024ac <HAL_TIM_IRQHandler+0x4c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80024a6:	68d9      	ldr	r1, [r3, #12]
 80024a8:	420a      	tst	r2, r1
 80024aa:	d169      	bne.n	8002580 <HAL_TIM_IRQHandler+0x120>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024ac:	2280      	movs	r2, #128	; 0x80
 80024ae:	6919      	ldr	r1, [r3, #16]
 80024b0:	420a      	tst	r2, r1
 80024b2:	d002      	beq.n	80024ba <HAL_TIM_IRQHandler+0x5a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80024b4:	68d9      	ldr	r1, [r3, #12]
 80024b6:	420a      	tst	r2, r1
 80024b8:	d169      	bne.n	800258e <HAL_TIM_IRQHandler+0x12e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024ba:	2240      	movs	r2, #64	; 0x40
 80024bc:	6919      	ldr	r1, [r3, #16]
 80024be:	420a      	tst	r2, r1
 80024c0:	d002      	beq.n	80024c8 <HAL_TIM_IRQHandler+0x68>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80024c2:	68d9      	ldr	r1, [r3, #12]
 80024c4:	420a      	tst	r2, r1
 80024c6:	d154      	bne.n	8002572 <HAL_TIM_IRQHandler+0x112>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024c8:	2220      	movs	r2, #32
 80024ca:	6919      	ldr	r1, [r3, #16]
 80024cc:	420a      	tst	r2, r1
 80024ce:	d002      	beq.n	80024d6 <HAL_TIM_IRQHandler+0x76>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80024d0:	68d9      	ldr	r1, [r3, #12]
 80024d2:	420a      	tst	r2, r1
 80024d4:	d147      	bne.n	8002566 <HAL_TIM_IRQHandler+0x106>
}
 80024d6:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024d8:	3a21      	subs	r2, #33	; 0x21
 80024da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024dc:	3219      	adds	r2, #25
 80024de:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024e0:	69da      	ldr	r2, [r3, #28]
 80024e2:	23c0      	movs	r3, #192	; 0xc0
 80024e4:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80024e6:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024e8:	421a      	tst	r2, r3
 80024ea:	d15b      	bne.n	80025a4 <HAL_TIM_IRQHandler+0x144>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ec:	f7ff ff90 	bl	8002410 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024f0:	0020      	movs	r0, r4
 80024f2:	f7ff ffb1 	bl	8002458 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024f6:	2300      	movs	r3, #0
 80024f8:	7723      	strb	r3, [r4, #28]
 80024fa:	6823      	ldr	r3, [r4, #0]
 80024fc:	e7cf      	b.n	800249e <HAL_TIM_IRQHandler+0x3e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024fe:	3a11      	subs	r2, #17
 8002500:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002502:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002504:	320d      	adds	r2, #13
 8002506:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8002508:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800250a:	079b      	lsls	r3, r3, #30
 800250c:	d150      	bne.n	80025b0 <HAL_TIM_IRQHandler+0x150>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800250e:	f7ff ff7f 	bl	8002410 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002512:	0020      	movs	r0, r4
 8002514:	f7ff ffa0 	bl	8002458 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002518:	2300      	movs	r3, #0
 800251a:	7723      	strb	r3, [r4, #28]
 800251c:	6823      	ldr	r3, [r4, #0]
 800251e:	e7b7      	b.n	8002490 <HAL_TIM_IRQHandler+0x30>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002520:	3a09      	subs	r2, #9
 8002522:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002524:	3207      	adds	r2, #7
 8002526:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002528:	699a      	ldr	r2, [r3, #24]
 800252a:	23c0      	movs	r3, #192	; 0xc0
 800252c:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800252e:	0020      	movs	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002530:	421a      	tst	r2, r3
 8002532:	d13a      	bne.n	80025aa <HAL_TIM_IRQHandler+0x14a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002534:	f7ff ff6c 	bl	8002410 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002538:	0020      	movs	r0, r4
 800253a:	f7ff ff8d 	bl	8002458 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800253e:	2300      	movs	r3, #0
 8002540:	7723      	strb	r3, [r4, #28]
 8002542:	6823      	ldr	r3, [r4, #0]
 8002544:	e79d      	b.n	8002482 <HAL_TIM_IRQHandler+0x22>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002546:	3a05      	subs	r2, #5
 8002548:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800254a:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800254c:	3204      	adds	r2, #4
 800254e:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002550:	079b      	lsls	r3, r3, #30
 8002552:	d124      	bne.n	800259e <HAL_TIM_IRQHandler+0x13e>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002554:	f7ff ff5c 	bl	8002410 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002558:	0020      	movs	r0, r4
 800255a:	f7ff ff7d 	bl	8002458 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800255e:	2300      	movs	r3, #0
 8002560:	7723      	strb	r3, [r4, #28]
 8002562:	6823      	ldr	r3, [r4, #0]
 8002564:	e786      	b.n	8002474 <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002566:	3a41      	subs	r2, #65	; 0x41
 8002568:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 800256a:	0020      	movs	r0, r4
 800256c:	f000 f89e 	bl	80026ac <HAL_TIMEx_CommutationCallback>
}
 8002570:	e7b1      	b.n	80024d6 <HAL_TIM_IRQHandler+0x76>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002572:	3a81      	subs	r2, #129	; 0x81
 8002574:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002576:	0020      	movs	r0, r4
 8002578:	f7ff ff70 	bl	800245c <HAL_TIM_TriggerCallback>
 800257c:	6823      	ldr	r3, [r4, #0]
 800257e:	e7a3      	b.n	80024c8 <HAL_TIM_IRQHandler+0x68>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002580:	3a03      	subs	r2, #3
 8002582:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002584:	0020      	movs	r0, r4
 8002586:	f001 f833 	bl	80035f0 <HAL_TIM_PeriodElapsedCallback>
 800258a:	6823      	ldr	r3, [r4, #0]
 800258c:	e78e      	b.n	80024ac <HAL_TIM_IRQHandler+0x4c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800258e:	3a02      	subs	r2, #2
 8002590:	3aff      	subs	r2, #255	; 0xff
 8002592:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002594:	0020      	movs	r0, r4
 8002596:	f000 f88b 	bl	80026b0 <HAL_TIMEx_BreakCallback>
 800259a:	6823      	ldr	r3, [r4, #0]
 800259c:	e78d      	b.n	80024ba <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_IC_CaptureCallback(htim);
 800259e:	f7ff ff39 	bl	8002414 <HAL_TIM_IC_CaptureCallback>
 80025a2:	e7dc      	b.n	800255e <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 80025a4:	f7ff ff36 	bl	8002414 <HAL_TIM_IC_CaptureCallback>
 80025a8:	e7a5      	b.n	80024f6 <HAL_TIM_IRQHandler+0x96>
        HAL_TIM_IC_CaptureCallback(htim);
 80025aa:	f7ff ff33 	bl	8002414 <HAL_TIM_IC_CaptureCallback>
 80025ae:	e7c6      	b.n	800253e <HAL_TIM_IRQHandler+0xde>
        HAL_TIM_IC_CaptureCallback(htim);
 80025b0:	f7ff ff30 	bl	8002414 <HAL_TIM_IC_CaptureCallback>
 80025b4:	e7b0      	b.n	8002518 <HAL_TIM_IRQHandler+0xb8>
 80025b6:	46c0      	nop			; (mov r8, r8)

080025b8 <HAL_TIM_ErrorCallback>:
}
 80025b8:	4770      	bx	lr
 80025ba:	46c0      	nop			; (mov r8, r8)

080025bc <TIM_DMAError>:
  htim->State= HAL_TIM_STATE_READY;
 80025bc:	2201      	movs	r2, #1
 80025be:	233d      	movs	r3, #61	; 0x3d
{
 80025c0:	b510      	push	{r4, lr}
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025c2:	6a40      	ldr	r0, [r0, #36]	; 0x24
  htim->State= HAL_TIM_STATE_READY;
 80025c4:	54c2      	strb	r2, [r0, r3]
  HAL_TIM_ErrorCallback(htim);
 80025c6:	f7ff fff7 	bl	80025b8 <HAL_TIM_ErrorCallback>
}
 80025ca:	bd10      	pop	{r4, pc}

080025cc <HAL_TIMEx_PWMN_Start>:
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelNState)
{
  uint32_t tmp = 0U;

  tmp = TIM_CCER_CC1NE << Channel;
 80025cc:	2204      	movs	r2, #4
 80025ce:	408a      	lsls	r2, r1
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80025d0:	6803      	ldr	r3, [r0, #0]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80025d2:	6a19      	ldr	r1, [r3, #32]
}
 80025d4:	2000      	movs	r0, #0
  TIMx->CCER &=  ~tmp;
 80025d6:	4391      	bics	r1, r2
 80025d8:	6219      	str	r1, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelNState << Channel);
 80025da:	6a19      	ldr	r1, [r3, #32]
 80025dc:	430a      	orrs	r2, r1
 80025de:	621a      	str	r2, [r3, #32]
  __HAL_TIM_MOE_ENABLE(htim);
 80025e0:	2280      	movs	r2, #128	; 0x80
 80025e2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80025e4:	0212      	lsls	r2, r2, #8
 80025e6:	430a      	orrs	r2, r1
  __HAL_TIM_ENABLE(htim);
 80025e8:	2101      	movs	r1, #1
  __HAL_TIM_MOE_ENABLE(htim);
 80025ea:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	430a      	orrs	r2, r1
 80025f0:	601a      	str	r2, [r3, #0]
}
 80025f2:	4770      	bx	lr

080025f4 <HAL_TIMEx_MasterConfigSynchronization>:
{
 80025f4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80025f6:	243c      	movs	r4, #60	; 0x3c
 80025f8:	5d03      	ldrb	r3, [r0, r4]
{
 80025fa:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 80025fc:	2002      	movs	r0, #2
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d017      	beq.n	8002632 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
  htim->State = HAL_TIM_STATE_BUSY;
 8002602:	253d      	movs	r5, #61	; 0x3d
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002604:	2670      	movs	r6, #112	; 0x70
 8002606:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002608:	5550      	strb	r0, [r2, r5]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800260a:	6858      	ldr	r0, [r3, #4]
 800260c:	43b0      	bics	r0, r6
 800260e:	6058      	str	r0, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002610:	6858      	ldr	r0, [r3, #4]
 8002612:	680e      	ldr	r6, [r1, #0]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002614:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002616:	4330      	orrs	r0, r6
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002618:	2680      	movs	r6, #128	; 0x80
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800261a:	6058      	str	r0, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800261c:	6898      	ldr	r0, [r3, #8]
 800261e:	43b0      	bics	r0, r6
 8002620:	6098      	str	r0, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002622:	6898      	ldr	r0, [r3, #8]
 8002624:	4301      	orrs	r1, r0
 8002626:	6099      	str	r1, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 8002628:	2301      	movs	r3, #1
 800262a:	5553      	strb	r3, [r2, r5]
  __HAL_UNLOCK(htim);
 800262c:	2300      	movs	r3, #0
  return HAL_OK;
 800262e:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8002630:	5513      	strb	r3, [r2, r4]
}
 8002632:	bd70      	pop	{r4, r5, r6, pc}

08002634 <HAL_TIMEx_ConfigBreakDeadTime>:
{
 8002634:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8002636:	243c      	movs	r4, #60	; 0x3c
 8002638:	5d03      	ldrb	r3, [r0, r4]
{
 800263a:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 800263c:	2002      	movs	r0, #2
 800263e:	2b01      	cmp	r3, #1
 8002640:	d024      	beq.n	800268c <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  htim->State = HAL_TIM_STATE_BUSY;
 8002642:	253d      	movs	r5, #61	; 0x3d
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002644:	4b12      	ldr	r3, [pc, #72]	; (8002690 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002646:	5550      	strb	r0, [r2, r5]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002648:	68c8      	ldr	r0, [r1, #12]
 800264a:	4003      	ands	r3, r0
 800264c:	6888      	ldr	r0, [r1, #8]
 800264e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002650:	4810      	ldr	r0, [pc, #64]	; (8002694 <HAL_TIMEx_ConfigBreakDeadTime+0x60>)
 8002652:	4003      	ands	r3, r0
 8002654:	6848      	ldr	r0, [r1, #4]
 8002656:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002658:	480f      	ldr	r0, [pc, #60]	; (8002698 <HAL_TIMEx_ConfigBreakDeadTime+0x64>)
 800265a:	4003      	ands	r3, r0
 800265c:	6808      	ldr	r0, [r1, #0]
 800265e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002660:	480e      	ldr	r0, [pc, #56]	; (800269c <HAL_TIMEx_ConfigBreakDeadTime+0x68>)
 8002662:	4003      	ands	r3, r0
 8002664:	6908      	ldr	r0, [r1, #16]
 8002666:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002668:	480d      	ldr	r0, [pc, #52]	; (80026a0 <HAL_TIMEx_ConfigBreakDeadTime+0x6c>)
 800266a:	4003      	ands	r3, r0
 800266c:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800266e:	6989      	ldr	r1, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002670:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002672:	480c      	ldr	r0, [pc, #48]	; (80026a4 <HAL_TIMEx_ConfigBreakDeadTime+0x70>)
 8002674:	4003      	ands	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002676:	480c      	ldr	r0, [pc, #48]	; (80026a8 <HAL_TIMEx_ConfigBreakDeadTime+0x74>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002678:	430b      	orrs	r3, r1
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 800267a:	4003      	ands	r3, r0
 800267c:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 800267e:	6811      	ldr	r1, [r2, #0]
  return HAL_OK;
 8002680:	2000      	movs	r0, #0
  htim->Instance->BDTR = tmpbdtr;
 8002682:	644b      	str	r3, [r1, #68]	; 0x44
  htim->State = HAL_TIM_STATE_READY;
 8002684:	2301      	movs	r3, #1
 8002686:	5553      	strb	r3, [r2, r5]
  __HAL_UNLOCK(htim);
 8002688:	2300      	movs	r3, #0
 800268a:	5513      	strb	r3, [r2, r4]
}
 800268c:	bd30      	pop	{r4, r5, pc}
 800268e:	46c0      	nop			; (mov r8, r8)
 8002690:	fffffcff 	.word	0xfffffcff
 8002694:	fffffbff 	.word	0xfffffbff
 8002698:	fffff7ff 	.word	0xfffff7ff
 800269c:	ffffefff 	.word	0xffffefff
 80026a0:	ffffdfff 	.word	0xffffdfff
 80026a4:	ffffbfff 	.word	0xffffbfff
 80026a8:	ffff7fff 	.word	0xffff7fff

080026ac <HAL_TIMEx_CommutationCallback>:
 80026ac:	4770      	bx	lr
 80026ae:	46c0      	nop			; (mov r8, r8)

080026b0 <HAL_TIMEx_BreakCallback>:
}
 80026b0:	4770      	bx	lr
 80026b2:	46c0      	nop			; (mov r8, r8)

080026b4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80026b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026b6:	46de      	mov	lr, fp
 80026b8:	464e      	mov	r6, r9
 80026ba:	4657      	mov	r7, sl
 80026bc:	4645      	mov	r5, r8
 80026be:	b5e0      	push	{r5, r6, r7, lr}
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80026c0:	680e      	ldr	r6, [r1, #0]
{
 80026c2:	468b      	mov	fp, r1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80026c4:	2e00      	cmp	r6, #0
 80026c6:	d100      	bne.n	80026ca <LL_GPIO_Init+0x16>
 80026c8:	e073      	b.n	80027b2 <LL_GPIO_Init+0xfe>
 80026ca:	684b      	ldr	r3, [r1, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	469c      	mov	ip, r3
 80026d0:	2301      	movs	r3, #1
 80026d2:	425b      	negs	r3, r3
 80026d4:	4463      	add	r3, ip
 80026d6:	4698      	mov	r8, r3
 80026d8:	e00a      	b.n	80026f0 <LL_GPIO_Init+0x3c>
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 80026da:	4659      	mov	r1, fp
 80026dc:	6909      	ldr	r1, [r1, #16]
 80026de:	68c3      	ldr	r3, [r0, #12]
 80026e0:	434d      	muls	r5, r1
 80026e2:	401c      	ands	r4, r3
 80026e4:	432c      	orrs	r4, r5
 80026e6:	60c4      	str	r4, [r0, #12]
 80026e8:	0033      	movs	r3, r6
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
      }
    }
    pinpos++;
 80026ea:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80026ec:	40d3      	lsrs	r3, r2
 80026ee:	d042      	beq.n	8002776 <LL_GPIO_Init+0xc2>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80026f0:	2301      	movs	r3, #1
 80026f2:	4093      	lsls	r3, r2
 80026f4:	4033      	ands	r3, r6
    if (currentpin)
 80026f6:	d0f7      	beq.n	80026e8 <LL_GPIO_Init+0x34>
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 80026f8:	001d      	movs	r5, r3
 80026fa:	6804      	ldr	r4, [r0, #0]
 80026fc:	435d      	muls	r5, r3
 80026fe:	46a1      	mov	r9, r4
 8002700:	006c      	lsls	r4, r5, #1
 8002702:	1964      	adds	r4, r4, r5
 8002704:	464f      	mov	r7, r9
 8002706:	43e4      	mvns	r4, r4
 8002708:	4027      	ands	r7, r4
 800270a:	46b9      	mov	r9, r7
 800270c:	4667      	mov	r7, ip
 800270e:	436f      	muls	r7, r5
 8002710:	46ba      	mov	sl, r7
 8002712:	464f      	mov	r7, r9
 8002714:	4651      	mov	r1, sl
 8002716:	430f      	orrs	r7, r1
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002718:	4641      	mov	r1, r8
 800271a:	6007      	str	r7, [r0, #0]
 800271c:	2901      	cmp	r1, #1
 800271e:	d8dc      	bhi.n	80026da <LL_GPIO_Init+0x26>
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 8002720:	6881      	ldr	r1, [r0, #8]
 8002722:	468a      	mov	sl, r1
 8002724:	4659      	mov	r1, fp
 8002726:	6889      	ldr	r1, [r1, #8]
 8002728:	4369      	muls	r1, r5
 800272a:	4689      	mov	r9, r1
 800272c:	4651      	mov	r1, sl
 800272e:	4021      	ands	r1, r4
 8002730:	468a      	mov	sl, r1
 8002732:	4649      	mov	r1, r9
 8002734:	4657      	mov	r7, sl
 8002736:	4339      	orrs	r1, r7
 8002738:	6081      	str	r1, [r0, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 800273a:	68c1      	ldr	r1, [r0, #12]
 800273c:	468a      	mov	sl, r1
 800273e:	4659      	mov	r1, fp
 8002740:	6909      	ldr	r1, [r1, #16]
 8002742:	4369      	muls	r1, r5
 8002744:	4689      	mov	r9, r1
 8002746:	4651      	mov	r1, sl
 8002748:	400c      	ands	r4, r1
 800274a:	4649      	mov	r1, r9
 800274c:	430c      	orrs	r4, r1
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800274e:	4661      	mov	r1, ip
 8002750:	60c4      	str	r4, [r0, #12]
 8002752:	2902      	cmp	r1, #2
 8002754:	d1c8      	bne.n	80026e8 <LL_GPIO_Init+0x34>
        if (currentpin < LL_GPIO_PIN_8)
 8002756:	2bff      	cmp	r3, #255	; 0xff
 8002758:	d81e      	bhi.n	8002798 <LL_GPIO_Init+0xe4>
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800275a:	4659      	mov	r1, fp
 800275c:	436d      	muls	r5, r5
 800275e:	6949      	ldr	r1, [r1, #20]
 8002760:	012c      	lsls	r4, r5, #4
 8002762:	1b64      	subs	r4, r4, r5
 8002764:	434d      	muls	r5, r1
 8002766:	6a03      	ldr	r3, [r0, #32]
    pinpos++;
 8002768:	3201      	adds	r2, #1
 800276a:	43a3      	bics	r3, r4
 800276c:	431d      	orrs	r5, r3
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800276e:	0033      	movs	r3, r6
 8002770:	6205      	str	r5, [r0, #32]
 8002772:	40d3      	lsrs	r3, r2
 8002774:	d1bc      	bne.n	80026f0 <LL_GPIO_Init+0x3c>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002776:	4643      	mov	r3, r8
 8002778:	2b01      	cmp	r3, #1
 800277a:	d806      	bhi.n	800278a <LL_GPIO_Init+0xd6>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800277c:	465a      	mov	r2, fp
 800277e:	6843      	ldr	r3, [r0, #4]
 8002780:	68d2      	ldr	r2, [r2, #12]
 8002782:	43b3      	bics	r3, r6
 8002784:	4356      	muls	r6, r2
 8002786:	431e      	orrs	r6, r3
 8002788:	6046      	str	r6, [r0, #4]
    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);

  }
  return (SUCCESS);
}
 800278a:	2001      	movs	r0, #1
 800278c:	bc3c      	pop	{r2, r3, r4, r5}
 800278e:	4690      	mov	r8, r2
 8002790:	4699      	mov	r9, r3
 8002792:	46a2      	mov	sl, r4
 8002794:	46ab      	mov	fp, r5
 8002796:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8002798:	4659      	mov	r1, fp
 800279a:	0a1b      	lsrs	r3, r3, #8
 800279c:	435b      	muls	r3, r3
 800279e:	435b      	muls	r3, r3
 80027a0:	6949      	ldr	r1, [r1, #20]
 80027a2:	011d      	lsls	r5, r3, #4
 80027a4:	1aed      	subs	r5, r5, r3
 80027a6:	434b      	muls	r3, r1
 80027a8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80027aa:	43ac      	bics	r4, r5
 80027ac:	4323      	orrs	r3, r4
 80027ae:	6243      	str	r3, [r0, #36]	; 0x24
 80027b0:	e79a      	b.n	80026e8 <LL_GPIO_Init+0x34>
 80027b2:	684b      	ldr	r3, [r1, #4]
 80027b4:	3b01      	subs	r3, #1
 80027b6:	4698      	mov	r8, r3
 80027b8:	e7dd      	b.n	8002776 <LL_GPIO_Init+0xc2>
 80027ba:	46c0      	nop			; (mov r8, r8)

080027bc <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 80027bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027be:	4647      	mov	r7, r8
 80027c0:	46ce      	mov	lr, r9
  uint16_t pagestatus0 = 6, pagestatus1 = 6;
  uint16_t varidx = 0;
  uint16_t eepromstatus = 0, readstatus = 0;
  int16_t x = -1;
  HAL_StatusTypeDef  flashstatus;
  uint32_t page_error = 0;
 80027c2:	2500      	movs	r5, #0
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);

  /* Fill EraseInit structure*/
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
  s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
  s_eraseinit.NbPages     = 1;
 80027c4:	2601      	movs	r6, #1
{
 80027c6:	b580      	push	{r7, lr}
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80027c8:	49a5      	ldr	r1, [pc, #660]	; (8002a60 <EE_Init+0x2a4>)
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80027ca:	4fa6      	ldr	r7, [pc, #664]	; (8002a64 <EE_Init+0x2a8>)
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80027cc:	880b      	ldrh	r3, [r1, #0]
  
  /* Check for invalid header states and repair if necessary */
  switch (pagestatus0)
 80027ce:	48a6      	ldr	r0, [pc, #664]	; (8002a68 <EE_Init+0x2ac>)
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80027d0:	883c      	ldrh	r4, [r7, #0]
{
 80027d2:	b089      	sub	sp, #36	; 0x24
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80027d4:	b29b      	uxth	r3, r3
  uint32_t page_error = 0;
 80027d6:	9500      	str	r5, [sp, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80027d8:	b2a4      	uxth	r4, r4
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80027da:	9502      	str	r5, [sp, #8]
  s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 80027dc:	9103      	str	r1, [sp, #12]
  s_eraseinit.NbPages     = 1;
 80027de:	9604      	str	r6, [sp, #16]
  switch (pagestatus0)
 80027e0:	4283      	cmp	r3, r0
 80027e2:	d100      	bne.n	80027e6 <EE_Init+0x2a>
 80027e4:	e096      	b.n	8002914 <EE_Init+0x158>
 80027e6:	4aa1      	ldr	r2, [pc, #644]	; (8002a6c <EE_Init+0x2b0>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d022      	beq.n	8002832 <EE_Init+0x76>
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d03e      	beq.n	800286e <EE_Init+0xb2>
{
  HAL_StatusTypeDef flashstatus = HAL_OK;
  uint32_t page_error = 0;
  FLASH_EraseInitTypeDef s_eraseinit;

  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80027f0:	a805      	add	r0, sp, #20
  uint32_t page_error = 0;
 80027f2:	9501      	str	r5, [sp, #4]
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80027f4:	9505      	str	r5, [sp, #20]
  s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 80027f6:	6041      	str	r1, [r0, #4]
  s_eraseinit.NbPages     = 1;
 80027f8:	6086      	str	r6, [r0, #8]
  while (Address <= PAGE0_END_ADDRESS)
 80027fa:	4c9d      	ldr	r4, [pc, #628]	; (8002a70 <EE_Init+0x2b4>)
 80027fc:	e002      	b.n	8002804 <EE_Init+0x48>
    Address = Address + 4;
 80027fe:	3104      	adds	r1, #4
  while (Address <= PAGE0_END_ADDRESS)
 8002800:	42a1      	cmp	r1, r4
 8002802:	d007      	beq.n	8002814 <EE_Init+0x58>
    addressvalue = (*(__IO uint16_t*)Address);
 8002804:	880b      	ldrh	r3, [r1, #0]
    if (addressvalue != ERASED)
 8002806:	4293      	cmp	r3, r2
 8002808:	d0f9      	beq.n	80027fe <EE_Init+0x42>
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
  {
    flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error); 
 800280a:	a901      	add	r1, sp, #4
 800280c:	f7fe fb54 	bl	8000eb8 <HAL_FLASHEx_Erase>
    /* If erase operation was failed, a Flash error code is returned */
    if (flashstatus != HAL_OK)
 8002810:	2800      	cmp	r0, #0
 8002812:	d12a      	bne.n	800286a <EE_Init+0xae>
    {
      return flashstatus;
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 8002814:	2200      	movs	r2, #0
 8002816:	2300      	movs	r3, #0
 8002818:	4991      	ldr	r1, [pc, #580]	; (8002a60 <EE_Init+0x2a4>)
 800281a:	2001      	movs	r0, #1
 800281c:	f7fe fa12 	bl	8000c44 <HAL_FLASH_Program>
  /* If program operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 8002820:	2800      	cmp	r0, #0
 8002822:	d122      	bne.n	800286a <EE_Init+0xae>
  return HAL_OK;
 8002824:	2400      	movs	r4, #0
}
 8002826:	0020      	movs	r0, r4
 8002828:	b009      	add	sp, #36	; 0x24
 800282a:	bc0c      	pop	{r2, r3}
 800282c:	4690      	mov	r8, r2
 800282e:	4699      	mov	r9, r3
 8002830:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pagestatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8002832:	2c00      	cmp	r4, #0
 8002834:	d100      	bne.n	8002838 <EE_Init+0x7c>
 8002836:	e0a0      	b.n	800297a <EE_Init+0x1be>
      else if (pagestatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8002838:	4284      	cmp	r4, r0
 800283a:	d000      	beq.n	800283e <EE_Init+0x82>
 800283c:	e101      	b.n	8002a42 <EE_Init+0x286>
  while (Address <= PAGE0_END_ADDRESS)
 800283e:	488c      	ldr	r0, [pc, #560]	; (8002a70 <EE_Init+0x2b4>)
 8002840:	e002      	b.n	8002848 <EE_Init+0x8c>
    Address = Address + 4;
 8002842:	3104      	adds	r1, #4
  while (Address <= PAGE0_END_ADDRESS)
 8002844:	4281      	cmp	r1, r0
 8002846:	d008      	beq.n	800285a <EE_Init+0x9e>
    addressvalue = (*(__IO uint16_t*)Address);
 8002848:	880a      	ldrh	r2, [r1, #0]
    if (addressvalue != ERASED)
 800284a:	429a      	cmp	r2, r3
 800284c:	d0f9      	beq.n	8002842 <EE_Init+0x86>
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 800284e:	4669      	mov	r1, sp
 8002850:	a802      	add	r0, sp, #8
 8002852:	f7fe fb31 	bl	8000eb8 <HAL_FLASHEx_Erase>
          if (flashstatus != HAL_OK)
 8002856:	2800      	cmp	r0, #0
 8002858:	d107      	bne.n	800286a <EE_Init+0xae>
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 800285a:	2200      	movs	r2, #0
 800285c:	2300      	movs	r3, #0
 800285e:	4981      	ldr	r1, [pc, #516]	; (8002a64 <EE_Init+0x2a8>)
 8002860:	2001      	movs	r0, #1
 8002862:	f7fe f9ef 	bl	8000c44 <HAL_FLASH_Program>
        if (flashstatus != HAL_OK)
 8002866:	2800      	cmp	r0, #0
 8002868:	d0dc      	beq.n	8002824 <EE_Init+0x68>
        return flashstatus;
 800286a:	b284      	uxth	r4, r0
 800286c:	e7db      	b.n	8002826 <EE_Init+0x6a>
      if (pagestatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 800286e:	2c00      	cmp	r4, #0
 8002870:	d100      	bne.n	8002874 <EE_Init+0xb8>
 8002872:	e092      	b.n	800299a <EE_Init+0x1de>
      else if (pagestatus1 == ERASED) /* Page0 valid, Page1 erased */
 8002874:	4294      	cmp	r4, r2
 8002876:	d0d5      	beq.n	8002824 <EE_Init+0x68>
 8002878:	2301      	movs	r3, #1
 800287a:	425b      	negs	r3, r3
 800287c:	4698      	mov	r8, r3
      *Data = (*(__IO uint16_t*)(address - 2));
 800287e:	4b7d      	ldr	r3, [pc, #500]	; (8002a74 <EE_Init+0x2b8>)
 8002880:	2600      	movs	r6, #0
 8002882:	4699      	mov	r9, r3
 8002884:	4f7c      	ldr	r7, [pc, #496]	; (8002a78 <EE_Init+0x2bc>)
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 8002886:	4b7d      	ldr	r3, [pc, #500]	; (8002a7c <EE_Init+0x2c0>)
 8002888:	0072      	lsls	r2, r6, #1
 800288a:	881b      	ldrh	r3, [r3, #0]
 800288c:	5abc      	ldrh	r4, [r7, r2]
 800288e:	42a3      	cmp	r3, r4
 8002890:	d100      	bne.n	8002894 <EE_Init+0xd8>
 8002892:	e0be      	b.n	8002a12 <EE_Init+0x256>
          if (varidx != x)
 8002894:	4546      	cmp	r6, r8
 8002896:	d01a      	beq.n	80028ce <EE_Init+0x112>
static uint16_t EE_FindValidPage(uint8_t Operation)
{
  uint16_t pagestatus0 = 6, pagestatus1 = 6;

  /* Get Page0 actual status */
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002898:	4b71      	ldr	r3, [pc, #452]	; (8002a60 <EE_Init+0x2a4>)
 800289a:	881a      	ldrh	r2, [r3, #0]

  /* Get Page1 actual status */
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800289c:	4b71      	ldr	r3, [pc, #452]	; (8002a64 <EE_Init+0x2a8>)
 800289e:	881b      	ldrh	r3, [r3, #0]
 80028a0:	b29b      	uxth	r3, r3
      {
        return NO_VALID_PAGE;   /* No valid Page */
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (pagestatus0 == VALID_PAGE)
 80028a2:	2a00      	cmp	r2, #0
 80028a4:	d100      	bne.n	80028a8 <EE_Init+0xec>
 80028a6:	e0b7      	b.n	8002a18 <EE_Init+0x25c>
      {
        return PAGE0;           /* Page0 valid */
      }
      else if (pagestatus1 == VALID_PAGE)
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d000      	beq.n	80028ae <EE_Init+0xf2>
 80028ac:	e11f      	b.n	8002aee <EE_Init+0x332>
 80028ae:	4b74      	ldr	r3, [pc, #464]	; (8002a80 <EE_Init+0x2c4>)
 80028b0:	4974      	ldr	r1, [pc, #464]	; (8002a84 <EE_Init+0x2c8>)
 80028b2:	001a      	movs	r2, r3
 80028b4:	4874      	ldr	r0, [pc, #464]	; (8002a88 <EE_Init+0x2cc>)
    addressvalue = (*(__IO uint16_t*)address);
 80028b6:	881b      	ldrh	r3, [r3, #0]
    if (addressvalue == VirtAddress)
 80028b8:	429c      	cmp	r4, r3
 80028ba:	d105      	bne.n	80028c8 <EE_Init+0x10c>
 80028bc:	e0ef      	b.n	8002a9e <EE_Init+0x2e2>
    addressvalue = (*(__IO uint16_t*)address);
 80028be:	8819      	ldrh	r1, [r3, #0]
    if (addressvalue == VirtAddress)
 80028c0:	428c      	cmp	r4, r1
 80028c2:	d100      	bne.n	80028c6 <EE_Init+0x10a>
 80028c4:	e0ea      	b.n	8002a9c <EE_Init+0x2e0>
 80028c6:	001a      	movs	r2, r3
      address = address - 4;
 80028c8:	1f13      	subs	r3, r2, #4
  while (address > (PageStartAddress + 2))
 80028ca:	4283      	cmp	r3, r0
 80028cc:	d8f7      	bhi.n	80028be <EE_Init+0x102>
 80028ce:	3601      	adds	r6, #1
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 80028d0:	2e03      	cmp	r6, #3
 80028d2:	d1d8      	bne.n	8002886 <EE_Init+0xca>
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 80028d4:	2200      	movs	r2, #0
 80028d6:	2300      	movs	r3, #0
 80028d8:	4962      	ldr	r1, [pc, #392]	; (8002a64 <EE_Init+0x2a8>)
 80028da:	2001      	movs	r0, #1
 80028dc:	f7fe f9b2 	bl	8000c44 <HAL_FLASH_Program>
        if (flashstatus != HAL_OK)
 80028e0:	2800      	cmp	r0, #0
 80028e2:	d1c2      	bne.n	800286a <EE_Init+0xae>
        s_eraseinit.NbPages     = 1;
 80028e4:	2201      	movs	r2, #1
        s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 80028e6:	4b5e      	ldr	r3, [pc, #376]	; (8002a60 <EE_Init+0x2a4>)
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80028e8:	9002      	str	r0, [sp, #8]
        s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 80028ea:	9303      	str	r3, [sp, #12]
        s_eraseinit.NbPages     = 1;
 80028ec:	9204      	str	r2, [sp, #16]
    if (addressvalue != ERASED)
 80028ee:	495f      	ldr	r1, [pc, #380]	; (8002a6c <EE_Init+0x2b0>)
  while (Address <= PAGE0_END_ADDRESS)
 80028f0:	485f      	ldr	r0, [pc, #380]	; (8002a70 <EE_Init+0x2b4>)
 80028f2:	e003      	b.n	80028fc <EE_Init+0x140>
    Address = Address + 4;
 80028f4:	3304      	adds	r3, #4
  while (Address <= PAGE0_END_ADDRESS)
 80028f6:	4283      	cmp	r3, r0
 80028f8:	d100      	bne.n	80028fc <EE_Init+0x140>
 80028fa:	e793      	b.n	8002824 <EE_Init+0x68>
    addressvalue = (*(__IO uint16_t*)Address);
 80028fc:	881a      	ldrh	r2, [r3, #0]
    if (addressvalue != ERASED)
 80028fe:	428a      	cmp	r2, r1
 8002900:	d0f8      	beq.n	80028f4 <EE_Init+0x138>
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8002902:	4669      	mov	r1, sp
 8002904:	a802      	add	r0, sp, #8
 8002906:	f7fe fad7 	bl	8000eb8 <HAL_FLASHEx_Erase>
          if (flashstatus != HAL_OK)
 800290a:	2800      	cmp	r0, #0
 800290c:	d100      	bne.n	8002910 <EE_Init+0x154>
 800290e:	e789      	b.n	8002824 <EE_Init+0x68>
        return flashstatus;
 8002910:	b284      	uxth	r4, r0
 8002912:	e788      	b.n	8002826 <EE_Init+0x6a>
      if (pagestatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8002914:	2c00      	cmp	r4, #0
 8002916:	d11d      	bne.n	8002954 <EE_Init+0x198>
 8002918:	2301      	movs	r3, #1
 800291a:	2600      	movs	r6, #0
 800291c:	425b      	negs	r3, r3
 800291e:	4698      	mov	r8, r3
      *Data = (*(__IO uint16_t*)(address - 2));
 8002920:	4b54      	ldr	r3, [pc, #336]	; (8002a74 <EE_Init+0x2b8>)
 8002922:	4f55      	ldr	r7, [pc, #340]	; (8002a78 <EE_Init+0x2bc>)
 8002924:	4699      	mov	r9, r3
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 8002926:	4b59      	ldr	r3, [pc, #356]	; (8002a8c <EE_Init+0x2d0>)
 8002928:	0072      	lsls	r2, r6, #1
 800292a:	881b      	ldrh	r3, [r3, #0]
 800292c:	5abc      	ldrh	r4, [r7, r2]
 800292e:	42a3      	cmp	r3, r4
 8002930:	d06c      	beq.n	8002a0c <EE_Init+0x250>
          if (varidx != x)
 8002932:	4546      	cmp	r6, r8
 8002934:	d060      	beq.n	80029f8 <EE_Init+0x23c>
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002936:	4b4a      	ldr	r3, [pc, #296]	; (8002a60 <EE_Init+0x2a4>)
 8002938:	881a      	ldrh	r2, [r3, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800293a:	4b4a      	ldr	r3, [pc, #296]	; (8002a64 <EE_Init+0x2a8>)
 800293c:	881b      	ldrh	r3, [r3, #0]
 800293e:	b29b      	uxth	r3, r3
      if (pagestatus0 == VALID_PAGE)
 8002940:	2a00      	cmp	r2, #0
 8002942:	d06e      	beq.n	8002a22 <EE_Init+0x266>
      else if (pagestatus1 == VALID_PAGE)
 8002944:	2b00      	cmp	r3, #0
 8002946:	d000      	beq.n	800294a <EE_Init+0x18e>
 8002948:	e0fc      	b.n	8002b44 <EE_Init+0x388>
 800294a:	4b4d      	ldr	r3, [pc, #308]	; (8002a80 <EE_Init+0x2c4>)
 800294c:	494d      	ldr	r1, [pc, #308]	; (8002a84 <EE_Init+0x2c8>)
 800294e:	001a      	movs	r2, r3
 8002950:	484d      	ldr	r0, [pc, #308]	; (8002a88 <EE_Init+0x2cc>)
 8002952:	e06a      	b.n	8002a2a <EE_Init+0x26e>
      else if (pagestatus1 == ERASED) /* Page0 receive, Page1 erased */
 8002954:	4a45      	ldr	r2, [pc, #276]	; (8002a6c <EE_Init+0x2b0>)
 8002956:	4294      	cmp	r4, r2
 8002958:	d100      	bne.n	800295c <EE_Init+0x1a0>
 800295a:	e0f6      	b.n	8002b4a <EE_Init+0x38e>
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 800295c:	a805      	add	r0, sp, #20
  uint32_t page_error = 0;
 800295e:	9501      	str	r5, [sp, #4]
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8002960:	9505      	str	r5, [sp, #20]
  s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 8002962:	6041      	str	r1, [r0, #4]
  s_eraseinit.NbPages     = 1;
 8002964:	6086      	str	r6, [r0, #8]
  while (Address <= PAGE0_END_ADDRESS)
 8002966:	4c42      	ldr	r4, [pc, #264]	; (8002a70 <EE_Init+0x2b4>)
 8002968:	e003      	b.n	8002972 <EE_Init+0x1b6>
    Address = Address + 4;
 800296a:	3104      	adds	r1, #4
  while (Address <= PAGE0_END_ADDRESS)
 800296c:	42a1      	cmp	r1, r4
 800296e:	d100      	bne.n	8002972 <EE_Init+0x1b6>
 8002970:	e750      	b.n	8002814 <EE_Init+0x58>
    addressvalue = (*(__IO uint16_t*)Address);
 8002972:	880b      	ldrh	r3, [r1, #0]
    if (addressvalue != ERASED)
 8002974:	4293      	cmp	r3, r2
 8002976:	d0f8      	beq.n	800296a <EE_Init+0x1ae>
 8002978:	e747      	b.n	800280a <EE_Init+0x4e>
  while (Address <= PAGE0_END_ADDRESS)
 800297a:	483d      	ldr	r0, [pc, #244]	; (8002a70 <EE_Init+0x2b4>)
 800297c:	e003      	b.n	8002986 <EE_Init+0x1ca>
    Address = Address + 4;
 800297e:	3104      	adds	r1, #4
  while (Address <= PAGE0_END_ADDRESS)
 8002980:	4281      	cmp	r1, r0
 8002982:	d100      	bne.n	8002986 <EE_Init+0x1ca>
 8002984:	e74e      	b.n	8002824 <EE_Init+0x68>
    addressvalue = (*(__IO uint16_t*)Address);
 8002986:	880a      	ldrh	r2, [r1, #0]
    if (addressvalue != ERASED)
 8002988:	429a      	cmp	r2, r3
 800298a:	d0f8      	beq.n	800297e <EE_Init+0x1c2>
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 800298c:	4669      	mov	r1, sp
 800298e:	a802      	add	r0, sp, #8
 8002990:	f7fe fa92 	bl	8000eb8 <HAL_FLASHEx_Erase>
          if (flashstatus != HAL_OK)
 8002994:	2800      	cmp	r0, #0
 8002996:	d1bb      	bne.n	8002910 <EE_Init+0x154>
 8002998:	e744      	b.n	8002824 <EE_Init+0x68>
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 800299a:	a805      	add	r0, sp, #20
  uint32_t page_error = 0;
 800299c:	9401      	str	r4, [sp, #4]
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 800299e:	9405      	str	r4, [sp, #20]
  s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 80029a0:	6041      	str	r1, [r0, #4]
  s_eraseinit.NbPages     = 1;
 80029a2:	6086      	str	r6, [r0, #8]
  while (Address <= PAGE0_END_ADDRESS)
 80029a4:	4d32      	ldr	r5, [pc, #200]	; (8002a70 <EE_Init+0x2b4>)
 80029a6:	e002      	b.n	80029ae <EE_Init+0x1f2>
    Address = Address + 4;
 80029a8:	3104      	adds	r1, #4
  while (Address <= PAGE0_END_ADDRESS)
 80029aa:	42a9      	cmp	r1, r5
 80029ac:	d008      	beq.n	80029c0 <EE_Init+0x204>
    addressvalue = (*(__IO uint16_t*)Address);
 80029ae:	880b      	ldrh	r3, [r1, #0]
    if (addressvalue != ERASED)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d0f9      	beq.n	80029a8 <EE_Init+0x1ec>
    flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error); 
 80029b4:	a901      	add	r1, sp, #4
 80029b6:	f7fe fa7f 	bl	8000eb8 <HAL_FLASHEx_Erase>
    if (flashstatus != HAL_OK)
 80029ba:	2800      	cmp	r0, #0
 80029bc:	d000      	beq.n	80029c0 <EE_Init+0x204>
 80029be:	e754      	b.n	800286a <EE_Init+0xae>
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 80029c0:	2200      	movs	r2, #0
 80029c2:	2300      	movs	r3, #0
 80029c4:	4926      	ldr	r1, [pc, #152]	; (8002a60 <EE_Init+0x2a4>)
 80029c6:	2001      	movs	r0, #1
 80029c8:	f7fe f93c 	bl	8000c44 <HAL_FLASH_Program>
  if (flashstatus != HAL_OK)
 80029cc:	2800      	cmp	r0, #0
 80029ce:	d100      	bne.n	80029d2 <EE_Init+0x216>
 80029d0:	e729      	b.n	8002826 <EE_Init+0x6a>
 80029d2:	e74a      	b.n	800286a <EE_Init+0xae>
  {
    /* Verify if address and address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
    {
      /* Set variable data */
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, Data);       
 80029d4:	2300      	movs	r3, #0
 80029d6:	0029      	movs	r1, r5
 80029d8:	2001      	movs	r0, #1
 80029da:	f7fe f933 	bl	8000c44 <HAL_FLASH_Program>
      /* If program operation was failed, a Flash error code is returned */
      if (flashstatus != HAL_OK)
 80029de:	2800      	cmp	r0, #0
 80029e0:	d000      	beq.n	80029e4 <EE_Init+0x228>
 80029e2:	e742      	b.n	800286a <EE_Init+0xae>
      {
        return flashstatus;
      }
      /* Set variable virtual address */
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, VirtAddress);       
 80029e4:	0022      	movs	r2, r4
 80029e6:	1ca9      	adds	r1, r5, #2
 80029e8:	2300      	movs	r3, #0
 80029ea:	2001      	movs	r0, #1
 80029ec:	f7fe f92a 	bl	8000c44 <HAL_FLASH_Program>
      /* Return program operation status */
      return flashstatus;
 80029f0:	b284      	uxth	r4, r0
              if (eepromstatus != HAL_OK)
 80029f2:	2c00      	cmp	r4, #0
 80029f4:	d000      	beq.n	80029f8 <EE_Init+0x23c>
 80029f6:	e716      	b.n	8002826 <EE_Init+0x6a>
 80029f8:	3601      	adds	r6, #1
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 80029fa:	2e03      	cmp	r6, #3
 80029fc:	d100      	bne.n	8002a00 <EE_Init+0x244>
 80029fe:	e709      	b.n	8002814 <EE_Init+0x58>
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 8002a00:	4b22      	ldr	r3, [pc, #136]	; (8002a8c <EE_Init+0x2d0>)
 8002a02:	0072      	lsls	r2, r6, #1
 8002a04:	881b      	ldrh	r3, [r3, #0]
 8002a06:	5abc      	ldrh	r4, [r7, r2]
 8002a08:	42a3      	cmp	r3, r4
 8002a0a:	d192      	bne.n	8002932 <EE_Init+0x176>
            x = varidx;
 8002a0c:	b233      	sxth	r3, r6
 8002a0e:	4698      	mov	r8, r3
 8002a10:	e78f      	b.n	8002932 <EE_Init+0x176>
            x = varidx;
 8002a12:	b233      	sxth	r3, r6
 8002a14:	4698      	mov	r8, r3
 8002a16:	e73d      	b.n	8002894 <EE_Init+0xd8>
      if (pagestatus0 == VALID_PAGE)
 8002a18:	4b1d      	ldr	r3, [pc, #116]	; (8002a90 <EE_Init+0x2d4>)
 8002a1a:	491e      	ldr	r1, [pc, #120]	; (8002a94 <EE_Init+0x2d8>)
 8002a1c:	001a      	movs	r2, r3
 8002a1e:	481e      	ldr	r0, [pc, #120]	; (8002a98 <EE_Init+0x2dc>)
 8002a20:	e749      	b.n	80028b6 <EE_Init+0xfa>
 8002a22:	4b1b      	ldr	r3, [pc, #108]	; (8002a90 <EE_Init+0x2d4>)
 8002a24:	491b      	ldr	r1, [pc, #108]	; (8002a94 <EE_Init+0x2d8>)
 8002a26:	001a      	movs	r2, r3
 8002a28:	481b      	ldr	r0, [pc, #108]	; (8002a98 <EE_Init+0x2dc>)
    addressvalue = (*(__IO uint16_t*)address);
 8002a2a:	881b      	ldrh	r3, [r3, #0]
    if (addressvalue == VirtAddress)
 8002a2c:	429c      	cmp	r4, r3
 8002a2e:	d104      	bne.n	8002a3a <EE_Init+0x27e>
 8002a30:	e061      	b.n	8002af6 <EE_Init+0x33a>
    addressvalue = (*(__IO uint16_t*)address);
 8002a32:	8819      	ldrh	r1, [r3, #0]
    if (addressvalue == VirtAddress)
 8002a34:	428c      	cmp	r4, r1
 8002a36:	d05d      	beq.n	8002af4 <EE_Init+0x338>
 8002a38:	001a      	movs	r2, r3
      address = address - 4;
 8002a3a:	1f13      	subs	r3, r2, #4
  while (address > (PageStartAddress + 2))
 8002a3c:	4298      	cmp	r0, r3
 8002a3e:	d3f8      	bcc.n	8002a32 <EE_Init+0x276>
 8002a40:	e7da      	b.n	80029f8 <EE_Init+0x23c>
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8002a42:	a805      	add	r0, sp, #20
  uint32_t page_error = 0;
 8002a44:	9501      	str	r5, [sp, #4]
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8002a46:	9505      	str	r5, [sp, #20]
  s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 8002a48:	6041      	str	r1, [r0, #4]
  s_eraseinit.NbPages     = 1;
 8002a4a:	6086      	str	r6, [r0, #8]
  while (Address <= PAGE0_END_ADDRESS)
 8002a4c:	4c08      	ldr	r4, [pc, #32]	; (8002a70 <EE_Init+0x2b4>)
 8002a4e:	e003      	b.n	8002a58 <EE_Init+0x29c>
    Address = Address + 4;
 8002a50:	3104      	adds	r1, #4
  while (Address <= PAGE0_END_ADDRESS)
 8002a52:	42a1      	cmp	r1, r4
 8002a54:	d100      	bne.n	8002a58 <EE_Init+0x29c>
 8002a56:	e6dd      	b.n	8002814 <EE_Init+0x58>
    addressvalue = (*(__IO uint16_t*)Address);
 8002a58:	880a      	ldrh	r2, [r1, #0]
    if (addressvalue != ERASED)
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d0f8      	beq.n	8002a50 <EE_Init+0x294>
 8002a5e:	e6d4      	b.n	800280a <EE_Init+0x4e>
 8002a60:	08007000 	.word	0x08007000
 8002a64:	08007800 	.word	0x08007800
 8002a68:	0000eeee 	.word	0x0000eeee
 8002a6c:	0000ffff 	.word	0x0000ffff
 8002a70:	08007400 	.word	0x08007400
 8002a74:	2000008c 	.word	0x2000008c
 8002a78:	20000004 	.word	0x20000004
 8002a7c:	08007806 	.word	0x08007806
 8002a80:	0800f3fe 	.word	0x0800f3fe
 8002a84:	0800f3fc 	.word	0x0800f3fc
 8002a88:	0800f002 	.word	0x0800f002
 8002a8c:	08007006 	.word	0x08007006
 8002a90:	080073fe 	.word	0x080073fe
 8002a94:	080073fc 	.word	0x080073fc
 8002a98:	08007002 	.word	0x08007002
 8002a9c:	1f91      	subs	r1, r2, #6
      *Data = (*(__IO uint16_t*)(address - 2));
 8002a9e:	464b      	mov	r3, r9
 8002aa0:	880a      	ldrh	r2, [r1, #0]
 8002aa2:	b292      	uxth	r2, r2
 8002aa4:	801a      	strh	r2, [r3, #0]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002aa6:	4d38      	ldr	r5, [pc, #224]	; (8002b88 <EE_Init+0x3cc>)
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002aa8:	4b38      	ldr	r3, [pc, #224]	; (8002b8c <EE_Init+0x3d0>)
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002aaa:	8828      	ldrh	r0, [r5, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002aac:	881b      	ldrh	r3, [r3, #0]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002aae:	b280      	uxth	r0, r0
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002ab0:	b29b      	uxth	r3, r3
      if (pagestatus1 == VALID_PAGE)
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d111      	bne.n	8002ada <EE_Init+0x31e>
        if (pagestatus0 == RECEIVE_DATA)
 8002ab6:	4b36      	ldr	r3, [pc, #216]	; (8002b90 <EE_Init+0x3d4>)
 8002ab8:	4298      	cmp	r0, r3
 8002aba:	d013      	beq.n	8002ae4 <EE_Init+0x328>
 8002abc:	4d35      	ldr	r5, [pc, #212]	; (8002b94 <EE_Init+0x3d8>)
 8002abe:	4936      	ldr	r1, [pc, #216]	; (8002b98 <EE_Init+0x3dc>)
 8002ac0:	002b      	movs	r3, r5
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	d103      	bne.n	8002ad0 <EE_Init+0x314>
 8002ac8:	e04a      	b.n	8002b60 <EE_Init+0x3a4>
 8002aca:	682b      	ldr	r3, [r5, #0]
 8002acc:	3301      	adds	r3, #1
 8002ace:	d047      	beq.n	8002b60 <EE_Init+0x3a4>
    }
    else
    {
      /* Next address location */
      address = address + 4;
 8002ad0:	3504      	adds	r5, #4
  while (address < pageendaddress)
 8002ad2:	42a9      	cmp	r1, r5
 8002ad4:	d8f9      	bhi.n	8002aca <EE_Init+0x30e>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8002ad6:	2480      	movs	r4, #128	; 0x80
 8002ad8:	e6a5      	b.n	8002826 <EE_Init+0x6a>
      else if (pagestatus0 == VALID_PAGE)
 8002ada:	2800      	cmp	r0, #0
 8002adc:	d105      	bne.n	8002aea <EE_Init+0x32e>
        if (pagestatus1 == RECEIVE_DATA)
 8002ade:	492c      	ldr	r1, [pc, #176]	; (8002b90 <EE_Init+0x3d4>)
 8002ae0:	428b      	cmp	r3, r1
 8002ae2:	d0eb      	beq.n	8002abc <EE_Init+0x300>
 8002ae4:	492d      	ldr	r1, [pc, #180]	; (8002b9c <EE_Init+0x3e0>)
 8002ae6:	002b      	movs	r3, r5
 8002ae8:	e7eb      	b.n	8002ac2 <EE_Init+0x306>
    return  NO_VALID_PAGE;
 8002aea:	24ab      	movs	r4, #171	; 0xab
 8002aec:	e69b      	b.n	8002826 <EE_Init+0x6a>
 8002aee:	4b2c      	ldr	r3, [pc, #176]	; (8002ba0 <EE_Init+0x3e4>)
 8002af0:	881a      	ldrh	r2, [r3, #0]
 8002af2:	e7d8      	b.n	8002aa6 <EE_Init+0x2ea>
 8002af4:	1f91      	subs	r1, r2, #6
      *Data = (*(__IO uint16_t*)(address - 2));
 8002af6:	464b      	mov	r3, r9
 8002af8:	880a      	ldrh	r2, [r1, #0]
 8002afa:	b292      	uxth	r2, r2
 8002afc:	801a      	strh	r2, [r3, #0]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002afe:	4d22      	ldr	r5, [pc, #136]	; (8002b88 <EE_Init+0x3cc>)
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002b00:	4b22      	ldr	r3, [pc, #136]	; (8002b8c <EE_Init+0x3d0>)
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002b02:	8828      	ldrh	r0, [r5, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002b04:	881b      	ldrh	r3, [r3, #0]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002b06:	b280      	uxth	r0, r0
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002b08:	b29b      	uxth	r3, r3
      if (pagestatus1 == VALID_PAGE)
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d013      	beq.n	8002b36 <EE_Init+0x37a>
      else if (pagestatus0 == VALID_PAGE)
 8002b0e:	2800      	cmp	r0, #0
 8002b10:	d1eb      	bne.n	8002aea <EE_Init+0x32e>
        if (pagestatus1 == RECEIVE_DATA)
 8002b12:	491f      	ldr	r1, [pc, #124]	; (8002b90 <EE_Init+0x3d4>)
 8002b14:	428b      	cmp	r3, r1
 8002b16:	d011      	beq.n	8002b3c <EE_Init+0x380>
 8002b18:	002b      	movs	r3, r5
 8002b1a:	4920      	ldr	r1, [pc, #128]	; (8002b9c <EE_Init+0x3e0>)
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	3301      	adds	r3, #1
 8002b20:	d104      	bne.n	8002b2c <EE_Init+0x370>
 8002b22:	e757      	b.n	80029d4 <EE_Init+0x218>
 8002b24:	682b      	ldr	r3, [r5, #0]
 8002b26:	3301      	adds	r3, #1
 8002b28:	d100      	bne.n	8002b2c <EE_Init+0x370>
 8002b2a:	e753      	b.n	80029d4 <EE_Init+0x218>
      address = address + 4;
 8002b2c:	3504      	adds	r5, #4
  while (address < pageendaddress)
 8002b2e:	42a9      	cmp	r1, r5
 8002b30:	d8f8      	bhi.n	8002b24 <EE_Init+0x368>
  return PAGE_FULL;
 8002b32:	2480      	movs	r4, #128	; 0x80
 8002b34:	e677      	b.n	8002826 <EE_Init+0x6a>
        if (pagestatus0 == RECEIVE_DATA)
 8002b36:	4b16      	ldr	r3, [pc, #88]	; (8002b90 <EE_Init+0x3d4>)
 8002b38:	4298      	cmp	r0, r3
 8002b3a:	d0ed      	beq.n	8002b18 <EE_Init+0x35c>
 8002b3c:	4d15      	ldr	r5, [pc, #84]	; (8002b94 <EE_Init+0x3d8>)
 8002b3e:	4916      	ldr	r1, [pc, #88]	; (8002b98 <EE_Init+0x3dc>)
 8002b40:	002b      	movs	r3, r5
 8002b42:	e7eb      	b.n	8002b1c <EE_Init+0x360>
 8002b44:	4b16      	ldr	r3, [pc, #88]	; (8002ba0 <EE_Init+0x3e4>)
 8002b46:	881a      	ldrh	r2, [r3, #0]
 8002b48:	e7d9      	b.n	8002afe <EE_Init+0x342>
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	2001      	movs	r0, #1
        s_eraseinit.PageAddress = PAGE1_BASE_ADDRESS;
 8002b50:	9703      	str	r7, [sp, #12]
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8002b52:	f7fe f877 	bl	8000c44 <HAL_FLASH_Program>
        if (flashstatus != HAL_OK)
 8002b56:	2800      	cmp	r0, #0
 8002b58:	d100      	bne.n	8002b5c <EE_Init+0x3a0>
 8002b5a:	e663      	b.n	8002824 <EE_Init+0x68>
        return flashstatus;
 8002b5c:	b284      	uxth	r4, r0
 8002b5e:	e662      	b.n	8002826 <EE_Init+0x6a>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, Data);       
 8002b60:	2300      	movs	r3, #0
 8002b62:	0029      	movs	r1, r5
 8002b64:	2001      	movs	r0, #1
 8002b66:	f7fe f86d 	bl	8000c44 <HAL_FLASH_Program>
      if (flashstatus != HAL_OK)
 8002b6a:	2800      	cmp	r0, #0
 8002b6c:	d000      	beq.n	8002b70 <EE_Init+0x3b4>
 8002b6e:	e67c      	b.n	800286a <EE_Init+0xae>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, VirtAddress);       
 8002b70:	0022      	movs	r2, r4
 8002b72:	1ca9      	adds	r1, r5, #2
 8002b74:	2300      	movs	r3, #0
 8002b76:	2001      	movs	r0, #1
 8002b78:	f7fe f864 	bl	8000c44 <HAL_FLASH_Program>
      return flashstatus;
 8002b7c:	b284      	uxth	r4, r0
              if (eepromstatus != HAL_OK)
 8002b7e:	2c00      	cmp	r4, #0
 8002b80:	d100      	bne.n	8002b84 <EE_Init+0x3c8>
 8002b82:	e6a4      	b.n	80028ce <EE_Init+0x112>
 8002b84:	e64f      	b.n	8002826 <EE_Init+0x6a>
 8002b86:	46c0      	nop			; (mov r8, r8)
 8002b88:	08007000 	.word	0x08007000
 8002b8c:	08007800 	.word	0x08007800
 8002b90:	0000eeee 	.word	0x0000eeee
 8002b94:	0800f000 	.word	0x0800f000
 8002b98:	0800f3ff 	.word	0x0800f3ff
 8002b9c:	080073ff 	.word	0x080073ff
 8002ba0:	2000008c 	.word	0x2000008c

08002ba4 <EE_ReadVariable>:
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002ba4:	4b13      	ldr	r3, [pc, #76]	; (8002bf4 <EE_ReadVariable+0x50>)
{
 8002ba6:	b530      	push	{r4, r5, lr}
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002ba8:	881a      	ldrh	r2, [r3, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002baa:	4b13      	ldr	r3, [pc, #76]	; (8002bf8 <EE_ReadVariable+0x54>)
 8002bac:	881b      	ldrh	r3, [r3, #0]
 8002bae:	b29b      	uxth	r3, r3
      if (pagestatus0 == VALID_PAGE)
 8002bb0:	2a00      	cmp	r2, #0
 8002bb2:	d006      	beq.n	8002bc2 <EE_ReadVariable+0x1e>
      else if (pagestatus1 == VALID_PAGE)
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d115      	bne.n	8002be4 <EE_ReadVariable+0x40>
 8002bb8:	4a10      	ldr	r2, [pc, #64]	; (8002bfc <EE_ReadVariable+0x58>)
 8002bba:	4c11      	ldr	r4, [pc, #68]	; (8002c00 <EE_ReadVariable+0x5c>)
 8002bbc:	4d11      	ldr	r5, [pc, #68]	; (8002c04 <EE_ReadVariable+0x60>)
 8002bbe:	0013      	movs	r3, r2
 8002bc0:	e003      	b.n	8002bca <EE_ReadVariable+0x26>
      if (pagestatus0 == VALID_PAGE)
 8002bc2:	4a11      	ldr	r2, [pc, #68]	; (8002c08 <EE_ReadVariable+0x64>)
 8002bc4:	4c11      	ldr	r4, [pc, #68]	; (8002c0c <EE_ReadVariable+0x68>)
 8002bc6:	0013      	movs	r3, r2
 8002bc8:	4d11      	ldr	r5, [pc, #68]	; (8002c10 <EE_ReadVariable+0x6c>)
    addressvalue = (*(__IO uint16_t*)address);
 8002bca:	881b      	ldrh	r3, [r3, #0]
    if (addressvalue == VirtAddress)
 8002bcc:	4298      	cmp	r0, r3
 8002bce:	d104      	bne.n	8002bda <EE_ReadVariable+0x36>
 8002bd0:	e00b      	b.n	8002bea <EE_ReadVariable+0x46>
    addressvalue = (*(__IO uint16_t*)address);
 8002bd2:	881c      	ldrh	r4, [r3, #0]
    if (addressvalue == VirtAddress)
 8002bd4:	4284      	cmp	r4, r0
 8002bd6:	d007      	beq.n	8002be8 <EE_ReadVariable+0x44>
 8002bd8:	001a      	movs	r2, r3
      address = address - 4;
 8002bda:	1f13      	subs	r3, r2, #4
  while (address > (PageStartAddress + 2))
 8002bdc:	429d      	cmp	r5, r3
 8002bde:	d3f8      	bcc.n	8002bd2 <EE_ReadVariable+0x2e>
  uint16_t addressvalue = 0x5555, readstatus = 1;
 8002be0:	2001      	movs	r0, #1
}
 8002be2:	bd30      	pop	{r4, r5, pc}
    return  NO_VALID_PAGE;
 8002be4:	20ab      	movs	r0, #171	; 0xab
 8002be6:	e7fc      	b.n	8002be2 <EE_ReadVariable+0x3e>
 8002be8:	1f94      	subs	r4, r2, #6
      *Data = (*(__IO uint16_t*)(address - 2));
 8002bea:	8823      	ldrh	r3, [r4, #0]
      readstatus = 0;
 8002bec:	2000      	movs	r0, #0
      *Data = (*(__IO uint16_t*)(address - 2));
 8002bee:	800b      	strh	r3, [r1, #0]
      break;
 8002bf0:	e7f7      	b.n	8002be2 <EE_ReadVariable+0x3e>
 8002bf2:	46c0      	nop			; (mov r8, r8)
 8002bf4:	08007000 	.word	0x08007000
 8002bf8:	08007800 	.word	0x08007800
 8002bfc:	0800f3fe 	.word	0x0800f3fe
 8002c00:	0800f3fc 	.word	0x0800f3fc
 8002c04:	0800f002 	.word	0x0800f002
 8002c08:	080073fe 	.word	0x080073fe
 8002c0c:	080073fc 	.word	0x080073fc
 8002c10:	08007002 	.word	0x08007002

08002c14 <EE_WriteVariable>:
{
 8002c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c16:	464e      	mov	r6, r9
 8002c18:	4645      	mov	r5, r8
 8002c1a:	46de      	mov	lr, fp
 8002c1c:	4657      	mov	r7, sl
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002c1e:	4b86      	ldr	r3, [pc, #536]	; (8002e38 <EE_WriteVariable+0x224>)
{
 8002c20:	b5e0      	push	{r5, r6, r7, lr}
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002c22:	4a86      	ldr	r2, [pc, #536]	; (8002e3c <EE_WriteVariable+0x228>)
{
 8002c24:	000d      	movs	r5, r1
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002c26:	8819      	ldrh	r1, [r3, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002c28:	8812      	ldrh	r2, [r2, #0]
{
 8002c2a:	b085      	sub	sp, #20
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002c2c:	b292      	uxth	r2, r2
{
 8002c2e:	0006      	movs	r6, r0
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002c30:	b289      	uxth	r1, r1
      if (pagestatus1 == VALID_PAGE)
 8002c32:	2a00      	cmp	r2, #0
 8002c34:	d129      	bne.n	8002c8a <EE_WriteVariable+0x76>
        if (pagestatus0 == RECEIVE_DATA)
 8002c36:	4a82      	ldr	r2, [pc, #520]	; (8002e40 <EE_WriteVariable+0x22c>)
 8002c38:	4291      	cmp	r1, r2
 8002c3a:	d02c      	beq.n	8002c96 <EE_WriteVariable+0x82>
 8002c3c:	4b81      	ldr	r3, [pc, #516]	; (8002e44 <EE_WriteVariable+0x230>)
 8002c3e:	4a82      	ldr	r2, [pc, #520]	; (8002e48 <EE_WriteVariable+0x234>)
 8002c40:	001c      	movs	r4, r3
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	3301      	adds	r3, #1
 8002c46:	d103      	bne.n	8002c50 <EE_WriteVariable+0x3c>
 8002c48:	e028      	b.n	8002c9c <EE_WriteVariable+0x88>
 8002c4a:	6823      	ldr	r3, [r4, #0]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	d025      	beq.n	8002c9c <EE_WriteVariable+0x88>
      address = address + 4;
 8002c50:	3404      	adds	r4, #4
  while (address < pageendaddress)
 8002c52:	42a2      	cmp	r2, r4
 8002c54:	d8f9      	bhi.n	8002c4a <EE_WriteVariable+0x36>
  HAL_StatusTypeDef flashstatus = HAL_OK;
  uint32_t newpageaddress = EEPROM_START_ADDRESS;
  uint32_t oldpageid = 0;
  uint16_t validpage = PAGE0, varidx = 0;
  uint16_t eepromstatus = 0, readstatus = 0;
  uint32_t page_error = 0;
 8002c56:	2300      	movs	r3, #0
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002c58:	4a77      	ldr	r2, [pc, #476]	; (8002e38 <EE_WriteVariable+0x224>)
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002c5a:	4c78      	ldr	r4, [pc, #480]	; (8002e3c <EE_WriteVariable+0x228>)
  uint32_t page_error = 0;
 8002c5c:	9300      	str	r3, [sp, #0]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002c5e:	8811      	ldrh	r1, [r2, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002c60:	8823      	ldrh	r3, [r4, #0]
 8002c62:	b29b      	uxth	r3, r3
      if (pagestatus0 == VALID_PAGE)
 8002c64:	2900      	cmp	r1, #0
 8002c66:	d125      	bne.n	8002cb4 <EE_WriteVariable+0xa0>
  {
    /* New page address  where variable will be moved to */
    newpageaddress = PAGE1_BASE_ADDRESS;

    /* Old page ID where variable will be taken from */
    oldpageid = PAGE0_BASE_ADDRESS;
 8002c68:	4690      	mov	r8, r2
  {
    return NO_VALID_PAGE;       /* No valid Page */
  }

  /* Set the new Page status to RECEIVE_DATA status */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, newpageaddress, RECEIVE_DATA);  
 8002c6a:	4a75      	ldr	r2, [pc, #468]	; (8002e40 <EE_WriteVariable+0x22c>)
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	0021      	movs	r1, r4
 8002c70:	2001      	movs	r0, #1
 8002c72:	f7fd ffe7 	bl	8000c44 <HAL_FLASH_Program>
  /* If program operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 8002c76:	2800      	cmp	r0, #0
 8002c78:	d02a      	beq.n	8002cd0 <EE_WriteVariable+0xbc>
  /* Erase the old Page: Set old Page status to ERASED status */
  flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);  
  /* If erase operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
  {
    return flashstatus;
 8002c7a:	b280      	uxth	r0, r0
}
 8002c7c:	b005      	add	sp, #20
 8002c7e:	bc3c      	pop	{r2, r3, r4, r5}
 8002c80:	4690      	mov	r8, r2
 8002c82:	4699      	mov	r9, r3
 8002c84:	46a2      	mov	sl, r4
 8002c86:	46ab      	mov	fp, r5
 8002c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return  NO_VALID_PAGE;
 8002c8a:	20ab      	movs	r0, #171	; 0xab
      else if (pagestatus0 == VALID_PAGE)
 8002c8c:	2900      	cmp	r1, #0
 8002c8e:	d1f5      	bne.n	8002c7c <EE_WriteVariable+0x68>
        if (pagestatus1 == RECEIVE_DATA)
 8002c90:	496b      	ldr	r1, [pc, #428]	; (8002e40 <EE_WriteVariable+0x22c>)
 8002c92:	428a      	cmp	r2, r1
 8002c94:	d0d2      	beq.n	8002c3c <EE_WriteVariable+0x28>
 8002c96:	001c      	movs	r4, r3
 8002c98:	4a6c      	ldr	r2, [pc, #432]	; (8002e4c <EE_WriteVariable+0x238>)
 8002c9a:	e7d2      	b.n	8002c42 <EE_WriteVariable+0x2e>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, Data);       
 8002c9c:	002a      	movs	r2, r5
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	0021      	movs	r1, r4
 8002ca2:	2001      	movs	r0, #1
 8002ca4:	f7fd ffce 	bl	8000c44 <HAL_FLASH_Program>
      if (flashstatus != HAL_OK)
 8002ca8:	2800      	cmp	r0, #0
 8002caa:	d008      	beq.n	8002cbe <EE_WriteVariable+0xaa>
      return flashstatus;
 8002cac:	b280      	uxth	r0, r0
  if (Status == PAGE_FULL)
 8002cae:	2880      	cmp	r0, #128	; 0x80
 8002cb0:	d1e4      	bne.n	8002c7c <EE_WriteVariable+0x68>
 8002cb2:	e7d0      	b.n	8002c56 <EE_WriteVariable+0x42>
      else if (pagestatus1 == VALID_PAGE)
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d109      	bne.n	8002ccc <EE_WriteVariable+0xb8>
    oldpageid = PAGE1_BASE_ADDRESS;
 8002cb8:	46a0      	mov	r8, r4
    newpageaddress = PAGE0_BASE_ADDRESS;
 8002cba:	0014      	movs	r4, r2
 8002cbc:	e7d5      	b.n	8002c6a <EE_WriteVariable+0x56>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, VirtAddress);       
 8002cbe:	1ca1      	adds	r1, r4, #2
 8002cc0:	0032      	movs	r2, r6
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	2001      	movs	r0, #1
 8002cc6:	f7fd ffbd 	bl	8000c44 <HAL_FLASH_Program>
 8002cca:	e7ef      	b.n	8002cac <EE_WriteVariable+0x98>
    return NO_VALID_PAGE;       /* No valid Page */
 8002ccc:	20ab      	movs	r0, #171	; 0xab
 8002cce:	e7d5      	b.n	8002c7c <EE_WriteVariable+0x68>
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002cd0:	4b59      	ldr	r3, [pc, #356]	; (8002e38 <EE_WriteVariable+0x224>)
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002cd2:	4a5a      	ldr	r2, [pc, #360]	; (8002e3c <EE_WriteVariable+0x228>)
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002cd4:	8819      	ldrh	r1, [r3, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002cd6:	8812      	ldrh	r2, [r2, #0]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002cd8:	b289      	uxth	r1, r1
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002cda:	b292      	uxth	r2, r2
      if (pagestatus1 == VALID_PAGE)
 8002cdc:	2a00      	cmp	r2, #0
 8002cde:	d111      	bne.n	8002d04 <EE_WriteVariable+0xf0>
        if (pagestatus0 == RECEIVE_DATA)
 8002ce0:	4a57      	ldr	r2, [pc, #348]	; (8002e40 <EE_WriteVariable+0x22c>)
 8002ce2:	4291      	cmp	r1, r2
 8002ce4:	d013      	beq.n	8002d0e <EE_WriteVariable+0xfa>
 8002ce6:	4b57      	ldr	r3, [pc, #348]	; (8002e44 <EE_WriteVariable+0x230>)
 8002ce8:	4a57      	ldr	r2, [pc, #348]	; (8002e48 <EE_WriteVariable+0x234>)
 8002cea:	001f      	movs	r7, r3
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	d103      	bne.n	8002cfa <EE_WriteVariable+0xe6>
 8002cf2:	e00f      	b.n	8002d14 <EE_WriteVariable+0x100>
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	d00c      	beq.n	8002d14 <EE_WriteVariable+0x100>
      address = address + 4;
 8002cfa:	3704      	adds	r7, #4
  while (address < pageendaddress)
 8002cfc:	4297      	cmp	r7, r2
 8002cfe:	d3f9      	bcc.n	8002cf4 <EE_WriteVariable+0xe0>
  return PAGE_FULL;
 8002d00:	2080      	movs	r0, #128	; 0x80
 8002d02:	e7bb      	b.n	8002c7c <EE_WriteVariable+0x68>
      else if (pagestatus0 == VALID_PAGE)
 8002d04:	2900      	cmp	r1, #0
 8002d06:	d1e1      	bne.n	8002ccc <EE_WriteVariable+0xb8>
        if (pagestatus1 == RECEIVE_DATA)
 8002d08:	494d      	ldr	r1, [pc, #308]	; (8002e40 <EE_WriteVariable+0x22c>)
 8002d0a:	428a      	cmp	r2, r1
 8002d0c:	d0eb      	beq.n	8002ce6 <EE_WriteVariable+0xd2>
 8002d0e:	4a4f      	ldr	r2, [pc, #316]	; (8002e4c <EE_WriteVariable+0x238>)
 8002d10:	001f      	movs	r7, r3
 8002d12:	e7eb      	b.n	8002cec <EE_WriteVariable+0xd8>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, Data);       
 8002d14:	002a      	movs	r2, r5
 8002d16:	2300      	movs	r3, #0
 8002d18:	0039      	movs	r1, r7
 8002d1a:	2001      	movs	r0, #1
 8002d1c:	f7fd ff92 	bl	8000c44 <HAL_FLASH_Program>
      if (flashstatus != HAL_OK)
 8002d20:	2800      	cmp	r0, #0
 8002d22:	d1aa      	bne.n	8002c7a <EE_WriteVariable+0x66>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, VirtAddress);       
 8002d24:	1cb9      	adds	r1, r7, #2
 8002d26:	0032      	movs	r2, r6
 8002d28:	2300      	movs	r3, #0
 8002d2a:	2001      	movs	r0, #1
 8002d2c:	f7fd ff8a 	bl	8000c44 <HAL_FLASH_Program>
      return flashstatus;
 8002d30:	b280      	uxth	r0, r0
  if (eepromstatus != HAL_OK)
 8002d32:	2800      	cmp	r0, #0
 8002d34:	d1a2      	bne.n	8002c7c <EE_WriteVariable+0x68>
 8002d36:	4b46      	ldr	r3, [pc, #280]	; (8002e50 <EE_WriteVariable+0x23c>)
 8002d38:	2700      	movs	r7, #0
 8002d3a:	4699      	mov	r9, r3
      *Data = (*(__IO uint16_t*)(address - 2));
 8002d3c:	4b45      	ldr	r3, [pc, #276]	; (8002e54 <EE_WriteVariable+0x240>)
 8002d3e:	469a      	mov	sl, r3
    if (VirtAddVarTab[varidx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8002d40:	464b      	mov	r3, r9
 8002d42:	5bdb      	ldrh	r3, [r3, r7]
 8002d44:	469b      	mov	fp, r3
 8002d46:	429e      	cmp	r6, r3
 8002d48:	d017      	beq.n	8002d7a <EE_WriteVariable+0x166>
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002d4a:	4b3b      	ldr	r3, [pc, #236]	; (8002e38 <EE_WriteVariable+0x224>)
 8002d4c:	881a      	ldrh	r2, [r3, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002d4e:	4b3b      	ldr	r3, [pc, #236]	; (8002e3c <EE_WriteVariable+0x228>)
 8002d50:	881b      	ldrh	r3, [r3, #0]
 8002d52:	b29b      	uxth	r3, r3
      if (pagestatus0 == VALID_PAGE)
 8002d54:	2a00      	cmp	r2, #0
 8002d56:	d02d      	beq.n	8002db4 <EE_WriteVariable+0x1a0>
      else if (pagestatus1 == VALID_PAGE)
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d14f      	bne.n	8002dfc <EE_WriteVariable+0x1e8>
 8002d5c:	4a3e      	ldr	r2, [pc, #248]	; (8002e58 <EE_WriteVariable+0x244>)
 8002d5e:	493f      	ldr	r1, [pc, #252]	; (8002e5c <EE_WriteVariable+0x248>)
 8002d60:	0013      	movs	r3, r2
 8002d62:	483f      	ldr	r0, [pc, #252]	; (8002e60 <EE_WriteVariable+0x24c>)
    addressvalue = (*(__IO uint16_t*)address);
 8002d64:	881b      	ldrh	r3, [r3, #0]
    if (addressvalue == VirtAddress)
 8002d66:	459b      	cmp	fp, r3
 8002d68:	d104      	bne.n	8002d74 <EE_WriteVariable+0x160>
 8002d6a:	e029      	b.n	8002dc0 <EE_WriteVariable+0x1ac>
    addressvalue = (*(__IO uint16_t*)address);
 8002d6c:	8819      	ldrh	r1, [r3, #0]
    if (addressvalue == VirtAddress)
 8002d6e:	458b      	cmp	fp, r1
 8002d70:	d025      	beq.n	8002dbe <EE_WriteVariable+0x1aa>
 8002d72:	001a      	movs	r2, r3
      address = address - 4;
 8002d74:	1f13      	subs	r3, r2, #4
  while (address > (PageStartAddress + 2))
 8002d76:	4298      	cmp	r0, r3
 8002d78:	d3f8      	bcc.n	8002d6c <EE_WriteVariable+0x158>
 8002d7a:	3702      	adds	r7, #2
  for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8002d7c:	2f06      	cmp	r7, #6
 8002d7e:	d1df      	bne.n	8002d40 <EE_WriteVariable+0x12c>
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8002d80:	2300      	movs	r3, #0
 8002d82:	9301      	str	r3, [sp, #4]
  s_eraseinit.PageAddress = oldpageid;
 8002d84:	4643      	mov	r3, r8
 8002d86:	9302      	str	r3, [sp, #8]
  s_eraseinit.NbPages     = 1;
 8002d88:	2301      	movs	r3, #1
  flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);  
 8002d8a:	4669      	mov	r1, sp
 8002d8c:	a801      	add	r0, sp, #4
  s_eraseinit.NbPages     = 1;
 8002d8e:	9303      	str	r3, [sp, #12]
  flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);  
 8002d90:	f7fe f892 	bl	8000eb8 <HAL_FLASHEx_Erase>
  if (flashstatus != HAL_OK)
 8002d94:	2800      	cmp	r0, #0
 8002d96:	d000      	beq.n	8002d9a <EE_WriteVariable+0x186>
 8002d98:	e76f      	b.n	8002c7a <EE_WriteVariable+0x66>
  }

  /* Set new Page status to VALID_PAGE status */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, newpageaddress, VALID_PAGE);   
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	0021      	movs	r1, r4
 8002da0:	2001      	movs	r0, #1
 8002da2:	f7fd ff4f 	bl	8000c44 <HAL_FLASH_Program>
 8002da6:	0003      	movs	r3, r0
  }
  
  

  /* Return last operation flash status */
  return flashstatus;
 8002da8:	2000      	movs	r0, #0
  if (flashstatus != HAL_OK)
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d100      	bne.n	8002db0 <EE_WriteVariable+0x19c>
 8002dae:	e765      	b.n	8002c7c <EE_WriteVariable+0x68>
    return flashstatus;
 8002db0:	b298      	uxth	r0, r3
 8002db2:	e763      	b.n	8002c7c <EE_WriteVariable+0x68>
      if (pagestatus0 == VALID_PAGE)
 8002db4:	4a2b      	ldr	r2, [pc, #172]	; (8002e64 <EE_WriteVariable+0x250>)
 8002db6:	492c      	ldr	r1, [pc, #176]	; (8002e68 <EE_WriteVariable+0x254>)
 8002db8:	482c      	ldr	r0, [pc, #176]	; (8002e6c <EE_WriteVariable+0x258>)
 8002dba:	0013      	movs	r3, r2
 8002dbc:	e7d2      	b.n	8002d64 <EE_WriteVariable+0x150>
 8002dbe:	1f91      	subs	r1, r2, #6
      *Data = (*(__IO uint16_t*)(address - 2));
 8002dc0:	4653      	mov	r3, sl
 8002dc2:	880a      	ldrh	r2, [r1, #0]
 8002dc4:	b292      	uxth	r2, r2
 8002dc6:	801a      	strh	r2, [r3, #0]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002dc8:	4b1b      	ldr	r3, [pc, #108]	; (8002e38 <EE_WriteVariable+0x224>)
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002dca:	491c      	ldr	r1, [pc, #112]	; (8002e3c <EE_WriteVariable+0x228>)
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002dcc:	8818      	ldrh	r0, [r3, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002dce:	8809      	ldrh	r1, [r1, #0]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002dd0:	b280      	uxth	r0, r0
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002dd2:	b289      	uxth	r1, r1
      if (pagestatus1 == VALID_PAGE)
 8002dd4:	2900      	cmp	r1, #0
 8002dd6:	d114      	bne.n	8002e02 <EE_WriteVariable+0x1ee>
        if (pagestatus0 == RECEIVE_DATA)
 8002dd8:	4919      	ldr	r1, [pc, #100]	; (8002e40 <EE_WriteVariable+0x22c>)
 8002dda:	4288      	cmp	r0, r1
 8002ddc:	d017      	beq.n	8002e0e <EE_WriteVariable+0x1fa>
 8002dde:	4b19      	ldr	r3, [pc, #100]	; (8002e44 <EE_WriteVariable+0x230>)
 8002de0:	4919      	ldr	r1, [pc, #100]	; (8002e48 <EE_WriteVariable+0x234>)
 8002de2:	001d      	movs	r5, r3
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	3301      	adds	r3, #1
 8002de8:	d103      	bne.n	8002df2 <EE_WriteVariable+0x1de>
 8002dea:	e013      	b.n	8002e14 <EE_WriteVariable+0x200>
 8002dec:	682b      	ldr	r3, [r5, #0]
 8002dee:	3301      	adds	r3, #1
 8002df0:	d010      	beq.n	8002e14 <EE_WriteVariable+0x200>
      address = address + 4;
 8002df2:	3504      	adds	r5, #4
  while (address < pageendaddress)
 8002df4:	428d      	cmp	r5, r1
 8002df6:	d3f9      	bcc.n	8002dec <EE_WriteVariable+0x1d8>
  return PAGE_FULL;
 8002df8:	2080      	movs	r0, #128	; 0x80
 8002dfa:	e73f      	b.n	8002c7c <EE_WriteVariable+0x68>
 8002dfc:	4b15      	ldr	r3, [pc, #84]	; (8002e54 <EE_WriteVariable+0x240>)
 8002dfe:	881a      	ldrh	r2, [r3, #0]
 8002e00:	e7e2      	b.n	8002dc8 <EE_WriteVariable+0x1b4>
      else if (pagestatus0 == VALID_PAGE)
 8002e02:	2800      	cmp	r0, #0
 8002e04:	d000      	beq.n	8002e08 <EE_WriteVariable+0x1f4>
 8002e06:	e761      	b.n	8002ccc <EE_WriteVariable+0xb8>
        if (pagestatus1 == RECEIVE_DATA)
 8002e08:	480d      	ldr	r0, [pc, #52]	; (8002e40 <EE_WriteVariable+0x22c>)
 8002e0a:	4281      	cmp	r1, r0
 8002e0c:	d0e7      	beq.n	8002dde <EE_WriteVariable+0x1ca>
 8002e0e:	001d      	movs	r5, r3
 8002e10:	490e      	ldr	r1, [pc, #56]	; (8002e4c <EE_WriteVariable+0x238>)
 8002e12:	e7e7      	b.n	8002de4 <EE_WriteVariable+0x1d0>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, Data);       
 8002e14:	2300      	movs	r3, #0
 8002e16:	0029      	movs	r1, r5
 8002e18:	2001      	movs	r0, #1
 8002e1a:	f7fd ff13 	bl	8000c44 <HAL_FLASH_Program>
      if (flashstatus != HAL_OK)
 8002e1e:	2800      	cmp	r0, #0
 8002e20:	d000      	beq.n	8002e24 <EE_WriteVariable+0x210>
 8002e22:	e72a      	b.n	8002c7a <EE_WriteVariable+0x66>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, VirtAddress);       
 8002e24:	1ca9      	adds	r1, r5, #2
 8002e26:	465a      	mov	r2, fp
 8002e28:	2300      	movs	r3, #0
 8002e2a:	2001      	movs	r0, #1
 8002e2c:	f7fd ff0a 	bl	8000c44 <HAL_FLASH_Program>
      return flashstatus;
 8002e30:	b280      	uxth	r0, r0
        if (eepromstatus != HAL_OK)
 8002e32:	2800      	cmp	r0, #0
 8002e34:	d0a1      	beq.n	8002d7a <EE_WriteVariable+0x166>
 8002e36:	e721      	b.n	8002c7c <EE_WriteVariable+0x68>
 8002e38:	08007000 	.word	0x08007000
 8002e3c:	08007800 	.word	0x08007800
 8002e40:	0000eeee 	.word	0x0000eeee
 8002e44:	0800f000 	.word	0x0800f000
 8002e48:	0800f3ff 	.word	0x0800f3ff
 8002e4c:	080073ff 	.word	0x080073ff
 8002e50:	20000004 	.word	0x20000004
 8002e54:	2000008c 	.word	0x2000008c
 8002e58:	0800f3fe 	.word	0x0800f3fe
 8002e5c:	0800f3fc 	.word	0x0800f3fc
 8002e60:	0800f002 	.word	0x0800f002
 8002e64:	080073fe 	.word	0x080073fe
 8002e68:	080073fc 	.word	0x080073fc
 8002e6c:	08007002 	.word	0x08007002

08002e70 <storeEEpromConfig>:
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;

}


void storeEEpromConfig(){
 8002e70:	b510      	push	{r4, lr}

	 EE_WriteVariable(VirtAddVarTab[EEvehiclemode], vehicle_mode);
 8002e72:	4b08      	ldr	r3, [pc, #32]	; (8002e94 <storeEEpromConfig+0x24>)
 8002e74:	4c08      	ldr	r4, [pc, #32]	; (8002e98 <storeEEpromConfig+0x28>)
 8002e76:	7819      	ldrb	r1, [r3, #0]
 8002e78:	8820      	ldrh	r0, [r4, #0]
 8002e7a:	f7ff fecb 	bl	8002c14 <EE_WriteVariable>
	 EE_WriteVariable(VirtAddVarTab[EEdirection], dir_reversed);
 8002e7e:	4b07      	ldr	r3, [pc, #28]	; (8002e9c <storeEEpromConfig+0x2c>)
 8002e80:	8860      	ldrh	r0, [r4, #2]
 8002e82:	8819      	ldrh	r1, [r3, #0]
 8002e84:	f7ff fec6 	bl	8002c14 <EE_WriteVariable>
	 EE_WriteVariable(VirtAddVarTab[EEbidirection], bi_direction);
 8002e88:	4b05      	ldr	r3, [pc, #20]	; (8002ea0 <storeEEpromConfig+0x30>)
 8002e8a:	88a0      	ldrh	r0, [r4, #4]
 8002e8c:	8819      	ldrh	r1, [r3, #0]
 8002e8e:	f7ff fec1 	bl	8002c14 <EE_WriteVariable>
	// EE_WriteVariable(VirtAddVarTab[EEbrake_on_stop], EEbrake_on_stop);

	// playEEpromSavedTune();
}
 8002e92:	bd10      	pop	{r4, pc}
 8002e94:	2000005c 	.word	0x2000005c
 8002e98:	20000004 	.word	0x20000004
 8002e9c:	200000c8 	.word	0x200000c8
 8002ea0:	20000010 	.word	0x20000010

08002ea4 <loadEEpromConfig>:


void loadEEpromConfig(){
 8002ea4:	b570      	push	{r4, r5, r6, lr}
	 EE_ReadVariable(VirtAddVarTab[EEvehiclemode], &VarDataTab[EEvehiclemode]);
 8002ea6:	4c15      	ldr	r4, [pc, #84]	; (8002efc <loadEEpromConfig+0x58>)
 8002ea8:	4d15      	ldr	r5, [pc, #84]	; (8002f00 <loadEEpromConfig+0x5c>)
 8002eaa:	0021      	movs	r1, r4
 8002eac:	8828      	ldrh	r0, [r5, #0]
 8002eae:	f7ff fe79 	bl	8002ba4 <EE_ReadVariable>
	 EE_ReadVariable(VirtAddVarTab[EEdirection], &VarDataTab[EEdirection]);
 8002eb2:	1ca1      	adds	r1, r4, #2
 8002eb4:	8868      	ldrh	r0, [r5, #2]
 8002eb6:	f7ff fe75 	bl	8002ba4 <EE_ReadVariable>
	 EE_ReadVariable(VirtAddVarTab[EEbidirection], &VarDataTab[EEbidirection]);
 8002eba:	1d21      	adds	r1, r4, #4
 8002ebc:	88a8      	ldrh	r0, [r5, #4]
 8002ebe:	f7ff fe71 	bl	8002ba4 <EE_ReadVariable>
//	 EE_ReadVariable(VirtAddVarTab[EEbrake_on_stop], &VarDataTab[EEbrake_on_stop]);

	 if (VarDataTab[EEvehiclemode] == 0){             // nothing in the eeprom
 8002ec2:	8823      	ldrh	r3, [r4, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d008      	beq.n	8002eda <loadEEpromConfig+0x36>
     storeEEpromConfig();            // store default values
	 }else{
	 vehicle_mode = VarDataTab[EEvehiclemode];
 8002ec8:	4a0e      	ldr	r2, [pc, #56]	; (8002f04 <loadEEpromConfig+0x60>)
 8002eca:	7013      	strb	r3, [r2, #0]
	 dir_reversed = VarDataTab[EEdirection];
 8002ecc:	8862      	ldrh	r2, [r4, #2]
 8002ece:	4b0e      	ldr	r3, [pc, #56]	; (8002f08 <loadEEpromConfig+0x64>)
 8002ed0:	601a      	str	r2, [r3, #0]
	 bi_direction = VarDataTab[EEbidirection];
 8002ed2:	88a2      	ldrh	r2, [r4, #4]
 8002ed4:	4b0d      	ldr	r3, [pc, #52]	; (8002f0c <loadEEpromConfig+0x68>)
 8002ed6:	601a      	str	r2, [r3, #0]
//	 brake = VarDataTab[EEbrake_on_stop];
	 }
}
 8002ed8:	bd70      	pop	{r4, r5, r6, pc}
	 EE_WriteVariable(VirtAddVarTab[EEvehiclemode], vehicle_mode);
 8002eda:	4b0a      	ldr	r3, [pc, #40]	; (8002f04 <loadEEpromConfig+0x60>)
 8002edc:	8828      	ldrh	r0, [r5, #0]
 8002ede:	7819      	ldrb	r1, [r3, #0]
 8002ee0:	f7ff fe98 	bl	8002c14 <EE_WriteVariable>
	 EE_WriteVariable(VirtAddVarTab[EEdirection], dir_reversed);
 8002ee4:	4b08      	ldr	r3, [pc, #32]	; (8002f08 <loadEEpromConfig+0x64>)
 8002ee6:	8868      	ldrh	r0, [r5, #2]
 8002ee8:	8819      	ldrh	r1, [r3, #0]
 8002eea:	f7ff fe93 	bl	8002c14 <EE_WriteVariable>
	 EE_WriteVariable(VirtAddVarTab[EEbidirection], bi_direction);
 8002eee:	4b07      	ldr	r3, [pc, #28]	; (8002f0c <loadEEpromConfig+0x68>)
 8002ef0:	88a8      	ldrh	r0, [r5, #4]
 8002ef2:	8819      	ldrh	r1, [r3, #0]
 8002ef4:	f7ff fe8e 	bl	8002c14 <EE_WriteVariable>
 8002ef8:	e7ee      	b.n	8002ed8 <loadEEpromConfig+0x34>
 8002efa:	46c0      	nop			; (mov r8, r8)
 8002efc:	20000098 	.word	0x20000098
 8002f00:	20000004 	.word	0x20000004
 8002f04:	2000005c 	.word	0x2000005c
 8002f08:	200000c8 	.word	0x200000c8
 8002f0c:	20000010 	.word	0x20000010

08002f10 <phaseAPWM>:
#ifdef FD6288
void phaseBPWM() {
#endif


		if(!comp_pwm  || prop_brake_active){            // for future
 8002f10:	4b10      	ldr	r3, [pc, #64]	; (8002f54 <phaseAPWM+0x44>)
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8002f12:	4a11      	ldr	r2, [pc, #68]	; (8002f58 <phaseAPWM+0x48>)
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00a      	beq.n	8002f30 <phaseAPWM+0x20>
 8002f1a:	4b10      	ldr	r3, [pc, #64]	; (8002f5c <phaseAPWM+0x4c>)
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d106      	bne.n	8002f30 <phaseAPWM+0x20>
 8002f22:	2103      	movs	r1, #3
 8002f24:	6813      	ldr	r3, [r2, #0]
 8002f26:	438b      	bics	r3, r1
 8002f28:	3901      	subs	r1, #1
 8002f2a:	430b      	orrs	r3, r1
 8002f2c:	6013      	str	r3, [r2, #0]
 8002f2e:	e006      	b.n	8002f3e <phaseAPWM+0x2e>
 8002f30:	2103      	movs	r1, #3
 8002f32:	6813      	ldr	r3, [r2, #0]
 8002f34:	438b      	bics	r3, r1
 8002f36:	3902      	subs	r1, #2
 8002f38:	430b      	orrs	r3, r1
 8002f3a:	6013      	str	r3, [r2, #0]
		LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_0, LL_GPIO_MODE_OUTPUT);
		GPIOB->BRR = GPIO_PIN_0;
 8002f3c:	6291      	str	r1, [r2, #40]	; 0x28
 8002f3e:	2190      	movs	r1, #144	; 0x90
 8002f40:	05c9      	lsls	r1, r1, #23
 8002f42:	680b      	ldr	r3, [r1, #0]
 8002f44:	4a06      	ldr	r2, [pc, #24]	; (8002f60 <phaseAPWM+0x50>)
 8002f46:	401a      	ands	r2, r3
 8002f48:	2380      	movs	r3, #128	; 0x80
 8002f4a:	031b      	lsls	r3, r3, #12
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	600b      	str	r3, [r1, #0]
		}else{
		LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_0, LL_GPIO_MODE_ALTERNATE); // low
		}
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_9, LL_GPIO_MODE_ALTERNATE);  // high

	}
 8002f50:	4770      	bx	lr
 8002f52:	46c0      	nop			; (mov r8, r8)
 8002f54:	20000018 	.word	0x20000018
 8002f58:	48000400 	.word	0x48000400
 8002f5c:	200000f4 	.word	0x200000f4
 8002f60:	fff3ffff 	.word	0xfff3ffff

08002f64 <phaseBPWM>:
#endif
#ifdef FD6288
void phaseCPWM() {
#endif

		if (!comp_pwm || prop_brake_active){
 8002f64:	4b13      	ldr	r3, [pc, #76]	; (8002fb4 <phaseBPWM+0x50>)
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00d      	beq.n	8002f88 <phaseBPWM+0x24>
 8002f6c:	4b12      	ldr	r3, [pc, #72]	; (8002fb8 <phaseBPWM+0x54>)
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d109      	bne.n	8002f88 <phaseBPWM+0x24>
 8002f74:	2190      	movs	r1, #144	; 0x90
 8002f76:	05c9      	lsls	r1, r1, #23
 8002f78:	680b      	ldr	r3, [r1, #0]
 8002f7a:	4a10      	ldr	r2, [pc, #64]	; (8002fbc <phaseBPWM+0x58>)
 8002f7c:	401a      	ands	r2, r3
 8002f7e:	2380      	movs	r3, #128	; 0x80
 8002f80:	021b      	lsls	r3, r3, #8
 8002f82:	4313      	orrs	r3, r2
 8002f84:	600b      	str	r3, [r1, #0]
 8002f86:	e00a      	b.n	8002f9e <phaseBPWM+0x3a>
 8002f88:	2390      	movs	r3, #144	; 0x90
 8002f8a:	05db      	lsls	r3, r3, #23
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	490b      	ldr	r1, [pc, #44]	; (8002fbc <phaseBPWM+0x58>)
 8002f90:	4011      	ands	r1, r2
 8002f92:	2280      	movs	r2, #128	; 0x80
 8002f94:	01d2      	lsls	r2, r2, #7
 8002f96:	430a      	orrs	r2, r1
 8002f98:	601a      	str	r2, [r3, #0]
			LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_7, LL_GPIO_MODE_OUTPUT);
			GPIOA->BRR = GPIO_PIN_7;
 8002f9a:	2280      	movs	r2, #128	; 0x80
 8002f9c:	629a      	str	r2, [r3, #40]	; 0x28
 8002f9e:	2190      	movs	r1, #144	; 0x90
 8002fa0:	05c9      	lsls	r1, r1, #23
 8002fa2:	680b      	ldr	r3, [r1, #0]
 8002fa4:	4a06      	ldr	r2, [pc, #24]	; (8002fc0 <phaseBPWM+0x5c>)
 8002fa6:	401a      	ands	r2, r3
 8002fa8:	2380      	movs	r3, #128	; 0x80
 8002faa:	029b      	lsls	r3, r3, #10
 8002fac:	4313      	orrs	r3, r2
 8002fae:	600b      	str	r3, [r1, #0]
		}else{
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_7, LL_GPIO_MODE_ALTERNATE);
		}
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_8, LL_GPIO_MODE_ALTERNATE);

	}
 8002fb0:	4770      	bx	lr
 8002fb2:	46c0      	nop			; (mov r8, r8)
 8002fb4:	20000018 	.word	0x20000018
 8002fb8:	200000f4 	.word	0x200000f4
 8002fbc:	ffff3fff 	.word	0xffff3fff
 8002fc0:	fffcffff 	.word	0xfffcffff

08002fc4 <phaseCPWM>:
#endif
#ifdef FD6288
void phaseAPWM() {
#endif

		if (!comp_pwm || prop_brake_active){
 8002fc4:	4b10      	ldr	r3, [pc, #64]	; (8003008 <phaseCPWM+0x44>)
 8002fc6:	4a11      	ldr	r2, [pc, #68]	; (800300c <phaseCPWM+0x48>)
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00a      	beq.n	8002fe4 <phaseCPWM+0x20>
 8002fce:	4b10      	ldr	r3, [pc, #64]	; (8003010 <phaseCPWM+0x4c>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d106      	bne.n	8002fe4 <phaseCPWM+0x20>
 8002fd6:	210c      	movs	r1, #12
 8002fd8:	6813      	ldr	r3, [r2, #0]
 8002fda:	438b      	bics	r3, r1
 8002fdc:	3904      	subs	r1, #4
 8002fde:	430b      	orrs	r3, r1
 8002fe0:	6013      	str	r3, [r2, #0]
 8002fe2:	e007      	b.n	8002ff4 <phaseCPWM+0x30>
 8002fe4:	210c      	movs	r1, #12
 8002fe6:	6813      	ldr	r3, [r2, #0]
 8002fe8:	438b      	bics	r3, r1
 8002fea:	3908      	subs	r1, #8
 8002fec:	430b      	orrs	r3, r1
 8002fee:	6013      	str	r3, [r2, #0]
			LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_1, LL_GPIO_MODE_OUTPUT);
			GPIOB->BRR = GPIO_PIN_1;
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	6293      	str	r3, [r2, #40]	; 0x28
 8002ff4:	2190      	movs	r1, #144	; 0x90
 8002ff6:	05c9      	lsls	r1, r1, #23
 8002ff8:	680b      	ldr	r3, [r1, #0]
 8002ffa:	4a06      	ldr	r2, [pc, #24]	; (8003014 <phaseCPWM+0x50>)
 8002ffc:	401a      	ands	r2, r3
 8002ffe:	2380      	movs	r3, #128	; 0x80
 8003000:	039b      	lsls	r3, r3, #14
 8003002:	4313      	orrs	r3, r2
 8003004:	600b      	str	r3, [r1, #0]
			}else{
		LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_1, LL_GPIO_MODE_ALTERNATE);
			}
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_10, LL_GPIO_MODE_ALTERNATE);

	}
 8003006:	4770      	bx	lr
 8003008:	20000018 	.word	0x20000018
 800300c:	48000400 	.word	0x48000400
 8003010:	200000f4 	.word	0x200000f4
 8003014:	ffcfffff 	.word	0xffcfffff

08003018 <comStep>:
		GPIOA->BRR = GPIO_PIN_10;
	}



void  comStep (int newStep){
 8003018:	b500      	push	{lr}
//TIM14->CNT = 0;
switch(newStep)
 800301a:	2806      	cmp	r0, #6
 800301c:	d843      	bhi.n	80030a6 <comStep+0x8e>
 800301e:	4bb3      	ldr	r3, [pc, #716]	; (80032ec <comStep+0x2d4>)
 8003020:	0080      	lsls	r0, r0, #2
 8003022:	581b      	ldr	r3, [r3, r0]
 8003024:	469f      	mov	pc, r3
		if(!comp_pwm  || prop_brake_active){            // for future
 8003026:	4bb2      	ldr	r3, [pc, #712]	; (80032f0 <comStep+0x2d8>)
 8003028:	4ab2      	ldr	r2, [pc, #712]	; (80032f4 <comStep+0x2dc>)
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d100      	bne.n	8003032 <comStep+0x1a>
 8003030:	e148      	b.n	80032c4 <comStep+0x2ac>
 8003032:	4bb1      	ldr	r3, [pc, #708]	; (80032f8 <comStep+0x2e0>)
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d000      	beq.n	800303c <comStep+0x24>
 800303a:	e143      	b.n	80032c4 <comStep+0x2ac>
 800303c:	2103      	movs	r1, #3
 800303e:	6813      	ldr	r3, [r2, #0]
 8003040:	438b      	bics	r3, r1
 8003042:	3901      	subs	r1, #1
 8003044:	430b      	orrs	r3, r1
 8003046:	6013      	str	r3, [r2, #0]
 8003048:	2390      	movs	r3, #144	; 0x90
 800304a:	05db      	lsls	r3, r3, #23
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	49ab      	ldr	r1, [pc, #684]	; (80032fc <comStep+0x2e4>)
 8003050:	4011      	ands	r1, r2
 8003052:	2280      	movs	r2, #128	; 0x80
 8003054:	0312      	lsls	r2, r2, #12
 8003056:	430a      	orrs	r2, r1
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	49a8      	ldr	r1, [pc, #672]	; (8003300 <comStep+0x2e8>)
 800305e:	4011      	ands	r1, r2
 8003060:	2280      	movs	r2, #128	; 0x80
 8003062:	01d2      	lsls	r2, r2, #7
 8003064:	430a      	orrs	r2, r1
 8003066:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_7;
 8003068:	2280      	movs	r2, #128	; 0x80
 800306a:	629a      	str	r2, [r3, #40]	; 0x28
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	49a5      	ldr	r1, [pc, #660]	; (8003304 <comStep+0x2ec>)
 8003070:	4011      	ands	r1, r2
 8003072:	2280      	movs	r2, #128	; 0x80
 8003074:	0252      	lsls	r2, r2, #9
 8003076:	430a      	orrs	r2, r1
 8003078:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_8;
 800307a:	2280      	movs	r2, #128	; 0x80
 800307c:	0052      	lsls	r2, r2, #1
 800307e:	629a      	str	r2, [r3, #40]	; 0x28
 8003080:	200c      	movs	r0, #12
 8003082:	499c      	ldr	r1, [pc, #624]	; (80032f4 <comStep+0x2dc>)
 8003084:	680a      	ldr	r2, [r1, #0]
 8003086:	4382      	bics	r2, r0
 8003088:	3808      	subs	r0, #8
 800308a:	4302      	orrs	r2, r0
 800308c:	600a      	str	r2, [r1, #0]
		GPIOB->BSRR = GPIO_PIN_1;
 800308e:	2202      	movs	r2, #2
 8003090:	618a      	str	r2, [r1, #24]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	499c      	ldr	r1, [pc, #624]	; (8003308 <comStep+0x2f0>)
 8003096:	4011      	ands	r1, r2
 8003098:	2280      	movs	r2, #128	; 0x80
 800309a:	0352      	lsls	r2, r2, #13
 800309c:	430a      	orrs	r2, r1
 800309e:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_10;
 80030a0:	2280      	movs	r2, #128	; 0x80
 80030a2:	00d2      	lsls	r2, r2, #3
 80030a4:	629a      	str	r2, [r3, #40]	; 0x28
        	break;
	}

//stop_time = TIM14->CNT;

}
 80030a6:	bd00      	pop	{pc}
		if(!comp_pwm  || prop_brake_active){            // for future
 80030a8:	4b91      	ldr	r3, [pc, #580]	; (80032f0 <comStep+0x2d8>)
 80030aa:	4a92      	ldr	r2, [pc, #584]	; (80032f4 <comStep+0x2dc>)
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d100      	bne.n	80030b4 <comStep+0x9c>
 80030b2:	e0f3      	b.n	800329c <comStep+0x284>
 80030b4:	4b90      	ldr	r3, [pc, #576]	; (80032f8 <comStep+0x2e0>)
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d000      	beq.n	80030be <comStep+0xa6>
 80030bc:	e0ee      	b.n	800329c <comStep+0x284>
 80030be:	2103      	movs	r1, #3
 80030c0:	6813      	ldr	r3, [r2, #0]
 80030c2:	438b      	bics	r3, r1
 80030c4:	3901      	subs	r1, #1
 80030c6:	430b      	orrs	r3, r1
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	2390      	movs	r3, #144	; 0x90
 80030cc:	05db      	lsls	r3, r3, #23
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	498a      	ldr	r1, [pc, #552]	; (80032fc <comStep+0x2e4>)
 80030d2:	4011      	ands	r1, r2
 80030d4:	2280      	movs	r2, #128	; 0x80
 80030d6:	0312      	lsls	r2, r2, #12
 80030d8:	430a      	orrs	r2, r1
 80030da:	601a      	str	r2, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	4988      	ldr	r1, [pc, #544]	; (8003300 <comStep+0x2e8>)
 80030e0:	4011      	ands	r1, r2
 80030e2:	2280      	movs	r2, #128	; 0x80
 80030e4:	01d2      	lsls	r2, r2, #7
 80030e6:	430a      	orrs	r2, r1
 80030e8:	601a      	str	r2, [r3, #0]
		GPIOA->BSRR = GPIO_PIN_7;
 80030ea:	2280      	movs	r2, #128	; 0x80
 80030ec:	619a      	str	r2, [r3, #24]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	4984      	ldr	r1, [pc, #528]	; (8003304 <comStep+0x2ec>)
 80030f2:	4011      	ands	r1, r2
 80030f4:	2280      	movs	r2, #128	; 0x80
 80030f6:	0252      	lsls	r2, r2, #9
 80030f8:	430a      	orrs	r2, r1
 80030fa:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_8;
 80030fc:	2280      	movs	r2, #128	; 0x80
 80030fe:	0052      	lsls	r2, r2, #1
 8003100:	629a      	str	r2, [r3, #40]	; 0x28
 8003102:	200c      	movs	r0, #12
 8003104:	497b      	ldr	r1, [pc, #492]	; (80032f4 <comStep+0x2dc>)
 8003106:	680a      	ldr	r2, [r1, #0]
 8003108:	4382      	bics	r2, r0
 800310a:	3808      	subs	r0, #8
 800310c:	4302      	orrs	r2, r0
 800310e:	600a      	str	r2, [r1, #0]
		GPIOB->BRR = GPIO_PIN_1;
 8003110:	2202      	movs	r2, #2
 8003112:	628a      	str	r2, [r1, #40]	; 0x28
 8003114:	e7bd      	b.n	8003092 <comStep+0x7a>
 8003116:	2103      	movs	r1, #3
 8003118:	4a76      	ldr	r2, [pc, #472]	; (80032f4 <comStep+0x2dc>)
 800311a:	4878      	ldr	r0, [pc, #480]	; (80032fc <comStep+0x2e4>)
 800311c:	6813      	ldr	r3, [r2, #0]
 800311e:	438b      	bics	r3, r1
 8003120:	3902      	subs	r1, #2
 8003122:	430b      	orrs	r3, r1
 8003124:	6013      	str	r3, [r2, #0]
 8003126:	2390      	movs	r3, #144	; 0x90
		GPIOB->BRR = GPIO_PIN_0;
 8003128:	6291      	str	r1, [r2, #40]	; 0x28
 800312a:	05db      	lsls	r3, r3, #23
 800312c:	6819      	ldr	r1, [r3, #0]
 800312e:	4008      	ands	r0, r1
 8003130:	2180      	movs	r1, #128	; 0x80
 8003132:	02c9      	lsls	r1, r1, #11
 8003134:	4301      	orrs	r1, r0
 8003136:	6019      	str	r1, [r3, #0]
		GPIOA->BRR = GPIO_PIN_9;
 8003138:	2180      	movs	r1, #128	; 0x80
 800313a:	0089      	lsls	r1, r1, #2
 800313c:	6299      	str	r1, [r3, #40]	; 0x28
 800313e:	6819      	ldr	r1, [r3, #0]
 8003140:	486f      	ldr	r0, [pc, #444]	; (8003300 <comStep+0x2e8>)
 8003142:	4008      	ands	r0, r1
 8003144:	2180      	movs	r1, #128	; 0x80
 8003146:	01c9      	lsls	r1, r1, #7
 8003148:	4301      	orrs	r1, r0
 800314a:	6019      	str	r1, [r3, #0]
		GPIOA->BSRR = GPIO_PIN_7;
 800314c:	2180      	movs	r1, #128	; 0x80
 800314e:	6199      	str	r1, [r3, #24]
 8003150:	6819      	ldr	r1, [r3, #0]
 8003152:	486c      	ldr	r0, [pc, #432]	; (8003304 <comStep+0x2ec>)
 8003154:	4008      	ands	r0, r1
 8003156:	2180      	movs	r1, #128	; 0x80
 8003158:	0249      	lsls	r1, r1, #9
 800315a:	4301      	orrs	r1, r0
 800315c:	6019      	str	r1, [r3, #0]
		GPIOA->BRR = GPIO_PIN_8;
 800315e:	2180      	movs	r1, #128	; 0x80
 8003160:	0049      	lsls	r1, r1, #1
 8003162:	6299      	str	r1, [r3, #40]	; 0x28
		if (!comp_pwm || prop_brake_active){
 8003164:	4b62      	ldr	r3, [pc, #392]	; (80032f0 <comStep+0x2d8>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d100      	bne.n	800316e <comStep+0x156>
 800316c:	e08c      	b.n	8003288 <comStep+0x270>
 800316e:	4b62      	ldr	r3, [pc, #392]	; (80032f8 <comStep+0x2e0>)
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d000      	beq.n	8003178 <comStep+0x160>
 8003176:	e087      	b.n	8003288 <comStep+0x270>
 8003178:	210c      	movs	r1, #12
 800317a:	6813      	ldr	r3, [r2, #0]
 800317c:	438b      	bics	r3, r1
 800317e:	3904      	subs	r1, #4
 8003180:	430b      	orrs	r3, r1
 8003182:	6013      	str	r3, [r2, #0]
 8003184:	2190      	movs	r1, #144	; 0x90
 8003186:	05c9      	lsls	r1, r1, #23
 8003188:	680b      	ldr	r3, [r1, #0]
 800318a:	4a5f      	ldr	r2, [pc, #380]	; (8003308 <comStep+0x2f0>)
 800318c:	401a      	ands	r2, r3
 800318e:	2380      	movs	r3, #128	; 0x80
 8003190:	039b      	lsls	r3, r3, #14
 8003192:	4313      	orrs	r3, r2
 8003194:	600b      	str	r3, [r1, #0]
 8003196:	e786      	b.n	80030a6 <comStep+0x8e>
 8003198:	2103      	movs	r1, #3
 800319a:	4a56      	ldr	r2, [pc, #344]	; (80032f4 <comStep+0x2dc>)
 800319c:	6813      	ldr	r3, [r2, #0]
 800319e:	438b      	bics	r3, r1
 80031a0:	3902      	subs	r1, #2
 80031a2:	430b      	orrs	r3, r1
 80031a4:	6013      	str	r3, [r2, #0]
 80031a6:	2390      	movs	r3, #144	; 0x90
		GPIOB->BSRR = GPIO_PIN_0;
 80031a8:	6191      	str	r1, [r2, #24]
 80031aa:	05db      	lsls	r3, r3, #23
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	4953      	ldr	r1, [pc, #332]	; (80032fc <comStep+0x2e4>)
 80031b0:	4011      	ands	r1, r2
 80031b2:	2280      	movs	r2, #128	; 0x80
 80031b4:	02d2      	lsls	r2, r2, #11
 80031b6:	430a      	orrs	r2, r1
 80031b8:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_9;
 80031ba:	2280      	movs	r2, #128	; 0x80
 80031bc:	0092      	lsls	r2, r2, #2
 80031be:	629a      	str	r2, [r3, #40]	; 0x28
		if (!comp_pwm || prop_brake_active){
 80031c0:	4a4b      	ldr	r2, [pc, #300]	; (80032f0 <comStep+0x2d8>)
 80031c2:	7812      	ldrb	r2, [r2, #0]
 80031c4:	2a00      	cmp	r2, #0
 80031c6:	d071      	beq.n	80032ac <comStep+0x294>
 80031c8:	4a4b      	ldr	r2, [pc, #300]	; (80032f8 <comStep+0x2e0>)
 80031ca:	7812      	ldrb	r2, [r2, #0]
 80031cc:	2a00      	cmp	r2, #0
 80031ce:	d16d      	bne.n	80032ac <comStep+0x294>
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	494b      	ldr	r1, [pc, #300]	; (8003300 <comStep+0x2e8>)
 80031d4:	4011      	ands	r1, r2
 80031d6:	2280      	movs	r2, #128	; 0x80
 80031d8:	0212      	lsls	r2, r2, #8
 80031da:	430a      	orrs	r2, r1
 80031dc:	601a      	str	r2, [r3, #0]
 80031de:	2390      	movs	r3, #144	; 0x90
 80031e0:	05db      	lsls	r3, r3, #23
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	4947      	ldr	r1, [pc, #284]	; (8003304 <comStep+0x2ec>)
 80031e6:	4011      	ands	r1, r2
 80031e8:	2280      	movs	r2, #128	; 0x80
 80031ea:	0292      	lsls	r2, r2, #10
 80031ec:	430a      	orrs	r2, r1
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	e787      	b.n	8003102 <comStep+0xea>
 80031f2:	2103      	movs	r1, #3
 80031f4:	4a3f      	ldr	r2, [pc, #252]	; (80032f4 <comStep+0x2dc>)
 80031f6:	4841      	ldr	r0, [pc, #260]	; (80032fc <comStep+0x2e4>)
 80031f8:	6813      	ldr	r3, [r2, #0]
 80031fa:	438b      	bics	r3, r1
 80031fc:	3902      	subs	r1, #2
 80031fe:	430b      	orrs	r3, r1
 8003200:	6013      	str	r3, [r2, #0]
 8003202:	2390      	movs	r3, #144	; 0x90
		GPIOB->BSRR = GPIO_PIN_0;
 8003204:	6191      	str	r1, [r2, #24]
 8003206:	05db      	lsls	r3, r3, #23
 8003208:	6819      	ldr	r1, [r3, #0]
 800320a:	4008      	ands	r0, r1
 800320c:	2180      	movs	r1, #128	; 0x80
 800320e:	02c9      	lsls	r1, r1, #11
 8003210:	4301      	orrs	r1, r0
 8003212:	6019      	str	r1, [r3, #0]
		GPIOA->BRR = GPIO_PIN_9;
 8003214:	2180      	movs	r1, #128	; 0x80
 8003216:	0089      	lsls	r1, r1, #2
 8003218:	6299      	str	r1, [r3, #40]	; 0x28
 800321a:	6819      	ldr	r1, [r3, #0]
 800321c:	4838      	ldr	r0, [pc, #224]	; (8003300 <comStep+0x2e8>)
 800321e:	4008      	ands	r0, r1
 8003220:	2180      	movs	r1, #128	; 0x80
 8003222:	01c9      	lsls	r1, r1, #7
 8003224:	4301      	orrs	r1, r0
 8003226:	6019      	str	r1, [r3, #0]
		GPIOA->BRR = GPIO_PIN_7;
 8003228:	2180      	movs	r1, #128	; 0x80
 800322a:	6299      	str	r1, [r3, #40]	; 0x28
 800322c:	e790      	b.n	8003150 <comStep+0x138>
 800322e:	2103      	movs	r1, #3
 8003230:	4a30      	ldr	r2, [pc, #192]	; (80032f4 <comStep+0x2dc>)
 8003232:	6813      	ldr	r3, [r2, #0]
 8003234:	438b      	bics	r3, r1
 8003236:	3902      	subs	r1, #2
 8003238:	430b      	orrs	r3, r1
 800323a:	6013      	str	r3, [r2, #0]
 800323c:	2390      	movs	r3, #144	; 0x90
		GPIOB->BRR = GPIO_PIN_0;
 800323e:	6291      	str	r1, [r2, #40]	; 0x28
 8003240:	05db      	lsls	r3, r3, #23
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	492d      	ldr	r1, [pc, #180]	; (80032fc <comStep+0x2e4>)
 8003246:	4011      	ands	r1, r2
 8003248:	2280      	movs	r2, #128	; 0x80
 800324a:	02d2      	lsls	r2, r2, #11
 800324c:	430a      	orrs	r2, r1
 800324e:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_9;
 8003250:	2280      	movs	r2, #128	; 0x80
 8003252:	0092      	lsls	r2, r2, #2
 8003254:	629a      	str	r2, [r3, #40]	; 0x28
		if (!comp_pwm || prop_brake_active){
 8003256:	4a26      	ldr	r2, [pc, #152]	; (80032f0 <comStep+0x2d8>)
 8003258:	7812      	ldrb	r2, [r2, #0]
 800325a:	2a00      	cmp	r2, #0
 800325c:	d03a      	beq.n	80032d4 <comStep+0x2bc>
 800325e:	4a26      	ldr	r2, [pc, #152]	; (80032f8 <comStep+0x2e0>)
 8003260:	7812      	ldrb	r2, [r2, #0]
 8003262:	2a00      	cmp	r2, #0
 8003264:	d136      	bne.n	80032d4 <comStep+0x2bc>
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	4925      	ldr	r1, [pc, #148]	; (8003300 <comStep+0x2e8>)
 800326a:	4011      	ands	r1, r2
 800326c:	2280      	movs	r2, #128	; 0x80
 800326e:	0212      	lsls	r2, r2, #8
 8003270:	430a      	orrs	r2, r1
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	2390      	movs	r3, #144	; 0x90
 8003276:	05db      	lsls	r3, r3, #23
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	4922      	ldr	r1, [pc, #136]	; (8003304 <comStep+0x2ec>)
 800327c:	4011      	ands	r1, r2
 800327e:	2280      	movs	r2, #128	; 0x80
 8003280:	0292      	lsls	r2, r2, #10
 8003282:	430a      	orrs	r2, r1
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	e6fb      	b.n	8003080 <comStep+0x68>
 8003288:	210c      	movs	r1, #12
 800328a:	4a1a      	ldr	r2, [pc, #104]	; (80032f4 <comStep+0x2dc>)
 800328c:	6813      	ldr	r3, [r2, #0]
 800328e:	438b      	bics	r3, r1
 8003290:	3908      	subs	r1, #8
 8003292:	430b      	orrs	r3, r1
 8003294:	6013      	str	r3, [r2, #0]
			GPIOB->BRR = GPIO_PIN_1;
 8003296:	2302      	movs	r3, #2
 8003298:	6293      	str	r3, [r2, #40]	; 0x28
 800329a:	e773      	b.n	8003184 <comStep+0x16c>
 800329c:	2103      	movs	r1, #3
 800329e:	6813      	ldr	r3, [r2, #0]
 80032a0:	438b      	bics	r3, r1
 80032a2:	3902      	subs	r1, #2
 80032a4:	430b      	orrs	r3, r1
 80032a6:	6013      	str	r3, [r2, #0]
		GPIOB->BRR = GPIO_PIN_0;
 80032a8:	6291      	str	r1, [r2, #40]	; 0x28
 80032aa:	e70e      	b.n	80030ca <comStep+0xb2>
 80032ac:	2390      	movs	r3, #144	; 0x90
 80032ae:	05db      	lsls	r3, r3, #23
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	4913      	ldr	r1, [pc, #76]	; (8003300 <comStep+0x2e8>)
 80032b4:	4011      	ands	r1, r2
 80032b6:	2280      	movs	r2, #128	; 0x80
 80032b8:	01d2      	lsls	r2, r2, #7
 80032ba:	430a      	orrs	r2, r1
 80032bc:	601a      	str	r2, [r3, #0]
			GPIOA->BRR = GPIO_PIN_7;
 80032be:	2280      	movs	r2, #128	; 0x80
 80032c0:	629a      	str	r2, [r3, #40]	; 0x28
 80032c2:	e78c      	b.n	80031de <comStep+0x1c6>
 80032c4:	2103      	movs	r1, #3
 80032c6:	6813      	ldr	r3, [r2, #0]
 80032c8:	438b      	bics	r3, r1
 80032ca:	3902      	subs	r1, #2
 80032cc:	430b      	orrs	r3, r1
 80032ce:	6013      	str	r3, [r2, #0]
		GPIOB->BRR = GPIO_PIN_0;
 80032d0:	6291      	str	r1, [r2, #40]	; 0x28
 80032d2:	e6b9      	b.n	8003048 <comStep+0x30>
 80032d4:	2390      	movs	r3, #144	; 0x90
 80032d6:	05db      	lsls	r3, r3, #23
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	4909      	ldr	r1, [pc, #36]	; (8003300 <comStep+0x2e8>)
 80032dc:	4011      	ands	r1, r2
 80032de:	2280      	movs	r2, #128	; 0x80
 80032e0:	01d2      	lsls	r2, r2, #7
 80032e2:	430a      	orrs	r2, r1
 80032e4:	601a      	str	r2, [r3, #0]
			GPIOA->BRR = GPIO_PIN_7;
 80032e6:	2280      	movs	r2, #128	; 0x80
 80032e8:	629a      	str	r2, [r3, #40]	; 0x28
 80032ea:	e7c3      	b.n	8003274 <comStep+0x25c>
 80032ec:	080056ac 	.word	0x080056ac
 80032f0:	20000018 	.word	0x20000018
 80032f4:	48000400 	.word	0x48000400
 80032f8:	200000f4 	.word	0x200000f4
 80032fc:	fff3ffff 	.word	0xfff3ffff
 8003300:	ffff3fff 	.word	0xffff3fff
 8003304:	fffcffff 	.word	0xfffcffff
 8003308:	ffcfffff 	.word	0xffcfffff

0800330c <allOff>:
 800330c:	2103      	movs	r1, #3
 800330e:	4a1c      	ldr	r2, [pc, #112]	; (8003380 <allOff+0x74>)
 8003310:	481c      	ldr	r0, [pc, #112]	; (8003384 <allOff+0x78>)
 8003312:	6813      	ldr	r3, [r2, #0]
 8003314:	438b      	bics	r3, r1
 8003316:	3902      	subs	r1, #2
 8003318:	430b      	orrs	r3, r1
 800331a:	6013      	str	r3, [r2, #0]
 800331c:	2390      	movs	r3, #144	; 0x90
		GPIOB->BRR = GPIO_PIN_0;
 800331e:	6291      	str	r1, [r2, #40]	; 0x28
 8003320:	05db      	lsls	r3, r3, #23
 8003322:	6819      	ldr	r1, [r3, #0]
 8003324:	4008      	ands	r0, r1
 8003326:	2180      	movs	r1, #128	; 0x80
 8003328:	02c9      	lsls	r1, r1, #11
 800332a:	4301      	orrs	r1, r0
 800332c:	6019      	str	r1, [r3, #0]
		GPIOA->BRR = GPIO_PIN_9;
 800332e:	2180      	movs	r1, #128	; 0x80
 8003330:	0089      	lsls	r1, r1, #2
 8003332:	6299      	str	r1, [r3, #40]	; 0x28
 8003334:	6819      	ldr	r1, [r3, #0]
 8003336:	4814      	ldr	r0, [pc, #80]	; (8003388 <allOff+0x7c>)
 8003338:	4008      	ands	r0, r1
 800333a:	2180      	movs	r1, #128	; 0x80
 800333c:	01c9      	lsls	r1, r1, #7
 800333e:	4301      	orrs	r1, r0
 8003340:	6019      	str	r1, [r3, #0]
		GPIOA->BRR = GPIO_PIN_7;
 8003342:	2180      	movs	r1, #128	; 0x80
 8003344:	6299      	str	r1, [r3, #40]	; 0x28
 8003346:	6819      	ldr	r1, [r3, #0]
 8003348:	4810      	ldr	r0, [pc, #64]	; (800338c <allOff+0x80>)
 800334a:	4008      	ands	r0, r1
 800334c:	2180      	movs	r1, #128	; 0x80
 800334e:	0249      	lsls	r1, r1, #9
 8003350:	4301      	orrs	r1, r0
 8003352:	6019      	str	r1, [r3, #0]
		GPIOA->BRR = GPIO_PIN_8;
 8003354:	2180      	movs	r1, #128	; 0x80
 8003356:	200c      	movs	r0, #12
 8003358:	0049      	lsls	r1, r1, #1
 800335a:	6299      	str	r1, [r3, #40]	; 0x28
 800335c:	6811      	ldr	r1, [r2, #0]
 800335e:	4381      	bics	r1, r0
 8003360:	3808      	subs	r0, #8
 8003362:	4301      	orrs	r1, r0
 8003364:	6011      	str	r1, [r2, #0]
		GPIOB->BRR = GPIO_PIN_1;
 8003366:	2102      	movs	r1, #2
 8003368:	6291      	str	r1, [r2, #40]	; 0x28
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	4908      	ldr	r1, [pc, #32]	; (8003390 <allOff+0x84>)
 800336e:	4011      	ands	r1, r2
 8003370:	2280      	movs	r2, #128	; 0x80
 8003372:	0352      	lsls	r2, r2, #13
 8003374:	430a      	orrs	r2, r1
 8003376:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_10;
 8003378:	2280      	movs	r2, #128	; 0x80
 800337a:	00d2      	lsls	r2, r2, #3
 800337c:	629a      	str	r2, [r3, #40]	; 0x28

void allOff() {                   // coast
	phaseAFLOAT();
	phaseBFLOAT();
	phaseCFLOAT();
}
 800337e:	4770      	bx	lr
 8003380:	48000400 	.word	0x48000400
 8003384:	fff3ffff 	.word	0xfff3ffff
 8003388:	ffff3fff 	.word	0xffff3fff
 800338c:	fffcffff 	.word	0xfffcffff
 8003390:	ffcfffff 	.word	0xffcfffff

08003394 <fullBrake>:
 8003394:	2103      	movs	r1, #3
 8003396:	4a1c      	ldr	r2, [pc, #112]	; (8003408 <fullBrake+0x74>)
 8003398:	481c      	ldr	r0, [pc, #112]	; (800340c <fullBrake+0x78>)
 800339a:	6813      	ldr	r3, [r2, #0]
 800339c:	438b      	bics	r3, r1
 800339e:	3902      	subs	r1, #2
 80033a0:	430b      	orrs	r3, r1
 80033a2:	6013      	str	r3, [r2, #0]
 80033a4:	2390      	movs	r3, #144	; 0x90
		GPIOB->BSRR = GPIO_PIN_0;
 80033a6:	6191      	str	r1, [r2, #24]
 80033a8:	05db      	lsls	r3, r3, #23
 80033aa:	6819      	ldr	r1, [r3, #0]
 80033ac:	4008      	ands	r0, r1
 80033ae:	2180      	movs	r1, #128	; 0x80
 80033b0:	02c9      	lsls	r1, r1, #11
 80033b2:	4301      	orrs	r1, r0
 80033b4:	6019      	str	r1, [r3, #0]
		GPIOA->BRR = GPIO_PIN_9;
 80033b6:	2180      	movs	r1, #128	; 0x80
 80033b8:	0089      	lsls	r1, r1, #2
 80033ba:	6299      	str	r1, [r3, #40]	; 0x28
 80033bc:	6819      	ldr	r1, [r3, #0]
 80033be:	4814      	ldr	r0, [pc, #80]	; (8003410 <fullBrake+0x7c>)
 80033c0:	4008      	ands	r0, r1
 80033c2:	2180      	movs	r1, #128	; 0x80
 80033c4:	01c9      	lsls	r1, r1, #7
 80033c6:	4301      	orrs	r1, r0
 80033c8:	6019      	str	r1, [r3, #0]
		GPIOA->BSRR = GPIO_PIN_7;
 80033ca:	2180      	movs	r1, #128	; 0x80
 80033cc:	6199      	str	r1, [r3, #24]
 80033ce:	6819      	ldr	r1, [r3, #0]
 80033d0:	4810      	ldr	r0, [pc, #64]	; (8003414 <fullBrake+0x80>)
 80033d2:	4008      	ands	r0, r1
 80033d4:	2180      	movs	r1, #128	; 0x80
 80033d6:	0249      	lsls	r1, r1, #9
 80033d8:	4301      	orrs	r1, r0
 80033da:	6019      	str	r1, [r3, #0]
		GPIOA->BRR = GPIO_PIN_8;
 80033dc:	2180      	movs	r1, #128	; 0x80
 80033de:	200c      	movs	r0, #12
 80033e0:	0049      	lsls	r1, r1, #1
 80033e2:	6299      	str	r1, [r3, #40]	; 0x28
 80033e4:	6811      	ldr	r1, [r2, #0]
 80033e6:	4381      	bics	r1, r0
 80033e8:	3808      	subs	r0, #8
 80033ea:	4301      	orrs	r1, r0
 80033ec:	6011      	str	r1, [r2, #0]
		GPIOB->BSRR = GPIO_PIN_1;
 80033ee:	2102      	movs	r1, #2
 80033f0:	6191      	str	r1, [r2, #24]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	4908      	ldr	r1, [pc, #32]	; (8003418 <fullBrake+0x84>)
 80033f6:	4011      	ands	r1, r2
 80033f8:	2280      	movs	r2, #128	; 0x80
 80033fa:	0352      	lsls	r2, r2, #13
 80033fc:	430a      	orrs	r2, r1
 80033fe:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_10;
 8003400:	2280      	movs	r2, #128	; 0x80
 8003402:	00d2      	lsls	r2, r2, #3
 8003404:	629a      	str	r2, [r3, #40]	; 0x28

void fullBrake(){                     // full braking shorting all low sides
	phaseALOW();
	phaseBLOW();
	phaseCLOW();
}
 8003406:	4770      	bx	lr
 8003408:	48000400 	.word	0x48000400
 800340c:	fff3ffff 	.word	0xfff3ffff
 8003410:	ffff3fff 	.word	0xffff3fff
 8003414:	fffcffff 	.word	0xfffcffff
 8003418:	ffcfffff 	.word	0xffcfffff

0800341c <commutate>:

}

void commutate() {
//	TIM2->CNT = 0;
	if (forward == 1){
 800341c:	4b67      	ldr	r3, [pc, #412]	; (80035bc <commutate+0x1a0>)
void commutate() {
 800341e:	b570      	push	{r4, r5, r6, lr}
	if (forward == 1){
 8003420:	681a      	ldr	r2, [r3, #0]
		step++;
 8003422:	4c67      	ldr	r4, [pc, #412]	; (80035c0 <commutate+0x1a4>)
	if (forward == 1){
 8003424:	2a01      	cmp	r2, #1
 8003426:	d100      	bne.n	800342a <commutate+0xe>
 8003428:	e086      	b.n	8003538 <commutate+0x11c>
		}
		if (step == 2 || step == 4 || step == 6) {
			rising = 0;
		}
	}
	if (forward == 0){
 800342a:	2a00      	cmp	r2, #0
 800342c:	d117      	bne.n	800345e <commutate+0x42>
		step--;
 800342e:	6823      	ldr	r3, [r4, #0]
 8003430:	3b01      	subs	r3, #1
 8003432:	6023      	str	r3, [r4, #0]
		if (step < 1) {
 8003434:	2b00      	cmp	r3, #0
 8003436:	dc00      	bgt.n	800343a <commutate+0x1e>
 8003438:	e09a      	b.n	8003570 <commutate+0x154>
			step = 6;
		}
		if (step == 1 || step == 3 || step == 5) {
 800343a:	2202      	movs	r2, #2
 800343c:	0019      	movs	r1, r3
 800343e:	4391      	bics	r1, r2
 8003440:	2901      	cmp	r1, #1
 8003442:	d100      	bne.n	8003446 <commutate+0x2a>
 8003444:	e09a      	b.n	800357c <commutate+0x160>
 8003446:	2b05      	cmp	r3, #5
 8003448:	d100      	bne.n	800344c <commutate+0x30>
 800344a:	e097      	b.n	800357c <commutate+0x160>
 800344c:	2204      	movs	r2, #4
 800344e:	0019      	movs	r1, r3
 8003450:	4391      	bics	r1, r2
			rising = 0;
		}
		if (step == 2 || step == 4 || step == 6) {
 8003452:	2902      	cmp	r1, #2
 8003454:	d100      	bne.n	8003458 <commutate+0x3c>
 8003456:	e08d      	b.n	8003574 <commutate+0x158>
 8003458:	2b04      	cmp	r3, #4
 800345a:	d100      	bne.n	800345e <commutate+0x42>
 800345c:	e08a      	b.n	8003574 <commutate+0x158>
			rising = 1;
		}
	}

	//TIM2->CNT = 0;
	if (input > 47){
 800345e:	4b59      	ldr	r3, [pc, #356]	; (80035c4 <commutate+0x1a8>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2b2f      	cmp	r3, #47	; 0x2f
 8003464:	dd02      	ble.n	800346c <commutate+0x50>
comStep(step);
 8003466:	6820      	ldr	r0, [r4, #0]
 8003468:	f7ff fdd6 	bl	8003018 <comStep>
	}

	if((bemf_counts > 50 && duty_cycle > 180)){
 800346c:	4b56      	ldr	r3, [pc, #344]	; (80035c8 <commutate+0x1ac>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2b32      	cmp	r3, #50	; 0x32
 8003472:	dc33      	bgt.n	80034dc <commutate+0xc0>
 8003474:	4b55      	ldr	r3, [pc, #340]	; (80035cc <commutate+0x1b0>)
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	2101      	movs	r1, #1
 800347a:	4b55      	ldr	r3, [pc, #340]	; (80035d0 <commutate+0x1b4>)
 800347c:	7019      	strb	r1, [r3, #0]
		polling_mode = 0;

	}else{
		polling_mode = 1;
	}
	if (duty_cycle < 180 || commutation_interval > 10000){
 800347e:	2ab3      	cmp	r2, #179	; 0xb3
 8003480:	dd00      	ble.n	8003484 <commutate+0x68>
 8003482:	e098      	b.n	80035b6 <commutate+0x19a>
		polling_mode = 1;
 8003484:	2201      	movs	r2, #1
 8003486:	701a      	strb	r2, [r3, #0]
	HAL_COMP_Stop(&hcomp1);
 8003488:	4d52      	ldr	r5, [pc, #328]	; (80035d4 <commutate+0x1b8>)
 800348a:	0028      	movs	r0, r5
 800348c:	f7fd fa0a 	bl	80008a4 <HAL_COMP_Stop>
	if (step == 1 || step == 4) {   // c floating
 8003490:	6823      	ldr	r3, [r4, #0]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d01f      	beq.n	80034d6 <commutate+0xba>
 8003496:	2b04      	cmp	r3, #4
 8003498:	d01d      	beq.n	80034d6 <commutate+0xba>
	if (step == 2 || step == 5) {     // a floating
 800349a:	2b02      	cmp	r3, #2
 800349c:	d018      	beq.n	80034d0 <commutate+0xb4>
 800349e:	2b05      	cmp	r3, #5
 80034a0:	d016      	beq.n	80034d0 <commutate+0xb4>
	if (step == 3 || step == 6) {      // b floating
 80034a2:	2b03      	cmp	r3, #3
 80034a4:	d007      	beq.n	80034b6 <commutate+0x9a>
 80034a6:	2b06      	cmp	r3, #6
 80034a8:	d005      	beq.n	80034b6 <commutate+0x9a>
	if (HAL_COMP_Init(&hcomp1) != HAL_OK) {
 80034aa:	0028      	movs	r0, r5
 80034ac:	f7fd f98a 	bl	80007c4 <HAL_COMP_Init>
 80034b0:	2800      	cmp	r0, #0
 80034b2:	d007      	beq.n	80034c4 <commutate+0xa8>
 80034b4:	e7fe      	b.n	80034b4 <commutate+0x98>
		hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_DAC2;
 80034b6:	2350      	movs	r3, #80	; 0x50
	if (HAL_COMP_Init(&hcomp1) != HAL_OK) {
 80034b8:	0028      	movs	r0, r5
		hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_DAC2;
 80034ba:	606b      	str	r3, [r5, #4]
	if (HAL_COMP_Init(&hcomp1) != HAL_OK) {
 80034bc:	f7fd f982 	bl	80007c4 <HAL_COMP_Init>
 80034c0:	2800      	cmp	r0, #0
 80034c2:	d1f7      	bne.n	80034b4 <commutate+0x98>
	if (HAL_COMP_Start(&hcomp1) != HAL_OK) {
 80034c4:	0028      	movs	r0, r5
 80034c6:	f7fd f9cd 	bl	8000864 <HAL_COMP_Start>
 80034ca:	2800      	cmp	r0, #0
 80034cc:	d030      	beq.n	8003530 <commutate+0x114>
 80034ce:	e7fe      	b.n	80034ce <commutate+0xb2>
		hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1;
 80034d0:	2240      	movs	r2, #64	; 0x40
 80034d2:	606a      	str	r2, [r5, #4]
 80034d4:	e7e5      	b.n	80034a2 <commutate+0x86>
		hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_IO1;
 80034d6:	2260      	movs	r2, #96	; 0x60
 80034d8:	606a      	str	r2, [r5, #4]
 80034da:	e7de      	b.n	800349a <commutate+0x7e>
	if((bemf_counts > 50 && duty_cycle > 180)){
 80034dc:	4b3b      	ldr	r3, [pc, #236]	; (80035cc <commutate+0x1b0>)
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	2ab4      	cmp	r2, #180	; 0xb4
 80034e2:	ddc9      	ble.n	8003478 <commutate+0x5c>
 80034e4:	2200      	movs	r2, #0
 80034e6:	4b3a      	ldr	r3, [pc, #232]	; (80035d0 <commutate+0x1b4>)
 80034e8:	701a      	strb	r2, [r3, #0]
	if (duty_cycle < 180 || commutation_interval > 10000){
 80034ea:	483b      	ldr	r0, [pc, #236]	; (80035d8 <commutate+0x1bc>)
 80034ec:	493b      	ldr	r1, [pc, #236]	; (80035dc <commutate+0x1c0>)
 80034ee:	6800      	ldr	r0, [r0, #0]
 80034f0:	4288      	cmp	r0, r1
 80034f2:	dcc7      	bgt.n	8003484 <commutate+0x68>
	}

	if(!polling_mode){
 80034f4:	2a00      	cmp	r2, #0
 80034f6:	d1c7      	bne.n	8003488 <commutate+0x6c>
	if (step == 1 || step == 4) {   // c floating
 80034f8:	6823      	ldr	r3, [r4, #0]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d04d      	beq.n	800359a <commutate+0x17e>
 80034fe:	2b04      	cmp	r3, #4
 8003500:	d04b      	beq.n	800359a <commutate+0x17e>
	if (step == 2 || step == 5) {     // a floating
 8003502:	2b02      	cmp	r3, #2
 8003504:	d04e      	beq.n	80035a4 <commutate+0x188>
 8003506:	2b05      	cmp	r3, #5
 8003508:	d04c      	beq.n	80035a4 <commutate+0x188>
	if (step == 3 || step == 6) {      // b floating
 800350a:	2b03      	cmp	r3, #3
 800350c:	d04f      	beq.n	80035ae <commutate+0x192>
 800350e:	2b06      	cmp	r3, #6
 8003510:	d04d      	beq.n	80035ae <commutate+0x192>
	if (rising){
 8003512:	4b33      	ldr	r3, [pc, #204]	; (80035e0 <commutate+0x1c4>)
 8003514:	681a      	ldr	r2, [r3, #0]
		EXTI->RTSR = 0x0;
 8003516:	4b33      	ldr	r3, [pc, #204]	; (80035e4 <commutate+0x1c8>)
	if (rising){
 8003518:	2a00      	cmp	r2, #0
 800351a:	d138      	bne.n	800358e <commutate+0x172>
	EXTI->FTSR = 0x0;
 800351c:	60da      	str	r2, [r3, #12]
	EXTI->RTSR = 0x200000;
 800351e:	2280      	movs	r2, #128	; 0x80
 8003520:	0392      	lsls	r2, r2, #14
 8003522:	609a      	str	r2, [r3, #8]
		changeCompInput();
		EXTI->IMR |= (1 << 21);
 8003524:	2380      	movs	r3, #128	; 0x80
 8003526:	4a2f      	ldr	r2, [pc, #188]	; (80035e4 <commutate+0x1c8>)
 8003528:	039b      	lsls	r3, r3, #14
 800352a:	6811      	ldr	r1, [r2, #0]
 800352c:	430b      	orrs	r3, r1
 800352e:	6013      	str	r3, [r2, #0]
	}else{
		pollingChangeCompInput();
	}
	zcfound = 0;
 8003530:	2200      	movs	r2, #0
 8003532:	4b2d      	ldr	r3, [pc, #180]	; (80035e8 <commutate+0x1cc>)
 8003534:	601a      	str	r2, [r3, #0]
//	falseAlarm = 0;
//	compCount = 0;
//	upcompCount = 0;

	//stop_time = TIM2->CNT;
}
 8003536:	bd70      	pop	{r4, r5, r6, pc}
		step++;
 8003538:	6823      	ldr	r3, [r4, #0]
 800353a:	3301      	adds	r3, #1
 800353c:	6023      	str	r3, [r4, #0]
		if (step > 6) {
 800353e:	2b06      	cmp	r3, #6
 8003540:	dd02      	ble.n	8003548 <commutate+0x12c>
			step = 1;
 8003542:	6022      	str	r2, [r4, #0]
		if (step == 1 || step == 3 || step == 5) {
 8003544:	2301      	movs	r3, #1
 8003546:	e01e      	b.n	8003586 <commutate+0x16a>
 8003548:	2102      	movs	r1, #2
 800354a:	0018      	movs	r0, r3
 800354c:	4388      	bics	r0, r1
 800354e:	2801      	cmp	r0, #1
 8003550:	d018      	beq.n	8003584 <commutate+0x168>
 8003552:	2b05      	cmp	r3, #5
 8003554:	d017      	beq.n	8003586 <commutate+0x16a>
 8003556:	2204      	movs	r2, #4
 8003558:	0019      	movs	r1, r3
 800355a:	4391      	bics	r1, r2
 800355c:	000a      	movs	r2, r1
		if (step == 2 || step == 4 || step == 6) {
 800355e:	2a02      	cmp	r2, #2
 8003560:	d002      	beq.n	8003568 <commutate+0x14c>
 8003562:	2b04      	cmp	r3, #4
 8003564:	d000      	beq.n	8003568 <commutate+0x14c>
 8003566:	e77a      	b.n	800345e <commutate+0x42>
			rising = 0;
 8003568:	2200      	movs	r2, #0
 800356a:	4b1d      	ldr	r3, [pc, #116]	; (80035e0 <commutate+0x1c4>)
 800356c:	601a      	str	r2, [r3, #0]
 800356e:	e776      	b.n	800345e <commutate+0x42>
			step = 6;
 8003570:	2306      	movs	r3, #6
 8003572:	6023      	str	r3, [r4, #0]
			rising = 1;
 8003574:	2201      	movs	r2, #1
 8003576:	4b1a      	ldr	r3, [pc, #104]	; (80035e0 <commutate+0x1c4>)
 8003578:	601a      	str	r2, [r3, #0]
 800357a:	e770      	b.n	800345e <commutate+0x42>
			rising = 0;
 800357c:	2100      	movs	r1, #0
 800357e:	4a18      	ldr	r2, [pc, #96]	; (80035e0 <commutate+0x1c4>)
 8003580:	6011      	str	r1, [r2, #0]
 8003582:	e763      	b.n	800344c <commutate+0x30>
		if (step == 1 || step == 3 || step == 5) {
 8003584:	001a      	movs	r2, r3
			rising = 1;                                // is back emf rising or falling
 8003586:	2001      	movs	r0, #1
 8003588:	4915      	ldr	r1, [pc, #84]	; (80035e0 <commutate+0x1c4>)
 800358a:	6008      	str	r0, [r1, #0]
 800358c:	e7e7      	b.n	800355e <commutate+0x142>
		EXTI->RTSR = 0x0;
 800358e:	2200      	movs	r2, #0
 8003590:	609a      	str	r2, [r3, #8]
	EXTI->FTSR = 0x200000;
 8003592:	2280      	movs	r2, #128	; 0x80
 8003594:	0392      	lsls	r2, r2, #14
 8003596:	60da      	str	r2, [r3, #12]
 8003598:	e7c4      	b.n	8003524 <commutate+0x108>
		COMP->CSR = 0b1100001;
 800359a:	2161      	movs	r1, #97	; 0x61
 800359c:	4a13      	ldr	r2, [pc, #76]	; (80035ec <commutate+0x1d0>)
 800359e:	6011      	str	r1, [r2, #0]
	if (step == 2 || step == 5) {     // a floating
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d1b0      	bne.n	8003506 <commutate+0xea>
		COMP->CSR = 0b1000001;                        /// if f051k6  step 2 , 5 is dac 1 ( swap comp input)
 80035a4:	2141      	movs	r1, #65	; 0x41
 80035a6:	4a11      	ldr	r2, [pc, #68]	; (80035ec <commutate+0x1d0>)
 80035a8:	6011      	str	r1, [r2, #0]
	if (step == 3 || step == 6) {      // b floating
 80035aa:	2b03      	cmp	r3, #3
 80035ac:	d1af      	bne.n	800350e <commutate+0xf2>
		COMP->CSR = 0b1010001;
 80035ae:	2251      	movs	r2, #81	; 0x51
 80035b0:	4b0e      	ldr	r3, [pc, #56]	; (80035ec <commutate+0x1d0>)
 80035b2:	601a      	str	r2, [r3, #0]
 80035b4:	e7ad      	b.n	8003512 <commutate+0xf6>
		polling_mode = 1;
 80035b6:	2201      	movs	r2, #1
 80035b8:	e797      	b.n	80034ea <commutate+0xce>
 80035ba:	46c0      	nop			; (mov r8, r8)
 80035bc:	20000030 	.word	0x20000030
 80035c0:	20000050 	.word	0x20000050
 80035c4:	200000e4 	.word	0x200000e4
 80035c8:	20000254 	.word	0x20000254
 80035cc:	20000020 	.word	0x20000020
 80035d0:	200000f2 	.word	0x200000f2
 80035d4:	200001e4 	.word	0x200001e4
 80035d8:	200000b4 	.word	0x200000b4
 80035dc:	00002710 	.word	0x00002710
 80035e0:	20000040 	.word	0x20000040
 80035e4:	40010400 	.word	0x40010400
 80035e8:	20000064 	.word	0x20000064
 80035ec:	4001001c 	.word	0x4001001c

080035f0 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){

			if (htim->Instance==TIM16)
 80035f0:	4b0f      	ldr	r3, [pc, #60]	; (8003630 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80035f2:	6802      	ldr	r2, [r0, #0]
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80035f4:	b570      	push	{r4, r5, r6, lr}
			if (htim->Instance==TIM16)
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d000      	beq.n	80035fc <HAL_TIM_PeriodElapsedCallback+0xc>

			 }

		}

}
 80035fa:	bd70      	pop	{r4, r5, r6, pc}
			if(inputSet == 1){
 80035fc:	4b0d      	ldr	r3, [pc, #52]	; (8003634 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d1fa      	bne.n	80035fa <HAL_TIM_PeriodElapsedCallback+0xa>
				 if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2)){
 8003604:	2090      	movs	r0, #144	; 0x90
 8003606:	2104      	movs	r1, #4
 8003608:	05c0      	lsls	r0, r0, #23
 800360a:	f7fd fda3 	bl	8001154 <HAL_GPIO_ReadPin>
 800360e:	1e04      	subs	r4, r0, #0
 8003610:	d1f3      	bne.n	80035fa <HAL_TIM_PeriodElapsedCallback+0xa>
		     HAL_TIM_IC_Stop_DMA(&htim15,TIM_CHANNEL_1);
 8003612:	4d09      	ldr	r5, [pc, #36]	; (8003638 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8003614:	2100      	movs	r1, #0
 8003616:	0028      	movs	r0, r5
 8003618:	f7fe fb66 	bl	8001ce8 <HAL_TIM_IC_Stop_DMA>
			 TIM15->CNT = 0;
 800361c:	4b07      	ldr	r3, [pc, #28]	; (800363c <HAL_TIM_PeriodElapsedCallback+0x4c>)
				 HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , IC_buffer_size);
 800361e:	4a08      	ldr	r2, [pc, #32]	; (8003640 <HAL_TIM_PeriodElapsedCallback+0x50>)
			 TIM15->CNT = 0;
 8003620:	625c      	str	r4, [r3, #36]	; 0x24
				 HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , IC_buffer_size);
 8003622:	4b08      	ldr	r3, [pc, #32]	; (8003644 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8003624:	2100      	movs	r1, #0
 8003626:	881b      	ldrh	r3, [r3, #0]
 8003628:	0028      	movs	r0, r5
 800362a:	f7fe fae9 	bl	8001c00 <HAL_TIM_IC_Start_DMA>
}
 800362e:	e7e4      	b.n	80035fa <HAL_TIM_PeriodElapsedCallback+0xa>
 8003630:	40014400 	.word	0x40014400
 8003634:	200000e8 	.word	0x200000e8
 8003638:	20000184 	.word	0x20000184
 800363c:	40014000 	.word	0x40014000
 8003640:	20000258 	.word	0x20000258
 8003644:	20000000 	.word	0x20000000

08003648 <startMotor>:

void startMotor() {
 8003648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800364a:	464f      	mov	r7, r9
 800364c:	4646      	mov	r6, r8
 800364e:	46d6      	mov	lr, sl

 startcount++;
 8003650:	4a21      	ldr	r2, [pc, #132]	; (80036d8 <startMotor+0x90>)
void startMotor() {
 8003652:	b5c0      	push	{r6, r7, lr}
 startcount++;
 8003654:	6813      	ldr	r3, [r2, #0]

    char decaystate = comp_pwm;
    sensorless = 0;
 8003656:	4e21      	ldr	r6, [pc, #132]	; (80036dc <startMotor+0x94>)
 startcount++;
 8003658:	3301      	adds	r3, #1
 800365a:	6013      	str	r3, [r2, #0]
    sensorless = 0;
 800365c:	2300      	movs	r3, #0
 800365e:	6033      	str	r3, [r6, #0]
	if (running == 0){
 8003660:	4b1f      	ldr	r3, [pc, #124]	; (80036e0 <startMotor+0x98>)
    char decaystate = comp_pwm;
 8003662:	4d20      	ldr	r5, [pc, #128]	; (80036e4 <startMotor+0x9c>)
	if (running == 0){
 8003664:	4698      	mov	r8, r3
 8003666:	681b      	ldr	r3, [r3, #0]
    char decaystate = comp_pwm;
 8003668:	782f      	ldrb	r7, [r5, #0]
	if (running == 0){
 800366a:	4699      	mov	r9, r3
 800366c:	2b00      	cmp	r3, #0
 800366e:	d12c      	bne.n	80036ca <startMotor+0x82>
		EXTI->IMR &= ~(1 << 21);
 8003670:	4c1d      	ldr	r4, [pc, #116]	; (80036e8 <startMotor+0xa0>)
 8003672:	491e      	ldr	r1, [pc, #120]	; (80036ec <startMotor+0xa4>)
 8003674:	6822      	ldr	r2, [r4, #0]
 8003676:	400a      	ands	r2, r1
 8003678:	6022      	str	r2, [r4, #0]
		EXTI->PR &=~(1 << 21);
 800367a:	6963      	ldr	r3, [r4, #20]
 800367c:	400b      	ands	r3, r1
 800367e:	6163      	str	r3, [r4, #20]


	//	HAL_COMP_Stop_IT(&hcomp1);
		comp_pwm = 1;
 8003680:	2301      	movs	r3, #1
 8003682:	469a      	mov	sl, r3
 8003684:	702b      	strb	r3, [r5, #0]


	commutate();
 8003686:	f7ff fec9 	bl	800341c <commutate>
//	HAL_Delay(5);
	//commutate();
	commutation_interval = 20000;
 800368a:	4a19      	ldr	r2, [pc, #100]	; (80036f0 <startMotor+0xa8>)
 800368c:	4b19      	ldr	r3, [pc, #100]	; (80036f4 <startMotor+0xac>)
 800368e:	601a      	str	r2, [r3, #0]
	TIM2->CNT = 0;
 8003690:	2380      	movs	r3, #128	; 0x80
 8003692:	464a      	mov	r2, r9
 8003694:	05db      	lsls	r3, r3, #23
 8003696:	625a      	str	r2, [r3, #36]	; 0x24
//	TIM2->CNT = 0;
//	TIM2->ARR = commutation_interval * 2;
	running = 1;
 8003698:	4643      	mov	r3, r8
 800369a:	4652      	mov	r2, sl
 800369c:	601a      	str	r2, [r3, #0]
//	if (HAL_COMP_Start_IT(&hcomp1) != HAL_OK) {
			/* Initialization Error */
//			Error_Handler();
//		}
	if(!polling_mode){
 800369e:	4b16      	ldr	r3, [pc, #88]	; (80036f8 <startMotor+0xb0>)
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d104      	bne.n	80036b0 <startMotor+0x68>
	EXTI->IMR |= (1 << 21);
 80036a6:	2380      	movs	r3, #128	; 0x80
 80036a8:	6822      	ldr	r2, [r4, #0]
 80036aa:	039b      	lsls	r3, r3, #14
 80036ac:	4313      	orrs	r3, r2
 80036ae:	6023      	str	r3, [r4, #0]
			/* Initialization Error */
			Error_Handler();
		}
	}
	comp_pwm = decaystate;    // return to normal
	sensorless = 1;
 80036b0:	2301      	movs	r3, #1
 80036b2:	6033      	str	r3, [r6, #0]
	startupcountdown =0;
 80036b4:	2300      	movs	r3, #0
 80036b6:	4a11      	ldr	r2, [pc, #68]	; (80036fc <startMotor+0xb4>)
	comp_pwm = decaystate;    // return to normal
 80036b8:	702f      	strb	r7, [r5, #0]
	startupcountdown =0;
 80036ba:	6013      	str	r3, [r2, #0]
	bemf_counts = 0;
 80036bc:	4a10      	ldr	r2, [pc, #64]	; (8003700 <startMotor+0xb8>)
 80036be:	6013      	str	r3, [r2, #0]

}
 80036c0:	bc1c      	pop	{r2, r3, r4}
 80036c2:	4690      	mov	r8, r2
 80036c4:	4699      	mov	r9, r3
 80036c6:	46a2      	mov	sl, r4
 80036c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (HAL_COMP_Start(&hcomp1) != HAL_OK) {
 80036ca:	480e      	ldr	r0, [pc, #56]	; (8003704 <startMotor+0xbc>)
 80036cc:	f7fd f8ca 	bl	8000864 <HAL_COMP_Start>
 80036d0:	2800      	cmp	r0, #0
 80036d2:	d0ed      	beq.n	80036b0 <startMotor+0x68>
 80036d4:	e7fe      	b.n	80036d4 <startMotor+0x8c>
 80036d6:	46c0      	nop			; (mov r8, r8)
 80036d8:	20000120 	.word	0x20000120
 80036dc:	20000110 	.word	0x20000110
 80036e0:	2000010c 	.word	0x2000010c
 80036e4:	20000018 	.word	0x20000018
 80036e8:	40010400 	.word	0x40010400
 80036ec:	ffdfffff 	.word	0xffdfffff
 80036f0:	00004e20 	.word	0x00004e20
 80036f4:	200000b4 	.word	0x200000b4
 80036f8:	200000f2 	.word	0x200000f2
 80036fc:	20000128 	.word	0x20000128
 8003700:	20000254 	.word	0x20000254
 8003704:	200001e4 	.word	0x200001e4

08003708 <HAL_COMP_TriggerCallback>:

}



void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp) {
 8003708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
//	thiszctime = TIM2->CNT;
//	EXTI->IMR &= (0 << 21);
//		EXTI->PR &=(0 << 21);
if ((TIM2->CNT < commutation_interval >> 1)&& bemf_counts > 3 ){
 800370a:	2380      	movs	r3, #128	; 0x80
void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp) {
 800370c:	46ce      	mov	lr, r9
 800370e:	4647      	mov	r7, r8
if ((TIM2->CNT < commutation_interval >> 1)&& bemf_counts > 3 ){
 8003710:	4d4a      	ldr	r5, [pc, #296]	; (800383c <HAL_COMP_TriggerCallback+0x134>)
 8003712:	05db      	lsls	r3, r3, #23
 8003714:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003716:	682b      	ldr	r3, [r5, #0]
void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp) {
 8003718:	b580      	push	{r7, lr}
if ((TIM2->CNT < commutation_interval >> 1)&& bemf_counts > 3 ){
 800371a:	105b      	asrs	r3, r3, #1
 800371c:	429a      	cmp	r2, r3
 800371e:	d203      	bcs.n	8003728 <HAL_COMP_TriggerCallback+0x20>
 8003720:	4b47      	ldr	r3, [pc, #284]	; (8003840 <HAL_COMP_TriggerCallback+0x138>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2b03      	cmp	r3, #3
 8003726:	dc24      	bgt.n	8003772 <HAL_COMP_TriggerCallback+0x6a>

//	EXTI->IMR |= (1 << 21);
	return;
}
while (TIM2->CNT - thiszctime < filter_delay){
 8003728:	2280      	movs	r2, #128	; 0x80
 800372a:	4e46      	ldr	r6, [pc, #280]	; (8003844 <HAL_COMP_TriggerCallback+0x13c>)
 800372c:	4b46      	ldr	r3, [pc, #280]	; (8003848 <HAL_COMP_TriggerCallback+0x140>)
 800372e:	6830      	ldr	r0, [r6, #0]
 8003730:	6819      	ldr	r1, [r3, #0]
 8003732:	05d2      	lsls	r2, r2, #23
 8003734:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003736:	1a1b      	subs	r3, r3, r0
 8003738:	4299      	cmp	r1, r3
 800373a:	d8fb      	bhi.n	8003734 <HAL_COMP_TriggerCallback+0x2c>

}
compit +=1;
 800373c:	4a43      	ldr	r2, [pc, #268]	; (800384c <HAL_COMP_TriggerCallback+0x144>)
 800373e:	7813      	ldrb	r3, [r2, #0]
 8003740:	3301      	adds	r3, #1
 8003742:	b2db      	uxtb	r3, r3
 8003744:	7013      	strb	r3, [r2, #0]
if (compit > 100){
 8003746:	2b64      	cmp	r3, #100	; 0x64
 8003748:	d817      	bhi.n	800377a <HAL_COMP_TriggerCallback+0x72>
	return;
}
//	while(TIM2->CNT - thiszctime  < filter_delay){
//
//	}
		if (rising){
 800374a:	4b41      	ldr	r3, [pc, #260]	; (8003850 <HAL_COMP_TriggerCallback+0x148>)
		//	advancedivisor = advancedivisorup;
			for (int i = 0; i < filter_level; i++){
 800374c:	4f41      	ldr	r7, [pc, #260]	; (8003854 <HAL_COMP_TriggerCallback+0x14c>)
		if (rising){
 800374e:	681c      	ldr	r4, [r3, #0]
			for (int i = 0; i < filter_level; i++){
 8003750:	783b      	ldrb	r3, [r7, #0]
		if (rising){
 8003752:	2c00      	cmp	r4, #0
 8003754:	d15c      	bne.n	8003810 <HAL_COMP_TriggerCallback+0x108>
			}


		}else{
		//	advancedivisor = advancedivisordown;
			for (int i = 0; i < filter_level; i++){
 8003756:	2b00      	cmp	r3, #0
 8003758:	d01b      	beq.n	8003792 <HAL_COMP_TriggerCallback+0x8a>
 800375a:	4b3f      	ldr	r3, [pc, #252]	; (8003858 <HAL_COMP_TriggerCallback+0x150>)
 800375c:	4698      	mov	r8, r3
 800375e:	e003      	b.n	8003768 <HAL_COMP_TriggerCallback+0x60>
 8003760:	783b      	ldrb	r3, [r7, #0]
 8003762:	3401      	adds	r4, #1
 8003764:	42a3      	cmp	r3, r4
 8003766:	dd14      	ble.n	8003792 <HAL_COMP_TriggerCallback+0x8a>
			if (HAL_COMP_GetOutputLevel(&hcomp1) == COMP_OUTPUTLEVEL_LOW){
 8003768:	4640      	mov	r0, r8
 800376a:	f7fd f911 	bl	8000990 <HAL_COMP_GetOutputLevel>
 800376e:	2800      	cmp	r0, #0
 8003770:	d1f6      	bne.n	8003760 <HAL_COMP_TriggerCallback+0x58>
			EXTI->IMR |= (1 << 21);
//				if (HAL_COMP_Start_IT(&hcomp1) != HAL_OK) {
//						/* Initialization Error */
//			//			Error_Handler();
//					}
}
 8003772:	bc0c      	pop	{r2, r3}
 8003774:	4690      	mov	r8, r2
 8003776:	4699      	mov	r9, r3
 8003778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	EXTI->IMR &= ~(1 << 21);
 800377a:	4b38      	ldr	r3, [pc, #224]	; (800385c <HAL_COMP_TriggerCallback+0x154>)
 800377c:	4838      	ldr	r0, [pc, #224]	; (8003860 <HAL_COMP_TriggerCallback+0x158>)
 800377e:	6819      	ldr	r1, [r3, #0]
 8003780:	4001      	ands	r1, r0
 8003782:	6019      	str	r1, [r3, #0]
	EXTI->PR &=~(1 << 21);
 8003784:	695a      	ldr	r2, [r3, #20]
 8003786:	4002      	ands	r2, r0
 8003788:	615a      	str	r2, [r3, #20]
	error = 1;
 800378a:	2201      	movs	r2, #1
 800378c:	4b35      	ldr	r3, [pc, #212]	; (8003864 <HAL_COMP_TriggerCallback+0x15c>)
 800378e:	601a      	str	r2, [r3, #0]
	return;
 8003790:	e7ef      	b.n	8003772 <HAL_COMP_TriggerCallback+0x6a>
		thiszctime = TIM2->CNT;
 8003792:	2280      	movs	r2, #128	; 0x80
 8003794:	05d2      	lsls	r2, r2, #23
 8003796:	6a53      	ldr	r3, [r2, #36]	; 0x24
	zctimeout = 0;
 8003798:	4933      	ldr	r1, [pc, #204]	; (8003868 <HAL_COMP_TriggerCallback+0x160>)
		thiszctime = TIM2->CNT;
 800379a:	6033      	str	r3, [r6, #0]
	TIM2->CNT = 0;
 800379c:	2300      	movs	r3, #0
 800379e:	4c33      	ldr	r4, [pc, #204]	; (800386c <HAL_COMP_TriggerCallback+0x164>)
 80037a0:	6253      	str	r3, [r2, #36]	; 0x24
	zctimeout = 0;
 80037a2:	600b      	str	r3, [r1, #0]
 80037a4:	6821      	ldr	r1, [r4, #0]
	while (TIM2->CNT  < waitTime){
 80037a6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80037a8:	428b      	cmp	r3, r1
 80037aa:	d3fc      	bcc.n	80037a6 <HAL_COMP_TriggerCallback+0x9e>
	EXTI->IMR &= ~(1 << 21);
 80037ac:	4b2b      	ldr	r3, [pc, #172]	; (800385c <HAL_COMP_TriggerCallback+0x154>)
 80037ae:	482c      	ldr	r0, [pc, #176]	; (8003860 <HAL_COMP_TriggerCallback+0x158>)
 80037b0:	6819      	ldr	r1, [r3, #0]
 80037b2:	4001      	ands	r1, r0
 80037b4:	6019      	str	r1, [r3, #0]
	EXTI->PR &=~(1 << 21);
 80037b6:	695a      	ldr	r2, [r3, #20]
 80037b8:	4002      	ands	r2, r0
 80037ba:	615a      	str	r2, [r3, #20]
	commutate();
 80037bc:	f7ff fe2e 	bl	800341c <commutate>
	commutation_interval = ((2*commutation_interval) + thiszctime) / 3;
 80037c0:	682b      	ldr	r3, [r5, #0]
 80037c2:	2103      	movs	r1, #3
 80037c4:	0058      	lsls	r0, r3, #1
 80037c6:	6833      	ldr	r3, [r6, #0]
 80037c8:	18c0      	adds	r0, r0, r3
 80037ca:	f7fc fd27 	bl	800021c <__divsi3>
		degree_time = commutation_interval >> 5;                          // about 1.85 degrees per unit
 80037ce:	4b28      	ldr	r3, [pc, #160]	; (8003870 <HAL_COMP_TriggerCallback+0x168>)
 80037d0:	1142      	asrs	r2, r0, #5
 80037d2:	601a      	str	r2, [r3, #0]
			advance = degree_time * advance_multiplier;                     //  * 16 would be about 30 degrees
 80037d4:	4b27      	ldr	r3, [pc, #156]	; (8003874 <HAL_COMP_TriggerCallback+0x16c>)
	commutation_interval = ((2*commutation_interval) + thiszctime) / 3;
 80037d6:	6028      	str	r0, [r5, #0]
			advance = degree_time * advance_multiplier;                     //  * 16 would be about 30 degrees
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	435a      	muls	r2, r3
 80037dc:	4b26      	ldr	r3, [pc, #152]	; (8003878 <HAL_COMP_TriggerCallback+0x170>)
 80037de:	601a      	str	r2, [r3, #0]
	waitTime = (commutation_interval >> 1) - advance;
 80037e0:	1043      	asrs	r3, r0, #1
 80037e2:	1a9b      	subs	r3, r3, r2
	if (waitTime < 0){
 80037e4:	d427      	bmi.n	8003836 <HAL_COMP_TriggerCallback+0x12e>
			blanktime = commutation_interval >>3 ;                               // divided by 8
 80037e6:	4a25      	ldr	r2, [pc, #148]	; (800387c <HAL_COMP_TriggerCallback+0x174>)
			bemf_counts++;
 80037e8:	4915      	ldr	r1, [pc, #84]	; (8003840 <HAL_COMP_TriggerCallback+0x138>)
			blanktime = commutation_interval >>3 ;                               // divided by 8
 80037ea:	10c0      	asrs	r0, r0, #3
 80037ec:	6010      	str	r0, [r2, #0]
			bemf_counts++;
 80037ee:	680a      	ldr	r2, [r1, #0]
			waitTime = 0;
 80037f0:	6023      	str	r3, [r4, #0]
			bemf_counts++;
 80037f2:	3201      	adds	r2, #1
 80037f4:	600a      	str	r2, [r1, #0]
			while (TIM2->CNT < waitTime + blanktime){
 80037f6:	2280      	movs	r2, #128	; 0x80
 80037f8:	18c0      	adds	r0, r0, r3
 80037fa:	05d2      	lsls	r2, r2, #23
 80037fc:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80037fe:	4283      	cmp	r3, r0
 8003800:	d3fc      	bcc.n	80037fc <HAL_COMP_TriggerCallback+0xf4>
			EXTI->IMR |= (1 << 21);
 8003802:	2380      	movs	r3, #128	; 0x80
 8003804:	4a15      	ldr	r2, [pc, #84]	; (800385c <HAL_COMP_TriggerCallback+0x154>)
 8003806:	039b      	lsls	r3, r3, #14
 8003808:	6811      	ldr	r1, [r2, #0]
 800380a:	430b      	orrs	r3, r1
 800380c:	6013      	str	r3, [r2, #0]
 800380e:	e7b0      	b.n	8003772 <HAL_COMP_TriggerCallback+0x6a>
			for (int i = 0; i < filter_level; i++){
 8003810:	2b00      	cmp	r3, #0
 8003812:	d0be      	beq.n	8003792 <HAL_COMP_TriggerCallback+0x8a>
 8003814:	4b10      	ldr	r3, [pc, #64]	; (8003858 <HAL_COMP_TriggerCallback+0x150>)
 8003816:	2400      	movs	r4, #0
 8003818:	4698      	mov	r8, r3
			if (HAL_COMP_GetOutputLevel(&hcomp1) == COMP_OUTPUTLEVEL_HIGH){
 800381a:	2380      	movs	r3, #128	; 0x80
 800381c:	01db      	lsls	r3, r3, #7
 800381e:	4699      	mov	r9, r3
 8003820:	e003      	b.n	800382a <HAL_COMP_TriggerCallback+0x122>
			for (int i = 0; i < filter_level; i++){
 8003822:	783b      	ldrb	r3, [r7, #0]
 8003824:	3401      	adds	r4, #1
 8003826:	42a3      	cmp	r3, r4
 8003828:	ddb3      	ble.n	8003792 <HAL_COMP_TriggerCallback+0x8a>
			if (HAL_COMP_GetOutputLevel(&hcomp1) == COMP_OUTPUTLEVEL_HIGH){
 800382a:	4640      	mov	r0, r8
 800382c:	f7fd f8b0 	bl	8000990 <HAL_COMP_GetOutputLevel>
 8003830:	4548      	cmp	r0, r9
 8003832:	d1f6      	bne.n	8003822 <HAL_COMP_TriggerCallback+0x11a>
 8003834:	e79d      	b.n	8003772 <HAL_COMP_TriggerCallback+0x6a>
			waitTime = 0;
 8003836:	2300      	movs	r3, #0
 8003838:	e7d5      	b.n	80037e6 <HAL_COMP_TriggerCallback+0xde>
 800383a:	46c0      	nop			; (mov r8, r8)
 800383c:	200000b4 	.word	0x200000b4
 8003840:	20000254 	.word	0x20000254
 8003844:	20000134 	.word	0x20000134
 8003848:	20000028 	.word	0x20000028
 800384c:	200000bc 	.word	0x200000bc
 8003850:	20000040 	.word	0x20000040
 8003854:	2000002c 	.word	0x2000002c
 8003858:	200001e4 	.word	0x200001e4
 800385c:	40010400 	.word	0x40010400
 8003860:	ffdfffff 	.word	0xffdfffff
 8003864:	200000d4 	.word	0x200000d4
 8003868:	20000144 	.word	0x20000144
 800386c:	20000140 	.word	0x20000140
 8003870:	20000170 	.word	0x20000170
 8003874:	2000000c 	.word	0x2000000c
 8003878:	200000a0 	.word	0x200000a0
 800387c:	20000358 	.word	0x20000358

08003880 <playInputTune>:
	HAL_Delay(100);
	allOff();
	TIM1->PSC = 0;
}

void playInputTune(){
 8003880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003882:	46de      	mov	lr, fp
 8003884:	4657      	mov	r7, sl
 8003886:	464e      	mov	r6, r9
 8003888:	4645      	mov	r5, r8
	TIM1->PSC = 100;
 800388a:	2264      	movs	r2, #100	; 0x64
void playInputTune(){
 800388c:	b5e0      	push	{r5, r6, r7, lr}
	TIM1->PSC = 100;
 800388e:	4b4a      	ldr	r3, [pc, #296]	; (80039b8 <playInputTune+0x138>)
 8003890:	629a      	str	r2, [r3, #40]	; 0x28
	TIM1->CCR1 = 5;
 8003892:	3a5f      	subs	r2, #95	; 0x5f
 8003894:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 5;
 8003896:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 5;
 8003898:	63da      	str	r2, [r3, #60]	; 0x3c
		if(!comp_pwm  || prop_brake_active){            // for future
 800389a:	4b48      	ldr	r3, [pc, #288]	; (80039bc <playInputTune+0x13c>)
 800389c:	4a48      	ldr	r2, [pc, #288]	; (80039c0 <playInputTune+0x140>)
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00a      	beq.n	80038ba <playInputTune+0x3a>
 80038a4:	4b47      	ldr	r3, [pc, #284]	; (80039c4 <playInputTune+0x144>)
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d106      	bne.n	80038ba <playInputTune+0x3a>
 80038ac:	2103      	movs	r1, #3
 80038ae:	6813      	ldr	r3, [r2, #0]
 80038b0:	438b      	bics	r3, r1
 80038b2:	3901      	subs	r1, #1
 80038b4:	430b      	orrs	r3, r1
 80038b6:	6013      	str	r3, [r2, #0]
 80038b8:	e006      	b.n	80038c8 <playInputTune+0x48>
 80038ba:	2103      	movs	r1, #3
 80038bc:	6813      	ldr	r3, [r2, #0]
 80038be:	438b      	bics	r3, r1
 80038c0:	3902      	subs	r1, #2
 80038c2:	430b      	orrs	r3, r1
 80038c4:	6013      	str	r3, [r2, #0]
		GPIOB->BRR = GPIO_PIN_0;
 80038c6:	6291      	str	r1, [r2, #40]	; 0x28
 80038c8:	2490      	movs	r4, #144	; 0x90
 80038ca:	05e4      	lsls	r4, r4, #23
 80038cc:	6822      	ldr	r2, [r4, #0]
 80038ce:	4b3e      	ldr	r3, [pc, #248]	; (80039c8 <playInputTune+0x148>)
 80038d0:	2780      	movs	r7, #128	; 0x80
 80038d2:	469b      	mov	fp, r3
 80038d4:	401a      	ands	r2, r3
 80038d6:	2380      	movs	r3, #128	; 0x80
 80038d8:	031b      	lsls	r3, r3, #12
 80038da:	4313      	orrs	r3, r2
 80038dc:	6023      	str	r3, [r4, #0]
 80038de:	6823      	ldr	r3, [r4, #0]
 80038e0:	4a3a      	ldr	r2, [pc, #232]	; (80039cc <playInputTune+0x14c>)
 80038e2:	01ff      	lsls	r7, r7, #7
 80038e4:	4013      	ands	r3, r2
 80038e6:	433b      	orrs	r3, r7
 80038e8:	6023      	str	r3, [r4, #0]
		GPIOA->BRR = GPIO_PIN_7;
 80038ea:	2380      	movs	r3, #128	; 0x80
 80038ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80038ee:	6823      	ldr	r3, [r4, #0]
 80038f0:	4692      	mov	sl, r2
 80038f2:	4a37      	ldr	r2, [pc, #220]	; (80039d0 <playInputTune+0x150>)
 80038f4:	4d32      	ldr	r5, [pc, #200]	; (80039c0 <playInputTune+0x140>)
 80038f6:	4013      	ands	r3, r2
 80038f8:	2280      	movs	r2, #128	; 0x80
 80038fa:	0252      	lsls	r2, r2, #9
 80038fc:	4313      	orrs	r3, r2
 80038fe:	6023      	str	r3, [r4, #0]
		GPIOA->BRR = GPIO_PIN_8;
 8003900:	2380      	movs	r3, #128	; 0x80
 8003902:	220c      	movs	r2, #12
 8003904:	005b      	lsls	r3, r3, #1
 8003906:	62a3      	str	r3, [r4, #40]	; 0x28
 8003908:	682b      	ldr	r3, [r5, #0]
 800390a:	2680      	movs	r6, #128	; 0x80
 800390c:	4393      	bics	r3, r2
 800390e:	3a08      	subs	r2, #8
 8003910:	4313      	orrs	r3, r2
 8003912:	602b      	str	r3, [r5, #0]
		GPIOB->BSRR = GPIO_PIN_1;
 8003914:	2302      	movs	r3, #2
 8003916:	61ab      	str	r3, [r5, #24]
 8003918:	6823      	ldr	r3, [r4, #0]
 800391a:	4a2e      	ldr	r2, [pc, #184]	; (80039d4 <playInputTune+0x154>)
 800391c:	0376      	lsls	r6, r6, #13
 800391e:	4013      	ands	r3, r2
 8003920:	4333      	orrs	r3, r6
 8003922:	6023      	str	r3, [r4, #0]
		GPIOA->BRR = GPIO_PIN_10;
 8003924:	2380      	movs	r3, #128	; 0x80
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	62a3      	str	r3, [r4, #40]	; 0x28
	comStep(6);
	HAL_Delay(100);
 800392a:	2064      	movs	r0, #100	; 0x64
		GPIOA->BRR = GPIO_PIN_10;
 800392c:	4699      	mov	r9, r3
	HAL_Delay(100);
 800392e:	f7fc fd91 	bl	8000454 <HAL_Delay>
	TIM1->PSC = 50;
 8003932:	4b21      	ldr	r3, [pc, #132]	; (80039b8 <playInputTune+0x138>)
	HAL_Delay(100);
 8003934:	2064      	movs	r0, #100	; 0x64
	TIM1->PSC = 50;
 8003936:	4698      	mov	r8, r3
 8003938:	2332      	movs	r3, #50	; 0x32
 800393a:	4642      	mov	r2, r8
 800393c:	6293      	str	r3, [r2, #40]	; 0x28
	HAL_Delay(100);
 800393e:	f7fc fd89 	bl	8000454 <HAL_Delay>
 8003942:	2203      	movs	r2, #3
 8003944:	682b      	ldr	r3, [r5, #0]
 8003946:	4393      	bics	r3, r2
 8003948:	3a02      	subs	r2, #2
 800394a:	4313      	orrs	r3, r2
 800394c:	602b      	str	r3, [r5, #0]
 800394e:	465b      	mov	r3, fp
		GPIOB->BRR = GPIO_PIN_0;
 8003950:	62aa      	str	r2, [r5, #40]	; 0x28
 8003952:	6822      	ldr	r2, [r4, #0]
 8003954:	401a      	ands	r2, r3
 8003956:	2380      	movs	r3, #128	; 0x80
 8003958:	02db      	lsls	r3, r3, #11
 800395a:	4313      	orrs	r3, r2
 800395c:	6023      	str	r3, [r4, #0]
		GPIOA->BRR = GPIO_PIN_9;
 800395e:	2380      	movs	r3, #128	; 0x80
 8003960:	4652      	mov	r2, sl
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	62a3      	str	r3, [r4, #40]	; 0x28
 8003966:	6823      	ldr	r3, [r4, #0]
 8003968:	4013      	ands	r3, r2
 800396a:	431f      	orrs	r7, r3
		GPIOA->BRR = GPIO_PIN_7;
 800396c:	2380      	movs	r3, #128	; 0x80
 800396e:	6027      	str	r7, [r4, #0]
 8003970:	62a3      	str	r3, [r4, #40]	; 0x28
 8003972:	6823      	ldr	r3, [r4, #0]
 8003974:	4a16      	ldr	r2, [pc, #88]	; (80039d0 <playInputTune+0x150>)
 8003976:	4013      	ands	r3, r2
 8003978:	2280      	movs	r2, #128	; 0x80
 800397a:	0252      	lsls	r2, r2, #9
 800397c:	4313      	orrs	r3, r2
 800397e:	6023      	str	r3, [r4, #0]
		GPIOA->BRR = GPIO_PIN_8;
 8003980:	2380      	movs	r3, #128	; 0x80
 8003982:	220c      	movs	r2, #12
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	62a3      	str	r3, [r4, #40]	; 0x28
 8003988:	682b      	ldr	r3, [r5, #0]
 800398a:	4393      	bics	r3, r2
 800398c:	3a08      	subs	r2, #8
 800398e:	4313      	orrs	r3, r2
 8003990:	602b      	str	r3, [r5, #0]
		GPIOB->BRR = GPIO_PIN_1;
 8003992:	2302      	movs	r3, #2
 8003994:	62ab      	str	r3, [r5, #40]	; 0x28
 8003996:	6823      	ldr	r3, [r4, #0]
 8003998:	4a0e      	ldr	r2, [pc, #56]	; (80039d4 <playInputTune+0x154>)
 800399a:	4013      	ands	r3, r2
 800399c:	431e      	orrs	r6, r3
		GPIOA->BRR = GPIO_PIN_10;
 800399e:	464b      	mov	r3, r9
 80039a0:	6026      	str	r6, [r4, #0]
	allOff();
	TIM1->PSC = 0;
 80039a2:	4642      	mov	r2, r8
		GPIOA->BRR = GPIO_PIN_10;
 80039a4:	62a3      	str	r3, [r4, #40]	; 0x28
	TIM1->PSC = 0;
 80039a6:	2300      	movs	r3, #0
 80039a8:	6293      	str	r3, [r2, #40]	; 0x28
}
 80039aa:	bc3c      	pop	{r2, r3, r4, r5}
 80039ac:	4690      	mov	r8, r2
 80039ae:	4699      	mov	r9, r3
 80039b0:	46a2      	mov	sl, r4
 80039b2:	46ab      	mov	fp, r5
 80039b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039b6:	46c0      	nop			; (mov r8, r8)
 80039b8:	40012c00 	.word	0x40012c00
 80039bc:	20000018 	.word	0x20000018
 80039c0:	48000400 	.word	0x48000400
 80039c4:	200000f4 	.word	0x200000f4
 80039c8:	fff3ffff 	.word	0xfff3ffff
 80039cc:	ffff3fff 	.word	0xffff3fff
 80039d0:	fffcffff 	.word	0xfffcffff
 80039d4:	ffcfffff 	.word	0xffcfffff

080039d8 <HAL_ADC_ConvCpltCallback>:

void getADCs(){
	//voltageraw = ADC1ConvertedValues[0];
	currentraw = ADC1ConvertedValues[0];
 80039d8:	4b03      	ldr	r3, [pc, #12]	; (80039e8 <HAL_ADC_ConvCpltCallback+0x10>)
 80039da:	4a04      	ldr	r2, [pc, #16]	; (80039ec <HAL_ADC_ConvCpltCallback+0x14>)
 80039dc:	6819      	ldr	r1, [r3, #0]
 80039de:	6011      	str	r1, [r2, #0]
	tempraw = ADC1ConvertedValues[1];
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	4b03      	ldr	r3, [pc, #12]	; (80039f0 <HAL_ADC_ConvCpltCallback+0x18>)
 80039e4:	601a      	str	r2, [r3, #0]


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
	getADCs();
}
 80039e6:	4770      	bx	lr
 80039e8:	20000090 	.word	0x20000090
 80039ec:	200000c4 	.word	0x200000c4
 80039f0:	20000130 	.word	0x20000130

080039f4 <detectInput>:


void detectInput(){
 80039f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039f6:	4645      	mov	r5, r8
 80039f8:	46de      	mov	lr, fp
 80039fa:	4657      	mov	r7, sl
 80039fc:	464e      	mov	r6, r9
	smallestnumber = 20000;
 80039fe:	4b4b      	ldr	r3, [pc, #300]	; (8003b2c <detectInput+0x138>)
void detectInput(){
 8003a00:	b5e0      	push	{r5, r6, r7, lr}
	smallestnumber = 20000;
 8003a02:	4d4b      	ldr	r5, [pc, #300]	; (8003b30 <detectInput+0x13c>)
 8003a04:	469b      	mov	fp, r3
 8003a06:	601d      	str	r5, [r3, #0]
	dshot = 0;
 8003a08:	4b4a      	ldr	r3, [pc, #296]	; (8003b34 <detectInput+0x140>)
 8003a0a:	4698      	mov	r8, r3
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	4642      	mov	r2, r8
 8003a10:	7013      	strb	r3, [r2, #0]
	proshot = 0;
 8003a12:	4a49      	ldr	r2, [pc, #292]	; (8003b38 <detectInput+0x144>)
 8003a14:	7013      	strb	r3, [r2, #0]
 8003a16:	4691      	mov	r9, r2
	multishot = 0;
 8003a18:	4a48      	ldr	r2, [pc, #288]	; (8003b3c <detectInput+0x148>)
 8003a1a:	7013      	strb	r3, [r2, #0]
	oneshot42 = 0;
 8003a1c:	4a48      	ldr	r2, [pc, #288]	; (8003b40 <detectInput+0x14c>)
 8003a1e:	7013      	strb	r3, [r2, #0]
	oneshot125 = 0;
 8003a20:	4a48      	ldr	r2, [pc, #288]	; (8003b44 <detectInput+0x150>)
 8003a22:	7013      	strb	r3, [r2, #0]
	servoPwm = 0;
 8003a24:	4a48      	ldr	r2, [pc, #288]	; (8003b48 <detectInput+0x154>)
 8003a26:	7013      	strb	r3, [r2, #0]
//	int lastnumber = dma_buffer[0];
	for ( int j = 1 ; j < input_buffer_size; j++){
 8003a28:	4b48      	ldr	r3, [pc, #288]	; (8003b4c <detectInput+0x158>)
	servoPwm = 0;
 8003a2a:	4692      	mov	sl, r2
	for ( int j = 1 ; j < input_buffer_size; j++){
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	dc00      	bgt.n	8003a34 <detectInput+0x40>
 8003a32:	e077      	b.n	8003b24 <detectInput+0x130>
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	469c      	mov	ip, r3
 8003a38:	002f      	movs	r7, r5
 8003a3a:	4945      	ldr	r1, [pc, #276]	; (8003b50 <detectInput+0x15c>)
 8003a3c:	1f0a      	subs	r2, r1, #4
 8003a3e:	4494      	add	ip, r2

		if(dma_buffer[j]  < smallestnumber){ // blank space
 8003a40:	680b      	ldr	r3, [r1, #0]
 8003a42:	003a      	movs	r2, r7
 8003a44:	001c      	movs	r4, r3
 8003a46:	42bb      	cmp	r3, r7
 8003a48:	d300      	bcc.n	8003a4c <detectInput+0x58>
 8003a4a:	003c      	movs	r4, r7
 8003a4c:	0027      	movs	r7, r4
 8003a4e:	001e      	movs	r6, r3
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d900      	bls.n	8003a56 <detectInput+0x62>
 8003a54:	0016      	movs	r6, r2
 8003a56:	0028      	movs	r0, r5
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d200      	bcs.n	8003a5e <detectInput+0x6a>
 8003a5c:	0018      	movs	r0, r3
 8003a5e:	3104      	adds	r1, #4
 8003a60:	0005      	movs	r5, r0
	for ( int j = 1 ; j < input_buffer_size; j++){
 8003a62:	4561      	cmp	r1, ip
 8003a64:	d1ec      	bne.n	8003a40 <detectInput+0x4c>
 8003a66:	465b      	mov	r3, fp
 8003a68:	6018      	str	r0, [r3, #0]
			smallestnumber = dma_buffer[j];
		}

	}

	if ((smallestnumber > 3)&&(smallestnumber < 22)){
 8003a6a:	1f33      	subs	r3, r6, #4
 8003a6c:	2b11      	cmp	r3, #17
 8003a6e:	d82e      	bhi.n	8003ace <detectInput+0xda>
		dshot = 1;
 8003a70:	2301      	movs	r3, #1
 8003a72:	4642      	mov	r2, r8
 8003a74:	7013      	strb	r3, [r2, #0]
		TIM15->PSC = 20;
 8003a76:	2214      	movs	r2, #20
 8003a78:	4b36      	ldr	r3, [pc, #216]	; (8003b54 <detectInput+0x160>)
		IC_buffer_size = 32;
 8003a7a:	4d37      	ldr	r5, [pc, #220]	; (8003b58 <detectInput+0x164>)
		TIM15->PSC = 20;
 8003a7c:	629a      	str	r2, [r3, #40]	; 0x28
		IC_buffer_size = 32;
 8003a7e:	2320      	movs	r3, #32
		TIM16->ARR = 8000;
 8003a80:	22fa      	movs	r2, #250	; 0xfa
		IC_buffer_size = 32;
 8003a82:	602b      	str	r3, [r5, #0]
		TIM16->ARR = 8000;
 8003a84:	4b35      	ldr	r3, [pc, #212]	; (8003b5c <detectInput+0x168>)
 8003a86:	0152      	lsls	r2, r2, #5
 8003a88:	62da      	str	r2, [r3, #44]	; 0x2c
 8003a8a:	0033      	movs	r3, r6
 8003a8c:	3b29      	subs	r3, #41	; 0x29
			TIM16->PSC = 1;
			TIM16->ARR = 8000;
			IC_buffer_size = 32;
		}

	if ((smallestnumber > 40 )&&(smallestnumber < 80)){
 8003a8e:	2b26      	cmp	r3, #38	; 0x26
 8003a90:	d830      	bhi.n	8003af4 <detectInput+0x100>
		proshot = 1;
 8003a92:	2301      	movs	r3, #1
 8003a94:	464a      	mov	r2, r9
 8003a96:	7013      	strb	r3, [r2, #0]
		TIM15->PSC = 5;
 8003a98:	2205      	movs	r2, #5
 8003a9a:	4b2e      	ldr	r3, [pc, #184]	; (8003b54 <detectInput+0x160>)
 8003a9c:	629a      	str	r2, [r3, #40]	; 0x28
		IC_buffer_size = 8;
 8003a9e:	2308      	movs	r3, #8
		TIM16->ARR = 8000;
 8003aa0:	22fa      	movs	r2, #250	; 0xfa
		IC_buffer_size = 8;
 8003aa2:	602b      	str	r3, [r5, #0]
		TIM16->ARR = 8000;
 8003aa4:	4b2d      	ldr	r3, [pc, #180]	; (8003b5c <detectInput+0x168>)
 8003aa6:	0152      	lsls	r2, r2, #5
 8003aa8:	62da      	str	r2, [r3, #44]	; 0x2c
		HAL_TIM_Base_Stop(&htim16);
		IC_buffer_size = 6;

	}

	if (smallestnumber == 0){
 8003aaa:	465b      	mov	r3, fp
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d131      	bne.n	8003b16 <detectInput+0x122>
		inputSet = 0;
 8003ab2:	4a2b      	ldr	r2, [pc, #172]	; (8003b60 <detectInput+0x16c>)
 8003ab4:	7013      	strb	r3, [r2, #0]
		inputSet = 1;

		HAL_Delay(50);
		//	playInputTune();
	}
	HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , IC_buffer_size);
 8003ab6:	882b      	ldrh	r3, [r5, #0]
 8003ab8:	4a2a      	ldr	r2, [pc, #168]	; (8003b64 <detectInput+0x170>)
 8003aba:	2100      	movs	r1, #0
 8003abc:	482a      	ldr	r0, [pc, #168]	; (8003b68 <detectInput+0x174>)
 8003abe:	f7fe f89f 	bl	8001c00 <HAL_TIM_IC_Start_DMA>
}
 8003ac2:	bc3c      	pop	{r2, r3, r4, r5}
 8003ac4:	4690      	mov	r8, r2
 8003ac6:	4699      	mov	r9, r3
 8003ac8:	46a2      	mov	sl, r4
 8003aca:	46ab      	mov	fp, r5
 8003acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((smallestnumber > 22)&&(smallestnumber < 30)){
 8003ace:	3e17      	subs	r6, #23
 8003ad0:	3b25      	subs	r3, #37	; 0x25
 8003ad2:	2e06      	cmp	r6, #6
 8003ad4:	d828      	bhi.n	8003b28 <detectInput+0x134>
			dshot = 1;
 8003ad6:	2001      	movs	r0, #1
 8003ad8:	4642      	mov	r2, r8
 8003ada:	7010      	strb	r0, [r2, #0]
			TIM15->PSC = 32;
 8003adc:	2220      	movs	r2, #32
 8003ade:	491d      	ldr	r1, [pc, #116]	; (8003b54 <detectInput+0x160>)
			IC_buffer_size = 32;
 8003ae0:	4d1d      	ldr	r5, [pc, #116]	; (8003b58 <detectInput+0x164>)
			TIM15->PSC = 32;
 8003ae2:	628a      	str	r2, [r1, #40]	; 0x28
			TIM16->PSC = 1;
 8003ae4:	491d      	ldr	r1, [pc, #116]	; (8003b5c <detectInput+0x168>)
 8003ae6:	6288      	str	r0, [r1, #40]	; 0x28
			TIM16->ARR = 8000;
 8003ae8:	20fa      	movs	r0, #250	; 0xfa
 8003aea:	0140      	lsls	r0, r0, #5
 8003aec:	62c8      	str	r0, [r1, #44]	; 0x2c
			IC_buffer_size = 32;
 8003aee:	602a      	str	r2, [r5, #0]
	if ((smallestnumber > 40 )&&(smallestnumber < 80)){
 8003af0:	2b26      	cmp	r3, #38	; 0x26
 8003af2:	d9ce      	bls.n	8003a92 <detectInput+0x9e>
	if (smallestnumber > 100){
 8003af4:	2c64      	cmp	r4, #100	; 0x64
 8003af6:	ddd8      	ble.n	8003aaa <detectInput+0xb6>
		servoPwm = 1;
 8003af8:	2301      	movs	r3, #1
 8003afa:	4652      	mov	r2, sl
 8003afc:	7013      	strb	r3, [r2, #0]
		TIM15->PSC = 47;
 8003afe:	222f      	movs	r2, #47	; 0x2f
 8003b00:	4b14      	ldr	r3, [pc, #80]	; (8003b54 <detectInput+0x160>)
		HAL_TIM_Base_Stop(&htim16);
 8003b02:	481a      	ldr	r0, [pc, #104]	; (8003b6c <detectInput+0x178>)
		TIM15->PSC = 47;
 8003b04:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_TIM_Base_Stop(&htim16);
 8003b06:	f7fd fef5 	bl	80018f4 <HAL_TIM_Base_Stop>
		IC_buffer_size = 6;
 8003b0a:	2306      	movs	r3, #6
 8003b0c:	602b      	str	r3, [r5, #0]
	if (smallestnumber == 0){
 8003b0e:	465b      	mov	r3, fp
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d0cd      	beq.n	8003ab2 <detectInput+0xbe>
		inputSet = 1;
 8003b16:	2201      	movs	r2, #1
 8003b18:	4b11      	ldr	r3, [pc, #68]	; (8003b60 <detectInput+0x16c>)
		HAL_Delay(50);
 8003b1a:	2032      	movs	r0, #50	; 0x32
		inputSet = 1;
 8003b1c:	701a      	strb	r2, [r3, #0]
		HAL_Delay(50);
 8003b1e:	f7fc fc99 	bl	8000454 <HAL_Delay>
 8003b22:	e7c8      	b.n	8003ab6 <detectInput+0xc2>
 8003b24:	4d0c      	ldr	r5, [pc, #48]	; (8003b58 <detectInput+0x164>)
 8003b26:	e7e7      	b.n	8003af8 <detectInput+0x104>
 8003b28:	4d0b      	ldr	r5, [pc, #44]	; (8003b58 <detectInput+0x164>)
 8003b2a:	e7b0      	b.n	8003a8e <detectInput+0x9a>
 8003b2c:	20000048 	.word	0x20000048
 8003b30:	00004e20 	.word	0x00004e20
 8003b34:	200000cc 	.word	0x200000cc
 8003b38:	20000108 	.word	0x20000108
 8003b3c:	200000e9 	.word	0x200000e9
 8003b40:	200000f1 	.word	0x200000f1
 8003b44:	200000f0 	.word	0x200000f0
 8003b48:	20000114 	.word	0x20000114
 8003b4c:	20000034 	.word	0x20000034
 8003b50:	2000025c 	.word	0x2000025c
 8003b54:	40014000 	.word	0x40014000
 8003b58:	20000000 	.word	0x20000000
 8003b5c:	40014400 	.word	0x40014400
 8003b60:	200000e8 	.word	0x200000e8
 8003b64:	20000258 	.word	0x20000258
 8003b68:	20000184 	.word	0x20000184
 8003b6c:	200004c0 	.word	0x200004c0

08003b70 <computeProshotDMA>:

void computeProshotDMA(){

total = dma_buffer[1]+ dma_buffer[2] + dma_buffer[3] + dma_buffer[4]+ dma_buffer[5] + dma_buffer[6] + dma_buffer[7];
 8003b70:	4a31      	ldr	r2, [pc, #196]	; (8003c38 <computeProshotDMA+0xc8>)
void computeProshotDMA(){
 8003b72:	b570      	push	{r4, r5, r6, lr}
total = dma_buffer[1]+ dma_buffer[2] + dma_buffer[3] + dma_buffer[4]+ dma_buffer[5] + dma_buffer[6] + dma_buffer[7];
 8003b74:	6916      	ldr	r6, [r2, #16]
 8003b76:	6850      	ldr	r0, [r2, #4]
 8003b78:	46b4      	mov	ip, r6
 8003b7a:	6893      	ldr	r3, [r2, #8]
 8003b7c:	68d5      	ldr	r5, [r2, #12]
 8003b7e:	6996      	ldr	r6, [r2, #24]
 8003b80:	18c3      	adds	r3, r0, r3
 8003b82:	195b      	adds	r3, r3, r5
 8003b84:	4463      	add	r3, ip
 8003b86:	46b4      	mov	ip, r6
 8003b88:	6954      	ldr	r4, [r2, #20]
 8003b8a:	69d1      	ldr	r1, [r2, #28]
 8003b8c:	191b      	adds	r3, r3, r4
 8003b8e:	4463      	add	r3, ip
 8003b90:	4e2a      	ldr	r6, [pc, #168]	; (8003c3c <computeProshotDMA+0xcc>)
 8003b92:	185b      	adds	r3, r3, r1
 8003b94:	6033      	str	r3, [r6, #0]

   if (( total < 118 && total > 98)&& (dma_buffer[0]> 100)){
 8003b96:	3b63      	subs	r3, #99	; 0x63
 8003b98:	2b12      	cmp	r3, #18
 8003b9a:	d836      	bhi.n	8003c0a <computeProshotDMA+0x9a>
 8003b9c:	6813      	ldr	r3, [r2, #0]
 8003b9e:	2b64      	cmp	r3, #100	; 0x64
 8003ba0:	d933      	bls.n	8003c0a <computeProshotDMA+0x9a>
   for (int i = 1; i < 8; i +=2){
    propulse[(i-1) / 2] = (dma_buffer[i] - 7);
 8003ba2:	4a27      	ldr	r2, [pc, #156]	; (8003c40 <computeProshotDMA+0xd0>)
 8003ba4:	1fcb      	subs	r3, r1, #7
 8003ba6:	3807      	subs	r0, #7
 8003ba8:	3d07      	subs	r5, #7
 8003baa:	3c07      	subs	r4, #7
 8003bac:	6010      	str	r0, [r2, #0]
 8003bae:	60d3      	str	r3, [r2, #12]
 8003bb0:	6055      	str	r5, [r2, #4]
 8003bb2:	6094      	str	r4, [r2, #8]
					}
   }else{

	   return;
   }
	calcCRC = ((propulse[0]^propulse[1]^propulse[2])<<3
 8003bb4:	0002      	movs	r2, r0
 8003bb6:	406a      	eors	r2, r5
 8003bb8:	4062      	eors	r2, r4
							|(propulse[0]^propulse[1]^propulse[2])<<2
 8003bba:	0096      	lsls	r6, r2, #2
	calcCRC = ((propulse[0]^propulse[1]^propulse[2])<<3
 8003bbc:	00d1      	lsls	r1, r2, #3
							|(propulse[0]^propulse[1]^propulse[2])<<2
 8003bbe:	4331      	orrs	r1, r6
							|(propulse[0]^propulse[1]^propulse[2])<<1
							|(propulse[0]^propulse[1]^propulse[2]));
 8003bc0:	4311      	orrs	r1, r2
							|(propulse[0]^propulse[1]^propulse[2])<<1
 8003bc2:	0052      	lsls	r2, r2, #1
							|(propulse[0]^propulse[1]^propulse[2]));
 8003bc4:	4311      	orrs	r1, r2
	calcCRC = ((propulse[0]^propulse[1]^propulse[2])<<3
 8003bc6:	4a1f      	ldr	r2, [pc, #124]	; (8003c44 <computeProshotDMA+0xd4>)
							|(propulse[0]^propulse[1]^propulse[2]));
 8003bc8:	b2c9      	uxtb	r1, r1
	calcCRC = ((propulse[0]^propulse[1]^propulse[2])<<3
 8003bca:	7011      	strb	r1, [r2, #0]

	checkCRC = (propulse[3]<<3 | propulse[3]<<2 | propulse[3]<<1 | propulse[3]);
 8003bcc:	009e      	lsls	r6, r3, #2
 8003bce:	00da      	lsls	r2, r3, #3
 8003bd0:	4332      	orrs	r2, r6
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	4a1b      	ldr	r2, [pc, #108]	; (8003c48 <computeProshotDMA+0xd8>)
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	7013      	strb	r3, [r2, #0]
    if ( checkCRC == calcCRC){
 8003bde:	4299      	cmp	r1, r3
 8003be0:	d021      	beq.n	8003c26 <computeProshotDMA+0xb6>
 8003be2:	4b1a      	ldr	r3, [pc, #104]	; (8003c4c <computeProshotDMA+0xdc>)
 8003be4:	681b      	ldr	r3, [r3, #0]
    	tocheck = ((propulse[0]<<7 | propulse[1]<<3 | propulse[2]>>1));
    }else{
 //   	error++;
    }
    if (tocheck > 47 && tocheck < 2048){
 8003be6:	001a      	movs	r2, r3
 8003be8:	4919      	ldr	r1, [pc, #100]	; (8003c50 <computeProshotDMA+0xe0>)
 8003bea:	3a30      	subs	r2, #48	; 0x30
 8003bec:	428a      	cmp	r2, r1
 8003bee:	d914      	bls.n	8003c1a <computeProshotDMA+0xaa>
    	newinput = tocheck ;
    				commandcount = 0;



    			}else if (tocheck > 1 && tocheck < 48 && input == 0){
 8003bf0:	1e9a      	subs	r2, r3, #2
 8003bf2:	2a2d      	cmp	r2, #45	; 0x2d
 8003bf4:	d90a      	bls.n	8003c0c <computeProshotDMA+0x9c>

    					dshotcommand = tocheck ;
    			}else{
    				commandcount++;
 8003bf6:	4917      	ldr	r1, [pc, #92]	; (8003c54 <computeProshotDMA+0xe4>)
 8003bf8:	680a      	ldr	r2, [r1, #0]
 8003bfa:	3201      	adds	r2, #1
 8003bfc:	600a      	str	r2, [r1, #0]
    				if (commandcount > 1){
 8003bfe:	2a01      	cmp	r2, #1
 8003c00:	dd03      	ble.n	8003c0a <computeProshotDMA+0x9a>
    				newinput = tocheck ;
 8003c02:	4a15      	ldr	r2, [pc, #84]	; (8003c58 <computeProshotDMA+0xe8>)
 8003c04:	6013      	str	r3, [r2, #0]
    			    commandcount = 0;
 8003c06:	2300      	movs	r3, #0
 8003c08:	600b      	str	r3, [r1, #0]
    			}
    			}

}
 8003c0a:	bd70      	pop	{r4, r5, r6, pc}
    			}else if (tocheck > 1 && tocheck < 48 && input == 0){
 8003c0c:	4a13      	ldr	r2, [pc, #76]	; (8003c5c <computeProshotDMA+0xec>)
 8003c0e:	6812      	ldr	r2, [r2, #0]
 8003c10:	2a00      	cmp	r2, #0
 8003c12:	d1f0      	bne.n	8003bf6 <computeProshotDMA+0x86>
    					dshotcommand = tocheck ;
 8003c14:	4a12      	ldr	r2, [pc, #72]	; (8003c60 <computeProshotDMA+0xf0>)
 8003c16:	6013      	str	r3, [r2, #0]
 8003c18:	e7f7      	b.n	8003c0a <computeProshotDMA+0x9a>
    	newinput = tocheck ;
 8003c1a:	4a0f      	ldr	r2, [pc, #60]	; (8003c58 <computeProshotDMA+0xe8>)
 8003c1c:	6013      	str	r3, [r2, #0]
    				commandcount = 0;
 8003c1e:	2200      	movs	r2, #0
 8003c20:	4b0c      	ldr	r3, [pc, #48]	; (8003c54 <computeProshotDMA+0xe4>)
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	e7f1      	b.n	8003c0a <computeProshotDMA+0x9a>
    	tocheck = ((propulse[0]<<7 | propulse[1]<<3 | propulse[2]>>1));
 8003c26:	01c3      	lsls	r3, r0, #7
 8003c28:	00ed      	lsls	r5, r5, #3
 8003c2a:	432b      	orrs	r3, r5
 8003c2c:	1064      	asrs	r4, r4, #1
 8003c2e:	4a07      	ldr	r2, [pc, #28]	; (8003c4c <computeProshotDMA+0xdc>)
 8003c30:	4323      	orrs	r3, r4
 8003c32:	6013      	str	r3, [r2, #0]
 8003c34:	e7d7      	b.n	8003be6 <computeProshotDMA+0x76>
 8003c36:	46c0      	nop			; (mov r8, r8)
 8003c38:	20000258 	.word	0x20000258
 8003c3c:	2000042c 	.word	0x2000042c
 8003c40:	200000f8 	.word	0x200000f8
 8003c44:	200001c4 	.word	0x200001c4
 8003c48:	200001d8 	.word	0x200001d8
 8003c4c:	20000138 	.word	0x20000138
 8003c50:	000007cf 	.word	0x000007cf
 8003c54:	200000b0 	.word	0x200000b0
 8003c58:	200000ec 	.word	0x200000ec
 8003c5c:	200000e4 	.word	0x200000e4
 8003c60:	200000d0 	.word	0x200000d0

08003c64 <computeServoInput>:



void computeServoInput(){

	if ( dma_buffer[1] < 2000 && dma_buffer[1] > 1000){
 8003c64:	4b27      	ldr	r3, [pc, #156]	; (8003d04 <computeServoInput+0xa0>)
 8003c66:	4a28      	ldr	r2, [pc, #160]	; (8003d08 <computeServoInput+0xa4>)
 8003c68:	6858      	ldr	r0, [r3, #4]
void computeServoInput(){
 8003c6a:	b510      	push	{r4, lr}
	if ( dma_buffer[1] < 2000 && dma_buffer[1] > 1000){
 8003c6c:	1881      	adds	r1, r0, r2
 8003c6e:	4a27      	ldr	r2, [pc, #156]	; (8003d0c <computeServoInput+0xa8>)
		if(dma_buffer[2]< 1000 || dma_buffer[2] > 2500){
 8003c70:	689b      	ldr	r3, [r3, #8]
	if ( dma_buffer[1] < 2000 && dma_buffer[1] > 1000){
 8003c72:	4291      	cmp	r1, r2
 8003c74:	d813      	bhi.n	8003c9e <computeServoInput+0x3a>
		if(dma_buffer[2]< 1000 || dma_buffer[2] > 2500){
 8003c76:	4a26      	ldr	r2, [pc, #152]	; (8003d10 <computeServoInput+0xac>)
 8003c78:	4694      	mov	ip, r2
 8003c7a:	4a26      	ldr	r2, [pc, #152]	; (8003d14 <computeServoInput+0xb0>)
 8003c7c:	4463      	add	r3, ip
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d821      	bhi.n	8003cc6 <computeServoInput+0x62>
 8003c82:	4b25      	ldr	r3, [pc, #148]	; (8003d18 <computeServoInput+0xb4>)
		servorawinput = map(dma_buffer[2], 1100,2000,0,2000);
		}
	}


	if (servorawinput - newinput > max_servo_deviation){
 8003c84:	4925      	ldr	r1, [pc, #148]	; (8003d1c <computeServoInput+0xb8>)
 8003c86:	4a26      	ldr	r2, [pc, #152]	; (8003d20 <computeServoInput+0xbc>)
 8003c88:	6818      	ldr	r0, [r3, #0]
 8003c8a:	6812      	ldr	r2, [r2, #0]
 8003c8c:	680b      	ldr	r3, [r1, #0]
 8003c8e:	1ac4      	subs	r4, r0, r3
 8003c90:	4294      	cmp	r4, r2
 8003c92:	dc2e      	bgt.n	8003cf2 <computeServoInput+0x8e>
		newinput += max_servo_deviation;
	}else if(newinput - servorawinput > max_servo_deviation){
 8003c94:	1a1c      	subs	r4, r3, r0
 8003c96:	42a2      	cmp	r2, r4
 8003c98:	db2e      	blt.n	8003cf8 <computeServoInput+0x94>
		newinput -= max_servo_deviation;
	}else{
		newinput = servorawinput;
 8003c9a:	6008      	str	r0, [r1, #0]
	}


}
 8003c9c:	bd10      	pop	{r4, pc}
	}else if( dma_buffer[2] < 2000 && dma_buffer[2] > 1000) {
 8003c9e:	491a      	ldr	r1, [pc, #104]	; (8003d08 <computeServoInput+0xa4>)
 8003ca0:	1859      	adds	r1, r3, r1
 8003ca2:	4291      	cmp	r1, r2
 8003ca4:	d8ed      	bhi.n	8003c82 <computeServoInput+0x1e>
		if(dma_buffer[1]< 1000 || dma_buffer[1] > 2500){
 8003ca6:	4a1a      	ldr	r2, [pc, #104]	; (8003d10 <computeServoInput+0xac>)
 8003ca8:	4694      	mov	ip, r2
 8003caa:	4a1a      	ldr	r2, [pc, #104]	; (8003d14 <computeServoInput+0xb0>)
 8003cac:	4460      	add	r0, ip
 8003cae:	4290      	cmp	r0, r2
 8003cb0:	d9e7      	bls.n	8003c82 <computeServoInput+0x1e>
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003cb2:	4a1c      	ldr	r2, [pc, #112]	; (8003d24 <computeServoInput+0xc0>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d200      	bcs.n	8003cba <computeServoInput+0x56>
 8003cb8:	0013      	movs	r3, r2
 8003cba:	4a1b      	ldr	r2, [pc, #108]	; (8003d28 <computeServoInput+0xc4>)
 8003cbc:	20fa      	movs	r0, #250	; 0xfa
 8003cbe:	4694      	mov	ip, r2
 8003cc0:	00c0      	lsls	r0, r0, #3
 8003cc2:	4463      	add	r3, ip
 8003cc4:	e007      	b.n	8003cd6 <computeServoInput+0x72>
 8003cc6:	4b17      	ldr	r3, [pc, #92]	; (8003d24 <computeServoInput+0xc0>)
 8003cc8:	4298      	cmp	r0, r3
 8003cca:	d318      	bcc.n	8003cfe <computeServoInput+0x9a>
 8003ccc:	4b16      	ldr	r3, [pc, #88]	; (8003d28 <computeServoInput+0xc4>)
 8003cce:	469c      	mov	ip, r3
 8003cd0:	23fa      	movs	r3, #250	; 0xfa
 8003cd2:	4460      	add	r0, ip
 8003cd4:	00db      	lsls	r3, r3, #3
 8003cd6:	21e1      	movs	r1, #225	; 0xe1
 8003cd8:	4358      	muls	r0, r3
 8003cda:	0089      	lsls	r1, r1, #2
 8003cdc:	f7fc fa9e 	bl	800021c <__divsi3>
		servorawinput = map(dma_buffer[2], 1100,2000,0,2000);
 8003ce0:	4b0d      	ldr	r3, [pc, #52]	; (8003d18 <computeServoInput+0xb4>)
	if (servorawinput - newinput > max_servo_deviation){
 8003ce2:	490e      	ldr	r1, [pc, #56]	; (8003d1c <computeServoInput+0xb8>)
 8003ce4:	4a0e      	ldr	r2, [pc, #56]	; (8003d20 <computeServoInput+0xbc>)
		servorawinput = map(dma_buffer[2], 1100,2000,0,2000);
 8003ce6:	6018      	str	r0, [r3, #0]
	if (servorawinput - newinput > max_servo_deviation){
 8003ce8:	6812      	ldr	r2, [r2, #0]
 8003cea:	680b      	ldr	r3, [r1, #0]
 8003cec:	1ac4      	subs	r4, r0, r3
 8003cee:	4294      	cmp	r4, r2
 8003cf0:	ddd0      	ble.n	8003c94 <computeServoInput+0x30>
		newinput += max_servo_deviation;
 8003cf2:	189b      	adds	r3, r3, r2
 8003cf4:	600b      	str	r3, [r1, #0]
 8003cf6:	e7d1      	b.n	8003c9c <computeServoInput+0x38>
		newinput -= max_servo_deviation;
 8003cf8:	1a9b      	subs	r3, r3, r2
 8003cfa:	600b      	str	r3, [r1, #0]
 8003cfc:	e7ce      	b.n	8003c9c <computeServoInput+0x38>
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003cfe:	0018      	movs	r0, r3
 8003d00:	e7e4      	b.n	8003ccc <computeServoInput+0x68>
 8003d02:	46c0      	nop			; (mov r8, r8)
 8003d04:	20000258 	.word	0x20000258
 8003d08:	fffffc17 	.word	0xfffffc17
 8003d0c:	000003e6 	.word	0x000003e6
 8003d10:	fffffc18 	.word	0xfffffc18
 8003d14:	000005dc 	.word	0x000005dc
 8003d18:	20000118 	.word	0x20000118
 8003d1c:	200000ec 	.word	0x200000ec
 8003d20:	20000038 	.word	0x20000038
 8003d24:	0000044c 	.word	0x0000044c
 8003d28:	fffffbb4 	.word	0xfffffbb4

08003d2c <transferComplete>:


void transferComplete(){
 8003d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d2e:	46de      	mov	lr, fp
 8003d30:	4657      	mov	r7, sl
 8003d32:	464e      	mov	r6, r9
 8003d34:	4645      	mov	r5, r8
//	TIM2->CNT = 0;
//	compit = 0;
	signaltimeout = 0;
 8003d36:	2200      	movs	r2, #0
void transferComplete(){
 8003d38:	b5e0      	push	{r5, r6, r7, lr}
	signaltimeout = 0;
 8003d3a:	4b54      	ldr	r3, [pc, #336]	; (8003e8c <transferComplete+0x160>)
void transferComplete(){
 8003d3c:	b083      	sub	sp, #12
	signaltimeout = 0;
 8003d3e:	601a      	str	r2, [r3, #0]
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);


	if (inputSet == 1){
 8003d40:	4b53      	ldr	r3, [pc, #332]	; (8003e90 <transferComplete+0x164>)
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d006      	beq.n	8003d56 <transferComplete+0x2a>



}

}
 8003d48:	b003      	add	sp, #12
 8003d4a:	bc3c      	pop	{r2, r3, r4, r5}
 8003d4c:	4690      	mov	r8, r2
 8003d4e:	4699      	mov	r9, r3
 8003d50:	46a2      	mov	sl, r4
 8003d52:	46ab      	mov	fp, r5
 8003d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (dshot == 1){
 8003d56:	4b4f      	ldr	r3, [pc, #316]	; (8003e94 <transferComplete+0x168>)
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d010      	beq.n	8003d80 <transferComplete+0x54>
		if (proshot == 1){
 8003d5e:	4b4e      	ldr	r3, [pc, #312]	; (8003e98 <transferComplete+0x16c>)
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d067      	beq.n	8003e36 <transferComplete+0x10a>
		if  (servoPwm == 1){
 8003d66:	4b4d      	ldr	r3, [pc, #308]	; (8003e9c <transferComplete+0x170>)
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d1ec      	bne.n	8003d48 <transferComplete+0x1c>
			computeServoInput();
 8003d6e:	f7ff ff79 	bl	8003c64 <computeServoInput>
				HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , 3);
 8003d72:	2303      	movs	r3, #3
 8003d74:	4a4a      	ldr	r2, [pc, #296]	; (8003ea0 <transferComplete+0x174>)
 8003d76:	2100      	movs	r1, #0
 8003d78:	484a      	ldr	r0, [pc, #296]	; (8003ea4 <transferComplete+0x178>)
 8003d7a:	f7fd ff41 	bl	8001c00 <HAL_TIM_IC_Start_DMA>
 8003d7e:	e7e3      	b.n	8003d48 <transferComplete+0x1c>
	if (dma_buffer[0] < 20){
 8003d80:	4b47      	ldr	r3, [pc, #284]	; (8003ea0 <transferComplete+0x174>)
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	2a13      	cmp	r2, #19
 8003d86:	d9df      	bls.n	8003d48 <transferComplete+0x1c>
	 calcCRC = ((dma_buffer[1]^dma_buffer[9]^dma_buffer[17])<<3
 8003d88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d8a:	6859      	ldr	r1, [r3, #4]
 8003d8c:	4694      	mov	ip, r2
 8003d8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
			          |(dma_buffer[3]^dma_buffer[11]^dma_buffer[19])<<2
 8003d90:	6adf      	ldr	r7, [r3, #44]	; 0x2c
	 calcCRC = ((dma_buffer[1]^dma_buffer[9]^dma_buffer[17])<<3
 8003d92:	0010      	movs	r0, r2
 8003d94:	9201      	str	r2, [sp, #4]
			          |(dma_buffer[3]^dma_buffer[11]^dma_buffer[19])<<2
 8003d96:	68da      	ldr	r2, [r3, #12]
 8003d98:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8003d9a:	4692      	mov	sl, r2
					|(dma_buffer[5]^dma_buffer[13]^dma_buffer[21])<<1
 8003d9c:	695a      	ldr	r2, [r3, #20]
					|(dma_buffer[7]^dma_buffer[15]^dma_buffer[23])
 8003d9e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
					|(dma_buffer[5]^dma_buffer[13]^dma_buffer[21])<<1
 8003da0:	4691      	mov	r9, r2
 8003da2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
	 calcCRC = ((dma_buffer[1]^dma_buffer[9]^dma_buffer[17])<<3
 8003da4:	9100      	str	r1, [sp, #0]
					|(dma_buffer[5]^dma_buffer[13]^dma_buffer[21])<<1
 8003da6:	4693      	mov	fp, r2
					|(dma_buffer[7]^dma_buffer[15]^dma_buffer[23])
 8003da8:	69da      	ldr	r2, [r3, #28]
					|(dma_buffer[5]^dma_buffer[13]^dma_buffer[21])<<1
 8003daa:	6b5e      	ldr	r6, [r3, #52]	; 0x34
					|(dma_buffer[7]^dma_buffer[15]^dma_buffer[23])
 8003dac:	4690      	mov	r8, r2
	 calcCRC = ((dma_buffer[1]^dma_buffer[9]^dma_buffer[17])<<3
 8003dae:	4662      	mov	r2, ip
 8003db0:	404a      	eors	r2, r1
 8003db2:	4042      	eors	r2, r0
 8003db4:	00d0      	lsls	r0, r2, #3
			          |(dma_buffer[3]^dma_buffer[11]^dma_buffer[19])<<2
 8003db6:	4652      	mov	r2, sl
 8003db8:	407a      	eors	r2, r7
 8003dba:	4062      	eors	r2, r4
 8003dbc:	0092      	lsls	r2, r2, #2
 8003dbe:	4302      	orrs	r2, r0
					|(dma_buffer[7]^dma_buffer[15]^dma_buffer[23])
 8003dc0:	4640      	mov	r0, r8
 8003dc2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003dc4:	4068      	eors	r0, r5
 8003dc6:	4048      	eors	r0, r1
 8003dc8:	4302      	orrs	r2, r0
					|(dma_buffer[5]^dma_buffer[13]^dma_buffer[21])<<1
 8003dca:	4648      	mov	r0, r9
 8003dcc:	4659      	mov	r1, fp
 8003dce:	4070      	eors	r0, r6
 8003dd0:	4048      	eors	r0, r1
 8003dd2:	0040      	lsls	r0, r0, #1
	 checkCRC = (dma_buffer[25]<<3 | dma_buffer[27]<<2 | dma_buffer[29]<<1 | dma_buffer[31]);
 8003dd4:	6e59      	ldr	r1, [r3, #100]	; 0x64
					|(dma_buffer[7]^dma_buffer[15]^dma_buffer[23])
 8003dd6:	4302      	orrs	r2, r0
	 calcCRC = ((dma_buffer[1]^dma_buffer[9]^dma_buffer[17])<<3
 8003dd8:	4833      	ldr	r0, [pc, #204]	; (8003ea8 <transferComplete+0x17c>)
					|(dma_buffer[7]^dma_buffer[15]^dma_buffer[23])
 8003dda:	b2d2      	uxtb	r2, r2
	 calcCRC = ((dma_buffer[1]^dma_buffer[9]^dma_buffer[17])<<3
 8003ddc:	7002      	strb	r2, [r0, #0]
	 checkCRC = (dma_buffer[25]<<3 | dma_buffer[27]<<2 | dma_buffer[29]<<1 | dma_buffer[31]);
 8003dde:	00c8      	lsls	r0, r1, #3
 8003de0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8003de2:	0089      	lsls	r1, r1, #2
 8003de4:	4308      	orrs	r0, r1
 8003de6:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8003de8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dea:	4308      	orrs	r0, r1
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	4303      	orrs	r3, r0
 8003df0:	482e      	ldr	r0, [pc, #184]	; (8003eac <transferComplete+0x180>)
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	7003      	strb	r3, [r0, #0]
			if(calcCRC == checkCRC){
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d026      	beq.n	8003e48 <transferComplete+0x11c>
					error++;
 8003dfa:	4a2d      	ldr	r2, [pc, #180]	; (8003eb0 <transferComplete+0x184>)
 8003dfc:	6813      	ldr	r3, [r2, #0]
 8003dfe:	3301      	adds	r3, #1
 8003e00:	6013      	str	r3, [r2, #0]
 8003e02:	4b2c      	ldr	r3, [pc, #176]	; (8003eb4 <transferComplete+0x188>)
 8003e04:	681b      	ldr	r3, [r3, #0]
			if (tocheck > 47 && tocheck < 2048){
 8003e06:	001a      	movs	r2, r3
 8003e08:	492b      	ldr	r1, [pc, #172]	; (8003eb8 <transferComplete+0x18c>)
 8003e0a:	3a30      	subs	r2, #48	; 0x30
 8003e0c:	428a      	cmp	r2, r1
 8003e0e:	d915      	bls.n	8003e3c <transferComplete+0x110>
			}else if (tocheck > 1 && tocheck < 48 && input == 0){
 8003e10:	1e9a      	subs	r2, r3, #2
 8003e12:	2a2d      	cmp	r2, #45	; 0x2d
 8003e14:	d803      	bhi.n	8003e1e <transferComplete+0xf2>
 8003e16:	4a29      	ldr	r2, [pc, #164]	; (8003ebc <transferComplete+0x190>)
 8003e18:	6812      	ldr	r2, [r2, #0]
 8003e1a:	2a00      	cmp	r2, #0
 8003e1c:	d032      	beq.n	8003e84 <transferComplete+0x158>
				commandcount++;
 8003e1e:	4928      	ldr	r1, [pc, #160]	; (8003ec0 <transferComplete+0x194>)
 8003e20:	680a      	ldr	r2, [r1, #0]
 8003e22:	3201      	adds	r2, #1
 8003e24:	600a      	str	r2, [r1, #0]
				if (commandcount > 1){
 8003e26:	2a01      	cmp	r2, #1
 8003e28:	dc00      	bgt.n	8003e2c <transferComplete+0x100>
 8003e2a:	e78d      	b.n	8003d48 <transferComplete+0x1c>
				newinput = tocheck ;
 8003e2c:	4a25      	ldr	r2, [pc, #148]	; (8003ec4 <transferComplete+0x198>)
 8003e2e:	6013      	str	r3, [r2, #0]
			    commandcount = 0;
 8003e30:	2300      	movs	r3, #0
 8003e32:	600b      	str	r3, [r1, #0]
 8003e34:	e788      	b.n	8003d48 <transferComplete+0x1c>
			computeProshotDMA();
 8003e36:	f7ff fe9b 	bl	8003b70 <computeProshotDMA>
			return;
 8003e3a:	e785      	b.n	8003d48 <transferComplete+0x1c>
				newinput = tocheck;
 8003e3c:	4a21      	ldr	r2, [pc, #132]	; (8003ec4 <transferComplete+0x198>)
 8003e3e:	6013      	str	r3, [r2, #0]
				commandcount = 0;
 8003e40:	2200      	movs	r2, #0
 8003e42:	4b1f      	ldr	r3, [pc, #124]	; (8003ec0 <transferComplete+0x194>)
 8003e44:	601a      	str	r2, [r3, #0]
 8003e46:	e77f      	b.n	8003d48 <transferComplete+0x1c>
						dma_buffer[1]<<10 | dma_buffer[3]<<9 | dma_buffer[5]<<8 | dma_buffer[7]<<7
 8003e48:	4652      	mov	r2, sl
 8003e4a:	0251      	lsls	r1, r2, #9
					| dma_buffer[17]<<2 | dma_buffer[19]<<1 | dma_buffer[21]);
 8003e4c:	465a      	mov	r2, fp
						dma_buffer[1]<<10 | dma_buffer[3]<<9 | dma_buffer[5]<<8 | dma_buffer[7]<<7
 8003e4e:	9b00      	ldr	r3, [sp, #0]
					| dma_buffer[9]<<6 | dma_buffer[11]<<5 | dma_buffer[13]<<4 | dma_buffer[15]<<3
 8003e50:	017f      	lsls	r7, r7, #5
						dma_buffer[1]<<10 | dma_buffer[3]<<9 | dma_buffer[5]<<8 | dma_buffer[7]<<7
 8003e52:	029b      	lsls	r3, r3, #10
 8003e54:	430b      	orrs	r3, r1
					| dma_buffer[17]<<2 | dma_buffer[19]<<1 | dma_buffer[21]);
 8003e56:	4313      	orrs	r3, r2
						dma_buffer[1]<<10 | dma_buffer[3]<<9 | dma_buffer[5]<<8 | dma_buffer[7]<<7
 8003e58:	464a      	mov	r2, r9
 8003e5a:	0212      	lsls	r2, r2, #8
					| dma_buffer[17]<<2 | dma_buffer[19]<<1 | dma_buffer[21]);
 8003e5c:	4313      	orrs	r3, r2
						dma_buffer[1]<<10 | dma_buffer[3]<<9 | dma_buffer[5]<<8 | dma_buffer[7]<<7
 8003e5e:	4642      	mov	r2, r8
 8003e60:	01d2      	lsls	r2, r2, #7
					| dma_buffer[17]<<2 | dma_buffer[19]<<1 | dma_buffer[21]);
 8003e62:	4313      	orrs	r3, r2
					| dma_buffer[9]<<6 | dma_buffer[11]<<5 | dma_buffer[13]<<4 | dma_buffer[15]<<3
 8003e64:	4662      	mov	r2, ip
 8003e66:	0192      	lsls	r2, r2, #6
					| dma_buffer[17]<<2 | dma_buffer[19]<<1 | dma_buffer[21]);
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	433b      	orrs	r3, r7
 8003e6c:	9a01      	ldr	r2, [sp, #4]
					| dma_buffer[9]<<6 | dma_buffer[11]<<5 | dma_buffer[13]<<4 | dma_buffer[15]<<3
 8003e6e:	0136      	lsls	r6, r6, #4
 8003e70:	00ed      	lsls	r5, r5, #3
					| dma_buffer[17]<<2 | dma_buffer[19]<<1 | dma_buffer[21]);
 8003e72:	4333      	orrs	r3, r6
 8003e74:	432b      	orrs	r3, r5
 8003e76:	0095      	lsls	r5, r2, #2
 8003e78:	432b      	orrs	r3, r5
 8003e7a:	0062      	lsls	r2, r4, #1
 8003e7c:	4313      	orrs	r3, r2
				tocheck = (
 8003e7e:	4a0d      	ldr	r2, [pc, #52]	; (8003eb4 <transferComplete+0x188>)
 8003e80:	6013      	str	r3, [r2, #0]
 8003e82:	e7c0      	b.n	8003e06 <transferComplete+0xda>
					dshotcommand = tocheck ;
 8003e84:	4a10      	ldr	r2, [pc, #64]	; (8003ec8 <transferComplete+0x19c>)
 8003e86:	6013      	str	r3, [r2, #0]
 8003e88:	e75e      	b.n	8003d48 <transferComplete+0x1c>
 8003e8a:	46c0      	nop			; (mov r8, r8)
 8003e8c:	2000011c 	.word	0x2000011c
 8003e90:	200000e8 	.word	0x200000e8
 8003e94:	200000cc 	.word	0x200000cc
 8003e98:	20000108 	.word	0x20000108
 8003e9c:	20000114 	.word	0x20000114
 8003ea0:	20000258 	.word	0x20000258
 8003ea4:	20000184 	.word	0x20000184
 8003ea8:	200001c4 	.word	0x200001c4
 8003eac:	200001d8 	.word	0x200001d8
 8003eb0:	200000d4 	.word	0x200000d4
 8003eb4:	20000138 	.word	0x20000138
 8003eb8:	000007cf 	.word	0x000007cf
 8003ebc:	200000e4 	.word	0x200000e4
 8003ec0:	200000b0 	.word	0x200000b0
 8003ec4:	200000ec 	.word	0x200000ec
 8003ec8:	200000d0 	.word	0x200000d0

08003ecc <SystemClock_Config>:
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8003ecc:	2210      	movs	r2, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8003ece:	231a      	movs	r3, #26
{
 8003ed0:	b510      	push	{r4, lr}
 8003ed2:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8003ed4:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8003ed6:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003ed8:	3b19      	subs	r3, #25
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8003eda:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8003edc:	22a0      	movs	r2, #160	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003ede:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8003ee0:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003ee2:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ee4:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003ee6:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8003ee8:	0392      	lsls	r2, r2, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003eea:	a804      	add	r0, sp, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003eec:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003eee:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8003ef0:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8003ef2:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ef4:	f7fd f96a 	bl	80011cc <HAL_RCC_OscConfig>
 8003ef8:	2800      	cmp	r0, #0
 8003efa:	d000      	beq.n	8003efe <SystemClock_Config+0x32>
 8003efc:	e7fe      	b.n	8003efc <SystemClock_Config+0x30>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003efe:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f00:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003f02:	9003      	str	r0, [sp, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003f04:	2101      	movs	r1, #1
 8003f06:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f08:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003f0a:	9401      	str	r4, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003f0c:	f7fd fb96 	bl	800163c <HAL_RCC_ClockConfig>
 8003f10:	2800      	cmp	r0, #0
 8003f12:	d000      	beq.n	8003f16 <SystemClock_Config+0x4a>
 8003f14:	e7fe      	b.n	8003f14 <SystemClock_Config+0x48>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003f16:	f7fd fc63 	bl	80017e0 <HAL_RCC_GetHCLKFreq>
 8003f1a:	21fa      	movs	r1, #250	; 0xfa
 8003f1c:	0089      	lsls	r1, r1, #2
 8003f1e:	f7fc f8f3 	bl	8000108 <__udivsi3>
 8003f22:	f7fc fd9d 	bl	8000a60 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003f26:	2004      	movs	r0, #4
 8003f28:	f7fc fdb6 	bl	8000a98 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003f2c:	2001      	movs	r0, #1
 8003f2e:	2200      	movs	r2, #0
 8003f30:	2100      	movs	r1, #0
 8003f32:	4240      	negs	r0, r0
 8003f34:	f7fc fd56 	bl	80009e4 <HAL_NVIC_SetPriority>
}
 8003f38:	b010      	add	sp, #64	; 0x40
 8003f3a:	bd10      	pop	{r4, pc}

08003f3c <main>:
{
 8003f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f3e:	46de      	mov	lr, fp
 8003f40:	4645      	mov	r5, r8
 8003f42:	464e      	mov	r6, r9
 8003f44:	4657      	mov	r7, sl
 8003f46:	b5e0      	push	{r5, r6, r7, lr}
 8003f48:	b0a3      	sub	sp, #140	; 0x8c
  HAL_Init();
 8003f4a:	f7fc fa65 	bl	8000418 <HAL_Init>
  SystemClock_Config();
 8003f4e:	f7ff ffbd 	bl	8003ecc <SystemClock_Config>
  HAL_FLASH_Unlock();
 8003f52:	f7fc ff55 	bl	8000e00 <HAL_FLASH_Unlock>
  EE_Init();
 8003f56:	f7fe fc31 	bl	80027bc <EE_Init>
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8003f5a:	2180      	movs	r1, #128	; 0x80
 8003f5c:	4cba      	ldr	r4, [pc, #744]	; (8004248 <main+0x30c>)
 8003f5e:	0289      	lsls	r1, r1, #10
 8003f60:	6962      	ldr	r2, [r4, #20]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8003f62:	2090      	movs	r0, #144	; 0x90
 8003f64:	430a      	orrs	r2, r1
 8003f66:	6162      	str	r2, [r4, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8003f68:	6963      	ldr	r3, [r4, #20]
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_15);

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003f6a:	2500      	movs	r5, #0
 8003f6c:	400b      	ands	r3, r1
  SET_BIT(RCC->AHBENR, Periphs);
 8003f6e:	2180      	movs	r1, #128	; 0x80
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8003f70:	930c      	str	r3, [sp, #48]	; 0x30
  (void)tmpreg;
 8003f72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  SET_BIT(RCC->AHBENR, Periphs);
 8003f74:	6962      	ldr	r2, [r4, #20]
 8003f76:	02c9      	lsls	r1, r1, #11
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	6162      	str	r2, [r4, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8003f7c:	6963      	ldr	r3, [r4, #20]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003f7e:	2601      	movs	r6, #1
 8003f80:	400b      	ands	r3, r1
 8003f82:	930d      	str	r3, [sp, #52]	; 0x34
  (void)tmpreg;
 8003f84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f86:	2380      	movs	r3, #128	; 0x80
 8003f88:	05c0      	lsls	r0, r0, #23
 8003f8a:	021b      	lsls	r3, r3, #8
 8003f8c:	6283      	str	r3, [r0, #40]	; 0x28
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f8e:	a91b      	add	r1, sp, #108	; 0x6c
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8003f90:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003f92:	961c      	str	r6, [sp, #112]	; 0x70
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003f94:	951d      	str	r5, [sp, #116]	; 0x74
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003f96:	951e      	str	r5, [sp, #120]	; 0x78
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003f98:	951f      	str	r5, [sp, #124]	; 0x7c
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f9a:	f7fe fb8b 	bl	80026b4 <LL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003f9e:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8003fa0:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003fa2:	4333      	orrs	r3, r6
 8003fa4:	6163      	str	r3, [r4, #20]
 8003fa6:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8003fa8:	2102      	movs	r1, #2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003faa:	4033      	ands	r3, r6
 8003fac:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8003fae:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003fb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8003fb2:	f7fc fd17 	bl	80009e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003fb6:	2009      	movs	r0, #9
 8003fb8:	f7fc fd48 	bl	8000a4c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 2, 0);
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	2102      	movs	r1, #2
 8003fc0:	200b      	movs	r0, #11
 8003fc2:	f7fc fd0f 	bl	80009e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8003fc6:	200b      	movs	r0, #11
 8003fc8:	f7fc fd40 	bl	8000a4c <HAL_NVIC_EnableIRQ>
  hadc.Instance = ADC1;
 8003fcc:	4c9f      	ldr	r4, [pc, #636]	; (800424c <main+0x310>)
 8003fce:	4ba0      	ldr	r3, [pc, #640]	; (8004250 <main+0x314>)
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003fd0:	0020      	movs	r0, r4
  hadc.Instance = ADC1;
 8003fd2:	6023      	str	r3, [r4, #0]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003fd4:	2308      	movs	r3, #8
 8003fd6:	6163      	str	r3, [r4, #20]
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC4;
 8003fd8:	3338      	adds	r3, #56	; 0x38
 8003fda:	4698      	mov	r8, r3
 8003fdc:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003fde:	2380      	movs	r3, #128	; 0x80
 8003fe0:	00db      	lsls	r3, r3, #3
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003fe2:	6065      	str	r5, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003fe4:	60a5      	str	r5, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003fe6:	60e5      	str	r5, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003fe8:	6126      	str	r6, [r4, #16]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003fea:	61a5      	str	r5, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003fec:	61e5      	str	r5, [r4, #28]
  hadc.Init.ContinuousConvMode = DISABLE;
 8003fee:	6225      	str	r5, [r4, #32]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8003ff0:	6266      	str	r6, [r4, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003ff2:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = ENABLE;
 8003ff4:	6326      	str	r6, [r4, #48]	; 0x30
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003ff6:	6366      	str	r6, [r4, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003ff8:	f7fc fa3e 	bl	8000478 <HAL_ADC_Init>
 8003ffc:	2800      	cmp	r0, #0
 8003ffe:	d000      	beq.n	8004002 <main+0xc6>
 8004000:	e7fe      	b.n	8004000 <main+0xc4>
  sConfig.Channel = ADC_CHANNEL_6;
 8004002:	2306      	movs	r3, #6
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8004004:	2580      	movs	r5, #128	; 0x80
  sConfig.Channel = ADC_CHANNEL_6;
 8004006:	931b      	str	r3, [sp, #108]	; 0x6c
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8004008:	016d      	lsls	r5, r5, #5
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800400a:	3b03      	subs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800400c:	a91b      	add	r1, sp, #108	; 0x6c
 800400e:	0020      	movs	r0, r4
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8004010:	951c      	str	r5, [sp, #112]	; 0x70
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8004012:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004014:	f7fc fb4c 	bl	80006b0 <HAL_ADC_ConfigChannel>
 8004018:	2800      	cmp	r0, #0
 800401a:	d000      	beq.n	800401e <main+0xe2>
 800401c:	e7fe      	b.n	800401c <main+0xe0>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800401e:	2310      	movs	r3, #16
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004020:	a91b      	add	r1, sp, #108	; 0x6c
 8004022:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8004024:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004026:	f7fc fb43 	bl	80006b0 <HAL_ADC_ConfigChannel>
 800402a:	2800      	cmp	r0, #0
 800402c:	d000      	beq.n	8004030 <main+0xf4>
 800402e:	e7fe      	b.n	800402e <main+0xf2>
  hcomp1.Instance = COMP1;
 8004030:	4f88      	ldr	r7, [pc, #544]	; (8004254 <main+0x318>)
 8004032:	4b89      	ldr	r3, [pc, #548]	; (8004258 <main+0x31c>)
  hcomp1.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8004034:	60b8      	str	r0, [r7, #8]
  hcomp1.Instance = COMP1;
 8004036:	603b      	str	r3, [r7, #0]
  hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1;
 8004038:	4643      	mov	r3, r8
  hcomp1.Init.Output = COMP_OUTPUT_NONE;
 800403a:	60f8      	str	r0, [r7, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800403c:	6138      	str	r0, [r7, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800403e:	6178      	str	r0, [r7, #20]
  hcomp1.Init.Mode = COMP_MODE_HIGHSPEED;
 8004040:	61b8      	str	r0, [r7, #24]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8004042:	61f8      	str	r0, [r7, #28]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8004044:	0038      	movs	r0, r7
  hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1;
 8004046:	607b      	str	r3, [r7, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 8004048:	623e      	str	r6, [r7, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 800404a:	f7fc fbbb 	bl	80007c4 <HAL_COMP_Init>
 800404e:	2800      	cmp	r0, #0
 8004050:	d000      	beq.n	8004054 <main+0x118>
 8004052:	e7fe      	b.n	8004052 <main+0x116>
  htim1.Instance = TIM1;
 8004054:	4c81      	ldr	r4, [pc, #516]	; (800425c <main+0x320>)
 8004056:	4b82      	ldr	r3, [pc, #520]	; (8004260 <main+0x324>)
  htim1.Init.Prescaler = 0;
 8004058:	6060      	str	r0, [r4, #4]
  htim1.Instance = TIM1;
 800405a:	6023      	str	r3, [r4, #0]
  htim1.Init.Period = 1999;
 800405c:	4b81      	ldr	r3, [pc, #516]	; (8004264 <main+0x328>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800405e:	60a0      	str	r0, [r4, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004060:	6120      	str	r0, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 8004062:	6160      	str	r0, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004064:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004066:	0020      	movs	r0, r4
  htim1.Init.Period = 1999;
 8004068:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800406a:	f7fd fbbf 	bl	80017ec <HAL_TIM_Base_Init>
 800406e:	2800      	cmp	r0, #0
 8004070:	d000      	beq.n	8004074 <main+0x138>
 8004072:	e7fe      	b.n	8004072 <main+0x136>
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004074:	a910      	add	r1, sp, #64	; 0x40
 8004076:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004078:	9510      	str	r5, [sp, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800407a:	f7fe f891 	bl	80021a0 <HAL_TIM_ConfigClockSource>
 800407e:	2800      	cmp	r0, #0
 8004080:	d000      	beq.n	8004084 <main+0x148>
 8004082:	e7fe      	b.n	8004082 <main+0x146>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004084:	0020      	movs	r0, r4
 8004086:	f7fd fc9f 	bl	80019c8 <HAL_TIM_PWM_Init>
 800408a:	2800      	cmp	r0, #0
 800408c:	d000      	beq.n	8004090 <main+0x154>
 800408e:	e7fe      	b.n	800408e <main+0x152>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004090:	900e      	str	r0, [sp, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004092:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004094:	a90e      	add	r1, sp, #56	; 0x38
 8004096:	0020      	movs	r0, r4
 8004098:	f7fe faac 	bl	80025f4 <HAL_TIMEx_MasterConfigSynchronization>
 800409c:	2800      	cmp	r0, #0
 800409e:	d000      	beq.n	80040a2 <main+0x166>
 80040a0:	e7fe      	b.n	80040a0 <main+0x164>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80040a2:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 80040a4:	9015      	str	r0, [sp, #84]	; 0x54
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040a6:	9016      	str	r0, [sp, #88]	; 0x58
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80040a8:	9017      	str	r0, [sp, #92]	; 0x5c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80040aa:	9018      	str	r0, [sp, #96]	; 0x60
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80040ac:	9019      	str	r0, [sp, #100]	; 0x64
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80040ae:	901a      	str	r0, [sp, #104]	; 0x68
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80040b0:	2200      	movs	r2, #0
 80040b2:	a914      	add	r1, sp, #80	; 0x50
 80040b4:	0020      	movs	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80040b6:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80040b8:	f7fd ff3c 	bl	8001f34 <HAL_TIM_PWM_ConfigChannel>
 80040bc:	2800      	cmp	r0, #0
 80040be:	d000      	beq.n	80040c2 <main+0x186>
 80040c0:	e7fe      	b.n	80040c0 <main+0x184>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80040c2:	2204      	movs	r2, #4
 80040c4:	a914      	add	r1, sp, #80	; 0x50
 80040c6:	0020      	movs	r0, r4
 80040c8:	f7fd ff34 	bl	8001f34 <HAL_TIM_PWM_ConfigChannel>
 80040cc:	2800      	cmp	r0, #0
 80040ce:	d000      	beq.n	80040d2 <main+0x196>
 80040d0:	e7fe      	b.n	80040d0 <main+0x194>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80040d2:	2208      	movs	r2, #8
 80040d4:	a914      	add	r1, sp, #80	; 0x50
 80040d6:	0020      	movs	r0, r4
 80040d8:	f7fd ff2c 	bl	8001f34 <HAL_TIM_PWM_ConfigChannel>
 80040dc:	2800      	cmp	r0, #0
 80040de:	d000      	beq.n	80040e2 <main+0x1a6>
 80040e0:	e7fe      	b.n	80040e0 <main+0x1a4>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80040e2:	220c      	movs	r2, #12
 80040e4:	a914      	add	r1, sp, #80	; 0x50
 80040e6:	0020      	movs	r0, r4
 80040e8:	f7fd ff24 	bl	8001f34 <HAL_TIM_PWM_ConfigChannel>
 80040ec:	2800      	cmp	r0, #0
 80040ee:	d000      	beq.n	80040f2 <main+0x1b6>
 80040f0:	e7fe      	b.n	80040f0 <main+0x1b4>
  sBreakDeadTimeConfig.DeadTime = 60;
 80040f2:	233c      	movs	r3, #60	; 0x3c
 80040f4:	931e      	str	r3, [sp, #120]	; 0x78
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80040f6:	2380      	movs	r3, #128	; 0x80
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80040f8:	901b      	str	r0, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80040fa:	901c      	str	r0, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80040fc:	901d      	str	r0, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80040fe:	901f      	str	r0, [sp, #124]	; 0x7c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004100:	019b      	lsls	r3, r3, #6
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004102:	9021      	str	r0, [sp, #132]	; 0x84
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004104:	a91b      	add	r1, sp, #108	; 0x6c
 8004106:	0020      	movs	r0, r4
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004108:	9320      	str	r3, [sp, #128]	; 0x80
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800410a:	f7fe fa93 	bl	8002634 <HAL_TIMEx_ConfigBreakDeadTime>
 800410e:	1e05      	subs	r5, r0, #0
 8004110:	d000      	beq.n	8004114 <main+0x1d8>
 8004112:	e7fe      	b.n	8004112 <main+0x1d6>
  HAL_TIM_MspPostInit(&htim1);
 8004114:	0020      	movs	r0, r4
 8004116:	f001 f9c9 	bl	80054ac <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 800411a:	2380      	movs	r3, #128	; 0x80
 800411c:	4e52      	ldr	r6, [pc, #328]	; (8004268 <main+0x32c>)
 800411e:	05db      	lsls	r3, r3, #23
 8004120:	6033      	str	r3, [r6, #0]
  htim2.Init.Prescaler = 10;
 8004122:	230a      	movs	r3, #10
 8004124:	4698      	mov	r8, r3
 8004126:	6073      	str	r3, [r6, #4]
  htim2.Init.Period = 126000;
 8004128:	4b50      	ldr	r3, [pc, #320]	; (800426c <main+0x330>)
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800412a:	0030      	movs	r0, r6
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800412c:	60b5      	str	r5, [r6, #8]
  htim2.Init.Period = 126000;
 800412e:	60f3      	str	r3, [r6, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004130:	6135      	str	r5, [r6, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004132:	61b5      	str	r5, [r6, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004134:	f7fd fb5a 	bl	80017ec <HAL_TIM_Base_Init>
 8004138:	2800      	cmp	r0, #0
 800413a:	d000      	beq.n	800413e <main+0x202>
 800413c:	e7fe      	b.n	800413c <main+0x200>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800413e:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004140:	a91b      	add	r1, sp, #108	; 0x6c
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004142:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004144:	0030      	movs	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004146:	4699      	mov	r9, r3
 8004148:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800414a:	f7fe f829 	bl	80021a0 <HAL_TIM_ConfigClockSource>
 800414e:	2800      	cmp	r0, #0
 8004150:	d000      	beq.n	8004154 <main+0x218>
 8004152:	e7fe      	b.n	8004152 <main+0x216>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004154:	9014      	str	r0, [sp, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004156:	9015      	str	r0, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004158:	a914      	add	r1, sp, #80	; 0x50
 800415a:	0030      	movs	r0, r6
 800415c:	f7fe fa4a 	bl	80025f4 <HAL_TIMEx_MasterConfigSynchronization>
 8004160:	2800      	cmp	r0, #0
 8004162:	d000      	beq.n	8004166 <main+0x22a>
 8004164:	e7fe      	b.n	8004164 <main+0x228>
  htim3.Instance = TIM3;
 8004166:	4d42      	ldr	r5, [pc, #264]	; (8004270 <main+0x334>)
 8004168:	4b42      	ldr	r3, [pc, #264]	; (8004274 <main+0x338>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800416a:	60a8      	str	r0, [r5, #8]
  htim3.Instance = TIM3;
 800416c:	602b      	str	r3, [r5, #0]
  htim3.Init.Prescaler = 10;
 800416e:	4643      	mov	r3, r8
 8004170:	606b      	str	r3, [r5, #4]
  htim3.Init.Period = 65535;
 8004172:	4b41      	ldr	r3, [pc, #260]	; (8004278 <main+0x33c>)
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004174:	6128      	str	r0, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004176:	61a8      	str	r0, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004178:	0028      	movs	r0, r5
  htim3.Init.Period = 65535;
 800417a:	4698      	mov	r8, r3
 800417c:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800417e:	f7fd fb35 	bl	80017ec <HAL_TIM_Base_Init>
 8004182:	2800      	cmp	r0, #0
 8004184:	d000      	beq.n	8004188 <main+0x24c>
 8004186:	e7fe      	b.n	8004186 <main+0x24a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004188:	464b      	mov	r3, r9
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800418a:	a91b      	add	r1, sp, #108	; 0x6c
 800418c:	0028      	movs	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800418e:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004190:	f7fe f806 	bl	80021a0 <HAL_TIM_ConfigClockSource>
 8004194:	2800      	cmp	r0, #0
 8004196:	d000      	beq.n	800419a <main+0x25e>
 8004198:	e7fe      	b.n	8004198 <main+0x25c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800419a:	9014      	str	r0, [sp, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800419c:	9015      	str	r0, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800419e:	a914      	add	r1, sp, #80	; 0x50
 80041a0:	0028      	movs	r0, r5
 80041a2:	f7fe fa27 	bl	80025f4 <HAL_TIMEx_MasterConfigSynchronization>
 80041a6:	2800      	cmp	r0, #0
 80041a8:	d000      	beq.n	80041ac <main+0x270>
 80041aa:	e7fe      	b.n	80041aa <main+0x26e>
  htim15.Instance = TIM15;
 80041ac:	4a33      	ldr	r2, [pc, #204]	; (800427c <main+0x340>)
 80041ae:	4b34      	ldr	r3, [pc, #208]	; (8004280 <main+0x344>)
  htim15.Init.Prescaler = 0;
 80041b0:	6050      	str	r0, [r2, #4]
  htim15.Instance = TIM15;
 80041b2:	6013      	str	r3, [r2, #0]
  htim15.Init.Prescaler = 0;
 80041b4:	0013      	movs	r3, r2
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041b6:	6090      	str	r0, [r2, #8]
  htim15.Init.Period = 0xffff;
 80041b8:	4642      	mov	r2, r8
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041ba:	6118      	str	r0, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80041bc:	6158      	str	r0, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041be:	6198      	str	r0, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80041c0:	0018      	movs	r0, r3
  htim15.Init.Period = 0xffff;
 80041c2:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80041c4:	f7fd fb12 	bl	80017ec <HAL_TIM_Base_Init>
 80041c8:	2800      	cmp	r0, #0
 80041ca:	d000      	beq.n	80041ce <main+0x292>
 80041cc:	e7fe      	b.n	80041cc <main+0x290>
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 80041ce:	482b      	ldr	r0, [pc, #172]	; (800427c <main+0x340>)
 80041d0:	f7fd fc9e 	bl	8001b10 <HAL_TIM_IC_Init>
 80041d4:	2800      	cmp	r0, #0
 80041d6:	d000      	beq.n	80041da <main+0x29e>
 80041d8:	e7fe      	b.n	80041d8 <main+0x29c>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80041da:	2304      	movs	r3, #4
 80041dc:	931b      	str	r3, [sp, #108]	; 0x6c
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80041de:	334c      	adds	r3, #76	; 0x4c
 80041e0:	931c      	str	r3, [sp, #112]	; 0x70
  sSlaveConfig.TriggerFilter = 0;
 80041e2:	901f      	str	r0, [sp, #124]	; 0x7c
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80041e4:	3b46      	subs	r3, #70	; 0x46
  if (HAL_TIM_SlaveConfigSynchronization(&htim15, &sSlaveConfig) != HAL_OK)
 80041e6:	a91b      	add	r1, sp, #108	; 0x6c
 80041e8:	4824      	ldr	r0, [pc, #144]	; (800427c <main+0x340>)
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80041ea:	4698      	mov	r8, r3
 80041ec:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_TIM_SlaveConfigSynchronization(&htim15, &sSlaveConfig) != HAL_OK)
 80041ee:	f7fe f89b 	bl	8002328 <HAL_TIM_SlaveConfigSynchronization>
 80041f2:	2800      	cmp	r0, #0
 80041f4:	d000      	beq.n	80041f8 <main+0x2bc>
 80041f6:	e7fe      	b.n	80041f6 <main+0x2ba>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041f8:	9010      	str	r0, [sp, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041fa:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80041fc:	a910      	add	r1, sp, #64	; 0x40
 80041fe:	481f      	ldr	r0, [pc, #124]	; (800427c <main+0x340>)
 8004200:	f7fe f9f8 	bl	80025f4 <HAL_TIMEx_MasterConfigSynchronization>
 8004204:	2800      	cmp	r0, #0
 8004206:	d000      	beq.n	800420a <main+0x2ce>
 8004208:	e7fe      	b.n	8004208 <main+0x2cc>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800420a:	4643      	mov	r3, r8
 800420c:	9314      	str	r3, [sp, #80]	; 0x50
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800420e:	2301      	movs	r3, #1
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004210:	9016      	str	r0, [sp, #88]	; 0x58
  sConfigIC.ICFilter = 0;
 8004212:	9017      	str	r0, [sp, #92]	; 0x5c
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004214:	2200      	movs	r2, #0
 8004216:	a914      	add	r1, sp, #80	; 0x50
 8004218:	4818      	ldr	r0, [pc, #96]	; (800427c <main+0x340>)
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800421a:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800421c:	f7fd fdac 	bl	8001d78 <HAL_TIM_IC_ConfigChannel>
 8004220:	2800      	cmp	r0, #0
 8004222:	d000      	beq.n	8004226 <main+0x2ea>
 8004224:	e7fe      	b.n	8004224 <main+0x2e8>
  htim16.Instance = TIM16;
 8004226:	4a17      	ldr	r2, [pc, #92]	; (8004284 <main+0x348>)
 8004228:	4b17      	ldr	r3, [pc, #92]	; (8004288 <main+0x34c>)
  htim16.Init.Prescaler = 0;
 800422a:	6050      	str	r0, [r2, #4]
  htim16.Instance = TIM16;
 800422c:	6013      	str	r3, [r2, #0]
  htim16.Init.Period = 9000;
 800422e:	4b17      	ldr	r3, [pc, #92]	; (800428c <main+0x350>)
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004230:	6090      	str	r0, [r2, #8]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004232:	6110      	str	r0, [r2, #16]
  htim16.Init.RepetitionCounter = 0;
 8004234:	6150      	str	r0, [r2, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004236:	6190      	str	r0, [r2, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8004238:	0010      	movs	r0, r2
  htim16.Init.Period = 9000;
 800423a:	60d3      	str	r3, [r2, #12]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800423c:	f7fd fad6 	bl	80017ec <HAL_TIM_Base_Init>
 8004240:	2800      	cmp	r0, #0
 8004242:	d025      	beq.n	8004290 <main+0x354>
 8004244:	e7fe      	b.n	8004244 <main+0x308>
 8004246:	46c0      	nop			; (mov r8, r8)
 8004248:	40021000 	.word	0x40021000
 800424c:	20000474 	.word	0x20000474
 8004250:	40012400 	.word	0x40012400
 8004254:	200001e4 	.word	0x200001e4
 8004258:	4001001c 	.word	0x4001001c
 800425c:	200003a0 	.word	0x200003a0
 8004260:	40012c00 	.word	0x40012c00
 8004264:	000007cf 	.word	0x000007cf
 8004268:	200003e4 	.word	0x200003e4
 800426c:	0001ec30 	.word	0x0001ec30
 8004270:	20000210 	.word	0x20000210
 8004274:	40000400 	.word	0x40000400
 8004278:	0000ffff 	.word	0x0000ffff
 800427c:	20000184 	.word	0x20000184
 8004280:	40014000 	.word	0x40014000
 8004284:	200004c0 	.word	0x200004c0
 8004288:	40014400 	.word	0x40014400
 800428c:	00002328 	.word	0x00002328
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8004290:	2100      	movs	r1, #0
 8004292:	0020      	movs	r0, r4
 8004294:	f7fd fc10 	bl	8001ab8 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8004298:	2100      	movs	r1, #0
 800429a:	0020      	movs	r0, r4
 800429c:	f7fe f996 	bl	80025cc <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80042a0:	2104      	movs	r1, #4
 80042a2:	0020      	movs	r0, r4
 80042a4:	f7fd fc08 	bl	8001ab8 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80042a8:	2104      	movs	r1, #4
 80042aa:	0020      	movs	r0, r4
 80042ac:	f7fe f98e 	bl	80025cc <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80042b0:	2108      	movs	r1, #8
 80042b2:	0020      	movs	r0, r4
 80042b4:	f7fd fc00 	bl	8001ab8 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80042b8:	2108      	movs	r1, #8
 80042ba:	0020      	movs	r0, r4
 80042bc:	f7fe f986 	bl	80025cc <HAL_TIMEx_PWMN_Start>
	HAL_TIM_Base_Start(&htim2);
 80042c0:	0030      	movs	r0, r6
 80042c2:	f7fd fb0b 	bl	80018dc <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim16);
 80042c6:	4899      	ldr	r0, [pc, #612]	; (800452c <main+0x5f0>)
 80042c8:	f7fd fb2e 	bl	8001928 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim3);
 80042cc:	0028      	movs	r0, r5
 80042ce:	f7fd fb05 	bl	80018dc <HAL_TIM_Base_Start>
	for ( int i = 0; i < vehicle_mode; i++){
 80042d2:	4b97      	ldr	r3, [pc, #604]	; (8004530 <main+0x5f4>)
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d100      	bne.n	80042dc <main+0x3a0>
 80042da:	e0a2      	b.n	8004422 <main+0x4e6>
 80042dc:	2300      	movs	r3, #0
 80042de:	469a      	mov	sl, r3
 80042e0:	4b94      	ldr	r3, [pc, #592]	; (8004534 <main+0x5f8>)
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 80042e2:	2590      	movs	r5, #144	; 0x90
 80042e4:	9301      	str	r3, [sp, #4]
 80042e6:	4b94      	ldr	r3, [pc, #592]	; (8004538 <main+0x5fc>)
 80042e8:	4e94      	ldr	r6, [pc, #592]	; (800453c <main+0x600>)
 80042ea:	9300      	str	r3, [sp, #0]
	TIM1->PSC = 75;
 80042ec:	4b94      	ldr	r3, [pc, #592]	; (8004540 <main+0x604>)
 80042ee:	05ed      	lsls	r5, r5, #23
 80042f0:	4699      	mov	r9, r3
 80042f2:	2301      	movs	r3, #1
 80042f4:	469b      	mov	fp, r3
 80042f6:	464a      	mov	r2, r9
 80042f8:	234b      	movs	r3, #75	; 0x4b
 80042fa:	6293      	str	r3, [r2, #40]	; 0x28
	TIM1->CCR1 = 5;
 80042fc:	3b46      	subs	r3, #70	; 0x46
 80042fe:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2 = 5;
 8004300:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1->CCR3 = 5;
 8004302:	63d3      	str	r3, [r2, #60]	; 0x3c
 8004304:	2203      	movs	r2, #3
 8004306:	6833      	ldr	r3, [r6, #0]
 8004308:	4393      	bics	r3, r2
 800430a:	465a      	mov	r2, fp
 800430c:	4313      	orrs	r3, r2
 800430e:	6033      	str	r3, [r6, #0]
		GPIOB->BSRR = GPIO_PIN_0;
 8004310:	2301      	movs	r3, #1
 8004312:	61b3      	str	r3, [r6, #24]
 8004314:	682b      	ldr	r3, [r5, #0]
 8004316:	4a8b      	ldr	r2, [pc, #556]	; (8004544 <main+0x608>)
 8004318:	401a      	ands	r2, r3
 800431a:	2380      	movs	r3, #128	; 0x80
 800431c:	02db      	lsls	r3, r3, #11
 800431e:	4313      	orrs	r3, r2
 8004320:	602b      	str	r3, [r5, #0]
		GPIOA->BRR = GPIO_PIN_9;
 8004322:	2380      	movs	r3, #128	; 0x80
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	62ab      	str	r3, [r5, #40]	; 0x28
 8004328:	682b      	ldr	r3, [r5, #0]
 800432a:	4a87      	ldr	r2, [pc, #540]	; (8004548 <main+0x60c>)
 800432c:	401a      	ands	r2, r3
 800432e:	2380      	movs	r3, #128	; 0x80
 8004330:	01db      	lsls	r3, r3, #7
 8004332:	4313      	orrs	r3, r2
 8004334:	602b      	str	r3, [r5, #0]
		GPIOA->BRR = GPIO_PIN_7;
 8004336:	2380      	movs	r3, #128	; 0x80
 8004338:	62ab      	str	r3, [r5, #40]	; 0x28
 800433a:	682b      	ldr	r3, [r5, #0]
 800433c:	4a83      	ldr	r2, [pc, #524]	; (800454c <main+0x610>)
 800433e:	401a      	ands	r2, r3
 8004340:	2380      	movs	r3, #128	; 0x80
 8004342:	025b      	lsls	r3, r3, #9
 8004344:	4313      	orrs	r3, r2
 8004346:	602b      	str	r3, [r5, #0]
		GPIOA->BRR = GPIO_PIN_8;
 8004348:	2380      	movs	r3, #128	; 0x80
 800434a:	005b      	lsls	r3, r3, #1
 800434c:	62ab      	str	r3, [r5, #40]	; 0x28
		if (!comp_pwm || prop_brake_active){
 800434e:	9b01      	ldr	r3, [sp, #4]
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d078      	beq.n	8004448 <main+0x50c>
 8004356:	9b00      	ldr	r3, [sp, #0]
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d174      	bne.n	8004448 <main+0x50c>
 800435e:	220c      	movs	r2, #12
 8004360:	6833      	ldr	r3, [r6, #0]
 8004362:	4393      	bics	r3, r2
 8004364:	3a04      	subs	r2, #4
 8004366:	4313      	orrs	r3, r2
 8004368:	6033      	str	r3, [r6, #0]
 800436a:	682a      	ldr	r2, [r5, #0]
 800436c:	4b78      	ldr	r3, [pc, #480]	; (8004550 <main+0x614>)
	HAL_Delay(100);
 800436e:	2064      	movs	r0, #100	; 0x64
 8004370:	401a      	ands	r2, r3
 8004372:	4698      	mov	r8, r3
 8004374:	2380      	movs	r3, #128	; 0x80
 8004376:	039b      	lsls	r3, r3, #14
 8004378:	4313      	orrs	r3, r2
 800437a:	602b      	str	r3, [r5, #0]
 800437c:	f7fc f86a 	bl	8000454 <HAL_Delay>
	TIM1->PSC = 50;
 8004380:	2332      	movs	r3, #50	; 0x32
 8004382:	464a      	mov	r2, r9
	HAL_Delay(100);
 8004384:	2064      	movs	r0, #100	; 0x64
	TIM1->PSC = 50;
 8004386:	6293      	str	r3, [r2, #40]	; 0x28
	HAL_Delay(100);
 8004388:	f7fc f864 	bl	8000454 <HAL_Delay>
	TIM1->PSC = 25;
 800438c:	2319      	movs	r3, #25
 800438e:	464a      	mov	r2, r9
	HAL_Delay(100);
 8004390:	2064      	movs	r0, #100	; 0x64
	TIM1->PSC = 25;
 8004392:	6293      	str	r3, [r2, #40]	; 0x28
	HAL_Delay(100);
 8004394:	f7fc f85e 	bl	8000454 <HAL_Delay>
 8004398:	2203      	movs	r2, #3
 800439a:	6833      	ldr	r3, [r6, #0]
	HAL_Delay(100);
 800439c:	2064      	movs	r0, #100	; 0x64
 800439e:	4393      	bics	r3, r2
 80043a0:	465a      	mov	r2, fp
 80043a2:	4313      	orrs	r3, r2
 80043a4:	6033      	str	r3, [r6, #0]
		GPIOB->BRR = GPIO_PIN_0;
 80043a6:	62b2      	str	r2, [r6, #40]	; 0x28
 80043a8:	682b      	ldr	r3, [r5, #0]
 80043aa:	4a66      	ldr	r2, [pc, #408]	; (8004544 <main+0x608>)
 80043ac:	401a      	ands	r2, r3
 80043ae:	2380      	movs	r3, #128	; 0x80
 80043b0:	02db      	lsls	r3, r3, #11
 80043b2:	4313      	orrs	r3, r2
 80043b4:	602b      	str	r3, [r5, #0]
		GPIOA->BRR = GPIO_PIN_9;
 80043b6:	2380      	movs	r3, #128	; 0x80
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	62ab      	str	r3, [r5, #40]	; 0x28
 80043bc:	682b      	ldr	r3, [r5, #0]
 80043be:	4a62      	ldr	r2, [pc, #392]	; (8004548 <main+0x60c>)
 80043c0:	401a      	ands	r2, r3
 80043c2:	2380      	movs	r3, #128	; 0x80
 80043c4:	01db      	lsls	r3, r3, #7
 80043c6:	4313      	orrs	r3, r2
 80043c8:	602b      	str	r3, [r5, #0]
		GPIOA->BRR = GPIO_PIN_7;
 80043ca:	2380      	movs	r3, #128	; 0x80
 80043cc:	62ab      	str	r3, [r5, #40]	; 0x28
 80043ce:	682b      	ldr	r3, [r5, #0]
 80043d0:	4a5e      	ldr	r2, [pc, #376]	; (800454c <main+0x610>)
 80043d2:	401a      	ands	r2, r3
 80043d4:	2380      	movs	r3, #128	; 0x80
 80043d6:	025b      	lsls	r3, r3, #9
 80043d8:	4313      	orrs	r3, r2
 80043da:	602b      	str	r3, [r5, #0]
		GPIOA->BRR = GPIO_PIN_8;
 80043dc:	2380      	movs	r3, #128	; 0x80
 80043de:	220c      	movs	r2, #12
 80043e0:	005b      	lsls	r3, r3, #1
 80043e2:	62ab      	str	r3, [r5, #40]	; 0x28
 80043e4:	6833      	ldr	r3, [r6, #0]
 80043e6:	4393      	bics	r3, r2
 80043e8:	3a08      	subs	r2, #8
 80043ea:	4313      	orrs	r3, r2
 80043ec:	6033      	str	r3, [r6, #0]
		GPIOB->BRR = GPIO_PIN_1;
 80043ee:	2302      	movs	r3, #2
 80043f0:	62b3      	str	r3, [r6, #40]	; 0x28
 80043f2:	4643      	mov	r3, r8
 80043f4:	682a      	ldr	r2, [r5, #0]
 80043f6:	401a      	ands	r2, r3
 80043f8:	2380      	movs	r3, #128	; 0x80
 80043fa:	035b      	lsls	r3, r3, #13
 80043fc:	4313      	orrs	r3, r2
 80043fe:	602b      	str	r3, [r5, #0]
		GPIOA->BRR = GPIO_PIN_10;
 8004400:	2380      	movs	r3, #128	; 0x80
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	62ab      	str	r3, [r5, #40]	; 0x28
	TIM1->PSC = 0;
 8004406:	464a      	mov	r2, r9
 8004408:	2300      	movs	r3, #0
 800440a:	6293      	str	r3, [r2, #40]	; 0x28
	HAL_Delay(100);
 800440c:	f7fc f822 	bl	8000454 <HAL_Delay>
	for ( int i = 0; i < vehicle_mode; i++){
 8004410:	2301      	movs	r3, #1
 8004412:	469c      	mov	ip, r3
 8004414:	4b46      	ldr	r3, [pc, #280]	; (8004530 <main+0x5f4>)
 8004416:	44e2      	add	sl, ip
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	4553      	cmp	r3, sl
 800441c:	dd00      	ble.n	8004420 <main+0x4e4>
 800441e:	e76a      	b.n	80042f6 <main+0x3ba>
 8004420:	e003      	b.n	800442a <main+0x4ee>
 8004422:	4b44      	ldr	r3, [pc, #272]	; (8004534 <main+0x5f8>)
 8004424:	9301      	str	r3, [sp, #4]
 8004426:	4b44      	ldr	r3, [pc, #272]	; (8004538 <main+0x5fc>)
 8004428:	9300      	str	r3, [sp, #0]
	hiwdg.Instance = IWDG;
 800442a:	4a4a      	ldr	r2, [pc, #296]	; (8004554 <main+0x618>)
 800442c:	4b4a      	ldr	r3, [pc, #296]	; (8004558 <main+0x61c>)
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800442e:	0010      	movs	r0, r2
	hiwdg.Instance = IWDG;
 8004430:	6013      	str	r3, [r2, #0]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_16;
 8004432:	2302      	movs	r3, #2
 8004434:	6053      	str	r3, [r2, #4]
	hiwdg.Init.Window = IWDG_WINDOW_DISABLE;
 8004436:	4b49      	ldr	r3, [pc, #292]	; (800455c <main+0x620>)
 8004438:	60d3      	str	r3, [r2, #12]
	hiwdg.Init.Reload = 4000;
 800443a:	3b5f      	subs	r3, #95	; 0x5f
 800443c:	6093      	str	r3, [r2, #8]
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800443e:	f7fc fe8f 	bl	8001160 <HAL_IWDG_Init>
 8004442:	2800      	cmp	r0, #0
 8004444:	d009      	beq.n	800445a <main+0x51e>
 8004446:	e7fe      	b.n	8004446 <main+0x50a>
 8004448:	220c      	movs	r2, #12
 800444a:	6833      	ldr	r3, [r6, #0]
 800444c:	4393      	bics	r3, r2
 800444e:	3a08      	subs	r2, #8
 8004450:	4313      	orrs	r3, r2
 8004452:	6033      	str	r3, [r6, #0]
			GPIOB->BRR = GPIO_PIN_1;
 8004454:	2302      	movs	r3, #2
 8004456:	62b3      	str	r3, [r6, #40]	; 0x28
 8004458:	e787      	b.n	800436a <main+0x42e>
	if (vehicle_mode == 1){                    // quad single direction
 800445a:	4b35      	ldr	r3, [pc, #212]	; (8004530 <main+0x5f4>)
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d103      	bne.n	800446a <main+0x52e>
		loadEEpromConfig();
 8004462:	f7fe fd1f 	bl	8002ea4 <loadEEpromConfig>
 8004466:	4b32      	ldr	r3, [pc, #200]	; (8004530 <main+0x5f4>)
 8004468:	781b      	ldrb	r3, [r3, #0]
	if (vehicle_mode == 2){                   // crawler or thruster
 800446a:	2b02      	cmp	r3, #2
 800446c:	d012      	beq.n	8004494 <main+0x558>
	if (vehicle_mode == 3){                 // rc car 50 percent brake on reverse.
 800446e:	2b03      	cmp	r3, #3
 8004470:	d040      	beq.n	80044f4 <main+0x5b8>
	if (vehicle_mode == 4){                 // rc car 50 percent brake on reverse.
 8004472:	2b04      	cmp	r3, #4
 8004474:	d029      	beq.n	80044ca <main+0x58e>
 8004476:	4b3a      	ldr	r3, [pc, #232]	; (8004560 <main+0x624>)
 8004478:	9302      	str	r3, [sp, #8]
 800447a:	4b3a      	ldr	r3, [pc, #232]	; (8004564 <main+0x628>)
 800447c:	9303      	str	r3, [sp, #12]
 800447e:	4b3a      	ldr	r3, [pc, #232]	; (8004568 <main+0x62c>)
 8004480:	9304      	str	r3, [sp, #16]
 8004482:	4b3a      	ldr	r3, [pc, #232]	; (800456c <main+0x630>)
 8004484:	9306      	str	r3, [sp, #24]
	if (HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_4) != HAL_OK)
 8004486:	210c      	movs	r1, #12
 8004488:	0020      	movs	r0, r4
 800448a:	f7fd fa57 	bl	800193c <HAL_TIM_OC_Start_IT>
 800448e:	2800      	cmp	r0, #0
 8004490:	d00f      	beq.n	80044b2 <main+0x576>
 8004492:	e7fe      	b.n	8004492 <main+0x556>
		 bi_direction = 1;
 8004494:	4b32      	ldr	r3, [pc, #200]	; (8004560 <main+0x624>)
 8004496:	001a      	movs	r2, r3
 8004498:	9302      	str	r3, [sp, #8]
 800449a:	2301      	movs	r3, #1
 800449c:	6013      	str	r3, [r2, #0]
		 comp_pwm = 1;                      // for complementary pwm , 0 for diode freewheeling
 800449e:	9a01      	ldr	r2, [sp, #4]
 80044a0:	7013      	strb	r3, [r2, #0]
		 brake = 1;                          // apply full motor brake on stop
 80044a2:	4a30      	ldr	r2, [pc, #192]	; (8004564 <main+0x628>)
 80044a4:	6013      	str	r3, [r2, #0]
 80044a6:	4b30      	ldr	r3, [pc, #192]	; (8004568 <main+0x62c>)
 80044a8:	9203      	str	r2, [sp, #12]
 80044aa:	9304      	str	r3, [sp, #16]
 80044ac:	4b2f      	ldr	r3, [pc, #188]	; (800456c <main+0x630>)
 80044ae:	9306      	str	r3, [sp, #24]
 80044b0:	e7e9      	b.n	8004486 <main+0x54a>
	HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , 64);
 80044b2:	2340      	movs	r3, #64	; 0x40
 80044b4:	4a2e      	ldr	r2, [pc, #184]	; (8004570 <main+0x634>)
 80044b6:	2100      	movs	r1, #0
 80044b8:	482e      	ldr	r0, [pc, #184]	; (8004574 <main+0x638>)
 80044ba:	f7fd fba1 	bl	8001c00 <HAL_TIM_IC_Start_DMA>
		if(HAL_COMP_Start_IT(&hcomp1) != HAL_OK)
 80044be:	0038      	movs	r0, r7
 80044c0:	f7fc fa12 	bl	80008e8 <HAL_COMP_Start_IT>
 80044c4:	2800      	cmp	r0, #0
 80044c6:	d02a      	beq.n	800451e <main+0x5e2>
 80044c8:	e7fe      	b.n	80044c8 <main+0x58c>
			 bi_direction = 1;
 80044ca:	4b25      	ldr	r3, [pc, #148]	; (8004560 <main+0x624>)
			 comp_pwm = 0;                      // for complementary pwm , 0 for diode freewheeling
 80044cc:	9901      	ldr	r1, [sp, #4]
			 bi_direction = 1;
 80044ce:	001a      	movs	r2, r3
 80044d0:	9302      	str	r3, [sp, #8]
 80044d2:	2301      	movs	r3, #1
 80044d4:	6013      	str	r3, [r2, #0]
			 comp_pwm = 0;                      // for complementary pwm , 0 for diode freewheeling
 80044d6:	2200      	movs	r2, #0
 80044d8:	700a      	strb	r2, [r1, #0]
			 brake = 0;                          // apply full motor brake on stop
 80044da:	4922      	ldr	r1, [pc, #136]	; (8004564 <main+0x628>)
 80044dc:	600a      	str	r2, [r1, #0]
			 prop_brake = 1;
 80044de:	4a22      	ldr	r2, [pc, #136]	; (8004568 <main+0x62c>)
			 brake = 0;                          // apply full motor brake on stop
 80044e0:	9103      	str	r1, [sp, #12]
			 prop_brake = 1;
 80044e2:	7013      	strb	r3, [r2, #0]
			 prop_brake_strength = 800;
 80044e4:	4b21      	ldr	r3, [pc, #132]	; (800456c <main+0x630>)
			 prop_brake = 1;
 80044e6:	9204      	str	r2, [sp, #16]
			 prop_brake_strength = 800;
 80044e8:	9306      	str	r3, [sp, #24]
 80044ea:	001a      	movs	r2, r3
 80044ec:	23c8      	movs	r3, #200	; 0xc8
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	6013      	str	r3, [r2, #0]
 80044f2:	e7c8      	b.n	8004486 <main+0x54a>
		 bi_direction = 1;
 80044f4:	4b1a      	ldr	r3, [pc, #104]	; (8004560 <main+0x624>)
		 comp_pwm = 0;                      // for complementary pwm , 0 for diode freewheeling
 80044f6:	9901      	ldr	r1, [sp, #4]
		 bi_direction = 1;
 80044f8:	001a      	movs	r2, r3
 80044fa:	9302      	str	r3, [sp, #8]
 80044fc:	2301      	movs	r3, #1
 80044fe:	6013      	str	r3, [r2, #0]
		 comp_pwm = 0;                      // for complementary pwm , 0 for diode freewheeling
 8004500:	2200      	movs	r2, #0
 8004502:	700a      	strb	r2, [r1, #0]
		 brake = 0;                          // apply full motor brake on stop
 8004504:	4917      	ldr	r1, [pc, #92]	; (8004564 <main+0x628>)
 8004506:	600a      	str	r2, [r1, #0]
		 prop_brake = 1;
 8004508:	4a17      	ldr	r2, [pc, #92]	; (8004568 <main+0x62c>)
		 brake = 0;                          // apply full motor brake on stop
 800450a:	9103      	str	r1, [sp, #12]
		 prop_brake = 1;
 800450c:	7013      	strb	r3, [r2, #0]
		 prop_brake_strength = 900;
 800450e:	4b17      	ldr	r3, [pc, #92]	; (800456c <main+0x630>)
		 prop_brake = 1;
 8004510:	9204      	str	r2, [sp, #16]
		 prop_brake_strength = 900;
 8004512:	9306      	str	r3, [sp, #24]
 8004514:	001a      	movs	r2, r3
 8004516:	23e1      	movs	r3, #225	; 0xe1
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	6013      	str	r3, [r2, #0]
 800451c:	e7b3      	b.n	8004486 <main+0x54a>
	if(HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800451e:	480d      	ldr	r0, [pc, #52]	; (8004554 <main+0x618>)
 8004520:	f7fc fe1e 	bl	8001160 <HAL_IWDG_Init>
 8004524:	2800      	cmp	r0, #0
 8004526:	d027      	beq.n	8004578 <main+0x63c>
 8004528:	e7fe      	b.n	8004528 <main+0x5ec>
 800452a:	46c0      	nop			; (mov r8, r8)
 800452c:	200004c0 	.word	0x200004c0
 8004530:	2000005c 	.word	0x2000005c
 8004534:	20000018 	.word	0x20000018
 8004538:	200000f4 	.word	0x200000f4
 800453c:	48000400 	.word	0x48000400
 8004540:	40012c00 	.word	0x40012c00
 8004544:	fff3ffff 	.word	0xfff3ffff
 8004548:	ffff3fff 	.word	0xffff3fff
 800454c:	fffcffff 	.word	0xfffcffff
 8004550:	ffcfffff 	.word	0xffcfffff
 8004554:	200001c8 	.word	0x200001c8
 8004558:	40003000 	.word	0x40003000
 800455c:	00000fff 	.word	0x00000fff
 8004560:	20000010 	.word	0x20000010
 8004564:	20000014 	.word	0x20000014
 8004568:	200000f3 	.word	0x200000f3
 800456c:	2000003c 	.word	0x2000003c
 8004570:	20000258 	.word	0x20000258
 8004574:	20000184 	.word	0x20000184
	if(bi_direction){
 8004578:	9b02      	ldr	r3, [sp, #8]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	9305      	str	r3, [sp, #20]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <main+0x64a>
 8004582:	f000 fc3b 	bl	8004dfc <main+0xec0>
 8004586:	4bdd      	ldr	r3, [pc, #884]	; (80048fc <main+0x9c0>)
 8004588:	9307      	str	r3, [sp, #28]
 800458a:	4bdd      	ldr	r3, [pc, #884]	; (8004900 <main+0x9c4>)
	TIM1->CCR4 = 800;
 800458c:	21c8      	movs	r1, #200	; 0xc8
 800458e:	4698      	mov	r8, r3
	if (dir_reversed == 1){
 8004590:	4bdc      	ldr	r3, [pc, #880]	; (8004904 <main+0x9c8>)
	TIM1->CCR4 = 800;
 8004592:	0089      	lsls	r1, r1, #2
	if (dir_reversed == 1){
 8004594:	469a      	mov	sl, r3
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	3b01      	subs	r3, #1
 800459a:	1e5a      	subs	r2, r3, #1
 800459c:	4193      	sbcs	r3, r2
 800459e:	4642      	mov	r2, r8
 80045a0:	6013      	str	r3, [r2, #0]
	TIM1->CCR1 = 1;
 80045a2:	2301      	movs	r3, #1
 80045a4:	4ad8      	ldr	r2, [pc, #864]	; (8004908 <main+0x9cc>)
 80045a6:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2 = 1;
 80045a8:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1->CCR3 = 1;
 80045aa:	63d3      	str	r3, [r2, #60]	; 0x3c
	TIM1->CCR4 = 800;
 80045ac:	6411      	str	r1, [r2, #64]	; 0x40
	if (!brushed_mode && bi_polar){          // sanity check, turn off bipolar pwm if brushed mode is not selected
 80045ae:	4ad7      	ldr	r2, [pc, #860]	; (800490c <main+0x9d0>)
 80045b0:	7812      	ldrb	r2, [r2, #0]
 80045b2:	2a00      	cmp	r2, #0
 80045b4:	d001      	beq.n	80045ba <main+0x67e>
 80045b6:	f000 fc16 	bl	8004de6 <main+0xeaa>
 80045ba:	4bd5      	ldr	r3, [pc, #852]	; (8004910 <main+0x9d4>)
 80045bc:	0019      	movs	r1, r3
 80045be:	9305      	str	r3, [sp, #20]
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d000      	beq.n	80045c8 <main+0x68c>
		bi_polar = 0;
 80045c6:	700a      	strb	r2, [r1, #0]
 80045c8:	4bd2      	ldr	r3, [pc, #840]	; (8004914 <main+0x9d8>)
 80045ca:	4ed3      	ldr	r6, [pc, #844]	; (8004918 <main+0x9dc>)
 80045cc:	681c      	ldr	r4, [r3, #0]
 80045ce:	4bd3      	ldr	r3, [pc, #844]	; (800491c <main+0x9e0>)
 80045d0:	6830      	ldr	r0, [r6, #0]
 80045d2:	4699      	mov	r9, r3
 80045d4:	4bd2      	ldr	r3, [pc, #840]	; (8004920 <main+0x9e4>)
 80045d6:	4dd3      	ldr	r5, [pc, #844]	; (8004924 <main+0x9e8>)
 80045d8:	469b      	mov	fp, r3
		k_erpm = ((100000000 / (commutation_interval * 208 * 6)) * 6)/10 ;
 80045da:	219c      	movs	r1, #156	; 0x9c
 80045dc:	00c9      	lsls	r1, r1, #3
 80045de:	4341      	muls	r1, r0
 80045e0:	48d1      	ldr	r0, [pc, #836]	; (8004928 <main+0x9ec>)
 80045e2:	f7fb fe1b 	bl	800021c <__divsi3>
 80045e6:	0003      	movs	r3, r0
 80045e8:	0040      	lsls	r0, r0, #1
 80045ea:	18c0      	adds	r0, r0, r3
 80045ec:	0040      	lsls	r0, r0, #1
 80045ee:	210a      	movs	r1, #10
 80045f0:	f7fb fe14 	bl	800021c <__divsi3>
 80045f4:	4bcd      	ldr	r3, [pc, #820]	; (800492c <main+0x9f0>)
		count++;
 80045f6:	3401      	adds	r4, #1
		k_erpm = ((100000000 / (commutation_interval * 208 * 6)) * 6)/10 ;
 80045f8:	6018      	str	r0, [r3, #0]
		count++;
 80045fa:	4bc6      	ldr	r3, [pc, #792]	; (8004914 <main+0x9d8>)
 80045fc:	601c      	str	r4, [r3, #0]
		if (count > 100000) {
 80045fe:	4bcc      	ldr	r3, [pc, #816]	; (8004930 <main+0x9f4>)
 8004600:	429c      	cmp	r4, r3
 8004602:	dd02      	ble.n	800460a <main+0x6ce>
			count = 0;
 8004604:	2300      	movs	r3, #0
 8004606:	4ac3      	ldr	r2, [pc, #780]	; (8004914 <main+0x9d8>)
 8004608:	6013      	str	r3, [r2, #0]
		compit = 0;
 800460a:	2300      	movs	r3, #0
 800460c:	4ac9      	ldr	r2, [pc, #804]	; (8004934 <main+0x9f8>)
		if (HAL_IWDG_Refresh(&hiwdg) != HAL_OK)              // watchdog refresh
 800460e:	48ca      	ldr	r0, [pc, #808]	; (8004938 <main+0x9fc>)
		compit = 0;
 8004610:	7013      	strb	r3, [r2, #0]
		if (HAL_IWDG_Refresh(&hiwdg) != HAL_OK)              // watchdog refresh
 8004612:	f7fc fdd3 	bl	80011bc <HAL_IWDG_Refresh>
 8004616:	2800      	cmp	r0, #0
 8004618:	d000      	beq.n	800461c <main+0x6e0>
 800461a:	e3e3      	b.n	8004de4 <main+0xea8>
		control_loop_count++;
 800461c:	4bc7      	ldr	r3, [pc, #796]	; (800493c <main+0xa00>)
 800461e:	4ac7      	ldr	r2, [pc, #796]	; (800493c <main+0xa00>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	9308      	str	r3, [sp, #32]
 8004624:	3301      	adds	r3, #1
 8004626:	6013      	str	r3, [r2, #0]
		if (control_loop_count > 2) {
 8004628:	2b02      	cmp	r3, #2
 800462a:	dd78      	ble.n	800471e <main+0x7e2>
			if (dshotcommand > 0) {
 800462c:	4bc4      	ldr	r3, [pc, #784]	; (8004940 <main+0xa04>)
			control_loop_count = 0;
 800462e:	6010      	str	r0, [r2, #0]
			if (dshotcommand > 0) {
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	dc00      	bgt.n	8004638 <main+0x6fc>
 8004636:	e37f      	b.n	8004d38 <main+0xdfc>
				if (dshotcommand == 2) {
 8004638:	2b02      	cmp	r3, #2
 800463a:	d103      	bne.n	8004644 <main+0x708>
					playInputTune();
 800463c:	f7ff f920 	bl	8003880 <playInputTune>
 8004640:	4bbf      	ldr	r3, [pc, #764]	; (8004940 <main+0xa04>)
 8004642:	681b      	ldr	r3, [r3, #0]
				if (dshotcommand == 21) {
 8004644:	2b15      	cmp	r3, #21
 8004646:	d100      	bne.n	800464a <main+0x70e>
 8004648:	e371      	b.n	8004d2e <main+0xdf2>
				if (dshotcommand == 20) {     // forward = 1 if dir_reversed = 0
 800464a:	2b14      	cmp	r3, #20
 800464c:	d100      	bne.n	8004650 <main+0x714>
 800464e:	e367      	b.n	8004d20 <main+0xde4>
				if (dshotcommand == 7) {
 8004650:	2b07      	cmp	r3, #7
 8004652:	d100      	bne.n	8004656 <main+0x71a>
 8004654:	e356      	b.n	8004d04 <main+0xdc8>
				if (dshotcommand == 8) {
 8004656:	2b08      	cmp	r3, #8
 8004658:	d100      	bne.n	800465c <main+0x720>
 800465a:	e34f      	b.n	8004cfc <main+0xdc0>
				if (dshotcommand == 9) {
 800465c:	2b09      	cmp	r3, #9
 800465e:	d100      	bne.n	8004662 <main+0x726>
 8004660:	e36d      	b.n	8004d3e <main+0xe02>
				if (dshotcommand == 10) {
 8004662:	2b0a      	cmp	r3, #10
 8004664:	d100      	bne.n	8004668 <main+0x72c>
 8004666:	e2e8      	b.n	8004c3a <main+0xcfe>
				if (dshotcommand == 12) {
 8004668:	2b0c      	cmp	r3, #12
 800466a:	d100      	bne.n	800466e <main+0x732>
 800466c:	e3cd      	b.n	8004e0a <main+0xece>
				dshotcommand = 0;
 800466e:	2200      	movs	r2, #0
 8004670:	9b02      	ldr	r3, [sp, #8]
 8004672:	49b3      	ldr	r1, [pc, #716]	; (8004940 <main+0xa04>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	600a      	str	r2, [r1, #0]
			if (bi_direction == 1 && (proshot == 0 && dshot == 0)) {
 8004678:	2b01      	cmp	r3, #1
 800467a:	d100      	bne.n	800467e <main+0x742>
 800467c:	e2e5      	b.n	8004c4a <main+0xd0e>
			} else if ((proshot || dshot) && bi_direction) {
 800467e:	4ab1      	ldr	r2, [pc, #708]	; (8004944 <main+0xa08>)
 8004680:	7812      	ldrb	r2, [r2, #0]
 8004682:	2a00      	cmp	r2, #0
 8004684:	d104      	bne.n	8004690 <main+0x754>
 8004686:	4ab0      	ldr	r2, [pc, #704]	; (8004948 <main+0xa0c>)
 8004688:	7812      	ldrb	r2, [r2, #0]
 800468a:	2a00      	cmp	r2, #0
 800468c:	d100      	bne.n	8004690 <main+0x754>
 800468e:	e362      	b.n	8004d56 <main+0xe1a>
 8004690:	2b00      	cmp	r3, #0
 8004692:	d100      	bne.n	8004696 <main+0x75a>
 8004694:	e35f      	b.n	8004d56 <main+0xe1a>
				if (newinput > 1097) {
 8004696:	9b07      	ldr	r3, [sp, #28]
 8004698:	4aac      	ldr	r2, [pc, #688]	; (800494c <main+0xa10>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4293      	cmp	r3, r2
 800469e:	dd13      	ble.n	80046c8 <main+0x78c>
					if (forward == dir_reversed) {
 80046a0:	4642      	mov	r2, r8
 80046a2:	6811      	ldr	r1, [r2, #0]
 80046a4:	4652      	mov	r2, sl
 80046a6:	6812      	ldr	r2, [r2, #0]
 80046a8:	4291      	cmp	r1, r2
 80046aa:	d108      	bne.n	80046be <main+0x782>
						forward = 1 - dir_reversed;
 80046ac:	2201      	movs	r2, #1
 80046ae:	1a52      	subs	r2, r2, r1
 80046b0:	4641      	mov	r1, r8
 80046b2:	600a      	str	r2, [r1, #0]
						bemf_counts = 0;
 80046b4:	2200      	movs	r2, #0
 80046b6:	4649      	mov	r1, r9
 80046b8:	600a      	str	r2, [r1, #0]
						brushed_direction_set = 0;
 80046ba:	49a5      	ldr	r1, [pc, #660]	; (8004950 <main+0xa14>)
 80046bc:	700a      	strb	r2, [r1, #0]
					adjusted_input = (newinput - 1100) * 2 + 100;
 80046be:	4aa5      	ldr	r2, [pc, #660]	; (8004954 <main+0xa18>)
 80046c0:	49a5      	ldr	r1, [pc, #660]	; (8004958 <main+0xa1c>)
 80046c2:	189a      	adds	r2, r3, r2
 80046c4:	0052      	lsls	r2, r2, #1
 80046c6:	600a      	str	r2, [r1, #0]
				if (newinput <= 1047 && newinput > 0) {
 80046c8:	49a4      	ldr	r1, [pc, #656]	; (800495c <main+0xa20>)
 80046ca:	1e5a      	subs	r2, r3, #1
 80046cc:	428a      	cmp	r2, r1
 80046ce:	d813      	bhi.n	80046f8 <main+0x7bc>
					if (forward == (1 - dir_reversed)) {
 80046d0:	4652      	mov	r2, sl
 80046d2:	4640      	mov	r0, r8
 80046d4:	6811      	ldr	r1, [r2, #0]
 80046d6:	2201      	movs	r2, #1
 80046d8:	6800      	ldr	r0, [r0, #0]
 80046da:	1a52      	subs	r2, r2, r1
 80046dc:	4282      	cmp	r2, r0
 80046de:	d106      	bne.n	80046ee <main+0x7b2>
						bemf_counts = 0;
 80046e0:	2200      	movs	r2, #0
 80046e2:	4648      	mov	r0, r9
 80046e4:	6002      	str	r2, [r0, #0]
						forward = dir_reversed;
 80046e6:	4640      	mov	r0, r8
 80046e8:	6001      	str	r1, [r0, #0]
						brushed_direction_set = 0;
 80046ea:	4999      	ldr	r1, [pc, #612]	; (8004950 <main+0xa14>)
 80046ec:	700a      	strb	r2, [r1, #0]
					adjusted_input = (newinput - 90) * 2;
 80046ee:	001a      	movs	r2, r3
 80046f0:	4999      	ldr	r1, [pc, #612]	; (8004958 <main+0xa1c>)
 80046f2:	3a5a      	subs	r2, #90	; 0x5a
 80046f4:	0052      	lsls	r2, r2, #1
 80046f6:	600a      	str	r2, [r1, #0]
				if ((newinput > 1047 && newinput < 1098) || newinput <= 120) {
 80046f8:	4a99      	ldr	r2, [pc, #612]	; (8004960 <main+0xa24>)
 80046fa:	189a      	adds	r2, r3, r2
 80046fc:	2a31      	cmp	r2, #49	; 0x31
 80046fe:	d800      	bhi.n	8004702 <main+0x7c6>
 8004700:	e32e      	b.n	8004d60 <main+0xe24>
 8004702:	2b78      	cmp	r3, #120	; 0x78
 8004704:	dc00      	bgt.n	8004708 <main+0x7cc>
 8004706:	e32b      	b.n	8004d60 <main+0xe24>
 8004708:	4b93      	ldr	r3, [pc, #588]	; (8004958 <main+0xa1c>)
 800470a:	681b      	ldr	r3, [r3, #0]
			if (adjusted_input > 2000) {
 800470c:	22fa      	movs	r2, #250	; 0xfa
 800470e:	00d2      	lsls	r2, r2, #3
 8004710:	4293      	cmp	r3, r2
 8004712:	dd02      	ble.n	800471a <main+0x7de>
				adjusted_input = 2000;
 8004714:	4b90      	ldr	r3, [pc, #576]	; (8004958 <main+0xa1c>)
 8004716:	601a      	str	r2, [r3, #0]
 8004718:	0013      	movs	r3, r2
				input = adjusted_input;
 800471a:	4a92      	ldr	r2, [pc, #584]	; (8004964 <main+0xa28>)
 800471c:	6013      	str	r3, [r2, #0]
if(brushed_mode){
 800471e:	4b7b      	ldr	r3, [pc, #492]	; (800490c <main+0x9d0>)
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d065      	beq.n	80047f2 <main+0x8b6>
dither_count++;
 8004726:	4b90      	ldr	r3, [pc, #576]	; (8004968 <main+0xa2c>)
 8004728:	4a8f      	ldr	r2, [pc, #572]	; (8004968 <main+0xa2c>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	9308      	str	r3, [sp, #32]
 800472e:	3301      	adds	r3, #1
 8004730:	6013      	str	r3, [r2, #0]
if(dither_count > 2){
 8004732:	2b02      	cmp	r3, #2
 8004734:	dd01      	ble.n	800473a <main+0x7fe>
	dither_count = 0;
 8004736:	2300      	movs	r3, #0
 8004738:	6013      	str	r3, [r2, #0]
if(input > 1990){               // keep slightly below 100 percent duty cycle for some drivers
 800473a:	4a8a      	ldr	r2, [pc, #552]	; (8004964 <main+0xa28>)
 800473c:	4b8b      	ldr	r3, [pc, #556]	; (800496c <main+0xa30>)
 800473e:	6812      	ldr	r2, [r2, #0]
 8004740:	9208      	str	r2, [sp, #32]
 8004742:	429a      	cmp	r2, r3
 8004744:	dd01      	ble.n	800474a <main+0x80e>
	input = 1990;
 8004746:	4a87      	ldr	r2, [pc, #540]	; (8004964 <main+0xa28>)
 8004748:	6013      	str	r3, [r2, #0]
bemf_counts = 200;
 800474a:	23c8      	movs	r3, #200	; 0xc8
 800474c:	464a      	mov	r2, r9
 800474e:	6013      	str	r3, [r2, #0]
if(!brushed_direction_set && !prop_brake_active){
 8004750:	4b7f      	ldr	r3, [pc, #508]	; (8004950 <main+0xa14>)
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d14c      	bne.n	80047f2 <main+0x8b6>
 8004758:	9b00      	ldr	r3, [sp, #0]
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d148      	bne.n	80047f2 <main+0x8b6>
if (!bi_polar){
 8004760:	9b05      	ldr	r3, [sp, #20]
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d000      	beq.n	800476a <main+0x82e>
 8004768:	e352      	b.n	8004e10 <main+0xed4>
	if(forward){
 800476a:	4643      	mov	r3, r8
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d100      	bne.n	8004774 <main+0x838>
 8004772:	e184      	b.n	8004a7e <main+0xb42>
		if(!comp_pwm  || prop_brake_active){            // for future
 8004774:	9b01      	ldr	r3, [sp, #4]
 8004776:	4a7e      	ldr	r2, [pc, #504]	; (8004970 <main+0xa34>)
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <main+0x846>
 800477e:	f000 fd1d 	bl	80051bc <main+0x1280>
 8004782:	2103      	movs	r1, #3
 8004784:	6813      	ldr	r3, [r2, #0]
 8004786:	438b      	bics	r3, r1
 8004788:	3901      	subs	r1, #1
 800478a:	430b      	orrs	r3, r1
 800478c:	6013      	str	r3, [r2, #0]
 800478e:	2390      	movs	r3, #144	; 0x90
 8004790:	05db      	lsls	r3, r3, #23
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	4977      	ldr	r1, [pc, #476]	; (8004974 <main+0xa38>)
 8004796:	200c      	movs	r0, #12
 8004798:	4011      	ands	r1, r2
 800479a:	2280      	movs	r2, #128	; 0x80
 800479c:	0312      	lsls	r2, r2, #12
 800479e:	430a      	orrs	r2, r1
 80047a0:	601a      	str	r2, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	4974      	ldr	r1, [pc, #464]	; (8004978 <main+0xa3c>)
 80047a6:	4011      	ands	r1, r2
 80047a8:	2280      	movs	r2, #128	; 0x80
 80047aa:	01d2      	lsls	r2, r2, #7
 80047ac:	430a      	orrs	r2, r1
 80047ae:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_7;
 80047b0:	2280      	movs	r2, #128	; 0x80
 80047b2:	629a      	str	r2, [r3, #40]	; 0x28
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	4971      	ldr	r1, [pc, #452]	; (800497c <main+0xa40>)
 80047b8:	4011      	ands	r1, r2
 80047ba:	2280      	movs	r2, #128	; 0x80
 80047bc:	0252      	lsls	r2, r2, #9
 80047be:	430a      	orrs	r2, r1
 80047c0:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_8;
 80047c2:	2280      	movs	r2, #128	; 0x80
 80047c4:	496a      	ldr	r1, [pc, #424]	; (8004970 <main+0xa34>)
 80047c6:	0052      	lsls	r2, r2, #1
 80047c8:	629a      	str	r2, [r3, #40]	; 0x28
 80047ca:	680a      	ldr	r2, [r1, #0]
 80047cc:	4382      	bics	r2, r0
 80047ce:	3808      	subs	r0, #8
 80047d0:	4302      	orrs	r2, r0
 80047d2:	600a      	str	r2, [r1, #0]
		GPIOB->BSRR = GPIO_PIN_1;
 80047d4:	2202      	movs	r2, #2
 80047d6:	618a      	str	r2, [r1, #24]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	4969      	ldr	r1, [pc, #420]	; (8004980 <main+0xa44>)
 80047dc:	4011      	ands	r1, r2
 80047de:	2280      	movs	r2, #128	; 0x80
 80047e0:	0352      	lsls	r2, r2, #13
 80047e2:	430a      	orrs	r2, r1
 80047e4:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_10;
 80047e6:	2280      	movs	r2, #128	; 0x80
 80047e8:	00d2      	lsls	r2, r2, #3
 80047ea:	629a      	str	r2, [r3, #40]	; 0x28
		brushed_direction_set = 1;
 80047ec:	2301      	movs	r3, #1
 80047ee:	4a58      	ldr	r2, [pc, #352]	; (8004950 <main+0xa14>)
 80047f0:	7013      	strb	r3, [r2, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80047f2:	6830      	ldr	r0, [r6, #0]
 80047f4:	4a63      	ldr	r2, [pc, #396]	; (8004984 <main+0xa48>)
 80047f6:	4290      	cmp	r0, r2
 80047f8:	dc01      	bgt.n	80047fe <main+0x8c2>
 80047fa:	f000 fc9d 	bl	8005138 <main+0x11fc>
 80047fe:	0010      	movs	r0, r2
 8004800:	3896      	subs	r0, #150	; 0x96
 8004802:	00c0      	lsls	r0, r0, #3
 8004804:	4240      	negs	r0, r0
 8004806:	4960      	ldr	r1, [pc, #384]	; (8004988 <main+0xa4c>)
 8004808:	f7fb fd08 	bl	800021c <__divsi3>
		advance_multiplier = map((commutation_interval), 150, 3000, 16, 8);
 800480c:	4b5f      	ldr	r3, [pc, #380]	; (800498c <main+0xa50>)
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800480e:	3010      	adds	r0, #16
		advance_multiplier = map((commutation_interval), 150, 3000, 16, 8);
 8004810:	6018      	str	r0, [r3, #0]
		if (inputSet == 0) {
 8004812:	4b5f      	ldr	r3, [pc, #380]	; (8004990 <main+0xa54>)
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d104      	bne.n	8004824 <main+0x8e8>
			HAL_Delay(10);
 800481a:	200a      	movs	r0, #10
 800481c:	f7fb fe1a 	bl	8000454 <HAL_Delay>
			detectInput();
 8004820:	f7ff f8e8 	bl	80039f4 <detectInput>
		if (!armed) {
 8004824:	4b5b      	ldr	r3, [pc, #364]	; (8004994 <main+0xa58>)
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d100      	bne.n	800482e <main+0x8f2>
 800482c:	e182      	b.n	8004b34 <main+0xbf8>
 800482e:	4b4d      	ldr	r3, [pc, #308]	; (8004964 <main+0xa28>)
 8004830:	681c      	ldr	r4, [r3, #0]
		if ((input > 47) && (armed == 1)) {
 8004832:	2c2f      	cmp	r4, #47	; 0x2f
 8004834:	dd04      	ble.n	8004840 <main+0x904>
 8004836:	4b57      	ldr	r3, [pc, #348]	; (8004994 <main+0xa58>)
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d100      	bne.n	8004840 <main+0x904>
 800483e:	e187      	b.n	8004b50 <main+0xc14>
		signaltimeout++;
 8004840:	4b55      	ldr	r3, [pc, #340]	; (8004998 <main+0xa5c>)
 8004842:	4a55      	ldr	r2, [pc, #340]	; (8004998 <main+0xa5c>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	3301      	adds	r3, #1
 8004848:	6013      	str	r3, [r2, #0]
		if (signaltimeout > signal_timeout_threshold) {
 800484a:	4a54      	ldr	r2, [pc, #336]	; (800499c <main+0xa60>)
 800484c:	6812      	ldr	r2, [r2, #0]
 800484e:	9208      	str	r2, [sp, #32]
 8004850:	4293      	cmp	r3, r2
 8004852:	dd27      	ble.n	80048a4 <main+0x968>
			input = 0;
 8004854:	2300      	movs	r3, #0
 8004856:	4a43      	ldr	r2, [pc, #268]	; (8004964 <main+0xa28>)
			error = 1;
 8004858:	4951      	ldr	r1, [pc, #324]	; (80049a0 <main+0xa64>)
			input = 0;
 800485a:	6013      	str	r3, [r2, #0]
			armed = 0;
 800485c:	4a4d      	ldr	r2, [pc, #308]	; (8004994 <main+0xa58>)
			HAL_TIM_Base_Start_IT(&htim16);
 800485e:	4851      	ldr	r0, [pc, #324]	; (80049a4 <main+0xa68>)
			armed = 0;
 8004860:	7013      	strb	r3, [r2, #0]
			armedcount = 0;
 8004862:	4a51      	ldr	r2, [pc, #324]	; (80049a8 <main+0xa6c>)
 8004864:	6013      	str	r3, [r2, #0]
			error = 1;
 8004866:	2201      	movs	r2, #1
 8004868:	600a      	str	r2, [r1, #0]
			inputSet = 0;
 800486a:	4a49      	ldr	r2, [pc, #292]	; (8004990 <main+0xa54>)
 800486c:	7013      	strb	r3, [r2, #0]
			TIM15->PSC=0;
 800486e:	4a4f      	ldr	r2, [pc, #316]	; (80049ac <main+0xa70>)
 8004870:	6293      	str	r3, [r2, #40]	; 0x28
			TIM16->PSC=0;
 8004872:	4a4f      	ldr	r2, [pc, #316]	; (80049b0 <main+0xa74>)
 8004874:	6293      	str	r3, [r2, #40]	; 0x28
			dshot = 0;
 8004876:	4a34      	ldr	r2, [pc, #208]	; (8004948 <main+0xa0c>)
 8004878:	7013      	strb	r3, [r2, #0]
			proshot = 0;
 800487a:	4a32      	ldr	r2, [pc, #200]	; (8004944 <main+0xa08>)
 800487c:	7013      	strb	r3, [r2, #0]
			servoPwm = 0;
 800487e:	4a4d      	ldr	r2, [pc, #308]	; (80049b4 <main+0xa78>)
 8004880:	7013      	strb	r3, [r2, #0]
			HAL_TIM_Base_Start_IT(&htim16);
 8004882:	f7fd f851 	bl	8001928 <HAL_TIM_Base_Start_IT>
			IC_buffer_size = 64;
 8004886:	2340      	movs	r3, #64	; 0x40
 8004888:	4a4b      	ldr	r2, [pc, #300]	; (80049b8 <main+0xa7c>)
 800488a:	2100      	movs	r1, #0
 800488c:	6013      	str	r3, [r2, #0]
 800488e:	2280      	movs	r2, #128	; 0x80
 8004890:	484a      	ldr	r0, [pc, #296]	; (80049bc <main+0xa80>)
 8004892:	0052      	lsls	r2, r2, #1
 8004894:	f000 fee6 	bl	8005664 <memset>
			HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , 64);
 8004898:	2340      	movs	r3, #64	; 0x40
 800489a:	4a48      	ldr	r2, [pc, #288]	; (80049bc <main+0xa80>)
 800489c:	2100      	movs	r1, #0
 800489e:	4848      	ldr	r0, [pc, #288]	; (80049c0 <main+0xa84>)
 80048a0:	f7fd f9ae 	bl	8001c00 <HAL_TIM_IC_Start_DMA>
		if (input <= 47) {
 80048a4:	4b2f      	ldr	r3, [pc, #188]	; (8004964 <main+0xa28>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	9308      	str	r3, [sp, #32]
 80048aa:	2b2f      	cmp	r3, #47	; 0x2f
 80048ac:	dd00      	ble.n	80048b0 <main+0x974>
 80048ae:	e0b2      	b.n	8004a16 <main+0xada>
	        if((brushed_mode) && (brushed_direction_set)){
 80048b0:	4b16      	ldr	r3, [pc, #88]	; (800490c <main+0x9d0>)
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d006      	beq.n	80048c6 <main+0x98a>
 80048b8:	4b25      	ldr	r3, [pc, #148]	; (8004950 <main+0xa14>)
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d002      	beq.n	80048c6 <main+0x98a>
	        	brushed_direction_set = 0;
 80048c0:	2300      	movs	r3, #0
 80048c2:	4a23      	ldr	r2, [pc, #140]	; (8004950 <main+0xa14>)
 80048c4:	7013      	strb	r3, [r2, #0]
			if (brake == 1){
 80048c6:	9b03      	ldr	r3, [sp, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d100      	bne.n	80048d0 <main+0x994>
 80048ce:	e11b      	b.n	8004b08 <main+0xbcc>
			forcedcomcount = 0;
 80048d0:	2200      	movs	r2, #0
 80048d2:	493c      	ldr	r1, [pc, #240]	; (80049c4 <main+0xa88>)
 80048d4:	600a      	str	r2, [r1, #0]
			started = 0;
 80048d6:	493c      	ldr	r1, [pc, #240]	; (80049c8 <main+0xa8c>)
 80048d8:	600a      	str	r2, [r1, #0]
			if (!brake && !prop_brake_active) {
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d000      	beq.n	80048e0 <main+0x9a4>
 80048de:	e11d      	b.n	8004b1c <main+0xbe0>
 80048e0:	9a00      	ldr	r2, [sp, #0]
 80048e2:	7814      	ldrb	r4, [r2, #0]
 80048e4:	2c00      	cmp	r4, #0
 80048e6:	d100      	bne.n	80048ea <main+0x9ae>
 80048e8:	e104      	b.n	8004af4 <main+0xbb8>
			duty_cycle = 0;
 80048ea:	602b      	str	r3, [r5, #0]
			if ((brake || tempbrake)&& (!bi_polar)) {
 80048ec:	4b37      	ldr	r3, [pc, #220]	; (80049cc <main+0xa90>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	9308      	str	r3, [sp, #32]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d100      	bne.n	80048f8 <main+0x9bc>
 80048f6:	e29a      	b.n	8004e2e <main+0xef2>
 80048f8:	e06a      	b.n	80049d0 <main+0xa94>
 80048fa:	46c0      	nop			; (mov r8, r8)
 80048fc:	200000ec 	.word	0x200000ec
 8004900:	20000030 	.word	0x20000030
 8004904:	200000c8 	.word	0x200000c8
 8004908:	40012c00 	.word	0x40012c00
 800490c:	200000af 	.word	0x200000af
 8004910:	200000ad 	.word	0x200000ad
 8004914:	200000c0 	.word	0x200000c0
 8004918:	200000b4 	.word	0x200000b4
 800491c:	20000254 	.word	0x20000254
 8004920:	2000010c 	.word	0x2000010c
 8004924:	20000020 	.word	0x20000020
 8004928:	05f5e100 	.word	0x05f5e100
 800492c:	200003e0 	.word	0x200003e0
 8004930:	000186a0 	.word	0x000186a0
 8004934:	200000bc 	.word	0x200000bc
 8004938:	200001c8 	.word	0x200001c8
 800493c:	200001dc 	.word	0x200001dc
 8004940:	200000d0 	.word	0x200000d0
 8004944:	20000108 	.word	0x20000108
 8004948:	200000cc 	.word	0x200000cc
 800494c:	00000449 	.word	0x00000449
 8004950:	200000ae 	.word	0x200000ae
 8004954:	fffffbe6 	.word	0xfffffbe6
 8004958:	20000428 	.word	0x20000428
 800495c:	00000416 	.word	0x00000416
 8004960:	fffffbe8 	.word	0xfffffbe8
 8004964:	200000e4 	.word	0x200000e4
 8004968:	20000180 	.word	0x20000180
 800496c:	000007c6 	.word	0x000007c6
 8004970:	48000400 	.word	0x48000400
 8004974:	fff3ffff 	.word	0xfff3ffff
 8004978:	ffff3fff 	.word	0xffff3fff
 800497c:	fffcffff 	.word	0xfffcffff
 8004980:	ffcfffff 	.word	0xffcfffff
 8004984:	00000bb8 	.word	0x00000bb8
 8004988:	00000b22 	.word	0x00000b22
 800498c:	2000000c 	.word	0x2000000c
 8004990:	200000e8 	.word	0x200000e8
 8004994:	200000a4 	.word	0x200000a4
 8004998:	2000011c 	.word	0x2000011c
 800499c:	20000044 	.word	0x20000044
 80049a0:	200000d4 	.word	0x200000d4
 80049a4:	200004c0 	.word	0x200004c0
 80049a8:	200000a8 	.word	0x200000a8
 80049ac:	40014000 	.word	0x40014000
 80049b0:	40014400 	.word	0x40014400
 80049b4:	20000114 	.word	0x20000114
 80049b8:	20000000 	.word	0x20000000
 80049bc:	20000258 	.word	0x20000258
 80049c0:	20000184 	.word	0x20000184
 80049c4:	200000e0 	.word	0x200000e0
 80049c8:	20000124 	.word	0x20000124
 80049cc:	2000012c 	.word	0x2000012c
 80049d0:	9b05      	ldr	r3, [sp, #20]
 80049d2:	781c      	ldrb	r4, [r3, #0]
 80049d4:	2c00      	cmp	r4, #0
 80049d6:	d100      	bne.n	80049da <main+0xa9e>
 80049d8:	e224      	b.n	8004e24 <main+0xee8>
			if (prop_brake && prop_brake_active) {
 80049da:	9b04      	ldr	r3, [sp, #16]
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d012      	beq.n	8004a08 <main+0xacc>
 80049e2:	9b00      	ldr	r3, [sp, #0]
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d009      	beq.n	80049fe <main+0xac2>
				duty_cycle = prop_brake_strength;
 80049ea:	9b06      	ldr	r3, [sp, #24]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	9308      	str	r3, [sp, #32]
 80049f0:	602b      	str	r3, [r5, #0]
	phaseAPWM();
 80049f2:	f7fe fa8d 	bl	8002f10 <phaseAPWM>
	phaseBPWM();
 80049f6:	f7fe fab5 	bl	8002f64 <phaseBPWM>
	phaseCPWM();
 80049fa:	f7fe fae3 	bl	8002fc4 <phaseCPWM>
			if(bi_polar){
 80049fe:	9b05      	ldr	r3, [sp, #20]
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d100      	bne.n	8004a08 <main+0xacc>
 8004a06:	e218      	b.n	8004e3a <main+0xefe>
				TIM1->CCR2 = (TIM1->ARR) / 2;
 8004a08:	4bd7      	ldr	r3, [pc, #860]	; (8004d68 <main+0xe2c>)
 8004a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a0c:	0852      	lsrs	r2, r2, #1
 8004a0e:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = (TIM1->ARR) / 2;
 8004a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a12:	0852      	lsrs	r2, r2, #1
 8004a14:	63da      	str	r2, [r3, #60]	; 0x3c
		if (vehicle_mode == 1){
 8004a16:	4bd5      	ldr	r3, [pc, #852]	; (8004d6c <main+0xe30>)
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d100      	bne.n	8004a20 <main+0xae4>
 8004a1e:	e296      	b.n	8004f4e <main+0x1012>
		if (vehicle_mode == 2|| vehicle_mode == 3 ) {    // crawler much fewer poles, much more filtering time needed
 8004a20:	1e9a      	subs	r2, r3, #2
 8004a22:	2a01      	cmp	r2, #1
 8004a24:	d800      	bhi.n	8004a28 <main+0xaec>
 8004a26:	e270      	b.n	8004f0a <main+0xfce>
		if (vehicle_mode == 5 ){
 8004a28:	2b05      	cmp	r3, #5
 8004a2a:	d100      	bne.n	8004a2e <main+0xaf2>
 8004a2c:	e283      	b.n	8004f36 <main+0xffa>
		if (started == 1) {
 8004a2e:	4bd0      	ldr	r3, [pc, #832]	; (8004d70 <main+0xe34>)
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	2a01      	cmp	r2, #1
 8004a34:	d011      	beq.n	8004a5a <main+0xb1e>
		if (polling_mode && running == 1){
 8004a36:	4bcf      	ldr	r3, [pc, #828]	; (8004d74 <main+0xe38>)
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d004      	beq.n	8004a48 <main+0xb0c>
 8004a3e:	465b      	mov	r3, fp
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d100      	bne.n	8004a48 <main+0xb0c>
 8004a46:	e1fe      	b.n	8004e46 <main+0xf0a>
 8004a48:	4bcb      	ldr	r3, [pc, #812]	; (8004d78 <main+0xe3c>)
 8004a4a:	6830      	ldr	r0, [r6, #0]
 8004a4c:	781b      	ldrb	r3, [r3, #0]
if(!brushed_mode){
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d100      	bne.n	8004a54 <main+0xb18>
 8004a52:	e2ae      	b.n	8004fb2 <main+0x1076>
 8004a54:	4bc9      	ldr	r3, [pc, #804]	; (8004d7c <main+0xe40>)
 8004a56:	681c      	ldr	r4, [r3, #0]
 8004a58:	e5bf      	b.n	80045da <main+0x69e>
			if (running == 0) {
 8004a5a:	465b      	mov	r3, fp
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1e9      	bne.n	8004a36 <main+0xafa>
				if(brushed_mode){
 8004a62:	4bc5      	ldr	r3, [pc, #788]	; (8004d78 <main+0xe3c>)
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d100      	bne.n	8004a6c <main+0xb30>
 8004a6a:	e1d6      	b.n	8004e1a <main+0xede>
					running = 1;
 8004a6c:	465b      	mov	r3, fp
 8004a6e:	601a      	str	r2, [r3, #0]
		if (polling_mode && running == 1){
 8004a70:	4bc0      	ldr	r3, [pc, #768]	; (8004d74 <main+0xe38>)
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d000      	beq.n	8004a7a <main+0xb3e>
 8004a78:	e1e5      	b.n	8004e46 <main+0xf0a>
 8004a7a:	6830      	ldr	r0, [r6, #0]
 8004a7c:	e7ea      	b.n	8004a54 <main+0xb18>
 8004a7e:	2103      	movs	r1, #3
 8004a80:	4abf      	ldr	r2, [pc, #764]	; (8004d80 <main+0xe44>)
 8004a82:	48c0      	ldr	r0, [pc, #768]	; (8004d84 <main+0xe48>)
 8004a84:	6813      	ldr	r3, [r2, #0]
 8004a86:	438b      	bics	r3, r1
 8004a88:	3902      	subs	r1, #2
 8004a8a:	430b      	orrs	r3, r1
 8004a8c:	6013      	str	r3, [r2, #0]
 8004a8e:	2390      	movs	r3, #144	; 0x90
		GPIOB->BSRR = GPIO_PIN_0;
 8004a90:	6191      	str	r1, [r2, #24]
 8004a92:	05db      	lsls	r3, r3, #23
 8004a94:	6819      	ldr	r1, [r3, #0]
 8004a96:	4008      	ands	r0, r1
 8004a98:	2180      	movs	r1, #128	; 0x80
 8004a9a:	02c9      	lsls	r1, r1, #11
 8004a9c:	4301      	orrs	r1, r0
 8004a9e:	6019      	str	r1, [r3, #0]
		GPIOA->BRR = GPIO_PIN_9;
 8004aa0:	2180      	movs	r1, #128	; 0x80
 8004aa2:	0089      	lsls	r1, r1, #2
 8004aa4:	6299      	str	r1, [r3, #40]	; 0x28
 8004aa6:	6819      	ldr	r1, [r3, #0]
 8004aa8:	48b7      	ldr	r0, [pc, #732]	; (8004d88 <main+0xe4c>)
 8004aaa:	4008      	ands	r0, r1
 8004aac:	2180      	movs	r1, #128	; 0x80
 8004aae:	01c9      	lsls	r1, r1, #7
 8004ab0:	4301      	orrs	r1, r0
 8004ab2:	6019      	str	r1, [r3, #0]
		GPIOA->BRR = GPIO_PIN_7;
 8004ab4:	2180      	movs	r1, #128	; 0x80
 8004ab6:	6299      	str	r1, [r3, #40]	; 0x28
 8004ab8:	6819      	ldr	r1, [r3, #0]
 8004aba:	48b4      	ldr	r0, [pc, #720]	; (8004d8c <main+0xe50>)
 8004abc:	4008      	ands	r0, r1
 8004abe:	2180      	movs	r1, #128	; 0x80
 8004ac0:	0249      	lsls	r1, r1, #9
 8004ac2:	4301      	orrs	r1, r0
 8004ac4:	6019      	str	r1, [r3, #0]
		GPIOA->BRR = GPIO_PIN_8;
 8004ac6:	2180      	movs	r1, #128	; 0x80
 8004ac8:	0049      	lsls	r1, r1, #1
 8004aca:	6299      	str	r1, [r3, #40]	; 0x28
		if (!comp_pwm || prop_brake_active){
 8004acc:	9b01      	ldr	r3, [sp, #4]
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d026      	beq.n	8004b22 <main+0xbe6>
 8004ad4:	210c      	movs	r1, #12
 8004ad6:	6813      	ldr	r3, [r2, #0]
 8004ad8:	438b      	bics	r3, r1
 8004ada:	3904      	subs	r1, #4
 8004adc:	430b      	orrs	r3, r1
 8004ade:	6013      	str	r3, [r2, #0]
 8004ae0:	2190      	movs	r1, #144	; 0x90
 8004ae2:	05c9      	lsls	r1, r1, #23
 8004ae4:	680b      	ldr	r3, [r1, #0]
 8004ae6:	4aaa      	ldr	r2, [pc, #680]	; (8004d90 <main+0xe54>)
 8004ae8:	401a      	ands	r2, r3
 8004aea:	2380      	movs	r3, #128	; 0x80
 8004aec:	039b      	lsls	r3, r3, #14
 8004aee:	4313      	orrs	r3, r2
 8004af0:	600b      	str	r3, [r1, #0]
 8004af2:	e67b      	b.n	80047ec <main+0x8b0>
				allOff();
 8004af4:	f7fe fc0a 	bl	800330c <allOff>
 8004af8:	9b03      	ldr	r3, [sp, #12]
			duty_cycle = 0;
 8004afa:	602c      	str	r4, [r5, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	9308      	str	r3, [sp, #32]
			if ((brake || tempbrake)&& (!bi_polar)) {
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d000      	beq.n	8004b06 <main+0xbca>
 8004b04:	e764      	b.n	80049d0 <main+0xa94>
 8004b06:	e6f1      	b.n	80048ec <main+0x9b0>
			EXTI->IMR &= ~(1 << 21);
 8004b08:	4aa2      	ldr	r2, [pc, #648]	; (8004d94 <main+0xe58>)
 8004b0a:	49a3      	ldr	r1, [pc, #652]	; (8004d98 <main+0xe5c>)
 8004b0c:	6813      	ldr	r3, [r2, #0]
 8004b0e:	400b      	ands	r3, r1
 8004b10:	6013      	str	r3, [r2, #0]
			forcedcomcount = 0;
 8004b12:	2300      	movs	r3, #0
 8004b14:	4aa1      	ldr	r2, [pc, #644]	; (8004d9c <main+0xe60>)
 8004b16:	6013      	str	r3, [r2, #0]
			started = 0;
 8004b18:	4a95      	ldr	r2, [pc, #596]	; (8004d70 <main+0xe34>)
 8004b1a:	6013      	str	r3, [r2, #0]
			duty_cycle = 0;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	602b      	str	r3, [r5, #0]
 8004b20:	e756      	b.n	80049d0 <main+0xa94>
 8004b22:	6813      	ldr	r3, [r2, #0]
 8004b24:	39f4      	subs	r1, #244	; 0xf4
 8004b26:	438b      	bics	r3, r1
 8004b28:	3908      	subs	r1, #8
 8004b2a:	430b      	orrs	r3, r1
 8004b2c:	6013      	str	r3, [r2, #0]
			GPIOB->BRR = GPIO_PIN_1;
 8004b2e:	2302      	movs	r3, #2
 8004b30:	6293      	str	r3, [r2, #40]	; 0x28
 8004b32:	e7d5      	b.n	8004ae0 <main+0xba4>
				if ((inputSet == 1) && (input == 0)) {
 8004b34:	4b9a      	ldr	r3, [pc, #616]	; (8004da0 <main+0xe64>)
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	9308      	str	r3, [sp, #32]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d056      	beq.n	8004bec <main+0xcb0>
 8004b3e:	4b99      	ldr	r3, [pc, #612]	; (8004da4 <main+0xe68>)
 8004b40:	681c      	ldr	r4, [r3, #0]
				if (input > 0) {
 8004b42:	2c00      	cmp	r4, #0
 8004b44:	dc00      	bgt.n	8004b48 <main+0xc0c>
 8004b46:	e67b      	b.n	8004840 <main+0x904>
					armedcount = 0;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	4a97      	ldr	r2, [pc, #604]	; (8004da8 <main+0xe6c>)
 8004b4c:	6013      	str	r3, [r2, #0]
 8004b4e:	e670      	b.n	8004832 <main+0x8f6>
			prop_brake_active = 0;
 8004b50:	2200      	movs	r2, #0
 8004b52:	9900      	ldr	r1, [sp, #0]
 8004b54:	700a      	strb	r2, [r1, #0]
			started = 1;
 8004b56:	4a86      	ldr	r2, [pc, #536]	; (8004d70 <main+0xe34>)
 8004b58:	6013      	str	r3, [r2, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8004b5a:	4a94      	ldr	r2, [pc, #592]	; (8004dac <main+0xe70>)
 8004b5c:	0023      	movs	r3, r4
 8004b5e:	4294      	cmp	r4, r2
 8004b60:	dd00      	ble.n	8004b64 <main+0xc28>
 8004b62:	0013      	movs	r3, r2
 8004b64:	20e1      	movs	r0, #225	; 0xe1
 8004b66:	3b2f      	subs	r3, #47	; 0x2f
 8004b68:	0040      	lsls	r0, r0, #1
 8004b6a:	4358      	muls	r0, r3
 8004b6c:	4990      	ldr	r1, [pc, #576]	; (8004db0 <main+0xe74>)
 8004b6e:	f7fb fb55 	bl	800021c <__divsi3>
			if((input - 60) > duty_cycle){
 8004b72:	0022      	movs	r2, r4
			start_power = map((input), 47, 1998, 150, 600);
 8004b74:	4b8f      	ldr	r3, [pc, #572]	; (8004db4 <main+0xe78>)
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8004b76:	3096      	adds	r0, #150	; 0x96
			start_power = map((input), 47, 1998, 150, 600);
 8004b78:	6018      	str	r0, [r3, #0]
			if((input - 60) > duty_cycle){
 8004b7a:	682b      	ldr	r3, [r5, #0]
 8004b7c:	3a3c      	subs	r2, #60	; 0x3c
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	dd01      	ble.n	8004b86 <main+0xc4a>
				duty_cycle +=2;
 8004b82:	3302      	adds	r3, #2
 8004b84:	602b      	str	r3, [r5, #0]
			if((input - 60) < duty_cycle){
 8004b86:	0022      	movs	r2, r4
 8004b88:	3a3b      	subs	r2, #59	; 0x3b
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	dc01      	bgt.n	8004b92 <main+0xc56>
				duty_cycle -=2;
 8004b8e:	3b02      	subs	r3, #2
 8004b90:	602b      	str	r3, [r5, #0]
			if (bemf_counts < 20) {
 8004b92:	464a      	mov	r2, r9
 8004b94:	6811      	ldr	r1, [r2, #0]
 8004b96:	2913      	cmp	r1, #19
 8004b98:	dd00      	ble.n	8004b9c <main+0xc60>
 8004b9a:	e2bb      	b.n	8005114 <main+0x11d8>
				if (duty_cycle > 500) {
 8004b9c:	22fa      	movs	r2, #250	; 0xfa
 8004b9e:	0052      	lsls	r2, r2, #1
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	dc00      	bgt.n	8004ba6 <main+0xc6a>
 8004ba4:	e2a6      	b.n	80050f4 <main+0x11b8>
					duty_cycle = 500;
 8004ba6:	602a      	str	r2, [r5, #0]
			if (bemf_counts < 5 ){
 8004ba8:	2904      	cmp	r1, #4
 8004baa:	dc00      	bgt.n	8004bae <main+0xc72>
 8004bac:	e2a4      	b.n	80050f8 <main+0x11bc>
			if (running) {
 8004bae:	465b      	mov	r3, fp
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d100      	bne.n	8004bb8 <main+0xc7c>
 8004bb6:	e643      	b.n	8004840 <main+0x904>
 8004bb8:	0013      	movs	r3, r2
				if(bi_polar){
 8004bba:	9a05      	ldr	r2, [sp, #20]
 8004bbc:	7812      	ldrb	r2, [r2, #0]
 8004bbe:	2a00      	cmp	r2, #0
 8004bc0:	d100      	bne.n	8004bc4 <main+0xc88>
 8004bc2:	e2b3      	b.n	800512c <main+0x11f0>
                 if (dither_count == 0){
 8004bc4:	4b7c      	ldr	r3, [pc, #496]	; (8004db8 <main+0xe7c>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d000      	beq.n	8004bce <main+0xc92>
 8004bcc:	e2ff      	b.n	80051ce <main+0x1292>
				 if (forward){
 8004bce:	4643      	mov	r3, r8
 8004bd0:	681b      	ldr	r3, [r3, #0]
					TIM1->CCR2 = (TIM1->ARR /2) + (input / 2);
 8004bd2:	4a65      	ldr	r2, [pc, #404]	; (8004d68 <main+0xe2c>)
				 if (forward){
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d026      	beq.n	8004c26 <main+0xcea>
					TIM1->CCR2 = (TIM1->ARR /2) + (input / 2);
 8004bd8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004bda:	1064      	asrs	r4, r4, #1
 8004bdc:	085b      	lsrs	r3, r3, #1
 8004bde:	191b      	adds	r3, r3, r4
 8004be0:	6393      	str	r3, [r2, #56]	; 0x38
					TIM1->CCR3 = (TIM1->ARR /2) - (input / 2);
 8004be2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004be4:	085b      	lsrs	r3, r3, #1
 8004be6:	1b1c      	subs	r4, r3, r4
 8004be8:	63d4      	str	r4, [r2, #60]	; 0x3c
 8004bea:	e629      	b.n	8004840 <main+0x904>
				if ((inputSet == 1) && (input == 0)) {
 8004bec:	4b6d      	ldr	r3, [pc, #436]	; (8004da4 <main+0xe68>)
 8004bee:	681c      	ldr	r4, [r3, #0]
 8004bf0:	2c00      	cmp	r4, #0
 8004bf2:	d1a6      	bne.n	8004b42 <main+0xc06>
					armedcount++;
 8004bf4:	4b6c      	ldr	r3, [pc, #432]	; (8004da8 <main+0xe6c>)
 8004bf6:	4a6c      	ldr	r2, [pc, #432]	; (8004da8 <main+0xe6c>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
					HAL_Delay(1);
 8004bfa:	2001      	movs	r0, #1
					armedcount++;
 8004bfc:	9309      	str	r3, [sp, #36]	; 0x24
 8004bfe:	3301      	adds	r3, #1
 8004c00:	6013      	str	r3, [r2, #0]
					HAL_Delay(1);
 8004c02:	f7fb fc27 	bl	8000454 <HAL_Delay>
					if (armedcount > 2000) {
 8004c06:	23fa      	movs	r3, #250	; 0xfa
 8004c08:	4a67      	ldr	r2, [pc, #412]	; (8004da8 <main+0xe6c>)
 8004c0a:	00db      	lsls	r3, r3, #3
 8004c0c:	6812      	ldr	r2, [r2, #0]
 8004c0e:	9209      	str	r2, [sp, #36]	; 0x24
 8004c10:	429a      	cmp	r2, r3
 8004c12:	dd94      	ble.n	8004b3e <main+0xc02>
						armed = 1;
 8004c14:	466a      	mov	r2, sp
 8004c16:	2120      	movs	r1, #32
 8004c18:	1852      	adds	r2, r2, r1
 8004c1a:	4b68      	ldr	r3, [pc, #416]	; (8004dbc <main+0xe80>)
 8004c1c:	7812      	ldrb	r2, [r2, #0]
 8004c1e:	701a      	strb	r2, [r3, #0]
						playInputTune();
 8004c20:	f7fe fe2e 	bl	8003880 <playInputTune>
 8004c24:	e78b      	b.n	8004b3e <main+0xc02>
					 TIM1->CCR2 = (TIM1->ARR /2) - (input / 2);
 8004c26:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004c28:	1064      	asrs	r4, r4, #1
 8004c2a:	085b      	lsrs	r3, r3, #1
 8004c2c:	1b1b      	subs	r3, r3, r4
 8004c2e:	6393      	str	r3, [r2, #56]	; 0x38
					 TIM1->CCR3 = (TIM1->ARR /2) + (input / 2);
 8004c30:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004c32:	085b      	lsrs	r3, r3, #1
 8004c34:	191c      	adds	r4, r3, r4
 8004c36:	63d4      	str	r4, [r2, #60]	; 0x3c
 8004c38:	e602      	b.n	8004840 <main+0x904>
					bi_direction = 1;
 8004c3a:	9a02      	ldr	r2, [sp, #8]
 8004c3c:	3b09      	subs	r3, #9
 8004c3e:	6013      	str	r3, [r2, #0]
					armed = 0;
 8004c40:	2300      	movs	r3, #0
 8004c42:	4a5e      	ldr	r2, [pc, #376]	; (8004dbc <main+0xe80>)
 8004c44:	7013      	strb	r3, [r2, #0]
				dshotcommand = 0;
 8004c46:	4a5e      	ldr	r2, [pc, #376]	; (8004dc0 <main+0xe84>)
 8004c48:	6013      	str	r3, [r2, #0]
			if (bi_direction == 1 && (proshot == 0 && dshot == 0)) {
 8004c4a:	4b5e      	ldr	r3, [pc, #376]	; (8004dc4 <main+0xe88>)
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d000      	beq.n	8004c54 <main+0xd18>
 8004c52:	e520      	b.n	8004696 <main+0x75a>
 8004c54:	4b5c      	ldr	r3, [pc, #368]	; (8004dc8 <main+0xe8c>)
 8004c56:	781a      	ldrb	r2, [r3, #0]
 8004c58:	2a00      	cmp	r2, #0
 8004c5a:	d000      	beq.n	8004c5e <main+0xd22>
 8004c5c:	e51b      	b.n	8004696 <main+0x75a>
				if (newinput > 1100) {
 8004c5e:	9b07      	ldr	r3, [sp, #28]
 8004c60:	495a      	ldr	r1, [pc, #360]	; (8004dcc <main+0xe90>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	428b      	cmp	r3, r1
 8004c66:	dd30      	ble.n	8004cca <main+0xd8e>
					if (forward == dir_reversed) {
 8004c68:	4641      	mov	r1, r8
 8004c6a:	6808      	ldr	r0, [r1, #0]
 8004c6c:	4651      	mov	r1, sl
 8004c6e:	6809      	ldr	r1, [r1, #0]
 8004c70:	4288      	cmp	r0, r1
 8004c72:	d01f      	beq.n	8004cb4 <main+0xd78>
					if (prop_brake_active == 0) {
 8004c74:	9a00      	ldr	r2, [sp, #0]
 8004c76:	7812      	ldrb	r2, [r2, #0]
 8004c78:	2a00      	cmp	r2, #0
 8004c7a:	d105      	bne.n	8004c88 <main+0xd4c>
						adjusted_input = (newinput - 1050) * 3;
 8004c7c:	4a54      	ldr	r2, [pc, #336]	; (8004dd0 <main+0xe94>)
 8004c7e:	1899      	adds	r1, r3, r2
 8004c80:	004a      	lsls	r2, r1, #1
 8004c82:	1852      	adds	r2, r2, r1
 8004c84:	4953      	ldr	r1, [pc, #332]	; (8004dd4 <main+0xe98>)
 8004c86:	600a      	str	r2, [r1, #0]
					if (vehicle_mode != 3) { // car mode requires throttle return to center before direction change
 8004c88:	4a38      	ldr	r2, [pc, #224]	; (8004d6c <main+0xe30>)
 8004c8a:	7812      	ldrb	r2, [r2, #0]
 8004c8c:	2a03      	cmp	r2, #3
 8004c8e:	d002      	beq.n	8004c96 <main+0xd5a>
						prop_brake_active = 0;
 8004c90:	2200      	movs	r2, #0
 8004c92:	9900      	ldr	r1, [sp, #0]
 8004c94:	700a      	strb	r2, [r1, #0]
				if (newinput >= 760 && newinput < 1100) {
 8004c96:	4a50      	ldr	r2, [pc, #320]	; (8004dd8 <main+0xe9c>)
 8004c98:	4694      	mov	ip, r2
 8004c9a:	2254      	movs	r2, #84	; 0x54
 8004c9c:	4463      	add	r3, ip
 8004c9e:	32ff      	adds	r2, #255	; 0xff
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d900      	bls.n	8004ca6 <main+0xd6a>
 8004ca4:	e530      	b.n	8004708 <main+0x7cc>
					adjusted_input = 0;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	4a4a      	ldr	r2, [pc, #296]	; (8004dd4 <main+0xe98>)
 8004caa:	6013      	str	r3, [r2, #0]
					prop_brake_active = 0;
 8004cac:	9a00      	ldr	r2, [sp, #0]
 8004cae:	7013      	strb	r3, [r2, #0]
				adjusted_input = 2000;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	e532      	b.n	800471a <main+0x7de>
						adjusted_input = 0;
 8004cb4:	4947      	ldr	r1, [pc, #284]	; (8004dd4 <main+0xe98>)
						prop_brake_active = 1;
 8004cb6:	9c00      	ldr	r4, [sp, #0]
						adjusted_input = 0;
 8004cb8:	600a      	str	r2, [r1, #0]
						prop_brake_active = 1;
 8004cba:	2101      	movs	r1, #1
 8004cbc:	7021      	strb	r1, [r4, #0]
						brushed_direction_set = 0;
 8004cbe:	4c47      	ldr	r4, [pc, #284]	; (8004ddc <main+0xea0>)
						forward = 1 - dir_reversed;
 8004cc0:	1a09      	subs	r1, r1, r0
						brushed_direction_set = 0;
 8004cc2:	7022      	strb	r2, [r4, #0]
						forward = 1 - dir_reversed;
 8004cc4:	4642      	mov	r2, r8
 8004cc6:	6011      	str	r1, [r2, #0]
 8004cc8:	e7de      	b.n	8004c88 <main+0xd4c>
				if (newinput < 760) {
 8004cca:	4945      	ldr	r1, [pc, #276]	; (8004de0 <main+0xea4>)
 8004ccc:	428b      	cmp	r3, r1
 8004cce:	dcdb      	bgt.n	8004c88 <main+0xd4c>
					if (forward == (1 - dir_reversed)) {
 8004cd0:	4651      	mov	r1, sl
 8004cd2:	2001      	movs	r0, #1
 8004cd4:	6809      	ldr	r1, [r1, #0]
 8004cd6:	4684      	mov	ip, r0
 8004cd8:	1a44      	subs	r4, r0, r1
 8004cda:	4640      	mov	r0, r8
 8004cdc:	6800      	ldr	r0, [r0, #0]
 8004cde:	4284      	cmp	r4, r0
 8004ce0:	d014      	beq.n	8004d0c <main+0xdd0>
					if (prop_brake_active == 0) {
 8004ce2:	9a00      	ldr	r2, [sp, #0]
 8004ce4:	7812      	ldrb	r2, [r2, #0]
 8004ce6:	2a00      	cmp	r2, #0
 8004ce8:	d1ce      	bne.n	8004c88 <main+0xd4c>
						adjusted_input = ((760 - newinput) * 3) + 100;
 8004cea:	21be      	movs	r1, #190	; 0xbe
 8004cec:	0089      	lsls	r1, r1, #2
 8004cee:	1ac9      	subs	r1, r1, r3
 8004cf0:	004a      	lsls	r2, r1, #1
 8004cf2:	1852      	adds	r2, r2, r1
 8004cf4:	4937      	ldr	r1, [pc, #220]	; (8004dd4 <main+0xe98>)
 8004cf6:	3264      	adds	r2, #100	; 0x64
 8004cf8:	600a      	str	r2, [r1, #0]
 8004cfa:	e7c5      	b.n	8004c88 <main+0xd4c>
					dir_reversed = 1;
 8004cfc:	4652      	mov	r2, sl
 8004cfe:	3b07      	subs	r3, #7
 8004d00:	6013      	str	r3, [r2, #0]
 8004d02:	e4b4      	b.n	800466e <main+0x732>
					dir_reversed = 0;
 8004d04:	2300      	movs	r3, #0
 8004d06:	4652      	mov	r2, sl
 8004d08:	6013      	str	r3, [r2, #0]
 8004d0a:	e4b0      	b.n	800466e <main+0x732>
						prop_brake_active = 1;
 8004d0c:	4664      	mov	r4, ip
 8004d0e:	9800      	ldr	r0, [sp, #0]
 8004d10:	7004      	strb	r4, [r0, #0]
						adjusted_input = 0;
 8004d12:	4830      	ldr	r0, [pc, #192]	; (8004dd4 <main+0xe98>)
 8004d14:	6002      	str	r2, [r0, #0]
						forward = dir_reversed;
 8004d16:	4640      	mov	r0, r8
 8004d18:	6001      	str	r1, [r0, #0]
						brushed_direction_set = 0;
 8004d1a:	4930      	ldr	r1, [pc, #192]	; (8004ddc <main+0xea0>)
 8004d1c:	700a      	strb	r2, [r1, #0]
 8004d1e:	e7b3      	b.n	8004c88 <main+0xd4c>
					forward = 1 - dir_reversed;
 8004d20:	4652      	mov	r2, sl
 8004d22:	6812      	ldr	r2, [r2, #0]
 8004d24:	3b13      	subs	r3, #19
 8004d26:	1a9b      	subs	r3, r3, r2
 8004d28:	4642      	mov	r2, r8
 8004d2a:	6013      	str	r3, [r2, #0]
 8004d2c:	e49f      	b.n	800466e <main+0x732>
					forward = dir_reversed;
 8004d2e:	4652      	mov	r2, sl
 8004d30:	4643      	mov	r3, r8
 8004d32:	6812      	ldr	r2, [r2, #0]
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	e49a      	b.n	800466e <main+0x732>
 8004d38:	9b02      	ldr	r3, [sp, #8]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	e49c      	b.n	8004678 <main+0x73c>
					bi_direction = 0;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	9a02      	ldr	r2, [sp, #8]
 8004d42:	6013      	str	r3, [r2, #0]
					armed = 0;
 8004d44:	4a1d      	ldr	r2, [pc, #116]	; (8004dbc <main+0xe80>)
 8004d46:	7013      	strb	r3, [r2, #0]
				dshotcommand = 0;
 8004d48:	4a1d      	ldr	r2, [pc, #116]	; (8004dc0 <main+0xe84>)
 8004d4a:	6013      	str	r3, [r2, #0]
			} else if ((proshot || dshot) && bi_direction) {
 8004d4c:	4b1d      	ldr	r3, [pc, #116]	; (8004dc4 <main+0xe88>)
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d100      	bne.n	8004d56 <main+0xe1a>
 8004d54:	e497      	b.n	8004686 <main+0x74a>
				adjusted_input = newinput;
 8004d56:	9b07      	ldr	r3, [sp, #28]
 8004d58:	4a1e      	ldr	r2, [pc, #120]	; (8004dd4 <main+0xe98>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6013      	str	r3, [r2, #0]
 8004d5e:	e4d5      	b.n	800470c <main+0x7d0>
					adjusted_input = 0;
 8004d60:	2300      	movs	r3, #0
 8004d62:	4a1c      	ldr	r2, [pc, #112]	; (8004dd4 <main+0xe98>)
 8004d64:	6013      	str	r3, [r2, #0]
 8004d66:	e7a3      	b.n	8004cb0 <main+0xd74>
 8004d68:	40012c00 	.word	0x40012c00
 8004d6c:	2000005c 	.word	0x2000005c
 8004d70:	20000124 	.word	0x20000124
 8004d74:	200000f2 	.word	0x200000f2
 8004d78:	200000af 	.word	0x200000af
 8004d7c:	200000c0 	.word	0x200000c0
 8004d80:	48000400 	.word	0x48000400
 8004d84:	fff3ffff 	.word	0xfff3ffff
 8004d88:	ffff3fff 	.word	0xffff3fff
 8004d8c:	fffcffff 	.word	0xfffcffff
 8004d90:	ffcfffff 	.word	0xffcfffff
 8004d94:	40010400 	.word	0x40010400
 8004d98:	ffdfffff 	.word	0xffdfffff
 8004d9c:	200000e0 	.word	0x200000e0
 8004da0:	200000e8 	.word	0x200000e8
 8004da4:	200000e4 	.word	0x200000e4
 8004da8:	200000a8 	.word	0x200000a8
 8004dac:	000007ce 	.word	0x000007ce
 8004db0:	0000079f 	.word	0x0000079f
 8004db4:	2000004c 	.word	0x2000004c
 8004db8:	20000180 	.word	0x20000180
 8004dbc:	200000a4 	.word	0x200000a4
 8004dc0:	200000d0 	.word	0x200000d0
 8004dc4:	20000108 	.word	0x20000108
 8004dc8:	200000cc 	.word	0x200000cc
 8004dcc:	0000044c 	.word	0x0000044c
 8004dd0:	fffffbe6 	.word	0xfffffbe6
 8004dd4:	20000428 	.word	0x20000428
 8004dd8:	fffffd08 	.word	0xfffffd08
 8004ddc:	200000ae 	.word	0x200000ae
 8004de0:	000002f7 	.word	0x000002f7
 8004de4:	e7fe      	b.n	8004de4 <main+0xea8>
	if(bi_polar){
 8004de6:	4ad8      	ldr	r2, [pc, #864]	; (8005148 <main+0x120c>)
 8004de8:	9205      	str	r2, [sp, #20]
 8004dea:	7812      	ldrb	r2, [r2, #0]
 8004dec:	2a00      	cmp	r2, #0
 8004dee:	d101      	bne.n	8004df4 <main+0xeb8>
 8004df0:	f7ff fbea 	bl	80045c8 <main+0x68c>
		comp_pwm = 1;
 8004df4:	9a01      	ldr	r2, [sp, #4]
 8004df6:	7013      	strb	r3, [r2, #0]
 8004df8:	f7ff fbe6 	bl	80045c8 <main+0x68c>
		newinput = 1001;
 8004dfc:	4bd3      	ldr	r3, [pc, #844]	; (800514c <main+0x1210>)
 8004dfe:	001a      	movs	r2, r3
 8004e00:	9307      	str	r3, [sp, #28]
 8004e02:	4bd3      	ldr	r3, [pc, #844]	; (8005150 <main+0x1214>)
 8004e04:	6013      	str	r3, [r2, #0]
 8004e06:	f7ff fbc0 	bl	800458a <main+0x64e>
					storeEEpromConfig();
 8004e0a:	f7fe f831 	bl	8002e70 <storeEEpromConfig>
 8004e0e:	e7fe      	b.n	8004e0e <main+0xed2>
	phaseAPWM();
 8004e10:	f7fe f87e 	bl	8002f10 <phaseAPWM>
	phaseCPWM();
 8004e14:	f7fe f8d6 	bl	8002fc4 <phaseCPWM>
 8004e18:	e4e8      	b.n	80047ec <main+0x8b0>
				zctimeout = 0;
 8004e1a:	4ace      	ldr	r2, [pc, #824]	; (8005154 <main+0x1218>)
 8004e1c:	6013      	str	r3, [r2, #0]
				startMotor(); // safety on for input testing   ************************************************
 8004e1e:	f7fe fc13 	bl	8003648 <startMotor>
 8004e22:	e608      	b.n	8004a36 <main+0xafa>
				fullBrake();
 8004e24:	f7fe fab6 	bl	8003394 <fullBrake>
				bemf_counts = 0;
 8004e28:	464b      	mov	r3, r9
				duty_cycle = 0;
 8004e2a:	602c      	str	r4, [r5, #0]
				bemf_counts = 0;
 8004e2c:	601c      	str	r4, [r3, #0]
			if (prop_brake && prop_brake_active) {
 8004e2e:	9b04      	ldr	r3, [sp, #16]
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d100      	bne.n	8004e38 <main+0xefc>
 8004e36:	e5e2      	b.n	80049fe <main+0xac2>
 8004e38:	e5d3      	b.n	80049e2 <main+0xaa6>
			TIM1->CCR1 = duty_cycle;// set duty cycle to 50 out of 768 to start.
 8004e3a:	682a      	ldr	r2, [r5, #0]
 8004e3c:	4bc6      	ldr	r3, [pc, #792]	; (8005158 <main+0x121c>)
 8004e3e:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = duty_cycle;
 8004e40:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3 = duty_cycle;
 8004e42:	63da      	str	r2, [r3, #60]	; 0x3c
 8004e44:	e5e7      	b.n	8004a16 <main+0xada>
	if(!zcfound){
 8004e46:	4bc5      	ldr	r3, [pc, #788]	; (800515c <main+0x1220>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	9308      	str	r3, [sp, #32]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d000      	beq.n	8004e52 <main+0xf16>
 8004e50:	e5fa      	b.n	8004a48 <main+0xb0c>
			if (rising == 0){
 8004e52:	4bc3      	ldr	r3, [pc, #780]	; (8005160 <main+0x1224>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d100      	bne.n	8004e5c <main+0xf20>
 8004e5a:	e0e7      	b.n	800502c <main+0x10f0>
			if (rising == 1){
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d000      	beq.n	8004e62 <main+0xf26>
 8004e60:	e5f2      	b.n	8004a48 <main+0xb0c>
				if (HAL_COMP_GetOutputLevel(&hcomp1) == COMP_OUTPUTLEVEL_HIGH){
 8004e62:	0038      	movs	r0, r7
 8004e64:	f7fb fd94 	bl	8000990 <HAL_COMP_GetOutputLevel>
 8004e68:	2380      	movs	r3, #128	; 0x80
 8004e6a:	01db      	lsls	r3, r3, #7
 8004e6c:	4298      	cmp	r0, r3
 8004e6e:	d100      	bne.n	8004e72 <main+0xf36>
 8004e70:	e0c9      	b.n	8005006 <main+0x10ca>
				if (HAL_COMP_GetOutputLevel(&hcomp1) == COMP_OUTPUTLEVEL_LOW){
 8004e72:	0038      	movs	r0, r7
 8004e74:	f7fb fd8c 	bl	8000990 <HAL_COMP_GetOutputLevel>
					upcompcount++;
 8004e78:	4bba      	ldr	r3, [pc, #744]	; (8005164 <main+0x1228>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
				if (HAL_COMP_GetOutputLevel(&hcomp1) == COMP_OUTPUTLEVEL_LOW){
 8004e7c:	2800      	cmp	r0, #0
 8004e7e:	d103      	bne.n	8004e88 <main+0xf4c>
					upcompcount++;
 8004e80:	4ab8      	ldr	r2, [pc, #736]	; (8005164 <main+0x1228>)
 8004e82:	9308      	str	r3, [sp, #32]
 8004e84:	3301      	adds	r3, #1
 8004e86:	6013      	str	r3, [r2, #0]
					if (upcompcount > upthreshold){
 8004e88:	4ab7      	ldr	r2, [pc, #732]	; (8005168 <main+0x122c>)
 8004e8a:	6812      	ldr	r2, [r2, #0]
 8004e8c:	9208      	str	r2, [sp, #32]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	db00      	blt.n	8004e94 <main+0xf58>
 8004e92:	e5d9      	b.n	8004a48 <main+0xb0c>
							zcfound = 1;
 8004e94:	2301      	movs	r3, #1
 8004e96:	4ab1      	ldr	r2, [pc, #708]	; (800515c <main+0x1220>)
								thiszctime = TIM2->CNT;
 8004e98:	2480      	movs	r4, #128	; 0x80
							zcfound = 1;
 8004e9a:	6013      	str	r3, [r2, #0]
							zctimeout = 0;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	4aad      	ldr	r2, [pc, #692]	; (8005154 <main+0x1218>)
							bemf_counts++;
 8004ea0:	4649      	mov	r1, r9
							zctimeout = 0;
 8004ea2:	6013      	str	r3, [r2, #0]
							upcompcount = 0;
 8004ea4:	4aaf      	ldr	r2, [pc, #700]	; (8005164 <main+0x1228>)
								thiszctime = TIM2->CNT;
 8004ea6:	05e4      	lsls	r4, r4, #23
							upcompcount = 0;
 8004ea8:	6013      	str	r3, [r2, #0]
							falsecount = 0;
 8004eaa:	4ab0      	ldr	r2, [pc, #704]	; (800516c <main+0x1230>)
 8004eac:	6013      	str	r3, [r2, #0]
							bemf_counts++;
 8004eae:	464a      	mov	r2, r9
 8004eb0:	6812      	ldr	r2, [r2, #0]
 8004eb2:	3201      	adds	r2, #1
 8004eb4:	600a      	str	r2, [r1, #0]
								thiszctime = TIM2->CNT;
 8004eb6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004eb8:	49ad      	ldr	r1, [pc, #692]	; (8005170 <main+0x1234>)
 8004eba:	600a      	str	r2, [r1, #0]
								forced_com_done = 0;
 8004ebc:	49ad      	ldr	r1, [pc, #692]	; (8005174 <main+0x1238>)
								TIM2->CNT = 0;
 8004ebe:	6263      	str	r3, [r4, #36]	; 0x24
								forced_com_done = 0;
 8004ec0:	600b      	str	r3, [r1, #0]
							    commutation_interval = ((2*commutation_interval) + thiszctime) / 3;
 8004ec2:	6833      	ldr	r3, [r6, #0]
 8004ec4:	2103      	movs	r1, #3
 8004ec6:	0058      	lsls	r0, r3, #1
 8004ec8:	1880      	adds	r0, r0, r2
 8004eca:	f7fb f9a7 	bl	800021c <__divsi3>
								degree_time = commutation_interval >> 5;                          // about 1.85 degrees per unit
 8004ece:	4baa      	ldr	r3, [pc, #680]	; (8005178 <main+0x123c>)
 8004ed0:	1142      	asrs	r2, r0, #5
 8004ed2:	601a      	str	r2, [r3, #0]
								advance = degree_time * advance_multiplier;
 8004ed4:	4ba9      	ldr	r3, [pc, #676]	; (800517c <main+0x1240>)
							    commutation_interval = ((2*commutation_interval) + thiszctime) / 3;
 8004ed6:	6030      	str	r0, [r6, #0]
								advance = degree_time * advance_multiplier;
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	435a      	muls	r2, r3
 8004edc:	4ba8      	ldr	r3, [pc, #672]	; (8005180 <main+0x1244>)
 8004ede:	601a      	str	r2, [r3, #0]
								waitTime = (commutation_interval >> 1) - advance;
 8004ee0:	1043      	asrs	r3, r0, #1
 8004ee2:	1a9b      	subs	r3, r3, r2
 8004ee4:	4aa7      	ldr	r2, [pc, #668]	; (8005184 <main+0x1248>)
 8004ee6:	6013      	str	r3, [r2, #0]
								if (sensorless){
 8004ee8:	4aa7      	ldr	r2, [pc, #668]	; (8005188 <main+0x124c>)
 8004eea:	6812      	ldr	r2, [r2, #0]
 8004eec:	9208      	str	r2, [sp, #32]
 8004eee:	2a00      	cmp	r2, #0
 8004ef0:	d005      	beq.n	8004efe <main+0xfc2>
									while (TIM2->CNT < waitTime){
 8004ef2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d3fc      	bcc.n	8004ef2 <main+0xfb6>
									commutate();
 8004ef8:	f7fe fa90 	bl	800341c <commutate>
 8004efc:	6830      	ldr	r0, [r6, #0]
								zcfound = 0;
 8004efe:	2300      	movs	r3, #0
 8004f00:	4a96      	ldr	r2, [pc, #600]	; (800515c <main+0x1220>)
 8004f02:	6013      	str	r3, [r2, #0]
 8004f04:	4ba1      	ldr	r3, [pc, #644]	; (800518c <main+0x1250>)
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	e5a1      	b.n	8004a4e <main+0xb12>
			if (bemf_counts < 25 || commutation_interval > 8000 || duty_cycle < 200) {
 8004f0a:	464b      	mov	r3, r9
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2b18      	cmp	r3, #24
 8004f10:	dd07      	ble.n	8004f22 <main+0xfe6>
 8004f12:	23fa      	movs	r3, #250	; 0xfa
 8004f14:	6832      	ldr	r2, [r6, #0]
 8004f16:	015b      	lsls	r3, r3, #5
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	dc02      	bgt.n	8004f22 <main+0xfe6>
 8004f1c:	682b      	ldr	r3, [r5, #0]
 8004f1e:	2bc7      	cmp	r3, #199	; 0xc7
 8004f20:	dc06      	bgt.n	8004f30 <main+0xff4>
				filter_level = 15;
 8004f22:	220f      	movs	r2, #15
				filter_delay = 15;
 8004f24:	230f      	movs	r3, #15
 8004f26:	499a      	ldr	r1, [pc, #616]	; (8005190 <main+0x1254>)
 8004f28:	700a      	strb	r2, [r1, #0]
 8004f2a:	4a9a      	ldr	r2, [pc, #616]	; (8005194 <main+0x1258>)
 8004f2c:	6013      	str	r3, [r2, #0]
 8004f2e:	e57e      	b.n	8004a2e <main+0xaf2>
				filter_level = 8;
 8004f30:	2208      	movs	r2, #8
				filter_delay = 0;
 8004f32:	2300      	movs	r3, #0
 8004f34:	e7f7      	b.n	8004f26 <main+0xfea>
		if(bemf_counts < 15 || commutation_interval > 25000){
 8004f36:	464b      	mov	r3, r9
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2b0e      	cmp	r3, #14
 8004f3c:	dd03      	ble.n	8004f46 <main+0x100a>
 8004f3e:	4b96      	ldr	r3, [pc, #600]	; (8005198 <main+0x125c>)
 8004f40:	6832      	ldr	r2, [r6, #0]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	dd20      	ble.n	8004f88 <main+0x104c>
			filter_level = 10;
 8004f46:	230a      	movs	r3, #10
 8004f48:	4a91      	ldr	r2, [pc, #580]	; (8005190 <main+0x1254>)
 8004f4a:	7013      	strb	r3, [r2, #0]
 8004f4c:	e56f      	b.n	8004a2e <main+0xaf2>
		if (bemf_counts < 40 || commutation_interval > 2000 || duty_cycle < 200) {
 8004f4e:	464b      	mov	r3, r9
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2b27      	cmp	r3, #39	; 0x27
 8004f54:	dc1c      	bgt.n	8004f90 <main+0x1054>
			filter_delay = 15;
 8004f56:	200f      	movs	r0, #15
			filter_level = 10;
 8004f58:	240a      	movs	r4, #10
			filter_delay = 15;
 8004f5a:	4684      	mov	ip, r0
 8004f5c:	6829      	ldr	r1, [r5, #0]
 8004f5e:	6832      	ldr	r2, [r6, #0]
 8004f60:	488b      	ldr	r0, [pc, #556]	; (8005190 <main+0x1254>)
 8004f62:	7004      	strb	r4, [r0, #0]
 8004f64:	4664      	mov	r4, ip
 8004f66:	488b      	ldr	r0, [pc, #556]	; (8005194 <main+0x1258>)
 8004f68:	6004      	str	r4, [r0, #0]
		if (duty_cycle > 600 && bemf_counts > 75){
 8004f6a:	2096      	movs	r0, #150	; 0x96
 8004f6c:	0080      	lsls	r0, r0, #2
 8004f6e:	4281      	cmp	r1, r0
 8004f70:	dd04      	ble.n	8004f7c <main+0x1040>
 8004f72:	2b4b      	cmp	r3, #75	; 0x4b
 8004f74:	dd02      	ble.n	8004f7c <main+0x1040>
			filter_level = 2;
 8004f76:	2102      	movs	r1, #2
 8004f78:	4885      	ldr	r0, [pc, #532]	; (8005190 <main+0x1254>)
 8004f7a:	7001      	strb	r1, [r0, #0]
		if (commutation_interval < 200 && bemf_counts > 100){
 8004f7c:	2ac7      	cmp	r2, #199	; 0xc7
 8004f7e:	dd00      	ble.n	8004f82 <main+0x1046>
 8004f80:	e555      	b.n	8004a2e <main+0xaf2>
 8004f82:	2b64      	cmp	r3, #100	; 0x64
 8004f84:	dc00      	bgt.n	8004f88 <main+0x104c>
 8004f86:	e552      	b.n	8004a2e <main+0xaf2>
			filter_level = 2;
 8004f88:	2302      	movs	r3, #2
 8004f8a:	4a81      	ldr	r2, [pc, #516]	; (8005190 <main+0x1254>)
 8004f8c:	7013      	strb	r3, [r2, #0]
 8004f8e:	e54e      	b.n	8004a2e <main+0xaf2>
		if (bemf_counts < 40 || commutation_interval > 2000 || duty_cycle < 200) {
 8004f90:	21fa      	movs	r1, #250	; 0xfa
 8004f92:	6832      	ldr	r2, [r6, #0]
 8004f94:	00c9      	lsls	r1, r1, #3
 8004f96:	428a      	cmp	r2, r1
 8004f98:	dd27      	ble.n	8004fea <main+0x10ae>
 8004f9a:	210a      	movs	r1, #10
 8004f9c:	487c      	ldr	r0, [pc, #496]	; (8005190 <main+0x1254>)
 8004f9e:	7001      	strb	r1, [r0, #0]
 8004fa0:	487c      	ldr	r0, [pc, #496]	; (8005194 <main+0x1258>)
 8004fa2:	3105      	adds	r1, #5
 8004fa4:	6001      	str	r1, [r0, #0]
		if (duty_cycle > 600 && bemf_counts > 75){
 8004fa6:	2196      	movs	r1, #150	; 0x96
 8004fa8:	6828      	ldr	r0, [r5, #0]
 8004faa:	0089      	lsls	r1, r1, #2
 8004fac:	4288      	cmp	r0, r1
 8004fae:	dce0      	bgt.n	8004f72 <main+0x1036>
 8004fb0:	e53d      	b.n	8004a2e <main+0xaf2>
	zctimeout++;
 8004fb2:	4a68      	ldr	r2, [pc, #416]	; (8005154 <main+0x1218>)
 8004fb4:	4967      	ldr	r1, [pc, #412]	; (8005154 <main+0x1218>)
 8004fb6:	6812      	ldr	r2, [r2, #0]
 8004fb8:	3201      	adds	r2, #1
 8004fba:	600a      	str	r2, [r1, #0]
		if (zctimeout > zc_timeout_threshold) {
 8004fbc:	4977      	ldr	r1, [pc, #476]	; (800519c <main+0x1260>)
 8004fbe:	6809      	ldr	r1, [r1, #0]
 8004fc0:	9108      	str	r1, [sp, #32]
 8004fc2:	428a      	cmp	r2, r1
 8004fc4:	dc00      	bgt.n	8004fc8 <main+0x108c>
 8004fc6:	e545      	b.n	8004a54 <main+0xb18>
			bemf_counts = 0;
 8004fc8:	464a      	mov	r2, r9
 8004fca:	6013      	str	r3, [r2, #0]
			bad_commutation = 0;
 8004fcc:	4a74      	ldr	r2, [pc, #464]	; (80051a0 <main+0x1264>)
 8004fce:	7013      	strb	r3, [r2, #0]
			sensorless = 0;
 8004fd0:	4a6d      	ldr	r2, [pc, #436]	; (8005188 <main+0x124c>)
 8004fd2:	6013      	str	r3, [r2, #0]
			EXTI->IMR &= (0 << 21);
 8004fd4:	4a73      	ldr	r2, [pc, #460]	; (80051a4 <main+0x1268>)
 8004fd6:	6811      	ldr	r1, [r2, #0]
 8004fd8:	6013      	str	r3, [r2, #0]
			count++;
 8004fda:	4a73      	ldr	r2, [pc, #460]	; (80051a8 <main+0x126c>)
 8004fdc:	6812      	ldr	r2, [r2, #0]
 8004fde:	9208      	str	r2, [sp, #32]
 8004fe0:	1c54      	adds	r4, r2, #1
			running = 0;
 8004fe2:	465a      	mov	r2, fp
 8004fe4:	6013      	str	r3, [r2, #0]
 8004fe6:	f7ff faf8 	bl	80045da <main+0x69e>
		if (bemf_counts < 40 || commutation_interval > 2000 || duty_cycle < 200) {
 8004fea:	6829      	ldr	r1, [r5, #0]
 8004fec:	29c7      	cmp	r1, #199	; 0xc7
 8004fee:	dd03      	ble.n	8004ff8 <main+0x10bc>
			filter_delay = 0;
 8004ff0:	2000      	movs	r0, #0
			filter_level = 5;
 8004ff2:	2405      	movs	r4, #5
			filter_delay = 0;
 8004ff4:	4684      	mov	ip, r0
 8004ff6:	e7b3      	b.n	8004f60 <main+0x1024>
 8004ff8:	210a      	movs	r1, #10
 8004ffa:	4865      	ldr	r0, [pc, #404]	; (8005190 <main+0x1254>)
 8004ffc:	7001      	strb	r1, [r0, #0]
 8004ffe:	4865      	ldr	r0, [pc, #404]	; (8005194 <main+0x1258>)
 8005000:	3105      	adds	r1, #5
 8005002:	6001      	str	r1, [r0, #0]
 8005004:	e7ba      	b.n	8004f7c <main+0x1040>
					falsecount++;
 8005006:	4b59      	ldr	r3, [pc, #356]	; (800516c <main+0x1230>)
 8005008:	4a58      	ldr	r2, [pc, #352]	; (800516c <main+0x1230>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	3301      	adds	r3, #1
 800500e:	6013      	str	r3, [r2, #0]
					if (falsecount > falsethreshold){
 8005010:	4a66      	ldr	r2, [pc, #408]	; (80051ac <main+0x1270>)
 8005012:	6812      	ldr	r2, [r2, #0]
 8005014:	9208      	str	r2, [sp, #32]
 8005016:	4293      	cmp	r3, r2
 8005018:	dc00      	bgt.n	800501c <main+0x10e0>
 800501a:	e72a      	b.n	8004e72 <main+0xf36>
					upcompcount = 0;
 800501c:	2300      	movs	r3, #0
 800501e:	4a51      	ldr	r2, [pc, #324]	; (8005164 <main+0x1228>)
 8005020:	6013      	str	r3, [r2, #0]
					zcfound = 0;
 8005022:	4a4e      	ldr	r2, [pc, #312]	; (800515c <main+0x1220>)
 8005024:	6013      	str	r3, [r2, #0]
					falsecount = 0;
 8005026:	4a51      	ldr	r2, [pc, #324]	; (800516c <main+0x1230>)
 8005028:	6013      	str	r3, [r2, #0]
 800502a:	e722      	b.n	8004e72 <main+0xf36>
				if (HAL_COMP_GetOutputLevel(&hcomp1) == COMP_OUTPUTLEVEL_LOW){
 800502c:	0038      	movs	r0, r7
 800502e:	f7fb fcaf 	bl	8000990 <HAL_COMP_GetOutputLevel>
 8005032:	2800      	cmp	r0, #0
 8005034:	d10f      	bne.n	8005056 <main+0x111a>
					falsecount++;
 8005036:	4b4d      	ldr	r3, [pc, #308]	; (800516c <main+0x1230>)
 8005038:	4a4c      	ldr	r2, [pc, #304]	; (800516c <main+0x1230>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	3301      	adds	r3, #1
 800503e:	6013      	str	r3, [r2, #0]
					if (falsecount > falsethreshold){
 8005040:	4a5a      	ldr	r2, [pc, #360]	; (80051ac <main+0x1270>)
 8005042:	6812      	ldr	r2, [r2, #0]
 8005044:	9208      	str	r2, [sp, #32]
 8005046:	4293      	cmp	r3, r2
 8005048:	dd05      	ble.n	8005056 <main+0x111a>
					compcount = 0;
 800504a:	4b59      	ldr	r3, [pc, #356]	; (80051b0 <main+0x1274>)
 800504c:	6018      	str	r0, [r3, #0]
					zcfound = 0;
 800504e:	4b43      	ldr	r3, [pc, #268]	; (800515c <main+0x1220>)
 8005050:	6018      	str	r0, [r3, #0]
					falsecount = 0;
 8005052:	4b46      	ldr	r3, [pc, #280]	; (800516c <main+0x1230>)
 8005054:	6018      	str	r0, [r3, #0]
				if (HAL_COMP_GetOutputLevel(&hcomp1) == COMP_OUTPUTLEVEL_HIGH){
 8005056:	0038      	movs	r0, r7
 8005058:	f7fb fc9a 	bl	8000990 <HAL_COMP_GetOutputLevel>
 800505c:	2380      	movs	r3, #128	; 0x80
 800505e:	01db      	lsls	r3, r3, #7
 8005060:	4298      	cmp	r0, r3
 8005062:	d040      	beq.n	80050e6 <main+0x11aa>
 8005064:	4b52      	ldr	r3, [pc, #328]	; (80051b0 <main+0x1274>)
 8005066:	681b      	ldr	r3, [r3, #0]
					if (compcount > threshold){
 8005068:	4a52      	ldr	r2, [pc, #328]	; (80051b4 <main+0x1278>)
 800506a:	6812      	ldr	r2, [r2, #0]
 800506c:	9208      	str	r2, [sp, #32]
 800506e:	429a      	cmp	r2, r3
 8005070:	da36      	bge.n	80050e0 <main+0x11a4>
							zcfound = 1;
 8005072:	2301      	movs	r3, #1
 8005074:	4a39      	ldr	r2, [pc, #228]	; (800515c <main+0x1220>)
							bemf_counts++;
 8005076:	4649      	mov	r1, r9
							zcfound = 1;
 8005078:	6013      	str	r3, [r2, #0]
							zctimeout = 0;
 800507a:	2300      	movs	r3, #0
 800507c:	4a35      	ldr	r2, [pc, #212]	; (8005154 <main+0x1218>)
							thiszctime = TIM2->CNT;
 800507e:	2480      	movs	r4, #128	; 0x80
							zctimeout = 0;
 8005080:	6013      	str	r3, [r2, #0]
							compcount = 0;
 8005082:	4a4b      	ldr	r2, [pc, #300]	; (80051b0 <main+0x1274>)
							thiszctime = TIM2->CNT;
 8005084:	05e4      	lsls	r4, r4, #23
							compcount = 0;
 8005086:	6013      	str	r3, [r2, #0]
							bemf_counts++;
 8005088:	464a      	mov	r2, r9
 800508a:	6812      	ldr	r2, [r2, #0]
 800508c:	3201      	adds	r2, #1
 800508e:	600a      	str	r2, [r1, #0]
							falsecount = 0;
 8005090:	4a36      	ldr	r2, [pc, #216]	; (800516c <main+0x1230>)
							thiszctime = TIM2->CNT;
 8005092:	4937      	ldr	r1, [pc, #220]	; (8005170 <main+0x1234>)
							falsecount = 0;
 8005094:	6013      	str	r3, [r2, #0]
							thiszctime = TIM2->CNT;
 8005096:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005098:	600a      	str	r2, [r1, #0]
							forced_com_done = 0;
 800509a:	4936      	ldr	r1, [pc, #216]	; (8005174 <main+0x1238>)
							TIM2->CNT = 0;
 800509c:	6263      	str	r3, [r4, #36]	; 0x24
							forced_com_done = 0;
 800509e:	600b      	str	r3, [r1, #0]
						    commutation_interval = ((2*commutation_interval) + thiszctime) / 3;
 80050a0:	6833      	ldr	r3, [r6, #0]
 80050a2:	2103      	movs	r1, #3
 80050a4:	0058      	lsls	r0, r3, #1
 80050a6:	1880      	adds	r0, r0, r2
 80050a8:	f7fb f8b8 	bl	800021c <__divsi3>
							degree_time = commutation_interval >> 5;                          // about 1.85 degrees per unit
 80050ac:	4a32      	ldr	r2, [pc, #200]	; (8005178 <main+0x123c>)
 80050ae:	1143      	asrs	r3, r0, #5
 80050b0:	6013      	str	r3, [r2, #0]
							advance = degree_time * advance_multiplier;                     //  * 16 would be about 30 degrees
 80050b2:	4a32      	ldr	r2, [pc, #200]	; (800517c <main+0x1240>)
						    commutation_interval = ((2*commutation_interval) + thiszctime) / 3;
 80050b4:	6030      	str	r0, [r6, #0]
							advance = degree_time * advance_multiplier;                     //  * 16 would be about 30 degrees
 80050b6:	6812      	ldr	r2, [r2, #0]
							waitTime = (commutation_interval >> 1) - advance;
 80050b8:	1040      	asrs	r0, r0, #1
							advance = degree_time * advance_multiplier;                     //  * 16 would be about 30 degrees
 80050ba:	4353      	muls	r3, r2
 80050bc:	4a30      	ldr	r2, [pc, #192]	; (8005180 <main+0x1244>)
							waitTime = (commutation_interval >> 1) - advance;
 80050be:	1ac0      	subs	r0, r0, r3
							advance = degree_time * advance_multiplier;                     //  * 16 would be about 30 degrees
 80050c0:	6013      	str	r3, [r2, #0]
							waitTime = (commutation_interval >> 1) - advance;
 80050c2:	4b30      	ldr	r3, [pc, #192]	; (8005184 <main+0x1248>)
 80050c4:	6018      	str	r0, [r3, #0]
							if (sensorless){
 80050c6:	4b30      	ldr	r3, [pc, #192]	; (8005188 <main+0x124c>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	9308      	str	r3, [sp, #32]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d004      	beq.n	80050da <main+0x119e>
								while (TIM2->CNT  < waitTime){
 80050d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050d2:	4283      	cmp	r3, r0
 80050d4:	d3fc      	bcc.n	80050d0 <main+0x1194>
								commutate();
 80050d6:	f7fe f9a1 	bl	800341c <commutate>
							zcfound = 0;
 80050da:	2300      	movs	r3, #0
 80050dc:	4a1f      	ldr	r2, [pc, #124]	; (800515c <main+0x1220>)
 80050de:	6013      	str	r3, [r2, #0]
 80050e0:	4b1f      	ldr	r3, [pc, #124]	; (8005160 <main+0x1224>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	e6ba      	b.n	8004e5c <main+0xf20>
					compcount++;
 80050e6:	4b32      	ldr	r3, [pc, #200]	; (80051b0 <main+0x1274>)
 80050e8:	4a31      	ldr	r2, [pc, #196]	; (80051b0 <main+0x1274>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	9308      	str	r3, [sp, #32]
 80050ee:	3301      	adds	r3, #1
 80050f0:	6013      	str	r3, [r2, #0]
 80050f2:	e7b9      	b.n	8005068 <main+0x112c>
			if (bemf_counts < 5 ){
 80050f4:	2904      	cmp	r1, #4
 80050f6:	dc01      	bgt.n	80050fc <main+0x11c0>
					duty_cycle = start_power;
 80050f8:	0003      	movs	r3, r0
 80050fa:	6028      	str	r0, [r5, #0]
			if (running) {
 80050fc:	465a      	mov	r2, fp
 80050fe:	6812      	ldr	r2, [r2, #0]
 8005100:	2a00      	cmp	r2, #0
 8005102:	d101      	bne.n	8005108 <main+0x11cc>
 8005104:	f7ff fb9c 	bl	8004840 <main+0x904>
				if (duty_cycle < 90) {
 8005108:	2b59      	cmp	r3, #89	; 0x59
 800510a:	dd00      	ble.n	800510e <main+0x11d2>
 800510c:	e555      	b.n	8004bba <main+0xc7e>
					duty_cycle = 90;
 800510e:	235a      	movs	r3, #90	; 0x5a
 8005110:	602b      	str	r3, [r5, #0]
 8005112:	e552      	b.n	8004bba <main+0xc7e>
			if (running) {
 8005114:	465a      	mov	r2, fp
 8005116:	6812      	ldr	r2, [r2, #0]
 8005118:	2a00      	cmp	r2, #0
 800511a:	d101      	bne.n	8005120 <main+0x11e4>
 800511c:	f7ff fb90 	bl	8004840 <main+0x904>
				if (duty_cycle > 1998) {                             // safety!!!
 8005120:	4a25      	ldr	r2, [pc, #148]	; (80051b8 <main+0x127c>)
 8005122:	4293      	cmp	r3, r2
 8005124:	ddf0      	ble.n	8005108 <main+0x11cc>
					duty_cycle = 1998;
 8005126:	602a      	str	r2, [r5, #0]
 8005128:	0013      	movs	r3, r2
 800512a:	e546      	b.n	8004bba <main+0xc7e>
				TIM1->CCR1 = duty_cycle;
 800512c:	4a0a      	ldr	r2, [pc, #40]	; (8005158 <main+0x121c>)
 800512e:	6353      	str	r3, [r2, #52]	; 0x34
				TIM1->CCR2 = duty_cycle;
 8005130:	6393      	str	r3, [r2, #56]	; 0x38
				TIM1->CCR3 = duty_cycle;
 8005132:	63d3      	str	r3, [r2, #60]	; 0x3c
 8005134:	f7ff fb84 	bl	8004840 <main+0x904>
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8005138:	2896      	cmp	r0, #150	; 0x96
 800513a:	db01      	blt.n	8005140 <main+0x1204>
 800513c:	f7ff fb60 	bl	8004800 <main+0x8c4>
 8005140:	2096      	movs	r0, #150	; 0x96
 8005142:	f7ff fb5d 	bl	8004800 <main+0x8c4>
 8005146:	46c0      	nop			; (mov r8, r8)
 8005148:	200000ad 	.word	0x200000ad
 800514c:	200000ec 	.word	0x200000ec
 8005150:	000003e9 	.word	0x000003e9
 8005154:	20000144 	.word	0x20000144
 8005158:	40012c00 	.word	0x40012c00
 800515c:	20000064 	.word	0x20000064
 8005160:	20000040 	.word	0x20000040
 8005164:	2000013c 	.word	0x2000013c
 8005168:	20000058 	.word	0x20000058
 800516c:	200000d8 	.word	0x200000d8
 8005170:	20000134 	.word	0x20000134
 8005174:	200000dc 	.word	0x200000dc
 8005178:	20000170 	.word	0x20000170
 800517c:	2000000c 	.word	0x2000000c
 8005180:	200000a0 	.word	0x200000a0
 8005184:	20000140 	.word	0x20000140
 8005188:	20000110 	.word	0x20000110
 800518c:	200000af 	.word	0x200000af
 8005190:	2000002c 	.word	0x2000002c
 8005194:	20000028 	.word	0x20000028
 8005198:	000061a8 	.word	0x000061a8
 800519c:	20000060 	.word	0x20000060
 80051a0:	200000ac 	.word	0x200000ac
 80051a4:	40010400 	.word	0x40010400
 80051a8:	200000c0 	.word	0x200000c0
 80051ac:	20000024 	.word	0x20000024
 80051b0:	200000b8 	.word	0x200000b8
 80051b4:	20000054 	.word	0x20000054
 80051b8:	000007ce 	.word	0x000007ce
 80051bc:	2103      	movs	r1, #3
 80051be:	6813      	ldr	r3, [r2, #0]
 80051c0:	438b      	bics	r3, r1
 80051c2:	3902      	subs	r1, #2
 80051c4:	430b      	orrs	r3, r1
 80051c6:	6013      	str	r3, [r2, #0]
		GPIOB->BRR = GPIO_PIN_0;
 80051c8:	6291      	str	r1, [r2, #40]	; 0x28
 80051ca:	f7ff fae0 	bl	800478e <main+0x852>
                 if (dither_count == 1){
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d017      	beq.n	8005202 <main+0x12c6>
                 if (dither_count == 2){
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d001      	beq.n	80051da <main+0x129e>
 80051d6:	f7ff fb33 	bl	8004840 <main+0x904>
                 				 if (forward){
 80051da:	4643      	mov	r3, r8
 80051dc:	681b      	ldr	r3, [r3, #0]
                 					TIM1->CCR2 = (TIM1->ARR /2) + (input / 2)- dither_amount;
 80051de:	4a22      	ldr	r2, [pc, #136]	; (8005268 <main+0x132c>)
                 				 if (forward){
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d022      	beq.n	800522a <main+0x12ee>
                 					TIM1->CCR2 = (TIM1->ARR /2) + (input / 2)- dither_amount;
 80051e4:	4921      	ldr	r1, [pc, #132]	; (800526c <main+0x1330>)
 80051e6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80051e8:	6809      	ldr	r1, [r1, #0]
 80051ea:	085b      	lsrs	r3, r3, #1
 80051ec:	1064      	asrs	r4, r4, #1
 80051ee:	1a5b      	subs	r3, r3, r1
 80051f0:	191b      	adds	r3, r3, r4
 80051f2:	6393      	str	r3, [r2, #56]	; 0x38
                 					TIM1->CCR3 = (TIM1->ARR /2) - (input / 2) + dither_amount;
 80051f4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80051f6:	085b      	lsrs	r3, r3, #1
 80051f8:	185b      	adds	r3, r3, r1
 80051fa:	1b1c      	subs	r4, r3, r4
 80051fc:	63d4      	str	r4, [r2, #60]	; 0x3c
 80051fe:	f7ff fb1f 	bl	8004840 <main+0x904>
                 				 if (forward){
 8005202:	4643      	mov	r3, r8
 8005204:	681b      	ldr	r3, [r3, #0]
                 					TIM1->CCR2 = (TIM1->ARR /2) + (input / 2) + dither_amount;
 8005206:	4a18      	ldr	r2, [pc, #96]	; (8005268 <main+0x132c>)
                 				 if (forward){
 8005208:	2b00      	cmp	r3, #0
 800520a:	d01d      	beq.n	8005248 <main+0x130c>
                 					TIM1->CCR2 = (TIM1->ARR /2) + (input / 2) + dither_amount;
 800520c:	4917      	ldr	r1, [pc, #92]	; (800526c <main+0x1330>)
 800520e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005210:	6809      	ldr	r1, [r1, #0]
 8005212:	085b      	lsrs	r3, r3, #1
 8005214:	1064      	asrs	r4, r4, #1
 8005216:	185b      	adds	r3, r3, r1
 8005218:	191b      	adds	r3, r3, r4
 800521a:	6393      	str	r3, [r2, #56]	; 0x38
                 					TIM1->CCR3 = (TIM1->ARR /2) - (input / 2) - dither_amount;
 800521c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800521e:	085b      	lsrs	r3, r3, #1
 8005220:	1b1b      	subs	r3, r3, r4
 8005222:	1a5b      	subs	r3, r3, r1
 8005224:	63d3      	str	r3, [r2, #60]	; 0x3c
 8005226:	f7ff fb0b 	bl	8004840 <main+0x904>
                 					 TIM1->CCR2 = (TIM1->ARR /2) - (input / 2) + dither_amount;
 800522a:	4910      	ldr	r1, [pc, #64]	; (800526c <main+0x1330>)
 800522c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800522e:	6809      	ldr	r1, [r1, #0]
 8005230:	085b      	lsrs	r3, r3, #1
 8005232:	1064      	asrs	r4, r4, #1
 8005234:	185b      	adds	r3, r3, r1
 8005236:	1b1b      	subs	r3, r3, r4
 8005238:	6393      	str	r3, [r2, #56]	; 0x38
                 					 TIM1->CCR3 = (TIM1->ARR /2) + (input / 2) - dither_amount;
 800523a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800523c:	085b      	lsrs	r3, r3, #1
 800523e:	1a5b      	subs	r3, r3, r1
 8005240:	191c      	adds	r4, r3, r4
 8005242:	63d4      	str	r4, [r2, #60]	; 0x3c
 8005244:	f7ff fafc 	bl	8004840 <main+0x904>
                 					 TIM1->CCR2 = (TIM1->ARR /2) - (input / 2)- dither_amount;
 8005248:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800524a:	4908      	ldr	r1, [pc, #32]	; (800526c <main+0x1330>)
 800524c:	1064      	asrs	r4, r4, #1
 800524e:	6809      	ldr	r1, [r1, #0]
 8005250:	085b      	lsrs	r3, r3, #1
 8005252:	1b1b      	subs	r3, r3, r4
 8005254:	1a5b      	subs	r3, r3, r1
 8005256:	6393      	str	r3, [r2, #56]	; 0x38
                 					 TIM1->CCR3 = (TIM1->ARR /2) + (input / 2) + dither_amount;
 8005258:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800525a:	085b      	lsrs	r3, r3, #1
 800525c:	185b      	adds	r3, r3, r1
 800525e:	191c      	adds	r4, r3, r4
 8005260:	63d4      	str	r4, [r2, #60]	; 0x3c
 8005262:	f7ff faed 	bl	8004840 <main+0x904>
 8005266:	46c0      	nop			; (mov r8, r8)
 8005268:	40012c00 	.word	0x40012c00
 800526c:	2000001c 	.word	0x2000001c

08005270 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8005270:	e7fe      	b.n	8005270 <_Error_Handler>
 8005272:	46c0      	nop			; (mov r8, r8)

08005274 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005274:	2301      	movs	r3, #1

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8005276:	2005      	movs	r0, #5
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005278:	4a0e      	ldr	r2, [pc, #56]	; (80052b4 <HAL_MspInit+0x40>)
{
 800527a:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800527c:	6991      	ldr	r1, [r2, #24]
{
 800527e:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005280:	4319      	orrs	r1, r3
 8005282:	6191      	str	r1, [r2, #24]
 8005284:	6992      	ldr	r2, [r2, #24]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8005286:	2100      	movs	r1, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005288:	4013      	ands	r3, r2
 800528a:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 800528c:	2200      	movs	r2, #0
 800528e:	4240      	negs	r0, r0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005290:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8005292:	f7fb fba7 	bl	80009e4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8005296:	2002      	movs	r0, #2
 8005298:	2200      	movs	r2, #0
 800529a:	2100      	movs	r1, #0
 800529c:	4240      	negs	r0, r0
 800529e:	f7fb fba1 	bl	80009e4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80052a2:	2001      	movs	r0, #1
 80052a4:	2200      	movs	r2, #0
 80052a6:	2100      	movs	r1, #0
 80052a8:	4240      	negs	r0, r0
 80052aa:	f7fb fb9b 	bl	80009e4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80052ae:	b003      	add	sp, #12
 80052b0:	bd00      	pop	{pc}
 80052b2:	46c0      	nop			; (mov r8, r8)
 80052b4:	40021000 	.word	0x40021000

080052b8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80052b8:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 80052ba:	4b20      	ldr	r3, [pc, #128]	; (800533c <HAL_ADC_MspInit+0x84>)
 80052bc:	6802      	ldr	r2, [r0, #0]
{
 80052be:	b087      	sub	sp, #28
 80052c0:	0004      	movs	r4, r0
  if(hadc->Instance==ADC1)
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d001      	beq.n	80052ca <HAL_ADC_MspInit+0x12>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80052c6:	b007      	add	sp, #28
 80052c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 80052ca:	2780      	movs	r7, #128	; 0x80
 80052cc:	4b1c      	ldr	r3, [pc, #112]	; (8005340 <HAL_ADC_MspInit+0x88>)
 80052ce:	00bf      	lsls	r7, r7, #2
 80052d0:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052d2:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_ADC1_CLK_ENABLE();
 80052d4:	433a      	orrs	r2, r7
 80052d6:	619a      	str	r2, [r3, #24]
 80052d8:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052da:	2600      	movs	r6, #0
    __HAL_RCC_ADC1_CLK_ENABLE();
 80052dc:	403b      	ands	r3, r7
 80052de:	9300      	str	r3, [sp, #0]
 80052e0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 80052e2:	2348      	movs	r3, #72	; 0x48
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052e4:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 80052e6:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052e8:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80052ea:	3b45      	subs	r3, #69	; 0x45
 80052ec:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052ee:	9603      	str	r6, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052f0:	f7fb fe4c 	bl	8000f8c <HAL_GPIO_Init>
    hdma_adc.Instance = DMA1_Channel1;
 80052f4:	4d13      	ldr	r5, [pc, #76]	; (8005344 <HAL_ADC_MspInit+0x8c>)
 80052f6:	4b14      	ldr	r3, [pc, #80]	; (8005348 <HAL_ADC_MspInit+0x90>)
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80052f8:	0028      	movs	r0, r5
    hdma_adc.Instance = DMA1_Channel1;
 80052fa:	602b      	str	r3, [r5, #0]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80052fc:	2380      	movs	r3, #128	; 0x80
 80052fe:	60eb      	str	r3, [r5, #12]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005300:	2380      	movs	r3, #128	; 0x80
 8005302:	011b      	lsls	r3, r3, #4
 8005304:	616b      	str	r3, [r5, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8005306:	2320      	movs	r3, #32
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005308:	606e      	str	r6, [r5, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800530a:	60ae      	str	r6, [r5, #8]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800530c:	612f      	str	r7, [r5, #16]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800530e:	61ab      	str	r3, [r5, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8005310:	61ee      	str	r6, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8005312:	f7fb fbd5 	bl	8000ac0 <HAL_DMA_Init>
 8005316:	2800      	cmp	r0, #0
 8005318:	d10a      	bne.n	8005330 <HAL_ADC_MspInit+0x78>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 800531a:	63e5      	str	r5, [r4, #60]	; 0x3c
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 800531c:	2200      	movs	r2, #0
 800531e:	2100      	movs	r1, #0
 8005320:	200c      	movs	r0, #12
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8005322:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8005324:	f7fb fb5e 	bl	80009e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8005328:	200c      	movs	r0, #12
 800532a:	f7fb fb8f 	bl	8000a4c <HAL_NVIC_EnableIRQ>
}
 800532e:	e7ca      	b.n	80052c6 <HAL_ADC_MspInit+0xe>
      _Error_Handler(__FILE__, __LINE__);
 8005330:	216b      	movs	r1, #107	; 0x6b
 8005332:	4806      	ldr	r0, [pc, #24]	; (800534c <HAL_ADC_MspInit+0x94>)
 8005334:	f7ff ff9c 	bl	8005270 <_Error_Handler>
 8005338:	e7ef      	b.n	800531a <HAL_ADC_MspInit+0x62>
 800533a:	46c0      	nop			; (mov r8, r8)
 800533c:	40012400 	.word	0x40012400
 8005340:	40021000 	.word	0x40021000
 8005344:	20000430 	.word	0x20000430
 8005348:	40020008 	.word	0x40020008
 800534c:	080056c8 	.word	0x080056c8

08005350 <HAL_COMP_MspInit>:
  }

}

void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8005350:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcomp->Instance==COMP1)
 8005352:	4b0d      	ldr	r3, [pc, #52]	; (8005388 <HAL_COMP_MspInit+0x38>)
 8005354:	6802      	ldr	r2, [r0, #0]
{
 8005356:	b087      	sub	sp, #28
  if(hcomp->Instance==COMP1)
 8005358:	429a      	cmp	r2, r3
 800535a:	d001      	beq.n	8005360 <HAL_COMP_MspInit+0x10>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 800535c:	b007      	add	sp, #28
 800535e:	bd00      	pop	{pc}
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8005360:	2322      	movs	r3, #34	; 0x22
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005362:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8005364:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005366:	3b1f      	subs	r3, #31
 8005368:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800536a:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800536c:	a901      	add	r1, sp, #4
 800536e:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005370:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005372:	f7fb fe0b 	bl	8000f8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8005376:	2200      	movs	r2, #0
 8005378:	2100      	movs	r1, #0
 800537a:	200c      	movs	r0, #12
 800537c:	f7fb fb32 	bl	80009e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8005380:	200c      	movs	r0, #12
 8005382:	f7fb fb63 	bl	8000a4c <HAL_NVIC_EnableIRQ>
}
 8005386:	e7e9      	b.n	800535c <HAL_COMP_MspInit+0xc>
 8005388:	4001001c 	.word	0x4001001c

0800538c <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800538c:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_base->Instance==TIM1)
 800538e:	6803      	ldr	r3, [r0, #0]
 8005390:	4a3e      	ldr	r2, [pc, #248]	; (800548c <HAL_TIM_Base_MspInit+0x100>)
{
 8005392:	b08a      	sub	sp, #40	; 0x28
 8005394:	0004      	movs	r4, r0
  if(htim_base->Instance==TIM1)
 8005396:	4293      	cmp	r3, r2
 8005398:	d00e      	beq.n	80053b8 <HAL_TIM_Base_MspInit+0x2c>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 800539a:	2280      	movs	r2, #128	; 0x80
 800539c:	05d2      	lsls	r2, r2, #23
 800539e:	4293      	cmp	r3, r2
 80053a0:	d015      	beq.n	80053ce <HAL_TIM_Base_MspInit+0x42>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 80053a2:	4a3b      	ldr	r2, [pc, #236]	; (8005490 <HAL_TIM_Base_MspInit+0x104>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d01c      	beq.n	80053e2 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM15)
 80053a8:	4a3a      	ldr	r2, [pc, #232]	; (8005494 <HAL_TIM_Base_MspInit+0x108>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d036      	beq.n	800541c <HAL_TIM_Base_MspInit+0x90>

  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
  else if(htim_base->Instance==TIM16)
 80053ae:	4a3a      	ldr	r2, [pc, #232]	; (8005498 <HAL_TIM_Base_MspInit+0x10c>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d020      	beq.n	80053f6 <HAL_TIM_Base_MspInit+0x6a>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80053b4:	b00a      	add	sp, #40	; 0x28
 80053b6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 80053b8:	2080      	movs	r0, #128	; 0x80
 80053ba:	4a38      	ldr	r2, [pc, #224]	; (800549c <HAL_TIM_Base_MspInit+0x110>)
 80053bc:	0100      	lsls	r0, r0, #4
 80053be:	6991      	ldr	r1, [r2, #24]
 80053c0:	4301      	orrs	r1, r0
 80053c2:	6191      	str	r1, [r2, #24]
 80053c4:	6993      	ldr	r3, [r2, #24]
 80053c6:	4003      	ands	r3, r0
 80053c8:	9301      	str	r3, [sp, #4]
 80053ca:	9b01      	ldr	r3, [sp, #4]
 80053cc:	e7f2      	b.n	80053b4 <HAL_TIM_Base_MspInit+0x28>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80053ce:	2301      	movs	r3, #1
 80053d0:	4a32      	ldr	r2, [pc, #200]	; (800549c <HAL_TIM_Base_MspInit+0x110>)
 80053d2:	69d1      	ldr	r1, [r2, #28]
 80053d4:	4319      	orrs	r1, r3
 80053d6:	61d1      	str	r1, [r2, #28]
 80053d8:	69d2      	ldr	r2, [r2, #28]
 80053da:	4013      	ands	r3, r2
 80053dc:	9302      	str	r3, [sp, #8]
 80053de:	9b02      	ldr	r3, [sp, #8]
 80053e0:	e7e8      	b.n	80053b4 <HAL_TIM_Base_MspInit+0x28>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80053e2:	2302      	movs	r3, #2
 80053e4:	4a2d      	ldr	r2, [pc, #180]	; (800549c <HAL_TIM_Base_MspInit+0x110>)
 80053e6:	69d1      	ldr	r1, [r2, #28]
 80053e8:	4319      	orrs	r1, r3
 80053ea:	61d1      	str	r1, [r2, #28]
 80053ec:	69d2      	ldr	r2, [r2, #28]
 80053ee:	4013      	ands	r3, r2
 80053f0:	9303      	str	r3, [sp, #12]
 80053f2:	9b03      	ldr	r3, [sp, #12]
 80053f4:	e7de      	b.n	80053b4 <HAL_TIM_Base_MspInit+0x28>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80053f6:	2080      	movs	r0, #128	; 0x80
 80053f8:	4a28      	ldr	r2, [pc, #160]	; (800549c <HAL_TIM_Base_MspInit+0x110>)
 80053fa:	0280      	lsls	r0, r0, #10
 80053fc:	6991      	ldr	r1, [r2, #24]
 80053fe:	4301      	orrs	r1, r0
 8005400:	6191      	str	r1, [r2, #24]
 8005402:	6993      	ldr	r3, [r2, #24]
    HAL_NVIC_SetPriority(TIM16_IRQn, 1, 0);
 8005404:	2101      	movs	r1, #1
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005406:	4003      	ands	r3, r0
 8005408:	9305      	str	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM16_IRQn, 1, 0);
 800540a:	2200      	movs	r2, #0
 800540c:	2015      	movs	r0, #21
    __HAL_RCC_TIM16_CLK_ENABLE();
 800540e:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM16_IRQn, 1, 0);
 8005410:	f7fb fae8 	bl	80009e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8005414:	2015      	movs	r0, #21
 8005416:	f7fb fb19 	bl	8000a4c <HAL_NVIC_EnableIRQ>
}
 800541a:	e7cb      	b.n	80053b4 <HAL_TIM_Base_MspInit+0x28>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800541c:	2080      	movs	r0, #128	; 0x80
 800541e:	4a1f      	ldr	r2, [pc, #124]	; (800549c <HAL_TIM_Base_MspInit+0x110>)
 8005420:	0240      	lsls	r0, r0, #9
 8005422:	6991      	ldr	r1, [r2, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005424:	2600      	movs	r6, #0
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005426:	4301      	orrs	r1, r0
 8005428:	6191      	str	r1, [r2, #24]
 800542a:	6993      	ldr	r3, [r2, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800542c:	a905      	add	r1, sp, #20
    __HAL_RCC_TIM15_CLK_ENABLE();
 800542e:	4003      	ands	r3, r0
 8005430:	9304      	str	r3, [sp, #16]
 8005432:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005434:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005436:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005438:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800543a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800543c:	3b02      	subs	r3, #2
 800543e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005440:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005442:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM15;
 8005444:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005446:	f7fb fda1 	bl	8000f8c <HAL_GPIO_Init>
    hdma_tim15_ch1_up_trig_com.Instance = DMA1_Channel5;
 800544a:	4d15      	ldr	r5, [pc, #84]	; (80054a0 <HAL_TIM_Base_MspInit+0x114>)
 800544c:	4b15      	ldr	r3, [pc, #84]	; (80054a4 <HAL_TIM_Base_MspInit+0x118>)
    if (HAL_DMA_Init(&hdma_tim15_ch1_up_trig_com) != HAL_OK)
 800544e:	0028      	movs	r0, r5
    hdma_tim15_ch1_up_trig_com.Instance = DMA1_Channel5;
 8005450:	602b      	str	r3, [r5, #0]
    hdma_tim15_ch1_up_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 8005452:	2380      	movs	r3, #128	; 0x80
 8005454:	60eb      	str	r3, [r5, #12]
    hdma_tim15_ch1_up_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005456:	3380      	adds	r3, #128	; 0x80
 8005458:	612b      	str	r3, [r5, #16]
    hdma_tim15_ch1_up_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800545a:	2380      	movs	r3, #128	; 0x80
 800545c:	011b      	lsls	r3, r3, #4
 800545e:	616b      	str	r3, [r5, #20]
    hdma_tim15_ch1_up_trig_com.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005460:	2380      	movs	r3, #128	; 0x80
 8005462:	015b      	lsls	r3, r3, #5
    hdma_tim15_ch1_up_trig_com.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005464:	606e      	str	r6, [r5, #4]
    hdma_tim15_ch1_up_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 8005466:	60ae      	str	r6, [r5, #8]
    hdma_tim15_ch1_up_trig_com.Init.Mode = DMA_NORMAL;
 8005468:	61ae      	str	r6, [r5, #24]
    hdma_tim15_ch1_up_trig_com.Init.Priority = DMA_PRIORITY_MEDIUM;
 800546a:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_tim15_ch1_up_trig_com) != HAL_OK)
 800546c:	f7fb fb28 	bl	8000ac0 <HAL_DMA_Init>
 8005470:	2800      	cmp	r0, #0
 8005472:	d004      	beq.n	800547e <HAL_TIM_Base_MspInit+0xf2>
      _Error_Handler(__FILE__, __LINE__);
 8005474:	211e      	movs	r1, #30
 8005476:	480c      	ldr	r0, [pc, #48]	; (80054a8 <HAL_TIM_Base_MspInit+0x11c>)
 8005478:	31ff      	adds	r1, #255	; 0xff
 800547a:	f7ff fef9 	bl	8005270 <_Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim15_ch1_up_trig_com);
 800547e:	6265      	str	r5, [r4, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim15_ch1_up_trig_com);
 8005480:	6225      	str	r5, [r4, #32]
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim15_ch1_up_trig_com);
 8005482:	63a5      	str	r5, [r4, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim15_ch1_up_trig_com);
 8005484:	626c      	str	r4, [r5, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim15_ch1_up_trig_com);
 8005486:	6365      	str	r5, [r4, #52]	; 0x34
 8005488:	e794      	b.n	80053b4 <HAL_TIM_Base_MspInit+0x28>
 800548a:	46c0      	nop			; (mov r8, r8)
 800548c:	40012c00 	.word	0x40012c00
 8005490:	40000400 	.word	0x40000400
 8005494:	40014000 	.word	0x40014000
 8005498:	40014400 	.word	0x40014400
 800549c:	40021000 	.word	0x40021000
 80054a0:	2000035c 	.word	0x2000035c
 80054a4:	40020058 	.word	0x40020058
 80054a8:	080056c8 	.word	0x080056c8

080054ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80054ac:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 80054ae:	4b10      	ldr	r3, [pc, #64]	; (80054f0 <HAL_TIM_MspPostInit+0x44>)
 80054b0:	6802      	ldr	r2, [r0, #0]
{
 80054b2:	b087      	sub	sp, #28
  if(htim->Instance==TIM1)
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d001      	beq.n	80054bc <HAL_TIM_MspPostInit+0x10>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80054b8:	b007      	add	sp, #28
 80054ba:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 80054bc:	23f8      	movs	r3, #248	; 0xf8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054be:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054c0:	2402      	movs	r4, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054c2:	2500      	movs	r5, #0
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 80054c4:	011b      	lsls	r3, r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054c6:	a901      	add	r1, sp, #4
 80054c8:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 80054ca:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054cc:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ce:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054d0:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80054d2:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054d4:	f7fb fd5a 	bl	8000f8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80054d8:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054da:	a901      	add	r1, sp, #4
 80054dc:	4805      	ldr	r0, [pc, #20]	; (80054f4 <HAL_TIM_MspPostInit+0x48>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80054de:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054e0:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054e2:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054e4:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80054e6:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054e8:	f7fb fd50 	bl	8000f8c <HAL_GPIO_Init>
}
 80054ec:	e7e4      	b.n	80054b8 <HAL_TIM_MspPostInit+0xc>
 80054ee:	46c0      	nop			; (mov r8, r8)
 80054f0:	40012c00 	.word	0x40012c00
 80054f4:	48000400 	.word	0x48000400

080054f8 <NMI_Handler>:
 80054f8:	4770      	bx	lr
 80054fa:	46c0      	nop			; (mov r8, r8)

080054fc <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80054fc:	e7fe      	b.n	80054fc <HardFault_Handler>
 80054fe:	46c0      	nop			; (mov r8, r8)

08005500 <SVC_Handler>:
 8005500:	4770      	bx	lr
 8005502:	46c0      	nop			; (mov r8, r8)

08005504 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005504:	4770      	bx	lr
 8005506:	46c0      	nop			; (mov r8, r8)

08005508 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8005508:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800550a:	f7fa ff95 	bl	8000438 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800550e:	f7fb fad3 	bl	8000ab8 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005512:	bd10      	pop	{r4, pc}

08005514 <DMA1_Channel1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt.
*/
void DMA1_Channel1_IRQHandler(void)
{
 8005514:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8005516:	4802      	ldr	r0, [pc, #8]	; (8005520 <DMA1_Channel1_IRQHandler+0xc>)
 8005518:	f7fb fb46 	bl	8000ba8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800551c:	bd10      	pop	{r4, pc}
 800551e:	46c0      	nop			; (mov r8, r8)
 8005520:	20000430 	.word	0x20000430

08005524 <DMA1_Channel4_5_IRQHandler>:

/**
* @brief This function handles DMA1 channel 4 and 5 interrupts.
*/
void DMA1_Channel4_5_IRQHandler(void)
{
 8005524:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim15_ch1_up_trig_com);
 8005526:	4804      	ldr	r0, [pc, #16]	; (8005538 <DMA1_Channel4_5_IRQHandler+0x14>)
 8005528:	f7fb fb3e 	bl	8000ba8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */
  transferComplete();
 800552c:	f7fe fbfe 	bl	8003d2c <transferComplete>
  TIM16->CNT = 0;
 8005530:	2200      	movs	r2, #0
 8005532:	4b02      	ldr	r3, [pc, #8]	; (800553c <DMA1_Channel4_5_IRQHandler+0x18>)
 8005534:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8005536:	bd10      	pop	{r4, pc}
 8005538:	2000035c 	.word	0x2000035c
 800553c:	40014400 	.word	0x40014400

08005540 <ADC1_COMP_IRQHandler>:

/**
* @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
*/
void ADC1_COMP_IRQHandler(void)
{
 8005540:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */
//	HAL_COMP_IRQHandler(&hcomp1);
  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8005542:	4803      	ldr	r0, [pc, #12]	; (8005550 <ADC1_COMP_IRQHandler+0x10>)
 8005544:	f7fb f844 	bl	80005d0 <HAL_ADC_IRQHandler>
  HAL_COMP_IRQHandler(&hcomp1);
 8005548:	4802      	ldr	r0, [pc, #8]	; (8005554 <ADC1_COMP_IRQHandler+0x14>)
 800554a:	f7fb fa35 	bl	80009b8 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 800554e:	bd10      	pop	{r4, pc}
 8005550:	20000474 	.word	0x20000474
 8005554:	200001e4 	.word	0x200001e4

08005558 <TIM16_IRQHandler>:

/**
* @brief This function handles TIM16 global interrupt.
*/
void TIM16_IRQHandler(void)
{
 8005558:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800555a:	4802      	ldr	r0, [pc, #8]	; (8005564 <TIM16_IRQHandler+0xc>)
 800555c:	f7fc ff80 	bl	8002460 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8005560:	bd10      	pop	{r4, pc}
 8005562:	46c0      	nop			; (mov r8, r8)
 8005564:	200004c0 	.word	0x200004c0

08005568 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8005568:	2101      	movs	r1, #1
 800556a:	4b11      	ldr	r3, [pc, #68]	; (80055b0 <SystemInit+0x48>)

#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 800556c:	4811      	ldr	r0, [pc, #68]	; (80055b4 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	430a      	orrs	r2, r1
 8005572:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 8005574:	685a      	ldr	r2, [r3, #4]
 8005576:	4002      	ands	r2, r0
 8005578:	605a      	str	r2, [r3, #4]
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	480e      	ldr	r0, [pc, #56]	; (80055b8 <SystemInit+0x50>)
 800557e:	4002      	ands	r2, r0
 8005580:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	480d      	ldr	r0, [pc, #52]	; (80055bc <SystemInit+0x54>)
 8005586:	4002      	ands	r2, r0
 8005588:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800558a:	685a      	ldr	r2, [r3, #4]
 800558c:	480c      	ldr	r0, [pc, #48]	; (80055c0 <SystemInit+0x58>)
 800558e:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8005590:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8005592:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8005594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005596:	4382      	bics	r2, r0
 8005598:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
#elif defined (STM32F051x8) || defined (STM32F058xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
 800559a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800559c:	4809      	ldr	r0, [pc, #36]	; (80055c4 <SystemInit+0x5c>)
 800559e:	4002      	ands	r2, r0
 80055a0:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80055a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055a4:	438a      	bics	r2, r1
 80055a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80055a8:	2200      	movs	r2, #0
 80055aa:	609a      	str	r2, [r3, #8]

}
 80055ac:	4770      	bx	lr
 80055ae:	46c0      	nop			; (mov r8, r8)
 80055b0:	40021000 	.word	0x40021000
 80055b4:	f8ffb80c 	.word	0xf8ffb80c
 80055b8:	fef6ffff 	.word	0xfef6ffff
 80055bc:	fffbffff 	.word	0xfffbffff
 80055c0:	ffc0ffff 	.word	0xffc0ffff
 80055c4:	fffffeac 	.word	0xfffffeac

080055c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80055c8:	480d      	ldr	r0, [pc, #52]	; (8005600 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80055ca:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80055cc:	480d      	ldr	r0, [pc, #52]	; (8005604 <LoopForever+0x6>)
  ldr r1, =_edata
 80055ce:	490e      	ldr	r1, [pc, #56]	; (8005608 <LoopForever+0xa>)
  ldr r2, =_sidata
 80055d0:	4a0e      	ldr	r2, [pc, #56]	; (800560c <LoopForever+0xe>)
  movs r3, #0
 80055d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80055d4:	e002      	b.n	80055dc <LoopCopyDataInit>

080055d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80055d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80055d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80055da:	3304      	adds	r3, #4

080055dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80055dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80055de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80055e0:	d3f9      	bcc.n	80055d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80055e2:	4a0b      	ldr	r2, [pc, #44]	; (8005610 <LoopForever+0x12>)
  ldr r4, =_ebss
 80055e4:	4c0b      	ldr	r4, [pc, #44]	; (8005614 <LoopForever+0x16>)
  movs r3, #0
 80055e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80055e8:	e001      	b.n	80055ee <LoopFillZerobss>

080055ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80055ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80055ec:	3204      	adds	r2, #4

080055ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80055ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80055f0:	d3fb      	bcc.n	80055ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80055f2:	f7ff ffb9 	bl	8005568 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80055f6:	f000 f811 	bl	800561c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80055fa:	f7fe fc9f 	bl	8003f3c <main>

080055fe <LoopForever>:

LoopForever:
    b LoopForever
 80055fe:	e7fe      	b.n	80055fe <LoopForever>
  ldr   r0, =_estack
 8005600:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8005604:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005608:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800560c:	080056fc 	.word	0x080056fc
  ldr r2, =_sbss
 8005610:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8005614:	20000500 	.word	0x20000500

08005618 <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005618:	e7fe      	b.n	8005618 <CEC_CAN_IRQHandler>
	...

0800561c <__libc_init_array>:
 800561c:	b570      	push	{r4, r5, r6, lr}
 800561e:	2600      	movs	r6, #0
 8005620:	4d0c      	ldr	r5, [pc, #48]	; (8005654 <__libc_init_array+0x38>)
 8005622:	4c0d      	ldr	r4, [pc, #52]	; (8005658 <__libc_init_array+0x3c>)
 8005624:	1b64      	subs	r4, r4, r5
 8005626:	10a4      	asrs	r4, r4, #2
 8005628:	42a6      	cmp	r6, r4
 800562a:	d109      	bne.n	8005640 <__libc_init_array+0x24>
 800562c:	2600      	movs	r6, #0
 800562e:	f000 f821 	bl	8005674 <_init>
 8005632:	4d0a      	ldr	r5, [pc, #40]	; (800565c <__libc_init_array+0x40>)
 8005634:	4c0a      	ldr	r4, [pc, #40]	; (8005660 <__libc_init_array+0x44>)
 8005636:	1b64      	subs	r4, r4, r5
 8005638:	10a4      	asrs	r4, r4, #2
 800563a:	42a6      	cmp	r6, r4
 800563c:	d105      	bne.n	800564a <__libc_init_array+0x2e>
 800563e:	bd70      	pop	{r4, r5, r6, pc}
 8005640:	00b3      	lsls	r3, r6, #2
 8005642:	58eb      	ldr	r3, [r5, r3]
 8005644:	4798      	blx	r3
 8005646:	3601      	adds	r6, #1
 8005648:	e7ee      	b.n	8005628 <__libc_init_array+0xc>
 800564a:	00b3      	lsls	r3, r6, #2
 800564c:	58eb      	ldr	r3, [r5, r3]
 800564e:	4798      	blx	r3
 8005650:	3601      	adds	r6, #1
 8005652:	e7f2      	b.n	800563a <__libc_init_array+0x1e>
 8005654:	080056f4 	.word	0x080056f4
 8005658:	080056f4 	.word	0x080056f4
 800565c:	080056f4 	.word	0x080056f4
 8005660:	080056f8 	.word	0x080056f8

08005664 <memset>:
 8005664:	0003      	movs	r3, r0
 8005666:	1882      	adds	r2, r0, r2
 8005668:	4293      	cmp	r3, r2
 800566a:	d100      	bne.n	800566e <memset+0xa>
 800566c:	4770      	bx	lr
 800566e:	7019      	strb	r1, [r3, #0]
 8005670:	3301      	adds	r3, #1
 8005672:	e7f9      	b.n	8005668 <memset+0x4>

08005674 <_init>:
 8005674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005676:	46c0      	nop			; (mov r8, r8)
 8005678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800567a:	bc08      	pop	{r3}
 800567c:	469e      	mov	lr, r3
 800567e:	4770      	bx	lr

08005680 <_fini>:
 8005680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005682:	46c0      	nop			; (mov r8, r8)
 8005684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005686:	bc08      	pop	{r3}
 8005688:	469e      	mov	lr, r3
 800568a:	4770      	bx	lr
