
f051bldc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ef4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004fb4  08004fb4  00014fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800501c  0800501c  0001501c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005020  08005020  00015020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000058  20000000  08005024  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000047c  20000058  0800507c  00020058  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  200004d4  0800507c  000204d4  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001ac43  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003674  00000000  00000000  0003acc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000e2ee  00000000  00000000  0003e337  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000a68  00000000  00000000  0004c628  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000026c0  00000000  00000000  0004d090  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007c19  00000000  00000000  0004f750  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000406f  00000000  00000000  00057369  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0005b3d8  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001e00  00000000  00000000  0005b454  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000058 	.word	0x20000058
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004f9c 	.word	0x08004f9c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000005c 	.word	0x2000005c
 8000104:	08004f9c 	.word	0x08004f9c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003f4:	b510      	push	{r4, lr}
 80003f6:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 80003f8:	f001 f9b0 	bl	800175c <HAL_RCC_GetHCLKFreq>
 80003fc:	21fa      	movs	r1, #250	; 0xfa
 80003fe:	0089      	lsls	r1, r1, #2
 8000400:	f7ff fe82 	bl	8000108 <__udivsi3>
 8000404:	f000 faea 	bl	80009dc <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000408:	2001      	movs	r0, #1
 800040a:	2200      	movs	r2, #0
 800040c:	0021      	movs	r1, r4
 800040e:	4240      	negs	r0, r0
 8000410:	f000 faa6 	bl	8000960 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000414:	2000      	movs	r0, #0
 8000416:	bd10      	pop	{r4, pc}

08000418 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000418:	2110      	movs	r1, #16
 800041a:	4a06      	ldr	r2, [pc, #24]	; (8000434 <HAL_Init+0x1c>)
{
 800041c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800041e:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000420:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000422:	430b      	orrs	r3, r1
 8000424:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000426:	f7ff ffe5 	bl	80003f4 <HAL_InitTick>
  HAL_MspInit();
 800042a:	f004 fbb7 	bl	8004b9c <HAL_MspInit>
}
 800042e:	2000      	movs	r0, #0
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			; (mov r8, r8)
 8000434:	40022000 	.word	0x40022000

08000438 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000438:	4a02      	ldr	r2, [pc, #8]	; (8000444 <HAL_IncTick+0xc>)
 800043a:	6813      	ldr	r3, [r2, #0]
 800043c:	3301      	adds	r3, #1
 800043e:	6013      	str	r3, [r2, #0]
}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	20000124 	.word	0x20000124

08000448 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000448:	4b01      	ldr	r3, [pc, #4]	; (8000450 <HAL_GetTick+0x8>)
 800044a:	6818      	ldr	r0, [r3, #0]
}
 800044c:	4770      	bx	lr
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	20000124 	.word	0x20000124

08000454 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000454:	b530      	push	{r4, r5, lr}
 8000456:	b083      	sub	sp, #12
 8000458:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 800045a:	f7ff fff5 	bl	8000448 <HAL_GetTick>
  uint32_t wait = Delay;
 800045e:	9c01      	ldr	r4, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000460:	0005      	movs	r5, r0
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
     wait++;
 8000462:	1c63      	adds	r3, r4, #1
 8000464:	1e5a      	subs	r2, r3, #1
 8000466:	4193      	sbcs	r3, r2
 8000468:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800046a:	f7ff ffed 	bl	8000448 <HAL_GetTick>
 800046e:	1b40      	subs	r0, r0, r5
 8000470:	42a0      	cmp	r0, r4
 8000472:	d3fa      	bcc.n	800046a <HAL_Delay+0x16>
  {
  }
}
 8000474:	b003      	add	sp, #12
 8000476:	bd30      	pop	{r4, r5, pc}

08000478 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800047a:	1e04      	subs	r4, r0, #0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0U;

  /* Check ADC handle */
  if(hadc == NULL)
 800047c:	d100      	bne.n	8000480 <HAL_ADC_Init+0x8>
 800047e:	e080      	b.n	8000582 <HAL_ADC_Init+0x10a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000480:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000482:	2b00      	cmp	r3, #0
 8000484:	d067      	beq.n	8000556 <HAL_ADC_Init+0xde>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000486:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000488:	06db      	lsls	r3, r3, #27
 800048a:	d45e      	bmi.n	800054a <HAL_ADC_Init+0xd2>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800048c:	2004      	movs	r0, #4
 800048e:	6823      	ldr	r3, [r4, #0]
 8000490:	689a      	ldr	r2, [r3, #8]
 8000492:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000494:	d159      	bne.n	800054a <HAL_ADC_Init+0xd2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000496:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000498:	4948      	ldr	r1, [pc, #288]	; (80005bc <HAL_ADC_Init+0x144>)
 800049a:	400a      	ands	r2, r1
 800049c:	3106      	adds	r1, #6
 800049e:	31ff      	adds	r1, #255	; 0xff
 80004a0:	430a      	orrs	r2, r1
 80004a2:	6462      	str	r2, [r4, #68]	; 0x44
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80004a4:	2203      	movs	r2, #3
 80004a6:	6899      	ldr	r1, [r3, #8]
 80004a8:	400a      	ands	r2, r1
 80004aa:	2a01      	cmp	r2, #1
 80004ac:	d059      	beq.n	8000562 <HAL_ADC_Init+0xea>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80004ae:	2118      	movs	r1, #24
 80004b0:	68da      	ldr	r2, [r3, #12]
 80004b2:	438a      	bics	r2, r1
 80004b4:	68a1      	ldr	r1, [r4, #8]
 80004b6:	430a      	orrs	r2, r1
 80004b8:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80004ba:	691a      	ldr	r2, [r3, #16]
 80004bc:	6861      	ldr	r1, [r4, #4]
 80004be:	0092      	lsls	r2, r2, #2
 80004c0:	0892      	lsrs	r2, r2, #2
 80004c2:	430a      	orrs	r2, r1
 80004c4:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80004c6:	68da      	ldr	r2, [r3, #12]
 80004c8:	493d      	ldr	r1, [pc, #244]	; (80005c0 <HAL_ADC_Init+0x148>)
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80004ca:	6a26      	ldr	r6, [r4, #32]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80004cc:	400a      	ands	r2, r1
 80004ce:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80004d0:	69a2      	ldr	r2, [r4, #24]
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80004d2:	0377      	lsls	r7, r6, #13
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80004d4:	0391      	lsls	r1, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 80004d6:	69e2      	ldr	r2, [r4, #28]
 80004d8:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80004da:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 80004dc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80004de:	3a01      	subs	r2, #1
 80004e0:	1e55      	subs	r5, r2, #1
 80004e2:	41aa      	sbcs	r2, r5
 80004e4:	0315      	lsls	r5, r2, #12
 80004e6:	68e2      	ldr	r2, [r4, #12]
 80004e8:	4311      	orrs	r1, r2
                 hadc->Init.DataAlign                                   |
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80004ea:	6922      	ldr	r2, [r4, #16]
 80004ec:	4339      	orrs	r1, r7
 80004ee:	2a02      	cmp	r2, #2
 80004f0:	d059      	beq.n	80005a6 <HAL_ADC_Init+0x12e>
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 80004f2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80004f4:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80004f6:	430a      	orrs	r2, r1
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80004f8:	6a61      	ldr	r1, [r4, #36]	; 0x24
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80004fa:	432a      	orrs	r2, r5
 80004fc:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80004fe:	2901      	cmp	r1, #1
 8000500:	d04b      	beq.n	800059a <HAL_ADC_Init+0x122>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000502:	20c2      	movs	r0, #194	; 0xc2
 8000504:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000506:	30ff      	adds	r0, #255	; 0xff
 8000508:	4281      	cmp	r1, r0
 800050a:	d002      	beq.n	8000512 <HAL_ADC_Init+0x9a>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800050c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800050e:	4301      	orrs	r1, r0
 8000510:	430a      	orrs	r2, r1
                    hadc->Init.ExternalTrigConvEdge );
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000512:	68d9      	ldr	r1, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000514:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000516:	4311      	orrs	r1, r2
 8000518:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800051a:	2180      	movs	r1, #128	; 0x80
 800051c:	0549      	lsls	r1, r1, #21
 800051e:	428d      	cmp	r5, r1
 8000520:	d026      	beq.n	8000570 <HAL_ADC_Init+0xf8>
 8000522:	1e69      	subs	r1, r5, #1
 8000524:	2906      	cmp	r1, #6
 8000526:	d923      	bls.n	8000570 <HAL_ADC_Init+0xf8>
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000528:	68db      	ldr	r3, [r3, #12]
 800052a:	4926      	ldr	r1, [pc, #152]	; (80005c4 <HAL_ADC_Init+0x14c>)
 800052c:	400b      	ands	r3, r1
 800052e:	429a      	cmp	r2, r3
 8000530:	d029      	beq.n	8000586 <HAL_ADC_Init+0x10e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000532:	2212      	movs	r2, #18
 8000534:	6c63      	ldr	r3, [r4, #68]	; 0x44
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
      
      tmp_hal_status = HAL_ERROR;
 8000536:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8000538:	4393      	bics	r3, r2
 800053a:	3a02      	subs	r2, #2
 800053c:	4313      	orrs	r3, r2
 800053e:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000540:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000542:	3a0f      	subs	r2, #15
 8000544:	4313      	orrs	r3, r2
 8000546:	64a3      	str	r3, [r4, #72]	; 0x48
 8000548:	e004      	b.n	8000554 <HAL_ADC_Init+0xdc>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800054a:	2210      	movs	r2, #16
        
    tmp_hal_status = HAL_ERROR;
 800054c:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800054e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000550:	4313      	orrs	r3, r2
 8000552:	6463      	str	r3, [r4, #68]	; 0x44
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8000554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hadc->Lock = HAL_UNLOCKED;
 8000556:	2240      	movs	r2, #64	; 0x40
    ADC_CLEAR_ERRORCODE(hadc);
 8000558:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 800055a:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 800055c:	f004 fb40 	bl	8004be0 <HAL_ADC_MspInit>
 8000560:	e791      	b.n	8000486 <HAL_ADC_Init+0xe>
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000562:	6819      	ldr	r1, [r3, #0]
 8000564:	420a      	tst	r2, r1
 8000566:	d1ae      	bne.n	80004c6 <HAL_ADC_Init+0x4e>
 8000568:	68da      	ldr	r2, [r3, #12]
 800056a:	0412      	lsls	r2, r2, #16
 800056c:	d59f      	bpl.n	80004ae <HAL_ADC_Init+0x36>
 800056e:	e7aa      	b.n	80004c6 <HAL_ADC_Init+0x4e>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000570:	2107      	movs	r1, #7
 8000572:	6958      	ldr	r0, [r3, #20]
 8000574:	4388      	bics	r0, r1
 8000576:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000578:	6958      	ldr	r0, [r3, #20]
 800057a:	4029      	ands	r1, r5
 800057c:	4301      	orrs	r1, r0
 800057e:	6159      	str	r1, [r3, #20]
 8000580:	e7d2      	b.n	8000528 <HAL_ADC_Init+0xb0>
    return HAL_ERROR;
 8000582:	2001      	movs	r0, #1
 8000584:	e7e6      	b.n	8000554 <HAL_ADC_Init+0xdc>
      ADC_CLEAR_ERRORCODE(hadc);
 8000586:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 8000588:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 800058a:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 800058c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800058e:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8000590:	4393      	bics	r3, r2
 8000592:	3a02      	subs	r2, #2
 8000594:	4313      	orrs	r3, r2
 8000596:	6463      	str	r3, [r4, #68]	; 0x44
 8000598:	e7dc      	b.n	8000554 <HAL_ADC_Init+0xdc>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800059a:	2e00      	cmp	r6, #0
 800059c:	d105      	bne.n	80005aa <HAL_ADC_Init+0x132>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800059e:	2180      	movs	r1, #128	; 0x80
 80005a0:	0249      	lsls	r1, r1, #9
 80005a2:	430a      	orrs	r2, r1
 80005a4:	e7ad      	b.n	8000502 <HAL_ADC_Init+0x8a>
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80005a6:	2004      	movs	r0, #4
 80005a8:	e7a3      	b.n	80004f2 <HAL_ADC_Init+0x7a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80005aa:	2520      	movs	r5, #32
 80005ac:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80005ae:	4328      	orrs	r0, r5
 80005b0:	6460      	str	r0, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80005b2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80005b4:	4301      	orrs	r1, r0
 80005b6:	64a1      	str	r1, [r4, #72]	; 0x48
 80005b8:	e7a3      	b.n	8000502 <HAL_ADC_Init+0x8a>
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	fffffefd 	.word	0xfffffefd
 80005c0:	fffe0219 	.word	0xfffe0219
 80005c4:	833fffe7 	.word	0x833fffe7

080005c8 <HAL_ADC_LevelOutOfWindowCallback>:
 80005c8:	4770      	bx	lr
 80005ca:	46c0      	nop			; (mov r8, r8)

080005cc <HAL_ADC_ErrorCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80005cc:	4770      	bx	lr
 80005ce:	46c0      	nop			; (mov r8, r8)

080005d0 <HAL_ADC_IRQHandler>:
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80005d0:	2204      	movs	r2, #4
 80005d2:	6803      	ldr	r3, [r0, #0]
{
 80005d4:	b570      	push	{r4, r5, r6, lr}
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80005d6:	6819      	ldr	r1, [r3, #0]
{
 80005d8:	0004      	movs	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80005da:	420a      	tst	r2, r1
 80005dc:	d04a      	beq.n	8000674 <HAL_ADC_IRQHandler+0xa4>
 80005de:	6859      	ldr	r1, [r3, #4]
 80005e0:	420a      	tst	r2, r1
 80005e2:	d047      	beq.n	8000674 <HAL_ADC_IRQHandler+0xa4>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80005e4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80005e6:	06d2      	lsls	r2, r2, #27
 80005e8:	d404      	bmi.n	80005f4 <HAL_ADC_IRQHandler+0x24>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80005ea:	2280      	movs	r2, #128	; 0x80
 80005ec:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80005ee:	0092      	lsls	r2, r2, #2
 80005f0:	430a      	orrs	r2, r1
 80005f2:	6462      	str	r2, [r4, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80005f4:	22c0      	movs	r2, #192	; 0xc0
 80005f6:	68d9      	ldr	r1, [r3, #12]
 80005f8:	0112      	lsls	r2, r2, #4
 80005fa:	4211      	tst	r1, r2
 80005fc:	d113      	bne.n	8000626 <HAL_ADC_IRQHandler+0x56>
 80005fe:	6a22      	ldr	r2, [r4, #32]
 8000600:	2a00      	cmp	r2, #0
 8000602:	d110      	bne.n	8000626 <HAL_ADC_IRQHandler+0x56>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	0712      	lsls	r2, r2, #28
 8000608:	d50d      	bpl.n	8000626 <HAL_ADC_IRQHandler+0x56>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800060a:	689a      	ldr	r2, [r3, #8]
 800060c:	0752      	lsls	r2, r2, #29
 800060e:	d444      	bmi.n	800069a <HAL_ADC_IRQHandler+0xca>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000610:	210c      	movs	r1, #12
 8000612:	685a      	ldr	r2, [r3, #4]
 8000614:	438a      	bics	r2, r1
 8000616:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8000618:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800061a:	4a24      	ldr	r2, [pc, #144]	; (80006ac <HAL_ADC_IRQHandler+0xdc>)
 800061c:	4013      	ands	r3, r2
 800061e:	3204      	adds	r2, #4
 8000620:	32ff      	adds	r2, #255	; 0xff
 8000622:	4313      	orrs	r3, r2
 8000624:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ConvCpltCallback(hadc);
 8000626:	0020      	movs	r0, r4
 8000628:	f003 fa3e 	bl	8003aa8 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800062c:	220c      	movs	r2, #12
 800062e:	6823      	ldr	r3, [r4, #0]
 8000630:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000632:	2580      	movs	r5, #128	; 0x80
 8000634:	681a      	ldr	r2, [r3, #0]
 8000636:	4215      	tst	r5, r2
 8000638:	d002      	beq.n	8000640 <HAL_ADC_IRQHandler+0x70>
 800063a:	685a      	ldr	r2, [r3, #4]
 800063c:	4215      	tst	r5, r2
 800063e:	d121      	bne.n	8000684 <HAL_ADC_IRQHandler+0xb4>
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8000640:	2210      	movs	r2, #16
 8000642:	6819      	ldr	r1, [r3, #0]
 8000644:	420a      	tst	r2, r1
 8000646:	d014      	beq.n	8000672 <HAL_ADC_IRQHandler+0xa2>
 8000648:	6859      	ldr	r1, [r3, #4]
 800064a:	420a      	tst	r2, r1
 800064c:	d011      	beq.n	8000672 <HAL_ADC_IRQHandler+0xa2>
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800064e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000650:	2a01      	cmp	r2, #1
 8000652:	d002      	beq.n	800065a <HAL_ADC_IRQHandler+0x8a>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8000654:	68da      	ldr	r2, [r3, #12]
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8000656:	07d2      	lsls	r2, r2, #31
 8000658:	d509      	bpl.n	800066e <HAL_ADC_IRQHandler+0x9e>
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800065a:	2102      	movs	r1, #2
 800065c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
      HAL_ADC_ErrorCallback(hadc);
 800065e:	0020      	movs	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000660:	430a      	orrs	r2, r1
 8000662:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000664:	2210      	movs	r2, #16
 8000666:	601a      	str	r2, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 8000668:	f7ff ffb0 	bl	80005cc <HAL_ADC_ErrorCallback>
 800066c:	6823      	ldr	r3, [r4, #0]
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800066e:	2210      	movs	r2, #16
 8000670:	601a      	str	r2, [r3, #0]
}
 8000672:	bd70      	pop	{r4, r5, r6, pc}
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000674:	2208      	movs	r2, #8
 8000676:	6819      	ldr	r1, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000678:	420a      	tst	r2, r1
 800067a:	d0da      	beq.n	8000632 <HAL_ADC_IRQHandler+0x62>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800067c:	6859      	ldr	r1, [r3, #4]
 800067e:	420a      	tst	r2, r1
 8000680:	d0d7      	beq.n	8000632 <HAL_ADC_IRQHandler+0x62>
 8000682:	e7af      	b.n	80005e4 <HAL_ADC_IRQHandler+0x14>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000684:	2380      	movs	r3, #128	; 0x80
 8000686:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000688:	025b      	lsls	r3, r3, #9
 800068a:	4313      	orrs	r3, r2
 800068c:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800068e:	0020      	movs	r0, r4
 8000690:	f7ff ff9a 	bl	80005c8 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000694:	6823      	ldr	r3, [r4, #0]
 8000696:	601d      	str	r5, [r3, #0]
 8000698:	e7d2      	b.n	8000640 <HAL_ADC_IRQHandler+0x70>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800069a:	2220      	movs	r2, #32
 800069c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800069e:	4313      	orrs	r3, r2
 80006a0:	6463      	str	r3, [r4, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80006a2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80006a4:	3a1f      	subs	r2, #31
 80006a6:	4313      	orrs	r3, r2
 80006a8:	64a3      	str	r3, [r4, #72]	; 0x48
 80006aa:	e7bc      	b.n	8000626 <HAL_ADC_IRQHandler+0x56>
 80006ac:	fffffefe 	.word	0xfffffefe

080006b0 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80006b0:	2300      	movs	r3, #0
{
 80006b2:	b570      	push	{r4, r5, r6, lr}
 80006b4:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 80006b6:	9301      	str	r3, [sp, #4]
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80006b8:	3340      	adds	r3, #64	; 0x40
 80006ba:	5cc2      	ldrb	r2, [r0, r3]
{
 80006bc:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80006be:	2002      	movs	r0, #2
 80006c0:	2a01      	cmp	r2, #1
 80006c2:	d03c      	beq.n	800073e <HAL_ADC_ConfigChannel+0x8e>
 80006c4:	2201      	movs	r2, #1
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80006c6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  __HAL_LOCK(hadc);
 80006c8:	54e2      	strb	r2, [r4, r3]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80006ca:	6823      	ldr	r3, [r4, #0]
 80006cc:	689d      	ldr	r5, [r3, #8]
 80006ce:	076d      	lsls	r5, r5, #29
 80006d0:	d42d      	bmi.n	800072e <HAL_ADC_ConfigChannel+0x7e>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80006d2:	4d35      	ldr	r5, [pc, #212]	; (80007a8 <HAL_ADC_ConfigChannel+0xf8>)
 80006d4:	684e      	ldr	r6, [r1, #4]
 80006d6:	42ae      	cmp	r6, r5
 80006d8:	d033      	beq.n	8000742 <HAL_ADC_ConfigChannel+0x92>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80006da:	680d      	ldr	r5, [r1, #0]
 80006dc:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 80006de:	40aa      	lsls	r2, r5
 80006e0:	4332      	orrs	r2, r6
 80006e2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80006e4:	2280      	movs	r2, #128	; 0x80
 80006e6:	0552      	lsls	r2, r2, #21
 80006e8:	4290      	cmp	r0, r2
 80006ea:	d00f      	beq.n	800070c <HAL_ADC_ConfigChannel+0x5c>
 80006ec:	3801      	subs	r0, #1
 80006ee:	2806      	cmp	r0, #6
 80006f0:	d90c      	bls.n	800070c <HAL_ADC_ConfigChannel+0x5c>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80006f2:	2207      	movs	r2, #7
 80006f4:	6888      	ldr	r0, [r1, #8]
 80006f6:	6959      	ldr	r1, [r3, #20]
 80006f8:	4011      	ands	r1, r2
 80006fa:	4288      	cmp	r0, r1
 80006fc:	d006      	beq.n	800070c <HAL_ADC_ConfigChannel+0x5c>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80006fe:	6959      	ldr	r1, [r3, #20]
 8000700:	4391      	bics	r1, r2
 8000702:	6159      	str	r1, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000704:	6959      	ldr	r1, [r3, #20]
 8000706:	4002      	ands	r2, r0
 8000708:	430a      	orrs	r2, r1
 800070a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800070c:	002b      	movs	r3, r5
 800070e:	3b10      	subs	r3, #16
 8000710:	2b02      	cmp	r3, #2
 8000712:	d829      	bhi.n	8000768 <HAL_ADC_ConfigChannel+0xb8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000714:	4a25      	ldr	r2, [pc, #148]	; (80007ac <HAL_ADC_ConfigChannel+0xfc>)
 8000716:	6813      	ldr	r3, [r2, #0]
 8000718:	2d10      	cmp	r5, #16
 800071a:	d027      	beq.n	800076c <HAL_ADC_ConfigChannel+0xbc>
 800071c:	2280      	movs	r2, #128	; 0x80
 800071e:	2d11      	cmp	r5, #17
 8000720:	d03c      	beq.n	800079c <HAL_ADC_ConfigChannel+0xec>
 8000722:	0452      	lsls	r2, r2, #17
 8000724:	4313      	orrs	r3, r2
 8000726:	4a21      	ldr	r2, [pc, #132]	; (80007ac <HAL_ADC_ConfigChannel+0xfc>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000728:	2000      	movs	r0, #0
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800072a:	6013      	str	r3, [r2, #0]
 800072c:	e004      	b.n	8000738 <HAL_ADC_ConfigChannel+0x88>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800072e:	2220      	movs	r2, #32
    
    tmp_hal_status = HAL_ERROR;
 8000730:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000732:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000734:	4313      	orrs	r3, r2
 8000736:	6463      	str	r3, [r4, #68]	; 0x44
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000738:	2200      	movs	r2, #0
 800073a:	2340      	movs	r3, #64	; 0x40
 800073c:	54e2      	strb	r2, [r4, r3]
  
  /* Return function status */
  return tmp_hal_status;
}
 800073e:	b002      	add	sp, #8
 8000740:	bd70      	pop	{r4, r5, r6, pc}
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000742:	6809      	ldr	r1, [r1, #0]
 8000744:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000746:	408a      	lsls	r2, r1
 8000748:	4390      	bics	r0, r2
 800074a:	6298      	str	r0, [r3, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800074c:	000b      	movs	r3, r1
 800074e:	3b10      	subs	r3, #16
 8000750:	2b02      	cmp	r3, #2
 8000752:	d809      	bhi.n	8000768 <HAL_ADC_ConfigChannel+0xb8>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000754:	4b15      	ldr	r3, [pc, #84]	; (80007ac <HAL_ADC_ConfigChannel+0xfc>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2910      	cmp	r1, #16
 800075a:	d021      	beq.n	80007a0 <HAL_ADC_ConfigChannel+0xf0>
 800075c:	2911      	cmp	r1, #17
 800075e:	d021      	beq.n	80007a4 <HAL_ADC_ConfigChannel+0xf4>
 8000760:	4a13      	ldr	r2, [pc, #76]	; (80007b0 <HAL_ADC_ConfigChannel+0x100>)
 8000762:	4013      	ands	r3, r2
 8000764:	4a11      	ldr	r2, [pc, #68]	; (80007ac <HAL_ADC_ConfigChannel+0xfc>)
 8000766:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000768:	2000      	movs	r0, #0
 800076a:	e7e5      	b.n	8000738 <HAL_ADC_ConfigChannel+0x88>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800076c:	2180      	movs	r1, #128	; 0x80
 800076e:	0409      	lsls	r1, r1, #16
 8000770:	430b      	orrs	r3, r1
 8000772:	6013      	str	r3, [r2, #0]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000774:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <HAL_ADC_ConfigChannel+0x104>)
 8000776:	4910      	ldr	r1, [pc, #64]	; (80007b8 <HAL_ADC_ConfigChannel+0x108>)
 8000778:	6818      	ldr	r0, [r3, #0]
 800077a:	f7ff fcc5 	bl	8000108 <__udivsi3>
 800077e:	0083      	lsls	r3, r0, #2
 8000780:	1818      	adds	r0, r3, r0
 8000782:	0040      	lsls	r0, r0, #1
 8000784:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 8000786:	9b01      	ldr	r3, [sp, #4]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d0ed      	beq.n	8000768 <HAL_ADC_ConfigChannel+0xb8>
            wait_loop_index--;
 800078c:	9b01      	ldr	r3, [sp, #4]
 800078e:	3b01      	subs	r3, #1
 8000790:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000792:	9b01      	ldr	r3, [sp, #4]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d1f9      	bne.n	800078c <HAL_ADC_ConfigChannel+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000798:	2000      	movs	r0, #0
 800079a:	e7cd      	b.n	8000738 <HAL_ADC_ConfigChannel+0x88>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800079c:	03d2      	lsls	r2, r2, #15
 800079e:	e7c1      	b.n	8000724 <HAL_ADC_ConfigChannel+0x74>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80007a0:	4a06      	ldr	r2, [pc, #24]	; (80007bc <HAL_ADC_ConfigChannel+0x10c>)
 80007a2:	e7de      	b.n	8000762 <HAL_ADC_ConfigChannel+0xb2>
 80007a4:	4a06      	ldr	r2, [pc, #24]	; (80007c0 <HAL_ADC_ConfigChannel+0x110>)
 80007a6:	e7dc      	b.n	8000762 <HAL_ADC_ConfigChannel+0xb2>
 80007a8:	00001001 	.word	0x00001001
 80007ac:	40012708 	.word	0x40012708
 80007b0:	feffffff 	.word	0xfeffffff
 80007b4:	20000054 	.word	0x20000054
 80007b8:	000f4240 	.word	0x000f4240
 80007bc:	ff7fffff 	.word	0xff7fffff
 80007c0:	ffbfffff 	.word	0xffbfffff

080007c4 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80007c4:	b570      	push	{r4, r5, r6, lr}
 80007c6:	0004      	movs	r4, r0
 80007c8:	b082      	sub	sp, #8
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t regshift = COMP_CSR_COMP1_SHIFT;
  
  /* Check the COMP handle allocation and lock status */
  if((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 80007ca:	2800      	cmp	r0, #0
 80007cc:	d03b      	beq.n	8000846 <HAL_COMP_Init+0x82>
 80007ce:	6a83      	ldr	r3, [r0, #40]	; 0x28
  {
    status = HAL_ERROR;
 80007d0:	2001      	movs	r0, #1
  if((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 80007d2:	06db      	lsls	r3, r3, #27
 80007d4:	d501      	bpl.n	80007da <HAL_COMP_Init+0x16>
    /* Initialize the COMP state*/
    hcomp->State = HAL_COMP_STATE_READY;
  }
  
  return status;
}
 80007d6:	b002      	add	sp, #8
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SYSCFG_CLK_ENABLE();  
 80007da:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <HAL_COMP_Init+0x8c>)
 80007dc:	699a      	ldr	r2, [r3, #24]
 80007de:	4302      	orrs	r2, r0
 80007e0:	619a      	str	r2, [r3, #24]
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4018      	ands	r0, r3
 80007e6:	9001      	str	r0, [sp, #4]
    HAL_COMP_MspInit(hcomp);
 80007e8:	0020      	movs	r0, r4
    __HAL_RCC_SYSCFG_CLK_ENABLE();  
 80007ea:	9b01      	ldr	r3, [sp, #4]
    HAL_COMP_MspInit(hcomp);
 80007ec:	f004 fa44 	bl	8004c78 <HAL_COMP_MspInit>
    if(hcomp->State == HAL_COMP_STATE_RESET)
 80007f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d024      	beq.n	8000840 <HAL_COMP_Init+0x7c>
    hcomp->State = HAL_COMP_STATE_BUSY;
 80007f6:	2302      	movs	r3, #2
    if(hcomp->Instance == COMP2)
 80007f8:	6822      	ldr	r2, [r4, #0]
    hcomp->State = HAL_COMP_STATE_BUSY;
 80007fa:	62a3      	str	r3, [r4, #40]	; 0x28
    if(hcomp->Instance == COMP2)
 80007fc:	4b15      	ldr	r3, [pc, #84]	; (8000854 <HAL_COMP_Init+0x90>)
 80007fe:	429a      	cmp	r2, r3
 8000800:	d023      	beq.n	800084a <HAL_COMP_Init+0x86>
  uint32_t regshift = COMP_CSR_COMP1_SHIFT;
 8000802:	2500      	movs	r5, #0
    if(hcomp->Instance == COMP2)
 8000804:	4914      	ldr	r1, [pc, #80]	; (8000858 <HAL_COMP_Init+0x94>)
    MODIFY_REG(COMP->CSR, 
 8000806:	68a6      	ldr	r6, [r4, #8]
 8000808:	6863      	ldr	r3, [r4, #4]
 800080a:	4a14      	ldr	r2, [pc, #80]	; (800085c <HAL_COMP_Init+0x98>)
 800080c:	4333      	orrs	r3, r6
 800080e:	68e6      	ldr	r6, [r4, #12]
 8000810:	6810      	ldr	r0, [r2, #0]
 8000812:	4333      	orrs	r3, r6
 8000814:	6926      	ldr	r6, [r4, #16]
 8000816:	4001      	ands	r1, r0
 8000818:	4333      	orrs	r3, r6
 800081a:	6966      	ldr	r6, [r4, #20]
 800081c:	4333      	orrs	r3, r6
 800081e:	69a6      	ldr	r6, [r4, #24]
 8000820:	4333      	orrs	r3, r6
 8000822:	40ab      	lsls	r3, r5
 8000824:	430b      	orrs	r3, r1
 8000826:	6013      	str	r3, [r2, #0]
    if(hcomp->Init.WindowMode != COMP_WINDOWMODE_DISABLE)
 8000828:	69e3      	ldr	r3, [r4, #28]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d004      	beq.n	8000838 <HAL_COMP_Init+0x74>
      COMP->CSR |= COMP_CSR_WNDWEN;
 800082e:	2380      	movs	r3, #128	; 0x80
 8000830:	6811      	ldr	r1, [r2, #0]
 8000832:	041b      	lsls	r3, r3, #16
 8000834:	430b      	orrs	r3, r1
 8000836:	6013      	str	r3, [r2, #0]
    hcomp->State = HAL_COMP_STATE_READY;
 8000838:	2301      	movs	r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 800083a:	2000      	movs	r0, #0
    hcomp->State = HAL_COMP_STATE_READY;
 800083c:	62a3      	str	r3, [r4, #40]	; 0x28
 800083e:	e7ca      	b.n	80007d6 <HAL_COMP_Init+0x12>
      hcomp->Lock = HAL_UNLOCKED;
 8000840:	2224      	movs	r2, #36	; 0x24
 8000842:	54a3      	strb	r3, [r4, r2]
 8000844:	e7d7      	b.n	80007f6 <HAL_COMP_Init+0x32>
    status = HAL_ERROR;
 8000846:	2001      	movs	r0, #1
 8000848:	e7c5      	b.n	80007d6 <HAL_COMP_Init+0x12>
 800084a:	4905      	ldr	r1, [pc, #20]	; (8000860 <HAL_COMP_Init+0x9c>)
      regshift = COMP_CSR_COMP2_SHIFT;
 800084c:	2510      	movs	r5, #16
 800084e:	e7da      	b.n	8000806 <HAL_COMP_Init+0x42>
 8000850:	40021000 	.word	0x40021000
 8000854:	4001001e 	.word	0x4001001e
 8000858:	ffffc081 	.word	0xffffc081
 800085c:	4001001c 	.word	0x4001001c
 8000860:	c081ffff 	.word	0xc081ffff

08000864 <HAL_COMP_Start_IT>:
  * @brief  Enables the interrupt and starts the comparator
  * @param  hcomp COMP handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_COMP_Start_IT(COMP_HandleTypeDef *hcomp)
{
 8000864:	b510      	push	{r4, lr}
 8000866:	1e03      	subs	r3, r0, #0
  if((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8000868:	d034      	beq.n	80008d4 <HAL_COMP_Start_IT+0x70>
 800086a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800086c:	2001      	movs	r0, #1
 800086e:	06d2      	lsls	r2, r2, #27
 8000870:	d402      	bmi.n	8000878 <HAL_COMP_Start_IT+0x14>
    if(hcomp->State == HAL_COMP_STATE_READY)
 8000872:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8000874:	2c01      	cmp	r4, #1
 8000876:	d000      	beq.n	800087a <HAL_COMP_Start_IT+0x16>
    /* Enable Exti interrupt mode */
    SET_BIT(EXTI->IMR, extiline);
  }

  return status;
}
 8000878:	bd10      	pop	{r4, pc}
      if(hcomp->Instance == COMP2)
 800087a:	6818      	ldr	r0, [r3, #0]
 800087c:	4a1e      	ldr	r2, [pc, #120]	; (80008f8 <HAL_COMP_Start_IT+0x94>)
 800087e:	4290      	cmp	r0, r2
 8000880:	d02e      	beq.n	80008e0 <HAL_COMP_Start_IT+0x7c>
      SET_BIT(COMP->CSR, COMP_CSR_COMPxEN << regshift);
 8000882:	4a1e      	ldr	r2, [pc, #120]	; (80008fc <HAL_COMP_Start_IT+0x98>)
 8000884:	6811      	ldr	r1, [r2, #0]
 8000886:	4321      	orrs	r1, r4
 8000888:	6011      	str	r1, [r2, #0]
      hcomp->State = HAL_COMP_STATE_BUSY;
 800088a:	2102      	movs	r1, #2
 800088c:	6299      	str	r1, [r3, #40]	; 0x28
    extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 800088e:	4290      	cmp	r0, r2
 8000890:	d022      	beq.n	80008d8 <HAL_COMP_Start_IT+0x74>
 8000892:	2180      	movs	r1, #128	; 0x80
 8000894:	4a1a      	ldr	r2, [pc, #104]	; (8000900 <HAL_COMP_Start_IT+0x9c>)
 8000896:	03c9      	lsls	r1, r1, #15
    if((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_IT_RISING) != RESET)
 8000898:	6a1b      	ldr	r3, [r3, #32]
      SET_BIT(EXTI->RTSR, extiline);
 800089a:	4c1a      	ldr	r4, [pc, #104]	; (8000904 <HAL_COMP_Start_IT+0xa0>)
    if((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_IT_RISING) != RESET)
 800089c:	07d8      	lsls	r0, r3, #31
 800089e:	d50f      	bpl.n	80008c0 <HAL_COMP_Start_IT+0x5c>
      SET_BIT(EXTI->RTSR, extiline);
 80008a0:	68a0      	ldr	r0, [r4, #8]
 80008a2:	4308      	orrs	r0, r1
 80008a4:	60a0      	str	r0, [r4, #8]
    if((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_IT_FALLING) != RESET)
 80008a6:	079b      	lsls	r3, r3, #30
 80008a8:	d50f      	bpl.n	80008ca <HAL_COMP_Start_IT+0x66>
      SET_BIT(EXTI->FTSR, extiline);
 80008aa:	4a16      	ldr	r2, [pc, #88]	; (8000904 <HAL_COMP_Start_IT+0xa0>)
 80008ac:	68d3      	ldr	r3, [r2, #12]
 80008ae:	430b      	orrs	r3, r1
 80008b0:	60d3      	str	r3, [r2, #12]
    WRITE_REG(EXTI->PR, extiline);
 80008b2:	4b14      	ldr	r3, [pc, #80]	; (8000904 <HAL_COMP_Start_IT+0xa0>)
    SET_BIT(EXTI->IMR, extiline);
 80008b4:	2000      	movs	r0, #0
    WRITE_REG(EXTI->PR, extiline);
 80008b6:	6159      	str	r1, [r3, #20]
    SET_BIT(EXTI->IMR, extiline);
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	430a      	orrs	r2, r1
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	e7db      	b.n	8000878 <HAL_COMP_Start_IT+0x14>
      CLEAR_BIT(EXTI->RTSR, extiline);
 80008c0:	68a0      	ldr	r0, [r4, #8]
 80008c2:	4010      	ands	r0, r2
 80008c4:	60a0      	str	r0, [r4, #8]
    if((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_IT_FALLING) != RESET)
 80008c6:	079b      	lsls	r3, r3, #30
 80008c8:	d4ef      	bmi.n	80008aa <HAL_COMP_Start_IT+0x46>
      CLEAR_BIT(EXTI->FTSR, extiline);
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <HAL_COMP_Start_IT+0xa0>)
 80008cc:	68d8      	ldr	r0, [r3, #12]
 80008ce:	4002      	ands	r2, r0
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	e7ee      	b.n	80008b2 <HAL_COMP_Start_IT+0x4e>
  if((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 80008d4:	2001      	movs	r0, #1
 80008d6:	e7cf      	b.n	8000878 <HAL_COMP_Start_IT+0x14>
    extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 80008d8:	2180      	movs	r1, #128	; 0x80
 80008da:	4a0b      	ldr	r2, [pc, #44]	; (8000908 <HAL_COMP_Start_IT+0xa4>)
 80008dc:	0389      	lsls	r1, r1, #14
 80008de:	e7db      	b.n	8000898 <HAL_COMP_Start_IT+0x34>
      SET_BIT(COMP->CSR, COMP_CSR_COMPxEN << regshift);
 80008e0:	2280      	movs	r2, #128	; 0x80
 80008e2:	4906      	ldr	r1, [pc, #24]	; (80008fc <HAL_COMP_Start_IT+0x98>)
 80008e4:	0252      	lsls	r2, r2, #9
 80008e6:	6808      	ldr	r0, [r1, #0]
 80008e8:	4302      	orrs	r2, r0
 80008ea:	600a      	str	r2, [r1, #0]
      hcomp->State = HAL_COMP_STATE_BUSY;
 80008ec:	2202      	movs	r2, #2
    extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 80008ee:	2180      	movs	r1, #128	; 0x80
      hcomp->State = HAL_COMP_STATE_BUSY;
 80008f0:	629a      	str	r2, [r3, #40]	; 0x28
    extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 80008f2:	03c9      	lsls	r1, r1, #15
      hcomp->State = HAL_COMP_STATE_BUSY;
 80008f4:	4a02      	ldr	r2, [pc, #8]	; (8000900 <HAL_COMP_Start_IT+0x9c>)
 80008f6:	e7cf      	b.n	8000898 <HAL_COMP_Start_IT+0x34>
 80008f8:	4001001e 	.word	0x4001001e
 80008fc:	4001001c 	.word	0x4001001c
 8000900:	ffbfffff 	.word	0xffbfffff
 8000904:	40010400 	.word	0x40010400
 8000908:	ffdfffff 	.word	0xffdfffff

0800090c <HAL_COMP_GetOutputLevel>:
  uint32_t regshift = COMP_CSR_COMP1_SHIFT;
  
  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));
  
  if(hcomp->Instance == COMP2)
 800090c:	6802      	ldr	r2, [r0, #0]
 800090e:	4b07      	ldr	r3, [pc, #28]	; (800092c <HAL_COMP_GetOutputLevel+0x20>)
 8000910:	2080      	movs	r0, #128	; 0x80
 8000912:	429a      	cmp	r2, r3
 8000914:	d007      	beq.n	8000926 <HAL_COMP_GetOutputLevel+0x1a>
 8000916:	01c0      	lsls	r0, r0, #7
  {
    regshift = COMP_CSR_COMP2_SHIFT;
  }
  level = READ_BIT(COMP->CSR, COMP_CSR_COMPxOUT << regshift);
 8000918:	4b05      	ldr	r3, [pc, #20]	; (8000930 <HAL_COMP_GetOutputLevel+0x24>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4018      	ands	r0, r3
  
  if(level != 0U)
 800091e:	d001      	beq.n	8000924 <HAL_COMP_GetOutputLevel+0x18>
  {
    return(COMP_OUTPUTLEVEL_HIGH);
 8000920:	2080      	movs	r0, #128	; 0x80
 8000922:	01c0      	lsls	r0, r0, #7
  }
  return(COMP_OUTPUTLEVEL_LOW);
}
 8000924:	4770      	bx	lr
 8000926:	05c0      	lsls	r0, r0, #23
 8000928:	e7f6      	b.n	8000918 <HAL_COMP_GetOutputLevel+0xc>
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	4001001e 	.word	0x4001001e
 8000930:	4001001c 	.word	0x4001001c

08000934 <HAL_COMP_IRQHandler>:
  uint32_t extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 8000934:	4b08      	ldr	r3, [pc, #32]	; (8000958 <HAL_COMP_IRQHandler+0x24>)
 8000936:	6802      	ldr	r2, [r0, #0]
{
 8000938:	b510      	push	{r4, lr}
  uint32_t extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 800093a:	429a      	cmp	r2, r3
 800093c:	d009      	beq.n	8000952 <HAL_COMP_IRQHandler+0x1e>
 800093e:	2280      	movs	r2, #128	; 0x80
 8000940:	03d2      	lsls	r2, r2, #15
  if(READ_BIT(EXTI->PR, extiline) != RESET)
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <HAL_COMP_IRQHandler+0x28>)
 8000944:	6959      	ldr	r1, [r3, #20]
 8000946:	4211      	tst	r1, r2
 8000948:	d002      	beq.n	8000950 <HAL_COMP_IRQHandler+0x1c>
    WRITE_REG(EXTI->PR, extiline);
 800094a:	615a      	str	r2, [r3, #20]
    HAL_COMP_TriggerCallback(hcomp);    
 800094c:	f002 fec6 	bl	80036dc <HAL_COMP_TriggerCallback>
}
 8000950:	bd10      	pop	{r4, pc}
  uint32_t extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 8000952:	2280      	movs	r2, #128	; 0x80
 8000954:	0392      	lsls	r2, r2, #14
 8000956:	e7f4      	b.n	8000942 <HAL_COMP_IRQHandler+0xe>
 8000958:	4001001c 	.word	0x4001001c
 800095c:	40010400 	.word	0x40010400

08000960 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000960:	b570      	push	{r4, r5, r6, lr}
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000962:	2800      	cmp	r0, #0
 8000964:	db14      	blt.n	8000990 <HAL_NVIC_SetPriority+0x30>
 8000966:	4a16      	ldr	r2, [pc, #88]	; (80009c0 <HAL_NVIC_SetPriority+0x60>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000968:	2403      	movs	r4, #3
 800096a:	4694      	mov	ip, r2
 800096c:	22ff      	movs	r2, #255	; 0xff
 800096e:	0883      	lsrs	r3, r0, #2
 8000970:	4020      	ands	r0, r4
 8000972:	0014      	movs	r4, r2
 8000974:	26c0      	movs	r6, #192	; 0xc0
 8000976:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000978:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800097a:	4084      	lsls	r4, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800097c:	400a      	ands	r2, r1
 800097e:	4082      	lsls	r2, r0
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	4463      	add	r3, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000984:	00b6      	lsls	r6, r6, #2
 8000986:	599d      	ldr	r5, [r3, r6]
 8000988:	43a5      	bics	r5, r4
 800098a:	432a      	orrs	r2, r5
 800098c:	519a      	str	r2, [r3, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	4a0c      	ldr	r2, [pc, #48]	; (80009c4 <HAL_NVIC_SetPriority+0x64>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000992:	24ff      	movs	r4, #255	; 0xff
 8000994:	4694      	mov	ip, r2
 8000996:	230f      	movs	r3, #15
 8000998:	2203      	movs	r2, #3
 800099a:	b2c0      	uxtb	r0, r0
 800099c:	4003      	ands	r3, r0
 800099e:	4010      	ands	r0, r2
 80009a0:	0022      	movs	r2, r4
 80009a2:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009a4:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009a6:	4082      	lsls	r2, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009a8:	400c      	ands	r4, r1
 80009aa:	4084      	lsls	r4, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009ac:	3b08      	subs	r3, #8
 80009ae:	089b      	lsrs	r3, r3, #2
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	4463      	add	r3, ip
 80009b4:	69dd      	ldr	r5, [r3, #28]
 80009b6:	4395      	bics	r5, r2
 80009b8:	432c      	orrs	r4, r5
 80009ba:	61dc      	str	r4, [r3, #28]
 80009bc:	e7e7      	b.n	800098e <HAL_NVIC_SetPriority+0x2e>
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	e000e100 	.word	0xe000e100
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80009c8:	231f      	movs	r3, #31
 80009ca:	4018      	ands	r0, r3
 80009cc:	3b1e      	subs	r3, #30
 80009ce:	4083      	lsls	r3, r0
 80009d0:	4a01      	ldr	r2, [pc, #4]	; (80009d8 <HAL_NVIC_EnableIRQ+0x10>)
 80009d2:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80009d4:	4770      	bx	lr
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	e000e100 	.word	0xe000e100

080009dc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009dc:	4a0a      	ldr	r2, [pc, #40]	; (8000a08 <HAL_SYSTICK_Config+0x2c>)
 80009de:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 80009e0:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d80e      	bhi.n	8000a04 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009e6:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009e8:	4a08      	ldr	r2, [pc, #32]	; (8000a0c <HAL_SYSTICK_Config+0x30>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009ea:	4809      	ldr	r0, [pc, #36]	; (8000a10 <HAL_SYSTICK_Config+0x34>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ec:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009ee:	6a03      	ldr	r3, [r0, #32]
 80009f0:	0609      	lsls	r1, r1, #24
 80009f2:	021b      	lsls	r3, r3, #8
 80009f4:	0a1b      	lsrs	r3, r3, #8
 80009f6:	430b      	orrs	r3, r1
 80009f8:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009fa:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009fc:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009fe:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a00:	3307      	adds	r3, #7
 8000a02:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000a04:	4770      	bx	lr
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	00ffffff 	.word	0x00ffffff
 8000a0c:	e000e010 	.word	0xe000e010
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000a14:	4a05      	ldr	r2, [pc, #20]	; (8000a2c <HAL_SYSTICK_CLKSourceConfig+0x18>)
 8000a16:	6813      	ldr	r3, [r2, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000a18:	2804      	cmp	r0, #4
 8000a1a:	d003      	beq.n	8000a24 <HAL_SYSTICK_CLKSourceConfig+0x10>
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000a1c:	2104      	movs	r1, #4
 8000a1e:	438b      	bics	r3, r1
 8000a20:	6013      	str	r3, [r2, #0]
  }
}
 8000a22:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000a24:	4318      	orrs	r0, r3
 8000a26:	6010      	str	r0, [r2, #0]
 8000a28:	e7fb      	b.n	8000a22 <HAL_SYSTICK_CLKSourceConfig+0xe>
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	e000e010 	.word	0xe000e010

08000a30 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000a30:	4770      	bx	lr
 8000a32:	46c0      	nop			; (mov r8, r8)

08000a34 <HAL_SYSTICK_IRQHandler>:
{
 8000a34:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 8000a36:	f7ff fffb 	bl	8000a30 <HAL_SYSTICK_Callback>
}
 8000a3a:	bd10      	pop	{r4, pc}

08000a3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000a3c:	b570      	push	{r4, r5, r6, lr}
 8000a3e:	1e04      	subs	r4, r0, #0
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000a40:	d02b      	beq.n	8000a9a <HAL_DMA_Init+0x5e>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a42:	2521      	movs	r5, #33	; 0x21
 8000a44:	2302      	movs	r3, #2
 8000a46:	5543      	strb	r3, [r0, r5]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000a48:	6800      	ldr	r0, [r0, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000a4a:	4a15      	ldr	r2, [pc, #84]	; (8000aa0 <HAL_DMA_Init+0x64>)
  tmp = hdma->Instance->CCR;
 8000a4c:	6803      	ldr	r3, [r0, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000a4e:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000a50:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8000a52:	6863      	ldr	r3, [r4, #4]
 8000a54:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a56:	68e1      	ldr	r1, [r4, #12]
 8000a58:	430b      	orrs	r3, r1
 8000a5a:	6921      	ldr	r1, [r4, #16]
 8000a5c:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a5e:	6961      	ldr	r1, [r4, #20]
 8000a60:	430b      	orrs	r3, r1
 8000a62:	69a1      	ldr	r1, [r4, #24]
 8000a64:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a66:	69e1      	ldr	r1, [r4, #28]
 8000a68:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8000a6a:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000a6c:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000a6e:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <HAL_DMA_Init+0x68>)
 8000a70:	2114      	movs	r1, #20
 8000a72:	469c      	mov	ip, r3
 8000a74:	4460      	add	r0, ip
 8000a76:	f7ff fb47 	bl	8000108 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <HAL_DMA_Init+0x6c>)
  hdma->State = HAL_DMA_STATE_READY;
 8000a7c:	2201      	movs	r2, #1
  hdma->DmaBaseAddress = DMA1;
 8000a7e:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->XferCpltCallback = NULL;
 8000a80:	2300      	movs	r3, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000a82:	0080      	lsls	r0, r0, #2
 8000a84:	6420      	str	r0, [r4, #64]	; 0x40
  return HAL_OK;
 8000a86:	2000      	movs	r0, #0
  hdma->XferCpltCallback = NULL;
 8000a88:	62a3      	str	r3, [r4, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8000a8a:	62e3      	str	r3, [r4, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8000a8c:	6323      	str	r3, [r4, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8000a8e:	6363      	str	r3, [r4, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a90:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8000a92:	5562      	strb	r2, [r4, r5]
  hdma->Lock = HAL_UNLOCKED;
 8000a94:	321f      	adds	r2, #31
 8000a96:	54a3      	strb	r3, [r4, r2]
}  
 8000a98:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	e7fc      	b.n	8000a98 <HAL_DMA_Init+0x5c>
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	ffffc00f 	.word	0xffffc00f
 8000aa4:	bffdfff8 	.word	0xbffdfff8
 8000aa8:	40020000 	.word	0x40020000

08000aac <HAL_DMA_Start_IT>:
{
 8000aac:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8000aae:	2420      	movs	r4, #32
 8000ab0:	5d05      	ldrb	r5, [r0, r4]
 8000ab2:	2602      	movs	r6, #2
 8000ab4:	2d01      	cmp	r5, #1
 8000ab6:	d008      	beq.n	8000aca <HAL_DMA_Start_IT+0x1e>
 8000ab8:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8000aba:	2721      	movs	r7, #33	; 0x21
  __HAL_LOCK(hdma);
 8000abc:	5505      	strb	r5, [r0, r4]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000abe:	5dc5      	ldrb	r5, [r0, r7]
 8000ac0:	b2ed      	uxtb	r5, r5
 8000ac2:	2d01      	cmp	r5, #1
 8000ac4:	d003      	beq.n	8000ace <HAL_DMA_Start_IT+0x22>
    __HAL_UNLOCK(hdma); 
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	5503      	strb	r3, [r0, r4]
} 
 8000aca:	0030      	movs	r0, r6
 8000acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ace:	2400      	movs	r4, #0
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000ad0:	55c6      	strb	r6, [r0, r7]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ad2:	6384      	str	r4, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ad4:	6804      	ldr	r4, [r0, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000ad6:	6c07      	ldr	r7, [r0, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ad8:	6826      	ldr	r6, [r4, #0]
 8000ada:	43ae      	bics	r6, r5
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000adc:	40bd      	lsls	r5, r7
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ade:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000ae0:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8000ae2:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8000ae4:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000ae6:	6843      	ldr	r3, [r0, #4]
 8000ae8:	2b10      	cmp	r3, #16
 8000aea:	d00e      	beq.n	8000b0a <HAL_DMA_Start_IT+0x5e>
    hdma->Instance->CPAR = SrcAddress;
 8000aec:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 8000aee:	60e2      	str	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8000af0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d00c      	beq.n	8000b10 <HAL_DMA_Start_IT+0x64>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000af6:	220e      	movs	r2, #14
 8000af8:	6823      	ldr	r3, [r4, #0]
 8000afa:	4313      	orrs	r3, r2
 8000afc:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000afe:	2201      	movs	r2, #1
 8000b00:	6823      	ldr	r3, [r4, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000b02:	2600      	movs	r6, #0
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000b04:	4313      	orrs	r3, r2
 8000b06:	6023      	str	r3, [r4, #0]
 8000b08:	e7df      	b.n	8000aca <HAL_DMA_Start_IT+0x1e>
    hdma->Instance->CPAR = DstAddress;
 8000b0a:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000b0c:	60e1      	str	r1, [r4, #12]
 8000b0e:	e7ef      	b.n	8000af0 <HAL_DMA_Start_IT+0x44>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000b10:	220a      	movs	r2, #10
 8000b12:	6823      	ldr	r3, [r4, #0]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000b18:	6823      	ldr	r3, [r4, #0]
 8000b1a:	3a06      	subs	r2, #6
 8000b1c:	4393      	bics	r3, r2
 8000b1e:	6023      	str	r3, [r4, #0]
 8000b20:	e7ed      	b.n	8000afe <HAL_DMA_Start_IT+0x52>
 8000b22:	46c0      	nop			; (mov r8, r8)

08000b24 <HAL_DMA_IRQHandler>:
{
 8000b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000b26:	2504      	movs	r5, #4
 8000b28:	002e      	movs	r6, r5
 8000b2a:	6c03      	ldr	r3, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000b2c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000b2e:	409e      	lsls	r6, r3
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000b30:	6822      	ldr	r2, [r4, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000b32:	6801      	ldr	r1, [r0, #0]
 8000b34:	680f      	ldr	r7, [r1, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000b36:	4216      	tst	r6, r2
 8000b38:	d00d      	beq.n	8000b56 <HAL_DMA_IRQHandler+0x32>
 8000b3a:	423d      	tst	r5, r7
 8000b3c:	d00b      	beq.n	8000b56 <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000b3e:	680b      	ldr	r3, [r1, #0]
 8000b40:	069b      	lsls	r3, r3, #26
 8000b42:	d402      	bmi.n	8000b4a <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000b44:	680b      	ldr	r3, [r1, #0]
 8000b46:	43ab      	bics	r3, r5
 8000b48:	600b      	str	r3, [r1, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000b4a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000b4c:	6066      	str	r6, [r4, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d000      	beq.n	8000b54 <HAL_DMA_IRQHandler+0x30>
    	hdma->XferErrorCallback(hdma);
 8000b52:	4798      	blx	r3
}  
 8000b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000b56:	2502      	movs	r5, #2
 8000b58:	002e      	movs	r6, r5
 8000b5a:	409e      	lsls	r6, r3
 8000b5c:	4216      	tst	r6, r2
 8000b5e:	d014      	beq.n	8000b8a <HAL_DMA_IRQHandler+0x66>
 8000b60:	423d      	tst	r5, r7
 8000b62:	d012      	beq.n	8000b8a <HAL_DMA_IRQHandler+0x66>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000b64:	680b      	ldr	r3, [r1, #0]
 8000b66:	069b      	lsls	r3, r3, #26
 8000b68:	d406      	bmi.n	8000b78 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000b6a:	220a      	movs	r2, #10
 8000b6c:	680b      	ldr	r3, [r1, #0]
 8000b6e:	4393      	bics	r3, r2
 8000b70:	600b      	str	r3, [r1, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8000b72:	2321      	movs	r3, #33	; 0x21
 8000b74:	3a09      	subs	r2, #9
 8000b76:	54c2      	strb	r2, [r0, r3]
  	__HAL_UNLOCK(hdma);
 8000b78:	2320      	movs	r3, #32
 8000b7a:	2200      	movs	r2, #0
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000b7c:	6066      	str	r6, [r4, #4]
  	__HAL_UNLOCK(hdma);
 8000b7e:	54c2      	strb	r2, [r0, r3]
  	if(hdma->XferCpltCallback != NULL)
 8000b80:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d0e6      	beq.n	8000b54 <HAL_DMA_IRQHandler+0x30>
    	hdma->XferErrorCallback(hdma);
 8000b86:	4798      	blx	r3
 8000b88:	e7e4      	b.n	8000b54 <HAL_DMA_IRQHandler+0x30>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000b8a:	2508      	movs	r5, #8
 8000b8c:	002e      	movs	r6, r5
 8000b8e:	409e      	lsls	r6, r3
 8000b90:	4232      	tst	r2, r6
 8000b92:	d0df      	beq.n	8000b54 <HAL_DMA_IRQHandler+0x30>
 8000b94:	423d      	tst	r5, r7
 8000b96:	d0dd      	beq.n	8000b54 <HAL_DMA_IRQHandler+0x30>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b98:	680a      	ldr	r2, [r1, #0]
 8000b9a:	3506      	adds	r5, #6
 8000b9c:	43aa      	bics	r2, r5
 8000b9e:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	0011      	movs	r1, r2
 8000ba4:	4099      	lsls	r1, r3
    hdma->State = HAL_DMA_STATE_READY;    
 8000ba6:	2321      	movs	r3, #33	; 0x21
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000ba8:	6061      	str	r1, [r4, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000baa:	6382      	str	r2, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8000bac:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma); 
 8000bae:	2200      	movs	r2, #0
 8000bb0:	3b01      	subs	r3, #1
 8000bb2:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferErrorCallback != NULL)
 8000bb4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d0cc      	beq.n	8000b54 <HAL_DMA_IRQHandler+0x30>
    	hdma->XferErrorCallback(hdma);
 8000bba:	4798      	blx	r3
 8000bbc:	e7ca      	b.n	8000b54 <HAL_DMA_IRQHandler+0x30>
 8000bbe:	46c0      	nop			; (mov r8, r8)

08000bc0 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bc2:	46de      	mov	lr, fp
 8000bc4:	4657      	mov	r7, sl
 8000bc6:	464e      	mov	r6, r9
 8000bc8:	4645      	mov	r5, r8
 8000bca:	b5e0      	push	{r5, r6, r7, lr}
 8000bcc:	469b      	mov	fp, r3
 8000bce:	b083      	sub	sp, #12
  HAL_StatusTypeDef status = HAL_ERROR;
  uint8_t index = 0U;
  uint8_t nbiterations = 0U;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000bd0:	4b67      	ldr	r3, [pc, #412]	; (8000d70 <HAL_FLASH_Program+0x1b0>)
{
 8000bd2:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(&pFlash);
 8000bd4:	469a      	mov	sl, r3
 8000bd6:	7e1b      	ldrb	r3, [r3, #24]
{
 8000bd8:	4680      	mov	r8, r0
 8000bda:	4689      	mov	r9, r1
  __HAL_LOCK(&pFlash);
 8000bdc:	2002      	movs	r0, #2
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d106      	bne.n	8000bf0 <HAL_FLASH_Program+0x30>

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);

  return status;
}
 8000be2:	b003      	add	sp, #12
 8000be4:	bc3c      	pop	{r2, r3, r4, r5}
 8000be6:	4690      	mov	r8, r2
 8000be8:	4699      	mov	r9, r3
 8000bea:	46a2      	mov	sl, r4
 8000bec:	46ab      	mov	fp, r5
 8000bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	4652      	mov	r2, sl
 8000bf4:	7613      	strb	r3, [r2, #24]
{
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000bf6:	f7ff fc27 	bl	8000448 <HAL_GetTick>
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000bfa:	4c5e      	ldr	r4, [pc, #376]	; (8000d74 <HAL_FLASH_Program+0x1b4>)
  uint32_t tickstart = HAL_GetTick();
 8000bfc:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000bfe:	2501      	movs	r5, #1
  { 
    if (Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000c00:	4e5d      	ldr	r6, [pc, #372]	; (8000d78 <HAL_FLASH_Program+0x1b8>)
 8000c02:	e005      	b.n	8000c10 <HAL_FLASH_Program+0x50>
 8000c04:	f7ff fc20 	bl	8000448 <HAL_GetTick>
 8000c08:	1bc0      	subs	r0, r0, r7
 8000c0a:	42b0      	cmp	r0, r6
 8000c0c:	d900      	bls.n	8000c10 <HAL_FLASH_Program+0x50>
 8000c0e:	e0a6      	b.n	8000d5e <HAL_FLASH_Program+0x19e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000c10:	68e3      	ldr	r3, [r4, #12]
 8000c12:	421d      	tst	r5, r3
 8000c14:	d1f6      	bne.n	8000c04 <HAL_FLASH_Program+0x44>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000c16:	2320      	movs	r3, #32
 8000c18:	68e2      	ldr	r2, [r4, #12]
 8000c1a:	4213      	tst	r3, r2
 8000c1c:	d000      	beq.n	8000c20 <HAL_FLASH_Program+0x60>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000c1e:	60e3      	str	r3, [r4, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000c20:	4b54      	ldr	r3, [pc, #336]	; (8000d74 <HAL_FLASH_Program+0x1b4>)
 8000c22:	68da      	ldr	r2, [r3, #12]
 8000c24:	06d2      	lsls	r2, r2, #27
 8000c26:	d402      	bmi.n	8000c2e <HAL_FLASH_Program+0x6e>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000c28:	68db      	ldr	r3, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000c2a:	075b      	lsls	r3, r3, #29
 8000c2c:	d51e      	bpl.n	8000c6c <HAL_FLASH_Program+0xac>
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000c2e:	4b51      	ldr	r3, [pc, #324]	; (8000d74 <HAL_FLASH_Program+0x1b4>)
 8000c30:	68db      	ldr	r3, [r3, #12]
 8000c32:	06db      	lsls	r3, r3, #27
 8000c34:	d400      	bmi.n	8000c38 <HAL_FLASH_Program+0x78>
 8000c36:	e094      	b.n	8000d62 <HAL_FLASH_Program+0x1a2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000c38:	4653      	mov	r3, sl
 8000c3a:	2202      	movs	r2, #2
 8000c3c:	69db      	ldr	r3, [r3, #28]
 8000c3e:	2114      	movs	r1, #20
 8000c40:	4313      	orrs	r3, r2
 8000c42:	4652      	mov	r2, sl
 8000c44:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8000c46:	2310      	movs	r3, #16
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000c48:	4a4a      	ldr	r2, [pc, #296]	; (8000d74 <HAL_FLASH_Program+0x1b4>)
 8000c4a:	68d2      	ldr	r2, [r2, #12]
 8000c4c:	0752      	lsls	r2, r2, #29
 8000c4e:	d506      	bpl.n	8000c5e <HAL_FLASH_Program+0x9e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000c50:	4653      	mov	r3, sl
 8000c52:	2201      	movs	r2, #1
 8000c54:	69db      	ldr	r3, [r3, #28]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	4652      	mov	r2, sl
 8000c5a:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8000c5c:	000b      	movs	r3, r1
    return HAL_ERROR;
 8000c5e:	2001      	movs	r0, #1
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000c60:	4a44      	ldr	r2, [pc, #272]	; (8000d74 <HAL_FLASH_Program+0x1b4>)
 8000c62:	60d3      	str	r3, [r2, #12]
  __HAL_UNLOCK(&pFlash);
 8000c64:	2300      	movs	r3, #0
 8000c66:	4652      	mov	r2, sl
 8000c68:	7613      	strb	r3, [r2, #24]
  return status;
 8000c6a:	e7ba      	b.n	8000be2 <HAL_FLASH_Program+0x22>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000c6c:	4643      	mov	r3, r8
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d07a      	beq.n	8000d68 <HAL_FLASH_Program+0x1a8>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000c72:	4642      	mov	r2, r8
      nbiterations = 4U;
 8000c74:	2304      	movs	r3, #4
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000c76:	2a02      	cmp	r2, #2
 8000c78:	d078      	beq.n	8000d6c <HAL_FLASH_Program+0x1ac>
 8000c7a:	464a      	mov	r2, r9
 8000c7c:	3b01      	subs	r3, #1
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	3202      	adds	r2, #2
 8000c84:	189b      	adds	r3, r3, r2
 8000c86:	9300      	str	r3, [sp, #0]
      nbiterations = 4U;
 8000c88:	2300      	movs	r3, #0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000c8a:	2501      	movs	r5, #1
      nbiterations = 4U;
 8000c8c:	4698      	mov	r8, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000c8e:	4c39      	ldr	r4, [pc, #228]	; (8000d74 <HAL_FLASH_Program+0x1b4>)
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000c90:	2220      	movs	r2, #32
 8000c92:	4643      	mov	r3, r8
 8000c94:	4252      	negs	r2, r2
 8000c96:	189b      	adds	r3, r3, r2
 8000c98:	d457      	bmi.n	8000d4a <HAL_FLASH_Program+0x18a>
 8000c9a:	465a      	mov	r2, fp
 8000c9c:	40da      	lsrs	r2, r3
 8000c9e:	0013      	movs	r3, r2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	4651      	mov	r1, sl
 8000ca4:	61ca      	str	r2, [r1, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000ca6:	6922      	ldr	r2, [r4, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000ca8:	b29b      	uxth	r3, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000caa:	432a      	orrs	r2, r5
 8000cac:	6122      	str	r2, [r4, #16]
  *(__IO uint16_t*)Address = Data;
 8000cae:	464a      	mov	r2, r9
 8000cb0:	8013      	strh	r3, [r2, #0]
  uint32_t tickstart = HAL_GetTick();
 8000cb2:	f7ff fbc9 	bl	8000448 <HAL_GetTick>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000cb6:	4e30      	ldr	r6, [pc, #192]	; (8000d78 <HAL_FLASH_Program+0x1b8>)
  uint32_t tickstart = HAL_GetTick();
 8000cb8:	0007      	movs	r7, r0
 8000cba:	e004      	b.n	8000cc6 <HAL_FLASH_Program+0x106>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000cbc:	f7ff fbc4 	bl	8000448 <HAL_GetTick>
 8000cc0:	1bc0      	subs	r0, r0, r7
 8000cc2:	42b0      	cmp	r0, r6
 8000cc4:	d83c      	bhi.n	8000d40 <HAL_FLASH_Program+0x180>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000cc6:	68e3      	ldr	r3, [r4, #12]
 8000cc8:	421d      	tst	r5, r3
 8000cca:	d1f7      	bne.n	8000cbc <HAL_FLASH_Program+0xfc>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000ccc:	2220      	movs	r2, #32
 8000cce:	68e3      	ldr	r3, [r4, #12]
 8000cd0:	421a      	tst	r2, r3
 8000cd2:	d001      	beq.n	8000cd8 <HAL_FLASH_Program+0x118>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000cd4:	2320      	movs	r3, #32
 8000cd6:	60e3      	str	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000cd8:	68e3      	ldr	r3, [r4, #12]
 8000cda:	06db      	lsls	r3, r3, #27
 8000cdc:	d402      	bmi.n	8000ce4 <HAL_FLASH_Program+0x124>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000cde:	68e3      	ldr	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000ce0:	075b      	lsls	r3, r3, #29
 8000ce2:	d51f      	bpl.n	8000d24 <HAL_FLASH_Program+0x164>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000ce4:	4b23      	ldr	r3, [pc, #140]	; (8000d74 <HAL_FLASH_Program+0x1b4>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	06db      	lsls	r3, r3, #27
 8000cea:	d52b      	bpl.n	8000d44 <HAL_FLASH_Program+0x184>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000cec:	4653      	mov	r3, sl
 8000cee:	2202      	movs	r2, #2
 8000cf0:	69db      	ldr	r3, [r3, #28]
 8000cf2:	2114      	movs	r1, #20
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	4652      	mov	r2, sl
 8000cf8:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8000cfa:	2310      	movs	r3, #16
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000cfc:	4a1d      	ldr	r2, [pc, #116]	; (8000d74 <HAL_FLASH_Program+0x1b4>)
 8000cfe:	68d2      	ldr	r2, [r2, #12]
 8000d00:	0752      	lsls	r2, r2, #29
 8000d02:	d506      	bpl.n	8000d12 <HAL_FLASH_Program+0x152>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000d04:	4653      	mov	r3, sl
 8000d06:	2201      	movs	r2, #1
 8000d08:	69db      	ldr	r3, [r3, #28]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	4652      	mov	r2, sl
 8000d0e:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8000d10:	000b      	movs	r3, r1
    return HAL_ERROR;
 8000d12:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000d14:	4a17      	ldr	r2, [pc, #92]	; (8000d74 <HAL_FLASH_Program+0x1b4>)
 8000d16:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000d18:	2101      	movs	r1, #1
 8000d1a:	4a16      	ldr	r2, [pc, #88]	; (8000d74 <HAL_FLASH_Program+0x1b4>)
 8000d1c:	6913      	ldr	r3, [r2, #16]
 8000d1e:	438b      	bics	r3, r1
 8000d20:	6113      	str	r3, [r2, #16]
 8000d22:	e79f      	b.n	8000c64 <HAL_FLASH_Program+0xa4>
 8000d24:	6923      	ldr	r3, [r4, #16]
 8000d26:	43ab      	bics	r3, r5
 8000d28:	6123      	str	r3, [r4, #16]
 8000d2a:	2310      	movs	r3, #16
 8000d2c:	469c      	mov	ip, r3
 8000d2e:	3b0e      	subs	r3, #14
 8000d30:	44e0      	add	r8, ip
 8000d32:	469c      	mov	ip, r3
    for (index = 0U; index < nbiterations; index++)
 8000d34:	9b00      	ldr	r3, [sp, #0]
 8000d36:	44e1      	add	r9, ip
 8000d38:	454b      	cmp	r3, r9
 8000d3a:	d1a9      	bne.n	8000c90 <HAL_FLASH_Program+0xd0>
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	e791      	b.n	8000c64 <HAL_FLASH_Program+0xa4>
        return HAL_TIMEOUT;
 8000d40:	2003      	movs	r0, #3
 8000d42:	e7e9      	b.n	8000d18 <HAL_FLASH_Program+0x158>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000d44:	2104      	movs	r1, #4
  uint32_t flags = 0U;
 8000d46:	2300      	movs	r3, #0
 8000d48:	e7d8      	b.n	8000cfc <HAL_FLASH_Program+0x13c>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000d4a:	4642      	mov	r2, r8
 8000d4c:	2320      	movs	r3, #32
 8000d4e:	1a9b      	subs	r3, r3, r2
 8000d50:	465a      	mov	r2, fp
 8000d52:	4641      	mov	r1, r8
 8000d54:	409a      	lsls	r2, r3
 8000d56:	9b01      	ldr	r3, [sp, #4]
 8000d58:	40cb      	lsrs	r3, r1
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	e7a0      	b.n	8000ca0 <HAL_FLASH_Program+0xe0>
        return HAL_TIMEOUT;
 8000d5e:	2003      	movs	r0, #3
 8000d60:	e780      	b.n	8000c64 <HAL_FLASH_Program+0xa4>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000d62:	2104      	movs	r1, #4
  uint32_t flags = 0U;
 8000d64:	2300      	movs	r3, #0
 8000d66:	e76f      	b.n	8000c48 <HAL_FLASH_Program+0x88>
      nbiterations = 1U;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	e786      	b.n	8000c7a <HAL_FLASH_Program+0xba>
      nbiterations = 2U;
 8000d6c:	3b02      	subs	r3, #2
 8000d6e:	e784      	b.n	8000c7a <HAL_FLASH_Program+0xba>
 8000d70:	20000128 	.word	0x20000128
 8000d74:	40022000 	.word	0x40022000
 8000d78:	0000c350 	.word	0x0000c350

08000d7c <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8000d7c:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <HAL_FLASH_Unlock+0x18>)
    return HAL_ERROR;
 8000d7e:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8000d80:	691a      	ldr	r2, [r3, #16]
 8000d82:	0612      	lsls	r2, r2, #24
 8000d84:	d504      	bpl.n	8000d90 <HAL_FLASH_Unlock+0x14>
  return HAL_OK; 
 8000d86:	2000      	movs	r0, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000d88:	4a03      	ldr	r2, [pc, #12]	; (8000d98 <HAL_FLASH_Unlock+0x1c>)
 8000d8a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000d8c:	4a03      	ldr	r2, [pc, #12]	; (8000d9c <HAL_FLASH_Unlock+0x20>)
 8000d8e:	605a      	str	r2, [r3, #4]
}
 8000d90:	4770      	bx	lr
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	40022000 	.word	0x40022000
 8000d98:	45670123 	.word	0x45670123
 8000d9c:	cdef89ab 	.word	0xcdef89ab

08000da0 <FLASH_WaitForLastOperation>:
{
 8000da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000da2:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000da4:	f7ff fb50 	bl	8000448 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000da8:	2501      	movs	r5, #1
  uint32_t tickstart = HAL_GetTick();
 8000daa:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000dac:	4e1f      	ldr	r6, [pc, #124]	; (8000e2c <FLASH_WaitForLastOperation+0x8c>)
 8000dae:	1c63      	adds	r3, r4, #1
 8000db0:	d125      	bne.n	8000dfe <FLASH_WaitForLastOperation+0x5e>
 8000db2:	2201      	movs	r2, #1
 8000db4:	491d      	ldr	r1, [pc, #116]	; (8000e2c <FLASH_WaitForLastOperation+0x8c>)
 8000db6:	68cb      	ldr	r3, [r1, #12]
 8000db8:	421a      	tst	r2, r3
 8000dba:	d1fc      	bne.n	8000db6 <FLASH_WaitForLastOperation+0x16>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000dbc:	2220      	movs	r2, #32
 8000dbe:	4b1b      	ldr	r3, [pc, #108]	; (8000e2c <FLASH_WaitForLastOperation+0x8c>)
 8000dc0:	68d9      	ldr	r1, [r3, #12]
 8000dc2:	420a      	tst	r2, r1
 8000dc4:	d127      	bne.n	8000e16 <FLASH_WaitForLastOperation+0x76>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000dc6:	4b19      	ldr	r3, [pc, #100]	; (8000e2c <FLASH_WaitForLastOperation+0x8c>)
 8000dc8:	68da      	ldr	r2, [r3, #12]
 8000dca:	06d2      	lsls	r2, r2, #27
 8000dcc:	d403      	bmi.n	8000dd6 <FLASH_WaitForLastOperation+0x36>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000dce:	68db      	ldr	r3, [r3, #12]
  return HAL_OK;
 8000dd0:	2000      	movs	r0, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000dd2:	075b      	lsls	r3, r3, #29
 8000dd4:	d512      	bpl.n	8000dfc <FLASH_WaitForLastOperation+0x5c>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000dd6:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <FLASH_WaitForLastOperation+0x8c>)
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	06db      	lsls	r3, r3, #27
 8000ddc:	d41d      	bmi.n	8000e1a <FLASH_WaitForLastOperation+0x7a>
 8000dde:	2104      	movs	r1, #4
  uint32_t flags = 0U;
 8000de0:	2300      	movs	r3, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000de2:	4a12      	ldr	r2, [pc, #72]	; (8000e2c <FLASH_WaitForLastOperation+0x8c>)
 8000de4:	68d2      	ldr	r2, [r2, #12]
 8000de6:	0752      	lsls	r2, r2, #29
 8000de8:	d505      	bpl.n	8000df6 <FLASH_WaitForLastOperation+0x56>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000dea:	2001      	movs	r0, #1
 8000dec:	4a10      	ldr	r2, [pc, #64]	; (8000e30 <FLASH_WaitForLastOperation+0x90>)
 8000dee:	69d3      	ldr	r3, [r2, #28]
 8000df0:	4303      	orrs	r3, r0
 8000df2:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8000df4:	000b      	movs	r3, r1
    return HAL_ERROR;
 8000df6:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000df8:	4a0c      	ldr	r2, [pc, #48]	; (8000e2c <FLASH_WaitForLastOperation+0x8c>)
 8000dfa:	60d3      	str	r3, [r2, #12]
}
 8000dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000dfe:	68f3      	ldr	r3, [r6, #12]
 8000e00:	421d      	tst	r5, r3
 8000e02:	d0db      	beq.n	8000dbc <FLASH_WaitForLastOperation+0x1c>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000e04:	2c00      	cmp	r4, #0
 8000e06:	d004      	beq.n	8000e12 <FLASH_WaitForLastOperation+0x72>
 8000e08:	f7ff fb1e 	bl	8000448 <HAL_GetTick>
 8000e0c:	1bc0      	subs	r0, r0, r7
 8000e0e:	4284      	cmp	r4, r0
 8000e10:	d2cd      	bcs.n	8000dae <FLASH_WaitForLastOperation+0xe>
        return HAL_TIMEOUT;
 8000e12:	2003      	movs	r0, #3
 8000e14:	e7f2      	b.n	8000dfc <FLASH_WaitForLastOperation+0x5c>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000e16:	60da      	str	r2, [r3, #12]
 8000e18:	e7d5      	b.n	8000dc6 <FLASH_WaitForLastOperation+0x26>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000e1a:	2102      	movs	r1, #2
 8000e1c:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <FLASH_WaitForLastOperation+0x90>)
 8000e1e:	69d3      	ldr	r3, [r2, #28]
 8000e20:	430b      	orrs	r3, r1
 8000e22:	61d3      	str	r3, [r2, #28]
 8000e24:	3112      	adds	r1, #18
    flags |= FLASH_FLAG_WRPERR;
 8000e26:	2310      	movs	r3, #16
 8000e28:	e7db      	b.n	8000de2 <FLASH_WaitForLastOperation+0x42>
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	40022000 	.word	0x40022000
 8000e30:	20000128 	.word	0x20000128

08000e34 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e36:	464f      	mov	r7, r9
 8000e38:	4646      	mov	r6, r8
 8000e3a:	46d6      	mov	lr, sl
 8000e3c:	b5c0      	push	{r6, r7, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t address = 0U;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000e3e:	4f2f      	ldr	r7, [pc, #188]	; (8000efc <HAL_FLASHEx_Erase+0xc8>)
{
 8000e40:	0006      	movs	r6, r0
  __HAL_LOCK(&pFlash);
 8000e42:	7e3b      	ldrb	r3, [r7, #24]
{
 8000e44:	4689      	mov	r9, r1
  __HAL_LOCK(&pFlash);
 8000e46:	2002      	movs	r0, #2
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d041      	beq.n	8000ed0 <HAL_FLASHEx_Erase+0x9c>
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	763b      	strb	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000e50:	6833      	ldr	r3, [r6, #0]
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000e52:	482b      	ldr	r0, [pc, #172]	; (8000f00 <HAL_FLASHEx_Erase+0xcc>)
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d034      	beq.n	8000ec2 <HAL_FLASHEx_Erase+0x8e>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000e58:	f7ff ffa2 	bl	8000da0 <FLASH_WaitForLastOperation>
 8000e5c:	2800      	cmp	r0, #0
 8000e5e:	d134      	bne.n	8000eca <HAL_FLASHEx_Erase+0x96>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8000e60:	2301      	movs	r3, #1
 8000e62:	464a      	mov	r2, r9
 8000e64:	425b      	negs	r3, r3
 8000e66:	6013      	str	r3, [r2, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000e68:	68b3      	ldr	r3, [r6, #8]
        for(address = pEraseInit->PageAddress;
 8000e6a:	6875      	ldr	r5, [r6, #4]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000e6c:	029b      	lsls	r3, r3, #10
 8000e6e:	195b      	adds	r3, r3, r5
        for(address = pEraseInit->PageAddress;
 8000e70:	429d      	cmp	r5, r3
 8000e72:	d22a      	bcs.n	8000eca <HAL_FLASHEx_Erase+0x96>
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000e74:	2300      	movs	r3, #0

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000e76:	4c23      	ldr	r4, [pc, #140]	; (8000f04 <HAL_FLASHEx_Erase+0xd0>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000e78:	4698      	mov	r8, r3
 8000e7a:	e00a      	b.n	8000e92 <HAL_FLASHEx_Erase+0x5e>
            address += FLASH_PAGE_SIZE)
 8000e7c:	2380      	movs	r3, #128	; 0x80
 8000e7e:	00db      	lsls	r3, r3, #3
 8000e80:	469c      	mov	ip, r3
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000e82:	6872      	ldr	r2, [r6, #4]
            address += FLASH_PAGE_SIZE)
 8000e84:	4465      	add	r5, ip
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000e86:	4694      	mov	ip, r2
 8000e88:	68b3      	ldr	r3, [r6, #8]
 8000e8a:	029b      	lsls	r3, r3, #10
 8000e8c:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 8000e8e:	42ab      	cmp	r3, r5
 8000e90:	d91c      	bls.n	8000ecc <HAL_FLASHEx_Erase+0x98>
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000e92:	2202      	movs	r2, #2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000e94:	4643      	mov	r3, r8
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000e96:	4692      	mov	sl, r2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000e98:	61fb      	str	r3, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000e9a:	6923      	ldr	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000e9c:	4818      	ldr	r0, [pc, #96]	; (8000f00 <HAL_FLASHEx_Erase+0xcc>)
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	6123      	str	r3, [r4, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000ea2:	6165      	str	r5, [r4, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000ea4:	6923      	ldr	r3, [r4, #16]
 8000ea6:	323e      	adds	r2, #62	; 0x3e
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	6123      	str	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000eac:	f7ff ff78 	bl	8000da0 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000eb0:	4652      	mov	r2, sl
 8000eb2:	6923      	ldr	r3, [r4, #16]
 8000eb4:	4393      	bics	r3, r2
 8000eb6:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8000eb8:	2800      	cmp	r0, #0
 8000eba:	d0df      	beq.n	8000e7c <HAL_FLASHEx_Erase+0x48>
            *PageError = address;
 8000ebc:	464b      	mov	r3, r9
 8000ebe:	601d      	str	r5, [r3, #0]
            break;
 8000ec0:	e004      	b.n	8000ecc <HAL_FLASHEx_Erase+0x98>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000ec2:	f7ff ff6d 	bl	8000da0 <FLASH_WaitForLastOperation>
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	d007      	beq.n	8000eda <HAL_FLASHEx_Erase+0xa6>
  HAL_StatusTypeDef status = HAL_ERROR;
 8000eca:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8000ecc:	2300      	movs	r3, #0
 8000ece:	763b      	strb	r3, [r7, #24]
}
 8000ed0:	bc1c      	pop	{r2, r3, r4}
 8000ed2:	4690      	mov	r8, r2
 8000ed4:	4699      	mov	r9, r3
 8000ed6:	46a2      	mov	sl, r4
 8000ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000eda:	2504      	movs	r5, #4
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000edc:	2240      	movs	r2, #64	; 0x40
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000ede:	4c09      	ldr	r4, [pc, #36]	; (8000f04 <HAL_FLASHEx_Erase+0xd0>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000ee0:	61f8      	str	r0, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000ee2:	6923      	ldr	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000ee4:	4806      	ldr	r0, [pc, #24]	; (8000f00 <HAL_FLASHEx_Erase+0xcc>)
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000ee6:	432b      	orrs	r3, r5
 8000ee8:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000eea:	6923      	ldr	r3, [r4, #16]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000ef0:	f7ff ff56 	bl	8000da0 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000ef4:	6923      	ldr	r3, [r4, #16]
 8000ef6:	43ab      	bics	r3, r5
 8000ef8:	6123      	str	r3, [r4, #16]
 8000efa:	e7e7      	b.n	8000ecc <HAL_FLASHEx_Erase+0x98>
 8000efc:	20000128 	.word	0x20000128
 8000f00:	0000c350 	.word	0x0000c350
 8000f04:	40022000 	.word	0x40022000

08000f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f0a:	46de      	mov	lr, fp
 8000f0c:	4657      	mov	r7, sl
 8000f0e:	464e      	mov	r6, r9
 8000f10:	4645      	mov	r5, r8
 8000f12:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000f14:	680b      	ldr	r3, [r1, #0]
{ 
 8000f16:	b085      	sub	sp, #20
 8000f18:	468b      	mov	fp, r1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000f1a:	469c      	mov	ip, r3
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d100      	bne.n	8000f24 <HAL_GPIO_Init+0x1c>
 8000f22:	e0b7      	b.n	8001094 <HAL_GPIO_Init+0x18c>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f24:	4b64      	ldr	r3, [pc, #400]	; (80010b8 <HAL_GPIO_Init+0x1b0>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f26:	46e1      	mov	r9, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f28:	469a      	mov	sl, r3
        temp = EXTI->IMR;
 8000f2a:	4b64      	ldr	r3, [pc, #400]	; (80010bc <HAL_GPIO_Init+0x1b4>)
 8000f2c:	4698      	mov	r8, r3
 8000f2e:	e067      	b.n	8001000 <HAL_GPIO_Init+0xf8>
      temp = GPIOx->MODER;
 8000f30:	6803      	ldr	r3, [r0, #0]
 8000f32:	0056      	lsls	r6, r2, #1
 8000f34:	469c      	mov	ip, r3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000f36:	2303      	movs	r3, #3
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f38:	2703      	movs	r7, #3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000f3a:	40b3      	lsls	r3, r6
 8000f3c:	4664      	mov	r4, ip
 8000f3e:	43db      	mvns	r3, r3
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f40:	400f      	ands	r7, r1
 8000f42:	40b7      	lsls	r7, r6
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000f44:	401c      	ands	r4, r3
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f46:	433c      	orrs	r4, r7
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f48:	9f01      	ldr	r7, [sp, #4]
      GPIOx->MODER = temp;
 8000f4a:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f4c:	3f01      	subs	r7, #1
 8000f4e:	2f01      	cmp	r7, #1
 8000f50:	d800      	bhi.n	8000f54 <HAL_GPIO_Init+0x4c>
 8000f52:	e081      	b.n	8001058 <HAL_GPIO_Init+0x150>
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000f54:	465c      	mov	r4, fp
      temp = GPIOx->PUPDR;
 8000f56:	68c5      	ldr	r5, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f58:	402b      	ands	r3, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000f5a:	68a5      	ldr	r5, [r4, #8]
 8000f5c:	40b5      	lsls	r5, r6
 8000f5e:	432b      	orrs	r3, r5
      GPIOx->PUPDR = temp;
 8000f60:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000f62:	2380      	movs	r3, #128	; 0x80
 8000f64:	055b      	lsls	r3, r3, #21
 8000f66:	4219      	tst	r1, r3
 8000f68:	d046      	beq.n	8000ff8 <HAL_GPIO_Init+0xf0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6a:	4653      	mov	r3, sl
 8000f6c:	2401      	movs	r4, #1
 8000f6e:	699b      	ldr	r3, [r3, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000f70:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f72:	4323      	orrs	r3, r4
 8000f74:	4654      	mov	r4, sl
 8000f76:	61a3      	str	r3, [r4, #24]
 8000f78:	69a3      	ldr	r3, [r4, #24]
 8000f7a:	2401      	movs	r4, #1
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000f7c:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7e:	4023      	ands	r3, r4
 8000f80:	4c4f      	ldr	r4, [pc, #316]	; (80010c0 <HAL_GPIO_Init+0x1b8>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000f82:	4016      	ands	r6, r2
 8000f84:	46a4      	mov	ip, r4
 8000f86:	00b6      	lsls	r6, r6, #2
 8000f88:	40b7      	lsls	r7, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f8a:	2490      	movs	r4, #144	; 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8c:	9303      	str	r3, [sp, #12]
 8000f8e:	9b03      	ldr	r3, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8000f90:	0893      	lsrs	r3, r2, #2
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	4463      	add	r3, ip
 8000f96:	689d      	ldr	r5, [r3, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f98:	05e4      	lsls	r4, r4, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000f9a:	43bd      	bics	r5, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f9c:	42a0      	cmp	r0, r4
 8000f9e:	d100      	bne.n	8000fa2 <HAL_GPIO_Init+0x9a>
 8000fa0:	e07f      	b.n	80010a2 <HAL_GPIO_Init+0x19a>
 8000fa2:	4f48      	ldr	r7, [pc, #288]	; (80010c4 <HAL_GPIO_Init+0x1bc>)
 8000fa4:	42b8      	cmp	r0, r7
 8000fa6:	d100      	bne.n	8000faa <HAL_GPIO_Init+0xa2>
 8000fa8:	e07d      	b.n	80010a6 <HAL_GPIO_Init+0x19e>
 8000faa:	4f47      	ldr	r7, [pc, #284]	; (80010c8 <HAL_GPIO_Init+0x1c0>)
 8000fac:	42b8      	cmp	r0, r7
 8000fae:	d100      	bne.n	8000fb2 <HAL_GPIO_Init+0xaa>
 8000fb0:	e07c      	b.n	80010ac <HAL_GPIO_Init+0x1a4>
 8000fb2:	4f46      	ldr	r7, [pc, #280]	; (80010cc <HAL_GPIO_Init+0x1c4>)
 8000fb4:	42b8      	cmp	r0, r7
 8000fb6:	d100      	bne.n	8000fba <HAL_GPIO_Init+0xb2>
 8000fb8:	e07b      	b.n	80010b2 <HAL_GPIO_Init+0x1aa>
 8000fba:	2705      	movs	r7, #5
 8000fbc:	40b7      	lsls	r7, r6
 8000fbe:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8000fc0:	609d      	str	r5, [r3, #8]
        temp = EXTI->IMR;
 8000fc2:	4643      	mov	r3, r8
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000fc4:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->IMR;
 8000fc6:	681b      	ldr	r3, [r3, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000fc8:	43e5      	mvns	r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fca:	03cc      	lsls	r4, r1, #15
 8000fcc:	d45f      	bmi.n	800108e <HAL_GPIO_Init+0x186>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000fce:	402b      	ands	r3, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 8000fd0:	4644      	mov	r4, r8
 8000fd2:	6023      	str	r3, [r4, #0]

        temp = EXTI->EMR;
 8000fd4:	6863      	ldr	r3, [r4, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fd6:	038c      	lsls	r4, r1, #14
 8000fd8:	d456      	bmi.n	8001088 <HAL_GPIO_Init+0x180>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000fda:	402b      	ands	r3, r5
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 8000fdc:	4644      	mov	r4, r8
 8000fde:	6063      	str	r3, [r4, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fe0:	68a3      	ldr	r3, [r4, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fe2:	02cc      	lsls	r4, r1, #11
 8000fe4:	d44d      	bmi.n	8001082 <HAL_GPIO_Init+0x17a>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000fe6:	402b      	ands	r3, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 8000fe8:	4644      	mov	r4, r8
 8000fea:	60a3      	str	r3, [r4, #8]

        temp = EXTI->FTSR;
 8000fec:	68e3      	ldr	r3, [r4, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fee:	0289      	lsls	r1, r1, #10
 8000ff0:	d444      	bmi.n	800107c <HAL_GPIO_Init+0x174>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000ff2:	402b      	ands	r3, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 8000ff4:	4641      	mov	r1, r8
 8000ff6:	60cb      	str	r3, [r1, #12]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000ff8:	464b      	mov	r3, r9
      }
    }
    
    position++;
 8000ffa:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000ffc:	40d3      	lsrs	r3, r2
 8000ffe:	d049      	beq.n	8001094 <HAL_GPIO_Init+0x18c>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001000:	2501      	movs	r5, #1
 8001002:	464c      	mov	r4, r9
 8001004:	4095      	lsls	r5, r2
 8001006:	402c      	ands	r4, r5
 8001008:	9400      	str	r4, [sp, #0]
    if(iocurrent)
 800100a:	d0f5      	beq.n	8000ff8 <HAL_GPIO_Init+0xf0>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800100c:	465b      	mov	r3, fp
 800100e:	6859      	ldr	r1, [r3, #4]
 8001010:	2310      	movs	r3, #16
 8001012:	000f      	movs	r7, r1
 8001014:	439f      	bics	r7, r3
 8001016:	003b      	movs	r3, r7
 8001018:	9701      	str	r7, [sp, #4]
 800101a:	2f02      	cmp	r7, #2
 800101c:	d188      	bne.n	8000f30 <HAL_GPIO_Init+0x28>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 800101e:	240f      	movs	r4, #15
 8001020:	3305      	adds	r3, #5
 8001022:	4013      	ands	r3, r2
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	409c      	lsls	r4, r3
        temp = GPIOx->AFR[position >> 3];
 8001028:	08d6      	lsrs	r6, r2, #3
 800102a:	00b6      	lsls	r6, r6, #2
 800102c:	1986      	adds	r6, r0, r6
 800102e:	6a37      	ldr	r7, [r6, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8001030:	43a7      	bics	r7, r4
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8001032:	465c      	mov	r4, fp
 8001034:	6924      	ldr	r4, [r4, #16]
 8001036:	409c      	lsls	r4, r3
 8001038:	0023      	movs	r3, r4
 800103a:	433b      	orrs	r3, r7
        GPIOx->AFR[position >> 3U] = temp;
 800103c:	6233      	str	r3, [r6, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 800103e:	2303      	movs	r3, #3
 8001040:	0056      	lsls	r6, r2, #1
 8001042:	40b3      	lsls	r3, r6
 8001044:	43db      	mvns	r3, r3
      temp = GPIOx->MODER;
 8001046:	6807      	ldr	r7, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8001048:	401f      	ands	r7, r3
 800104a:	46bc      	mov	ip, r7
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800104c:	2703      	movs	r7, #3
 800104e:	400f      	ands	r7, r1
 8001050:	40b7      	lsls	r7, r6
 8001052:	4664      	mov	r4, ip
 8001054:	4327      	orrs	r7, r4
      GPIOx->MODER = temp;
 8001056:	6007      	str	r7, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 8001058:	6887      	ldr	r7, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 800105a:	465c      	mov	r4, fp
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800105c:	401f      	ands	r7, r3
 800105e:	46bc      	mov	ip, r7
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8001060:	68e7      	ldr	r7, [r4, #12]
 8001062:	4664      	mov	r4, ip
 8001064:	40b7      	lsls	r7, r6
 8001066:	4327      	orrs	r7, r4
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001068:	2401      	movs	r4, #1
        GPIOx->OSPEEDR = temp;
 800106a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800106c:	6847      	ldr	r7, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800106e:	43af      	bics	r7, r5
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001070:	090d      	lsrs	r5, r1, #4
 8001072:	4025      	ands	r5, r4
 8001074:	4095      	lsls	r5, r2
 8001076:	433d      	orrs	r5, r7
        GPIOx->OTYPER = temp;
 8001078:	6045      	str	r5, [r0, #4]
 800107a:	e76b      	b.n	8000f54 <HAL_GPIO_Init+0x4c>
          SET_BIT(temp, iocurrent); 
 800107c:	9900      	ldr	r1, [sp, #0]
 800107e:	430b      	orrs	r3, r1
 8001080:	e7b8      	b.n	8000ff4 <HAL_GPIO_Init+0xec>
          SET_BIT(temp, iocurrent); 
 8001082:	9c00      	ldr	r4, [sp, #0]
 8001084:	4323      	orrs	r3, r4
 8001086:	e7af      	b.n	8000fe8 <HAL_GPIO_Init+0xe0>
          SET_BIT(temp, iocurrent); 
 8001088:	9c00      	ldr	r4, [sp, #0]
 800108a:	4323      	orrs	r3, r4
 800108c:	e7a6      	b.n	8000fdc <HAL_GPIO_Init+0xd4>
          SET_BIT(temp, iocurrent); 
 800108e:	9c00      	ldr	r4, [sp, #0]
 8001090:	4323      	orrs	r3, r4
 8001092:	e79d      	b.n	8000fd0 <HAL_GPIO_Init+0xc8>
  } 
}
 8001094:	b005      	add	sp, #20
 8001096:	bc3c      	pop	{r2, r3, r4, r5}
 8001098:	4690      	mov	r8, r2
 800109a:	4699      	mov	r9, r3
 800109c:	46a2      	mov	sl, r4
 800109e:	46ab      	mov	fp, r5
 80010a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010a2:	2700      	movs	r7, #0
 80010a4:	e78b      	b.n	8000fbe <HAL_GPIO_Init+0xb6>
 80010a6:	2701      	movs	r7, #1
 80010a8:	40b7      	lsls	r7, r6
 80010aa:	e788      	b.n	8000fbe <HAL_GPIO_Init+0xb6>
 80010ac:	2702      	movs	r7, #2
 80010ae:	40b7      	lsls	r7, r6
 80010b0:	e785      	b.n	8000fbe <HAL_GPIO_Init+0xb6>
 80010b2:	2703      	movs	r7, #3
 80010b4:	40b7      	lsls	r7, r6
 80010b6:	e782      	b.n	8000fbe <HAL_GPIO_Init+0xb6>
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40010400 	.word	0x40010400
 80010c0:	40010000 	.word	0x40010000
 80010c4:	48000400 	.word	0x48000400
 80010c8:	48000800 	.word	0x48000800
 80010cc:	48000c00 	.word	0x48000c00

080010d0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010d0:	6900      	ldr	r0, [r0, #16]
 80010d2:	4008      	ands	r0, r1
 80010d4:	1e41      	subs	r1, r0, #1
 80010d6:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80010d8:	b2c0      	uxtb	r0, r0
  }
 80010da:	4770      	bx	lr

080010dc <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80010dc:	b570      	push	{r4, r5, r6, lr}
 80010de:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 80010e0:	d01e      	beq.n	8001120 <HAL_IWDG_Init+0x44>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 80010e2:	6803      	ldr	r3, [r0, #0]
 80010e4:	4a11      	ldr	r2, [pc, #68]	; (800112c <HAL_IWDG_Init+0x50>)
 80010e6:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80010e8:	4a11      	ldr	r2, [pc, #68]	; (8001130 <HAL_IWDG_Init+0x54>)
 80010ea:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80010ec:	6842      	ldr	r2, [r0, #4]
 80010ee:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80010f0:	6882      	ldr	r2, [r0, #8]
 80010f2:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80010f4:	f7ff f9a8 	bl	8000448 <HAL_GetTick>
 80010f8:	0005      	movs	r5, r0

   /* Wait for register to be updated */
  while(hiwdg->Instance->SR != RESET)
 80010fa:	e004      	b.n	8001106 <HAL_IWDG_Init+0x2a>
  {
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 80010fc:	f7ff f9a4 	bl	8000448 <HAL_GetTick>
 8001100:	1b40      	subs	r0, r0, r5
 8001102:	2827      	cmp	r0, #39	; 0x27
 8001104:	d80a      	bhi.n	800111c <HAL_IWDG_Init+0x40>
  while(hiwdg->Instance->SR != RESET)
 8001106:	6823      	ldr	r3, [r4, #0]
 8001108:	68da      	ldr	r2, [r3, #12]
 800110a:	2a00      	cmp	r2, #0
 800110c:	d1f6      	bne.n	80010fc <HAL_IWDG_Init+0x20>
    }
  }

  /* If window parameter is different than current value, modify window 
  register */
  if(hiwdg->Instance->WINR != hiwdg->Init.Window)
 800110e:	6919      	ldr	r1, [r3, #16]
 8001110:	68e2      	ldr	r2, [r4, #12]
 8001112:	4291      	cmp	r1, r2
 8001114:	d006      	beq.n	8001124 <HAL_IWDG_Init+0x48>
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
  }

  /* Return function status */
  return HAL_OK;
 8001116:	2000      	movs	r0, #0
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8001118:	611a      	str	r2, [r3, #16]
}
 800111a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 800111c:	2003      	movs	r0, #3
 800111e:	e7fc      	b.n	800111a <HAL_IWDG_Init+0x3e>
    return HAL_ERROR;
 8001120:	2001      	movs	r0, #1
 8001122:	e7fa      	b.n	800111a <HAL_IWDG_Init+0x3e>
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001124:	4a03      	ldr	r2, [pc, #12]	; (8001134 <HAL_IWDG_Init+0x58>)
  return HAL_OK;
 8001126:	2000      	movs	r0, #0
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	e7f6      	b.n	800111a <HAL_IWDG_Init+0x3e>
 800112c:	0000cccc 	.word	0x0000cccc
 8001130:	00005555 	.word	0x00005555
 8001134:	0000aaaa 	.word	0x0000aaaa

08001138 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001138:	6803      	ldr	r3, [r0, #0]
 800113a:	4a02      	ldr	r2, [pc, #8]	; (8001144 <HAL_IWDG_Refresh+0xc>)

  /* Return function status */
  return HAL_OK;
}
 800113c:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800113e:	601a      	str	r2, [r3, #0]
}
 8001140:	4770      	bx	lr
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	0000aaaa 	.word	0x0000aaaa

08001148 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800114a:	46ce      	mov	lr, r9
 800114c:	4647      	mov	r7, r8
 800114e:	b580      	push	{r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001150:	6803      	ldr	r3, [r0, #0]
{
 8001152:	b083      	sub	sp, #12
 8001154:	0004      	movs	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001156:	07da      	lsls	r2, r3, #31
 8001158:	d52f      	bpl.n	80011ba <HAL_RCC_OscConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800115a:	220c      	movs	r2, #12
 800115c:	48c4      	ldr	r0, [pc, #784]	; (8001470 <HAL_RCC_OscConfig+0x328>)
 800115e:	6841      	ldr	r1, [r0, #4]
 8001160:	4011      	ands	r1, r2
 8001162:	2904      	cmp	r1, #4
 8001164:	d100      	bne.n	8001168 <HAL_RCC_OscConfig+0x20>
 8001166:	e110      	b.n	800138a <HAL_RCC_OscConfig+0x242>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001168:	6841      	ldr	r1, [r0, #4]
 800116a:	400a      	ands	r2, r1
 800116c:	2a08      	cmp	r2, #8
 800116e:	d100      	bne.n	8001172 <HAL_RCC_OscConfig+0x2a>
 8001170:	e107      	b.n	8001382 <HAL_RCC_OscConfig+0x23a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001172:	6863      	ldr	r3, [r4, #4]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d100      	bne.n	800117a <HAL_RCC_OscConfig+0x32>
 8001178:	e186      	b.n	8001488 <HAL_RCC_OscConfig+0x340>
 800117a:	2b00      	cmp	r3, #0
 800117c:	d100      	bne.n	8001180 <HAL_RCC_OscConfig+0x38>
 800117e:	e11a      	b.n	80013b6 <HAL_RCC_OscConfig+0x26e>
 8001180:	2b05      	cmp	r3, #5
 8001182:	d100      	bne.n	8001186 <HAL_RCC_OscConfig+0x3e>
 8001184:	e1db      	b.n	800153e <HAL_RCC_OscConfig+0x3f6>
 8001186:	4bba      	ldr	r3, [pc, #744]	; (8001470 <HAL_RCC_OscConfig+0x328>)
 8001188:	49ba      	ldr	r1, [pc, #744]	; (8001474 <HAL_RCC_OscConfig+0x32c>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	400a      	ands	r2, r1
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	49b9      	ldr	r1, [pc, #740]	; (8001478 <HAL_RCC_OscConfig+0x330>)
 8001194:	400a      	ands	r2, r1
 8001196:	601a      	str	r2, [r3, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001198:	f7ff f956 	bl	8000448 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800119c:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 800119e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011a0:	4eb3      	ldr	r6, [pc, #716]	; (8001470 <HAL_RCC_OscConfig+0x328>)
 80011a2:	02ad      	lsls	r5, r5, #10
 80011a4:	e005      	b.n	80011b2 <HAL_RCC_OscConfig+0x6a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011a6:	f7ff f94f 	bl	8000448 <HAL_GetTick>
 80011aa:	1bc0      	subs	r0, r0, r7
 80011ac:	2864      	cmp	r0, #100	; 0x64
 80011ae:	d900      	bls.n	80011b2 <HAL_RCC_OscConfig+0x6a>
 80011b0:	e12f      	b.n	8001412 <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011b2:	6833      	ldr	r3, [r6, #0]
 80011b4:	422b      	tst	r3, r5
 80011b6:	d0f6      	beq.n	80011a6 <HAL_RCC_OscConfig+0x5e>
 80011b8:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ba:	079a      	lsls	r2, r3, #30
 80011bc:	d529      	bpl.n	8001212 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80011be:	220c      	movs	r2, #12
 80011c0:	49ab      	ldr	r1, [pc, #684]	; (8001470 <HAL_RCC_OscConfig+0x328>)
 80011c2:	6848      	ldr	r0, [r1, #4]
 80011c4:	4202      	tst	r2, r0
 80011c6:	d100      	bne.n	80011ca <HAL_RCC_OscConfig+0x82>
 80011c8:	e0bf      	b.n	800134a <HAL_RCC_OscConfig+0x202>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80011ca:	6848      	ldr	r0, [r1, #4]
 80011cc:	4002      	ands	r2, r0
 80011ce:	2a08      	cmp	r2, #8
 80011d0:	d100      	bne.n	80011d4 <HAL_RCC_OscConfig+0x8c>
 80011d2:	e0b6      	b.n	8001342 <HAL_RCC_OscConfig+0x1fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011d4:	68e3      	ldr	r3, [r4, #12]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011d6:	4da6      	ldr	r5, [pc, #664]	; (8001470 <HAL_RCC_OscConfig+0x328>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d100      	bne.n	80011de <HAL_RCC_OscConfig+0x96>
 80011dc:	e134      	b.n	8001448 <HAL_RCC_OscConfig+0x300>
        __HAL_RCC_HSI_ENABLE();
 80011de:	2201      	movs	r2, #1
 80011e0:	682b      	ldr	r3, [r5, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e2:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 80011e4:	4313      	orrs	r3, r2
 80011e6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80011e8:	f7ff f92e 	bl	8000448 <HAL_GetTick>
 80011ec:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ee:	e005      	b.n	80011fc <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011f0:	f7ff f92a 	bl	8000448 <HAL_GetTick>
 80011f4:	1bc0      	subs	r0, r0, r7
 80011f6:	2802      	cmp	r0, #2
 80011f8:	d900      	bls.n	80011fc <HAL_RCC_OscConfig+0xb4>
 80011fa:	e10a      	b.n	8001412 <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011fc:	682b      	ldr	r3, [r5, #0]
 80011fe:	421e      	tst	r6, r3
 8001200:	d0f6      	beq.n	80011f0 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001202:	21f8      	movs	r1, #248	; 0xf8
 8001204:	682a      	ldr	r2, [r5, #0]
 8001206:	6923      	ldr	r3, [r4, #16]
 8001208:	438a      	bics	r2, r1
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	4313      	orrs	r3, r2
 800120e:	602b      	str	r3, [r5, #0]
 8001210:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001212:	071a      	lsls	r2, r3, #28
 8001214:	d500      	bpl.n	8001218 <HAL_RCC_OscConfig+0xd0>
 8001216:	e07d      	b.n	8001314 <HAL_RCC_OscConfig+0x1cc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001218:	075a      	lsls	r2, r3, #29
 800121a:	d540      	bpl.n	800129e <HAL_RCC_OscConfig+0x156>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800121c:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800121e:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001220:	4b93      	ldr	r3, [pc, #588]	; (8001470 <HAL_RCC_OscConfig+0x328>)
 8001222:	0552      	lsls	r2, r2, #21
 8001224:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001226:	4680      	mov	r8, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001228:	4211      	tst	r1, r2
 800122a:	d108      	bne.n	800123e <HAL_RCC_OscConfig+0xf6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800122c:	69d9      	ldr	r1, [r3, #28]
 800122e:	4311      	orrs	r1, r2
 8001230:	61d9      	str	r1, [r3, #28]
 8001232:	69db      	ldr	r3, [r3, #28]
 8001234:	401a      	ands	r2, r3
 8001236:	9201      	str	r2, [sp, #4]
 8001238:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800123a:	2301      	movs	r3, #1
 800123c:	4698      	mov	r8, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800123e:	2780      	movs	r7, #128	; 0x80
 8001240:	4e8e      	ldr	r6, [pc, #568]	; (800147c <HAL_RCC_OscConfig+0x334>)
 8001242:	007f      	lsls	r7, r7, #1
 8001244:	6833      	ldr	r3, [r6, #0]
 8001246:	423b      	tst	r3, r7
 8001248:	d100      	bne.n	800124c <HAL_RCC_OscConfig+0x104>
 800124a:	e0cd      	b.n	80013e8 <HAL_RCC_OscConfig+0x2a0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800124c:	68a3      	ldr	r3, [r4, #8]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d100      	bne.n	8001254 <HAL_RCC_OscConfig+0x10c>
 8001252:	e0d9      	b.n	8001408 <HAL_RCC_OscConfig+0x2c0>
 8001254:	2b00      	cmp	r3, #0
 8001256:	d100      	bne.n	800125a <HAL_RCC_OscConfig+0x112>
 8001258:	e0dd      	b.n	8001416 <HAL_RCC_OscConfig+0x2ce>
 800125a:	2b05      	cmp	r3, #5
 800125c:	d100      	bne.n	8001260 <HAL_RCC_OscConfig+0x118>
 800125e:	e198      	b.n	8001592 <HAL_RCC_OscConfig+0x44a>
 8001260:	2101      	movs	r1, #1
 8001262:	4b83      	ldr	r3, [pc, #524]	; (8001470 <HAL_RCC_OscConfig+0x328>)
 8001264:	6a1a      	ldr	r2, [r3, #32]
 8001266:	438a      	bics	r2, r1
 8001268:	621a      	str	r2, [r3, #32]
 800126a:	6a1a      	ldr	r2, [r3, #32]
 800126c:	3103      	adds	r1, #3
 800126e:	438a      	bics	r2, r1
 8001270:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001272:	f7ff f8e9 	bl	8000448 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001276:	4f7e      	ldr	r7, [pc, #504]	; (8001470 <HAL_RCC_OscConfig+0x328>)
      tickstart = HAL_GetTick();
 8001278:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800127a:	2602      	movs	r6, #2
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800127c:	4d80      	ldr	r5, [pc, #512]	; (8001480 <HAL_RCC_OscConfig+0x338>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800127e:	e006      	b.n	800128e <HAL_RCC_OscConfig+0x146>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001280:	f7ff f8e2 	bl	8000448 <HAL_GetTick>
 8001284:	464b      	mov	r3, r9
 8001286:	1ac0      	subs	r0, r0, r3
 8001288:	42a8      	cmp	r0, r5
 800128a:	d900      	bls.n	800128e <HAL_RCC_OscConfig+0x146>
 800128c:	e0c1      	b.n	8001412 <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800128e:	6a3b      	ldr	r3, [r7, #32]
 8001290:	421e      	tst	r6, r3
 8001292:	d0f5      	beq.n	8001280 <HAL_RCC_OscConfig+0x138>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001294:	4643      	mov	r3, r8
 8001296:	2b01      	cmp	r3, #1
 8001298:	d100      	bne.n	800129c <HAL_RCC_OscConfig+0x154>
 800129a:	e113      	b.n	80014c4 <HAL_RCC_OscConfig+0x37c>
 800129c:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800129e:	06db      	lsls	r3, r3, #27
 80012a0:	d512      	bpl.n	80012c8 <HAL_RCC_OscConfig+0x180>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80012a2:	6963      	ldr	r3, [r4, #20]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d100      	bne.n	80012aa <HAL_RCC_OscConfig+0x162>
 80012a8:	e155      	b.n	8001556 <HAL_RCC_OscConfig+0x40e>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80012aa:	3305      	adds	r3, #5
 80012ac:	d000      	beq.n	80012b0 <HAL_RCC_OscConfig+0x168>
 80012ae:	e0f2      	b.n	8001496 <HAL_RCC_OscConfig+0x34e>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80012b0:	2104      	movs	r1, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80012b2:	20f8      	movs	r0, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 80012b4:	4a6e      	ldr	r2, [pc, #440]	; (8001470 <HAL_RCC_OscConfig+0x328>)
 80012b6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80012b8:	438b      	bics	r3, r1
 80012ba:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80012bc:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80012be:	69a3      	ldr	r3, [r4, #24]
 80012c0:	4381      	bics	r1, r0
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	430b      	orrs	r3, r1
 80012c6:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012c8:	6a23      	ldr	r3, [r4, #32]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d01c      	beq.n	8001308 <HAL_RCC_OscConfig+0x1c0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012ce:	220c      	movs	r2, #12
 80012d0:	4d67      	ldr	r5, [pc, #412]	; (8001470 <HAL_RCC_OscConfig+0x328>)
 80012d2:	6869      	ldr	r1, [r5, #4]
 80012d4:	400a      	ands	r2, r1
 80012d6:	2a08      	cmp	r2, #8
 80012d8:	d03e      	beq.n	8001358 <HAL_RCC_OscConfig+0x210>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d100      	bne.n	80012e0 <HAL_RCC_OscConfig+0x198>
 80012de:	e0f8      	b.n	80014d2 <HAL_RCC_OscConfig+0x38a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012e0:	682b      	ldr	r3, [r5, #0]
 80012e2:	4a68      	ldr	r2, [pc, #416]	; (8001484 <HAL_RCC_OscConfig+0x33c>)
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012e4:	002c      	movs	r4, r5
        __HAL_RCC_PLL_DISABLE();
 80012e6:	4013      	ands	r3, r2
 80012e8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80012ea:	f7ff f8ad 	bl	8000448 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ee:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 80012f0:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012f2:	04ad      	lsls	r5, r5, #18
 80012f4:	e005      	b.n	8001302 <HAL_RCC_OscConfig+0x1ba>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012f6:	f7ff f8a7 	bl	8000448 <HAL_GetTick>
 80012fa:	1b80      	subs	r0, r0, r6
 80012fc:	2802      	cmp	r0, #2
 80012fe:	d900      	bls.n	8001302 <HAL_RCC_OscConfig+0x1ba>
 8001300:	e087      	b.n	8001412 <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001302:	6823      	ldr	r3, [r4, #0]
 8001304:	422b      	tst	r3, r5
 8001306:	d1f6      	bne.n	80012f6 <HAL_RCC_OscConfig+0x1ae>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001308:	2000      	movs	r0, #0
}
 800130a:	b003      	add	sp, #12
 800130c:	bc0c      	pop	{r2, r3}
 800130e:	4690      	mov	r8, r2
 8001310:	4699      	mov	r9, r3
 8001312:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001314:	69e3      	ldr	r3, [r4, #28]
      __HAL_RCC_LSI_ENABLE();
 8001316:	4d56      	ldr	r5, [pc, #344]	; (8001470 <HAL_RCC_OscConfig+0x328>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001318:	2b00      	cmp	r3, #0
 800131a:	d01f      	beq.n	800135c <HAL_RCC_OscConfig+0x214>
      __HAL_RCC_LSI_ENABLE();
 800131c:	2201      	movs	r2, #1
 800131e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001320:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8001322:	4313      	orrs	r3, r2
 8001324:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8001326:	f7ff f88f 	bl	8000448 <HAL_GetTick>
 800132a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800132c:	e004      	b.n	8001338 <HAL_RCC_OscConfig+0x1f0>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800132e:	f7ff f88b 	bl	8000448 <HAL_GetTick>
 8001332:	1bc0      	subs	r0, r0, r7
 8001334:	2802      	cmp	r0, #2
 8001336:	d86c      	bhi.n	8001412 <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001338:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800133a:	421e      	tst	r6, r3
 800133c:	d0f7      	beq.n	800132e <HAL_RCC_OscConfig+0x1e6>
 800133e:	6823      	ldr	r3, [r4, #0]
 8001340:	e76a      	b.n	8001218 <HAL_RCC_OscConfig+0xd0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001342:	684a      	ldr	r2, [r1, #4]
 8001344:	03d2      	lsls	r2, r2, #15
 8001346:	d500      	bpl.n	800134a <HAL_RCC_OscConfig+0x202>
 8001348:	e744      	b.n	80011d4 <HAL_RCC_OscConfig+0x8c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800134a:	4a49      	ldr	r2, [pc, #292]	; (8001470 <HAL_RCC_OscConfig+0x328>)
 800134c:	6812      	ldr	r2, [r2, #0]
 800134e:	0792      	lsls	r2, r2, #30
 8001350:	d525      	bpl.n	800139e <HAL_RCC_OscConfig+0x256>
 8001352:	68e2      	ldr	r2, [r4, #12]
 8001354:	2a01      	cmp	r2, #1
 8001356:	d022      	beq.n	800139e <HAL_RCC_OscConfig+0x256>
      return HAL_ERROR;
 8001358:	2001      	movs	r0, #1
 800135a:	e7d6      	b.n	800130a <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_DISABLE();
 800135c:	2201      	movs	r2, #1
 800135e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001360:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8001362:	4393      	bics	r3, r2
 8001364:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8001366:	f7ff f86f 	bl	8000448 <HAL_GetTick>
 800136a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800136c:	e004      	b.n	8001378 <HAL_RCC_OscConfig+0x230>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800136e:	f7ff f86b 	bl	8000448 <HAL_GetTick>
 8001372:	1bc0      	subs	r0, r0, r7
 8001374:	2802      	cmp	r0, #2
 8001376:	d84c      	bhi.n	8001412 <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001378:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800137a:	421e      	tst	r6, r3
 800137c:	d1f7      	bne.n	800136e <HAL_RCC_OscConfig+0x226>
 800137e:	6823      	ldr	r3, [r4, #0]
 8001380:	e74a      	b.n	8001218 <HAL_RCC_OscConfig+0xd0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001382:	6842      	ldr	r2, [r0, #4]
 8001384:	03d2      	lsls	r2, r2, #15
 8001386:	d400      	bmi.n	800138a <HAL_RCC_OscConfig+0x242>
 8001388:	e6f3      	b.n	8001172 <HAL_RCC_OscConfig+0x2a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800138a:	4a39      	ldr	r2, [pc, #228]	; (8001470 <HAL_RCC_OscConfig+0x328>)
 800138c:	6812      	ldr	r2, [r2, #0]
 800138e:	0392      	lsls	r2, r2, #14
 8001390:	d400      	bmi.n	8001394 <HAL_RCC_OscConfig+0x24c>
 8001392:	e712      	b.n	80011ba <HAL_RCC_OscConfig+0x72>
 8001394:	6862      	ldr	r2, [r4, #4]
 8001396:	2a00      	cmp	r2, #0
 8001398:	d000      	beq.n	800139c <HAL_RCC_OscConfig+0x254>
 800139a:	e70e      	b.n	80011ba <HAL_RCC_OscConfig+0x72>
 800139c:	e7dc      	b.n	8001358 <HAL_RCC_OscConfig+0x210>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800139e:	25f8      	movs	r5, #248	; 0xf8
 80013a0:	4833      	ldr	r0, [pc, #204]	; (8001470 <HAL_RCC_OscConfig+0x328>)
 80013a2:	6922      	ldr	r2, [r4, #16]
 80013a4:	6801      	ldr	r1, [r0, #0]
 80013a6:	00d2      	lsls	r2, r2, #3
 80013a8:	43a9      	bics	r1, r5
 80013aa:	430a      	orrs	r2, r1
 80013ac:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ae:	071a      	lsls	r2, r3, #28
 80013b0:	d400      	bmi.n	80013b4 <HAL_RCC_OscConfig+0x26c>
 80013b2:	e731      	b.n	8001218 <HAL_RCC_OscConfig+0xd0>
 80013b4:	e7ae      	b.n	8001314 <HAL_RCC_OscConfig+0x1cc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013b6:	4d2e      	ldr	r5, [pc, #184]	; (8001470 <HAL_RCC_OscConfig+0x328>)
 80013b8:	4a2e      	ldr	r2, [pc, #184]	; (8001474 <HAL_RCC_OscConfig+0x32c>)
 80013ba:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013bc:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013be:	4013      	ands	r3, r2
 80013c0:	602b      	str	r3, [r5, #0]
 80013c2:	682b      	ldr	r3, [r5, #0]
 80013c4:	4a2c      	ldr	r2, [pc, #176]	; (8001478 <HAL_RCC_OscConfig+0x330>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013c6:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013c8:	4013      	ands	r3, r2
 80013ca:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80013cc:	f7ff f83c 	bl	8000448 <HAL_GetTick>
 80013d0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013d2:	e004      	b.n	80013de <HAL_RCC_OscConfig+0x296>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013d4:	f7ff f838 	bl	8000448 <HAL_GetTick>
 80013d8:	1bc0      	subs	r0, r0, r7
 80013da:	2864      	cmp	r0, #100	; 0x64
 80013dc:	d819      	bhi.n	8001412 <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013de:	682b      	ldr	r3, [r5, #0]
 80013e0:	4233      	tst	r3, r6
 80013e2:	d1f7      	bne.n	80013d4 <HAL_RCC_OscConfig+0x28c>
 80013e4:	6823      	ldr	r3, [r4, #0]
 80013e6:	e6e8      	b.n	80011ba <HAL_RCC_OscConfig+0x72>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013e8:	6833      	ldr	r3, [r6, #0]
 80013ea:	433b      	orrs	r3, r7
 80013ec:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80013ee:	f7ff f82b 	bl	8000448 <HAL_GetTick>
 80013f2:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013f4:	e004      	b.n	8001400 <HAL_RCC_OscConfig+0x2b8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013f6:	f7ff f827 	bl	8000448 <HAL_GetTick>
 80013fa:	1b40      	subs	r0, r0, r5
 80013fc:	2864      	cmp	r0, #100	; 0x64
 80013fe:	d808      	bhi.n	8001412 <HAL_RCC_OscConfig+0x2ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001400:	6833      	ldr	r3, [r6, #0]
 8001402:	423b      	tst	r3, r7
 8001404:	d0f7      	beq.n	80013f6 <HAL_RCC_OscConfig+0x2ae>
 8001406:	e721      	b.n	800124c <HAL_RCC_OscConfig+0x104>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001408:	4919      	ldr	r1, [pc, #100]	; (8001470 <HAL_RCC_OscConfig+0x328>)
 800140a:	6a0a      	ldr	r2, [r1, #32]
 800140c:	4313      	orrs	r3, r2
 800140e:	620b      	str	r3, [r1, #32]
 8001410:	e72f      	b.n	8001272 <HAL_RCC_OscConfig+0x12a>
            return HAL_TIMEOUT;
 8001412:	2003      	movs	r0, #3
 8001414:	e779      	b.n	800130a <HAL_RCC_OscConfig+0x1c2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001416:	2201      	movs	r2, #1
 8001418:	4e15      	ldr	r6, [pc, #84]	; (8001470 <HAL_RCC_OscConfig+0x328>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800141a:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800141c:	6a33      	ldr	r3, [r6, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800141e:	4d18      	ldr	r5, [pc, #96]	; (8001480 <HAL_RCC_OscConfig+0x338>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001420:	4393      	bics	r3, r2
 8001422:	6233      	str	r3, [r6, #32]
 8001424:	6a33      	ldr	r3, [r6, #32]
 8001426:	3203      	adds	r2, #3
 8001428:	4393      	bics	r3, r2
 800142a:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 800142c:	f7ff f80c 	bl	8000448 <HAL_GetTick>
 8001430:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001432:	e005      	b.n	8001440 <HAL_RCC_OscConfig+0x2f8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001434:	f7ff f808 	bl	8000448 <HAL_GetTick>
 8001438:	464b      	mov	r3, r9
 800143a:	1ac0      	subs	r0, r0, r3
 800143c:	42a8      	cmp	r0, r5
 800143e:	d8e8      	bhi.n	8001412 <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001440:	6a33      	ldr	r3, [r6, #32]
 8001442:	421f      	tst	r7, r3
 8001444:	d1f6      	bne.n	8001434 <HAL_RCC_OscConfig+0x2ec>
 8001446:	e725      	b.n	8001294 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_DISABLE();
 8001448:	2201      	movs	r2, #1
 800144a:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800144c:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 800144e:	4393      	bics	r3, r2
 8001450:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001452:	f7fe fff9 	bl	8000448 <HAL_GetTick>
 8001456:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001458:	e004      	b.n	8001464 <HAL_RCC_OscConfig+0x31c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800145a:	f7fe fff5 	bl	8000448 <HAL_GetTick>
 800145e:	1bc0      	subs	r0, r0, r7
 8001460:	2802      	cmp	r0, #2
 8001462:	d8d6      	bhi.n	8001412 <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001464:	682b      	ldr	r3, [r5, #0]
 8001466:	421e      	tst	r6, r3
 8001468:	d1f7      	bne.n	800145a <HAL_RCC_OscConfig+0x312>
 800146a:	6823      	ldr	r3, [r4, #0]
 800146c:	e6d1      	b.n	8001212 <HAL_RCC_OscConfig+0xca>
 800146e:	46c0      	nop			; (mov r8, r8)
 8001470:	40021000 	.word	0x40021000
 8001474:	fffeffff 	.word	0xfffeffff
 8001478:	fffbffff 	.word	0xfffbffff
 800147c:	40007000 	.word	0x40007000
 8001480:	00001388 	.word	0x00001388
 8001484:	feffffff 	.word	0xfeffffff
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001488:	2380      	movs	r3, #128	; 0x80
 800148a:	4a47      	ldr	r2, [pc, #284]	; (80015a8 <HAL_RCC_OscConfig+0x460>)
 800148c:	025b      	lsls	r3, r3, #9
 800148e:	6811      	ldr	r1, [r2, #0]
 8001490:	430b      	orrs	r3, r1
 8001492:	6013      	str	r3, [r2, #0]
 8001494:	e680      	b.n	8001198 <HAL_RCC_OscConfig+0x50>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001496:	2204      	movs	r2, #4
 8001498:	4d43      	ldr	r5, [pc, #268]	; (80015a8 <HAL_RCC_OscConfig+0x460>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800149a:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 800149c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800149e:	4313      	orrs	r3, r2
 80014a0:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80014a2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80014a4:	3a03      	subs	r2, #3
 80014a6:	4393      	bics	r3, r2
 80014a8:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80014aa:	f7fe ffcd 	bl	8000448 <HAL_GetTick>
 80014ae:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80014b0:	e004      	b.n	80014bc <HAL_RCC_OscConfig+0x374>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80014b2:	f7fe ffc9 	bl	8000448 <HAL_GetTick>
 80014b6:	1bc0      	subs	r0, r0, r7
 80014b8:	2802      	cmp	r0, #2
 80014ba:	d8aa      	bhi.n	8001412 <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80014bc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80014be:	421e      	tst	r6, r3
 80014c0:	d1f7      	bne.n	80014b2 <HAL_RCC_OscConfig+0x36a>
 80014c2:	e701      	b.n	80012c8 <HAL_RCC_OscConfig+0x180>
      __HAL_RCC_PWR_CLK_DISABLE();
 80014c4:	4a38      	ldr	r2, [pc, #224]	; (80015a8 <HAL_RCC_OscConfig+0x460>)
 80014c6:	4939      	ldr	r1, [pc, #228]	; (80015ac <HAL_RCC_OscConfig+0x464>)
 80014c8:	69d3      	ldr	r3, [r2, #28]
 80014ca:	400b      	ands	r3, r1
 80014cc:	61d3      	str	r3, [r2, #28]
 80014ce:	6823      	ldr	r3, [r4, #0]
 80014d0:	e6e5      	b.n	800129e <HAL_RCC_OscConfig+0x156>
        __HAL_RCC_PLL_DISABLE();
 80014d2:	682b      	ldr	r3, [r5, #0]
 80014d4:	4a36      	ldr	r2, [pc, #216]	; (80015b0 <HAL_RCC_OscConfig+0x468>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014d6:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80014d8:	4013      	ands	r3, r2
 80014da:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80014dc:	f7fe ffb4 	bl	8000448 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014e0:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 80014e2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014e4:	e004      	b.n	80014f0 <HAL_RCC_OscConfig+0x3a8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014e6:	f7fe ffaf 	bl	8000448 <HAL_GetTick>
 80014ea:	1bc0      	subs	r0, r0, r7
 80014ec:	2802      	cmp	r0, #2
 80014ee:	d890      	bhi.n	8001412 <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014f0:	682b      	ldr	r3, [r5, #0]
 80014f2:	4233      	tst	r3, r6
 80014f4:	d1f7      	bne.n	80014e6 <HAL_RCC_OscConfig+0x39e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014f6:	220f      	movs	r2, #15
 80014f8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80014fa:	4393      	bics	r3, r2
 80014fc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80014fe:	4313      	orrs	r3, r2
 8001500:	62eb      	str	r3, [r5, #44]	; 0x2c
 8001502:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001504:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001506:	686a      	ldr	r2, [r5, #4]
 8001508:	430b      	orrs	r3, r1
 800150a:	492a      	ldr	r1, [pc, #168]	; (80015b4 <HAL_RCC_OscConfig+0x46c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800150c:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800150e:	400a      	ands	r2, r1
 8001510:	4313      	orrs	r3, r2
 8001512:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001514:	2380      	movs	r3, #128	; 0x80
 8001516:	682a      	ldr	r2, [r5, #0]
 8001518:	045b      	lsls	r3, r3, #17
 800151a:	4313      	orrs	r3, r2
 800151c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800151e:	f7fe ff93 	bl	8000448 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001522:	4d21      	ldr	r5, [pc, #132]	; (80015a8 <HAL_RCC_OscConfig+0x460>)
        tickstart = HAL_GetTick();
 8001524:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001526:	04a4      	lsls	r4, r4, #18
 8001528:	e005      	b.n	8001536 <HAL_RCC_OscConfig+0x3ee>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800152a:	f7fe ff8d 	bl	8000448 <HAL_GetTick>
 800152e:	1b80      	subs	r0, r0, r6
 8001530:	2802      	cmp	r0, #2
 8001532:	d900      	bls.n	8001536 <HAL_RCC_OscConfig+0x3ee>
 8001534:	e76d      	b.n	8001412 <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001536:	682b      	ldr	r3, [r5, #0]
 8001538:	4223      	tst	r3, r4
 800153a:	d0f6      	beq.n	800152a <HAL_RCC_OscConfig+0x3e2>
 800153c:	e6e4      	b.n	8001308 <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800153e:	2280      	movs	r2, #128	; 0x80
 8001540:	4b19      	ldr	r3, [pc, #100]	; (80015a8 <HAL_RCC_OscConfig+0x460>)
 8001542:	02d2      	lsls	r2, r2, #11
 8001544:	6819      	ldr	r1, [r3, #0]
 8001546:	430a      	orrs	r2, r1
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	2280      	movs	r2, #128	; 0x80
 800154c:	6819      	ldr	r1, [r3, #0]
 800154e:	0252      	lsls	r2, r2, #9
 8001550:	430a      	orrs	r2, r1
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	e620      	b.n	8001198 <HAL_RCC_OscConfig+0x50>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001556:	2104      	movs	r1, #4
 8001558:	4d13      	ldr	r5, [pc, #76]	; (80015a8 <HAL_RCC_OscConfig+0x460>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800155a:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 800155c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800155e:	430a      	orrs	r2, r1
 8001560:	636a      	str	r2, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8001562:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001564:	4313      	orrs	r3, r2
 8001566:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001568:	f7fe ff6e 	bl	8000448 <HAL_GetTick>
 800156c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800156e:	e005      	b.n	800157c <HAL_RCC_OscConfig+0x434>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001570:	f7fe ff6a 	bl	8000448 <HAL_GetTick>
 8001574:	1bc0      	subs	r0, r0, r7
 8001576:	2802      	cmp	r0, #2
 8001578:	d900      	bls.n	800157c <HAL_RCC_OscConfig+0x434>
 800157a:	e74a      	b.n	8001412 <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800157c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800157e:	421e      	tst	r6, r3
 8001580:	d0f6      	beq.n	8001570 <HAL_RCC_OscConfig+0x428>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001582:	21f8      	movs	r1, #248	; 0xf8
 8001584:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001586:	69a3      	ldr	r3, [r4, #24]
 8001588:	438a      	bics	r2, r1
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	4313      	orrs	r3, r2
 800158e:	636b      	str	r3, [r5, #52]	; 0x34
 8001590:	e69a      	b.n	80012c8 <HAL_RCC_OscConfig+0x180>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001592:	2104      	movs	r1, #4
 8001594:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <HAL_RCC_OscConfig+0x460>)
 8001596:	6a1a      	ldr	r2, [r3, #32]
 8001598:	430a      	orrs	r2, r1
 800159a:	621a      	str	r2, [r3, #32]
 800159c:	6a1a      	ldr	r2, [r3, #32]
 800159e:	3903      	subs	r1, #3
 80015a0:	430a      	orrs	r2, r1
 80015a2:	621a      	str	r2, [r3, #32]
 80015a4:	e665      	b.n	8001272 <HAL_RCC_OscConfig+0x12a>
 80015a6:	46c0      	nop			; (mov r8, r8)
 80015a8:	40021000 	.word	0x40021000
 80015ac:	efffffff 	.word	0xefffffff
 80015b0:	feffffff 	.word	0xfeffffff
 80015b4:	ffc2ffff 	.word	0xffc2ffff

080015b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ba:	46ce      	mov	lr, r9
 80015bc:	4647      	mov	r7, r8
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80015be:	2201      	movs	r2, #1
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	000c      	movs	r4, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80015c4:	495c      	ldr	r1, [pc, #368]	; (8001738 <HAL_RCC_ClockConfig+0x180>)
{
 80015c6:	b089      	sub	sp, #36	; 0x24
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80015c8:	680b      	ldr	r3, [r1, #0]
{
 80015ca:	0005      	movs	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80015cc:	4013      	ands	r3, r2
 80015ce:	42a3      	cmp	r3, r4
 80015d0:	d20d      	bcs.n	80015ee <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015d2:	680b      	ldr	r3, [r1, #0]
 80015d4:	4393      	bics	r3, r2
 80015d6:	4323      	orrs	r3, r4
 80015d8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015da:	680b      	ldr	r3, [r1, #0]
 80015dc:	401a      	ands	r2, r3
 80015de:	4294      	cmp	r4, r2
 80015e0:	d005      	beq.n	80015ee <HAL_RCC_ClockConfig+0x36>
    {
      return HAL_ERROR;
 80015e2:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 80015e4:	b009      	add	sp, #36	; 0x24
 80015e6:	bc0c      	pop	{r2, r3}
 80015e8:	4690      	mov	r8, r2
 80015ea:	4699      	mov	r9, r3
 80015ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015ee:	682b      	ldr	r3, [r5, #0]
 80015f0:	079a      	lsls	r2, r3, #30
 80015f2:	d506      	bpl.n	8001602 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015f4:	20f0      	movs	r0, #240	; 0xf0
 80015f6:	4951      	ldr	r1, [pc, #324]	; (800173c <HAL_RCC_ClockConfig+0x184>)
 80015f8:	684a      	ldr	r2, [r1, #4]
 80015fa:	4382      	bics	r2, r0
 80015fc:	68a8      	ldr	r0, [r5, #8]
 80015fe:	4302      	orrs	r2, r0
 8001600:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001602:	07db      	lsls	r3, r3, #31
 8001604:	d524      	bpl.n	8001650 <HAL_RCC_ClockConfig+0x98>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001606:	4b4d      	ldr	r3, [pc, #308]	; (800173c <HAL_RCC_ClockConfig+0x184>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001608:	686a      	ldr	r2, [r5, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800160a:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800160c:	2a01      	cmp	r2, #1
 800160e:	d06a      	beq.n	80016e6 <HAL_RCC_ClockConfig+0x12e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001610:	2a02      	cmp	r2, #2
 8001612:	d063      	beq.n	80016dc <HAL_RCC_ClockConfig+0x124>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001614:	079b      	lsls	r3, r3, #30
 8001616:	d5e4      	bpl.n	80015e2 <HAL_RCC_ClockConfig+0x2a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001618:	2103      	movs	r1, #3
 800161a:	4e48      	ldr	r6, [pc, #288]	; (800173c <HAL_RCC_ClockConfig+0x184>)
 800161c:	6873      	ldr	r3, [r6, #4]
 800161e:	438b      	bics	r3, r1
 8001620:	4313      	orrs	r3, r2
 8001622:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001624:	f7fe ff10 	bl	8000448 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001628:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 800162a:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800162c:	2b01      	cmp	r3, #1
 800162e:	d05d      	beq.n	80016ec <HAL_RCC_ClockConfig+0x134>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001630:	2b02      	cmp	r3, #2
 8001632:	d06b      	beq.n	800170c <HAL_RCC_ClockConfig+0x154>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001634:	230c      	movs	r3, #12
 8001636:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001638:	4b41      	ldr	r3, [pc, #260]	; (8001740 <HAL_RCC_ClockConfig+0x188>)
 800163a:	4699      	mov	r9, r3
 800163c:	e004      	b.n	8001648 <HAL_RCC_ClockConfig+0x90>
 800163e:	f7fe ff03 	bl	8000448 <HAL_GetTick>
 8001642:	1bc0      	subs	r0, r0, r7
 8001644:	4548      	cmp	r0, r9
 8001646:	d84c      	bhi.n	80016e2 <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001648:	4642      	mov	r2, r8
 800164a:	6873      	ldr	r3, [r6, #4]
 800164c:	421a      	tst	r2, r3
 800164e:	d1f6      	bne.n	800163e <HAL_RCC_ClockConfig+0x86>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001650:	2101      	movs	r1, #1
 8001652:	4a39      	ldr	r2, [pc, #228]	; (8001738 <HAL_RCC_ClockConfig+0x180>)
 8001654:	6813      	ldr	r3, [r2, #0]
 8001656:	400b      	ands	r3, r1
 8001658:	429c      	cmp	r4, r3
 800165a:	d205      	bcs.n	8001668 <HAL_RCC_ClockConfig+0xb0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800165c:	6813      	ldr	r3, [r2, #0]
 800165e:	438b      	bics	r3, r1
 8001660:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001662:	6813      	ldr	r3, [r2, #0]
 8001664:	4219      	tst	r1, r3
 8001666:	d1bc      	bne.n	80015e2 <HAL_RCC_ClockConfig+0x2a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001668:	682b      	ldr	r3, [r5, #0]
 800166a:	075b      	lsls	r3, r3, #29
 800166c:	d506      	bpl.n	800167c <HAL_RCC_ClockConfig+0xc4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800166e:	4a33      	ldr	r2, [pc, #204]	; (800173c <HAL_RCC_ClockConfig+0x184>)
 8001670:	4934      	ldr	r1, [pc, #208]	; (8001744 <HAL_RCC_ClockConfig+0x18c>)
 8001672:	6853      	ldr	r3, [r2, #4]
 8001674:	400b      	ands	r3, r1
 8001676:	68e9      	ldr	r1, [r5, #12]
 8001678:	430b      	orrs	r3, r1
 800167a:	6053      	str	r3, [r2, #4]
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800167c:	4b32      	ldr	r3, [pc, #200]	; (8001748 <HAL_RCC_ClockConfig+0x190>)
 800167e:	466a      	mov	r2, sp
 8001680:	0018      	movs	r0, r3
 8001682:	c870      	ldmia	r0!, {r4, r5, r6}
 8001684:	c270      	stmia	r2!, {r4, r5, r6}
 8001686:	6800      	ldr	r0, [r0, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001688:	3310      	adds	r3, #16
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800168a:	6010      	str	r0, [r2, #0]
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800168c:	aa04      	add	r2, sp, #16
 800168e:	0010      	movs	r0, r2
 8001690:	cb70      	ldmia	r3!, {r4, r5, r6}
 8001692:	c070      	stmia	r0!, {r4, r5, r6}
 8001694:	681b      	ldr	r3, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8001696:	4d29      	ldr	r5, [pc, #164]	; (800173c <HAL_RCC_ClockConfig+0x184>)
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001698:	6003      	str	r3, [r0, #0]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800169a:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 800169c:	6868      	ldr	r0, [r5, #4]
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800169e:	4669      	mov	r1, sp
  switch (tmpreg & RCC_CFGR_SWS)
 80016a0:	4003      	ands	r3, r0
 80016a2:	2b08      	cmp	r3, #8
 80016a4:	d10b      	bne.n	80016be <HAL_RCC_ClockConfig+0x106>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80016a6:	3307      	adds	r3, #7
 80016a8:	0c84      	lsrs	r4, r0, #18
 80016aa:	401c      	ands	r4, r3
 80016ac:	5d0c      	ldrb	r4, [r1, r4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80016ae:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80016b0:	400b      	ands	r3, r1
 80016b2:	5cd1      	ldrb	r1, [r2, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80016b4:	03c3      	lsls	r3, r0, #15
 80016b6:	d439      	bmi.n	800172c <HAL_RCC_ClockConfig+0x174>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 80016b8:	4824      	ldr	r0, [pc, #144]	; (800174c <HAL_RCC_ClockConfig+0x194>)
 80016ba:	4360      	muls	r0, r4
 80016bc:	e000      	b.n	80016c0 <HAL_RCC_ClockConfig+0x108>
      sysclockfreq = HSE_VALUE;
 80016be:	4824      	ldr	r0, [pc, #144]	; (8001750 <HAL_RCC_ClockConfig+0x198>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80016c0:	4b1e      	ldr	r3, [pc, #120]	; (800173c <HAL_RCC_ClockConfig+0x184>)
 80016c2:	4a24      	ldr	r2, [pc, #144]	; (8001754 <HAL_RCC_ClockConfig+0x19c>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	061b      	lsls	r3, r3, #24
 80016c8:	0f1b      	lsrs	r3, r3, #28
 80016ca:	5cd3      	ldrb	r3, [r2, r3]
 80016cc:	40d8      	lsrs	r0, r3
 80016ce:	4b22      	ldr	r3, [pc, #136]	; (8001758 <HAL_RCC_ClockConfig+0x1a0>)
 80016d0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80016d2:	2000      	movs	r0, #0
 80016d4:	f7fe fe8e 	bl	80003f4 <HAL_InitTick>
  return HAL_OK;
 80016d8:	2000      	movs	r0, #0
 80016da:	e783      	b.n	80015e4 <HAL_RCC_ClockConfig+0x2c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016dc:	019b      	lsls	r3, r3, #6
 80016de:	d49b      	bmi.n	8001618 <HAL_RCC_ClockConfig+0x60>
 80016e0:	e77f      	b.n	80015e2 <HAL_RCC_ClockConfig+0x2a>
          return HAL_TIMEOUT;
 80016e2:	2003      	movs	r0, #3
 80016e4:	e77e      	b.n	80015e4 <HAL_RCC_ClockConfig+0x2c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e6:	039b      	lsls	r3, r3, #14
 80016e8:	d496      	bmi.n	8001618 <HAL_RCC_ClockConfig+0x60>
 80016ea:	e77a      	b.n	80015e2 <HAL_RCC_ClockConfig+0x2a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80016ec:	330b      	adds	r3, #11
 80016ee:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016f0:	4b13      	ldr	r3, [pc, #76]	; (8001740 <HAL_RCC_ClockConfig+0x188>)
 80016f2:	4699      	mov	r9, r3
 80016f4:	e004      	b.n	8001700 <HAL_RCC_ClockConfig+0x148>
 80016f6:	f7fe fea7 	bl	8000448 <HAL_GetTick>
 80016fa:	1bc0      	subs	r0, r0, r7
 80016fc:	4548      	cmp	r0, r9
 80016fe:	d8f0      	bhi.n	80016e2 <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001700:	4642      	mov	r2, r8
 8001702:	6873      	ldr	r3, [r6, #4]
 8001704:	4013      	ands	r3, r2
 8001706:	2b04      	cmp	r3, #4
 8001708:	d1f5      	bne.n	80016f6 <HAL_RCC_ClockConfig+0x13e>
 800170a:	e7a1      	b.n	8001650 <HAL_RCC_ClockConfig+0x98>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800170c:	330a      	adds	r3, #10
 800170e:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001710:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <HAL_RCC_ClockConfig+0x188>)
 8001712:	4699      	mov	r9, r3
 8001714:	e004      	b.n	8001720 <HAL_RCC_ClockConfig+0x168>
 8001716:	f7fe fe97 	bl	8000448 <HAL_GetTick>
 800171a:	1bc0      	subs	r0, r0, r7
 800171c:	4548      	cmp	r0, r9
 800171e:	d8e0      	bhi.n	80016e2 <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001720:	4642      	mov	r2, r8
 8001722:	6873      	ldr	r3, [r6, #4]
 8001724:	4013      	ands	r3, r2
 8001726:	2b08      	cmp	r3, #8
 8001728:	d1f5      	bne.n	8001716 <HAL_RCC_ClockConfig+0x15e>
 800172a:	e791      	b.n	8001650 <HAL_RCC_ClockConfig+0x98>
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800172c:	4808      	ldr	r0, [pc, #32]	; (8001750 <HAL_RCC_ClockConfig+0x198>)
 800172e:	f7fe fceb 	bl	8000108 <__udivsi3>
 8001732:	4360      	muls	r0, r4
 8001734:	e7c4      	b.n	80016c0 <HAL_RCC_ClockConfig+0x108>
 8001736:	46c0      	nop			; (mov r8, r8)
 8001738:	40022000 	.word	0x40022000
 800173c:	40021000 	.word	0x40021000
 8001740:	00001388 	.word	0x00001388
 8001744:	fffff8ff 	.word	0xfffff8ff
 8001748:	08004fb4 	.word	0x08004fb4
 800174c:	003d0900 	.word	0x003d0900
 8001750:	007a1200 	.word	0x007a1200
 8001754:	0800500c 	.word	0x0800500c
 8001758:	20000054 	.word	0x20000054

0800175c <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 800175c:	4b01      	ldr	r3, [pc, #4]	; (8001764 <HAL_RCC_GetHCLKFreq+0x8>)
 800175e:	6818      	ldr	r0, [r3, #0]
}
 8001760:	4770      	bx	lr
 8001762:	46c0      	nop			; (mov r8, r8)
 8001764:	20000054 	.word	0x20000054

08001768 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001768:	b510      	push	{r4, lr}
 800176a:	1e04      	subs	r4, r0, #0
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800176c:	d064      	beq.n	8001838 <HAL_TIM_Base_Init+0xd0>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 800176e:	233d      	movs	r3, #61	; 0x3d
 8001770:	5cc3      	ldrb	r3, [r0, r3]
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b00      	cmp	r3, #0
 8001776:	d03d      	beq.n	80017f4 <HAL_TIM_Base_Init+0x8c>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001778:	2202      	movs	r2, #2
 800177a:	233d      	movs	r3, #61	; 0x3d
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800177c:	492f      	ldr	r1, [pc, #188]	; (800183c <HAL_TIM_Base_Init+0xd4>)
  htim->State= HAL_TIM_STATE_BUSY;
 800177e:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001780:	6823      	ldr	r3, [r4, #0]
  tmpcr1 = TIMx->CR1;
 8001782:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001784:	428b      	cmp	r3, r1
 8001786:	d021      	beq.n	80017cc <HAL_TIM_Base_Init+0x64>
 8001788:	2180      	movs	r1, #128	; 0x80
 800178a:	05c9      	lsls	r1, r1, #23
 800178c:	428b      	cmp	r3, r1
 800178e:	d036      	beq.n	80017fe <HAL_TIM_Base_Init+0x96>
 8001790:	492b      	ldr	r1, [pc, #172]	; (8001840 <HAL_TIM_Base_Init+0xd8>)
 8001792:	428b      	cmp	r3, r1
 8001794:	d033      	beq.n	80017fe <HAL_TIM_Base_Init+0x96>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001796:	492b      	ldr	r1, [pc, #172]	; (8001844 <HAL_TIM_Base_Init+0xdc>)
 8001798:	428b      	cmp	r3, r1
 800179a:	d048      	beq.n	800182e <HAL_TIM_Base_Init+0xc6>
 800179c:	492a      	ldr	r1, [pc, #168]	; (8001848 <HAL_TIM_Base_Init+0xe0>)
 800179e:	428b      	cmp	r3, r1
 80017a0:	d018      	beq.n	80017d4 <HAL_TIM_Base_Init+0x6c>
 80017a2:	492a      	ldr	r1, [pc, #168]	; (800184c <HAL_TIM_Base_Init+0xe4>)
 80017a4:	428b      	cmp	r3, r1
 80017a6:	d015      	beq.n	80017d4 <HAL_TIM_Base_Init+0x6c>
 80017a8:	4929      	ldr	r1, [pc, #164]	; (8001850 <HAL_TIM_Base_Init+0xe8>)
 80017aa:	428b      	cmp	r3, r1
 80017ac:	d012      	beq.n	80017d4 <HAL_TIM_Base_Init+0x6c>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017ae:	2180      	movs	r1, #128	; 0x80
 80017b0:	438a      	bics	r2, r1
 80017b2:	69a1      	ldr	r1, [r4, #24]
 80017b4:	430a      	orrs	r2, r1

  TIMx->CR1 = tmpcr1;
 80017b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017b8:	68e2      	ldr	r2, [r4, #12]
 80017ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80017bc:	6862      	ldr	r2, [r4, #4]
 80017be:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80017c0:	2201      	movs	r2, #1
 80017c2:	615a      	str	r2, [r3, #20]
  htim->State= HAL_TIM_STATE_READY;
 80017c4:	233d      	movs	r3, #61	; 0x3d
  return HAL_OK;
 80017c6:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80017c8:	54e2      	strb	r2, [r4, r3]
}
 80017ca:	bd10      	pop	{r4, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017cc:	2170      	movs	r1, #112	; 0x70
 80017ce:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 80017d0:	68a1      	ldr	r1, [r4, #8]
 80017d2:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80017d4:	491f      	ldr	r1, [pc, #124]	; (8001854 <HAL_TIM_Base_Init+0xec>)
 80017d6:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017d8:	6921      	ldr	r1, [r4, #16]
 80017da:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017dc:	2180      	movs	r1, #128	; 0x80
 80017de:	438a      	bics	r2, r1
 80017e0:	69a1      	ldr	r1, [r4, #24]
 80017e2:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 80017e4:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017e6:	68e2      	ldr	r2, [r4, #12]
 80017e8:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80017ea:	6862      	ldr	r2, [r4, #4]
 80017ec:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80017ee:	6962      	ldr	r2, [r4, #20]
 80017f0:	631a      	str	r2, [r3, #48]	; 0x30
 80017f2:	e7e5      	b.n	80017c0 <HAL_TIM_Base_Init+0x58>
    htim->Lock = HAL_UNLOCKED;
 80017f4:	223c      	movs	r2, #60	; 0x3c
 80017f6:	5483      	strb	r3, [r0, r2]
    HAL_TIM_Base_MspInit(htim);
 80017f8:	f003 fa5c 	bl	8004cb4 <HAL_TIM_Base_MspInit>
 80017fc:	e7bc      	b.n	8001778 <HAL_TIM_Base_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017fe:	2170      	movs	r1, #112	; 0x70
 8001800:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 8001802:	68a1      	ldr	r1, [r4, #8]
 8001804:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8001806:	4913      	ldr	r1, [pc, #76]	; (8001854 <HAL_TIM_Base_Init+0xec>)
 8001808:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800180a:	6921      	ldr	r1, [r4, #16]
 800180c:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800180e:	2180      	movs	r1, #128	; 0x80
 8001810:	438a      	bics	r2, r1
 8001812:	69a1      	ldr	r1, [r4, #24]
 8001814:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8001816:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001818:	68e2      	ldr	r2, [r4, #12]
 800181a:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800181c:	6862      	ldr	r2, [r4, #4]
 800181e:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001820:	4a0a      	ldr	r2, [pc, #40]	; (800184c <HAL_TIM_Base_Init+0xe4>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d0e3      	beq.n	80017ee <HAL_TIM_Base_Init+0x86>
 8001826:	4a0a      	ldr	r2, [pc, #40]	; (8001850 <HAL_TIM_Base_Init+0xe8>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d0e0      	beq.n	80017ee <HAL_TIM_Base_Init+0x86>
 800182c:	e7c8      	b.n	80017c0 <HAL_TIM_Base_Init+0x58>
    tmpcr1 &= ~TIM_CR1_CKD;
 800182e:	4909      	ldr	r1, [pc, #36]	; (8001854 <HAL_TIM_Base_Init+0xec>)
 8001830:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001832:	6921      	ldr	r1, [r4, #16]
 8001834:	430a      	orrs	r2, r1
 8001836:	e7ba      	b.n	80017ae <HAL_TIM_Base_Init+0x46>
    return HAL_ERROR;
 8001838:	2001      	movs	r0, #1
 800183a:	e7c6      	b.n	80017ca <HAL_TIM_Base_Init+0x62>
 800183c:	40012c00 	.word	0x40012c00
 8001840:	40000400 	.word	0x40000400
 8001844:	40002000 	.word	0x40002000
 8001848:	40014000 	.word	0x40014000
 800184c:	40014400 	.word	0x40014400
 8001850:	40014800 	.word	0x40014800
 8001854:	fffffcff 	.word	0xfffffcff

08001858 <HAL_TIM_Base_Start>:
  htim->State= HAL_TIM_STATE_BUSY;
 8001858:	223d      	movs	r2, #61	; 0x3d
 800185a:	2302      	movs	r3, #2
  __HAL_TIM_ENABLE(htim);
 800185c:	2101      	movs	r1, #1
{
 800185e:	b510      	push	{r4, lr}
  __HAL_TIM_ENABLE(htim);
 8001860:	6804      	ldr	r4, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001862:	5483      	strb	r3, [r0, r2]
  __HAL_TIM_ENABLE(htim);
 8001864:	6823      	ldr	r3, [r4, #0]
 8001866:	430b      	orrs	r3, r1
 8001868:	6023      	str	r3, [r4, #0]
  htim->State= HAL_TIM_STATE_READY;
 800186a:	5481      	strb	r1, [r0, r2]
}
 800186c:	2000      	movs	r0, #0
 800186e:	bd10      	pop	{r4, pc}

08001870 <HAL_TIM_Base_Stop>:
  htim->State= HAL_TIM_STATE_BUSY;
 8001870:	2202      	movs	r2, #2
 8001872:	233d      	movs	r3, #61	; 0x3d
 8001874:	54c2      	strb	r2, [r0, r3]
  __HAL_TIM_DISABLE(htim);
 8001876:	6803      	ldr	r3, [r0, #0]
 8001878:	4a08      	ldr	r2, [pc, #32]	; (800189c <HAL_TIM_Base_Stop+0x2c>)
 800187a:	6a19      	ldr	r1, [r3, #32]
 800187c:	4211      	tst	r1, r2
 800187e:	d107      	bne.n	8001890 <HAL_TIM_Base_Stop+0x20>
 8001880:	6a19      	ldr	r1, [r3, #32]
 8001882:	4a07      	ldr	r2, [pc, #28]	; (80018a0 <HAL_TIM_Base_Stop+0x30>)
 8001884:	4211      	tst	r1, r2
 8001886:	d103      	bne.n	8001890 <HAL_TIM_Base_Stop+0x20>
 8001888:	2101      	movs	r1, #1
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	438a      	bics	r2, r1
 800188e:	601a      	str	r2, [r3, #0]
  htim->State= HAL_TIM_STATE_READY;
 8001890:	2201      	movs	r2, #1
 8001892:	233d      	movs	r3, #61	; 0x3d
 8001894:	54c2      	strb	r2, [r0, r3]
}
 8001896:	2000      	movs	r0, #0
 8001898:	4770      	bx	lr
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	00001111 	.word	0x00001111
 80018a0:	00000444 	.word	0x00000444

080018a4 <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80018a4:	6803      	ldr	r3, [r0, #0]
 80018a6:	2001      	movs	r0, #1
 80018a8:	68d9      	ldr	r1, [r3, #12]
 80018aa:	4301      	orrs	r1, r0
 80018ac:	60d9      	str	r1, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	4302      	orrs	r2, r0
 80018b2:	601a      	str	r2, [r3, #0]
}
 80018b4:	2000      	movs	r0, #0
 80018b6:	4770      	bx	lr

080018b8 <HAL_TIM_OC_Start_IT>:
 80018b8:	2904      	cmp	r1, #4
 80018ba:	d023      	beq.n	8001904 <HAL_TIM_OC_Start_IT+0x4c>
 80018bc:	d92d      	bls.n	800191a <HAL_TIM_OC_Start_IT+0x62>
 80018be:	2908      	cmp	r1, #8
 80018c0:	d020      	beq.n	8001904 <HAL_TIM_OC_Start_IT+0x4c>
 80018c2:	290c      	cmp	r1, #12
 80018c4:	d131      	bne.n	800192a <HAL_TIM_OC_Start_IT+0x72>
 80018c6:	6803      	ldr	r3, [r0, #0]
 80018c8:	2010      	movs	r0, #16
 80018ca:	68da      	ldr	r2, [r3, #12]
 80018cc:	4302      	orrs	r2, r0
 80018ce:	60da      	str	r2, [r3, #12]
 80018d0:	2201      	movs	r2, #1
 80018d2:	408a      	lsls	r2, r1
 80018d4:	6a19      	ldr	r1, [r3, #32]
 80018d6:	4391      	bics	r1, r2
 80018d8:	6219      	str	r1, [r3, #32]
 80018da:	6a19      	ldr	r1, [r3, #32]
 80018dc:	430a      	orrs	r2, r1
 80018de:	621a      	str	r2, [r3, #32]
 80018e0:	4a13      	ldr	r2, [pc, #76]	; (8001930 <HAL_TIM_OC_Start_IT+0x78>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d013      	beq.n	800190e <HAL_TIM_OC_Start_IT+0x56>
 80018e6:	4a13      	ldr	r2, [pc, #76]	; (8001934 <HAL_TIM_OC_Start_IT+0x7c>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d010      	beq.n	800190e <HAL_TIM_OC_Start_IT+0x56>
 80018ec:	4a12      	ldr	r2, [pc, #72]	; (8001938 <HAL_TIM_OC_Start_IT+0x80>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d00d      	beq.n	800190e <HAL_TIM_OC_Start_IT+0x56>
 80018f2:	4a12      	ldr	r2, [pc, #72]	; (800193c <HAL_TIM_OC_Start_IT+0x84>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d00a      	beq.n	800190e <HAL_TIM_OC_Start_IT+0x56>
 80018f8:	2101      	movs	r1, #1
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	2000      	movs	r0, #0
 80018fe:	430a      	orrs	r2, r1
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	4770      	bx	lr
 8001904:	6803      	ldr	r3, [r0, #0]
 8001906:	68da      	ldr	r2, [r3, #12]
 8001908:	430a      	orrs	r2, r1
 800190a:	60da      	str	r2, [r3, #12]
 800190c:	e7e0      	b.n	80018d0 <HAL_TIM_OC_Start_IT+0x18>
 800190e:	2280      	movs	r2, #128	; 0x80
 8001910:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001912:	0212      	lsls	r2, r2, #8
 8001914:	430a      	orrs	r2, r1
 8001916:	645a      	str	r2, [r3, #68]	; 0x44
 8001918:	e7ee      	b.n	80018f8 <HAL_TIM_OC_Start_IT+0x40>
 800191a:	2900      	cmp	r1, #0
 800191c:	d105      	bne.n	800192a <HAL_TIM_OC_Start_IT+0x72>
 800191e:	6803      	ldr	r3, [r0, #0]
 8001920:	2002      	movs	r0, #2
 8001922:	68da      	ldr	r2, [r3, #12]
 8001924:	4302      	orrs	r2, r0
 8001926:	60da      	str	r2, [r3, #12]
 8001928:	e7d2      	b.n	80018d0 <HAL_TIM_OC_Start_IT+0x18>
 800192a:	6803      	ldr	r3, [r0, #0]
 800192c:	e7d0      	b.n	80018d0 <HAL_TIM_OC_Start_IT+0x18>
 800192e:	46c0      	nop			; (mov r8, r8)
 8001930:	40012c00 	.word	0x40012c00
 8001934:	40014000 	.word	0x40014000
 8001938:	40014400 	.word	0x40014400
 800193c:	40014800 	.word	0x40014800

08001940 <HAL_TIM_PWM_MspInit>:
 8001940:	4770      	bx	lr
 8001942:	46c0      	nop			; (mov r8, r8)

08001944 <HAL_TIM_PWM_Init>:
{
 8001944:	b510      	push	{r4, lr}
 8001946:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8001948:	d064      	beq.n	8001a14 <HAL_TIM_PWM_Init+0xd0>
  if(htim->State == HAL_TIM_STATE_RESET)
 800194a:	233d      	movs	r3, #61	; 0x3d
 800194c:	5cc3      	ldrb	r3, [r0, r3]
 800194e:	b2db      	uxtb	r3, r3
 8001950:	2b00      	cmp	r3, #0
 8001952:	d03d      	beq.n	80019d0 <HAL_TIM_PWM_Init+0x8c>
  htim->State= HAL_TIM_STATE_BUSY;
 8001954:	2202      	movs	r2, #2
 8001956:	233d      	movs	r3, #61	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001958:	492f      	ldr	r1, [pc, #188]	; (8001a18 <HAL_TIM_PWM_Init+0xd4>)
  htim->State= HAL_TIM_STATE_BUSY;
 800195a:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800195c:	6823      	ldr	r3, [r4, #0]
  tmpcr1 = TIMx->CR1;
 800195e:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001960:	428b      	cmp	r3, r1
 8001962:	d021      	beq.n	80019a8 <HAL_TIM_PWM_Init+0x64>
 8001964:	2180      	movs	r1, #128	; 0x80
 8001966:	05c9      	lsls	r1, r1, #23
 8001968:	428b      	cmp	r3, r1
 800196a:	d036      	beq.n	80019da <HAL_TIM_PWM_Init+0x96>
 800196c:	492b      	ldr	r1, [pc, #172]	; (8001a1c <HAL_TIM_PWM_Init+0xd8>)
 800196e:	428b      	cmp	r3, r1
 8001970:	d033      	beq.n	80019da <HAL_TIM_PWM_Init+0x96>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001972:	492b      	ldr	r1, [pc, #172]	; (8001a20 <HAL_TIM_PWM_Init+0xdc>)
 8001974:	428b      	cmp	r3, r1
 8001976:	d048      	beq.n	8001a0a <HAL_TIM_PWM_Init+0xc6>
 8001978:	492a      	ldr	r1, [pc, #168]	; (8001a24 <HAL_TIM_PWM_Init+0xe0>)
 800197a:	428b      	cmp	r3, r1
 800197c:	d018      	beq.n	80019b0 <HAL_TIM_PWM_Init+0x6c>
 800197e:	492a      	ldr	r1, [pc, #168]	; (8001a28 <HAL_TIM_PWM_Init+0xe4>)
 8001980:	428b      	cmp	r3, r1
 8001982:	d015      	beq.n	80019b0 <HAL_TIM_PWM_Init+0x6c>
 8001984:	4929      	ldr	r1, [pc, #164]	; (8001a2c <HAL_TIM_PWM_Init+0xe8>)
 8001986:	428b      	cmp	r3, r1
 8001988:	d012      	beq.n	80019b0 <HAL_TIM_PWM_Init+0x6c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800198a:	2180      	movs	r1, #128	; 0x80
 800198c:	438a      	bics	r2, r1
 800198e:	69a1      	ldr	r1, [r4, #24]
 8001990:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8001992:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001994:	68e2      	ldr	r2, [r4, #12]
 8001996:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001998:	6862      	ldr	r2, [r4, #4]
 800199a:	629a      	str	r2, [r3, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 800199c:	2201      	movs	r2, #1
 800199e:	615a      	str	r2, [r3, #20]
  htim->State= HAL_TIM_STATE_READY;
 80019a0:	233d      	movs	r3, #61	; 0x3d
  return HAL_OK;
 80019a2:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80019a4:	54e2      	strb	r2, [r4, r3]
}
 80019a6:	bd10      	pop	{r4, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019a8:	2170      	movs	r1, #112	; 0x70
 80019aa:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 80019ac:	68a1      	ldr	r1, [r4, #8]
 80019ae:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80019b0:	491f      	ldr	r1, [pc, #124]	; (8001a30 <HAL_TIM_PWM_Init+0xec>)
 80019b2:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019b4:	6921      	ldr	r1, [r4, #16]
 80019b6:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019b8:	2180      	movs	r1, #128	; 0x80
 80019ba:	438a      	bics	r2, r1
 80019bc:	69a1      	ldr	r1, [r4, #24]
 80019be:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 80019c0:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019c2:	68e2      	ldr	r2, [r4, #12]
 80019c4:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80019c6:	6862      	ldr	r2, [r4, #4]
 80019c8:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80019ca:	6962      	ldr	r2, [r4, #20]
 80019cc:	631a      	str	r2, [r3, #48]	; 0x30
 80019ce:	e7e5      	b.n	800199c <HAL_TIM_PWM_Init+0x58>
    htim->Lock = HAL_UNLOCKED;
 80019d0:	223c      	movs	r2, #60	; 0x3c
 80019d2:	5483      	strb	r3, [r0, r2]
    HAL_TIM_PWM_MspInit(htim);
 80019d4:	f7ff ffb4 	bl	8001940 <HAL_TIM_PWM_MspInit>
 80019d8:	e7bc      	b.n	8001954 <HAL_TIM_PWM_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019da:	2170      	movs	r1, #112	; 0x70
 80019dc:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 80019de:	68a1      	ldr	r1, [r4, #8]
 80019e0:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80019e2:	4913      	ldr	r1, [pc, #76]	; (8001a30 <HAL_TIM_PWM_Init+0xec>)
 80019e4:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019e6:	6921      	ldr	r1, [r4, #16]
 80019e8:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019ea:	2180      	movs	r1, #128	; 0x80
 80019ec:	438a      	bics	r2, r1
 80019ee:	69a1      	ldr	r1, [r4, #24]
 80019f0:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 80019f2:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019f4:	68e2      	ldr	r2, [r4, #12]
 80019f6:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80019f8:	6862      	ldr	r2, [r4, #4]
 80019fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80019fc:	4a0a      	ldr	r2, [pc, #40]	; (8001a28 <HAL_TIM_PWM_Init+0xe4>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d0e3      	beq.n	80019ca <HAL_TIM_PWM_Init+0x86>
 8001a02:	4a0a      	ldr	r2, [pc, #40]	; (8001a2c <HAL_TIM_PWM_Init+0xe8>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d0e0      	beq.n	80019ca <HAL_TIM_PWM_Init+0x86>
 8001a08:	e7c8      	b.n	800199c <HAL_TIM_PWM_Init+0x58>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a0a:	4909      	ldr	r1, [pc, #36]	; (8001a30 <HAL_TIM_PWM_Init+0xec>)
 8001a0c:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a0e:	6921      	ldr	r1, [r4, #16]
 8001a10:	430a      	orrs	r2, r1
 8001a12:	e7ba      	b.n	800198a <HAL_TIM_PWM_Init+0x46>
    return HAL_ERROR;
 8001a14:	2001      	movs	r0, #1
 8001a16:	e7c6      	b.n	80019a6 <HAL_TIM_PWM_Init+0x62>
 8001a18:	40012c00 	.word	0x40012c00
 8001a1c:	40000400 	.word	0x40000400
 8001a20:	40002000 	.word	0x40002000
 8001a24:	40014000 	.word	0x40014000
 8001a28:	40014400 	.word	0x40014400
 8001a2c:	40014800 	.word	0x40014800
 8001a30:	fffffcff 	.word	0xfffffcff

08001a34 <HAL_TIM_PWM_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8001a34:	2201      	movs	r2, #1
 8001a36:	408a      	lsls	r2, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001a38:	6803      	ldr	r3, [r0, #0]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001a3a:	6a19      	ldr	r1, [r3, #32]
 8001a3c:	4391      	bics	r1, r2
 8001a3e:	6219      	str	r1, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001a40:	6a19      	ldr	r1, [r3, #32]
 8001a42:	430a      	orrs	r2, r1
 8001a44:	621a      	str	r2, [r3, #32]
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001a46:	4a0c      	ldr	r2, [pc, #48]	; (8001a78 <HAL_TIM_PWM_Start+0x44>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d00e      	beq.n	8001a6a <HAL_TIM_PWM_Start+0x36>
 8001a4c:	4a0b      	ldr	r2, [pc, #44]	; (8001a7c <HAL_TIM_PWM_Start+0x48>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d00b      	beq.n	8001a6a <HAL_TIM_PWM_Start+0x36>
 8001a52:	4a0b      	ldr	r2, [pc, #44]	; (8001a80 <HAL_TIM_PWM_Start+0x4c>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d008      	beq.n	8001a6a <HAL_TIM_PWM_Start+0x36>
 8001a58:	4a0a      	ldr	r2, [pc, #40]	; (8001a84 <HAL_TIM_PWM_Start+0x50>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d005      	beq.n	8001a6a <HAL_TIM_PWM_Start+0x36>
  __HAL_TIM_ENABLE(htim);
 8001a5e:	2101      	movs	r1, #1
 8001a60:	681a      	ldr	r2, [r3, #0]
}
 8001a62:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8001a64:	430a      	orrs	r2, r1
 8001a66:	601a      	str	r2, [r3, #0]
}
 8001a68:	4770      	bx	lr
    __HAL_TIM_MOE_ENABLE(htim);
 8001a6a:	2280      	movs	r2, #128	; 0x80
 8001a6c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001a6e:	0212      	lsls	r2, r2, #8
 8001a70:	430a      	orrs	r2, r1
 8001a72:	645a      	str	r2, [r3, #68]	; 0x44
 8001a74:	e7f3      	b.n	8001a5e <HAL_TIM_PWM_Start+0x2a>
 8001a76:	46c0      	nop			; (mov r8, r8)
 8001a78:	40012c00 	.word	0x40012c00
 8001a7c:	40014000 	.word	0x40014000
 8001a80:	40014400 	.word	0x40014400
 8001a84:	40014800 	.word	0x40014800

08001a88 <HAL_TIM_IC_MspInit>:
 8001a88:	4770      	bx	lr
 8001a8a:	46c0      	nop			; (mov r8, r8)

08001a8c <HAL_TIM_IC_Init>:
{
 8001a8c:	b510      	push	{r4, lr}
 8001a8e:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8001a90:	d064      	beq.n	8001b5c <HAL_TIM_IC_Init+0xd0>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001a92:	233d      	movs	r3, #61	; 0x3d
 8001a94:	5cc3      	ldrb	r3, [r0, r3]
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d03d      	beq.n	8001b18 <HAL_TIM_IC_Init+0x8c>
  htim->State= HAL_TIM_STATE_BUSY;
 8001a9c:	2202      	movs	r2, #2
 8001a9e:	233d      	movs	r3, #61	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001aa0:	492f      	ldr	r1, [pc, #188]	; (8001b60 <HAL_TIM_IC_Init+0xd4>)
  htim->State= HAL_TIM_STATE_BUSY;
 8001aa2:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001aa4:	6823      	ldr	r3, [r4, #0]
  tmpcr1 = TIMx->CR1;
 8001aa6:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001aa8:	428b      	cmp	r3, r1
 8001aaa:	d021      	beq.n	8001af0 <HAL_TIM_IC_Init+0x64>
 8001aac:	2180      	movs	r1, #128	; 0x80
 8001aae:	05c9      	lsls	r1, r1, #23
 8001ab0:	428b      	cmp	r3, r1
 8001ab2:	d036      	beq.n	8001b22 <HAL_TIM_IC_Init+0x96>
 8001ab4:	492b      	ldr	r1, [pc, #172]	; (8001b64 <HAL_TIM_IC_Init+0xd8>)
 8001ab6:	428b      	cmp	r3, r1
 8001ab8:	d033      	beq.n	8001b22 <HAL_TIM_IC_Init+0x96>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001aba:	492b      	ldr	r1, [pc, #172]	; (8001b68 <HAL_TIM_IC_Init+0xdc>)
 8001abc:	428b      	cmp	r3, r1
 8001abe:	d048      	beq.n	8001b52 <HAL_TIM_IC_Init+0xc6>
 8001ac0:	492a      	ldr	r1, [pc, #168]	; (8001b6c <HAL_TIM_IC_Init+0xe0>)
 8001ac2:	428b      	cmp	r3, r1
 8001ac4:	d018      	beq.n	8001af8 <HAL_TIM_IC_Init+0x6c>
 8001ac6:	492a      	ldr	r1, [pc, #168]	; (8001b70 <HAL_TIM_IC_Init+0xe4>)
 8001ac8:	428b      	cmp	r3, r1
 8001aca:	d015      	beq.n	8001af8 <HAL_TIM_IC_Init+0x6c>
 8001acc:	4929      	ldr	r1, [pc, #164]	; (8001b74 <HAL_TIM_IC_Init+0xe8>)
 8001ace:	428b      	cmp	r3, r1
 8001ad0:	d012      	beq.n	8001af8 <HAL_TIM_IC_Init+0x6c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ad2:	2180      	movs	r1, #128	; 0x80
 8001ad4:	438a      	bics	r2, r1
 8001ad6:	69a1      	ldr	r1, [r4, #24]
 8001ad8:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8001ada:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001adc:	68e2      	ldr	r2, [r4, #12]
 8001ade:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001ae0:	6862      	ldr	r2, [r4, #4]
 8001ae2:	629a      	str	r2, [r3, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	615a      	str	r2, [r3, #20]
  htim->State= HAL_TIM_STATE_READY;
 8001ae8:	233d      	movs	r3, #61	; 0x3d
  return HAL_OK;
 8001aea:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001aec:	54e2      	strb	r2, [r4, r3]
}
 8001aee:	bd10      	pop	{r4, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001af0:	2170      	movs	r1, #112	; 0x70
 8001af2:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 8001af4:	68a1      	ldr	r1, [r4, #8]
 8001af6:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8001af8:	491f      	ldr	r1, [pc, #124]	; (8001b78 <HAL_TIM_IC_Init+0xec>)
 8001afa:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001afc:	6921      	ldr	r1, [r4, #16]
 8001afe:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b00:	2180      	movs	r1, #128	; 0x80
 8001b02:	438a      	bics	r2, r1
 8001b04:	69a1      	ldr	r1, [r4, #24]
 8001b06:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8001b08:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b0a:	68e2      	ldr	r2, [r4, #12]
 8001b0c:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001b0e:	6862      	ldr	r2, [r4, #4]
 8001b10:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8001b12:	6962      	ldr	r2, [r4, #20]
 8001b14:	631a      	str	r2, [r3, #48]	; 0x30
 8001b16:	e7e5      	b.n	8001ae4 <HAL_TIM_IC_Init+0x58>
    htim->Lock = HAL_UNLOCKED;
 8001b18:	223c      	movs	r2, #60	; 0x3c
 8001b1a:	5483      	strb	r3, [r0, r2]
    HAL_TIM_IC_MspInit(htim);
 8001b1c:	f7ff ffb4 	bl	8001a88 <HAL_TIM_IC_MspInit>
 8001b20:	e7bc      	b.n	8001a9c <HAL_TIM_IC_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b22:	2170      	movs	r1, #112	; 0x70
 8001b24:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 8001b26:	68a1      	ldr	r1, [r4, #8]
 8001b28:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b2a:	4913      	ldr	r1, [pc, #76]	; (8001b78 <HAL_TIM_IC_Init+0xec>)
 8001b2c:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b2e:	6921      	ldr	r1, [r4, #16]
 8001b30:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b32:	2180      	movs	r1, #128	; 0x80
 8001b34:	438a      	bics	r2, r1
 8001b36:	69a1      	ldr	r1, [r4, #24]
 8001b38:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8001b3a:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b3c:	68e2      	ldr	r2, [r4, #12]
 8001b3e:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001b40:	6862      	ldr	r2, [r4, #4]
 8001b42:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b44:	4a0a      	ldr	r2, [pc, #40]	; (8001b70 <HAL_TIM_IC_Init+0xe4>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d0e3      	beq.n	8001b12 <HAL_TIM_IC_Init+0x86>
 8001b4a:	4a0a      	ldr	r2, [pc, #40]	; (8001b74 <HAL_TIM_IC_Init+0xe8>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d0e0      	beq.n	8001b12 <HAL_TIM_IC_Init+0x86>
 8001b50:	e7c8      	b.n	8001ae4 <HAL_TIM_IC_Init+0x58>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b52:	4909      	ldr	r1, [pc, #36]	; (8001b78 <HAL_TIM_IC_Init+0xec>)
 8001b54:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b56:	6921      	ldr	r1, [r4, #16]
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	e7ba      	b.n	8001ad2 <HAL_TIM_IC_Init+0x46>
    return HAL_ERROR;
 8001b5c:	2001      	movs	r0, #1
 8001b5e:	e7c6      	b.n	8001aee <HAL_TIM_IC_Init+0x62>
 8001b60:	40012c00 	.word	0x40012c00
 8001b64:	40000400 	.word	0x40000400
 8001b68:	40002000 	.word	0x40002000
 8001b6c:	40014000 	.word	0x40014000
 8001b70:	40014400 	.word	0x40014400
 8001b74:	40014800 	.word	0x40014800
 8001b78:	fffffcff 	.word	0xfffffcff

08001b7c <HAL_TIM_IC_Start_DMA>:
{
 8001b7c:	b570      	push	{r4, r5, r6, lr}
 8001b7e:	000d      	movs	r5, r1
  if((htim->State == HAL_TIM_STATE_BUSY))
 8001b80:	213d      	movs	r1, #61	; 0x3d
 8001b82:	5c46      	ldrb	r6, [r0, r1]
{
 8001b84:	0004      	movs	r4, r0
     return HAL_BUSY;
 8001b86:	2002      	movs	r0, #2
  if((htim->State == HAL_TIM_STATE_BUSY))
 8001b88:	2e02      	cmp	r6, #2
 8001b8a:	d026      	beq.n	8001bda <HAL_TIM_IC_Start_DMA+0x5e>
  else if((htim->State == HAL_TIM_STATE_READY))
 8001b8c:	5c61      	ldrb	r1, [r4, r1]
 8001b8e:	2901      	cmp	r1, #1
 8001b90:	d024      	beq.n	8001bdc <HAL_TIM_IC_Start_DMA+0x60>
  switch (Channel)
 8001b92:	2d04      	cmp	r5, #4
 8001b94:	d03a      	beq.n	8001c0c <HAL_TIM_IC_Start_DMA+0x90>
 8001b96:	2d04      	cmp	r5, #4
 8001b98:	d948      	bls.n	8001c2c <HAL_TIM_IC_Start_DMA+0xb0>
 8001b9a:	2d08      	cmp	r5, #8
 8001b9c:	d026      	beq.n	8001bec <HAL_TIM_IC_Start_DMA+0x70>
 8001b9e:	2d0c      	cmp	r5, #12
 8001ba0:	d156      	bne.n	8001c50 <HAL_TIM_IC_Start_DMA+0xd4>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8001ba2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001ba4:	492d      	ldr	r1, [pc, #180]	; (8001c5c <HAL_TIM_IC_Start_DMA+0xe0>)
 8001ba6:	6281      	str	r1, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8001ba8:	492d      	ldr	r1, [pc, #180]	; (8001c60 <HAL_TIM_IC_Start_DMA+0xe4>)
 8001baa:	6301      	str	r1, [r0, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length);
 8001bac:	6821      	ldr	r1, [r4, #0]
 8001bae:	3140      	adds	r1, #64	; 0x40
 8001bb0:	f7fe ff7c 	bl	8000aac <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8001bb4:	2280      	movs	r2, #128	; 0x80
 8001bb6:	6823      	ldr	r3, [r4, #0]
 8001bb8:	0152      	lsls	r2, r2, #5
 8001bba:	68d9      	ldr	r1, [r3, #12]
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	60da      	str	r2, [r3, #12]
  tmp = TIM_CCER_CC1E << Channel;
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	0002      	movs	r2, r0
 8001bc4:	40aa      	lsls	r2, r5
  TIMx->CCER &= ~tmp;
 8001bc6:	6a19      	ldr	r1, [r3, #32]
 8001bc8:	4391      	bics	r1, r2
 8001bca:	6219      	str	r1, [r3, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001bcc:	6a19      	ldr	r1, [r3, #32]
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4302      	orrs	r2, r0
  return HAL_OK;
 8001bd6:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8001bd8:	601a      	str	r2, [r3, #0]
}
 8001bda:	bd70      	pop	{r4, r5, r6, pc}
    if((pData == 0U ) && (Length > 0U))
 8001bdc:	2a00      	cmp	r2, #0
 8001bde:	d039      	beq.n	8001c54 <HAL_TIM_IC_Start_DMA+0xd8>
      htim->State = HAL_TIM_STATE_BUSY;
 8001be0:	2002      	movs	r0, #2
 8001be2:	213d      	movs	r1, #61	; 0x3d
 8001be4:	5460      	strb	r0, [r4, r1]
  switch (Channel)
 8001be6:	2d04      	cmp	r5, #4
 8001be8:	d1d5      	bne.n	8001b96 <HAL_TIM_IC_Start_DMA+0x1a>
 8001bea:	e00f      	b.n	8001c0c <HAL_TIM_IC_Start_DMA+0x90>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8001bec:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001bee:	491b      	ldr	r1, [pc, #108]	; (8001c5c <HAL_TIM_IC_Start_DMA+0xe0>)
 8001bf0:	6281      	str	r1, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8001bf2:	491b      	ldr	r1, [pc, #108]	; (8001c60 <HAL_TIM_IC_Start_DMA+0xe4>)
 8001bf4:	6301      	str	r1, [r0, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length);
 8001bf6:	6821      	ldr	r1, [r4, #0]
 8001bf8:	313c      	adds	r1, #60	; 0x3c
 8001bfa:	f7fe ff57 	bl	8000aac <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8001bfe:	2280      	movs	r2, #128	; 0x80
 8001c00:	6823      	ldr	r3, [r4, #0]
 8001c02:	0112      	lsls	r2, r2, #4
 8001c04:	68d9      	ldr	r1, [r3, #12]
 8001c06:	430a      	orrs	r2, r1
 8001c08:	60da      	str	r2, [r3, #12]
    break;
 8001c0a:	e7d9      	b.n	8001bc0 <HAL_TIM_IC_Start_DMA+0x44>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8001c0c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001c0e:	4913      	ldr	r1, [pc, #76]	; (8001c5c <HAL_TIM_IC_Start_DMA+0xe0>)
 8001c10:	6281      	str	r1, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8001c12:	4913      	ldr	r1, [pc, #76]	; (8001c60 <HAL_TIM_IC_Start_DMA+0xe4>)
 8001c14:	6301      	str	r1, [r0, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length);
 8001c16:	6821      	ldr	r1, [r4, #0]
 8001c18:	3138      	adds	r1, #56	; 0x38
 8001c1a:	f7fe ff47 	bl	8000aac <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8001c1e:	2280      	movs	r2, #128	; 0x80
 8001c20:	6823      	ldr	r3, [r4, #0]
 8001c22:	00d2      	lsls	r2, r2, #3
 8001c24:	68d9      	ldr	r1, [r3, #12]
 8001c26:	430a      	orrs	r2, r1
 8001c28:	60da      	str	r2, [r3, #12]
    break;
 8001c2a:	e7c9      	b.n	8001bc0 <HAL_TIM_IC_Start_DMA+0x44>
  switch (Channel)
 8001c2c:	2d00      	cmp	r5, #0
 8001c2e:	d10f      	bne.n	8001c50 <HAL_TIM_IC_Start_DMA+0xd4>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8001c30:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001c32:	490a      	ldr	r1, [pc, #40]	; (8001c5c <HAL_TIM_IC_Start_DMA+0xe0>)
 8001c34:	6281      	str	r1, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8001c36:	490a      	ldr	r1, [pc, #40]	; (8001c60 <HAL_TIM_IC_Start_DMA+0xe4>)
 8001c38:	6301      	str	r1, [r0, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length);
 8001c3a:	6821      	ldr	r1, [r4, #0]
 8001c3c:	3134      	adds	r1, #52	; 0x34
 8001c3e:	f7fe ff35 	bl	8000aac <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8001c42:	2280      	movs	r2, #128	; 0x80
 8001c44:	6823      	ldr	r3, [r4, #0]
 8001c46:	0092      	lsls	r2, r2, #2
 8001c48:	68d9      	ldr	r1, [r3, #12]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	60da      	str	r2, [r3, #12]
    break;
 8001c4e:	e7b7      	b.n	8001bc0 <HAL_TIM_IC_Start_DMA+0x44>
 8001c50:	6823      	ldr	r3, [r4, #0]
 8001c52:	e7b5      	b.n	8001bc0 <HAL_TIM_IC_Start_DMA+0x44>
      return HAL_ERROR;
 8001c54:	3801      	subs	r0, #1
    if((pData == 0U ) && (Length > 0U))
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0c2      	beq.n	8001be0 <HAL_TIM_IC_Start_DMA+0x64>
 8001c5a:	e7be      	b.n	8001bda <HAL_TIM_IC_Start_DMA+0x5e>
 8001c5c:	08002395 	.word	0x08002395
 8001c60:	08002539 	.word	0x08002539

08001c64 <HAL_TIM_IC_Stop_DMA>:
{
 8001c64:	b530      	push	{r4, r5, lr}
  switch (Channel)
 8001c66:	2904      	cmp	r1, #4
 8001c68:	d031      	beq.n	8001cce <HAL_TIM_IC_Stop_DMA+0x6a>
 8001c6a:	d926      	bls.n	8001cba <HAL_TIM_IC_Stop_DMA+0x56>
 8001c6c:	2908      	cmp	r1, #8
 8001c6e:	d01e      	beq.n	8001cae <HAL_TIM_IC_Stop_DMA+0x4a>
 8001c70:	290c      	cmp	r1, #12
 8001c72:	d12a      	bne.n	8001cca <HAL_TIM_IC_Stop_DMA+0x66>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8001c74:	6803      	ldr	r3, [r0, #0]
 8001c76:	4c19      	ldr	r4, [pc, #100]	; (8001cdc <HAL_TIM_IC_Stop_DMA+0x78>)
 8001c78:	68da      	ldr	r2, [r3, #12]
 8001c7a:	4022      	ands	r2, r4
 8001c7c:	60da      	str	r2, [r3, #12]
  tmp = TIM_CCER_CC1E << Channel;
 8001c7e:	2401      	movs	r4, #1
 8001c80:	0025      	movs	r5, r4
 8001c82:	408d      	lsls	r5, r1
  TIMx->CCER &= ~tmp;
 8001c84:	6a1a      	ldr	r2, [r3, #32]
 8001c86:	43aa      	bics	r2, r5
 8001c88:	621a      	str	r2, [r3, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001c8a:	6a1a      	ldr	r2, [r3, #32]
 8001c8c:	621a      	str	r2, [r3, #32]
  __HAL_TIM_DISABLE(htim);
 8001c8e:	6a19      	ldr	r1, [r3, #32]
 8001c90:	4a13      	ldr	r2, [pc, #76]	; (8001ce0 <HAL_TIM_IC_Stop_DMA+0x7c>)
 8001c92:	4211      	tst	r1, r2
 8001c94:	d106      	bne.n	8001ca4 <HAL_TIM_IC_Stop_DMA+0x40>
 8001c96:	6a19      	ldr	r1, [r3, #32]
 8001c98:	4a12      	ldr	r2, [pc, #72]	; (8001ce4 <HAL_TIM_IC_Stop_DMA+0x80>)
 8001c9a:	4211      	tst	r1, r2
 8001c9c:	d102      	bne.n	8001ca4 <HAL_TIM_IC_Stop_DMA+0x40>
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	43a2      	bics	r2, r4
 8001ca2:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	233d      	movs	r3, #61	; 0x3d
 8001ca8:	54c2      	strb	r2, [r0, r3]
}
 8001caa:	2000      	movs	r0, #0
 8001cac:	bd30      	pop	{r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8001cae:	6803      	ldr	r3, [r0, #0]
 8001cb0:	4c0d      	ldr	r4, [pc, #52]	; (8001ce8 <HAL_TIM_IC_Stop_DMA+0x84>)
 8001cb2:	68da      	ldr	r2, [r3, #12]
 8001cb4:	4022      	ands	r2, r4
 8001cb6:	60da      	str	r2, [r3, #12]
    break;
 8001cb8:	e7e1      	b.n	8001c7e <HAL_TIM_IC_Stop_DMA+0x1a>
  switch (Channel)
 8001cba:	2900      	cmp	r1, #0
 8001cbc:	d105      	bne.n	8001cca <HAL_TIM_IC_Stop_DMA+0x66>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8001cbe:	6803      	ldr	r3, [r0, #0]
 8001cc0:	4c0a      	ldr	r4, [pc, #40]	; (8001cec <HAL_TIM_IC_Stop_DMA+0x88>)
 8001cc2:	68da      	ldr	r2, [r3, #12]
 8001cc4:	4022      	ands	r2, r4
 8001cc6:	60da      	str	r2, [r3, #12]
    break;
 8001cc8:	e7d9      	b.n	8001c7e <HAL_TIM_IC_Stop_DMA+0x1a>
 8001cca:	6803      	ldr	r3, [r0, #0]
 8001ccc:	e7d7      	b.n	8001c7e <HAL_TIM_IC_Stop_DMA+0x1a>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8001cce:	6803      	ldr	r3, [r0, #0]
 8001cd0:	4c07      	ldr	r4, [pc, #28]	; (8001cf0 <HAL_TIM_IC_Stop_DMA+0x8c>)
 8001cd2:	68da      	ldr	r2, [r3, #12]
 8001cd4:	4022      	ands	r2, r4
 8001cd6:	60da      	str	r2, [r3, #12]
    break;
 8001cd8:	e7d1      	b.n	8001c7e <HAL_TIM_IC_Stop_DMA+0x1a>
 8001cda:	46c0      	nop			; (mov r8, r8)
 8001cdc:	ffffefff 	.word	0xffffefff
 8001ce0:	00001111 	.word	0x00001111
 8001ce4:	00000444 	.word	0x00000444
 8001ce8:	fffff7ff 	.word	0xfffff7ff
 8001cec:	fffffdff 	.word	0xfffffdff
 8001cf0:	fffffbff 	.word	0xfffffbff

08001cf4 <HAL_TIM_IC_ConfigChannel>:
{
 8001cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cf6:	46ce      	mov	lr, r9
 8001cf8:	4647      	mov	r7, r8
  __HAL_LOCK(htim);
 8001cfa:	243c      	movs	r4, #60	; 0x3c
{
 8001cfc:	b580      	push	{r7, lr}
  __HAL_LOCK(htim);
 8001cfe:	5d05      	ldrb	r5, [r0, r4]
{
 8001d00:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8001d02:	2002      	movs	r0, #2
 8001d04:	2d01      	cmp	r5, #1
 8001d06:	d038      	beq.n	8001d7a <HAL_TIM_IC_ConfigChannel+0x86>
 8001d08:	2501      	movs	r5, #1
 8001d0a:	551d      	strb	r5, [r3, r4]
  htim->State = HAL_TIM_STATE_BUSY;
 8001d0c:	3401      	adds	r4, #1
 8001d0e:	5518      	strb	r0, [r3, r4]
  if (Channel == TIM_CHANNEL_1)
 8001d10:	2a00      	cmp	r2, #0
 8001d12:	d036      	beq.n	8001d82 <HAL_TIM_IC_ConfigChannel+0x8e>
  else if (Channel == TIM_CHANNEL_2)
 8001d14:	2a04      	cmp	r2, #4
 8001d16:	d063      	beq.n	8001de0 <HAL_TIM_IC_ConfigChannel+0xec>
  else if (Channel == TIM_CHANNEL_3)
 8001d18:	2a08      	cmp	r2, #8
 8001d1a:	d100      	bne.n	8001d1e <HAL_TIM_IC_ConfigChannel+0x2a>
 8001d1c:	e086      	b.n	8001e2c <HAL_TIM_IC_ConfigChannel+0x138>
    TIM_TI4_SetConfig(htim->Instance,
 8001d1e:	6808      	ldr	r0, [r1, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	4680      	mov	r8, r0
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001d24:	6a16      	ldr	r6, [r2, #32]
 8001d26:	4f58      	ldr	r7, [pc, #352]	; (8001e88 <HAL_TIM_IC_ConfigChannel+0x194>)
    TIM_TI4_SetConfig(htim->Instance,
 8001d28:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001d2a:	403e      	ands	r6, r7
    TIM_TI4_SetConfig(htim->Instance,
 8001d2c:	68cc      	ldr	r4, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001d2e:	6216      	str	r6, [r2, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001d30:	69d7      	ldr	r7, [r2, #28]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8001d32:	4856      	ldr	r0, [pc, #344]	; (8001e8c <HAL_TIM_IC_ConfigChannel+0x198>)
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8001d34:	022d      	lsls	r5, r5, #8
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8001d36:	4007      	ands	r7, r0
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8001d38:	433d      	orrs	r5, r7
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8001d3a:	4f55      	ldr	r7, [pc, #340]	; (8001e90 <HAL_TIM_IC_ConfigChannel+0x19c>)
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001d3c:	0724      	lsls	r4, r4, #28
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8001d3e:	403d      	ands	r5, r7
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001d40:	0c24      	lsrs	r4, r4, #16
  tmpccer = TIMx->CCER;
 8001d42:	6a16      	ldr	r6, [r2, #32]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001d44:	432c      	orrs	r4, r5
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8001d46:	4d53      	ldr	r5, [pc, #332]	; (8001e94 <HAL_TIM_IC_ConfigChannel+0x1a0>)
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001d48:	4640      	mov	r0, r8
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8001d4a:	4035      	ands	r5, r6
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001d4c:	26a0      	movs	r6, #160	; 0xa0
 8001d4e:	0300      	lsls	r0, r0, #12
 8001d50:	0236      	lsls	r6, r6, #8
 8001d52:	4030      	ands	r0, r6
 8001d54:	4328      	orrs	r0, r5
  TIMx->CCMR2 = tmpccmr2;
 8001d56:	61d4      	str	r4, [r2, #28]
  TIMx->CCER = tmpccer ;
 8001d58:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001d5a:	69d0      	ldr	r0, [r2, #28]
 8001d5c:	4c4e      	ldr	r4, [pc, #312]	; (8001e98 <HAL_TIM_IC_ConfigChannel+0x1a4>)
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001d5e:	6889      	ldr	r1, [r1, #8]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001d60:	4020      	ands	r0, r4
 8001d62:	61d0      	str	r0, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001d64:	69d0      	ldr	r0, [r2, #28]
 8001d66:	0209      	lsls	r1, r1, #8
 8001d68:	4301      	orrs	r1, r0
 8001d6a:	61d1      	str	r1, [r2, #28]
  htim->State = HAL_TIM_STATE_READY;
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	223d      	movs	r2, #61	; 0x3d
 8001d70:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(htim);
 8001d72:	2100      	movs	r1, #0
  return HAL_OK;
 8001d74:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8001d76:	3a01      	subs	r2, #1
 8001d78:	5499      	strb	r1, [r3, r2]
}
 8001d7a:	bc0c      	pop	{r2, r3}
 8001d7c:	4690      	mov	r8, r2
 8001d7e:	4699      	mov	r9, r3
 8001d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    TIM_TI1_SetConfig(htim->Instance,
 8001d82:	6848      	ldr	r0, [r1, #4]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	4680      	mov	r8, r0
 8001d88:	68c8      	ldr	r0, [r1, #12]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001d8a:	4c44      	ldr	r4, [pc, #272]	; (8001e9c <HAL_TIM_IC_ConfigChannel+0x1a8>)
    TIM_TI1_SetConfig(htim->Instance,
 8001d8c:	4681      	mov	r9, r0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d8e:	6a10      	ldr	r0, [r2, #32]
    TIM_TI1_SetConfig(htim->Instance,
 8001d90:	680f      	ldr	r7, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d92:	43a8      	bics	r0, r5
 8001d94:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d96:	6990      	ldr	r0, [r2, #24]
  tmpccer = TIMx->CCER;
 8001d98:	6a16      	ldr	r6, [r2, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001d9a:	42a2      	cmp	r2, r4
 8001d9c:	d06d      	beq.n	8001e7a <HAL_TIM_IC_ConfigChannel+0x186>
 8001d9e:	2480      	movs	r4, #128	; 0x80
 8001da0:	05e4      	lsls	r4, r4, #23
 8001da2:	42a2      	cmp	r2, r4
 8001da4:	d069      	beq.n	8001e7a <HAL_TIM_IC_ConfigChannel+0x186>
 8001da6:	4c3e      	ldr	r4, [pc, #248]	; (8001ea0 <HAL_TIM_IC_ConfigChannel+0x1ac>)
 8001da8:	42a2      	cmp	r2, r4
 8001daa:	d066      	beq.n	8001e7a <HAL_TIM_IC_ConfigChannel+0x186>
 8001dac:	4c3d      	ldr	r4, [pc, #244]	; (8001ea4 <HAL_TIM_IC_ConfigChannel+0x1b0>)
 8001dae:	42a2      	cmp	r2, r4
 8001db0:	d063      	beq.n	8001e7a <HAL_TIM_IC_ConfigChannel+0x186>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8001db2:	4305      	orrs	r5, r0
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001db4:	20f0      	movs	r0, #240	; 0xf0
 8001db6:	4385      	bics	r5, r0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001db8:	4648      	mov	r0, r9
 8001dba:	24ff      	movs	r4, #255	; 0xff
 8001dbc:	0100      	lsls	r0, r0, #4
 8001dbe:	4004      	ands	r4, r0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001dc0:	200a      	movs	r0, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001dc2:	4325      	orrs	r5, r4
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001dc4:	240c      	movs	r4, #12
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001dc6:	4386      	bics	r6, r0
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001dc8:	4038      	ands	r0, r7
 8001dca:	4330      	orrs	r0, r6
  TIMx->CCMR1 = tmpccmr1;
 8001dcc:	6195      	str	r5, [r2, #24]
  TIMx->CCER = tmpccer;
 8001dce:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001dd0:	6990      	ldr	r0, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001dd2:	6889      	ldr	r1, [r1, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001dd4:	43a0      	bics	r0, r4
 8001dd6:	6190      	str	r0, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001dd8:	6990      	ldr	r0, [r2, #24]
 8001dda:	4301      	orrs	r1, r0
 8001ddc:	6191      	str	r1, [r2, #24]
 8001dde:	e7c5      	b.n	8001d6c <HAL_TIM_IC_ConfigChannel+0x78>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001de0:	2710      	movs	r7, #16
    TIM_TI2_SetConfig(htim->Instance,
 8001de2:	68c8      	ldr	r0, [r1, #12]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	4680      	mov	r8, r0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001de8:	6a15      	ldr	r5, [r2, #32]
    TIM_TI2_SetConfig(htim->Instance,
 8001dea:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001dec:	43bd      	bics	r5, r7
    TIM_TI2_SetConfig(htim->Instance,
 8001dee:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001df0:	6215      	str	r5, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001df2:	6997      	ldr	r7, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8001df4:	4825      	ldr	r0, [pc, #148]	; (8001e8c <HAL_TIM_IC_ConfigChannel+0x198>)
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8001df6:	0224      	lsls	r4, r4, #8
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8001df8:	4007      	ands	r7, r0
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001dfa:	4640      	mov	r0, r8
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8001dfc:	433c      	orrs	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001dfe:	4f24      	ldr	r7, [pc, #144]	; (8001e90 <HAL_TIM_IC_ConfigChannel+0x19c>)
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001e00:	0700      	lsls	r0, r0, #28
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001e02:	403c      	ands	r4, r7
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001e04:	0c00      	lsrs	r0, r0, #16
 8001e06:	4320      	orrs	r0, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001e08:	24a0      	movs	r4, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8001e0a:	6a15      	ldr	r5, [r2, #32]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001e0c:	0136      	lsls	r6, r6, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001e0e:	43a5      	bics	r5, r4
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001e10:	4034      	ands	r4, r6
 8001e12:	4325      	orrs	r5, r4
  TIMx->CCMR1 = tmpccmr1 ;
 8001e14:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 8001e16:	6215      	str	r5, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001e18:	6990      	ldr	r0, [r2, #24]
 8001e1a:	4c1f      	ldr	r4, [pc, #124]	; (8001e98 <HAL_TIM_IC_ConfigChannel+0x1a4>)
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001e1c:	6889      	ldr	r1, [r1, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001e1e:	4020      	ands	r0, r4
 8001e20:	6190      	str	r0, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001e22:	6990      	ldr	r0, [r2, #24]
 8001e24:	0209      	lsls	r1, r1, #8
 8001e26:	4301      	orrs	r1, r0
 8001e28:	6191      	str	r1, [r2, #24]
 8001e2a:	e79f      	b.n	8001d6c <HAL_TIM_IC_ConfigChannel+0x78>
    TIM_TI3_SetConfig(htim->Instance,
 8001e2c:	6808      	ldr	r0, [r1, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	4680      	mov	r8, r0
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8001e32:	2003      	movs	r0, #3
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001e34:	6a16      	ldr	r6, [r2, #32]
 8001e36:	4f1c      	ldr	r7, [pc, #112]	; (8001ea8 <HAL_TIM_IC_ConfigChannel+0x1b4>)
    TIM_TI3_SetConfig(htim->Instance,
 8001e38:	68cc      	ldr	r4, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001e3a:	403e      	ands	r6, r7
    TIM_TI3_SetConfig(htim->Instance,
 8001e3c:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001e3e:	6216      	str	r6, [r2, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001e40:	69d7      	ldr	r7, [r2, #28]
  tmpccer = TIMx->CCER;
 8001e42:	6a16      	ldr	r6, [r2, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8001e44:	4387      	bics	r7, r0
  tmpccmr2 |= TIM_ICSelection;
 8001e46:	433d      	orrs	r5, r7
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8001e48:	27f0      	movs	r7, #240	; 0xf0
 8001e4a:	43bd      	bics	r5, r7
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8001e4c:	0127      	lsls	r7, r4, #4
 8001e4e:	24ff      	movs	r4, #255	; 0xff
 8001e50:	403c      	ands	r4, r7
 8001e52:	432c      	orrs	r4, r5
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8001e54:	4d15      	ldr	r5, [pc, #84]	; (8001eac <HAL_TIM_IC_ConfigChannel+0x1b8>)
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001e56:	4640      	mov	r0, r8
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8001e58:	4035      	ands	r5, r6
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001e5a:	26a0      	movs	r6, #160	; 0xa0
  TIMx->CCMR2 = tmpccmr2;
 8001e5c:	61d4      	str	r4, [r2, #28]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001e5e:	240c      	movs	r4, #12
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001e60:	0200      	lsls	r0, r0, #8
 8001e62:	0136      	lsls	r6, r6, #4
 8001e64:	4030      	ands	r0, r6
 8001e66:	4328      	orrs	r0, r5
  TIMx->CCER = tmpccer;
 8001e68:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001e6a:	69d0      	ldr	r0, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001e6c:	6889      	ldr	r1, [r1, #8]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001e6e:	43a0      	bics	r0, r4
 8001e70:	61d0      	str	r0, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001e72:	69d0      	ldr	r0, [r2, #28]
 8001e74:	4301      	orrs	r1, r0
 8001e76:	61d1      	str	r1, [r2, #28]
 8001e78:	e778      	b.n	8001d6c <HAL_TIM_IC_ConfigChannel+0x78>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8001e7a:	2503      	movs	r5, #3
 8001e7c:	43a8      	bics	r0, r5
 8001e7e:	0005      	movs	r5, r0
    tmpccmr1 |= TIM_ICSelection;
 8001e80:	4640      	mov	r0, r8
 8001e82:	4328      	orrs	r0, r5
 8001e84:	0005      	movs	r5, r0
 8001e86:	e795      	b.n	8001db4 <HAL_TIM_IC_ConfigChannel+0xc0>
 8001e88:	ffffefff 	.word	0xffffefff
 8001e8c:	fffffcff 	.word	0xfffffcff
 8001e90:	ffff0fff 	.word	0xffff0fff
 8001e94:	ffff5fff 	.word	0xffff5fff
 8001e98:	fffff3ff 	.word	0xfffff3ff
 8001e9c:	40012c00 	.word	0x40012c00
 8001ea0:	40000400 	.word	0x40000400
 8001ea4:	40014000 	.word	0x40014000
 8001ea8:	fffffeff 	.word	0xfffffeff
 8001eac:	fffff5ff 	.word	0xfffff5ff

08001eb0 <HAL_TIM_PWM_ConfigChannel>:
{
 8001eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8001eb2:	243c      	movs	r4, #60	; 0x3c
 8001eb4:	5d05      	ldrb	r5, [r0, r4]
{
 8001eb6:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8001eb8:	2002      	movs	r0, #2
 8001eba:	2d01      	cmp	r5, #1
 8001ebc:	d048      	beq.n	8001f50 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8001ebe:	2501      	movs	r5, #1
 8001ec0:	551d      	strb	r5, [r3, r4]
  htim->State = HAL_TIM_STATE_BUSY;
 8001ec2:	3401      	adds	r4, #1
 8001ec4:	5518      	strb	r0, [r3, r4]
  switch (Channel)
 8001ec6:	2a04      	cmp	r2, #4
 8001ec8:	d043      	beq.n	8001f52 <HAL_TIM_PWM_ConfigChannel+0xa2>
 8001eca:	d800      	bhi.n	8001ece <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001ecc:	e0a6      	b.n	800201c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001ece:	2a08      	cmp	r2, #8
 8001ed0:	d100      	bne.n	8001ed4 <HAL_TIM_PWM_ConfigChannel+0x24>
 8001ed2:	e074      	b.n	8001fbe <HAL_TIM_PWM_ConfigChannel+0x10e>
 8001ed4:	2a0c      	cmp	r2, #12
 8001ed6:	d134      	bne.n	8001f42 <HAL_TIM_PWM_ConfigChannel+0x92>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001ed8:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001eda:	4c81      	ldr	r4, [pc, #516]	; (80020e0 <HAL_TIM_PWM_ConfigChannel+0x230>)
 8001edc:	6a10      	ldr	r0, [r2, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001ede:	4d81      	ldr	r5, [pc, #516]	; (80020e4 <HAL_TIM_PWM_ConfigChannel+0x234>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001ee0:	4020      	ands	r0, r4
 8001ee2:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8001ee4:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8001ee6:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8001ee8:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001eea:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001eec:	680d      	ldr	r5, [r1, #0]
 8001eee:	022d      	lsls	r5, r5, #8
 8001ef0:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC4P;
 8001ef2:	4c7d      	ldr	r4, [pc, #500]	; (80020e8 <HAL_TIM_PWM_ConfigChannel+0x238>)
 8001ef4:	4004      	ands	r4, r0
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001ef6:	6888      	ldr	r0, [r1, #8]
 8001ef8:	0300      	lsls	r0, r0, #12
 8001efa:	4320      	orrs	r0, r4
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001efc:	4c7b      	ldr	r4, [pc, #492]	; (80020ec <HAL_TIM_PWM_ConfigChannel+0x23c>)
 8001efe:	42a2      	cmp	r2, r4
 8001f00:	d100      	bne.n	8001f04 <HAL_TIM_PWM_ConfigChannel+0x54>
 8001f02:	e0ca      	b.n	800209a <HAL_TIM_PWM_ConfigChannel+0x1ea>
 8001f04:	4c7a      	ldr	r4, [pc, #488]	; (80020f0 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8001f06:	42a2      	cmp	r2, r4
 8001f08:	d100      	bne.n	8001f0c <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001f0a:	e0c6      	b.n	800209a <HAL_TIM_PWM_ConfigChannel+0x1ea>
 8001f0c:	4c79      	ldr	r4, [pc, #484]	; (80020f4 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8001f0e:	42a2      	cmp	r2, r4
 8001f10:	d100      	bne.n	8001f14 <HAL_TIM_PWM_ConfigChannel+0x64>
 8001f12:	e0c2      	b.n	800209a <HAL_TIM_PWM_ConfigChannel+0x1ea>
 8001f14:	4c78      	ldr	r4, [pc, #480]	; (80020f8 <HAL_TIM_PWM_ConfigChannel+0x248>)
 8001f16:	42a2      	cmp	r2, r4
 8001f18:	d100      	bne.n	8001f1c <HAL_TIM_PWM_ConfigChannel+0x6c>
 8001f1a:	e0be      	b.n	800209a <HAL_TIM_PWM_ConfigChannel+0x1ea>
  TIMx->CCR4 = OC_Config->Pulse;
 8001f1c:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001f1e:	6056      	str	r6, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001f20:	61d5      	str	r5, [r2, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8001f22:	6414      	str	r4, [r2, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8001f24:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001f26:	2080      	movs	r0, #128	; 0x80
 8001f28:	69d4      	ldr	r4, [r2, #28]
 8001f2a:	0100      	lsls	r0, r0, #4
 8001f2c:	4320      	orrs	r0, r4
 8001f2e:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001f30:	69d0      	ldr	r0, [r2, #28]
 8001f32:	4c72      	ldr	r4, [pc, #456]	; (80020fc <HAL_TIM_PWM_ConfigChannel+0x24c>)
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001f34:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001f36:	4020      	ands	r0, r4
 8001f38:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001f3a:	69d0      	ldr	r0, [r2, #28]
 8001f3c:	0209      	lsls	r1, r1, #8
 8001f3e:	4301      	orrs	r1, r0
 8001f40:	61d1      	str	r1, [r2, #28]
  htim->State = HAL_TIM_STATE_READY;
 8001f42:	2101      	movs	r1, #1
 8001f44:	223d      	movs	r2, #61	; 0x3d
 8001f46:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(htim);
 8001f48:	2100      	movs	r1, #0
  return HAL_OK;
 8001f4a:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8001f4c:	3a01      	subs	r2, #1
 8001f4e:	5499      	strb	r1, [r3, r2]
}
 8001f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f52:	2410      	movs	r4, #16
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001f54:	681a      	ldr	r2, [r3, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001f56:	4d63      	ldr	r5, [pc, #396]	; (80020e4 <HAL_TIM_PWM_ConfigChannel+0x234>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f58:	6a10      	ldr	r0, [r2, #32]
 8001f5a:	43a0      	bics	r0, r4
 8001f5c:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8001f5e:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8001f60:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8001f62:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001f64:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f66:	680d      	ldr	r5, [r1, #0]
 8001f68:	022d      	lsls	r5, r5, #8
 8001f6a:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC2P;
 8001f6c:	2420      	movs	r4, #32
 8001f6e:	43a0      	bics	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001f70:	688c      	ldr	r4, [r1, #8]
 8001f72:	0124      	lsls	r4, r4, #4
 8001f74:	4320      	orrs	r0, r4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001f76:	4c5d      	ldr	r4, [pc, #372]	; (80020ec <HAL_TIM_PWM_ConfigChannel+0x23c>)
 8001f78:	42a2      	cmp	r2, r4
 8001f7a:	d100      	bne.n	8001f7e <HAL_TIM_PWM_ConfigChannel+0xce>
 8001f7c:	e093      	b.n	80020a6 <HAL_TIM_PWM_ConfigChannel+0x1f6>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001f7e:	4c5c      	ldr	r4, [pc, #368]	; (80020f0 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8001f80:	42a2      	cmp	r2, r4
 8001f82:	d100      	bne.n	8001f86 <HAL_TIM_PWM_ConfigChannel+0xd6>
 8001f84:	e096      	b.n	80020b4 <HAL_TIM_PWM_ConfigChannel+0x204>
 8001f86:	4c5b      	ldr	r4, [pc, #364]	; (80020f4 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8001f88:	42a2      	cmp	r2, r4
 8001f8a:	d100      	bne.n	8001f8e <HAL_TIM_PWM_ConfigChannel+0xde>
 8001f8c:	e092      	b.n	80020b4 <HAL_TIM_PWM_ConfigChannel+0x204>
 8001f8e:	4c5a      	ldr	r4, [pc, #360]	; (80020f8 <HAL_TIM_PWM_ConfigChannel+0x248>)
 8001f90:	42a2      	cmp	r2, r4
 8001f92:	d100      	bne.n	8001f96 <HAL_TIM_PWM_ConfigChannel+0xe6>
 8001f94:	e08e      	b.n	80020b4 <HAL_TIM_PWM_ConfigChannel+0x204>
  TIMx->CCR2 = OC_Config->Pulse;
 8001f96:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001f98:	6056      	str	r6, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001f9a:	6195      	str	r5, [r2, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001f9c:	6394      	str	r4, [r2, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001f9e:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001fa0:	2080      	movs	r0, #128	; 0x80
 8001fa2:	6994      	ldr	r4, [r2, #24]
 8001fa4:	0100      	lsls	r0, r0, #4
 8001fa6:	4320      	orrs	r0, r4
 8001fa8:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001faa:	6990      	ldr	r0, [r2, #24]
 8001fac:	4c53      	ldr	r4, [pc, #332]	; (80020fc <HAL_TIM_PWM_ConfigChannel+0x24c>)
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001fae:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001fb0:	4020      	ands	r0, r4
 8001fb2:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001fb4:	6990      	ldr	r0, [r2, #24]
 8001fb6:	0209      	lsls	r1, r1, #8
 8001fb8:	4301      	orrs	r1, r0
 8001fba:	6191      	str	r1, [r2, #24]
    break;
 8001fbc:	e7c1      	b.n	8001f42 <HAL_TIM_PWM_ConfigChannel+0x92>
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001fbe:	2673      	movs	r6, #115	; 0x73
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001fc0:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001fc2:	4c4f      	ldr	r4, [pc, #316]	; (8002100 <HAL_TIM_PWM_ConfigChannel+0x250>)
 8001fc4:	6a10      	ldr	r0, [r2, #32]
 8001fc6:	4020      	ands	r0, r4
 8001fc8:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8001fca:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8001fcc:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8001fce:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001fd0:	43b4      	bics	r4, r6
  tmpccmrx |= OC_Config->OCMode;
 8001fd2:	680e      	ldr	r6, [r1, #0]
 8001fd4:	4326      	orrs	r6, r4
  tmpccer &= ~TIM_CCER_CC3P;
 8001fd6:	4c4b      	ldr	r4, [pc, #300]	; (8002104 <HAL_TIM_PWM_ConfigChannel+0x254>)
 8001fd8:	4020      	ands	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001fda:	688c      	ldr	r4, [r1, #8]
 8001fdc:	0224      	lsls	r4, r4, #8
 8001fde:	4320      	orrs	r0, r4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001fe0:	4c42      	ldr	r4, [pc, #264]	; (80020ec <HAL_TIM_PWM_ConfigChannel+0x23c>)
 8001fe2:	42a2      	cmp	r2, r4
 8001fe4:	d04a      	beq.n	800207c <HAL_TIM_PWM_ConfigChannel+0x1cc>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001fe6:	4c42      	ldr	r4, [pc, #264]	; (80020f0 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8001fe8:	42a2      	cmp	r2, r4
 8001fea:	d04e      	beq.n	800208a <HAL_TIM_PWM_ConfigChannel+0x1da>
 8001fec:	4c41      	ldr	r4, [pc, #260]	; (80020f4 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8001fee:	42a2      	cmp	r2, r4
 8001ff0:	d04b      	beq.n	800208a <HAL_TIM_PWM_ConfigChannel+0x1da>
 8001ff2:	4c41      	ldr	r4, [pc, #260]	; (80020f8 <HAL_TIM_PWM_ConfigChannel+0x248>)
 8001ff4:	42a2      	cmp	r2, r4
 8001ff6:	d048      	beq.n	800208a <HAL_TIM_PWM_ConfigChannel+0x1da>
  TIMx->CCR3 = OC_Config->Pulse;
 8001ff8:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001ffa:	6055      	str	r5, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001ffc:	61d6      	str	r6, [r2, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8001ffe:	63d4      	str	r4, [r2, #60]	; 0x3c
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002000:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 8002002:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002004:	69d0      	ldr	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002006:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002008:	4320      	orrs	r0, r4
 800200a:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800200c:	69d0      	ldr	r0, [r2, #28]
 800200e:	3c04      	subs	r4, #4
 8002010:	43a0      	bics	r0, r4
 8002012:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002014:	69d0      	ldr	r0, [r2, #28]
 8002016:	4301      	orrs	r1, r0
 8002018:	61d1      	str	r1, [r2, #28]
    break;
 800201a:	e792      	b.n	8001f42 <HAL_TIM_PWM_ConfigChannel+0x92>
  switch (Channel)
 800201c:	2a00      	cmp	r2, #0
 800201e:	d000      	beq.n	8002022 <HAL_TIM_PWM_ConfigChannel+0x172>
 8002020:	e78f      	b.n	8001f42 <HAL_TIM_PWM_ConfigChannel+0x92>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002022:	681a      	ldr	r2, [r3, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002024:	2773      	movs	r7, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002026:	6a14      	ldr	r4, [r2, #32]
 8002028:	43ac      	bics	r4, r5
 800202a:	6214      	str	r4, [r2, #32]
  tmpccer = TIMx->CCER;
 800202c:	6a14      	ldr	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 800202e:	6856      	ldr	r6, [r2, #4]
  tmpccer &= ~TIM_CCER_CC1P;
 8002030:	4384      	bics	r4, r0
 8002032:	0020      	movs	r0, r4
  tmpccmrx = TIMx->CCMR1;
 8002034:	6995      	ldr	r5, [r2, #24]
  tmpccer |= OC_Config->OCPolarity;
 8002036:	688c      	ldr	r4, [r1, #8]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002038:	43bd      	bics	r5, r7
  tmpccer |= OC_Config->OCPolarity;
 800203a:	4320      	orrs	r0, r4
  tmpccmrx |= OC_Config->OCMode;
 800203c:	680f      	ldr	r7, [r1, #0]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800203e:	4c2b      	ldr	r4, [pc, #172]	; (80020ec <HAL_TIM_PWM_ConfigChannel+0x23c>)
  tmpccmrx |= OC_Config->OCMode;
 8002040:	433d      	orrs	r5, r7
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002042:	42a2      	cmp	r2, r4
 8002044:	d03e      	beq.n	80020c4 <HAL_TIM_PWM_ConfigChannel+0x214>
 8002046:	4c2a      	ldr	r4, [pc, #168]	; (80020f0 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8002048:	42a2      	cmp	r2, r4
 800204a:	d03b      	beq.n	80020c4 <HAL_TIM_PWM_ConfigChannel+0x214>
 800204c:	4c29      	ldr	r4, [pc, #164]	; (80020f4 <HAL_TIM_PWM_ConfigChannel+0x244>)
 800204e:	42a2      	cmp	r2, r4
 8002050:	d038      	beq.n	80020c4 <HAL_TIM_PWM_ConfigChannel+0x214>
 8002052:	4c29      	ldr	r4, [pc, #164]	; (80020f8 <HAL_TIM_PWM_ConfigChannel+0x248>)
 8002054:	42a2      	cmp	r2, r4
 8002056:	d035      	beq.n	80020c4 <HAL_TIM_PWM_ConfigChannel+0x214>
  TIMx->CCR1 = OC_Config->Pulse;
 8002058:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800205a:	6056      	str	r6, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 800205c:	6195      	str	r5, [r2, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800205e:	6354      	str	r4, [r2, #52]	; 0x34
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002060:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 8002062:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002064:	6990      	ldr	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002066:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002068:	4320      	orrs	r0, r4
 800206a:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800206c:	6990      	ldr	r0, [r2, #24]
 800206e:	3c04      	subs	r4, #4
 8002070:	43a0      	bics	r0, r4
 8002072:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002074:	6990      	ldr	r0, [r2, #24]
 8002076:	4301      	orrs	r1, r0
 8002078:	6191      	str	r1, [r2, #24]
    break;
 800207a:	e762      	b.n	8001f42 <HAL_TIM_PWM_ConfigChannel+0x92>
    tmpccer &= ~TIM_CCER_CC3NP;
 800207c:	4c22      	ldr	r4, [pc, #136]	; (8002108 <HAL_TIM_PWM_ConfigChannel+0x258>)
 800207e:	4004      	ands	r4, r0
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002080:	68c8      	ldr	r0, [r1, #12]
 8002082:	0200      	lsls	r0, r0, #8
 8002084:	4320      	orrs	r0, r4
    tmpccer &= ~TIM_CCER_CC3NE;
 8002086:	4c1d      	ldr	r4, [pc, #116]	; (80020fc <HAL_TIM_PWM_ConfigChannel+0x24c>)
 8002088:	4020      	ands	r0, r4
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800208a:	4c20      	ldr	r4, [pc, #128]	; (800210c <HAL_TIM_PWM_ConfigChannel+0x25c>)
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800208c:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800208e:	402c      	ands	r4, r5
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002090:	698d      	ldr	r5, [r1, #24]
 8002092:	433d      	orrs	r5, r7
 8002094:	012d      	lsls	r5, r5, #4
 8002096:	4325      	orrs	r5, r4
 8002098:	e7ae      	b.n	8001ff8 <HAL_TIM_PWM_ConfigChannel+0x148>
    tmpcr2 &= ~TIM_CR2_OIS4;
 800209a:	4c1d      	ldr	r4, [pc, #116]	; (8002110 <HAL_TIM_PWM_ConfigChannel+0x260>)
 800209c:	4034      	ands	r4, r6
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800209e:	694e      	ldr	r6, [r1, #20]
 80020a0:	01b6      	lsls	r6, r6, #6
 80020a2:	4326      	orrs	r6, r4
 80020a4:	e73a      	b.n	8001f1c <HAL_TIM_PWM_ConfigChannel+0x6c>
    tmpccer &= ~TIM_CCER_CC2NP;
 80020a6:	2480      	movs	r4, #128	; 0x80
 80020a8:	43a0      	bics	r0, r4
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80020aa:	68cc      	ldr	r4, [r1, #12]
 80020ac:	0127      	lsls	r7, r4, #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80020ae:	2440      	movs	r4, #64	; 0x40
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80020b0:	4338      	orrs	r0, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 80020b2:	43a0      	bics	r0, r4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80020b4:	4c17      	ldr	r4, [pc, #92]	; (8002114 <HAL_TIM_PWM_ConfigChannel+0x264>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80020b6:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80020b8:	4034      	ands	r4, r6
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80020ba:	698e      	ldr	r6, [r1, #24]
 80020bc:	433e      	orrs	r6, r7
 80020be:	00b6      	lsls	r6, r6, #2
 80020c0:	4326      	orrs	r6, r4
 80020c2:	e768      	b.n	8001f96 <HAL_TIM_PWM_ConfigChannel+0xe6>
    tmpccer &= ~TIM_CCER_CC1NP;
 80020c4:	2408      	movs	r4, #8
 80020c6:	43a0      	bics	r0, r4
    tmpccer |= OC_Config->OCNPolarity;
 80020c8:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 80020ca:	698f      	ldr	r7, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 80020cc:	4320      	orrs	r0, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 80020ce:	2404      	movs	r4, #4
 80020d0:	43a0      	bics	r0, r4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80020d2:	4c11      	ldr	r4, [pc, #68]	; (8002118 <HAL_TIM_PWM_ConfigChannel+0x268>)
 80020d4:	4026      	ands	r6, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 80020d6:	694c      	ldr	r4, [r1, #20]
 80020d8:	433c      	orrs	r4, r7
 80020da:	4326      	orrs	r6, r4
 80020dc:	e7bc      	b.n	8002058 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 80020de:	46c0      	nop			; (mov r8, r8)
 80020e0:	ffffefff 	.word	0xffffefff
 80020e4:	ffff8cff 	.word	0xffff8cff
 80020e8:	ffffdfff 	.word	0xffffdfff
 80020ec:	40012c00 	.word	0x40012c00
 80020f0:	40014000 	.word	0x40014000
 80020f4:	40014400 	.word	0x40014400
 80020f8:	40014800 	.word	0x40014800
 80020fc:	fffffbff 	.word	0xfffffbff
 8002100:	fffffeff 	.word	0xfffffeff
 8002104:	fffffdff 	.word	0xfffffdff
 8002108:	fffff7ff 	.word	0xfffff7ff
 800210c:	ffffcfff 	.word	0xffffcfff
 8002110:	ffffbfff 	.word	0xffffbfff
 8002114:	fffff3ff 	.word	0xfffff3ff
 8002118:	fffffcff 	.word	0xfffffcff

0800211c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800211c:	223c      	movs	r2, #60	; 0x3c
{
 800211e:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8002120:	5c84      	ldrb	r4, [r0, r2]
 8002122:	2302      	movs	r3, #2
 8002124:	2c01      	cmp	r4, #1
 8002126:	d03d      	beq.n	80021a4 <HAL_TIM_ConfigClockSource+0x88>
 8002128:	2401      	movs	r4, #1
 800212a:	5484      	strb	r4, [r0, r2]
  htim->State = HAL_TIM_STATE_BUSY;
 800212c:	3201      	adds	r2, #1
 800212e:	5483      	strb	r3, [r0, r2]
  tmpsmcr = htim->Instance->SMCR;
 8002130:	6803      	ldr	r3, [r0, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002132:	4d59      	ldr	r5, [pc, #356]	; (8002298 <HAL_TIM_ConfigClockSource+0x17c>)
  tmpsmcr = htim->Instance->SMCR;
 8002134:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002136:	402a      	ands	r2, r5
  htim->Instance->SMCR = tmpsmcr;
 8002138:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 800213a:	680a      	ldr	r2, [r1, #0]
 800213c:	2a40      	cmp	r2, #64	; 0x40
 800213e:	d100      	bne.n	8002142 <HAL_TIM_ConfigClockSource+0x26>
 8002140:	e074      	b.n	800222c <HAL_TIM_ConfigClockSource+0x110>
 8002142:	d91b      	bls.n	800217c <HAL_TIM_ConfigClockSource+0x60>
 8002144:	2a70      	cmp	r2, #112	; 0x70
 8002146:	d061      	beq.n	800220c <HAL_TIM_ConfigClockSource+0xf0>
 8002148:	d92e      	bls.n	80021a8 <HAL_TIM_ConfigClockSource+0x8c>
 800214a:	2480      	movs	r4, #128	; 0x80
 800214c:	0164      	lsls	r4, r4, #5
 800214e:	42a2      	cmp	r2, r4
 8002150:	d057      	beq.n	8002202 <HAL_TIM_ConfigClockSource+0xe6>
 8002152:	2480      	movs	r4, #128	; 0x80
 8002154:	01a4      	lsls	r4, r4, #6
 8002156:	42a2      	cmp	r2, r4
 8002158:	d11d      	bne.n	8002196 <HAL_TIM_ConfigClockSource+0x7a>
  tmpsmcr = TIMx->SMCR;
 800215a:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800215c:	4c4f      	ldr	r4, [pc, #316]	; (800229c <HAL_TIM_ConfigClockSource+0x180>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800215e:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002160:	4014      	ands	r4, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002162:	688a      	ldr	r2, [r1, #8]
 8002164:	68c9      	ldr	r1, [r1, #12]
 8002166:	432a      	orrs	r2, r5
 8002168:	0209      	lsls	r1, r1, #8
 800216a:	430a      	orrs	r2, r1
 800216c:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 800216e:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002170:	2280      	movs	r2, #128	; 0x80
 8002172:	6899      	ldr	r1, [r3, #8]
 8002174:	01d2      	lsls	r2, r2, #7
 8002176:	430a      	orrs	r2, r1
 8002178:	609a      	str	r2, [r3, #8]
    break;
 800217a:	e00c      	b.n	8002196 <HAL_TIM_ConfigClockSource+0x7a>
  switch (sClockSourceConfig->ClockSource)
 800217c:	2a10      	cmp	r2, #16
 800217e:	d030      	beq.n	80021e2 <HAL_TIM_ConfigClockSource+0xc6>
 8002180:	d936      	bls.n	80021f0 <HAL_TIM_ConfigClockSource+0xd4>
 8002182:	2a20      	cmp	r2, #32
 8002184:	d069      	beq.n	800225a <HAL_TIM_ConfigClockSource+0x13e>
 8002186:	2a30      	cmp	r2, #48	; 0x30
 8002188:	d105      	bne.n	8002196 <HAL_TIM_ConfigClockSource+0x7a>
   tmpsmcr &= ~TIM_SMCR_TS;
 800218a:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 800218c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800218e:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002190:	3939      	subs	r1, #57	; 0x39
 8002192:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 8002194:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 8002196:	2201      	movs	r2, #1
 8002198:	233d      	movs	r3, #61	; 0x3d
 800219a:	54c2      	strb	r2, [r0, r3]
  __HAL_UNLOCK(htim);
 800219c:	2200      	movs	r2, #0
 800219e:	3b01      	subs	r3, #1
 80021a0:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	0018      	movs	r0, r3
 80021a6:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80021a8:	2a50      	cmp	r2, #80	; 0x50
 80021aa:	d05d      	beq.n	8002268 <HAL_TIM_ConfigClockSource+0x14c>
 80021ac:	2a60      	cmp	r2, #96	; 0x60
 80021ae:	d1f2      	bne.n	8002196 <HAL_TIM_ConfigClockSource+0x7a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021b0:	2510      	movs	r5, #16
 80021b2:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80021b4:	684a      	ldr	r2, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021b6:	43ac      	bics	r4, r5
      TIM_TI2_ConfigInputStage(htim->Instance,
 80021b8:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021ba:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021bc:	699d      	ldr	r5, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80021be:	4e38      	ldr	r6, [pc, #224]	; (80022a0 <HAL_TIM_ConfigClockSource+0x184>)
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80021c0:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80021c2:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80021c4:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80021c6:	25a0      	movs	r5, #160	; 0xa0
  tmpccer = TIMx->CCER;
 80021c8:	6a1c      	ldr	r4, [r3, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 80021ca:	6199      	str	r1, [r3, #24]
   tmpsmcr &= ~TIM_SMCR_TS;
 80021cc:	2170      	movs	r1, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80021ce:	43ac      	bics	r4, r5
  tmpccer |= (TIM_ICPolarity << 4U);
 80021d0:	0112      	lsls	r2, r2, #4
 80021d2:	4322      	orrs	r2, r4
  TIMx->CCER = tmpccer;
 80021d4:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80021d6:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80021d8:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80021da:	3909      	subs	r1, #9
 80021dc:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 80021de:	609a      	str	r2, [r3, #8]
 80021e0:	e7d9      	b.n	8002196 <HAL_TIM_ConfigClockSource+0x7a>
   tmpsmcr &= ~TIM_SMCR_TS;
 80021e2:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 80021e4:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80021e6:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80021e8:	3959      	subs	r1, #89	; 0x59
 80021ea:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 80021ec:	609a      	str	r2, [r3, #8]
 80021ee:	e7d2      	b.n	8002196 <HAL_TIM_ConfigClockSource+0x7a>
  switch (sClockSourceConfig->ClockSource)
 80021f0:	2a00      	cmp	r2, #0
 80021f2:	d1d0      	bne.n	8002196 <HAL_TIM_ConfigClockSource+0x7a>
   tmpsmcr &= ~TIM_SMCR_TS;
 80021f4:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 80021f6:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80021f8:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80021fa:	3969      	subs	r1, #105	; 0x69
 80021fc:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 80021fe:	609a      	str	r2, [r3, #8]
 8002200:	e7c9      	b.n	8002196 <HAL_TIM_ConfigClockSource+0x7a>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002202:	2107      	movs	r1, #7
 8002204:	689a      	ldr	r2, [r3, #8]
 8002206:	438a      	bics	r2, r1
 8002208:	609a      	str	r2, [r3, #8]
    break;
 800220a:	e7c4      	b.n	8002196 <HAL_TIM_ConfigClockSource+0x7a>
  tmpsmcr = TIMx->SMCR;
 800220c:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800220e:	4c23      	ldr	r4, [pc, #140]	; (800229c <HAL_TIM_ConfigClockSource+0x180>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002210:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002212:	4014      	ands	r4, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002214:	688a      	ldr	r2, [r1, #8]
 8002216:	68c9      	ldr	r1, [r1, #12]
 8002218:	432a      	orrs	r2, r5
 800221a:	0209      	lsls	r1, r1, #8
 800221c:	430a      	orrs	r2, r1
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800221e:	2177      	movs	r1, #119	; 0x77
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002220:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8002222:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002224:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002226:	430a      	orrs	r2, r1
      htim->Instance->SMCR = tmpsmcr;
 8002228:	609a      	str	r2, [r3, #8]
    break;
 800222a:	e7b4      	b.n	8002196 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800222c:	684d      	ldr	r5, [r1, #4]
 800222e:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 8002230:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002232:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002234:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002236:	43a6      	bics	r6, r4
 8002238:	621e      	str	r6, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800223a:	26f0      	movs	r6, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 800223c:	699c      	ldr	r4, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800223e:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002240:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002242:	240a      	movs	r4, #10
 8002244:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8002246:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8002248:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800224a:	6219      	str	r1, [r3, #32]
   tmpsmcr &= ~TIM_SMCR_TS;
 800224c:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 800224e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002250:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002252:	3929      	subs	r1, #41	; 0x29
 8002254:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	e79d      	b.n	8002196 <HAL_TIM_ConfigClockSource+0x7a>
   tmpsmcr &= ~TIM_SMCR_TS;
 800225a:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 800225c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800225e:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002260:	3949      	subs	r1, #73	; 0x49
 8002262:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 8002264:	609a      	str	r2, [r3, #8]
 8002266:	e796      	b.n	8002196 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002268:	684d      	ldr	r5, [r1, #4]
 800226a:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 800226c:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800226e:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002270:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002272:	43a6      	bics	r6, r4
 8002274:	621e      	str	r6, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002276:	26f0      	movs	r6, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8002278:	699c      	ldr	r4, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800227a:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800227c:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800227e:	240a      	movs	r4, #10
 8002280:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8002282:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8002284:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002286:	6219      	str	r1, [r3, #32]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002288:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 800228a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800228c:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800228e:	3919      	subs	r1, #25
 8002290:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 8002292:	609a      	str	r2, [r3, #8]
 8002294:	e77f      	b.n	8002196 <HAL_TIM_ConfigClockSource+0x7a>
 8002296:	46c0      	nop			; (mov r8, r8)
 8002298:	ffff0088 	.word	0xffff0088
 800229c:	ffff00ff 	.word	0xffff00ff
 80022a0:	ffff0fff 	.word	0xffff0fff

080022a4 <HAL_TIM_SlaveConfigSynchronization>:
  __HAL_LOCK(htim);
 80022a4:	233c      	movs	r3, #60	; 0x3c
{
 80022a6:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80022a8:	5cc4      	ldrb	r4, [r0, r3]
{
 80022aa:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 80022ac:	2002      	movs	r0, #2
 80022ae:	2c01      	cmp	r4, #1
 80022b0:	d100      	bne.n	80022b4 <HAL_TIM_SlaveConfigSynchronization+0x10>
    }
 80022b2:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 80022b4:	2501      	movs	r5, #1
  tmpsmcr &= ~TIM_SMCR_TS;
 80022b6:	2470      	movs	r4, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_SMS;
 80022b8:	2607      	movs	r6, #7
  __HAL_LOCK(htim);
 80022ba:	54d5      	strb	r5, [r2, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 80022bc:	3301      	adds	r3, #1
 80022be:	54d0      	strb	r0, [r2, r3]
  tmpsmcr = htim->Instance->SMCR;
 80022c0:	6813      	ldr	r3, [r2, #0]
 80022c2:	6898      	ldr	r0, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80022c4:	43a0      	bics	r0, r4
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80022c6:	684c      	ldr	r4, [r1, #4]
 80022c8:	4320      	orrs	r0, r4
  tmpsmcr &= ~TIM_SMCR_SMS;
 80022ca:	43b0      	bics	r0, r6
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80022cc:	680e      	ldr	r6, [r1, #0]
 80022ce:	4330      	orrs	r0, r6
  htim->Instance->SMCR = tmpsmcr;
 80022d0:	6098      	str	r0, [r3, #8]
  switch (sSlaveConfig->InputTrigger)
 80022d2:	2c50      	cmp	r4, #80	; 0x50
 80022d4:	d042      	beq.n	800235c <HAL_TIM_SlaveConfigSynchronization+0xb8>
 80022d6:	d91e      	bls.n	8002316 <HAL_TIM_SlaveConfigSynchronization+0x72>
 80022d8:	2c60      	cmp	r4, #96	; 0x60
 80022da:	d02b      	beq.n	8002334 <HAL_TIM_SlaveConfigSynchronization+0x90>
 80022dc:	2c70      	cmp	r4, #112	; 0x70
 80022de:	d10a      	bne.n	80022f6 <HAL_TIM_SlaveConfigSynchronization+0x52>
  tmpsmcr = TIMx->SMCR;
 80022e0:	689c      	ldr	r4, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022e2:	4827      	ldr	r0, [pc, #156]	; (8002380 <HAL_TIM_SlaveConfigSynchronization+0xdc>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022e4:	688d      	ldr	r5, [r1, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022e6:	4004      	ands	r4, r0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022e8:	68c8      	ldr	r0, [r1, #12]
 80022ea:	6909      	ldr	r1, [r1, #16]
 80022ec:	4328      	orrs	r0, r5
 80022ee:	0209      	lsls	r1, r1, #8
 80022f0:	4301      	orrs	r1, r0
 80022f2:	4321      	orrs	r1, r4
  TIMx->SMCR = tmpsmcr;
 80022f4:	6099      	str	r1, [r3, #8]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80022f6:	2040      	movs	r0, #64	; 0x40
 80022f8:	68d9      	ldr	r1, [r3, #12]
 80022fa:	4381      	bics	r1, r0
 80022fc:	60d9      	str	r1, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80022fe:	68d9      	ldr	r1, [r3, #12]
 8002300:	4820      	ldr	r0, [pc, #128]	; (8002384 <HAL_TIM_SlaveConfigSynchronization+0xe0>)
 8002302:	4001      	ands	r1, r0
 8002304:	60d9      	str	r1, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 8002306:	2101      	movs	r1, #1
 8002308:	233d      	movs	r3, #61	; 0x3d
 800230a:	54d1      	strb	r1, [r2, r3]
  __HAL_UNLOCK(htim);
 800230c:	2100      	movs	r1, #0
 800230e:	3b01      	subs	r3, #1
 8002310:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8002312:	2000      	movs	r0, #0
 8002314:	e7cd      	b.n	80022b2 <HAL_TIM_SlaveConfigSynchronization+0xe>
  switch (sSlaveConfig->InputTrigger)
 8002316:	2c40      	cmp	r4, #64	; 0x40
 8002318:	d1ed      	bne.n	80022f6 <HAL_TIM_SlaveConfigSynchronization+0x52>
      tmpccer = htim->Instance->CCER;
 800231a:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800231c:	6a18      	ldr	r0, [r3, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800231e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002320:	43a8      	bics	r0, r5
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002322:	25f0      	movs	r5, #240	; 0xf0
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002324:	6218      	str	r0, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002326:	6998      	ldr	r0, [r3, #24]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002328:	0109      	lsls	r1, r1, #4
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800232a:	43a8      	bics	r0, r5
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800232c:	4301      	orrs	r1, r0
      htim->Instance->CCMR1 = tmpccmr1;
 800232e:	6199      	str	r1, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002330:	621c      	str	r4, [r3, #32]
 8002332:	e7e0      	b.n	80022f6 <HAL_TIM_SlaveConfigSynchronization+0x52>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002334:	2510      	movs	r5, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002336:	6888      	ldr	r0, [r1, #8]
 8002338:	690c      	ldr	r4, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800233a:	6a19      	ldr	r1, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800233c:	4e12      	ldr	r6, [pc, #72]	; (8002388 <HAL_TIM_SlaveConfigSynchronization+0xe4>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800233e:	43a9      	bics	r1, r5
 8002340:	6219      	str	r1, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002342:	699d      	ldr	r5, [r3, #24]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002344:	0324      	lsls	r4, r4, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002346:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002348:	432c      	orrs	r4, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800234a:	25a0      	movs	r5, #160	; 0xa0
  tmpccer = TIMx->CCER;
 800234c:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 800234e:	619c      	str	r4, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002350:	43a9      	bics	r1, r5
 8002352:	000d      	movs	r5, r1
  tmpccer |= (TIM_ICPolarity << 4U);
 8002354:	0101      	lsls	r1, r0, #4
 8002356:	4329      	orrs	r1, r5
  TIMx->CCER = tmpccer;
 8002358:	6219      	str	r1, [r3, #32]
 800235a:	e7cc      	b.n	80022f6 <HAL_TIM_SlaveConfigSynchronization+0x52>
  tmpccer = TIMx->CCER;
 800235c:	6a1c      	ldr	r4, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800235e:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002360:	6888      	ldr	r0, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002362:	43ae      	bics	r6, r5
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002364:	6909      	ldr	r1, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002366:	621e      	str	r6, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002368:	26f0      	movs	r6, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 800236a:	699d      	ldr	r5, [r3, #24]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800236c:	0109      	lsls	r1, r1, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800236e:	43b5      	bics	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002370:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002372:	250a      	movs	r5, #10
 8002374:	43ac      	bics	r4, r5
  tmpccer |= TIM_ICPolarity;
 8002376:	4320      	orrs	r0, r4
  TIMx->CCMR1 = tmpccmr1;
 8002378:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800237a:	6218      	str	r0, [r3, #32]
 800237c:	e7bb      	b.n	80022f6 <HAL_TIM_SlaveConfigSynchronization+0x52>
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	ffff00ff 	.word	0xffff00ff
 8002384:	ffffbfff 	.word	0xffffbfff
 8002388:	ffff0fff 	.word	0xffff0fff

0800238c <HAL_TIM_OC_DelayElapsedCallback>:
 800238c:	4770      	bx	lr
 800238e:	46c0      	nop			; (mov r8, r8)

08002390 <HAL_TIM_IC_CaptureCallback>:
 8002390:	4770      	bx	lr
 8002392:	46c0      	nop			; (mov r8, r8)

08002394 <TIM_DMACaptureCplt>:
  htim->State= HAL_TIM_STATE_READY;
 8002394:	223d      	movs	r2, #61	; 0x3d
 8002396:	2301      	movs	r3, #1
{
 8002398:	b510      	push	{r4, lr}
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800239a:	6a44      	ldr	r4, [r0, #36]	; 0x24
  htim->State= HAL_TIM_STATE_READY;
 800239c:	54a3      	strb	r3, [r4, r2]
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800239e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80023a0:	4290      	cmp	r0, r2
 80023a2:	d00f      	beq.n	80023c4 <TIM_DMACaptureCplt+0x30>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80023a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80023a6:	4298      	cmp	r0, r3
 80023a8:	d00e      	beq.n	80023c8 <TIM_DMACaptureCplt+0x34>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80023aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80023ac:	4298      	cmp	r0, r3
 80023ae:	d00e      	beq.n	80023ce <TIM_DMACaptureCplt+0x3a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80023b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80023b2:	4298      	cmp	r0, r3
 80023b4:	d005      	beq.n	80023c2 <TIM_DMACaptureCplt+0x2e>
  HAL_TIM_IC_CaptureCallback(htim);
 80023b6:	0020      	movs	r0, r4
 80023b8:	f7ff ffea 	bl	8002390 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023bc:	2300      	movs	r3, #0
 80023be:	7723      	strb	r3, [r4, #28]
}
 80023c0:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023c2:	2308      	movs	r3, #8
 80023c4:	7723      	strb	r3, [r4, #28]
 80023c6:	e7f6      	b.n	80023b6 <TIM_DMACaptureCplt+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023c8:	2302      	movs	r3, #2
 80023ca:	7723      	strb	r3, [r4, #28]
 80023cc:	e7f3      	b.n	80023b6 <TIM_DMACaptureCplt+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023ce:	2304      	movs	r3, #4
 80023d0:	7723      	strb	r3, [r4, #28]
 80023d2:	e7f0      	b.n	80023b6 <TIM_DMACaptureCplt+0x22>

080023d4 <HAL_TIM_PWM_PulseFinishedCallback>:
 80023d4:	4770      	bx	lr
 80023d6:	46c0      	nop			; (mov r8, r8)

080023d8 <HAL_TIM_TriggerCallback>:
 80023d8:	4770      	bx	lr
 80023da:	46c0      	nop			; (mov r8, r8)

080023dc <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023dc:	2202      	movs	r2, #2
 80023de:	6803      	ldr	r3, [r0, #0]
{
 80023e0:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023e2:	6919      	ldr	r1, [r3, #16]
{
 80023e4:	0004      	movs	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023e6:	420a      	tst	r2, r1
 80023e8:	d002      	beq.n	80023f0 <HAL_TIM_IRQHandler+0x14>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80023ea:	68d9      	ldr	r1, [r3, #12]
 80023ec:	420a      	tst	r2, r1
 80023ee:	d168      	bne.n	80024c2 <HAL_TIM_IRQHandler+0xe6>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023f0:	2204      	movs	r2, #4
 80023f2:	6919      	ldr	r1, [r3, #16]
 80023f4:	420a      	tst	r2, r1
 80023f6:	d002      	beq.n	80023fe <HAL_TIM_IRQHandler+0x22>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80023f8:	68d9      	ldr	r1, [r3, #12]
 80023fa:	420a      	tst	r2, r1
 80023fc:	d14e      	bne.n	800249c <HAL_TIM_IRQHandler+0xc0>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023fe:	2208      	movs	r2, #8
 8002400:	6919      	ldr	r1, [r3, #16]
 8002402:	420a      	tst	r2, r1
 8002404:	d002      	beq.n	800240c <HAL_TIM_IRQHandler+0x30>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002406:	68d9      	ldr	r1, [r3, #12]
 8002408:	420a      	tst	r2, r1
 800240a:	d136      	bne.n	800247a <HAL_TIM_IRQHandler+0x9e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800240c:	2210      	movs	r2, #16
 800240e:	6919      	ldr	r1, [r3, #16]
 8002410:	420a      	tst	r2, r1
 8002412:	d002      	beq.n	800241a <HAL_TIM_IRQHandler+0x3e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002414:	68d9      	ldr	r1, [r3, #12]
 8002416:	420a      	tst	r2, r1
 8002418:	d11c      	bne.n	8002454 <HAL_TIM_IRQHandler+0x78>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800241a:	2201      	movs	r2, #1
 800241c:	6919      	ldr	r1, [r3, #16]
 800241e:	420a      	tst	r2, r1
 8002420:	d002      	beq.n	8002428 <HAL_TIM_IRQHandler+0x4c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002422:	68d9      	ldr	r1, [r3, #12]
 8002424:	420a      	tst	r2, r1
 8002426:	d169      	bne.n	80024fc <HAL_TIM_IRQHandler+0x120>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002428:	2280      	movs	r2, #128	; 0x80
 800242a:	6919      	ldr	r1, [r3, #16]
 800242c:	420a      	tst	r2, r1
 800242e:	d002      	beq.n	8002436 <HAL_TIM_IRQHandler+0x5a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002430:	68d9      	ldr	r1, [r3, #12]
 8002432:	420a      	tst	r2, r1
 8002434:	d169      	bne.n	800250a <HAL_TIM_IRQHandler+0x12e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002436:	2240      	movs	r2, #64	; 0x40
 8002438:	6919      	ldr	r1, [r3, #16]
 800243a:	420a      	tst	r2, r1
 800243c:	d002      	beq.n	8002444 <HAL_TIM_IRQHandler+0x68>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800243e:	68d9      	ldr	r1, [r3, #12]
 8002440:	420a      	tst	r2, r1
 8002442:	d154      	bne.n	80024ee <HAL_TIM_IRQHandler+0x112>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002444:	2220      	movs	r2, #32
 8002446:	6919      	ldr	r1, [r3, #16]
 8002448:	420a      	tst	r2, r1
 800244a:	d002      	beq.n	8002452 <HAL_TIM_IRQHandler+0x76>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800244c:	68d9      	ldr	r1, [r3, #12]
 800244e:	420a      	tst	r2, r1
 8002450:	d147      	bne.n	80024e2 <HAL_TIM_IRQHandler+0x106>
}
 8002452:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002454:	3a21      	subs	r2, #33	; 0x21
 8002456:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002458:	3219      	adds	r2, #25
 800245a:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800245c:	69da      	ldr	r2, [r3, #28]
 800245e:	23c0      	movs	r3, #192	; 0xc0
 8002460:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8002462:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002464:	421a      	tst	r2, r3
 8002466:	d15b      	bne.n	8002520 <HAL_TIM_IRQHandler+0x144>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002468:	f7ff ff90 	bl	800238c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800246c:	0020      	movs	r0, r4
 800246e:	f7ff ffb1 	bl	80023d4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002472:	2300      	movs	r3, #0
 8002474:	7723      	strb	r3, [r4, #28]
 8002476:	6823      	ldr	r3, [r4, #0]
 8002478:	e7cf      	b.n	800241a <HAL_TIM_IRQHandler+0x3e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800247a:	3a11      	subs	r2, #17
 800247c:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800247e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002480:	320d      	adds	r2, #13
 8002482:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8002484:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002486:	079b      	lsls	r3, r3, #30
 8002488:	d150      	bne.n	800252c <HAL_TIM_IRQHandler+0x150>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800248a:	f7ff ff7f 	bl	800238c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800248e:	0020      	movs	r0, r4
 8002490:	f7ff ffa0 	bl	80023d4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002494:	2300      	movs	r3, #0
 8002496:	7723      	strb	r3, [r4, #28]
 8002498:	6823      	ldr	r3, [r4, #0]
 800249a:	e7b7      	b.n	800240c <HAL_TIM_IRQHandler+0x30>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800249c:	3a09      	subs	r2, #9
 800249e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024a0:	3207      	adds	r2, #7
 80024a2:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024a4:	699a      	ldr	r2, [r3, #24]
 80024a6:	23c0      	movs	r3, #192	; 0xc0
 80024a8:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80024aa:	0020      	movs	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024ac:	421a      	tst	r2, r3
 80024ae:	d13a      	bne.n	8002526 <HAL_TIM_IRQHandler+0x14a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024b0:	f7ff ff6c 	bl	800238c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024b4:	0020      	movs	r0, r4
 80024b6:	f7ff ff8d 	bl	80023d4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ba:	2300      	movs	r3, #0
 80024bc:	7723      	strb	r3, [r4, #28]
 80024be:	6823      	ldr	r3, [r4, #0]
 80024c0:	e79d      	b.n	80023fe <HAL_TIM_IRQHandler+0x22>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024c2:	3a05      	subs	r2, #5
 80024c4:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024c6:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024c8:	3204      	adds	r2, #4
 80024ca:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024cc:	079b      	lsls	r3, r3, #30
 80024ce:	d124      	bne.n	800251a <HAL_TIM_IRQHandler+0x13e>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024d0:	f7ff ff5c 	bl	800238c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024d4:	0020      	movs	r0, r4
 80024d6:	f7ff ff7d 	bl	80023d4 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024da:	2300      	movs	r3, #0
 80024dc:	7723      	strb	r3, [r4, #28]
 80024de:	6823      	ldr	r3, [r4, #0]
 80024e0:	e786      	b.n	80023f0 <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024e2:	3a41      	subs	r2, #65	; 0x41
 80024e4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80024e6:	0020      	movs	r0, r4
 80024e8:	f000 f89e 	bl	8002628 <HAL_TIMEx_CommutationCallback>
}
 80024ec:	e7b1      	b.n	8002452 <HAL_TIM_IRQHandler+0x76>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024ee:	3a81      	subs	r2, #129	; 0x81
 80024f0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80024f2:	0020      	movs	r0, r4
 80024f4:	f7ff ff70 	bl	80023d8 <HAL_TIM_TriggerCallback>
 80024f8:	6823      	ldr	r3, [r4, #0]
 80024fa:	e7a3      	b.n	8002444 <HAL_TIM_IRQHandler+0x68>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024fc:	3a03      	subs	r2, #3
 80024fe:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002500:	0020      	movs	r0, r4
 8002502:	f000 ffd5 	bl	80034b0 <HAL_TIM_PeriodElapsedCallback>
 8002506:	6823      	ldr	r3, [r4, #0]
 8002508:	e78e      	b.n	8002428 <HAL_TIM_IRQHandler+0x4c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800250a:	3a02      	subs	r2, #2
 800250c:	3aff      	subs	r2, #255	; 0xff
 800250e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002510:	0020      	movs	r0, r4
 8002512:	f000 f88b 	bl	800262c <HAL_TIMEx_BreakCallback>
 8002516:	6823      	ldr	r3, [r4, #0]
 8002518:	e78d      	b.n	8002436 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_IC_CaptureCallback(htim);
 800251a:	f7ff ff39 	bl	8002390 <HAL_TIM_IC_CaptureCallback>
 800251e:	e7dc      	b.n	80024da <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8002520:	f7ff ff36 	bl	8002390 <HAL_TIM_IC_CaptureCallback>
 8002524:	e7a5      	b.n	8002472 <HAL_TIM_IRQHandler+0x96>
        HAL_TIM_IC_CaptureCallback(htim);
 8002526:	f7ff ff33 	bl	8002390 <HAL_TIM_IC_CaptureCallback>
 800252a:	e7c6      	b.n	80024ba <HAL_TIM_IRQHandler+0xde>
        HAL_TIM_IC_CaptureCallback(htim);
 800252c:	f7ff ff30 	bl	8002390 <HAL_TIM_IC_CaptureCallback>
 8002530:	e7b0      	b.n	8002494 <HAL_TIM_IRQHandler+0xb8>
 8002532:	46c0      	nop			; (mov r8, r8)

08002534 <HAL_TIM_ErrorCallback>:
}
 8002534:	4770      	bx	lr
 8002536:	46c0      	nop			; (mov r8, r8)

08002538 <TIM_DMAError>:
  htim->State= HAL_TIM_STATE_READY;
 8002538:	2201      	movs	r2, #1
 800253a:	233d      	movs	r3, #61	; 0x3d
{
 800253c:	b510      	push	{r4, lr}
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800253e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  htim->State= HAL_TIM_STATE_READY;
 8002540:	54c2      	strb	r2, [r0, r3]
  HAL_TIM_ErrorCallback(htim);
 8002542:	f7ff fff7 	bl	8002534 <HAL_TIM_ErrorCallback>
}
 8002546:	bd10      	pop	{r4, pc}

08002548 <HAL_TIMEx_PWMN_Start>:
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelNState)
{
  uint32_t tmp = 0U;

  tmp = TIM_CCER_CC1NE << Channel;
 8002548:	2204      	movs	r2, #4
 800254a:	408a      	lsls	r2, r1
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800254c:	6803      	ldr	r3, [r0, #0]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800254e:	6a19      	ldr	r1, [r3, #32]
}
 8002550:	2000      	movs	r0, #0
  TIMx->CCER &=  ~tmp;
 8002552:	4391      	bics	r1, r2
 8002554:	6219      	str	r1, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelNState << Channel);
 8002556:	6a19      	ldr	r1, [r3, #32]
 8002558:	430a      	orrs	r2, r1
 800255a:	621a      	str	r2, [r3, #32]
  __HAL_TIM_MOE_ENABLE(htim);
 800255c:	2280      	movs	r2, #128	; 0x80
 800255e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002560:	0212      	lsls	r2, r2, #8
 8002562:	430a      	orrs	r2, r1
  __HAL_TIM_ENABLE(htim);
 8002564:	2101      	movs	r1, #1
  __HAL_TIM_MOE_ENABLE(htim);
 8002566:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	430a      	orrs	r2, r1
 800256c:	601a      	str	r2, [r3, #0]
}
 800256e:	4770      	bx	lr

08002570 <HAL_TIMEx_MasterConfigSynchronization>:
{
 8002570:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8002572:	243c      	movs	r4, #60	; 0x3c
 8002574:	5d03      	ldrb	r3, [r0, r4]
{
 8002576:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 8002578:	2002      	movs	r0, #2
 800257a:	2b01      	cmp	r3, #1
 800257c:	d017      	beq.n	80025ae <HAL_TIMEx_MasterConfigSynchronization+0x3e>
  htim->State = HAL_TIM_STATE_BUSY;
 800257e:	253d      	movs	r5, #61	; 0x3d
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002580:	2670      	movs	r6, #112	; 0x70
 8002582:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002584:	5550      	strb	r0, [r2, r5]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002586:	6858      	ldr	r0, [r3, #4]
 8002588:	43b0      	bics	r0, r6
 800258a:	6058      	str	r0, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800258c:	6858      	ldr	r0, [r3, #4]
 800258e:	680e      	ldr	r6, [r1, #0]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002590:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002592:	4330      	orrs	r0, r6
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002594:	2680      	movs	r6, #128	; 0x80
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002596:	6058      	str	r0, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002598:	6898      	ldr	r0, [r3, #8]
 800259a:	43b0      	bics	r0, r6
 800259c:	6098      	str	r0, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800259e:	6898      	ldr	r0, [r3, #8]
 80025a0:	4301      	orrs	r1, r0
 80025a2:	6099      	str	r1, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 80025a4:	2301      	movs	r3, #1
 80025a6:	5553      	strb	r3, [r2, r5]
  __HAL_UNLOCK(htim);
 80025a8:	2300      	movs	r3, #0
  return HAL_OK;
 80025aa:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 80025ac:	5513      	strb	r3, [r2, r4]
}
 80025ae:	bd70      	pop	{r4, r5, r6, pc}

080025b0 <HAL_TIMEx_ConfigBreakDeadTime>:
{
 80025b0:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 80025b2:	243c      	movs	r4, #60	; 0x3c
 80025b4:	5d03      	ldrb	r3, [r0, r4]
{
 80025b6:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 80025b8:	2002      	movs	r0, #2
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d024      	beq.n	8002608 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  htim->State = HAL_TIM_STATE_BUSY;
 80025be:	253d      	movs	r5, #61	; 0x3d
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80025c0:	4b12      	ldr	r3, [pc, #72]	; (800260c <HAL_TIMEx_ConfigBreakDeadTime+0x5c>)
  htim->State = HAL_TIM_STATE_BUSY;
 80025c2:	5550      	strb	r0, [r2, r5]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80025c4:	68c8      	ldr	r0, [r1, #12]
 80025c6:	4003      	ands	r3, r0
 80025c8:	6888      	ldr	r0, [r1, #8]
 80025ca:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80025cc:	4810      	ldr	r0, [pc, #64]	; (8002610 <HAL_TIMEx_ConfigBreakDeadTime+0x60>)
 80025ce:	4003      	ands	r3, r0
 80025d0:	6848      	ldr	r0, [r1, #4]
 80025d2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80025d4:	480f      	ldr	r0, [pc, #60]	; (8002614 <HAL_TIMEx_ConfigBreakDeadTime+0x64>)
 80025d6:	4003      	ands	r3, r0
 80025d8:	6808      	ldr	r0, [r1, #0]
 80025da:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80025dc:	480e      	ldr	r0, [pc, #56]	; (8002618 <HAL_TIMEx_ConfigBreakDeadTime+0x68>)
 80025de:	4003      	ands	r3, r0
 80025e0:	6908      	ldr	r0, [r1, #16]
 80025e2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80025e4:	480d      	ldr	r0, [pc, #52]	; (800261c <HAL_TIMEx_ConfigBreakDeadTime+0x6c>)
 80025e6:	4003      	ands	r3, r0
 80025e8:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80025ea:	6989      	ldr	r1, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80025ec:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80025ee:	480c      	ldr	r0, [pc, #48]	; (8002620 <HAL_TIMEx_ConfigBreakDeadTime+0x70>)
 80025f0:	4003      	ands	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80025f2:	480c      	ldr	r0, [pc, #48]	; (8002624 <HAL_TIMEx_ConfigBreakDeadTime+0x74>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80025f4:	430b      	orrs	r3, r1
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80025f6:	4003      	ands	r3, r0
 80025f8:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 80025fa:	6811      	ldr	r1, [r2, #0]
  return HAL_OK;
 80025fc:	2000      	movs	r0, #0
  htim->Instance->BDTR = tmpbdtr;
 80025fe:	644b      	str	r3, [r1, #68]	; 0x44
  htim->State = HAL_TIM_STATE_READY;
 8002600:	2301      	movs	r3, #1
 8002602:	5553      	strb	r3, [r2, r5]
  __HAL_UNLOCK(htim);
 8002604:	2300      	movs	r3, #0
 8002606:	5513      	strb	r3, [r2, r4]
}
 8002608:	bd30      	pop	{r4, r5, pc}
 800260a:	46c0      	nop			; (mov r8, r8)
 800260c:	fffffcff 	.word	0xfffffcff
 8002610:	fffffbff 	.word	0xfffffbff
 8002614:	fffff7ff 	.word	0xfffff7ff
 8002618:	ffffefff 	.word	0xffffefff
 800261c:	ffffdfff 	.word	0xffffdfff
 8002620:	ffffbfff 	.word	0xffffbfff
 8002624:	ffff7fff 	.word	0xffff7fff

08002628 <HAL_TIMEx_CommutationCallback>:
 8002628:	4770      	bx	lr
 800262a:	46c0      	nop			; (mov r8, r8)

0800262c <HAL_TIMEx_BreakCallback>:
}
 800262c:	4770      	bx	lr
 800262e:	46c0      	nop			; (mov r8, r8)

08002630 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002632:	46de      	mov	lr, fp
 8002634:	464e      	mov	r6, r9
 8002636:	4657      	mov	r7, sl
 8002638:	4645      	mov	r5, r8
 800263a:	b5e0      	push	{r5, r6, r7, lr}
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800263c:	680e      	ldr	r6, [r1, #0]
{
 800263e:	468b      	mov	fp, r1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002640:	2e00      	cmp	r6, #0
 8002642:	d100      	bne.n	8002646 <LL_GPIO_Init+0x16>
 8002644:	e073      	b.n	800272e <LL_GPIO_Init+0xfe>
 8002646:	684b      	ldr	r3, [r1, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	469c      	mov	ip, r3
 800264c:	2301      	movs	r3, #1
 800264e:	425b      	negs	r3, r3
 8002650:	4463      	add	r3, ip
 8002652:	4698      	mov	r8, r3
 8002654:	e00a      	b.n	800266c <LL_GPIO_Init+0x3c>
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8002656:	4659      	mov	r1, fp
 8002658:	6909      	ldr	r1, [r1, #16]
 800265a:	68c3      	ldr	r3, [r0, #12]
 800265c:	434d      	muls	r5, r1
 800265e:	401c      	ands	r4, r3
 8002660:	432c      	orrs	r4, r5
 8002662:	60c4      	str	r4, [r0, #12]
 8002664:	0033      	movs	r3, r6
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
      }
    }
    pinpos++;
 8002666:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002668:	40d3      	lsrs	r3, r2
 800266a:	d042      	beq.n	80026f2 <LL_GPIO_Init+0xc2>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800266c:	2301      	movs	r3, #1
 800266e:	4093      	lsls	r3, r2
 8002670:	4033      	ands	r3, r6
    if (currentpin)
 8002672:	d0f7      	beq.n	8002664 <LL_GPIO_Init+0x34>
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8002674:	001d      	movs	r5, r3
 8002676:	6804      	ldr	r4, [r0, #0]
 8002678:	435d      	muls	r5, r3
 800267a:	46a1      	mov	r9, r4
 800267c:	006c      	lsls	r4, r5, #1
 800267e:	1964      	adds	r4, r4, r5
 8002680:	464f      	mov	r7, r9
 8002682:	43e4      	mvns	r4, r4
 8002684:	4027      	ands	r7, r4
 8002686:	46b9      	mov	r9, r7
 8002688:	4667      	mov	r7, ip
 800268a:	436f      	muls	r7, r5
 800268c:	46ba      	mov	sl, r7
 800268e:	464f      	mov	r7, r9
 8002690:	4651      	mov	r1, sl
 8002692:	430f      	orrs	r7, r1
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002694:	4641      	mov	r1, r8
 8002696:	6007      	str	r7, [r0, #0]
 8002698:	2901      	cmp	r1, #1
 800269a:	d8dc      	bhi.n	8002656 <LL_GPIO_Init+0x26>
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 800269c:	6881      	ldr	r1, [r0, #8]
 800269e:	468a      	mov	sl, r1
 80026a0:	4659      	mov	r1, fp
 80026a2:	6889      	ldr	r1, [r1, #8]
 80026a4:	4369      	muls	r1, r5
 80026a6:	4689      	mov	r9, r1
 80026a8:	4651      	mov	r1, sl
 80026aa:	4021      	ands	r1, r4
 80026ac:	468a      	mov	sl, r1
 80026ae:	4649      	mov	r1, r9
 80026b0:	4657      	mov	r7, sl
 80026b2:	4339      	orrs	r1, r7
 80026b4:	6081      	str	r1, [r0, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 80026b6:	68c1      	ldr	r1, [r0, #12]
 80026b8:	468a      	mov	sl, r1
 80026ba:	4659      	mov	r1, fp
 80026bc:	6909      	ldr	r1, [r1, #16]
 80026be:	4369      	muls	r1, r5
 80026c0:	4689      	mov	r9, r1
 80026c2:	4651      	mov	r1, sl
 80026c4:	400c      	ands	r4, r1
 80026c6:	4649      	mov	r1, r9
 80026c8:	430c      	orrs	r4, r1
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80026ca:	4661      	mov	r1, ip
 80026cc:	60c4      	str	r4, [r0, #12]
 80026ce:	2902      	cmp	r1, #2
 80026d0:	d1c8      	bne.n	8002664 <LL_GPIO_Init+0x34>
        if (currentpin < LL_GPIO_PIN_8)
 80026d2:	2bff      	cmp	r3, #255	; 0xff
 80026d4:	d81e      	bhi.n	8002714 <LL_GPIO_Init+0xe4>
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80026d6:	4659      	mov	r1, fp
 80026d8:	436d      	muls	r5, r5
 80026da:	6949      	ldr	r1, [r1, #20]
 80026dc:	012c      	lsls	r4, r5, #4
 80026de:	1b64      	subs	r4, r4, r5
 80026e0:	434d      	muls	r5, r1
 80026e2:	6a03      	ldr	r3, [r0, #32]
    pinpos++;
 80026e4:	3201      	adds	r2, #1
 80026e6:	43a3      	bics	r3, r4
 80026e8:	431d      	orrs	r5, r3
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80026ea:	0033      	movs	r3, r6
 80026ec:	6205      	str	r5, [r0, #32]
 80026ee:	40d3      	lsrs	r3, r2
 80026f0:	d1bc      	bne.n	800266c <LL_GPIO_Init+0x3c>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80026f2:	4643      	mov	r3, r8
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d806      	bhi.n	8002706 <LL_GPIO_Init+0xd6>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80026f8:	465a      	mov	r2, fp
 80026fa:	6843      	ldr	r3, [r0, #4]
 80026fc:	68d2      	ldr	r2, [r2, #12]
 80026fe:	43b3      	bics	r3, r6
 8002700:	4356      	muls	r6, r2
 8002702:	431e      	orrs	r6, r3
 8002704:	6046      	str	r6, [r0, #4]
    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);

  }
  return (SUCCESS);
}
 8002706:	2001      	movs	r0, #1
 8002708:	bc3c      	pop	{r2, r3, r4, r5}
 800270a:	4690      	mov	r8, r2
 800270c:	4699      	mov	r9, r3
 800270e:	46a2      	mov	sl, r4
 8002710:	46ab      	mov	fp, r5
 8002712:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8002714:	4659      	mov	r1, fp
 8002716:	0a1b      	lsrs	r3, r3, #8
 8002718:	435b      	muls	r3, r3
 800271a:	435b      	muls	r3, r3
 800271c:	6949      	ldr	r1, [r1, #20]
 800271e:	011d      	lsls	r5, r3, #4
 8002720:	1aed      	subs	r5, r5, r3
 8002722:	434b      	muls	r3, r1
 8002724:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8002726:	43ac      	bics	r4, r5
 8002728:	4323      	orrs	r3, r4
 800272a:	6243      	str	r3, [r0, #36]	; 0x24
 800272c:	e79a      	b.n	8002664 <LL_GPIO_Init+0x34>
 800272e:	684b      	ldr	r3, [r1, #4]
 8002730:	3b01      	subs	r3, #1
 8002732:	4698      	mov	r8, r3
 8002734:	e7dd      	b.n	80026f2 <LL_GPIO_Init+0xc2>
 8002736:	46c0      	nop			; (mov r8, r8)

08002738 <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 8002738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800273a:	4647      	mov	r7, r8
 800273c:	46ce      	mov	lr, r9
  uint16_t pagestatus0 = 6, pagestatus1 = 6;
  uint16_t varidx = 0;
  uint16_t eepromstatus = 0, readstatus = 0;
  int16_t x = -1;
  HAL_StatusTypeDef  flashstatus;
  uint32_t page_error = 0;
 800273e:	2500      	movs	r5, #0
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);

  /* Fill EraseInit structure*/
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
  s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
  s_eraseinit.NbPages     = 1;
 8002740:	2601      	movs	r6, #1
{
 8002742:	b580      	push	{r7, lr}
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002744:	49a5      	ldr	r1, [pc, #660]	; (80029dc <EE_Init+0x2a4>)
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002746:	4fa6      	ldr	r7, [pc, #664]	; (80029e0 <EE_Init+0x2a8>)
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002748:	880b      	ldrh	r3, [r1, #0]
  
  /* Check for invalid header states and repair if necessary */
  switch (pagestatus0)
 800274a:	48a6      	ldr	r0, [pc, #664]	; (80029e4 <EE_Init+0x2ac>)
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800274c:	883c      	ldrh	r4, [r7, #0]
{
 800274e:	b089      	sub	sp, #36	; 0x24
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002750:	b29b      	uxth	r3, r3
  uint32_t page_error = 0;
 8002752:	9500      	str	r5, [sp, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002754:	b2a4      	uxth	r4, r4
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8002756:	9502      	str	r5, [sp, #8]
  s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 8002758:	9103      	str	r1, [sp, #12]
  s_eraseinit.NbPages     = 1;
 800275a:	9604      	str	r6, [sp, #16]
  switch (pagestatus0)
 800275c:	4283      	cmp	r3, r0
 800275e:	d100      	bne.n	8002762 <EE_Init+0x2a>
 8002760:	e096      	b.n	8002890 <EE_Init+0x158>
 8002762:	4aa1      	ldr	r2, [pc, #644]	; (80029e8 <EE_Init+0x2b0>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d022      	beq.n	80027ae <EE_Init+0x76>
 8002768:	2b00      	cmp	r3, #0
 800276a:	d03e      	beq.n	80027ea <EE_Init+0xb2>
{
  HAL_StatusTypeDef flashstatus = HAL_OK;
  uint32_t page_error = 0;
  FLASH_EraseInitTypeDef s_eraseinit;

  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 800276c:	a805      	add	r0, sp, #20
  uint32_t page_error = 0;
 800276e:	9501      	str	r5, [sp, #4]
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8002770:	9505      	str	r5, [sp, #20]
  s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 8002772:	6041      	str	r1, [r0, #4]
  s_eraseinit.NbPages     = 1;
 8002774:	6086      	str	r6, [r0, #8]
  while (Address <= PAGE0_END_ADDRESS)
 8002776:	4c9d      	ldr	r4, [pc, #628]	; (80029ec <EE_Init+0x2b4>)
 8002778:	e002      	b.n	8002780 <EE_Init+0x48>
    Address = Address + 4;
 800277a:	3104      	adds	r1, #4
  while (Address <= PAGE0_END_ADDRESS)
 800277c:	42a1      	cmp	r1, r4
 800277e:	d007      	beq.n	8002790 <EE_Init+0x58>
    addressvalue = (*(__IO uint16_t*)Address);
 8002780:	880b      	ldrh	r3, [r1, #0]
    if (addressvalue != ERASED)
 8002782:	4293      	cmp	r3, r2
 8002784:	d0f9      	beq.n	800277a <EE_Init+0x42>
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
  {
    flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error); 
 8002786:	a901      	add	r1, sp, #4
 8002788:	f7fe fb54 	bl	8000e34 <HAL_FLASHEx_Erase>
    /* If erase operation was failed, a Flash error code is returned */
    if (flashstatus != HAL_OK)
 800278c:	2800      	cmp	r0, #0
 800278e:	d12a      	bne.n	80027e6 <EE_Init+0xae>
    {
      return flashstatus;
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 8002790:	2200      	movs	r2, #0
 8002792:	2300      	movs	r3, #0
 8002794:	4991      	ldr	r1, [pc, #580]	; (80029dc <EE_Init+0x2a4>)
 8002796:	2001      	movs	r0, #1
 8002798:	f7fe fa12 	bl	8000bc0 <HAL_FLASH_Program>
  /* If program operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 800279c:	2800      	cmp	r0, #0
 800279e:	d122      	bne.n	80027e6 <EE_Init+0xae>
  return HAL_OK;
 80027a0:	2400      	movs	r4, #0
}
 80027a2:	0020      	movs	r0, r4
 80027a4:	b009      	add	sp, #36	; 0x24
 80027a6:	bc0c      	pop	{r2, r3}
 80027a8:	4690      	mov	r8, r2
 80027aa:	4699      	mov	r9, r3
 80027ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pagestatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 80027ae:	2c00      	cmp	r4, #0
 80027b0:	d100      	bne.n	80027b4 <EE_Init+0x7c>
 80027b2:	e0a0      	b.n	80028f6 <EE_Init+0x1be>
      else if (pagestatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 80027b4:	4284      	cmp	r4, r0
 80027b6:	d000      	beq.n	80027ba <EE_Init+0x82>
 80027b8:	e101      	b.n	80029be <EE_Init+0x286>
  while (Address <= PAGE0_END_ADDRESS)
 80027ba:	488c      	ldr	r0, [pc, #560]	; (80029ec <EE_Init+0x2b4>)
 80027bc:	e002      	b.n	80027c4 <EE_Init+0x8c>
    Address = Address + 4;
 80027be:	3104      	adds	r1, #4
  while (Address <= PAGE0_END_ADDRESS)
 80027c0:	4281      	cmp	r1, r0
 80027c2:	d008      	beq.n	80027d6 <EE_Init+0x9e>
    addressvalue = (*(__IO uint16_t*)Address);
 80027c4:	880a      	ldrh	r2, [r1, #0]
    if (addressvalue != ERASED)
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d0f9      	beq.n	80027be <EE_Init+0x86>
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 80027ca:	4669      	mov	r1, sp
 80027cc:	a802      	add	r0, sp, #8
 80027ce:	f7fe fb31 	bl	8000e34 <HAL_FLASHEx_Erase>
          if (flashstatus != HAL_OK)
 80027d2:	2800      	cmp	r0, #0
 80027d4:	d107      	bne.n	80027e6 <EE_Init+0xae>
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 80027d6:	2200      	movs	r2, #0
 80027d8:	2300      	movs	r3, #0
 80027da:	4981      	ldr	r1, [pc, #516]	; (80029e0 <EE_Init+0x2a8>)
 80027dc:	2001      	movs	r0, #1
 80027de:	f7fe f9ef 	bl	8000bc0 <HAL_FLASH_Program>
        if (flashstatus != HAL_OK)
 80027e2:	2800      	cmp	r0, #0
 80027e4:	d0dc      	beq.n	80027a0 <EE_Init+0x68>
        return flashstatus;
 80027e6:	b284      	uxth	r4, r0
 80027e8:	e7db      	b.n	80027a2 <EE_Init+0x6a>
      if (pagestatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 80027ea:	2c00      	cmp	r4, #0
 80027ec:	d100      	bne.n	80027f0 <EE_Init+0xb8>
 80027ee:	e092      	b.n	8002916 <EE_Init+0x1de>
      else if (pagestatus1 == ERASED) /* Page0 valid, Page1 erased */
 80027f0:	4294      	cmp	r4, r2
 80027f2:	d0d5      	beq.n	80027a0 <EE_Init+0x68>
 80027f4:	2301      	movs	r3, #1
 80027f6:	425b      	negs	r3, r3
 80027f8:	4698      	mov	r8, r3
      *Data = (*(__IO uint16_t*)(address - 2));
 80027fa:	4b7d      	ldr	r3, [pc, #500]	; (80029f0 <EE_Init+0x2b8>)
 80027fc:	2600      	movs	r6, #0
 80027fe:	4699      	mov	r9, r3
 8002800:	4f7c      	ldr	r7, [pc, #496]	; (80029f4 <EE_Init+0x2bc>)
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 8002802:	4b7d      	ldr	r3, [pc, #500]	; (80029f8 <EE_Init+0x2c0>)
 8002804:	0072      	lsls	r2, r6, #1
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	5abc      	ldrh	r4, [r7, r2]
 800280a:	42a3      	cmp	r3, r4
 800280c:	d100      	bne.n	8002810 <EE_Init+0xd8>
 800280e:	e0be      	b.n	800298e <EE_Init+0x256>
          if (varidx != x)
 8002810:	4546      	cmp	r6, r8
 8002812:	d01a      	beq.n	800284a <EE_Init+0x112>
static uint16_t EE_FindValidPage(uint8_t Operation)
{
  uint16_t pagestatus0 = 6, pagestatus1 = 6;

  /* Get Page0 actual status */
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002814:	4b71      	ldr	r3, [pc, #452]	; (80029dc <EE_Init+0x2a4>)
 8002816:	881a      	ldrh	r2, [r3, #0]

  /* Get Page1 actual status */
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002818:	4b71      	ldr	r3, [pc, #452]	; (80029e0 <EE_Init+0x2a8>)
 800281a:	881b      	ldrh	r3, [r3, #0]
 800281c:	b29b      	uxth	r3, r3
      {
        return NO_VALID_PAGE;   /* No valid Page */
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (pagestatus0 == VALID_PAGE)
 800281e:	2a00      	cmp	r2, #0
 8002820:	d100      	bne.n	8002824 <EE_Init+0xec>
 8002822:	e0b7      	b.n	8002994 <EE_Init+0x25c>
      {
        return PAGE0;           /* Page0 valid */
      }
      else if (pagestatus1 == VALID_PAGE)
 8002824:	2b00      	cmp	r3, #0
 8002826:	d000      	beq.n	800282a <EE_Init+0xf2>
 8002828:	e11f      	b.n	8002a6a <EE_Init+0x332>
 800282a:	4b74      	ldr	r3, [pc, #464]	; (80029fc <EE_Init+0x2c4>)
 800282c:	4974      	ldr	r1, [pc, #464]	; (8002a00 <EE_Init+0x2c8>)
 800282e:	001a      	movs	r2, r3
 8002830:	4874      	ldr	r0, [pc, #464]	; (8002a04 <EE_Init+0x2cc>)
    addressvalue = (*(__IO uint16_t*)address);
 8002832:	881b      	ldrh	r3, [r3, #0]
    if (addressvalue == VirtAddress)
 8002834:	429c      	cmp	r4, r3
 8002836:	d105      	bne.n	8002844 <EE_Init+0x10c>
 8002838:	e0ef      	b.n	8002a1a <EE_Init+0x2e2>
    addressvalue = (*(__IO uint16_t*)address);
 800283a:	8819      	ldrh	r1, [r3, #0]
    if (addressvalue == VirtAddress)
 800283c:	428c      	cmp	r4, r1
 800283e:	d100      	bne.n	8002842 <EE_Init+0x10a>
 8002840:	e0ea      	b.n	8002a18 <EE_Init+0x2e0>
 8002842:	001a      	movs	r2, r3
      address = address - 4;
 8002844:	1f13      	subs	r3, r2, #4
  while (address > (PageStartAddress + 2))
 8002846:	4283      	cmp	r3, r0
 8002848:	d8f7      	bhi.n	800283a <EE_Init+0x102>
 800284a:	3601      	adds	r6, #1
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 800284c:	2e03      	cmp	r6, #3
 800284e:	d1d8      	bne.n	8002802 <EE_Init+0xca>
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 8002850:	2200      	movs	r2, #0
 8002852:	2300      	movs	r3, #0
 8002854:	4962      	ldr	r1, [pc, #392]	; (80029e0 <EE_Init+0x2a8>)
 8002856:	2001      	movs	r0, #1
 8002858:	f7fe f9b2 	bl	8000bc0 <HAL_FLASH_Program>
        if (flashstatus != HAL_OK)
 800285c:	2800      	cmp	r0, #0
 800285e:	d1c2      	bne.n	80027e6 <EE_Init+0xae>
        s_eraseinit.NbPages     = 1;
 8002860:	2201      	movs	r2, #1
        s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 8002862:	4b5e      	ldr	r3, [pc, #376]	; (80029dc <EE_Init+0x2a4>)
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8002864:	9002      	str	r0, [sp, #8]
        s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 8002866:	9303      	str	r3, [sp, #12]
        s_eraseinit.NbPages     = 1;
 8002868:	9204      	str	r2, [sp, #16]
    if (addressvalue != ERASED)
 800286a:	495f      	ldr	r1, [pc, #380]	; (80029e8 <EE_Init+0x2b0>)
  while (Address <= PAGE0_END_ADDRESS)
 800286c:	485f      	ldr	r0, [pc, #380]	; (80029ec <EE_Init+0x2b4>)
 800286e:	e003      	b.n	8002878 <EE_Init+0x140>
    Address = Address + 4;
 8002870:	3304      	adds	r3, #4
  while (Address <= PAGE0_END_ADDRESS)
 8002872:	4283      	cmp	r3, r0
 8002874:	d100      	bne.n	8002878 <EE_Init+0x140>
 8002876:	e793      	b.n	80027a0 <EE_Init+0x68>
    addressvalue = (*(__IO uint16_t*)Address);
 8002878:	881a      	ldrh	r2, [r3, #0]
    if (addressvalue != ERASED)
 800287a:	428a      	cmp	r2, r1
 800287c:	d0f8      	beq.n	8002870 <EE_Init+0x138>
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 800287e:	4669      	mov	r1, sp
 8002880:	a802      	add	r0, sp, #8
 8002882:	f7fe fad7 	bl	8000e34 <HAL_FLASHEx_Erase>
          if (flashstatus != HAL_OK)
 8002886:	2800      	cmp	r0, #0
 8002888:	d100      	bne.n	800288c <EE_Init+0x154>
 800288a:	e789      	b.n	80027a0 <EE_Init+0x68>
        return flashstatus;
 800288c:	b284      	uxth	r4, r0
 800288e:	e788      	b.n	80027a2 <EE_Init+0x6a>
      if (pagestatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8002890:	2c00      	cmp	r4, #0
 8002892:	d11d      	bne.n	80028d0 <EE_Init+0x198>
 8002894:	2301      	movs	r3, #1
 8002896:	2600      	movs	r6, #0
 8002898:	425b      	negs	r3, r3
 800289a:	4698      	mov	r8, r3
      *Data = (*(__IO uint16_t*)(address - 2));
 800289c:	4b54      	ldr	r3, [pc, #336]	; (80029f0 <EE_Init+0x2b8>)
 800289e:	4f55      	ldr	r7, [pc, #340]	; (80029f4 <EE_Init+0x2bc>)
 80028a0:	4699      	mov	r9, r3
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 80028a2:	4b59      	ldr	r3, [pc, #356]	; (8002a08 <EE_Init+0x2d0>)
 80028a4:	0072      	lsls	r2, r6, #1
 80028a6:	881b      	ldrh	r3, [r3, #0]
 80028a8:	5abc      	ldrh	r4, [r7, r2]
 80028aa:	42a3      	cmp	r3, r4
 80028ac:	d06c      	beq.n	8002988 <EE_Init+0x250>
          if (varidx != x)
 80028ae:	4546      	cmp	r6, r8
 80028b0:	d060      	beq.n	8002974 <EE_Init+0x23c>
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80028b2:	4b4a      	ldr	r3, [pc, #296]	; (80029dc <EE_Init+0x2a4>)
 80028b4:	881a      	ldrh	r2, [r3, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80028b6:	4b4a      	ldr	r3, [pc, #296]	; (80029e0 <EE_Init+0x2a8>)
 80028b8:	881b      	ldrh	r3, [r3, #0]
 80028ba:	b29b      	uxth	r3, r3
      if (pagestatus0 == VALID_PAGE)
 80028bc:	2a00      	cmp	r2, #0
 80028be:	d06e      	beq.n	800299e <EE_Init+0x266>
      else if (pagestatus1 == VALID_PAGE)
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d000      	beq.n	80028c6 <EE_Init+0x18e>
 80028c4:	e0fc      	b.n	8002ac0 <EE_Init+0x388>
 80028c6:	4b4d      	ldr	r3, [pc, #308]	; (80029fc <EE_Init+0x2c4>)
 80028c8:	494d      	ldr	r1, [pc, #308]	; (8002a00 <EE_Init+0x2c8>)
 80028ca:	001a      	movs	r2, r3
 80028cc:	484d      	ldr	r0, [pc, #308]	; (8002a04 <EE_Init+0x2cc>)
 80028ce:	e06a      	b.n	80029a6 <EE_Init+0x26e>
      else if (pagestatus1 == ERASED) /* Page0 receive, Page1 erased */
 80028d0:	4a45      	ldr	r2, [pc, #276]	; (80029e8 <EE_Init+0x2b0>)
 80028d2:	4294      	cmp	r4, r2
 80028d4:	d100      	bne.n	80028d8 <EE_Init+0x1a0>
 80028d6:	e0f6      	b.n	8002ac6 <EE_Init+0x38e>
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80028d8:	a805      	add	r0, sp, #20
  uint32_t page_error = 0;
 80028da:	9501      	str	r5, [sp, #4]
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80028dc:	9505      	str	r5, [sp, #20]
  s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 80028de:	6041      	str	r1, [r0, #4]
  s_eraseinit.NbPages     = 1;
 80028e0:	6086      	str	r6, [r0, #8]
  while (Address <= PAGE0_END_ADDRESS)
 80028e2:	4c42      	ldr	r4, [pc, #264]	; (80029ec <EE_Init+0x2b4>)
 80028e4:	e003      	b.n	80028ee <EE_Init+0x1b6>
    Address = Address + 4;
 80028e6:	3104      	adds	r1, #4
  while (Address <= PAGE0_END_ADDRESS)
 80028e8:	42a1      	cmp	r1, r4
 80028ea:	d100      	bne.n	80028ee <EE_Init+0x1b6>
 80028ec:	e750      	b.n	8002790 <EE_Init+0x58>
    addressvalue = (*(__IO uint16_t*)Address);
 80028ee:	880b      	ldrh	r3, [r1, #0]
    if (addressvalue != ERASED)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d0f8      	beq.n	80028e6 <EE_Init+0x1ae>
 80028f4:	e747      	b.n	8002786 <EE_Init+0x4e>
  while (Address <= PAGE0_END_ADDRESS)
 80028f6:	483d      	ldr	r0, [pc, #244]	; (80029ec <EE_Init+0x2b4>)
 80028f8:	e003      	b.n	8002902 <EE_Init+0x1ca>
    Address = Address + 4;
 80028fa:	3104      	adds	r1, #4
  while (Address <= PAGE0_END_ADDRESS)
 80028fc:	4281      	cmp	r1, r0
 80028fe:	d100      	bne.n	8002902 <EE_Init+0x1ca>
 8002900:	e74e      	b.n	80027a0 <EE_Init+0x68>
    addressvalue = (*(__IO uint16_t*)Address);
 8002902:	880a      	ldrh	r2, [r1, #0]
    if (addressvalue != ERASED)
 8002904:	429a      	cmp	r2, r3
 8002906:	d0f8      	beq.n	80028fa <EE_Init+0x1c2>
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8002908:	4669      	mov	r1, sp
 800290a:	a802      	add	r0, sp, #8
 800290c:	f7fe fa92 	bl	8000e34 <HAL_FLASHEx_Erase>
          if (flashstatus != HAL_OK)
 8002910:	2800      	cmp	r0, #0
 8002912:	d1bb      	bne.n	800288c <EE_Init+0x154>
 8002914:	e744      	b.n	80027a0 <EE_Init+0x68>
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8002916:	a805      	add	r0, sp, #20
  uint32_t page_error = 0;
 8002918:	9401      	str	r4, [sp, #4]
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 800291a:	9405      	str	r4, [sp, #20]
  s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 800291c:	6041      	str	r1, [r0, #4]
  s_eraseinit.NbPages     = 1;
 800291e:	6086      	str	r6, [r0, #8]
  while (Address <= PAGE0_END_ADDRESS)
 8002920:	4d32      	ldr	r5, [pc, #200]	; (80029ec <EE_Init+0x2b4>)
 8002922:	e002      	b.n	800292a <EE_Init+0x1f2>
    Address = Address + 4;
 8002924:	3104      	adds	r1, #4
  while (Address <= PAGE0_END_ADDRESS)
 8002926:	42a9      	cmp	r1, r5
 8002928:	d008      	beq.n	800293c <EE_Init+0x204>
    addressvalue = (*(__IO uint16_t*)Address);
 800292a:	880b      	ldrh	r3, [r1, #0]
    if (addressvalue != ERASED)
 800292c:	4293      	cmp	r3, r2
 800292e:	d0f9      	beq.n	8002924 <EE_Init+0x1ec>
    flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error); 
 8002930:	a901      	add	r1, sp, #4
 8002932:	f7fe fa7f 	bl	8000e34 <HAL_FLASHEx_Erase>
    if (flashstatus != HAL_OK)
 8002936:	2800      	cmp	r0, #0
 8002938:	d000      	beq.n	800293c <EE_Init+0x204>
 800293a:	e754      	b.n	80027e6 <EE_Init+0xae>
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 800293c:	2200      	movs	r2, #0
 800293e:	2300      	movs	r3, #0
 8002940:	4926      	ldr	r1, [pc, #152]	; (80029dc <EE_Init+0x2a4>)
 8002942:	2001      	movs	r0, #1
 8002944:	f7fe f93c 	bl	8000bc0 <HAL_FLASH_Program>
  if (flashstatus != HAL_OK)
 8002948:	2800      	cmp	r0, #0
 800294a:	d100      	bne.n	800294e <EE_Init+0x216>
 800294c:	e729      	b.n	80027a2 <EE_Init+0x6a>
 800294e:	e74a      	b.n	80027e6 <EE_Init+0xae>
  {
    /* Verify if address and address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
    {
      /* Set variable data */
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, Data);       
 8002950:	2300      	movs	r3, #0
 8002952:	0029      	movs	r1, r5
 8002954:	2001      	movs	r0, #1
 8002956:	f7fe f933 	bl	8000bc0 <HAL_FLASH_Program>
      /* If program operation was failed, a Flash error code is returned */
      if (flashstatus != HAL_OK)
 800295a:	2800      	cmp	r0, #0
 800295c:	d000      	beq.n	8002960 <EE_Init+0x228>
 800295e:	e742      	b.n	80027e6 <EE_Init+0xae>
      {
        return flashstatus;
      }
      /* Set variable virtual address */
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, VirtAddress);       
 8002960:	0022      	movs	r2, r4
 8002962:	1ca9      	adds	r1, r5, #2
 8002964:	2300      	movs	r3, #0
 8002966:	2001      	movs	r0, #1
 8002968:	f7fe f92a 	bl	8000bc0 <HAL_FLASH_Program>
      /* Return program operation status */
      return flashstatus;
 800296c:	b284      	uxth	r4, r0
              if (eepromstatus != HAL_OK)
 800296e:	2c00      	cmp	r4, #0
 8002970:	d000      	beq.n	8002974 <EE_Init+0x23c>
 8002972:	e716      	b.n	80027a2 <EE_Init+0x6a>
 8002974:	3601      	adds	r6, #1
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8002976:	2e03      	cmp	r6, #3
 8002978:	d100      	bne.n	800297c <EE_Init+0x244>
 800297a:	e709      	b.n	8002790 <EE_Init+0x58>
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 800297c:	4b22      	ldr	r3, [pc, #136]	; (8002a08 <EE_Init+0x2d0>)
 800297e:	0072      	lsls	r2, r6, #1
 8002980:	881b      	ldrh	r3, [r3, #0]
 8002982:	5abc      	ldrh	r4, [r7, r2]
 8002984:	42a3      	cmp	r3, r4
 8002986:	d192      	bne.n	80028ae <EE_Init+0x176>
            x = varidx;
 8002988:	b233      	sxth	r3, r6
 800298a:	4698      	mov	r8, r3
 800298c:	e78f      	b.n	80028ae <EE_Init+0x176>
            x = varidx;
 800298e:	b233      	sxth	r3, r6
 8002990:	4698      	mov	r8, r3
 8002992:	e73d      	b.n	8002810 <EE_Init+0xd8>
      if (pagestatus0 == VALID_PAGE)
 8002994:	4b1d      	ldr	r3, [pc, #116]	; (8002a0c <EE_Init+0x2d4>)
 8002996:	491e      	ldr	r1, [pc, #120]	; (8002a10 <EE_Init+0x2d8>)
 8002998:	001a      	movs	r2, r3
 800299a:	481e      	ldr	r0, [pc, #120]	; (8002a14 <EE_Init+0x2dc>)
 800299c:	e749      	b.n	8002832 <EE_Init+0xfa>
 800299e:	4b1b      	ldr	r3, [pc, #108]	; (8002a0c <EE_Init+0x2d4>)
 80029a0:	491b      	ldr	r1, [pc, #108]	; (8002a10 <EE_Init+0x2d8>)
 80029a2:	001a      	movs	r2, r3
 80029a4:	481b      	ldr	r0, [pc, #108]	; (8002a14 <EE_Init+0x2dc>)
    addressvalue = (*(__IO uint16_t*)address);
 80029a6:	881b      	ldrh	r3, [r3, #0]
    if (addressvalue == VirtAddress)
 80029a8:	429c      	cmp	r4, r3
 80029aa:	d104      	bne.n	80029b6 <EE_Init+0x27e>
 80029ac:	e061      	b.n	8002a72 <EE_Init+0x33a>
    addressvalue = (*(__IO uint16_t*)address);
 80029ae:	8819      	ldrh	r1, [r3, #0]
    if (addressvalue == VirtAddress)
 80029b0:	428c      	cmp	r4, r1
 80029b2:	d05d      	beq.n	8002a70 <EE_Init+0x338>
 80029b4:	001a      	movs	r2, r3
      address = address - 4;
 80029b6:	1f13      	subs	r3, r2, #4
  while (address > (PageStartAddress + 2))
 80029b8:	4298      	cmp	r0, r3
 80029ba:	d3f8      	bcc.n	80029ae <EE_Init+0x276>
 80029bc:	e7da      	b.n	8002974 <EE_Init+0x23c>
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80029be:	a805      	add	r0, sp, #20
  uint32_t page_error = 0;
 80029c0:	9501      	str	r5, [sp, #4]
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80029c2:	9505      	str	r5, [sp, #20]
  s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 80029c4:	6041      	str	r1, [r0, #4]
  s_eraseinit.NbPages     = 1;
 80029c6:	6086      	str	r6, [r0, #8]
  while (Address <= PAGE0_END_ADDRESS)
 80029c8:	4c08      	ldr	r4, [pc, #32]	; (80029ec <EE_Init+0x2b4>)
 80029ca:	e003      	b.n	80029d4 <EE_Init+0x29c>
    Address = Address + 4;
 80029cc:	3104      	adds	r1, #4
  while (Address <= PAGE0_END_ADDRESS)
 80029ce:	42a1      	cmp	r1, r4
 80029d0:	d100      	bne.n	80029d4 <EE_Init+0x29c>
 80029d2:	e6dd      	b.n	8002790 <EE_Init+0x58>
    addressvalue = (*(__IO uint16_t*)Address);
 80029d4:	880a      	ldrh	r2, [r1, #0]
    if (addressvalue != ERASED)
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d0f8      	beq.n	80029cc <EE_Init+0x294>
 80029da:	e6d4      	b.n	8002786 <EE_Init+0x4e>
 80029dc:	08007000 	.word	0x08007000
 80029e0:	08007800 	.word	0x08007800
 80029e4:	0000eeee 	.word	0x0000eeee
 80029e8:	0000ffff 	.word	0x0000ffff
 80029ec:	08007400 	.word	0x08007400
 80029f0:	20000074 	.word	0x20000074
 80029f4:	20000004 	.word	0x20000004
 80029f8:	08007806 	.word	0x08007806
 80029fc:	0800f3fe 	.word	0x0800f3fe
 8002a00:	0800f3fc 	.word	0x0800f3fc
 8002a04:	0800f002 	.word	0x0800f002
 8002a08:	08007006 	.word	0x08007006
 8002a0c:	080073fe 	.word	0x080073fe
 8002a10:	080073fc 	.word	0x080073fc
 8002a14:	08007002 	.word	0x08007002
 8002a18:	1f91      	subs	r1, r2, #6
      *Data = (*(__IO uint16_t*)(address - 2));
 8002a1a:	464b      	mov	r3, r9
 8002a1c:	880a      	ldrh	r2, [r1, #0]
 8002a1e:	b292      	uxth	r2, r2
 8002a20:	801a      	strh	r2, [r3, #0]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002a22:	4d38      	ldr	r5, [pc, #224]	; (8002b04 <EE_Init+0x3cc>)
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002a24:	4b38      	ldr	r3, [pc, #224]	; (8002b08 <EE_Init+0x3d0>)
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002a26:	8828      	ldrh	r0, [r5, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002a28:	881b      	ldrh	r3, [r3, #0]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002a2a:	b280      	uxth	r0, r0
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002a2c:	b29b      	uxth	r3, r3
      if (pagestatus1 == VALID_PAGE)
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d111      	bne.n	8002a56 <EE_Init+0x31e>
        if (pagestatus0 == RECEIVE_DATA)
 8002a32:	4b36      	ldr	r3, [pc, #216]	; (8002b0c <EE_Init+0x3d4>)
 8002a34:	4298      	cmp	r0, r3
 8002a36:	d013      	beq.n	8002a60 <EE_Init+0x328>
 8002a38:	4d35      	ldr	r5, [pc, #212]	; (8002b10 <EE_Init+0x3d8>)
 8002a3a:	4936      	ldr	r1, [pc, #216]	; (8002b14 <EE_Init+0x3dc>)
 8002a3c:	002b      	movs	r3, r5
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	3301      	adds	r3, #1
 8002a42:	d103      	bne.n	8002a4c <EE_Init+0x314>
 8002a44:	e04a      	b.n	8002adc <EE_Init+0x3a4>
 8002a46:	682b      	ldr	r3, [r5, #0]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	d047      	beq.n	8002adc <EE_Init+0x3a4>
    }
    else
    {
      /* Next address location */
      address = address + 4;
 8002a4c:	3504      	adds	r5, #4
  while (address < pageendaddress)
 8002a4e:	42a9      	cmp	r1, r5
 8002a50:	d8f9      	bhi.n	8002a46 <EE_Init+0x30e>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8002a52:	2480      	movs	r4, #128	; 0x80
 8002a54:	e6a5      	b.n	80027a2 <EE_Init+0x6a>
      else if (pagestatus0 == VALID_PAGE)
 8002a56:	2800      	cmp	r0, #0
 8002a58:	d105      	bne.n	8002a66 <EE_Init+0x32e>
        if (pagestatus1 == RECEIVE_DATA)
 8002a5a:	492c      	ldr	r1, [pc, #176]	; (8002b0c <EE_Init+0x3d4>)
 8002a5c:	428b      	cmp	r3, r1
 8002a5e:	d0eb      	beq.n	8002a38 <EE_Init+0x300>
 8002a60:	492d      	ldr	r1, [pc, #180]	; (8002b18 <EE_Init+0x3e0>)
 8002a62:	002b      	movs	r3, r5
 8002a64:	e7eb      	b.n	8002a3e <EE_Init+0x306>
    return  NO_VALID_PAGE;
 8002a66:	24ab      	movs	r4, #171	; 0xab
 8002a68:	e69b      	b.n	80027a2 <EE_Init+0x6a>
 8002a6a:	4b2c      	ldr	r3, [pc, #176]	; (8002b1c <EE_Init+0x3e4>)
 8002a6c:	881a      	ldrh	r2, [r3, #0]
 8002a6e:	e7d8      	b.n	8002a22 <EE_Init+0x2ea>
 8002a70:	1f91      	subs	r1, r2, #6
      *Data = (*(__IO uint16_t*)(address - 2));
 8002a72:	464b      	mov	r3, r9
 8002a74:	880a      	ldrh	r2, [r1, #0]
 8002a76:	b292      	uxth	r2, r2
 8002a78:	801a      	strh	r2, [r3, #0]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002a7a:	4d22      	ldr	r5, [pc, #136]	; (8002b04 <EE_Init+0x3cc>)
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002a7c:	4b22      	ldr	r3, [pc, #136]	; (8002b08 <EE_Init+0x3d0>)
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002a7e:	8828      	ldrh	r0, [r5, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002a80:	881b      	ldrh	r3, [r3, #0]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002a82:	b280      	uxth	r0, r0
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002a84:	b29b      	uxth	r3, r3
      if (pagestatus1 == VALID_PAGE)
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d013      	beq.n	8002ab2 <EE_Init+0x37a>
      else if (pagestatus0 == VALID_PAGE)
 8002a8a:	2800      	cmp	r0, #0
 8002a8c:	d1eb      	bne.n	8002a66 <EE_Init+0x32e>
        if (pagestatus1 == RECEIVE_DATA)
 8002a8e:	491f      	ldr	r1, [pc, #124]	; (8002b0c <EE_Init+0x3d4>)
 8002a90:	428b      	cmp	r3, r1
 8002a92:	d011      	beq.n	8002ab8 <EE_Init+0x380>
 8002a94:	002b      	movs	r3, r5
 8002a96:	4920      	ldr	r1, [pc, #128]	; (8002b18 <EE_Init+0x3e0>)
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	d104      	bne.n	8002aa8 <EE_Init+0x370>
 8002a9e:	e757      	b.n	8002950 <EE_Init+0x218>
 8002aa0:	682b      	ldr	r3, [r5, #0]
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	d100      	bne.n	8002aa8 <EE_Init+0x370>
 8002aa6:	e753      	b.n	8002950 <EE_Init+0x218>
      address = address + 4;
 8002aa8:	3504      	adds	r5, #4
  while (address < pageendaddress)
 8002aaa:	42a9      	cmp	r1, r5
 8002aac:	d8f8      	bhi.n	8002aa0 <EE_Init+0x368>
  return PAGE_FULL;
 8002aae:	2480      	movs	r4, #128	; 0x80
 8002ab0:	e677      	b.n	80027a2 <EE_Init+0x6a>
        if (pagestatus0 == RECEIVE_DATA)
 8002ab2:	4b16      	ldr	r3, [pc, #88]	; (8002b0c <EE_Init+0x3d4>)
 8002ab4:	4298      	cmp	r0, r3
 8002ab6:	d0ed      	beq.n	8002a94 <EE_Init+0x35c>
 8002ab8:	4d15      	ldr	r5, [pc, #84]	; (8002b10 <EE_Init+0x3d8>)
 8002aba:	4916      	ldr	r1, [pc, #88]	; (8002b14 <EE_Init+0x3dc>)
 8002abc:	002b      	movs	r3, r5
 8002abe:	e7eb      	b.n	8002a98 <EE_Init+0x360>
 8002ac0:	4b16      	ldr	r3, [pc, #88]	; (8002b1c <EE_Init+0x3e4>)
 8002ac2:	881a      	ldrh	r2, [r3, #0]
 8002ac4:	e7d9      	b.n	8002a7a <EE_Init+0x342>
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	2300      	movs	r3, #0
 8002aca:	2001      	movs	r0, #1
        s_eraseinit.PageAddress = PAGE1_BASE_ADDRESS;
 8002acc:	9703      	str	r7, [sp, #12]
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8002ace:	f7fe f877 	bl	8000bc0 <HAL_FLASH_Program>
        if (flashstatus != HAL_OK)
 8002ad2:	2800      	cmp	r0, #0
 8002ad4:	d100      	bne.n	8002ad8 <EE_Init+0x3a0>
 8002ad6:	e663      	b.n	80027a0 <EE_Init+0x68>
        return flashstatus;
 8002ad8:	b284      	uxth	r4, r0
 8002ada:	e662      	b.n	80027a2 <EE_Init+0x6a>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, Data);       
 8002adc:	2300      	movs	r3, #0
 8002ade:	0029      	movs	r1, r5
 8002ae0:	2001      	movs	r0, #1
 8002ae2:	f7fe f86d 	bl	8000bc0 <HAL_FLASH_Program>
      if (flashstatus != HAL_OK)
 8002ae6:	2800      	cmp	r0, #0
 8002ae8:	d000      	beq.n	8002aec <EE_Init+0x3b4>
 8002aea:	e67c      	b.n	80027e6 <EE_Init+0xae>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, VirtAddress);       
 8002aec:	0022      	movs	r2, r4
 8002aee:	1ca9      	adds	r1, r5, #2
 8002af0:	2300      	movs	r3, #0
 8002af2:	2001      	movs	r0, #1
 8002af4:	f7fe f864 	bl	8000bc0 <HAL_FLASH_Program>
      return flashstatus;
 8002af8:	b284      	uxth	r4, r0
              if (eepromstatus != HAL_OK)
 8002afa:	2c00      	cmp	r4, #0
 8002afc:	d100      	bne.n	8002b00 <EE_Init+0x3c8>
 8002afe:	e6a4      	b.n	800284a <EE_Init+0x112>
 8002b00:	e64f      	b.n	80027a2 <EE_Init+0x6a>
 8002b02:	46c0      	nop			; (mov r8, r8)
 8002b04:	08007000 	.word	0x08007000
 8002b08:	08007800 	.word	0x08007800
 8002b0c:	0000eeee 	.word	0x0000eeee
 8002b10:	0800f000 	.word	0x0800f000
 8002b14:	0800f3ff 	.word	0x0800f3ff
 8002b18:	080073ff 	.word	0x080073ff
 8002b1c:	20000074 	.word	0x20000074

08002b20 <EE_ReadVariable>:
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002b20:	4b13      	ldr	r3, [pc, #76]	; (8002b70 <EE_ReadVariable+0x50>)
{
 8002b22:	b530      	push	{r4, r5, lr}
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002b24:	881a      	ldrh	r2, [r3, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002b26:	4b13      	ldr	r3, [pc, #76]	; (8002b74 <EE_ReadVariable+0x54>)
 8002b28:	881b      	ldrh	r3, [r3, #0]
 8002b2a:	b29b      	uxth	r3, r3
      if (pagestatus0 == VALID_PAGE)
 8002b2c:	2a00      	cmp	r2, #0
 8002b2e:	d006      	beq.n	8002b3e <EE_ReadVariable+0x1e>
      else if (pagestatus1 == VALID_PAGE)
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d115      	bne.n	8002b60 <EE_ReadVariable+0x40>
 8002b34:	4a10      	ldr	r2, [pc, #64]	; (8002b78 <EE_ReadVariable+0x58>)
 8002b36:	4c11      	ldr	r4, [pc, #68]	; (8002b7c <EE_ReadVariable+0x5c>)
 8002b38:	4d11      	ldr	r5, [pc, #68]	; (8002b80 <EE_ReadVariable+0x60>)
 8002b3a:	0013      	movs	r3, r2
 8002b3c:	e003      	b.n	8002b46 <EE_ReadVariable+0x26>
      if (pagestatus0 == VALID_PAGE)
 8002b3e:	4a11      	ldr	r2, [pc, #68]	; (8002b84 <EE_ReadVariable+0x64>)
 8002b40:	4c11      	ldr	r4, [pc, #68]	; (8002b88 <EE_ReadVariable+0x68>)
 8002b42:	0013      	movs	r3, r2
 8002b44:	4d11      	ldr	r5, [pc, #68]	; (8002b8c <EE_ReadVariable+0x6c>)
    addressvalue = (*(__IO uint16_t*)address);
 8002b46:	881b      	ldrh	r3, [r3, #0]
    if (addressvalue == VirtAddress)
 8002b48:	4298      	cmp	r0, r3
 8002b4a:	d104      	bne.n	8002b56 <EE_ReadVariable+0x36>
 8002b4c:	e00b      	b.n	8002b66 <EE_ReadVariable+0x46>
    addressvalue = (*(__IO uint16_t*)address);
 8002b4e:	881c      	ldrh	r4, [r3, #0]
    if (addressvalue == VirtAddress)
 8002b50:	4284      	cmp	r4, r0
 8002b52:	d007      	beq.n	8002b64 <EE_ReadVariable+0x44>
 8002b54:	001a      	movs	r2, r3
      address = address - 4;
 8002b56:	1f13      	subs	r3, r2, #4
  while (address > (PageStartAddress + 2))
 8002b58:	429d      	cmp	r5, r3
 8002b5a:	d3f8      	bcc.n	8002b4e <EE_ReadVariable+0x2e>
  uint16_t addressvalue = 0x5555, readstatus = 1;
 8002b5c:	2001      	movs	r0, #1
}
 8002b5e:	bd30      	pop	{r4, r5, pc}
    return  NO_VALID_PAGE;
 8002b60:	20ab      	movs	r0, #171	; 0xab
 8002b62:	e7fc      	b.n	8002b5e <EE_ReadVariable+0x3e>
 8002b64:	1f94      	subs	r4, r2, #6
      *Data = (*(__IO uint16_t*)(address - 2));
 8002b66:	8823      	ldrh	r3, [r4, #0]
      readstatus = 0;
 8002b68:	2000      	movs	r0, #0
      *Data = (*(__IO uint16_t*)(address - 2));
 8002b6a:	800b      	strh	r3, [r1, #0]
      break;
 8002b6c:	e7f7      	b.n	8002b5e <EE_ReadVariable+0x3e>
 8002b6e:	46c0      	nop			; (mov r8, r8)
 8002b70:	08007000 	.word	0x08007000
 8002b74:	08007800 	.word	0x08007800
 8002b78:	0800f3fe 	.word	0x0800f3fe
 8002b7c:	0800f3fc 	.word	0x0800f3fc
 8002b80:	0800f002 	.word	0x0800f002
 8002b84:	080073fe 	.word	0x080073fe
 8002b88:	080073fc 	.word	0x080073fc
 8002b8c:	08007002 	.word	0x08007002

08002b90 <EE_WriteVariable>:
{
 8002b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b92:	464e      	mov	r6, r9
 8002b94:	4645      	mov	r5, r8
 8002b96:	46de      	mov	lr, fp
 8002b98:	4657      	mov	r7, sl
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002b9a:	4b86      	ldr	r3, [pc, #536]	; (8002db4 <EE_WriteVariable+0x224>)
{
 8002b9c:	b5e0      	push	{r5, r6, r7, lr}
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002b9e:	4a86      	ldr	r2, [pc, #536]	; (8002db8 <EE_WriteVariable+0x228>)
{
 8002ba0:	000d      	movs	r5, r1
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002ba2:	8819      	ldrh	r1, [r3, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002ba4:	8812      	ldrh	r2, [r2, #0]
{
 8002ba6:	b085      	sub	sp, #20
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002ba8:	b292      	uxth	r2, r2
{
 8002baa:	0006      	movs	r6, r0
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002bac:	b289      	uxth	r1, r1
      if (pagestatus1 == VALID_PAGE)
 8002bae:	2a00      	cmp	r2, #0
 8002bb0:	d129      	bne.n	8002c06 <EE_WriteVariable+0x76>
        if (pagestatus0 == RECEIVE_DATA)
 8002bb2:	4a82      	ldr	r2, [pc, #520]	; (8002dbc <EE_WriteVariable+0x22c>)
 8002bb4:	4291      	cmp	r1, r2
 8002bb6:	d02c      	beq.n	8002c12 <EE_WriteVariable+0x82>
 8002bb8:	4b81      	ldr	r3, [pc, #516]	; (8002dc0 <EE_WriteVariable+0x230>)
 8002bba:	4a82      	ldr	r2, [pc, #520]	; (8002dc4 <EE_WriteVariable+0x234>)
 8002bbc:	001c      	movs	r4, r3
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	d103      	bne.n	8002bcc <EE_WriteVariable+0x3c>
 8002bc4:	e028      	b.n	8002c18 <EE_WriteVariable+0x88>
 8002bc6:	6823      	ldr	r3, [r4, #0]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	d025      	beq.n	8002c18 <EE_WriteVariable+0x88>
      address = address + 4;
 8002bcc:	3404      	adds	r4, #4
  while (address < pageendaddress)
 8002bce:	42a2      	cmp	r2, r4
 8002bd0:	d8f9      	bhi.n	8002bc6 <EE_WriteVariable+0x36>
  HAL_StatusTypeDef flashstatus = HAL_OK;
  uint32_t newpageaddress = EEPROM_START_ADDRESS;
  uint32_t oldpageid = 0;
  uint16_t validpage = PAGE0, varidx = 0;
  uint16_t eepromstatus = 0, readstatus = 0;
  uint32_t page_error = 0;
 8002bd2:	2300      	movs	r3, #0
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002bd4:	4a77      	ldr	r2, [pc, #476]	; (8002db4 <EE_WriteVariable+0x224>)
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002bd6:	4c78      	ldr	r4, [pc, #480]	; (8002db8 <EE_WriteVariable+0x228>)
  uint32_t page_error = 0;
 8002bd8:	9300      	str	r3, [sp, #0]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002bda:	8811      	ldrh	r1, [r2, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002bdc:	8823      	ldrh	r3, [r4, #0]
 8002bde:	b29b      	uxth	r3, r3
      if (pagestatus0 == VALID_PAGE)
 8002be0:	2900      	cmp	r1, #0
 8002be2:	d125      	bne.n	8002c30 <EE_WriteVariable+0xa0>
  {
    /* New page address  where variable will be moved to */
    newpageaddress = PAGE1_BASE_ADDRESS;

    /* Old page ID where variable will be taken from */
    oldpageid = PAGE0_BASE_ADDRESS;
 8002be4:	4690      	mov	r8, r2
  {
    return NO_VALID_PAGE;       /* No valid Page */
  }

  /* Set the new Page status to RECEIVE_DATA status */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, newpageaddress, RECEIVE_DATA);  
 8002be6:	4a75      	ldr	r2, [pc, #468]	; (8002dbc <EE_WriteVariable+0x22c>)
 8002be8:	2300      	movs	r3, #0
 8002bea:	0021      	movs	r1, r4
 8002bec:	2001      	movs	r0, #1
 8002bee:	f7fd ffe7 	bl	8000bc0 <HAL_FLASH_Program>
  /* If program operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 8002bf2:	2800      	cmp	r0, #0
 8002bf4:	d02a      	beq.n	8002c4c <EE_WriteVariable+0xbc>
  /* Erase the old Page: Set old Page status to ERASED status */
  flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);  
  /* If erase operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
  {
    return flashstatus;
 8002bf6:	b280      	uxth	r0, r0
}
 8002bf8:	b005      	add	sp, #20
 8002bfa:	bc3c      	pop	{r2, r3, r4, r5}
 8002bfc:	4690      	mov	r8, r2
 8002bfe:	4699      	mov	r9, r3
 8002c00:	46a2      	mov	sl, r4
 8002c02:	46ab      	mov	fp, r5
 8002c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return  NO_VALID_PAGE;
 8002c06:	20ab      	movs	r0, #171	; 0xab
      else if (pagestatus0 == VALID_PAGE)
 8002c08:	2900      	cmp	r1, #0
 8002c0a:	d1f5      	bne.n	8002bf8 <EE_WriteVariable+0x68>
        if (pagestatus1 == RECEIVE_DATA)
 8002c0c:	496b      	ldr	r1, [pc, #428]	; (8002dbc <EE_WriteVariable+0x22c>)
 8002c0e:	428a      	cmp	r2, r1
 8002c10:	d0d2      	beq.n	8002bb8 <EE_WriteVariable+0x28>
 8002c12:	001c      	movs	r4, r3
 8002c14:	4a6c      	ldr	r2, [pc, #432]	; (8002dc8 <EE_WriteVariable+0x238>)
 8002c16:	e7d2      	b.n	8002bbe <EE_WriteVariable+0x2e>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, Data);       
 8002c18:	002a      	movs	r2, r5
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	0021      	movs	r1, r4
 8002c1e:	2001      	movs	r0, #1
 8002c20:	f7fd ffce 	bl	8000bc0 <HAL_FLASH_Program>
      if (flashstatus != HAL_OK)
 8002c24:	2800      	cmp	r0, #0
 8002c26:	d008      	beq.n	8002c3a <EE_WriteVariable+0xaa>
      return flashstatus;
 8002c28:	b280      	uxth	r0, r0
  if (Status == PAGE_FULL)
 8002c2a:	2880      	cmp	r0, #128	; 0x80
 8002c2c:	d1e4      	bne.n	8002bf8 <EE_WriteVariable+0x68>
 8002c2e:	e7d0      	b.n	8002bd2 <EE_WriteVariable+0x42>
      else if (pagestatus1 == VALID_PAGE)
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d109      	bne.n	8002c48 <EE_WriteVariable+0xb8>
    oldpageid = PAGE1_BASE_ADDRESS;
 8002c34:	46a0      	mov	r8, r4
    newpageaddress = PAGE0_BASE_ADDRESS;
 8002c36:	0014      	movs	r4, r2
 8002c38:	e7d5      	b.n	8002be6 <EE_WriteVariable+0x56>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, VirtAddress);       
 8002c3a:	1ca1      	adds	r1, r4, #2
 8002c3c:	0032      	movs	r2, r6
 8002c3e:	2300      	movs	r3, #0
 8002c40:	2001      	movs	r0, #1
 8002c42:	f7fd ffbd 	bl	8000bc0 <HAL_FLASH_Program>
 8002c46:	e7ef      	b.n	8002c28 <EE_WriteVariable+0x98>
    return NO_VALID_PAGE;       /* No valid Page */
 8002c48:	20ab      	movs	r0, #171	; 0xab
 8002c4a:	e7d5      	b.n	8002bf8 <EE_WriteVariable+0x68>
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002c4c:	4b59      	ldr	r3, [pc, #356]	; (8002db4 <EE_WriteVariable+0x224>)
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002c4e:	4a5a      	ldr	r2, [pc, #360]	; (8002db8 <EE_WriteVariable+0x228>)
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002c50:	8819      	ldrh	r1, [r3, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002c52:	8812      	ldrh	r2, [r2, #0]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002c54:	b289      	uxth	r1, r1
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002c56:	b292      	uxth	r2, r2
      if (pagestatus1 == VALID_PAGE)
 8002c58:	2a00      	cmp	r2, #0
 8002c5a:	d111      	bne.n	8002c80 <EE_WriteVariable+0xf0>
        if (pagestatus0 == RECEIVE_DATA)
 8002c5c:	4a57      	ldr	r2, [pc, #348]	; (8002dbc <EE_WriteVariable+0x22c>)
 8002c5e:	4291      	cmp	r1, r2
 8002c60:	d013      	beq.n	8002c8a <EE_WriteVariable+0xfa>
 8002c62:	4b57      	ldr	r3, [pc, #348]	; (8002dc0 <EE_WriteVariable+0x230>)
 8002c64:	4a57      	ldr	r2, [pc, #348]	; (8002dc4 <EE_WriteVariable+0x234>)
 8002c66:	001f      	movs	r7, r3
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	d103      	bne.n	8002c76 <EE_WriteVariable+0xe6>
 8002c6e:	e00f      	b.n	8002c90 <EE_WriteVariable+0x100>
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	3301      	adds	r3, #1
 8002c74:	d00c      	beq.n	8002c90 <EE_WriteVariable+0x100>
      address = address + 4;
 8002c76:	3704      	adds	r7, #4
  while (address < pageendaddress)
 8002c78:	4297      	cmp	r7, r2
 8002c7a:	d3f9      	bcc.n	8002c70 <EE_WriteVariable+0xe0>
  return PAGE_FULL;
 8002c7c:	2080      	movs	r0, #128	; 0x80
 8002c7e:	e7bb      	b.n	8002bf8 <EE_WriteVariable+0x68>
      else if (pagestatus0 == VALID_PAGE)
 8002c80:	2900      	cmp	r1, #0
 8002c82:	d1e1      	bne.n	8002c48 <EE_WriteVariable+0xb8>
        if (pagestatus1 == RECEIVE_DATA)
 8002c84:	494d      	ldr	r1, [pc, #308]	; (8002dbc <EE_WriteVariable+0x22c>)
 8002c86:	428a      	cmp	r2, r1
 8002c88:	d0eb      	beq.n	8002c62 <EE_WriteVariable+0xd2>
 8002c8a:	4a4f      	ldr	r2, [pc, #316]	; (8002dc8 <EE_WriteVariable+0x238>)
 8002c8c:	001f      	movs	r7, r3
 8002c8e:	e7eb      	b.n	8002c68 <EE_WriteVariable+0xd8>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, Data);       
 8002c90:	002a      	movs	r2, r5
 8002c92:	2300      	movs	r3, #0
 8002c94:	0039      	movs	r1, r7
 8002c96:	2001      	movs	r0, #1
 8002c98:	f7fd ff92 	bl	8000bc0 <HAL_FLASH_Program>
      if (flashstatus != HAL_OK)
 8002c9c:	2800      	cmp	r0, #0
 8002c9e:	d1aa      	bne.n	8002bf6 <EE_WriteVariable+0x66>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, VirtAddress);       
 8002ca0:	1cb9      	adds	r1, r7, #2
 8002ca2:	0032      	movs	r2, r6
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	2001      	movs	r0, #1
 8002ca8:	f7fd ff8a 	bl	8000bc0 <HAL_FLASH_Program>
      return flashstatus;
 8002cac:	b280      	uxth	r0, r0
  if (eepromstatus != HAL_OK)
 8002cae:	2800      	cmp	r0, #0
 8002cb0:	d1a2      	bne.n	8002bf8 <EE_WriteVariable+0x68>
 8002cb2:	4b46      	ldr	r3, [pc, #280]	; (8002dcc <EE_WriteVariable+0x23c>)
 8002cb4:	2700      	movs	r7, #0
 8002cb6:	4699      	mov	r9, r3
      *Data = (*(__IO uint16_t*)(address - 2));
 8002cb8:	4b45      	ldr	r3, [pc, #276]	; (8002dd0 <EE_WriteVariable+0x240>)
 8002cba:	469a      	mov	sl, r3
    if (VirtAddVarTab[varidx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8002cbc:	464b      	mov	r3, r9
 8002cbe:	5bdb      	ldrh	r3, [r3, r7]
 8002cc0:	469b      	mov	fp, r3
 8002cc2:	429e      	cmp	r6, r3
 8002cc4:	d017      	beq.n	8002cf6 <EE_WriteVariable+0x166>
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002cc6:	4b3b      	ldr	r3, [pc, #236]	; (8002db4 <EE_WriteVariable+0x224>)
 8002cc8:	881a      	ldrh	r2, [r3, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002cca:	4b3b      	ldr	r3, [pc, #236]	; (8002db8 <EE_WriteVariable+0x228>)
 8002ccc:	881b      	ldrh	r3, [r3, #0]
 8002cce:	b29b      	uxth	r3, r3
      if (pagestatus0 == VALID_PAGE)
 8002cd0:	2a00      	cmp	r2, #0
 8002cd2:	d02d      	beq.n	8002d30 <EE_WriteVariable+0x1a0>
      else if (pagestatus1 == VALID_PAGE)
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d14f      	bne.n	8002d78 <EE_WriteVariable+0x1e8>
 8002cd8:	4a3e      	ldr	r2, [pc, #248]	; (8002dd4 <EE_WriteVariable+0x244>)
 8002cda:	493f      	ldr	r1, [pc, #252]	; (8002dd8 <EE_WriteVariable+0x248>)
 8002cdc:	0013      	movs	r3, r2
 8002cde:	483f      	ldr	r0, [pc, #252]	; (8002ddc <EE_WriteVariable+0x24c>)
    addressvalue = (*(__IO uint16_t*)address);
 8002ce0:	881b      	ldrh	r3, [r3, #0]
    if (addressvalue == VirtAddress)
 8002ce2:	459b      	cmp	fp, r3
 8002ce4:	d104      	bne.n	8002cf0 <EE_WriteVariable+0x160>
 8002ce6:	e029      	b.n	8002d3c <EE_WriteVariable+0x1ac>
    addressvalue = (*(__IO uint16_t*)address);
 8002ce8:	8819      	ldrh	r1, [r3, #0]
    if (addressvalue == VirtAddress)
 8002cea:	458b      	cmp	fp, r1
 8002cec:	d025      	beq.n	8002d3a <EE_WriteVariable+0x1aa>
 8002cee:	001a      	movs	r2, r3
      address = address - 4;
 8002cf0:	1f13      	subs	r3, r2, #4
  while (address > (PageStartAddress + 2))
 8002cf2:	4298      	cmp	r0, r3
 8002cf4:	d3f8      	bcc.n	8002ce8 <EE_WriteVariable+0x158>
 8002cf6:	3702      	adds	r7, #2
  for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8002cf8:	2f06      	cmp	r7, #6
 8002cfa:	d1df      	bne.n	8002cbc <EE_WriteVariable+0x12c>
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	9301      	str	r3, [sp, #4]
  s_eraseinit.PageAddress = oldpageid;
 8002d00:	4643      	mov	r3, r8
 8002d02:	9302      	str	r3, [sp, #8]
  s_eraseinit.NbPages     = 1;
 8002d04:	2301      	movs	r3, #1
  flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);  
 8002d06:	4669      	mov	r1, sp
 8002d08:	a801      	add	r0, sp, #4
  s_eraseinit.NbPages     = 1;
 8002d0a:	9303      	str	r3, [sp, #12]
  flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);  
 8002d0c:	f7fe f892 	bl	8000e34 <HAL_FLASHEx_Erase>
  if (flashstatus != HAL_OK)
 8002d10:	2800      	cmp	r0, #0
 8002d12:	d000      	beq.n	8002d16 <EE_WriteVariable+0x186>
 8002d14:	e76f      	b.n	8002bf6 <EE_WriteVariable+0x66>
  }

  /* Set new Page status to VALID_PAGE status */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, newpageaddress, VALID_PAGE);   
 8002d16:	2300      	movs	r3, #0
 8002d18:	2200      	movs	r2, #0
 8002d1a:	0021      	movs	r1, r4
 8002d1c:	2001      	movs	r0, #1
 8002d1e:	f7fd ff4f 	bl	8000bc0 <HAL_FLASH_Program>
 8002d22:	0003      	movs	r3, r0
  }
  
  

  /* Return last operation flash status */
  return flashstatus;
 8002d24:	2000      	movs	r0, #0
  if (flashstatus != HAL_OK)
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d100      	bne.n	8002d2c <EE_WriteVariable+0x19c>
 8002d2a:	e765      	b.n	8002bf8 <EE_WriteVariable+0x68>
    return flashstatus;
 8002d2c:	b298      	uxth	r0, r3
 8002d2e:	e763      	b.n	8002bf8 <EE_WriteVariable+0x68>
      if (pagestatus0 == VALID_PAGE)
 8002d30:	4a2b      	ldr	r2, [pc, #172]	; (8002de0 <EE_WriteVariable+0x250>)
 8002d32:	492c      	ldr	r1, [pc, #176]	; (8002de4 <EE_WriteVariable+0x254>)
 8002d34:	482c      	ldr	r0, [pc, #176]	; (8002de8 <EE_WriteVariable+0x258>)
 8002d36:	0013      	movs	r3, r2
 8002d38:	e7d2      	b.n	8002ce0 <EE_WriteVariable+0x150>
 8002d3a:	1f91      	subs	r1, r2, #6
      *Data = (*(__IO uint16_t*)(address - 2));
 8002d3c:	4653      	mov	r3, sl
 8002d3e:	880a      	ldrh	r2, [r1, #0]
 8002d40:	b292      	uxth	r2, r2
 8002d42:	801a      	strh	r2, [r3, #0]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002d44:	4b1b      	ldr	r3, [pc, #108]	; (8002db4 <EE_WriteVariable+0x224>)
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002d46:	491c      	ldr	r1, [pc, #112]	; (8002db8 <EE_WriteVariable+0x228>)
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002d48:	8818      	ldrh	r0, [r3, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002d4a:	8809      	ldrh	r1, [r1, #0]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002d4c:	b280      	uxth	r0, r0
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002d4e:	b289      	uxth	r1, r1
      if (pagestatus1 == VALID_PAGE)
 8002d50:	2900      	cmp	r1, #0
 8002d52:	d114      	bne.n	8002d7e <EE_WriteVariable+0x1ee>
        if (pagestatus0 == RECEIVE_DATA)
 8002d54:	4919      	ldr	r1, [pc, #100]	; (8002dbc <EE_WriteVariable+0x22c>)
 8002d56:	4288      	cmp	r0, r1
 8002d58:	d017      	beq.n	8002d8a <EE_WriteVariable+0x1fa>
 8002d5a:	4b19      	ldr	r3, [pc, #100]	; (8002dc0 <EE_WriteVariable+0x230>)
 8002d5c:	4919      	ldr	r1, [pc, #100]	; (8002dc4 <EE_WriteVariable+0x234>)
 8002d5e:	001d      	movs	r5, r3
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	3301      	adds	r3, #1
 8002d64:	d103      	bne.n	8002d6e <EE_WriteVariable+0x1de>
 8002d66:	e013      	b.n	8002d90 <EE_WriteVariable+0x200>
 8002d68:	682b      	ldr	r3, [r5, #0]
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	d010      	beq.n	8002d90 <EE_WriteVariable+0x200>
      address = address + 4;
 8002d6e:	3504      	adds	r5, #4
  while (address < pageendaddress)
 8002d70:	428d      	cmp	r5, r1
 8002d72:	d3f9      	bcc.n	8002d68 <EE_WriteVariable+0x1d8>
  return PAGE_FULL;
 8002d74:	2080      	movs	r0, #128	; 0x80
 8002d76:	e73f      	b.n	8002bf8 <EE_WriteVariable+0x68>
 8002d78:	4b15      	ldr	r3, [pc, #84]	; (8002dd0 <EE_WriteVariable+0x240>)
 8002d7a:	881a      	ldrh	r2, [r3, #0]
 8002d7c:	e7e2      	b.n	8002d44 <EE_WriteVariable+0x1b4>
      else if (pagestatus0 == VALID_PAGE)
 8002d7e:	2800      	cmp	r0, #0
 8002d80:	d000      	beq.n	8002d84 <EE_WriteVariable+0x1f4>
 8002d82:	e761      	b.n	8002c48 <EE_WriteVariable+0xb8>
        if (pagestatus1 == RECEIVE_DATA)
 8002d84:	480d      	ldr	r0, [pc, #52]	; (8002dbc <EE_WriteVariable+0x22c>)
 8002d86:	4281      	cmp	r1, r0
 8002d88:	d0e7      	beq.n	8002d5a <EE_WriteVariable+0x1ca>
 8002d8a:	001d      	movs	r5, r3
 8002d8c:	490e      	ldr	r1, [pc, #56]	; (8002dc8 <EE_WriteVariable+0x238>)
 8002d8e:	e7e7      	b.n	8002d60 <EE_WriteVariable+0x1d0>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, Data);       
 8002d90:	2300      	movs	r3, #0
 8002d92:	0029      	movs	r1, r5
 8002d94:	2001      	movs	r0, #1
 8002d96:	f7fd ff13 	bl	8000bc0 <HAL_FLASH_Program>
      if (flashstatus != HAL_OK)
 8002d9a:	2800      	cmp	r0, #0
 8002d9c:	d000      	beq.n	8002da0 <EE_WriteVariable+0x210>
 8002d9e:	e72a      	b.n	8002bf6 <EE_WriteVariable+0x66>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, VirtAddress);       
 8002da0:	1ca9      	adds	r1, r5, #2
 8002da2:	465a      	mov	r2, fp
 8002da4:	2300      	movs	r3, #0
 8002da6:	2001      	movs	r0, #1
 8002da8:	f7fd ff0a 	bl	8000bc0 <HAL_FLASH_Program>
      return flashstatus;
 8002dac:	b280      	uxth	r0, r0
        if (eepromstatus != HAL_OK)
 8002dae:	2800      	cmp	r0, #0
 8002db0:	d0a1      	beq.n	8002cf6 <EE_WriteVariable+0x166>
 8002db2:	e721      	b.n	8002bf8 <EE_WriteVariable+0x68>
 8002db4:	08007000 	.word	0x08007000
 8002db8:	08007800 	.word	0x08007800
 8002dbc:	0000eeee 	.word	0x0000eeee
 8002dc0:	0800f000 	.word	0x0800f000
 8002dc4:	0800f3ff 	.word	0x0800f3ff
 8002dc8:	080073ff 	.word	0x080073ff
 8002dcc:	20000004 	.word	0x20000004
 8002dd0:	20000074 	.word	0x20000074
 8002dd4:	0800f3fe 	.word	0x0800f3fe
 8002dd8:	0800f3fc 	.word	0x0800f3fc
 8002ddc:	0800f002 	.word	0x0800f002
 8002de0:	080073fe 	.word	0x080073fe
 8002de4:	080073fc 	.word	0x080073fc
 8002de8:	08007002 	.word	0x08007002

08002dec <storeEEpromConfig>:
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;

}


void storeEEpromConfig(){
 8002dec:	b510      	push	{r4, lr}

	 EE_WriteVariable(VirtAddVarTab[EEvehiclemode], vehicle_mode);
 8002dee:	4b08      	ldr	r3, [pc, #32]	; (8002e10 <storeEEpromConfig+0x24>)
 8002df0:	4c08      	ldr	r4, [pc, #32]	; (8002e14 <storeEEpromConfig+0x28>)
 8002df2:	7819      	ldrb	r1, [r3, #0]
 8002df4:	8820      	ldrh	r0, [r4, #0]
 8002df6:	f7ff fecb 	bl	8002b90 <EE_WriteVariable>
	 EE_WriteVariable(VirtAddVarTab[EEdirection], dir_reversed);
 8002dfa:	4b07      	ldr	r3, [pc, #28]	; (8002e18 <storeEEpromConfig+0x2c>)
 8002dfc:	8860      	ldrh	r0, [r4, #2]
 8002dfe:	8819      	ldrh	r1, [r3, #0]
 8002e00:	f7ff fec6 	bl	8002b90 <EE_WriteVariable>
	 EE_WriteVariable(VirtAddVarTab[EEbidirection], bi_direction);
 8002e04:	4b05      	ldr	r3, [pc, #20]	; (8002e1c <storeEEpromConfig+0x30>)
 8002e06:	88a0      	ldrh	r0, [r4, #4]
 8002e08:	8819      	ldrh	r1, [r3, #0]
 8002e0a:	f7ff fec1 	bl	8002b90 <EE_WriteVariable>
	// EE_WriteVariable(VirtAddVarTab[EEbrake_on_stop], EEbrake_on_stop);

	// playEEpromSavedTune();
}
 8002e0e:	bd10      	pop	{r4, pc}
 8002e10:	2000004c 	.word	0x2000004c
 8002e14:	20000004 	.word	0x20000004
 8002e18:	200000b0 	.word	0x200000b0
 8002e1c:	20000098 	.word	0x20000098

08002e20 <loadEEpromConfig>:


void loadEEpromConfig(){
 8002e20:	b570      	push	{r4, r5, r6, lr}
	 EE_ReadVariable(VirtAddVarTab[EEvehiclemode], &VarDataTab[EEvehiclemode]);
 8002e22:	4c15      	ldr	r4, [pc, #84]	; (8002e78 <loadEEpromConfig+0x58>)
 8002e24:	4d15      	ldr	r5, [pc, #84]	; (8002e7c <loadEEpromConfig+0x5c>)
 8002e26:	0021      	movs	r1, r4
 8002e28:	8828      	ldrh	r0, [r5, #0]
 8002e2a:	f7ff fe79 	bl	8002b20 <EE_ReadVariable>
	 EE_ReadVariable(VirtAddVarTab[EEdirection], &VarDataTab[EEdirection]);
 8002e2e:	1ca1      	adds	r1, r4, #2
 8002e30:	8868      	ldrh	r0, [r5, #2]
 8002e32:	f7ff fe75 	bl	8002b20 <EE_ReadVariable>
	 EE_ReadVariable(VirtAddVarTab[EEbidirection], &VarDataTab[EEbidirection]);
 8002e36:	1d21      	adds	r1, r4, #4
 8002e38:	88a8      	ldrh	r0, [r5, #4]
 8002e3a:	f7ff fe71 	bl	8002b20 <EE_ReadVariable>
//	 EE_ReadVariable(VirtAddVarTab[EEbrake_on_stop], &VarDataTab[EEbrake_on_stop]);

	 if (VarDataTab[EEvehiclemode] == 0){             // nothing in the eeprom
 8002e3e:	8823      	ldrh	r3, [r4, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d008      	beq.n	8002e56 <loadEEpromConfig+0x36>
     storeEEpromConfig();            // store default values
	 }else{
	 vehicle_mode = VarDataTab[EEvehiclemode];
 8002e44:	4a0e      	ldr	r2, [pc, #56]	; (8002e80 <loadEEpromConfig+0x60>)
 8002e46:	7013      	strb	r3, [r2, #0]
	 dir_reversed = VarDataTab[EEdirection];
 8002e48:	8862      	ldrh	r2, [r4, #2]
 8002e4a:	4b0e      	ldr	r3, [pc, #56]	; (8002e84 <loadEEpromConfig+0x64>)
 8002e4c:	601a      	str	r2, [r3, #0]
	 bi_direction = VarDataTab[EEbidirection];
 8002e4e:	88a2      	ldrh	r2, [r4, #4]
 8002e50:	4b0d      	ldr	r3, [pc, #52]	; (8002e88 <loadEEpromConfig+0x68>)
 8002e52:	601a      	str	r2, [r3, #0]
//	 brake = VarDataTab[EEbrake_on_stop];
	 }
}
 8002e54:	bd70      	pop	{r4, r5, r6, pc}
	 EE_WriteVariable(VirtAddVarTab[EEvehiclemode], vehicle_mode);
 8002e56:	4b0a      	ldr	r3, [pc, #40]	; (8002e80 <loadEEpromConfig+0x60>)
 8002e58:	8828      	ldrh	r0, [r5, #0]
 8002e5a:	7819      	ldrb	r1, [r3, #0]
 8002e5c:	f7ff fe98 	bl	8002b90 <EE_WriteVariable>
	 EE_WriteVariable(VirtAddVarTab[EEdirection], dir_reversed);
 8002e60:	4b08      	ldr	r3, [pc, #32]	; (8002e84 <loadEEpromConfig+0x64>)
 8002e62:	8868      	ldrh	r0, [r5, #2]
 8002e64:	8819      	ldrh	r1, [r3, #0]
 8002e66:	f7ff fe93 	bl	8002b90 <EE_WriteVariable>
	 EE_WriteVariable(VirtAddVarTab[EEbidirection], bi_direction);
 8002e6a:	4b07      	ldr	r3, [pc, #28]	; (8002e88 <loadEEpromConfig+0x68>)
 8002e6c:	88a8      	ldrh	r0, [r5, #4]
 8002e6e:	8819      	ldrh	r1, [r3, #0]
 8002e70:	f7ff fe8e 	bl	8002b90 <EE_WriteVariable>
 8002e74:	e7ee      	b.n	8002e54 <loadEEpromConfig+0x34>
 8002e76:	46c0      	nop			; (mov r8, r8)
 8002e78:	20000080 	.word	0x20000080
 8002e7c:	20000004 	.word	0x20000004
 8002e80:	2000004c 	.word	0x2000004c
 8002e84:	200000b0 	.word	0x200000b0
 8002e88:	20000098 	.word	0x20000098

08002e8c <phaseBPWM>:
#ifdef FD6288
void phaseBPWM() {
#endif


		if(!slow_decay  || prop_brake_active){            // for future
 8002e8c:	4b10      	ldr	r3, [pc, #64]	; (8002ed0 <phaseBPWM+0x44>)
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8002e8e:	4a11      	ldr	r2, [pc, #68]	; (8002ed4 <phaseBPWM+0x48>)
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00a      	beq.n	8002eac <phaseBPWM+0x20>
 8002e96:	4b10      	ldr	r3, [pc, #64]	; (8002ed8 <phaseBPWM+0x4c>)
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d106      	bne.n	8002eac <phaseBPWM+0x20>
 8002e9e:	2103      	movs	r1, #3
 8002ea0:	6813      	ldr	r3, [r2, #0]
 8002ea2:	438b      	bics	r3, r1
 8002ea4:	3901      	subs	r1, #1
 8002ea6:	430b      	orrs	r3, r1
 8002ea8:	6013      	str	r3, [r2, #0]
 8002eaa:	e006      	b.n	8002eba <phaseBPWM+0x2e>
 8002eac:	2103      	movs	r1, #3
 8002eae:	6813      	ldr	r3, [r2, #0]
 8002eb0:	438b      	bics	r3, r1
 8002eb2:	3902      	subs	r1, #2
 8002eb4:	430b      	orrs	r3, r1
 8002eb6:	6013      	str	r3, [r2, #0]
		LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_0, LL_GPIO_MODE_OUTPUT);
		GPIOB->BRR = GPIO_PIN_0;
 8002eb8:	6291      	str	r1, [r2, #40]	; 0x28
 8002eba:	2190      	movs	r1, #144	; 0x90
 8002ebc:	05c9      	lsls	r1, r1, #23
 8002ebe:	680b      	ldr	r3, [r1, #0]
 8002ec0:	4a06      	ldr	r2, [pc, #24]	; (8002edc <phaseBPWM+0x50>)
 8002ec2:	401a      	ands	r2, r3
 8002ec4:	2380      	movs	r3, #128	; 0x80
 8002ec6:	031b      	lsls	r3, r3, #12
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	600b      	str	r3, [r1, #0]
		}else{
		LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_0, LL_GPIO_MODE_ALTERNATE); // low
		}
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_9, LL_GPIO_MODE_ALTERNATE);  // high

	}
 8002ecc:	4770      	bx	lr
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	20000034 	.word	0x20000034
 8002ed4:	48000400 	.word	0x48000400
 8002ed8:	200000d3 	.word	0x200000d3
 8002edc:	fff3ffff 	.word	0xfff3ffff

08002ee0 <phaseCPWM>:
#endif
#ifdef FD6288
void phaseCPWM() {
#endif

		if (!slow_decay || prop_brake_active){
 8002ee0:	4b13      	ldr	r3, [pc, #76]	; (8002f30 <phaseCPWM+0x50>)
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00d      	beq.n	8002f04 <phaseCPWM+0x24>
 8002ee8:	4b12      	ldr	r3, [pc, #72]	; (8002f34 <phaseCPWM+0x54>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d109      	bne.n	8002f04 <phaseCPWM+0x24>
 8002ef0:	2190      	movs	r1, #144	; 0x90
 8002ef2:	05c9      	lsls	r1, r1, #23
 8002ef4:	680b      	ldr	r3, [r1, #0]
 8002ef6:	4a10      	ldr	r2, [pc, #64]	; (8002f38 <phaseCPWM+0x58>)
 8002ef8:	401a      	ands	r2, r3
 8002efa:	2380      	movs	r3, #128	; 0x80
 8002efc:	021b      	lsls	r3, r3, #8
 8002efe:	4313      	orrs	r3, r2
 8002f00:	600b      	str	r3, [r1, #0]
 8002f02:	e00a      	b.n	8002f1a <phaseCPWM+0x3a>
 8002f04:	2390      	movs	r3, #144	; 0x90
 8002f06:	05db      	lsls	r3, r3, #23
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	490b      	ldr	r1, [pc, #44]	; (8002f38 <phaseCPWM+0x58>)
 8002f0c:	4011      	ands	r1, r2
 8002f0e:	2280      	movs	r2, #128	; 0x80
 8002f10:	01d2      	lsls	r2, r2, #7
 8002f12:	430a      	orrs	r2, r1
 8002f14:	601a      	str	r2, [r3, #0]
			LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_7, LL_GPIO_MODE_OUTPUT);
			GPIOA->BRR = GPIO_PIN_7;
 8002f16:	2280      	movs	r2, #128	; 0x80
 8002f18:	629a      	str	r2, [r3, #40]	; 0x28
 8002f1a:	2190      	movs	r1, #144	; 0x90
 8002f1c:	05c9      	lsls	r1, r1, #23
 8002f1e:	680b      	ldr	r3, [r1, #0]
 8002f20:	4a06      	ldr	r2, [pc, #24]	; (8002f3c <phaseCPWM+0x5c>)
 8002f22:	401a      	ands	r2, r3
 8002f24:	2380      	movs	r3, #128	; 0x80
 8002f26:	029b      	lsls	r3, r3, #10
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	600b      	str	r3, [r1, #0]
		}else{
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_7, LL_GPIO_MODE_ALTERNATE);
		}
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_8, LL_GPIO_MODE_ALTERNATE);

	}
 8002f2c:	4770      	bx	lr
 8002f2e:	46c0      	nop			; (mov r8, r8)
 8002f30:	20000034 	.word	0x20000034
 8002f34:	200000d3 	.word	0x200000d3
 8002f38:	ffff3fff 	.word	0xffff3fff
 8002f3c:	fffcffff 	.word	0xfffcffff

08002f40 <phaseAPWM>:
#endif
#ifdef FD6288
void phaseAPWM() {
#endif

		if (!slow_decay || prop_brake_active){
 8002f40:	4b10      	ldr	r3, [pc, #64]	; (8002f84 <phaseAPWM+0x44>)
 8002f42:	4a11      	ldr	r2, [pc, #68]	; (8002f88 <phaseAPWM+0x48>)
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00a      	beq.n	8002f60 <phaseAPWM+0x20>
 8002f4a:	4b10      	ldr	r3, [pc, #64]	; (8002f8c <phaseAPWM+0x4c>)
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d106      	bne.n	8002f60 <phaseAPWM+0x20>
 8002f52:	210c      	movs	r1, #12
 8002f54:	6813      	ldr	r3, [r2, #0]
 8002f56:	438b      	bics	r3, r1
 8002f58:	3904      	subs	r1, #4
 8002f5a:	430b      	orrs	r3, r1
 8002f5c:	6013      	str	r3, [r2, #0]
 8002f5e:	e007      	b.n	8002f70 <phaseAPWM+0x30>
 8002f60:	210c      	movs	r1, #12
 8002f62:	6813      	ldr	r3, [r2, #0]
 8002f64:	438b      	bics	r3, r1
 8002f66:	3908      	subs	r1, #8
 8002f68:	430b      	orrs	r3, r1
 8002f6a:	6013      	str	r3, [r2, #0]
			LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_1, LL_GPIO_MODE_OUTPUT);
			GPIOB->BRR = GPIO_PIN_1;
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	6293      	str	r3, [r2, #40]	; 0x28
 8002f70:	2190      	movs	r1, #144	; 0x90
 8002f72:	05c9      	lsls	r1, r1, #23
 8002f74:	680b      	ldr	r3, [r1, #0]
 8002f76:	4a06      	ldr	r2, [pc, #24]	; (8002f90 <phaseAPWM+0x50>)
 8002f78:	401a      	ands	r2, r3
 8002f7a:	2380      	movs	r3, #128	; 0x80
 8002f7c:	039b      	lsls	r3, r3, #14
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	600b      	str	r3, [r1, #0]
			}else{
		LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_1, LL_GPIO_MODE_ALTERNATE);
			}
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_10, LL_GPIO_MODE_ALTERNATE);

	}
 8002f82:	4770      	bx	lr
 8002f84:	20000034 	.word	0x20000034
 8002f88:	48000400 	.word	0x48000400
 8002f8c:	200000d3 	.word	0x200000d3
 8002f90:	ffcfffff 	.word	0xffcfffff

08002f94 <comStep>:
//		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_10, LL_GPIO_MODE_OUTPUT);
//		GPIOA->BRR = GPIO_PIN_10;
//	}
//
//}
void  comStep (int newStep){
 8002f94:	b510      	push	{r4, lr}
//TIM14->CNT = 0;
switch(newStep)
 8002f96:	2806      	cmp	r0, #6
 8002f98:	d842      	bhi.n	8003020 <comStep+0x8c>
 8002f9a:	4bb0      	ldr	r3, [pc, #704]	; (800325c <comStep+0x2c8>)
 8002f9c:	0080      	lsls	r0, r0, #2
 8002f9e:	581b      	ldr	r3, [r3, r0]
 8002fa0:	469f      	mov	pc, r3
		if (!slow_decay || prop_brake_active){
 8002fa2:	4baf      	ldr	r3, [pc, #700]	; (8003260 <comStep+0x2cc>)
 8002fa4:	4aaf      	ldr	r2, [pc, #700]	; (8003264 <comStep+0x2d0>)
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d100      	bne.n	8002fae <comStep+0x1a>
 8002fac:	e143      	b.n	8003236 <comStep+0x2a2>
 8002fae:	4bae      	ldr	r3, [pc, #696]	; (8003268 <comStep+0x2d4>)
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d000      	beq.n	8002fb8 <comStep+0x24>
 8002fb6:	e13e      	b.n	8003236 <comStep+0x2a2>
 8002fb8:	210c      	movs	r1, #12
 8002fba:	6813      	ldr	r3, [r2, #0]
 8002fbc:	438b      	bics	r3, r1
 8002fbe:	3904      	subs	r1, #4
 8002fc0:	430b      	orrs	r3, r1
 8002fc2:	6013      	str	r3, [r2, #0]
 8002fc4:	2390      	movs	r3, #144	; 0x90
 8002fc6:	05db      	lsls	r3, r3, #23
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	49a8      	ldr	r1, [pc, #672]	; (800326c <comStep+0x2d8>)
 8002fcc:	2003      	movs	r0, #3
 8002fce:	4011      	ands	r1, r2
 8002fd0:	2280      	movs	r2, #128	; 0x80
 8002fd2:	0392      	lsls	r2, r2, #14
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	49a3      	ldr	r1, [pc, #652]	; (8003264 <comStep+0x2d0>)
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	680a      	ldr	r2, [r1, #0]
 8002fdc:	4382      	bics	r2, r0
 8002fde:	3802      	subs	r0, #2
 8002fe0:	4302      	orrs	r2, r0
 8002fe2:	600a      	str	r2, [r1, #0]
		GPIOB->BRR = GPIO_PIN_0;
 8002fe4:	6288      	str	r0, [r1, #40]	; 0x28
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	49a1      	ldr	r1, [pc, #644]	; (8003270 <comStep+0x2dc>)
 8002fea:	4011      	ands	r1, r2
 8002fec:	2280      	movs	r2, #128	; 0x80
 8002fee:	02d2      	lsls	r2, r2, #11
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_9;
 8002ff4:	2280      	movs	r2, #128	; 0x80
 8002ff6:	0092      	lsls	r2, r2, #2
 8002ff8:	629a      	str	r2, [r3, #40]	; 0x28
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	499d      	ldr	r1, [pc, #628]	; (8003274 <comStep+0x2e0>)
 8002ffe:	4011      	ands	r1, r2
 8003000:	2280      	movs	r2, #128	; 0x80
 8003002:	01d2      	lsls	r2, r2, #7
 8003004:	430a      	orrs	r2, r1
 8003006:	601a      	str	r2, [r3, #0]
		GPIOA->BSRR = GPIO_PIN_7;
 8003008:	2280      	movs	r2, #128	; 0x80
 800300a:	619a      	str	r2, [r3, #24]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	499a      	ldr	r1, [pc, #616]	; (8003278 <comStep+0x2e4>)
 8003010:	4011      	ands	r1, r2
 8003012:	2280      	movs	r2, #128	; 0x80
 8003014:	0252      	lsls	r2, r2, #9
 8003016:	430a      	orrs	r2, r1
 8003018:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_8;
 800301a:	2280      	movs	r2, #128	; 0x80
 800301c:	0052      	lsls	r2, r2, #1
 800301e:	629a      	str	r2, [r3, #40]	; 0x28
        	break;
	}

//stop_time = TIM14->CNT;

}
 8003020:	bd10      	pop	{r4, pc}
		if (!slow_decay || prop_brake_active){
 8003022:	4b8f      	ldr	r3, [pc, #572]	; (8003260 <comStep+0x2cc>)
 8003024:	4a8f      	ldr	r2, [pc, #572]	; (8003264 <comStep+0x2d0>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d100      	bne.n	800302e <comStep+0x9a>
 800302c:	e0f1      	b.n	8003212 <comStep+0x27e>
 800302e:	4b8e      	ldr	r3, [pc, #568]	; (8003268 <comStep+0x2d4>)
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d000      	beq.n	8003038 <comStep+0xa4>
 8003036:	e0ec      	b.n	8003212 <comStep+0x27e>
 8003038:	210c      	movs	r1, #12
 800303a:	6813      	ldr	r3, [r2, #0]
 800303c:	438b      	bics	r3, r1
 800303e:	3904      	subs	r1, #4
 8003040:	430b      	orrs	r3, r1
 8003042:	6013      	str	r3, [r2, #0]
 8003044:	2390      	movs	r3, #144	; 0x90
 8003046:	05db      	lsls	r3, r3, #23
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	4988      	ldr	r1, [pc, #544]	; (800326c <comStep+0x2d8>)
 800304c:	2003      	movs	r0, #3
 800304e:	4011      	ands	r1, r2
 8003050:	2280      	movs	r2, #128	; 0x80
 8003052:	0392      	lsls	r2, r2, #14
 8003054:	430a      	orrs	r2, r1
 8003056:	4983      	ldr	r1, [pc, #524]	; (8003264 <comStep+0x2d0>)
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	680a      	ldr	r2, [r1, #0]
 800305c:	4382      	bics	r2, r0
 800305e:	3802      	subs	r0, #2
 8003060:	4302      	orrs	r2, r0
 8003062:	600a      	str	r2, [r1, #0]
		GPIOB->BSRR = GPIO_PIN_0;
 8003064:	6188      	str	r0, [r1, #24]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	4981      	ldr	r1, [pc, #516]	; (8003270 <comStep+0x2dc>)
 800306a:	4011      	ands	r1, r2
 800306c:	2280      	movs	r2, #128	; 0x80
 800306e:	02d2      	lsls	r2, r2, #11
 8003070:	430a      	orrs	r2, r1
 8003072:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_9;
 8003074:	2280      	movs	r2, #128	; 0x80
 8003076:	0092      	lsls	r2, r2, #2
 8003078:	629a      	str	r2, [r3, #40]	; 0x28
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	497d      	ldr	r1, [pc, #500]	; (8003274 <comStep+0x2e0>)
 800307e:	4011      	ands	r1, r2
 8003080:	2280      	movs	r2, #128	; 0x80
 8003082:	01d2      	lsls	r2, r2, #7
 8003084:	430a      	orrs	r2, r1
 8003086:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_7;
 8003088:	2280      	movs	r2, #128	; 0x80
 800308a:	629a      	str	r2, [r3, #40]	; 0x28
 800308c:	e7be      	b.n	800300c <comStep+0x78>
 800308e:	210c      	movs	r1, #12
 8003090:	4a74      	ldr	r2, [pc, #464]	; (8003264 <comStep+0x2d0>)
 8003092:	4876      	ldr	r0, [pc, #472]	; (800326c <comStep+0x2d8>)
 8003094:	6813      	ldr	r3, [r2, #0]
 8003096:	438b      	bics	r3, r1
 8003098:	3908      	subs	r1, #8
 800309a:	430b      	orrs	r3, r1
 800309c:	6013      	str	r3, [r2, #0]
		GPIOB->BRR = GPIO_PIN_1;
 800309e:	2302      	movs	r3, #2
 80030a0:	6293      	str	r3, [r2, #40]	; 0x28
 80030a2:	2390      	movs	r3, #144	; 0x90
 80030a4:	05db      	lsls	r3, r3, #23
 80030a6:	6819      	ldr	r1, [r3, #0]
 80030a8:	4008      	ands	r0, r1
 80030aa:	2180      	movs	r1, #128	; 0x80
 80030ac:	0349      	lsls	r1, r1, #13
 80030ae:	4301      	orrs	r1, r0
 80030b0:	6019      	str	r1, [r3, #0]
		GPIOA->BRR = GPIO_PIN_10;
 80030b2:	2180      	movs	r1, #128	; 0x80
 80030b4:	2003      	movs	r0, #3
 80030b6:	00c9      	lsls	r1, r1, #3
 80030b8:	6299      	str	r1, [r3, #40]	; 0x28
 80030ba:	6811      	ldr	r1, [r2, #0]
 80030bc:	4381      	bics	r1, r0
 80030be:	3802      	subs	r0, #2
 80030c0:	4301      	orrs	r1, r0
 80030c2:	6011      	str	r1, [r2, #0]
		GPIOB->BSRR = GPIO_PIN_0;
 80030c4:	6190      	str	r0, [r2, #24]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	4969      	ldr	r1, [pc, #420]	; (8003270 <comStep+0x2dc>)
 80030ca:	4011      	ands	r1, r2
 80030cc:	2280      	movs	r2, #128	; 0x80
 80030ce:	02d2      	lsls	r2, r2, #11
 80030d0:	430a      	orrs	r2, r1
 80030d2:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_9;
 80030d4:	2280      	movs	r2, #128	; 0x80
 80030d6:	0092      	lsls	r2, r2, #2
 80030d8:	629a      	str	r2, [r3, #40]	; 0x28
		if (!slow_decay || prop_brake_active){
 80030da:	4a61      	ldr	r2, [pc, #388]	; (8003260 <comStep+0x2cc>)
 80030dc:	7812      	ldrb	r2, [r2, #0]
 80030de:	2a00      	cmp	r2, #0
 80030e0:	d100      	bne.n	80030e4 <comStep+0x150>
 80030e2:	e08a      	b.n	80031fa <comStep+0x266>
 80030e4:	4a60      	ldr	r2, [pc, #384]	; (8003268 <comStep+0x2d4>)
 80030e6:	7812      	ldrb	r2, [r2, #0]
 80030e8:	2a00      	cmp	r2, #0
 80030ea:	d000      	beq.n	80030ee <comStep+0x15a>
 80030ec:	e085      	b.n	80031fa <comStep+0x266>
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	4960      	ldr	r1, [pc, #384]	; (8003274 <comStep+0x2e0>)
 80030f2:	4011      	ands	r1, r2
 80030f4:	2280      	movs	r2, #128	; 0x80
 80030f6:	0212      	lsls	r2, r2, #8
 80030f8:	430a      	orrs	r2, r1
 80030fa:	601a      	str	r2, [r3, #0]
 80030fc:	2190      	movs	r1, #144	; 0x90
 80030fe:	05c9      	lsls	r1, r1, #23
 8003100:	680b      	ldr	r3, [r1, #0]
 8003102:	4a5d      	ldr	r2, [pc, #372]	; (8003278 <comStep+0x2e4>)
 8003104:	401a      	ands	r2, r3
 8003106:	2380      	movs	r3, #128	; 0x80
 8003108:	029b      	lsls	r3, r3, #10
 800310a:	4313      	orrs	r3, r2
 800310c:	600b      	str	r3, [r1, #0]
 800310e:	e787      	b.n	8003020 <comStep+0x8c>
 8003110:	210c      	movs	r1, #12
 8003112:	4a54      	ldr	r2, [pc, #336]	; (8003264 <comStep+0x2d0>)
		GPIOB->BSRR = GPIO_PIN_1;
 8003114:	2402      	movs	r4, #2
 8003116:	6813      	ldr	r3, [r2, #0]
 8003118:	4854      	ldr	r0, [pc, #336]	; (800326c <comStep+0x2d8>)
 800311a:	438b      	bics	r3, r1
 800311c:	3908      	subs	r1, #8
 800311e:	430b      	orrs	r3, r1
 8003120:	6013      	str	r3, [r2, #0]
 8003122:	2390      	movs	r3, #144	; 0x90
 8003124:	6194      	str	r4, [r2, #24]
 8003126:	05db      	lsls	r3, r3, #23
 8003128:	6819      	ldr	r1, [r3, #0]
 800312a:	4008      	ands	r0, r1
 800312c:	2180      	movs	r1, #128	; 0x80
 800312e:	0349      	lsls	r1, r1, #13
 8003130:	4301      	orrs	r1, r0
 8003132:	6019      	str	r1, [r3, #0]
		GPIOA->BRR = GPIO_PIN_10;
 8003134:	2180      	movs	r1, #128	; 0x80
 8003136:	00c9      	lsls	r1, r1, #3
 8003138:	6299      	str	r1, [r3, #40]	; 0x28
		if(!slow_decay  || prop_brake_active){            // for future
 800313a:	4b49      	ldr	r3, [pc, #292]	; (8003260 <comStep+0x2cc>)
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d070      	beq.n	8003224 <comStep+0x290>
 8003142:	4b49      	ldr	r3, [pc, #292]	; (8003268 <comStep+0x2d4>)
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d16c      	bne.n	8003224 <comStep+0x290>
 800314a:	2103      	movs	r1, #3
 800314c:	6813      	ldr	r3, [r2, #0]
 800314e:	438b      	bics	r3, r1
 8003150:	431c      	orrs	r4, r3
 8003152:	6014      	str	r4, [r2, #0]
 8003154:	2390      	movs	r3, #144	; 0x90
 8003156:	05db      	lsls	r3, r3, #23
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	4945      	ldr	r1, [pc, #276]	; (8003270 <comStep+0x2dc>)
 800315c:	4011      	ands	r1, r2
 800315e:	2280      	movs	r2, #128	; 0x80
 8003160:	0312      	lsls	r2, r2, #12
 8003162:	430a      	orrs	r2, r1
 8003164:	601a      	str	r2, [r3, #0]
 8003166:	e788      	b.n	800307a <comStep+0xe6>
 8003168:	210c      	movs	r1, #12
 800316a:	4a3e      	ldr	r2, [pc, #248]	; (8003264 <comStep+0x2d0>)
 800316c:	483f      	ldr	r0, [pc, #252]	; (800326c <comStep+0x2d8>)
 800316e:	6813      	ldr	r3, [r2, #0]
 8003170:	438b      	bics	r3, r1
 8003172:	3908      	subs	r1, #8
 8003174:	430b      	orrs	r3, r1
 8003176:	6013      	str	r3, [r2, #0]
		GPIOB->BSRR = GPIO_PIN_1;
 8003178:	2302      	movs	r3, #2
 800317a:	6193      	str	r3, [r2, #24]
 800317c:	2390      	movs	r3, #144	; 0x90
 800317e:	05db      	lsls	r3, r3, #23
 8003180:	6819      	ldr	r1, [r3, #0]
 8003182:	4008      	ands	r0, r1
 8003184:	2180      	movs	r1, #128	; 0x80
 8003186:	0349      	lsls	r1, r1, #13
 8003188:	4301      	orrs	r1, r0
 800318a:	6019      	str	r1, [r3, #0]
		GPIOA->BRR = GPIO_PIN_10;
 800318c:	2180      	movs	r1, #128	; 0x80
 800318e:	2003      	movs	r0, #3
 8003190:	00c9      	lsls	r1, r1, #3
 8003192:	6299      	str	r1, [r3, #40]	; 0x28
 8003194:	6811      	ldr	r1, [r2, #0]
 8003196:	4381      	bics	r1, r0
 8003198:	3802      	subs	r0, #2
 800319a:	4301      	orrs	r1, r0
 800319c:	6011      	str	r1, [r2, #0]
		GPIOB->BRR = GPIO_PIN_0;
 800319e:	6290      	str	r0, [r2, #40]	; 0x28
 80031a0:	e791      	b.n	80030c6 <comStep+0x132>
 80031a2:	210c      	movs	r1, #12
 80031a4:	4a2f      	ldr	r2, [pc, #188]	; (8003264 <comStep+0x2d0>)
		GPIOB->BRR = GPIO_PIN_1;
 80031a6:	2402      	movs	r4, #2
 80031a8:	6813      	ldr	r3, [r2, #0]
 80031aa:	4830      	ldr	r0, [pc, #192]	; (800326c <comStep+0x2d8>)
 80031ac:	438b      	bics	r3, r1
 80031ae:	3908      	subs	r1, #8
 80031b0:	430b      	orrs	r3, r1
 80031b2:	6013      	str	r3, [r2, #0]
 80031b4:	2390      	movs	r3, #144	; 0x90
 80031b6:	6294      	str	r4, [r2, #40]	; 0x28
 80031b8:	05db      	lsls	r3, r3, #23
 80031ba:	6819      	ldr	r1, [r3, #0]
 80031bc:	4008      	ands	r0, r1
 80031be:	2180      	movs	r1, #128	; 0x80
 80031c0:	0349      	lsls	r1, r1, #13
 80031c2:	4301      	orrs	r1, r0
 80031c4:	6019      	str	r1, [r3, #0]
		GPIOA->BRR = GPIO_PIN_10;
 80031c6:	2180      	movs	r1, #128	; 0x80
 80031c8:	00c9      	lsls	r1, r1, #3
 80031ca:	6299      	str	r1, [r3, #40]	; 0x28
		if(!slow_decay  || prop_brake_active){            // for future
 80031cc:	4b24      	ldr	r3, [pc, #144]	; (8003260 <comStep+0x2cc>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d039      	beq.n	8003248 <comStep+0x2b4>
 80031d4:	4b24      	ldr	r3, [pc, #144]	; (8003268 <comStep+0x2d4>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d135      	bne.n	8003248 <comStep+0x2b4>
 80031dc:	2103      	movs	r1, #3
 80031de:	6813      	ldr	r3, [r2, #0]
 80031e0:	438b      	bics	r3, r1
 80031e2:	431c      	orrs	r4, r3
 80031e4:	6014      	str	r4, [r2, #0]
 80031e6:	2390      	movs	r3, #144	; 0x90
 80031e8:	05db      	lsls	r3, r3, #23
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	4920      	ldr	r1, [pc, #128]	; (8003270 <comStep+0x2dc>)
 80031ee:	4011      	ands	r1, r2
 80031f0:	2280      	movs	r2, #128	; 0x80
 80031f2:	0312      	lsls	r2, r2, #12
 80031f4:	430a      	orrs	r2, r1
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	e6ff      	b.n	8002ffa <comStep+0x66>
 80031fa:	2390      	movs	r3, #144	; 0x90
 80031fc:	05db      	lsls	r3, r3, #23
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	491c      	ldr	r1, [pc, #112]	; (8003274 <comStep+0x2e0>)
 8003202:	4011      	ands	r1, r2
 8003204:	2280      	movs	r2, #128	; 0x80
 8003206:	01d2      	lsls	r2, r2, #7
 8003208:	430a      	orrs	r2, r1
 800320a:	601a      	str	r2, [r3, #0]
			GPIOA->BRR = GPIO_PIN_7;
 800320c:	2280      	movs	r2, #128	; 0x80
 800320e:	629a      	str	r2, [r3, #40]	; 0x28
 8003210:	e774      	b.n	80030fc <comStep+0x168>
 8003212:	210c      	movs	r1, #12
 8003214:	6813      	ldr	r3, [r2, #0]
 8003216:	438b      	bics	r3, r1
 8003218:	3908      	subs	r1, #8
 800321a:	430b      	orrs	r3, r1
 800321c:	6013      	str	r3, [r2, #0]
			GPIOB->BRR = GPIO_PIN_1;
 800321e:	2302      	movs	r3, #2
 8003220:	6293      	str	r3, [r2, #40]	; 0x28
 8003222:	e70f      	b.n	8003044 <comStep+0xb0>
 8003224:	2103      	movs	r1, #3
 8003226:	4a0f      	ldr	r2, [pc, #60]	; (8003264 <comStep+0x2d0>)
 8003228:	6813      	ldr	r3, [r2, #0]
 800322a:	438b      	bics	r3, r1
 800322c:	3902      	subs	r1, #2
 800322e:	430b      	orrs	r3, r1
 8003230:	6013      	str	r3, [r2, #0]
		GPIOB->BRR = GPIO_PIN_0;
 8003232:	6291      	str	r1, [r2, #40]	; 0x28
 8003234:	e78e      	b.n	8003154 <comStep+0x1c0>
 8003236:	210c      	movs	r1, #12
 8003238:	6813      	ldr	r3, [r2, #0]
 800323a:	438b      	bics	r3, r1
 800323c:	3908      	subs	r1, #8
 800323e:	430b      	orrs	r3, r1
 8003240:	6013      	str	r3, [r2, #0]
			GPIOB->BRR = GPIO_PIN_1;
 8003242:	2302      	movs	r3, #2
 8003244:	6293      	str	r3, [r2, #40]	; 0x28
 8003246:	e6bd      	b.n	8002fc4 <comStep+0x30>
 8003248:	2103      	movs	r1, #3
 800324a:	4a06      	ldr	r2, [pc, #24]	; (8003264 <comStep+0x2d0>)
 800324c:	6813      	ldr	r3, [r2, #0]
 800324e:	438b      	bics	r3, r1
 8003250:	3902      	subs	r1, #2
 8003252:	430b      	orrs	r3, r1
 8003254:	6013      	str	r3, [r2, #0]
		GPIOB->BRR = GPIO_PIN_0;
 8003256:	6291      	str	r1, [r2, #40]	; 0x28
 8003258:	e7c5      	b.n	80031e6 <comStep+0x252>
 800325a:	46c0      	nop			; (mov r8, r8)
 800325c:	08004fd4 	.word	0x08004fd4
 8003260:	20000034 	.word	0x20000034
 8003264:	48000400 	.word	0x48000400
 8003268:	200000d3 	.word	0x200000d3
 800326c:	ffcfffff 	.word	0xffcfffff
 8003270:	fff3ffff 	.word	0xfff3ffff
 8003274:	ffff3fff 	.word	0xffff3fff
 8003278:	fffcffff 	.word	0xfffcffff

0800327c <allOff>:
 800327c:	210c      	movs	r1, #12
 800327e:	4a1c      	ldr	r2, [pc, #112]	; (80032f0 <allOff+0x74>)
 8003280:	481c      	ldr	r0, [pc, #112]	; (80032f4 <allOff+0x78>)
 8003282:	6813      	ldr	r3, [r2, #0]
 8003284:	438b      	bics	r3, r1
 8003286:	3908      	subs	r1, #8
 8003288:	430b      	orrs	r3, r1
 800328a:	6013      	str	r3, [r2, #0]
		GPIOB->BRR = GPIO_PIN_1;
 800328c:	2302      	movs	r3, #2
 800328e:	6293      	str	r3, [r2, #40]	; 0x28
 8003290:	2390      	movs	r3, #144	; 0x90
 8003292:	05db      	lsls	r3, r3, #23
 8003294:	6819      	ldr	r1, [r3, #0]
 8003296:	4008      	ands	r0, r1
 8003298:	2180      	movs	r1, #128	; 0x80
 800329a:	0349      	lsls	r1, r1, #13
 800329c:	4301      	orrs	r1, r0
 800329e:	6019      	str	r1, [r3, #0]
		GPIOA->BRR = GPIO_PIN_10;
 80032a0:	2180      	movs	r1, #128	; 0x80
 80032a2:	2003      	movs	r0, #3
 80032a4:	00c9      	lsls	r1, r1, #3
 80032a6:	6299      	str	r1, [r3, #40]	; 0x28
 80032a8:	6811      	ldr	r1, [r2, #0]
 80032aa:	4381      	bics	r1, r0
 80032ac:	3802      	subs	r0, #2
 80032ae:	4301      	orrs	r1, r0
 80032b0:	6011      	str	r1, [r2, #0]
		GPIOB->BRR = GPIO_PIN_0;
 80032b2:	6290      	str	r0, [r2, #40]	; 0x28
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	4910      	ldr	r1, [pc, #64]	; (80032f8 <allOff+0x7c>)
 80032b8:	4011      	ands	r1, r2
 80032ba:	2280      	movs	r2, #128	; 0x80
 80032bc:	02d2      	lsls	r2, r2, #11
 80032be:	430a      	orrs	r2, r1
 80032c0:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_9;
 80032c2:	2280      	movs	r2, #128	; 0x80
 80032c4:	0092      	lsls	r2, r2, #2
 80032c6:	629a      	str	r2, [r3, #40]	; 0x28
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	490c      	ldr	r1, [pc, #48]	; (80032fc <allOff+0x80>)
 80032cc:	4011      	ands	r1, r2
 80032ce:	2280      	movs	r2, #128	; 0x80
 80032d0:	01d2      	lsls	r2, r2, #7
 80032d2:	430a      	orrs	r2, r1
 80032d4:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_7;
 80032d6:	2280      	movs	r2, #128	; 0x80
 80032d8:	629a      	str	r2, [r3, #40]	; 0x28
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	4908      	ldr	r1, [pc, #32]	; (8003300 <allOff+0x84>)
 80032de:	4011      	ands	r1, r2
 80032e0:	2280      	movs	r2, #128	; 0x80
 80032e2:	0252      	lsls	r2, r2, #9
 80032e4:	430a      	orrs	r2, r1
 80032e6:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_8;
 80032e8:	2280      	movs	r2, #128	; 0x80
 80032ea:	0052      	lsls	r2, r2, #1
 80032ec:	629a      	str	r2, [r3, #40]	; 0x28

void allOff() {                   // coast
	phaseAFLOAT();
	phaseBFLOAT();
	phaseCFLOAT();
}
 80032ee:	4770      	bx	lr
 80032f0:	48000400 	.word	0x48000400
 80032f4:	ffcfffff 	.word	0xffcfffff
 80032f8:	fff3ffff 	.word	0xfff3ffff
 80032fc:	ffff3fff 	.word	0xffff3fff
 8003300:	fffcffff 	.word	0xfffcffff

08003304 <fullBrake>:
 8003304:	210c      	movs	r1, #12
 8003306:	4a1c      	ldr	r2, [pc, #112]	; (8003378 <fullBrake+0x74>)
 8003308:	481c      	ldr	r0, [pc, #112]	; (800337c <fullBrake+0x78>)
 800330a:	6813      	ldr	r3, [r2, #0]
 800330c:	438b      	bics	r3, r1
 800330e:	3908      	subs	r1, #8
 8003310:	430b      	orrs	r3, r1
 8003312:	6013      	str	r3, [r2, #0]
		GPIOB->BSRR = GPIO_PIN_1;
 8003314:	2302      	movs	r3, #2
 8003316:	6193      	str	r3, [r2, #24]
 8003318:	2390      	movs	r3, #144	; 0x90
 800331a:	05db      	lsls	r3, r3, #23
 800331c:	6819      	ldr	r1, [r3, #0]
 800331e:	4008      	ands	r0, r1
 8003320:	2180      	movs	r1, #128	; 0x80
 8003322:	0349      	lsls	r1, r1, #13
 8003324:	4301      	orrs	r1, r0
 8003326:	6019      	str	r1, [r3, #0]
		GPIOA->BRR = GPIO_PIN_10;
 8003328:	2180      	movs	r1, #128	; 0x80
 800332a:	2003      	movs	r0, #3
 800332c:	00c9      	lsls	r1, r1, #3
 800332e:	6299      	str	r1, [r3, #40]	; 0x28
 8003330:	6811      	ldr	r1, [r2, #0]
 8003332:	4381      	bics	r1, r0
 8003334:	3802      	subs	r0, #2
 8003336:	4301      	orrs	r1, r0
 8003338:	6011      	str	r1, [r2, #0]
		GPIOB->BSRR = GPIO_PIN_0;
 800333a:	6190      	str	r0, [r2, #24]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	4910      	ldr	r1, [pc, #64]	; (8003380 <fullBrake+0x7c>)
 8003340:	4011      	ands	r1, r2
 8003342:	2280      	movs	r2, #128	; 0x80
 8003344:	02d2      	lsls	r2, r2, #11
 8003346:	430a      	orrs	r2, r1
 8003348:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_9;
 800334a:	2280      	movs	r2, #128	; 0x80
 800334c:	0092      	lsls	r2, r2, #2
 800334e:	629a      	str	r2, [r3, #40]	; 0x28
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	490c      	ldr	r1, [pc, #48]	; (8003384 <fullBrake+0x80>)
 8003354:	4011      	ands	r1, r2
 8003356:	2280      	movs	r2, #128	; 0x80
 8003358:	01d2      	lsls	r2, r2, #7
 800335a:	430a      	orrs	r2, r1
 800335c:	601a      	str	r2, [r3, #0]
		GPIOA->BSRR = GPIO_PIN_7;
 800335e:	2280      	movs	r2, #128	; 0x80
 8003360:	619a      	str	r2, [r3, #24]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	4908      	ldr	r1, [pc, #32]	; (8003388 <fullBrake+0x84>)
 8003366:	4011      	ands	r1, r2
 8003368:	2280      	movs	r2, #128	; 0x80
 800336a:	0252      	lsls	r2, r2, #9
 800336c:	430a      	orrs	r2, r1
 800336e:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_8;
 8003370:	2280      	movs	r2, #128	; 0x80
 8003372:	0052      	lsls	r2, r2, #1
 8003374:	629a      	str	r2, [r3, #40]	; 0x28

void fullBrake(){                     // full braking shorting all low sides
	phaseALOW();
	phaseBLOW();
	phaseCLOW();
}
 8003376:	4770      	bx	lr
 8003378:	48000400 	.word	0x48000400
 800337c:	ffcfffff 	.word	0xffcfffff
 8003380:	fff3ffff 	.word	0xfff3ffff
 8003384:	ffff3fff 	.word	0xffff3fff
 8003388:	fffcffff 	.word	0xfffcffff

0800338c <commutate>:
}


void commutate() {
//	TIM2->CNT = 0;
	if (forward == 1){
 800338c:	4b42      	ldr	r3, [pc, #264]	; (8003498 <commutate+0x10c>)
void commutate() {
 800338e:	b570      	push	{r4, r5, r6, lr}
	if (forward == 1){
 8003390:	681b      	ldr	r3, [r3, #0]
		step++;
 8003392:	4c42      	ldr	r4, [pc, #264]	; (800349c <commutate+0x110>)
	if (forward == 1){
 8003394:	2b01      	cmp	r3, #1
 8003396:	d052      	beq.n	800343e <commutate+0xb2>
		}
		if (step == 2 || step == 4 || step == 6) {
			rising = 0;
		}
	}
	if (forward == 0){
 8003398:	2b00      	cmp	r3, #0
 800339a:	d167      	bne.n	800346c <commutate+0xe0>
		step--;
 800339c:	6823      	ldr	r3, [r4, #0]
 800339e:	1e58      	subs	r0, r3, #1
 80033a0:	6020      	str	r0, [r4, #0]
		if (step < 1) {
 80033a2:	2800      	cmp	r0, #0
 80033a4:	dd44      	ble.n	8003430 <commutate+0xa4>
			step = 6;
		}
		if (step == 1 || step == 3 || step == 5) {
 80033a6:	2302      	movs	r3, #2
 80033a8:	0002      	movs	r2, r0
 80033aa:	439a      	bics	r2, r3
 80033ac:	2a01      	cmp	r2, #1
 80033ae:	d001      	beq.n	80033b4 <commutate+0x28>
 80033b0:	2805      	cmp	r0, #5
 80033b2:	d168      	bne.n	8003486 <commutate+0xfa>
			rising = 0;
 80033b4:	2300      	movs	r3, #0
 80033b6:	0002      	movs	r2, r0
 80033b8:	4d39      	ldr	r5, [pc, #228]	; (80034a0 <commutate+0x114>)
 80033ba:	602b      	str	r3, [r5, #0]
 80033bc:	3304      	adds	r3, #4
 80033be:	439a      	bics	r2, r3
 80033c0:	0013      	movs	r3, r2
		}
		if (step == 2 || step == 4 || step == 6) {
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d038      	beq.n	8003438 <commutate+0xac>
 80033c6:	2804      	cmp	r0, #4
 80033c8:	d036      	beq.n	8003438 <commutate+0xac>
			rising = 1;
		}
	}

	//TIM2->CNT = 0;
	if (input > 47){
 80033ca:	4b36      	ldr	r3, [pc, #216]	; (80034a4 <commutate+0x118>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2b2f      	cmp	r3, #47	; 0x2f
 80033d0:	dd02      	ble.n	80033d8 <commutate+0x4c>
comStep(step);
 80033d2:	f7ff fddf 	bl	8002f94 <comStep>
 80033d6:	6820      	ldr	r0, [r4, #0]
	if (step == 1 || step == 4) {   // c floating
 80033d8:	2801      	cmp	r0, #1
 80033da:	d012      	beq.n	8003402 <commutate+0x76>
 80033dc:	2804      	cmp	r0, #4
 80033de:	d010      	beq.n	8003402 <commutate+0x76>
	if (step == 2 || step == 5) {     // a floating
 80033e0:	2802      	cmp	r0, #2
 80033e2:	d013      	beq.n	800340c <commutate+0x80>
 80033e4:	2805      	cmp	r0, #5
 80033e6:	d011      	beq.n	800340c <commutate+0x80>
	if (step == 3 || step == 6) {      // b floating
 80033e8:	2803      	cmp	r0, #3
 80033ea:	d014      	beq.n	8003416 <commutate+0x8a>
 80033ec:	2806      	cmp	r0, #6
 80033ee:	d012      	beq.n	8003416 <commutate+0x8a>
	if (rising){
 80033f0:	682b      	ldr	r3, [r5, #0]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d115      	bne.n	8003422 <commutate+0x96>
	EXTI->FTSR = 0x0;
 80033f6:	4a2c      	ldr	r2, [pc, #176]	; (80034a8 <commutate+0x11c>)
 80033f8:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR = 0x200000;
 80033fa:	2380      	movs	r3, #128	; 0x80
 80033fc:	039b      	lsls	r3, r3, #14
 80033fe:	6093      	str	r3, [r2, #8]
//	falseAlarm = 0;
//	compCount = 0;
//	upcompCount = 0;

	//stop_time = TIM2->CNT;
}
 8003400:	bd70      	pop	{r4, r5, r6, pc}
		COMP->CSR = 0b1100001;
 8003402:	2261      	movs	r2, #97	; 0x61
 8003404:	4b29      	ldr	r3, [pc, #164]	; (80034ac <commutate+0x120>)
 8003406:	601a      	str	r2, [r3, #0]
	if (step == 2 || step == 5) {     // a floating
 8003408:	2802      	cmp	r0, #2
 800340a:	d1eb      	bne.n	80033e4 <commutate+0x58>
		COMP->CSR = 0b1010001;
 800340c:	2251      	movs	r2, #81	; 0x51
 800340e:	4b27      	ldr	r3, [pc, #156]	; (80034ac <commutate+0x120>)
 8003410:	601a      	str	r2, [r3, #0]
	if (step == 3 || step == 6) {      // b floating
 8003412:	2803      	cmp	r0, #3
 8003414:	d1ea      	bne.n	80033ec <commutate+0x60>
		COMP->CSR = 0b1000001;
 8003416:	2241      	movs	r2, #65	; 0x41
 8003418:	4b24      	ldr	r3, [pc, #144]	; (80034ac <commutate+0x120>)
 800341a:	601a      	str	r2, [r3, #0]
	if (rising){
 800341c:	682b      	ldr	r3, [r5, #0]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0e9      	beq.n	80033f6 <commutate+0x6a>
		EXTI->RTSR = 0x0;
 8003422:	2200      	movs	r2, #0
 8003424:	4b20      	ldr	r3, [pc, #128]	; (80034a8 <commutate+0x11c>)
 8003426:	609a      	str	r2, [r3, #8]
	EXTI->FTSR = 0x200000;
 8003428:	2280      	movs	r2, #128	; 0x80
 800342a:	0392      	lsls	r2, r2, #14
 800342c:	60da      	str	r2, [r3, #12]
 800342e:	e7e7      	b.n	8003400 <commutate+0x74>
			step = 6;
 8003430:	2306      	movs	r3, #6
		if (step == 1 || step == 3 || step == 5) {
 8003432:	2006      	movs	r0, #6
 8003434:	4d1a      	ldr	r5, [pc, #104]	; (80034a0 <commutate+0x114>)
			step = 6;
 8003436:	6023      	str	r3, [r4, #0]
			rising = 1;
 8003438:	2301      	movs	r3, #1
 800343a:	602b      	str	r3, [r5, #0]
 800343c:	e7c5      	b.n	80033ca <commutate+0x3e>
		step++;
 800343e:	6822      	ldr	r2, [r4, #0]
 8003440:	3201      	adds	r2, #1
 8003442:	6022      	str	r2, [r4, #0]
		if (step > 6) {
 8003444:	2a06      	cmp	r2, #6
 8003446:	dc14      	bgt.n	8003472 <commutate+0xe6>
		if (step == 1 || step == 3 || step == 5) {
 8003448:	2102      	movs	r1, #2
 800344a:	0010      	movs	r0, r2
 800344c:	4388      	bics	r0, r1
 800344e:	2801      	cmp	r0, #1
 8003450:	d01f      	beq.n	8003492 <commutate+0x106>
 8003452:	2a05      	cmp	r2, #5
 8003454:	d00f      	beq.n	8003476 <commutate+0xea>
 8003456:	2304      	movs	r3, #4
 8003458:	0011      	movs	r1, r2
 800345a:	4399      	bics	r1, r3
 800345c:	000b      	movs	r3, r1
 800345e:	4d10      	ldr	r5, [pc, #64]	; (80034a0 <commutate+0x114>)
		if (step == 2 || step == 4 || step == 6) {
 8003460:	2b02      	cmp	r3, #2
 8003462:	d00c      	beq.n	800347e <commutate+0xf2>
 8003464:	2a04      	cmp	r2, #4
 8003466:	d00a      	beq.n	800347e <commutate+0xf2>
 8003468:	6820      	ldr	r0, [r4, #0]
 800346a:	e7ae      	b.n	80033ca <commutate+0x3e>
 800346c:	6820      	ldr	r0, [r4, #0]
 800346e:	4d0c      	ldr	r5, [pc, #48]	; (80034a0 <commutate+0x114>)
 8003470:	e7ab      	b.n	80033ca <commutate+0x3e>
		if (step == 1 || step == 3 || step == 5) {
 8003472:	2201      	movs	r2, #1
			step = 1;
 8003474:	6023      	str	r3, [r4, #0]
			rising = 1;                                // is back emf rising or falling
 8003476:	2101      	movs	r1, #1
 8003478:	4d09      	ldr	r5, [pc, #36]	; (80034a0 <commutate+0x114>)
 800347a:	6029      	str	r1, [r5, #0]
 800347c:	e7f0      	b.n	8003460 <commutate+0xd4>
			rising = 0;
 800347e:	2300      	movs	r3, #0
 8003480:	6820      	ldr	r0, [r4, #0]
 8003482:	602b      	str	r3, [r5, #0]
 8003484:	e7a1      	b.n	80033ca <commutate+0x3e>
 8003486:	2304      	movs	r3, #4
 8003488:	0002      	movs	r2, r0
 800348a:	439a      	bics	r2, r3
 800348c:	0013      	movs	r3, r2
 800348e:	4d04      	ldr	r5, [pc, #16]	; (80034a0 <commutate+0x114>)
 8003490:	e797      	b.n	80033c2 <commutate+0x36>
		if (step == 1 || step == 3 || step == 5) {
 8003492:	0013      	movs	r3, r2
 8003494:	e7ef      	b.n	8003476 <commutate+0xea>
 8003496:	46c0      	nop			; (mov r8, r8)
 8003498:	2000001c 	.word	0x2000001c
 800349c:	20000040 	.word	0x20000040
 80034a0:	2000002c 	.word	0x2000002c
 80034a4:	200000c4 	.word	0x200000c4
 80034a8:	40010400 	.word	0x40010400
 80034ac:	4001001c 	.word	0x4001001c

080034b0 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){

			if (htim->Instance==TIM16)
 80034b0:	4b0f      	ldr	r3, [pc, #60]	; (80034f0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80034b2:	6802      	ldr	r2, [r0, #0]
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80034b4:	b570      	push	{r4, r5, r6, lr}
			if (htim->Instance==TIM16)
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d000      	beq.n	80034bc <HAL_TIM_PeriodElapsedCallback+0xc>


			 }

		}
}
 80034ba:	bd70      	pop	{r4, r5, r6, pc}
			if(inputSet == 1){
 80034bc:	4b0d      	ldr	r3, [pc, #52]	; (80034f4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d1fa      	bne.n	80034ba <HAL_TIM_PeriodElapsedCallback+0xa>
				 if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2)){
 80034c4:	2090      	movs	r0, #144	; 0x90
 80034c6:	2104      	movs	r1, #4
 80034c8:	05c0      	lsls	r0, r0, #23
 80034ca:	f7fd fe01 	bl	80010d0 <HAL_GPIO_ReadPin>
 80034ce:	1e04      	subs	r4, r0, #0
 80034d0:	d1f3      	bne.n	80034ba <HAL_TIM_PeriodElapsedCallback+0xa>
		     HAL_TIM_IC_Stop_DMA(&htim15,TIM_CHANNEL_1);
 80034d2:	4d09      	ldr	r5, [pc, #36]	; (80034f8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80034d4:	2100      	movs	r1, #0
 80034d6:	0028      	movs	r0, r5
 80034d8:	f7fe fbc4 	bl	8001c64 <HAL_TIM_IC_Stop_DMA>
			 TIM15->CNT = 0;
 80034dc:	4b07      	ldr	r3, [pc, #28]	; (80034fc <HAL_TIM_PeriodElapsedCallback+0x4c>)
				 HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , IC_buffer_size);
 80034de:	4a08      	ldr	r2, [pc, #32]	; (8003500 <HAL_TIM_PeriodElapsedCallback+0x50>)
			 TIM15->CNT = 0;
 80034e0:	625c      	str	r4, [r3, #36]	; 0x24
				 HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , IC_buffer_size);
 80034e2:	4b08      	ldr	r3, [pc, #32]	; (8003504 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80034e4:	2100      	movs	r1, #0
 80034e6:	881b      	ldrh	r3, [r3, #0]
 80034e8:	0028      	movs	r0, r5
 80034ea:	f7fe fb47 	bl	8001b7c <HAL_TIM_IC_Start_DMA>
}
 80034ee:	e7e4      	b.n	80034ba <HAL_TIM_PeriodElapsedCallback+0xa>
 80034f0:	40014400 	.word	0x40014400
 80034f4:	200000c8 	.word	0x200000c8
 80034f8:	20000158 	.word	0x20000158
 80034fc:	40014000 	.word	0x40014000
 8003500:	2000022c 	.word	0x2000022c
 8003504:	20000000 	.word	0x20000000

08003508 <startMotor>:

void startMotor() {
 8003508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800350a:	4647      	mov	r7, r8
 800350c:	46ce      	mov	lr, r9

 startcount++;
 800350e:	4a64      	ldr	r2, [pc, #400]	; (80036a0 <startMotor+0x198>)
void startMotor() {
 8003510:	b580      	push	{r7, lr}
 startcount++;
 8003512:	6813      	ldr	r3, [r2, #0]

    char decaystate = slow_decay;
    sensorless = 0;
 8003514:	4d63      	ldr	r5, [pc, #396]	; (80036a4 <startMotor+0x19c>)
 startcount++;
 8003516:	3301      	adds	r3, #1
 8003518:	6013      	str	r3, [r2, #0]
    sensorless = 0;
 800351a:	2300      	movs	r3, #0
	if (running == 0){
 800351c:	4e62      	ldr	r6, [pc, #392]	; (80036a8 <startMotor+0x1a0>)
    char decaystate = slow_decay;
 800351e:	4c63      	ldr	r4, [pc, #396]	; (80036ac <startMotor+0x1a4>)
    sensorless = 0;
 8003520:	602b      	str	r3, [r5, #0]
	if (running == 0){
 8003522:	6833      	ldr	r3, [r6, #0]
    char decaystate = slow_decay;
 8003524:	7827      	ldrb	r7, [r4, #0]
	if (running == 0){
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00b      	beq.n	8003542 <startMotor+0x3a>
//		}
	EXTI->IMR |= (1 << 21);
	}

	slow_decay = decaystate;    // return to normal
	sensorless = 1;
 800352a:	2301      	movs	r3, #1
 800352c:	602b      	str	r3, [r5, #0]
	startupcountdown =0;
 800352e:	2300      	movs	r3, #0
 8003530:	4a5f      	ldr	r2, [pc, #380]	; (80036b0 <startMotor+0x1a8>)
	slow_decay = decaystate;    // return to normal
 8003532:	7027      	strb	r7, [r4, #0]
	startupcountdown =0;
 8003534:	6013      	str	r3, [r2, #0]
	bemf_counts = 0;
 8003536:	4a5f      	ldr	r2, [pc, #380]	; (80036b4 <startMotor+0x1ac>)
 8003538:	6013      	str	r3, [r2, #0]

}
 800353a:	bc0c      	pop	{r2, r3}
 800353c:	4690      	mov	r8, r2
 800353e:	4699      	mov	r9, r3
 8003540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		EXTI->IMR &= (0 << 21);
 8003542:	4a5d      	ldr	r2, [pc, #372]	; (80036b8 <startMotor+0x1b0>)
 8003544:	6811      	ldr	r1, [r2, #0]
 8003546:	6013      	str	r3, [r2, #0]
		EXTI->PR &=(0 << 21);
 8003548:	6951      	ldr	r1, [r2, #20]
 800354a:	6153      	str	r3, [r2, #20]
		slow_decay = 1;
 800354c:	3301      	adds	r3, #1
 800354e:	7023      	strb	r3, [r4, #0]
	if (forward == 1){
 8003550:	4b5a      	ldr	r3, [pc, #360]	; (80036bc <startMotor+0x1b4>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d06a      	beq.n	800362e <startMotor+0x126>
	if (forward == 0){
 8003558:	2b00      	cmp	r3, #0
 800355a:	d121      	bne.n	80035a0 <startMotor+0x98>
		step--;
 800355c:	4b58      	ldr	r3, [pc, #352]	; (80036c0 <startMotor+0x1b8>)
 800355e:	4698      	mov	r8, r3
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	1e58      	subs	r0, r3, #1
 8003564:	4643      	mov	r3, r8
 8003566:	6018      	str	r0, [r3, #0]
		if (step < 1) {
 8003568:	2800      	cmp	r0, #0
 800356a:	dc00      	bgt.n	800356e <startMotor+0x66>
 800356c:	e087      	b.n	800367e <startMotor+0x176>
		if (step == 1 || step == 3 || step == 5) {
 800356e:	2302      	movs	r3, #2
 8003570:	0002      	movs	r2, r0
 8003572:	439a      	bics	r2, r3
 8003574:	2a01      	cmp	r2, #1
 8003576:	d002      	beq.n	800357e <startMotor+0x76>
 8003578:	2805      	cmp	r0, #5
 800357a:	d000      	beq.n	800357e <startMotor+0x76>
 800357c:	e086      	b.n	800368c <startMotor+0x184>
			rising = 0;
 800357e:	4b51      	ldr	r3, [pc, #324]	; (80036c4 <startMotor+0x1bc>)
 8003580:	4699      	mov	r9, r3
 8003582:	2300      	movs	r3, #0
 8003584:	464a      	mov	r2, r9
 8003586:	6013      	str	r3, [r2, #0]
 8003588:	0002      	movs	r2, r0
 800358a:	3304      	adds	r3, #4
 800358c:	439a      	bics	r2, r3
 800358e:	0013      	movs	r3, r2
		if (step == 2 || step == 4 || step == 6) {
 8003590:	2b02      	cmp	r3, #2
 8003592:	d001      	beq.n	8003598 <startMotor+0x90>
 8003594:	2804      	cmp	r0, #4
 8003596:	d108      	bne.n	80035aa <startMotor+0xa2>
			rising = 1;
 8003598:	2301      	movs	r3, #1
 800359a:	464a      	mov	r2, r9
 800359c:	6013      	str	r3, [r2, #0]
 800359e:	e004      	b.n	80035aa <startMotor+0xa2>
 80035a0:	4b47      	ldr	r3, [pc, #284]	; (80036c0 <startMotor+0x1b8>)
 80035a2:	4698      	mov	r8, r3
 80035a4:	6818      	ldr	r0, [r3, #0]
 80035a6:	4b47      	ldr	r3, [pc, #284]	; (80036c4 <startMotor+0x1bc>)
 80035a8:	4699      	mov	r9, r3
	if (input > 47){
 80035aa:	4b47      	ldr	r3, [pc, #284]	; (80036c8 <startMotor+0x1c0>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2b2f      	cmp	r3, #47	; 0x2f
 80035b0:	dd03      	ble.n	80035ba <startMotor+0xb2>
comStep(step);
 80035b2:	f7ff fcef 	bl	8002f94 <comStep>
 80035b6:	4643      	mov	r3, r8
 80035b8:	6818      	ldr	r0, [r3, #0]
	if (step == 1 || step == 4) {   // c floating
 80035ba:	2801      	cmp	r0, #1
 80035bc:	d033      	beq.n	8003626 <startMotor+0x11e>
 80035be:	2804      	cmp	r0, #4
 80035c0:	d031      	beq.n	8003626 <startMotor+0x11e>
	if (step == 2 || step == 5) {     // a floating
 80035c2:	2802      	cmp	r0, #2
 80035c4:	d02b      	beq.n	800361e <startMotor+0x116>
 80035c6:	2805      	cmp	r0, #5
 80035c8:	d029      	beq.n	800361e <startMotor+0x116>
	if (step == 3 || step == 6) {      // b floating
 80035ca:	2803      	cmp	r0, #3
 80035cc:	d019      	beq.n	8003602 <startMotor+0xfa>
 80035ce:	2806      	cmp	r0, #6
 80035d0:	d017      	beq.n	8003602 <startMotor+0xfa>
	if (rising){
 80035d2:	464b      	mov	r3, r9
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d11a      	bne.n	8003610 <startMotor+0x108>
	EXTI->FTSR = 0x0;
 80035da:	4a37      	ldr	r2, [pc, #220]	; (80036b8 <startMotor+0x1b0>)
 80035dc:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR = 0x200000;
 80035de:	2380      	movs	r3, #128	; 0x80
 80035e0:	039b      	lsls	r3, r3, #14
 80035e2:	6093      	str	r3, [r2, #8]
	commutation_interval = 15000;
 80035e4:	4a39      	ldr	r2, [pc, #228]	; (80036cc <startMotor+0x1c4>)
 80035e6:	4b3a      	ldr	r3, [pc, #232]	; (80036d0 <startMotor+0x1c8>)
 80035e8:	601a      	str	r2, [r3, #0]
	TIM3->CNT = 0;
 80035ea:	2200      	movs	r2, #0
 80035ec:	4b39      	ldr	r3, [pc, #228]	; (80036d4 <startMotor+0x1cc>)
 80035ee:	625a      	str	r2, [r3, #36]	; 0x24
	running = 1;
 80035f0:	2301      	movs	r3, #1
 80035f2:	6033      	str	r3, [r6, #0]
	EXTI->IMR |= (1 << 21);
 80035f4:	2380      	movs	r3, #128	; 0x80
 80035f6:	4a30      	ldr	r2, [pc, #192]	; (80036b8 <startMotor+0x1b0>)
 80035f8:	039b      	lsls	r3, r3, #14
 80035fa:	6811      	ldr	r1, [r2, #0]
 80035fc:	430b      	orrs	r3, r1
 80035fe:	6013      	str	r3, [r2, #0]
 8003600:	e793      	b.n	800352a <startMotor+0x22>
		COMP->CSR = 0b1000001;
 8003602:	2241      	movs	r2, #65	; 0x41
 8003604:	4b34      	ldr	r3, [pc, #208]	; (80036d8 <startMotor+0x1d0>)
 8003606:	601a      	str	r2, [r3, #0]
	if (rising){
 8003608:	464b      	mov	r3, r9
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d0e4      	beq.n	80035da <startMotor+0xd2>
		EXTI->RTSR = 0x0;
 8003610:	2200      	movs	r2, #0
 8003612:	4b29      	ldr	r3, [pc, #164]	; (80036b8 <startMotor+0x1b0>)
 8003614:	609a      	str	r2, [r3, #8]
	EXTI->FTSR = 0x200000;
 8003616:	2280      	movs	r2, #128	; 0x80
 8003618:	0392      	lsls	r2, r2, #14
 800361a:	60da      	str	r2, [r3, #12]
 800361c:	e7e2      	b.n	80035e4 <startMotor+0xdc>
		COMP->CSR = 0b1010001;
 800361e:	2251      	movs	r2, #81	; 0x51
 8003620:	4b2d      	ldr	r3, [pc, #180]	; (80036d8 <startMotor+0x1d0>)
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	e7d1      	b.n	80035ca <startMotor+0xc2>
		COMP->CSR = 0b1100001;
 8003626:	2261      	movs	r2, #97	; 0x61
 8003628:	4b2b      	ldr	r3, [pc, #172]	; (80036d8 <startMotor+0x1d0>)
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	e7c9      	b.n	80035c2 <startMotor+0xba>
		step++;
 800362e:	4a24      	ldr	r2, [pc, #144]	; (80036c0 <startMotor+0x1b8>)
 8003630:	4690      	mov	r8, r2
 8003632:	4641      	mov	r1, r8
 8003634:	6812      	ldr	r2, [r2, #0]
 8003636:	3201      	adds	r2, #1
 8003638:	600a      	str	r2, [r1, #0]
		if (step > 6) {
 800363a:	2a06      	cmp	r2, #6
 800363c:	dd11      	ble.n	8003662 <startMotor+0x15a>
		if (step == 1 || step == 3 || step == 5) {
 800363e:	2201      	movs	r2, #1
			step = 1;
 8003640:	600b      	str	r3, [r1, #0]
			rising = 1;                                // is back emf rising or falling
 8003642:	4920      	ldr	r1, [pc, #128]	; (80036c4 <startMotor+0x1bc>)
 8003644:	4689      	mov	r9, r1
 8003646:	2101      	movs	r1, #1
 8003648:	4648      	mov	r0, r9
 800364a:	6001      	str	r1, [r0, #0]
		if (step == 2 || step == 4 || step == 6) {
 800364c:	2b02      	cmp	r3, #2
 800364e:	d004      	beq.n	800365a <startMotor+0x152>
 8003650:	2a04      	cmp	r2, #4
 8003652:	d002      	beq.n	800365a <startMotor+0x152>
 8003654:	4643      	mov	r3, r8
 8003656:	6818      	ldr	r0, [r3, #0]
 8003658:	e7a7      	b.n	80035aa <startMotor+0xa2>
			rising = 0;
 800365a:	2300      	movs	r3, #0
 800365c:	464a      	mov	r2, r9
 800365e:	6013      	str	r3, [r2, #0]
 8003660:	e7f8      	b.n	8003654 <startMotor+0x14c>
		if (step == 1 || step == 3 || step == 5) {
 8003662:	2102      	movs	r1, #2
 8003664:	0010      	movs	r0, r2
 8003666:	4388      	bics	r0, r1
 8003668:	2801      	cmp	r0, #1
 800366a:	d016      	beq.n	800369a <startMotor+0x192>
 800366c:	2a05      	cmp	r2, #5
 800366e:	d0e8      	beq.n	8003642 <startMotor+0x13a>
 8003670:	2304      	movs	r3, #4
 8003672:	0011      	movs	r1, r2
 8003674:	4399      	bics	r1, r3
 8003676:	000b      	movs	r3, r1
 8003678:	4912      	ldr	r1, [pc, #72]	; (80036c4 <startMotor+0x1bc>)
 800367a:	4689      	mov	r9, r1
 800367c:	e7e6      	b.n	800364c <startMotor+0x144>
			step = 6;
 800367e:	2306      	movs	r3, #6
 8003680:	4642      	mov	r2, r8
 8003682:	6013      	str	r3, [r2, #0]
 8003684:	4b0f      	ldr	r3, [pc, #60]	; (80036c4 <startMotor+0x1bc>)
		if (step == 1 || step == 3 || step == 5) {
 8003686:	2006      	movs	r0, #6
 8003688:	4699      	mov	r9, r3
 800368a:	e785      	b.n	8003598 <startMotor+0x90>
 800368c:	2304      	movs	r3, #4
 800368e:	0002      	movs	r2, r0
 8003690:	439a      	bics	r2, r3
 8003692:	0013      	movs	r3, r2
 8003694:	4a0b      	ldr	r2, [pc, #44]	; (80036c4 <startMotor+0x1bc>)
 8003696:	4691      	mov	r9, r2
 8003698:	e77a      	b.n	8003590 <startMotor+0x88>
		if (step == 1 || step == 3 || step == 5) {
 800369a:	0013      	movs	r3, r2
 800369c:	e7d1      	b.n	8003642 <startMotor+0x13a>
 800369e:	46c0      	nop			; (mov r8, r8)
 80036a0:	200000fc 	.word	0x200000fc
 80036a4:	200000ec 	.word	0x200000ec
 80036a8:	200000e8 	.word	0x200000e8
 80036ac:	20000034 	.word	0x20000034
 80036b0:	20000104 	.word	0x20000104
 80036b4:	20000228 	.word	0x20000228
 80036b8:	40010400 	.word	0x40010400
 80036bc:	2000001c 	.word	0x2000001c
 80036c0:	20000040 	.word	0x20000040
 80036c4:	2000002c 	.word	0x2000002c
 80036c8:	200000c4 	.word	0x200000c4
 80036cc:	00003a98 	.word	0x00003a98
 80036d0:	200000a0 	.word	0x200000a0
 80036d4:	40000400 	.word	0x40000400
 80036d8:	4001001c 	.word	0x4001001c

080036dc <HAL_COMP_TriggerCallback>:

}



void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp) {
 80036dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036de:	46c6      	mov	lr, r8


	thiszctime = TIM3->CNT;
 80036e0:	4b3b      	ldr	r3, [pc, #236]	; (80037d0 <HAL_COMP_TriggerCallback+0xf4>)
 80036e2:	4f3c      	ldr	r7, [pc, #240]	; (80037d4 <HAL_COMP_TriggerCallback+0xf8>)
 80036e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp) {
 80036e6:	b500      	push	{lr}
	thiszctime = TIM3->CNT;
 80036e8:	603b      	str	r3, [r7, #0]

		if (rising){
 80036ea:	4b3b      	ldr	r3, [pc, #236]	; (80037d8 <HAL_COMP_TriggerCallback+0xfc>)
		//	advancedivisor = advancedivisorup;
			for (int i = 0; i < filter_level; i++){
 80036ec:	4d3b      	ldr	r5, [pc, #236]	; (80037dc <HAL_COMP_TriggerCallback+0x100>)
		if (rising){
 80036ee:	681c      	ldr	r4, [r3, #0]
			for (int i = 0; i < filter_level; i++){
 80036f0:	782b      	ldrb	r3, [r5, #0]
		if (rising){
 80036f2:	2c00      	cmp	r4, #0
 80036f4:	d10d      	bne.n	8003712 <HAL_COMP_TriggerCallback+0x36>
			}


		}else{
		//	advancedivisor = advancedivisordown;
			for (int i = 0; i < filter_level; i++){
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00d      	beq.n	8003716 <HAL_COMP_TriggerCallback+0x3a>
 80036fa:	4e39      	ldr	r6, [pc, #228]	; (80037e0 <HAL_COMP_TriggerCallback+0x104>)
 80036fc:	e003      	b.n	8003706 <HAL_COMP_TriggerCallback+0x2a>
 80036fe:	782b      	ldrb	r3, [r5, #0]
 8003700:	3401      	adds	r4, #1
 8003702:	42a3      	cmp	r3, r4
 8003704:	dd07      	ble.n	8003716 <HAL_COMP_TriggerCallback+0x3a>
			if (HAL_COMP_GetOutputLevel(&hcomp1) == COMP_OUTPUTLEVEL_LOW){
 8003706:	0030      	movs	r0, r6
 8003708:	f7fd f900 	bl	800090c <HAL_COMP_GetOutputLevel>
 800370c:	2800      	cmp	r0, #0
 800370e:	d1f6      	bne.n	80036fe <HAL_COMP_TriggerCallback+0x22>
 8003710:	e042      	b.n	8003798 <HAL_COMP_TriggerCallback+0xbc>
			for (int i = 0; i < filter_level; i++){
 8003712:	2b00      	cmp	r3, #0
 8003714:	d143      	bne.n	800379e <HAL_COMP_TriggerCallback+0xc2>
			}
			}

		}

	TIM3->CNT = 0;
 8003716:	2300      	movs	r3, #0
	zctimeout = 0;
 8003718:	4932      	ldr	r1, [pc, #200]	; (80037e4 <HAL_COMP_TriggerCallback+0x108>)
	TIM3->CNT = 0;
 800371a:	4a2d      	ldr	r2, [pc, #180]	; (80037d0 <HAL_COMP_TriggerCallback+0xf4>)
	//	HAL_COMP_Stop_IT(&hcomp1);
	EXTI->IMR &= (0 << 21);
	EXTI->PR &=(0 << 21);
	if (waitTime < 0){
 800371c:	4c32      	ldr	r4, [pc, #200]	; (80037e8 <HAL_COMP_TriggerCallback+0x10c>)
	TIM3->CNT = 0;
 800371e:	6253      	str	r3, [r2, #36]	; 0x24
	zctimeout = 0;
 8003720:	600b      	str	r3, [r1, #0]
	EXTI->IMR &= (0 << 21);
 8003722:	4932      	ldr	r1, [pc, #200]	; (80037ec <HAL_COMP_TriggerCallback+0x110>)
 8003724:	6808      	ldr	r0, [r1, #0]
 8003726:	600b      	str	r3, [r1, #0]
	EXTI->PR &=(0 << 21);
 8003728:	6948      	ldr	r0, [r1, #20]
 800372a:	614b      	str	r3, [r1, #20]
	if (waitTime < 0){
 800372c:	6821      	ldr	r1, [r4, #0]
 800372e:	2900      	cmp	r1, #0
 8003730:	db4b      	blt.n	80037ca <HAL_COMP_TriggerCallback+0xee>
			waitTime = 0;
		}
	while (TIM3->CNT  < waitTime){
 8003732:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003734:	4299      	cmp	r1, r3
 8003736:	d8fc      	bhi.n	8003732 <HAL_COMP_TriggerCallback+0x56>


	}
	compit = 0;
 8003738:	2300      	movs	r3, #0
 800373a:	4d2d      	ldr	r5, [pc, #180]	; (80037f0 <HAL_COMP_TriggerCallback+0x114>)
 800373c:	702b      	strb	r3, [r5, #0]

	commutate();
 800373e:	f7ff fe25 	bl	800338c <commutate>

	commutation_interval = ((4 *commutation_interval) + thiszctime) / 5;
 8003742:	4e2c      	ldr	r6, [pc, #176]	; (80037f4 <HAL_COMP_TriggerCallback+0x118>)
 8003744:	2105      	movs	r1, #5
 8003746:	6833      	ldr	r3, [r6, #0]
 8003748:	0098      	lsls	r0, r3, #2
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	18c0      	adds	r0, r0, r3
 800374e:	f7fc fd65 	bl	800021c <__divsi3>
			degree_time = commutation_interval >> 5;                          // about 1.85 degrees per unit
 8003752:	4b29      	ldr	r3, [pc, #164]	; (80037f8 <HAL_COMP_TriggerCallback+0x11c>)
 8003754:	1142      	asrs	r2, r0, #5
 8003756:	601a      	str	r2, [r3, #0]
			advance = degree_time * advance_multiplier;                     //  * 16 would be about 30 degrees
 8003758:	4b28      	ldr	r3, [pc, #160]	; (80037fc <HAL_COMP_TriggerCallback+0x120>)
			waitTime = (commutation_interval >> 1)  - advance;
			blanktime = commutation_interval >>2 ;                               // divided by 8
			bemf_counts++;
 800375a:	4929      	ldr	r1, [pc, #164]	; (8003800 <HAL_COMP_TriggerCallback+0x124>)
			advance = degree_time * advance_multiplier;                     //  * 16 would be about 30 degrees
 800375c:	681b      	ldr	r3, [r3, #0]
	commutation_interval = ((4 *commutation_interval) + thiszctime) / 5;
 800375e:	6030      	str	r0, [r6, #0]
			advance = degree_time * advance_multiplier;                     //  * 16 would be about 30 degrees
 8003760:	435a      	muls	r2, r3
 8003762:	4b28      	ldr	r3, [pc, #160]	; (8003804 <HAL_COMP_TriggerCallback+0x128>)
 8003764:	601a      	str	r2, [r3, #0]
			waitTime = (commutation_interval >> 1)  - advance;
 8003766:	1043      	asrs	r3, r0, #1
 8003768:	1a9b      	subs	r3, r3, r2
			blanktime = commutation_interval >>2 ;                               // divided by 8
 800376a:	4a27      	ldr	r2, [pc, #156]	; (8003808 <HAL_COMP_TriggerCallback+0x12c>)
 800376c:	1080      	asrs	r0, r0, #2
 800376e:	6010      	str	r0, [r2, #0]
			bemf_counts++;
 8003770:	680a      	ldr	r2, [r1, #0]
			waitTime = (commutation_interval >> 1)  - advance;
 8003772:	6023      	str	r3, [r4, #0]
			bemf_counts++;
 8003774:	3201      	adds	r2, #1
 8003776:	600a      	str	r2, [r1, #0]
			while (TIM3->CNT < waitTime + blanktime){
 8003778:	4a15      	ldr	r2, [pc, #84]	; (80037d0 <HAL_COMP_TriggerCallback+0xf4>)
 800377a:	1818      	adds	r0, r3, r0
 800377c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800377e:	4298      	cmp	r0, r3
 8003780:	d8fc      	bhi.n	800377c <HAL_COMP_TriggerCallback+0xa0>

			}
			EXTI->IMR |= (1 << 21);
 8003782:	2280      	movs	r2, #128	; 0x80
 8003784:	4b19      	ldr	r3, [pc, #100]	; (80037ec <HAL_COMP_TriggerCallback+0x110>)
 8003786:	0392      	lsls	r2, r2, #14
 8003788:	6819      	ldr	r1, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	601a      	str	r2, [r3, #0]


	if (compit > 100){
 800378e:	782a      	ldrb	r2, [r5, #0]
 8003790:	2a64      	cmp	r2, #100	; 0x64
 8003792:	d814      	bhi.n	80037be <HAL_COMP_TriggerCallback+0xe2>
		EXTI->IMR &= (0 << 21);
		EXTI->PR &=(0 << 21);
	//	error = 1;
		return;
	}
	compit +=1;
 8003794:	3201      	adds	r2, #1
 8003796:	702a      	strb	r2, [r5, #0]
}
 8003798:	bc04      	pop	{r2}
 800379a:	4690      	mov	r8, r2
 800379c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (HAL_COMP_GetOutputLevel(&hcomp1) == COMP_OUTPUTLEVEL_HIGH){
 800379e:	2380      	movs	r3, #128	; 0x80
 80037a0:	01db      	lsls	r3, r3, #7
			for (int i = 0; i < filter_level; i++){
 80037a2:	2400      	movs	r4, #0
 80037a4:	4e0e      	ldr	r6, [pc, #56]	; (80037e0 <HAL_COMP_TriggerCallback+0x104>)
			if (HAL_COMP_GetOutputLevel(&hcomp1) == COMP_OUTPUTLEVEL_HIGH){
 80037a6:	4698      	mov	r8, r3
 80037a8:	e003      	b.n	80037b2 <HAL_COMP_TriggerCallback+0xd6>
			for (int i = 0; i < filter_level; i++){
 80037aa:	782b      	ldrb	r3, [r5, #0]
 80037ac:	3401      	adds	r4, #1
 80037ae:	42a3      	cmp	r3, r4
 80037b0:	ddb1      	ble.n	8003716 <HAL_COMP_TriggerCallback+0x3a>
			if (HAL_COMP_GetOutputLevel(&hcomp1) == COMP_OUTPUTLEVEL_HIGH){
 80037b2:	0030      	movs	r0, r6
 80037b4:	f7fd f8aa 	bl	800090c <HAL_COMP_GetOutputLevel>
 80037b8:	4540      	cmp	r0, r8
 80037ba:	d1f6      	bne.n	80037aa <HAL_COMP_TriggerCallback+0xce>
 80037bc:	e7ec      	b.n	8003798 <HAL_COMP_TriggerCallback+0xbc>
		EXTI->IMR &= (0 << 21);
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]
		EXTI->PR &=(0 << 21);
 80037c4:	6959      	ldr	r1, [r3, #20]
 80037c6:	615a      	str	r2, [r3, #20]
		return;
 80037c8:	e7e6      	b.n	8003798 <HAL_COMP_TriggerCallback+0xbc>
			waitTime = 0;
 80037ca:	6023      	str	r3, [r4, #0]
	while (TIM3->CNT  < waitTime){
 80037cc:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80037ce:	e7b3      	b.n	8003738 <HAL_COMP_TriggerCallback+0x5c>
 80037d0:	40000400 	.word	0x40000400
 80037d4:	20000114 	.word	0x20000114
 80037d8:	2000002c 	.word	0x2000002c
 80037dc:	20000018 	.word	0x20000018
 80037e0:	200001b8 	.word	0x200001b8
 80037e4:	20000120 	.word	0x20000120
 80037e8:	2000011c 	.word	0x2000011c
 80037ec:	40010400 	.word	0x40010400
 80037f0:	200000a4 	.word	0x200000a4
 80037f4:	200000a0 	.word	0x200000a0
 80037f8:	20000148 	.word	0x20000148
 80037fc:	2000000c 	.word	0x2000000c
 8003800:	20000228 	.word	0x20000228
 8003804:	20000088 	.word	0x20000088
 8003808:	2000032c 	.word	0x2000032c

0800380c <playStartupTune>:




void playStartupTune(){
	TIM1->PSC = 75;
 800380c:	224b      	movs	r2, #75	; 0x4b
 800380e:	210c      	movs	r1, #12
 8003810:	4b4b      	ldr	r3, [pc, #300]	; (8003940 <playStartupTune+0x134>)
void playStartupTune(){
 8003812:	b570      	push	{r4, r5, r6, lr}
	TIM1->PSC = 75;
 8003814:	629a      	str	r2, [r3, #40]	; 0x28
	TIM1->CCR1 = 5;
 8003816:	3a46      	subs	r2, #70	; 0x46
 8003818:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 5;
 800381a:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 5;
 800381c:	63da      	str	r2, [r3, #60]	; 0x3c
 800381e:	4a49      	ldr	r2, [pc, #292]	; (8003944 <playStartupTune+0x138>)
 8003820:	4849      	ldr	r0, [pc, #292]	; (8003948 <playStartupTune+0x13c>)
 8003822:	6813      	ldr	r3, [r2, #0]
 8003824:	438b      	bics	r3, r1
 8003826:	3908      	subs	r1, #8
 8003828:	430b      	orrs	r3, r1
 800382a:	6013      	str	r3, [r2, #0]
		GPIOB->BRR = GPIO_PIN_1;
 800382c:	2302      	movs	r3, #2
 800382e:	6293      	str	r3, [r2, #40]	; 0x28
 8003830:	2390      	movs	r3, #144	; 0x90
 8003832:	05db      	lsls	r3, r3, #23
 8003834:	6819      	ldr	r1, [r3, #0]
 8003836:	4008      	ands	r0, r1
 8003838:	2180      	movs	r1, #128	; 0x80
 800383a:	0349      	lsls	r1, r1, #13
 800383c:	4301      	orrs	r1, r0
 800383e:	6019      	str	r1, [r3, #0]
		GPIOA->BRR = GPIO_PIN_10;
 8003840:	2180      	movs	r1, #128	; 0x80
 8003842:	2003      	movs	r0, #3
 8003844:	00c9      	lsls	r1, r1, #3
 8003846:	6299      	str	r1, [r3, #40]	; 0x28
 8003848:	6811      	ldr	r1, [r2, #0]
 800384a:	4381      	bics	r1, r0
 800384c:	3802      	subs	r0, #2
 800384e:	4301      	orrs	r1, r0
 8003850:	6011      	str	r1, [r2, #0]
		GPIOB->BSRR = GPIO_PIN_0;
 8003852:	6190      	str	r0, [r2, #24]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	493d      	ldr	r1, [pc, #244]	; (800394c <playStartupTune+0x140>)
 8003858:	4011      	ands	r1, r2
 800385a:	2280      	movs	r2, #128	; 0x80
 800385c:	02d2      	lsls	r2, r2, #11
 800385e:	430a      	orrs	r2, r1
 8003860:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_9;
 8003862:	2280      	movs	r2, #128	; 0x80
 8003864:	0092      	lsls	r2, r2, #2
 8003866:	629a      	str	r2, [r3, #40]	; 0x28
		if (!slow_decay || prop_brake_active){
 8003868:	4a39      	ldr	r2, [pc, #228]	; (8003950 <playStartupTune+0x144>)
 800386a:	7812      	ldrb	r2, [r2, #0]
 800386c:	2a00      	cmp	r2, #0
 800386e:	d00b      	beq.n	8003888 <playStartupTune+0x7c>
 8003870:	4a38      	ldr	r2, [pc, #224]	; (8003954 <playStartupTune+0x148>)
 8003872:	7812      	ldrb	r2, [r2, #0]
 8003874:	2a00      	cmp	r2, #0
 8003876:	d107      	bne.n	8003888 <playStartupTune+0x7c>
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	4937      	ldr	r1, [pc, #220]	; (8003958 <playStartupTune+0x14c>)
 800387c:	4011      	ands	r1, r2
 800387e:	2280      	movs	r2, #128	; 0x80
 8003880:	0212      	lsls	r2, r2, #8
 8003882:	430a      	orrs	r2, r1
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	e00a      	b.n	800389e <playStartupTune+0x92>
 8003888:	2390      	movs	r3, #144	; 0x90
 800388a:	05db      	lsls	r3, r3, #23
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	4932      	ldr	r1, [pc, #200]	; (8003958 <playStartupTune+0x14c>)
 8003890:	4011      	ands	r1, r2
 8003892:	2280      	movs	r2, #128	; 0x80
 8003894:	01d2      	lsls	r2, r2, #7
 8003896:	430a      	orrs	r2, r1
 8003898:	601a      	str	r2, [r3, #0]
			GPIOA->BRR = GPIO_PIN_7;
 800389a:	2280      	movs	r2, #128	; 0x80
 800389c:	629a      	str	r2, [r3, #40]	; 0x28
 800389e:	2490      	movs	r4, #144	; 0x90
 80038a0:	2380      	movs	r3, #128	; 0x80
 80038a2:	05e4      	lsls	r4, r4, #23
 80038a4:	6822      	ldr	r2, [r4, #0]
 80038a6:	4e2d      	ldr	r6, [pc, #180]	; (800395c <playStartupTune+0x150>)
 80038a8:	029b      	lsls	r3, r3, #10
 80038aa:	4032      	ands	r2, r6
 80038ac:	4313      	orrs	r3, r2
 80038ae:	6023      	str	r3, [r4, #0]
	comStep(2);
	HAL_Delay(100);
 80038b0:	2064      	movs	r0, #100	; 0x64
 80038b2:	f7fc fdcf 	bl	8000454 <HAL_Delay>
	TIM1->PSC = 50;
 80038b6:	2332      	movs	r3, #50	; 0x32
 80038b8:	4d21      	ldr	r5, [pc, #132]	; (8003940 <playStartupTune+0x134>)
	HAL_Delay(100);
 80038ba:	2064      	movs	r0, #100	; 0x64
	TIM1->PSC = 50;
 80038bc:	62ab      	str	r3, [r5, #40]	; 0x28
	HAL_Delay(100);
 80038be:	f7fc fdc9 	bl	8000454 <HAL_Delay>
	TIM1->PSC = 25;
 80038c2:	2319      	movs	r3, #25
	HAL_Delay(100);
 80038c4:	2064      	movs	r0, #100	; 0x64
	TIM1->PSC = 25;
 80038c6:	62ab      	str	r3, [r5, #40]	; 0x28
	HAL_Delay(100);
 80038c8:	f7fc fdc4 	bl	8000454 <HAL_Delay>
 80038cc:	210c      	movs	r1, #12
 80038ce:	4b1d      	ldr	r3, [pc, #116]	; (8003944 <playStartupTune+0x138>)
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	438a      	bics	r2, r1
 80038d4:	3908      	subs	r1, #8
 80038d6:	430a      	orrs	r2, r1
 80038d8:	601a      	str	r2, [r3, #0]
		GPIOB->BRR = GPIO_PIN_1;
 80038da:	2202      	movs	r2, #2
 80038dc:	629a      	str	r2, [r3, #40]	; 0x28
 80038de:	6822      	ldr	r2, [r4, #0]
 80038e0:	4919      	ldr	r1, [pc, #100]	; (8003948 <playStartupTune+0x13c>)
 80038e2:	4011      	ands	r1, r2
 80038e4:	2280      	movs	r2, #128	; 0x80
 80038e6:	0352      	lsls	r2, r2, #13
 80038e8:	430a      	orrs	r2, r1
 80038ea:	6022      	str	r2, [r4, #0]
		GPIOA->BRR = GPIO_PIN_10;
 80038ec:	2280      	movs	r2, #128	; 0x80
 80038ee:	2103      	movs	r1, #3
 80038f0:	00d2      	lsls	r2, r2, #3
 80038f2:	62a2      	str	r2, [r4, #40]	; 0x28
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	438a      	bics	r2, r1
 80038f8:	3902      	subs	r1, #2
 80038fa:	430a      	orrs	r2, r1
 80038fc:	601a      	str	r2, [r3, #0]
		GPIOB->BRR = GPIO_PIN_0;
 80038fe:	6299      	str	r1, [r3, #40]	; 0x28
 8003900:	6823      	ldr	r3, [r4, #0]
 8003902:	4a12      	ldr	r2, [pc, #72]	; (800394c <playStartupTune+0x140>)
 8003904:	401a      	ands	r2, r3
 8003906:	2380      	movs	r3, #128	; 0x80
 8003908:	02db      	lsls	r3, r3, #11
 800390a:	4313      	orrs	r3, r2
 800390c:	6023      	str	r3, [r4, #0]
		GPIOA->BRR = GPIO_PIN_9;
 800390e:	2380      	movs	r3, #128	; 0x80
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	62a3      	str	r3, [r4, #40]	; 0x28
 8003914:	6823      	ldr	r3, [r4, #0]
 8003916:	4a10      	ldr	r2, [pc, #64]	; (8003958 <playStartupTune+0x14c>)
 8003918:	401a      	ands	r2, r3
 800391a:	2380      	movs	r3, #128	; 0x80
 800391c:	01db      	lsls	r3, r3, #7
 800391e:	4313      	orrs	r3, r2
 8003920:	6023      	str	r3, [r4, #0]
		GPIOA->BRR = GPIO_PIN_7;
 8003922:	2380      	movs	r3, #128	; 0x80
 8003924:	62a3      	str	r3, [r4, #40]	; 0x28
 8003926:	6823      	ldr	r3, [r4, #0]
 8003928:	4033      	ands	r3, r6
 800392a:	2680      	movs	r6, #128	; 0x80
 800392c:	0276      	lsls	r6, r6, #9
 800392e:	431e      	orrs	r6, r3
		GPIOA->BRR = GPIO_PIN_8;
 8003930:	2380      	movs	r3, #128	; 0x80
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	6026      	str	r6, [r4, #0]
 8003936:	62a3      	str	r3, [r4, #40]	; 0x28
	allOff();
	TIM1->PSC = 0;
 8003938:	2300      	movs	r3, #0
 800393a:	62ab      	str	r3, [r5, #40]	; 0x28
}
 800393c:	bd70      	pop	{r4, r5, r6, pc}
 800393e:	46c0      	nop			; (mov r8, r8)
 8003940:	40012c00 	.word	0x40012c00
 8003944:	48000400 	.word	0x48000400
 8003948:	ffcfffff 	.word	0xffcfffff
 800394c:	fff3ffff 	.word	0xfff3ffff
 8003950:	20000034 	.word	0x20000034
 8003954:	200000d3 	.word	0x200000d3
 8003958:	ffff3fff 	.word	0xffff3fff
 800395c:	fffcffff 	.word	0xfffcffff

08003960 <playInputTune>:

void playInputTune(){
	TIM1->PSC = 100;
 8003960:	2264      	movs	r2, #100	; 0x64
 8003962:	210c      	movs	r1, #12
 8003964:	4b48      	ldr	r3, [pc, #288]	; (8003a88 <playInputTune+0x128>)
void playInputTune(){
 8003966:	b570      	push	{r4, r5, r6, lr}
	TIM1->PSC = 100;
 8003968:	629a      	str	r2, [r3, #40]	; 0x28
	TIM1->CCR1 = 5;
 800396a:	3a5f      	subs	r2, #95	; 0x5f
 800396c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 5;
 800396e:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 5;
 8003970:	63da      	str	r2, [r3, #60]	; 0x3c
 8003972:	4a46      	ldr	r2, [pc, #280]	; (8003a8c <playInputTune+0x12c>)
 8003974:	4846      	ldr	r0, [pc, #280]	; (8003a90 <playInputTune+0x130>)
 8003976:	6813      	ldr	r3, [r2, #0]
 8003978:	438b      	bics	r3, r1
 800397a:	3908      	subs	r1, #8
 800397c:	430b      	orrs	r3, r1
 800397e:	6013      	str	r3, [r2, #0]
		GPIOB->BRR = GPIO_PIN_1;
 8003980:	2302      	movs	r3, #2
 8003982:	6293      	str	r3, [r2, #40]	; 0x28
 8003984:	2390      	movs	r3, #144	; 0x90
 8003986:	05db      	lsls	r3, r3, #23
 8003988:	6819      	ldr	r1, [r3, #0]
 800398a:	4008      	ands	r0, r1
 800398c:	2180      	movs	r1, #128	; 0x80
 800398e:	0349      	lsls	r1, r1, #13
 8003990:	4301      	orrs	r1, r0
 8003992:	6019      	str	r1, [r3, #0]
		GPIOA->BRR = GPIO_PIN_10;
 8003994:	2180      	movs	r1, #128	; 0x80
 8003996:	2003      	movs	r0, #3
 8003998:	00c9      	lsls	r1, r1, #3
 800399a:	6299      	str	r1, [r3, #40]	; 0x28
 800399c:	6811      	ldr	r1, [r2, #0]
 800399e:	4381      	bics	r1, r0
 80039a0:	3802      	subs	r0, #2
 80039a2:	4301      	orrs	r1, r0
 80039a4:	6011      	str	r1, [r2, #0]
		GPIOB->BSRR = GPIO_PIN_0;
 80039a6:	6190      	str	r0, [r2, #24]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	493a      	ldr	r1, [pc, #232]	; (8003a94 <playInputTune+0x134>)
 80039ac:	4011      	ands	r1, r2
 80039ae:	2280      	movs	r2, #128	; 0x80
 80039b0:	02d2      	lsls	r2, r2, #11
 80039b2:	430a      	orrs	r2, r1
 80039b4:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_9;
 80039b6:	2280      	movs	r2, #128	; 0x80
 80039b8:	0092      	lsls	r2, r2, #2
 80039ba:	629a      	str	r2, [r3, #40]	; 0x28
		if (!slow_decay || prop_brake_active){
 80039bc:	4a36      	ldr	r2, [pc, #216]	; (8003a98 <playInputTune+0x138>)
 80039be:	7812      	ldrb	r2, [r2, #0]
 80039c0:	2a00      	cmp	r2, #0
 80039c2:	d00b      	beq.n	80039dc <playInputTune+0x7c>
 80039c4:	4a35      	ldr	r2, [pc, #212]	; (8003a9c <playInputTune+0x13c>)
 80039c6:	7812      	ldrb	r2, [r2, #0]
 80039c8:	2a00      	cmp	r2, #0
 80039ca:	d107      	bne.n	80039dc <playInputTune+0x7c>
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	4934      	ldr	r1, [pc, #208]	; (8003aa0 <playInputTune+0x140>)
 80039d0:	4011      	ands	r1, r2
 80039d2:	2280      	movs	r2, #128	; 0x80
 80039d4:	0212      	lsls	r2, r2, #8
 80039d6:	430a      	orrs	r2, r1
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	e00a      	b.n	80039f2 <playInputTune+0x92>
 80039dc:	2390      	movs	r3, #144	; 0x90
 80039de:	05db      	lsls	r3, r3, #23
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	492f      	ldr	r1, [pc, #188]	; (8003aa0 <playInputTune+0x140>)
 80039e4:	4011      	ands	r1, r2
 80039e6:	2280      	movs	r2, #128	; 0x80
 80039e8:	01d2      	lsls	r2, r2, #7
 80039ea:	430a      	orrs	r2, r1
 80039ec:	601a      	str	r2, [r3, #0]
			GPIOA->BRR = GPIO_PIN_7;
 80039ee:	2280      	movs	r2, #128	; 0x80
 80039f0:	629a      	str	r2, [r3, #40]	; 0x28
 80039f2:	2490      	movs	r4, #144	; 0x90
 80039f4:	2380      	movs	r3, #128	; 0x80
 80039f6:	05e4      	lsls	r4, r4, #23
 80039f8:	6822      	ldr	r2, [r4, #0]
 80039fa:	4e2a      	ldr	r6, [pc, #168]	; (8003aa4 <playInputTune+0x144>)
 80039fc:	029b      	lsls	r3, r3, #10
 80039fe:	4032      	ands	r2, r6
 8003a00:	4313      	orrs	r3, r2
 8003a02:	6023      	str	r3, [r4, #0]
	comStep(2);
	HAL_Delay(100);
 8003a04:	2064      	movs	r0, #100	; 0x64
 8003a06:	f7fc fd25 	bl	8000454 <HAL_Delay>
	TIM1->PSC = 50;
 8003a0a:	2332      	movs	r3, #50	; 0x32
 8003a0c:	4d1e      	ldr	r5, [pc, #120]	; (8003a88 <playInputTune+0x128>)
	HAL_Delay(100);
 8003a0e:	2064      	movs	r0, #100	; 0x64
	TIM1->PSC = 50;
 8003a10:	62ab      	str	r3, [r5, #40]	; 0x28
	HAL_Delay(100);
 8003a12:	f7fc fd1f 	bl	8000454 <HAL_Delay>
 8003a16:	210c      	movs	r1, #12
 8003a18:	4b1c      	ldr	r3, [pc, #112]	; (8003a8c <playInputTune+0x12c>)
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	438a      	bics	r2, r1
 8003a1e:	3908      	subs	r1, #8
 8003a20:	430a      	orrs	r2, r1
 8003a22:	601a      	str	r2, [r3, #0]
		GPIOB->BRR = GPIO_PIN_1;
 8003a24:	2202      	movs	r2, #2
 8003a26:	629a      	str	r2, [r3, #40]	; 0x28
 8003a28:	6822      	ldr	r2, [r4, #0]
 8003a2a:	4919      	ldr	r1, [pc, #100]	; (8003a90 <playInputTune+0x130>)
 8003a2c:	4011      	ands	r1, r2
 8003a2e:	2280      	movs	r2, #128	; 0x80
 8003a30:	0352      	lsls	r2, r2, #13
 8003a32:	430a      	orrs	r2, r1
 8003a34:	6022      	str	r2, [r4, #0]
		GPIOA->BRR = GPIO_PIN_10;
 8003a36:	2280      	movs	r2, #128	; 0x80
 8003a38:	2103      	movs	r1, #3
 8003a3a:	00d2      	lsls	r2, r2, #3
 8003a3c:	62a2      	str	r2, [r4, #40]	; 0x28
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	438a      	bics	r2, r1
 8003a42:	3902      	subs	r1, #2
 8003a44:	430a      	orrs	r2, r1
 8003a46:	601a      	str	r2, [r3, #0]
		GPIOB->BRR = GPIO_PIN_0;
 8003a48:	6299      	str	r1, [r3, #40]	; 0x28
 8003a4a:	6823      	ldr	r3, [r4, #0]
 8003a4c:	4a11      	ldr	r2, [pc, #68]	; (8003a94 <playInputTune+0x134>)
 8003a4e:	401a      	ands	r2, r3
 8003a50:	2380      	movs	r3, #128	; 0x80
 8003a52:	02db      	lsls	r3, r3, #11
 8003a54:	4313      	orrs	r3, r2
 8003a56:	6023      	str	r3, [r4, #0]
		GPIOA->BRR = GPIO_PIN_9;
 8003a58:	2380      	movs	r3, #128	; 0x80
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8003a5e:	6823      	ldr	r3, [r4, #0]
 8003a60:	4a0f      	ldr	r2, [pc, #60]	; (8003aa0 <playInputTune+0x140>)
 8003a62:	401a      	ands	r2, r3
 8003a64:	2380      	movs	r3, #128	; 0x80
 8003a66:	01db      	lsls	r3, r3, #7
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	6023      	str	r3, [r4, #0]
		GPIOA->BRR = GPIO_PIN_7;
 8003a6c:	2380      	movs	r3, #128	; 0x80
 8003a6e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003a70:	6823      	ldr	r3, [r4, #0]
 8003a72:	4033      	ands	r3, r6
 8003a74:	2680      	movs	r6, #128	; 0x80
 8003a76:	0276      	lsls	r6, r6, #9
 8003a78:	431e      	orrs	r6, r3
		GPIOA->BRR = GPIO_PIN_8;
 8003a7a:	2380      	movs	r3, #128	; 0x80
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	6026      	str	r6, [r4, #0]
 8003a80:	62a3      	str	r3, [r4, #40]	; 0x28
	allOff();
	TIM1->PSC = 0;
 8003a82:	2300      	movs	r3, #0
 8003a84:	62ab      	str	r3, [r5, #40]	; 0x28
}
 8003a86:	bd70      	pop	{r4, r5, r6, pc}
 8003a88:	40012c00 	.word	0x40012c00
 8003a8c:	48000400 	.word	0x48000400
 8003a90:	ffcfffff 	.word	0xffcfffff
 8003a94:	fff3ffff 	.word	0xfff3ffff
 8003a98:	20000034 	.word	0x20000034
 8003a9c:	200000d3 	.word	0x200000d3
 8003aa0:	ffff3fff 	.word	0xffff3fff
 8003aa4:	fffcffff 	.word	0xfffcffff

08003aa8 <HAL_ADC_ConvCpltCallback>:

void getADCs(){
	//voltageraw = ADC1ConvertedValues[0];
	currentraw = ADC1ConvertedValues[0];
 8003aa8:	4b03      	ldr	r3, [pc, #12]	; (8003ab8 <HAL_ADC_ConvCpltCallback+0x10>)
 8003aaa:	4a04      	ldr	r2, [pc, #16]	; (8003abc <HAL_ADC_ConvCpltCallback+0x14>)
 8003aac:	6819      	ldr	r1, [r3, #0]
 8003aae:	6011      	str	r1, [r2, #0]
	tempraw = ADC1ConvertedValues[1];
 8003ab0:	685a      	ldr	r2, [r3, #4]
 8003ab2:	4b03      	ldr	r3, [pc, #12]	; (8003ac0 <HAL_ADC_ConvCpltCallback+0x18>)
 8003ab4:	601a      	str	r2, [r3, #0]


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
	getADCs();
}
 8003ab6:	4770      	bx	lr
 8003ab8:	20000078 	.word	0x20000078
 8003abc:	200000ac 	.word	0x200000ac
 8003ac0:	20000110 	.word	0x20000110

08003ac4 <detectInput>:


void detectInput(){
 8003ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ac6:	4645      	mov	r5, r8
 8003ac8:	46de      	mov	lr, fp
 8003aca:	4657      	mov	r7, sl
 8003acc:	464e      	mov	r6, r9
	smallestnumber = 20000;
 8003ace:	4b4b      	ldr	r3, [pc, #300]	; (8003bfc <detectInput+0x138>)
void detectInput(){
 8003ad0:	b5e0      	push	{r5, r6, r7, lr}
	smallestnumber = 20000;
 8003ad2:	4d4b      	ldr	r5, [pc, #300]	; (8003c00 <detectInput+0x13c>)
 8003ad4:	469b      	mov	fp, r3
 8003ad6:	601d      	str	r5, [r3, #0]
	dshot = 0;
 8003ad8:	4b4a      	ldr	r3, [pc, #296]	; (8003c04 <detectInput+0x140>)
 8003ada:	4698      	mov	r8, r3
 8003adc:	2300      	movs	r3, #0
 8003ade:	4642      	mov	r2, r8
 8003ae0:	7013      	strb	r3, [r2, #0]
	proshot = 0;
 8003ae2:	4a49      	ldr	r2, [pc, #292]	; (8003c08 <detectInput+0x144>)
 8003ae4:	7013      	strb	r3, [r2, #0]
 8003ae6:	4691      	mov	r9, r2
	multishot = 0;
 8003ae8:	4a48      	ldr	r2, [pc, #288]	; (8003c0c <detectInput+0x148>)
 8003aea:	7013      	strb	r3, [r2, #0]
	oneshot42 = 0;
 8003aec:	4a48      	ldr	r2, [pc, #288]	; (8003c10 <detectInput+0x14c>)
 8003aee:	7013      	strb	r3, [r2, #0]
	oneshot125 = 0;
 8003af0:	4a48      	ldr	r2, [pc, #288]	; (8003c14 <detectInput+0x150>)
 8003af2:	7013      	strb	r3, [r2, #0]
	servoPwm = 0;
 8003af4:	4a48      	ldr	r2, [pc, #288]	; (8003c18 <detectInput+0x154>)
 8003af6:	7013      	strb	r3, [r2, #0]
//	int lastnumber = dma_buffer[0];
	for ( int j = 1 ; j < input_buffer_size; j++){
 8003af8:	4b48      	ldr	r3, [pc, #288]	; (8003c1c <detectInput+0x158>)
	servoPwm = 0;
 8003afa:	4692      	mov	sl, r2
	for ( int j = 1 ; j < input_buffer_size; j++){
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	dc00      	bgt.n	8003b04 <detectInput+0x40>
 8003b02:	e077      	b.n	8003bf4 <detectInput+0x130>
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	469c      	mov	ip, r3
 8003b08:	002f      	movs	r7, r5
 8003b0a:	4945      	ldr	r1, [pc, #276]	; (8003c20 <detectInput+0x15c>)
 8003b0c:	1f0a      	subs	r2, r1, #4
 8003b0e:	4494      	add	ip, r2

		if(dma_buffer[j]  < smallestnumber){ // blank space
 8003b10:	680b      	ldr	r3, [r1, #0]
 8003b12:	003a      	movs	r2, r7
 8003b14:	001c      	movs	r4, r3
 8003b16:	42bb      	cmp	r3, r7
 8003b18:	d300      	bcc.n	8003b1c <detectInput+0x58>
 8003b1a:	003c      	movs	r4, r7
 8003b1c:	0027      	movs	r7, r4
 8003b1e:	001e      	movs	r6, r3
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d900      	bls.n	8003b26 <detectInput+0x62>
 8003b24:	0016      	movs	r6, r2
 8003b26:	0028      	movs	r0, r5
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d200      	bcs.n	8003b2e <detectInput+0x6a>
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	3104      	adds	r1, #4
 8003b30:	0005      	movs	r5, r0
	for ( int j = 1 ; j < input_buffer_size; j++){
 8003b32:	4561      	cmp	r1, ip
 8003b34:	d1ec      	bne.n	8003b10 <detectInput+0x4c>
 8003b36:	465b      	mov	r3, fp
 8003b38:	6018      	str	r0, [r3, #0]
			smallestnumber = dma_buffer[j];
		}

	}

	if ((smallestnumber > 3)&&(smallestnumber < 22)){
 8003b3a:	1f33      	subs	r3, r6, #4
 8003b3c:	2b11      	cmp	r3, #17
 8003b3e:	d82e      	bhi.n	8003b9e <detectInput+0xda>
		dshot = 1;
 8003b40:	2301      	movs	r3, #1
 8003b42:	4642      	mov	r2, r8
 8003b44:	7013      	strb	r3, [r2, #0]
		TIM15->PSC = 20;
 8003b46:	2214      	movs	r2, #20
 8003b48:	4b36      	ldr	r3, [pc, #216]	; (8003c24 <detectInput+0x160>)
		IC_buffer_size = 32;
 8003b4a:	4d37      	ldr	r5, [pc, #220]	; (8003c28 <detectInput+0x164>)
		TIM15->PSC = 20;
 8003b4c:	629a      	str	r2, [r3, #40]	; 0x28
		IC_buffer_size = 32;
 8003b4e:	2320      	movs	r3, #32
		TIM16->ARR = 8000;
 8003b50:	22fa      	movs	r2, #250	; 0xfa
		IC_buffer_size = 32;
 8003b52:	602b      	str	r3, [r5, #0]
		TIM16->ARR = 8000;
 8003b54:	4b35      	ldr	r3, [pc, #212]	; (8003c2c <detectInput+0x168>)
 8003b56:	0152      	lsls	r2, r2, #5
 8003b58:	62da      	str	r2, [r3, #44]	; 0x2c
 8003b5a:	0033      	movs	r3, r6
 8003b5c:	3b29      	subs	r3, #41	; 0x29
			TIM16->PSC = 1;
			TIM16->ARR = 8000;
			IC_buffer_size = 32;
		}

	if ((smallestnumber > 40 )&&(smallestnumber < 80)){
 8003b5e:	2b26      	cmp	r3, #38	; 0x26
 8003b60:	d830      	bhi.n	8003bc4 <detectInput+0x100>
		proshot = 1;
 8003b62:	2301      	movs	r3, #1
 8003b64:	464a      	mov	r2, r9
 8003b66:	7013      	strb	r3, [r2, #0]
		TIM15->PSC = 5;
 8003b68:	2205      	movs	r2, #5
 8003b6a:	4b2e      	ldr	r3, [pc, #184]	; (8003c24 <detectInput+0x160>)
 8003b6c:	629a      	str	r2, [r3, #40]	; 0x28
		IC_buffer_size = 8;
 8003b6e:	2308      	movs	r3, #8
		TIM16->ARR = 8000;
 8003b70:	22fa      	movs	r2, #250	; 0xfa
		IC_buffer_size = 8;
 8003b72:	602b      	str	r3, [r5, #0]
		TIM16->ARR = 8000;
 8003b74:	4b2d      	ldr	r3, [pc, #180]	; (8003c2c <detectInput+0x168>)
 8003b76:	0152      	lsls	r2, r2, #5
 8003b78:	62da      	str	r2, [r3, #44]	; 0x2c
		HAL_TIM_Base_Stop(&htim16);
		IC_buffer_size = 6;

	}

	if (smallestnumber == 0){
 8003b7a:	465b      	mov	r3, fp
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d131      	bne.n	8003be6 <detectInput+0x122>
		inputSet = 0;
 8003b82:	4a2b      	ldr	r2, [pc, #172]	; (8003c30 <detectInput+0x16c>)
 8003b84:	7013      	strb	r3, [r2, #0]
		inputSet = 1;

		HAL_Delay(50);
		//	playInputTune();
	}
	HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , IC_buffer_size);
 8003b86:	882b      	ldrh	r3, [r5, #0]
 8003b88:	4a2a      	ldr	r2, [pc, #168]	; (8003c34 <detectInput+0x170>)
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	482a      	ldr	r0, [pc, #168]	; (8003c38 <detectInput+0x174>)
 8003b8e:	f7fd fff5 	bl	8001b7c <HAL_TIM_IC_Start_DMA>
}
 8003b92:	bc3c      	pop	{r2, r3, r4, r5}
 8003b94:	4690      	mov	r8, r2
 8003b96:	4699      	mov	r9, r3
 8003b98:	46a2      	mov	sl, r4
 8003b9a:	46ab      	mov	fp, r5
 8003b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((smallestnumber > 22)&&(smallestnumber < 30)){
 8003b9e:	3e17      	subs	r6, #23
 8003ba0:	3b25      	subs	r3, #37	; 0x25
 8003ba2:	2e06      	cmp	r6, #6
 8003ba4:	d828      	bhi.n	8003bf8 <detectInput+0x134>
			dshot = 1;
 8003ba6:	2001      	movs	r0, #1
 8003ba8:	4642      	mov	r2, r8
 8003baa:	7010      	strb	r0, [r2, #0]
			TIM15->PSC = 32;
 8003bac:	2220      	movs	r2, #32
 8003bae:	491d      	ldr	r1, [pc, #116]	; (8003c24 <detectInput+0x160>)
			IC_buffer_size = 32;
 8003bb0:	4d1d      	ldr	r5, [pc, #116]	; (8003c28 <detectInput+0x164>)
			TIM15->PSC = 32;
 8003bb2:	628a      	str	r2, [r1, #40]	; 0x28
			TIM16->PSC = 1;
 8003bb4:	491d      	ldr	r1, [pc, #116]	; (8003c2c <detectInput+0x168>)
 8003bb6:	6288      	str	r0, [r1, #40]	; 0x28
			TIM16->ARR = 8000;
 8003bb8:	20fa      	movs	r0, #250	; 0xfa
 8003bba:	0140      	lsls	r0, r0, #5
 8003bbc:	62c8      	str	r0, [r1, #44]	; 0x2c
			IC_buffer_size = 32;
 8003bbe:	602a      	str	r2, [r5, #0]
	if ((smallestnumber > 40 )&&(smallestnumber < 80)){
 8003bc0:	2b26      	cmp	r3, #38	; 0x26
 8003bc2:	d9ce      	bls.n	8003b62 <detectInput+0x9e>
	if (smallestnumber > 100){
 8003bc4:	2c64      	cmp	r4, #100	; 0x64
 8003bc6:	ddd8      	ble.n	8003b7a <detectInput+0xb6>
		servoPwm = 1;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	4652      	mov	r2, sl
 8003bcc:	7013      	strb	r3, [r2, #0]
		TIM15->PSC = 47;
 8003bce:	222f      	movs	r2, #47	; 0x2f
 8003bd0:	4b14      	ldr	r3, [pc, #80]	; (8003c24 <detectInput+0x160>)
		HAL_TIM_Base_Stop(&htim16);
 8003bd2:	481a      	ldr	r0, [pc, #104]	; (8003c3c <detectInput+0x178>)
		TIM15->PSC = 47;
 8003bd4:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_TIM_Base_Stop(&htim16);
 8003bd6:	f7fd fe4b 	bl	8001870 <HAL_TIM_Base_Stop>
		IC_buffer_size = 6;
 8003bda:	2306      	movs	r3, #6
 8003bdc:	602b      	str	r3, [r5, #0]
	if (smallestnumber == 0){
 8003bde:	465b      	mov	r3, fp
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d0cd      	beq.n	8003b82 <detectInput+0xbe>
		inputSet = 1;
 8003be6:	2201      	movs	r2, #1
 8003be8:	4b11      	ldr	r3, [pc, #68]	; (8003c30 <detectInput+0x16c>)
		HAL_Delay(50);
 8003bea:	2032      	movs	r0, #50	; 0x32
		inputSet = 1;
 8003bec:	701a      	strb	r2, [r3, #0]
		HAL_Delay(50);
 8003bee:	f7fc fc31 	bl	8000454 <HAL_Delay>
 8003bf2:	e7c8      	b.n	8003b86 <detectInput+0xc2>
 8003bf4:	4d0c      	ldr	r5, [pc, #48]	; (8003c28 <detectInput+0x164>)
 8003bf6:	e7e7      	b.n	8003bc8 <detectInput+0x104>
 8003bf8:	4d0b      	ldr	r5, [pc, #44]	; (8003c28 <detectInput+0x164>)
 8003bfa:	e7b0      	b.n	8003b5e <detectInput+0x9a>
 8003bfc:	20000038 	.word	0x20000038
 8003c00:	00004e20 	.word	0x00004e20
 8003c04:	200000b4 	.word	0x200000b4
 8003c08:	200000e4 	.word	0x200000e4
 8003c0c:	200000c9 	.word	0x200000c9
 8003c10:	200000d1 	.word	0x200000d1
 8003c14:	200000d0 	.word	0x200000d0
 8003c18:	200000f0 	.word	0x200000f0
 8003c1c:	20000020 	.word	0x20000020
 8003c20:	20000230 	.word	0x20000230
 8003c24:	40014000 	.word	0x40014000
 8003c28:	20000000 	.word	0x20000000
 8003c2c:	40014400 	.word	0x40014400
 8003c30:	200000c8 	.word	0x200000c8
 8003c34:	2000022c 	.word	0x2000022c
 8003c38:	20000158 	.word	0x20000158
 8003c3c:	20000494 	.word	0x20000494

08003c40 <computeProshotDMA>:

void computeProshotDMA(){

total = dma_buffer[1]+ dma_buffer[2] + dma_buffer[3] + dma_buffer[4]+ dma_buffer[5] + dma_buffer[6] + dma_buffer[7];
 8003c40:	4a31      	ldr	r2, [pc, #196]	; (8003d08 <computeProshotDMA+0xc8>)
void computeProshotDMA(){
 8003c42:	b570      	push	{r4, r5, r6, lr}
total = dma_buffer[1]+ dma_buffer[2] + dma_buffer[3] + dma_buffer[4]+ dma_buffer[5] + dma_buffer[6] + dma_buffer[7];
 8003c44:	6916      	ldr	r6, [r2, #16]
 8003c46:	6850      	ldr	r0, [r2, #4]
 8003c48:	46b4      	mov	ip, r6
 8003c4a:	6893      	ldr	r3, [r2, #8]
 8003c4c:	68d5      	ldr	r5, [r2, #12]
 8003c4e:	6996      	ldr	r6, [r2, #24]
 8003c50:	18c3      	adds	r3, r0, r3
 8003c52:	195b      	adds	r3, r3, r5
 8003c54:	4463      	add	r3, ip
 8003c56:	46b4      	mov	ip, r6
 8003c58:	6954      	ldr	r4, [r2, #20]
 8003c5a:	69d1      	ldr	r1, [r2, #28]
 8003c5c:	191b      	adds	r3, r3, r4
 8003c5e:	4463      	add	r3, ip
 8003c60:	4e2a      	ldr	r6, [pc, #168]	; (8003d0c <computeProshotDMA+0xcc>)
 8003c62:	185b      	adds	r3, r3, r1
 8003c64:	6033      	str	r3, [r6, #0]

   if (( total < 118 && total > 98)&& (dma_buffer[0]> 100)){
 8003c66:	3b63      	subs	r3, #99	; 0x63
 8003c68:	2b12      	cmp	r3, #18
 8003c6a:	d836      	bhi.n	8003cda <computeProshotDMA+0x9a>
 8003c6c:	6813      	ldr	r3, [r2, #0]
 8003c6e:	2b64      	cmp	r3, #100	; 0x64
 8003c70:	d933      	bls.n	8003cda <computeProshotDMA+0x9a>
   for (int i = 1; i < 8; i +=2){
    propulse[(i-1) / 2] = (dma_buffer[i] - 7);
 8003c72:	4a27      	ldr	r2, [pc, #156]	; (8003d10 <computeProshotDMA+0xd0>)
 8003c74:	1fcb      	subs	r3, r1, #7
 8003c76:	3807      	subs	r0, #7
 8003c78:	3d07      	subs	r5, #7
 8003c7a:	3c07      	subs	r4, #7
 8003c7c:	6010      	str	r0, [r2, #0]
 8003c7e:	60d3      	str	r3, [r2, #12]
 8003c80:	6055      	str	r5, [r2, #4]
 8003c82:	6094      	str	r4, [r2, #8]
					}
   }else{

	   return;
   }
	calcCRC = ((propulse[0]^propulse[1]^propulse[2])<<3
 8003c84:	0002      	movs	r2, r0
 8003c86:	406a      	eors	r2, r5
 8003c88:	4062      	eors	r2, r4
							|(propulse[0]^propulse[1]^propulse[2])<<2
 8003c8a:	0096      	lsls	r6, r2, #2
	calcCRC = ((propulse[0]^propulse[1]^propulse[2])<<3
 8003c8c:	00d1      	lsls	r1, r2, #3
							|(propulse[0]^propulse[1]^propulse[2])<<2
 8003c8e:	4331      	orrs	r1, r6
							|(propulse[0]^propulse[1]^propulse[2])<<1
							|(propulse[0]^propulse[1]^propulse[2]));
 8003c90:	4311      	orrs	r1, r2
							|(propulse[0]^propulse[1]^propulse[2])<<1
 8003c92:	0052      	lsls	r2, r2, #1
							|(propulse[0]^propulse[1]^propulse[2]));
 8003c94:	4311      	orrs	r1, r2
	calcCRC = ((propulse[0]^propulse[1]^propulse[2])<<3
 8003c96:	4a1f      	ldr	r2, [pc, #124]	; (8003d14 <computeProshotDMA+0xd4>)
							|(propulse[0]^propulse[1]^propulse[2]));
 8003c98:	b2c9      	uxtb	r1, r1
	calcCRC = ((propulse[0]^propulse[1]^propulse[2])<<3
 8003c9a:	7011      	strb	r1, [r2, #0]

	checkCRC = (propulse[3]<<3 | propulse[3]<<2 | propulse[3]<<1 | propulse[3]);
 8003c9c:	009e      	lsls	r6, r3, #2
 8003c9e:	00da      	lsls	r2, r3, #3
 8003ca0:	4332      	orrs	r2, r6
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	005b      	lsls	r3, r3, #1
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	4a1b      	ldr	r2, [pc, #108]	; (8003d18 <computeProshotDMA+0xd8>)
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	7013      	strb	r3, [r2, #0]
    if ( checkCRC == calcCRC){
 8003cae:	4299      	cmp	r1, r3
 8003cb0:	d021      	beq.n	8003cf6 <computeProshotDMA+0xb6>
 8003cb2:	4b1a      	ldr	r3, [pc, #104]	; (8003d1c <computeProshotDMA+0xdc>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
    	tocheck = ((propulse[0]<<7 | propulse[1]<<3 | propulse[2]>>1));
    }else{
 //   	error++;
    }
    if (tocheck > 47 && tocheck < 2048){
 8003cb6:	001a      	movs	r2, r3
 8003cb8:	4919      	ldr	r1, [pc, #100]	; (8003d20 <computeProshotDMA+0xe0>)
 8003cba:	3a30      	subs	r2, #48	; 0x30
 8003cbc:	428a      	cmp	r2, r1
 8003cbe:	d914      	bls.n	8003cea <computeProshotDMA+0xaa>
    	newinput = tocheck ;
    				commandcount = 0;



    			}else if (tocheck > 1 && tocheck < 48 && input == 0){
 8003cc0:	1e9a      	subs	r2, r3, #2
 8003cc2:	2a2d      	cmp	r2, #45	; 0x2d
 8003cc4:	d90a      	bls.n	8003cdc <computeProshotDMA+0x9c>

    					dshotcommand = tocheck ;
    			}else{
    				commandcount++;
 8003cc6:	4917      	ldr	r1, [pc, #92]	; (8003d24 <computeProshotDMA+0xe4>)
 8003cc8:	680a      	ldr	r2, [r1, #0]
 8003cca:	3201      	adds	r2, #1
 8003ccc:	600a      	str	r2, [r1, #0]
    				if (commandcount > 1){
 8003cce:	2a01      	cmp	r2, #1
 8003cd0:	dd03      	ble.n	8003cda <computeProshotDMA+0x9a>
    				newinput = tocheck ;
 8003cd2:	4a15      	ldr	r2, [pc, #84]	; (8003d28 <computeProshotDMA+0xe8>)
 8003cd4:	6013      	str	r3, [r2, #0]
    			    commandcount = 0;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	600b      	str	r3, [r1, #0]
    			}
    			}

}
 8003cda:	bd70      	pop	{r4, r5, r6, pc}
    			}else if (tocheck > 1 && tocheck < 48 && input == 0){
 8003cdc:	4a13      	ldr	r2, [pc, #76]	; (8003d2c <computeProshotDMA+0xec>)
 8003cde:	6812      	ldr	r2, [r2, #0]
 8003ce0:	2a00      	cmp	r2, #0
 8003ce2:	d1f0      	bne.n	8003cc6 <computeProshotDMA+0x86>
    					dshotcommand = tocheck ;
 8003ce4:	4a12      	ldr	r2, [pc, #72]	; (8003d30 <computeProshotDMA+0xf0>)
 8003ce6:	6013      	str	r3, [r2, #0]
 8003ce8:	e7f7      	b.n	8003cda <computeProshotDMA+0x9a>
    	newinput = tocheck ;
 8003cea:	4a0f      	ldr	r2, [pc, #60]	; (8003d28 <computeProshotDMA+0xe8>)
 8003cec:	6013      	str	r3, [r2, #0]
    				commandcount = 0;
 8003cee:	2200      	movs	r2, #0
 8003cf0:	4b0c      	ldr	r3, [pc, #48]	; (8003d24 <computeProshotDMA+0xe4>)
 8003cf2:	601a      	str	r2, [r3, #0]
 8003cf4:	e7f1      	b.n	8003cda <computeProshotDMA+0x9a>
    	tocheck = ((propulse[0]<<7 | propulse[1]<<3 | propulse[2]>>1));
 8003cf6:	01c3      	lsls	r3, r0, #7
 8003cf8:	00ed      	lsls	r5, r5, #3
 8003cfa:	432b      	orrs	r3, r5
 8003cfc:	1064      	asrs	r4, r4, #1
 8003cfe:	4a07      	ldr	r2, [pc, #28]	; (8003d1c <computeProshotDMA+0xdc>)
 8003d00:	4323      	orrs	r3, r4
 8003d02:	6013      	str	r3, [r2, #0]
 8003d04:	e7d7      	b.n	8003cb6 <computeProshotDMA+0x76>
 8003d06:	46c0      	nop			; (mov r8, r8)
 8003d08:	2000022c 	.word	0x2000022c
 8003d0c:	20000400 	.word	0x20000400
 8003d10:	200000d4 	.word	0x200000d4
 8003d14:	20000198 	.word	0x20000198
 8003d18:	200001ac 	.word	0x200001ac
 8003d1c:	20000118 	.word	0x20000118
 8003d20:	000007cf 	.word	0x000007cf
 8003d24:	2000009c 	.word	0x2000009c
 8003d28:	200000cc 	.word	0x200000cc
 8003d2c:	200000c4 	.word	0x200000c4
 8003d30:	200000b8 	.word	0x200000b8

08003d34 <computeServoInput>:



void computeServoInput(){

	if ( dma_buffer[1] < 2000 && dma_buffer[1] > 1000){
 8003d34:	4b27      	ldr	r3, [pc, #156]	; (8003dd4 <computeServoInput+0xa0>)
 8003d36:	4a28      	ldr	r2, [pc, #160]	; (8003dd8 <computeServoInput+0xa4>)
 8003d38:	6858      	ldr	r0, [r3, #4]
void computeServoInput(){
 8003d3a:	b510      	push	{r4, lr}
	if ( dma_buffer[1] < 2000 && dma_buffer[1] > 1000){
 8003d3c:	1881      	adds	r1, r0, r2
 8003d3e:	4a27      	ldr	r2, [pc, #156]	; (8003ddc <computeServoInput+0xa8>)
		if(dma_buffer[2]< 1000 || dma_buffer[2] > 2500){
 8003d40:	689b      	ldr	r3, [r3, #8]
	if ( dma_buffer[1] < 2000 && dma_buffer[1] > 1000){
 8003d42:	4291      	cmp	r1, r2
 8003d44:	d813      	bhi.n	8003d6e <computeServoInput+0x3a>
		if(dma_buffer[2]< 1000 || dma_buffer[2] > 2500){
 8003d46:	4a26      	ldr	r2, [pc, #152]	; (8003de0 <computeServoInput+0xac>)
 8003d48:	4694      	mov	ip, r2
 8003d4a:	4a26      	ldr	r2, [pc, #152]	; (8003de4 <computeServoInput+0xb0>)
 8003d4c:	4463      	add	r3, ip
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d821      	bhi.n	8003d96 <computeServoInput+0x62>
 8003d52:	4b25      	ldr	r3, [pc, #148]	; (8003de8 <computeServoInput+0xb4>)
		servorawinput = map(dma_buffer[2], 1100,2000,0,2000);
		}
	}


	if (servorawinput - newinput > max_servo_deviation){
 8003d54:	4925      	ldr	r1, [pc, #148]	; (8003dec <computeServoInput+0xb8>)
 8003d56:	4a26      	ldr	r2, [pc, #152]	; (8003df0 <computeServoInput+0xbc>)
 8003d58:	6818      	ldr	r0, [r3, #0]
 8003d5a:	6812      	ldr	r2, [r2, #0]
 8003d5c:	680b      	ldr	r3, [r1, #0]
 8003d5e:	1ac4      	subs	r4, r0, r3
 8003d60:	4294      	cmp	r4, r2
 8003d62:	dc2e      	bgt.n	8003dc2 <computeServoInput+0x8e>
		newinput += max_servo_deviation;
	}else if(newinput - servorawinput > max_servo_deviation){
 8003d64:	1a1c      	subs	r4, r3, r0
 8003d66:	42a2      	cmp	r2, r4
 8003d68:	db2e      	blt.n	8003dc8 <computeServoInput+0x94>
		newinput -= max_servo_deviation;
	}else{
		newinput = servorawinput;
 8003d6a:	6008      	str	r0, [r1, #0]
//			break;
//		}
////		lastnumber = dma_buffer[j];
//	}

}
 8003d6c:	bd10      	pop	{r4, pc}
	}else if( dma_buffer[2] < 2000 && dma_buffer[2] > 1000) {
 8003d6e:	491a      	ldr	r1, [pc, #104]	; (8003dd8 <computeServoInput+0xa4>)
 8003d70:	1859      	adds	r1, r3, r1
 8003d72:	4291      	cmp	r1, r2
 8003d74:	d8ed      	bhi.n	8003d52 <computeServoInput+0x1e>
		if(dma_buffer[1]< 1000 || dma_buffer[1] > 2500){
 8003d76:	4a1a      	ldr	r2, [pc, #104]	; (8003de0 <computeServoInput+0xac>)
 8003d78:	4694      	mov	ip, r2
 8003d7a:	4a1a      	ldr	r2, [pc, #104]	; (8003de4 <computeServoInput+0xb0>)
 8003d7c:	4460      	add	r0, ip
 8003d7e:	4290      	cmp	r0, r2
 8003d80:	d9e7      	bls.n	8003d52 <computeServoInput+0x1e>
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003d82:	4a1c      	ldr	r2, [pc, #112]	; (8003df4 <computeServoInput+0xc0>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d200      	bcs.n	8003d8a <computeServoInput+0x56>
 8003d88:	0013      	movs	r3, r2
 8003d8a:	4a1b      	ldr	r2, [pc, #108]	; (8003df8 <computeServoInput+0xc4>)
 8003d8c:	20fa      	movs	r0, #250	; 0xfa
 8003d8e:	4694      	mov	ip, r2
 8003d90:	00c0      	lsls	r0, r0, #3
 8003d92:	4463      	add	r3, ip
 8003d94:	e007      	b.n	8003da6 <computeServoInput+0x72>
 8003d96:	4b17      	ldr	r3, [pc, #92]	; (8003df4 <computeServoInput+0xc0>)
 8003d98:	4298      	cmp	r0, r3
 8003d9a:	d318      	bcc.n	8003dce <computeServoInput+0x9a>
 8003d9c:	4b16      	ldr	r3, [pc, #88]	; (8003df8 <computeServoInput+0xc4>)
 8003d9e:	469c      	mov	ip, r3
 8003da0:	23fa      	movs	r3, #250	; 0xfa
 8003da2:	4460      	add	r0, ip
 8003da4:	00db      	lsls	r3, r3, #3
 8003da6:	21e1      	movs	r1, #225	; 0xe1
 8003da8:	4358      	muls	r0, r3
 8003daa:	0089      	lsls	r1, r1, #2
 8003dac:	f7fc fa36 	bl	800021c <__divsi3>
		servorawinput = map(dma_buffer[2], 1100,2000,0,2000);
 8003db0:	4b0d      	ldr	r3, [pc, #52]	; (8003de8 <computeServoInput+0xb4>)
	if (servorawinput - newinput > max_servo_deviation){
 8003db2:	490e      	ldr	r1, [pc, #56]	; (8003dec <computeServoInput+0xb8>)
 8003db4:	4a0e      	ldr	r2, [pc, #56]	; (8003df0 <computeServoInput+0xbc>)
		servorawinput = map(dma_buffer[2], 1100,2000,0,2000);
 8003db6:	6018      	str	r0, [r3, #0]
	if (servorawinput - newinput > max_servo_deviation){
 8003db8:	6812      	ldr	r2, [r2, #0]
 8003dba:	680b      	ldr	r3, [r1, #0]
 8003dbc:	1ac4      	subs	r4, r0, r3
 8003dbe:	4294      	cmp	r4, r2
 8003dc0:	ddd0      	ble.n	8003d64 <computeServoInput+0x30>
		newinput += max_servo_deviation;
 8003dc2:	189b      	adds	r3, r3, r2
 8003dc4:	600b      	str	r3, [r1, #0]
 8003dc6:	e7d1      	b.n	8003d6c <computeServoInput+0x38>
		newinput -= max_servo_deviation;
 8003dc8:	1a9b      	subs	r3, r3, r2
 8003dca:	600b      	str	r3, [r1, #0]
 8003dcc:	e7ce      	b.n	8003d6c <computeServoInput+0x38>
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003dce:	0018      	movs	r0, r3
 8003dd0:	e7e4      	b.n	8003d9c <computeServoInput+0x68>
 8003dd2:	46c0      	nop			; (mov r8, r8)
 8003dd4:	2000022c 	.word	0x2000022c
 8003dd8:	fffffc17 	.word	0xfffffc17
 8003ddc:	000003e6 	.word	0x000003e6
 8003de0:	fffffc18 	.word	0xfffffc18
 8003de4:	000005dc 	.word	0x000005dc
 8003de8:	200000f4 	.word	0x200000f4
 8003dec:	200000cc 	.word	0x200000cc
 8003df0:	20000024 	.word	0x20000024
 8003df4:	0000044c 	.word	0x0000044c
 8003df8:	fffffbb4 	.word	0xfffffbb4

08003dfc <transferComplete>:
//		}
//		lastnumber = dma_buffer[j];
//	}
//}

void transferComplete(){
 8003dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
	TIM2->CNT = 0;
 8003dfe:	2280      	movs	r2, #128	; 0x80
void transferComplete(){
 8003e00:	46de      	mov	lr, fp
 8003e02:	4657      	mov	r7, sl
 8003e04:	464e      	mov	r6, r9
 8003e06:	4645      	mov	r5, r8
	TIM2->CNT = 0;
 8003e08:	2300      	movs	r3, #0
void transferComplete(){
 8003e0a:	b5e0      	push	{r5, r6, r7, lr}
	TIM2->CNT = 0;
 8003e0c:	05d2      	lsls	r2, r2, #23
 8003e0e:	6253      	str	r3, [r2, #36]	; 0x24
//	compit = 0;
	signaltimeout = 0;
 8003e10:	4a56      	ldr	r2, [pc, #344]	; (8003f6c <transferComplete+0x170>)
void transferComplete(){
 8003e12:	b083      	sub	sp, #12
	signaltimeout = 0;
 8003e14:	6013      	str	r3, [r2, #0]
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);


	if (inputSet == 1){
 8003e16:	4b56      	ldr	r3, [pc, #344]	; (8003f70 <transferComplete+0x174>)
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d006      	beq.n	8003e2c <transferComplete+0x30>



}

}
 8003e1e:	b003      	add	sp, #12
 8003e20:	bc3c      	pop	{r2, r3, r4, r5}
 8003e22:	4690      	mov	r8, r2
 8003e24:	4699      	mov	r9, r3
 8003e26:	46a2      	mov	sl, r4
 8003e28:	46ab      	mov	fp, r5
 8003e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (dshot == 1){
 8003e2c:	4b51      	ldr	r3, [pc, #324]	; (8003f74 <transferComplete+0x178>)
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d010      	beq.n	8003e56 <transferComplete+0x5a>
		if (proshot == 1){
 8003e34:	4b50      	ldr	r3, [pc, #320]	; (8003f78 <transferComplete+0x17c>)
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d06c      	beq.n	8003f16 <transferComplete+0x11a>
		if  (servoPwm == 1){
 8003e3c:	4b4f      	ldr	r3, [pc, #316]	; (8003f7c <transferComplete+0x180>)
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d1ec      	bne.n	8003e1e <transferComplete+0x22>
			computeServoInput();
 8003e44:	f7ff ff76 	bl	8003d34 <computeServoInput>
				HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , 3);
 8003e48:	2303      	movs	r3, #3
 8003e4a:	4a4d      	ldr	r2, [pc, #308]	; (8003f80 <transferComplete+0x184>)
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	484d      	ldr	r0, [pc, #308]	; (8003f84 <transferComplete+0x188>)
 8003e50:	f7fd fe94 	bl	8001b7c <HAL_TIM_IC_Start_DMA>
 8003e54:	e7e3      	b.n	8003e1e <transferComplete+0x22>
	if (dma_buffer[0] < 20){
 8003e56:	4b4a      	ldr	r3, [pc, #296]	; (8003f80 <transferComplete+0x184>)
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	2a13      	cmp	r2, #19
 8003e5c:	d805      	bhi.n	8003e6a <transferComplete+0x6e>
			stop_time = TIM2->CNT;
 8003e5e:	2380      	movs	r3, #128	; 0x80
 8003e60:	05db      	lsls	r3, r3, #23
 8003e62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e64:	4b48      	ldr	r3, [pc, #288]	; (8003f88 <transferComplete+0x18c>)
 8003e66:	601a      	str	r2, [r3, #0]
			return;
 8003e68:	e7d9      	b.n	8003e1e <transferComplete+0x22>
	 calcCRC = ((dma_buffer[1]^dma_buffer[9]^dma_buffer[17])<<3
 8003e6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e6c:	6859      	ldr	r1, [r3, #4]
 8003e6e:	4694      	mov	ip, r2
 8003e70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
			          |(dma_buffer[3]^dma_buffer[11]^dma_buffer[19])<<2
 8003e72:	6adf      	ldr	r7, [r3, #44]	; 0x2c
	 calcCRC = ((dma_buffer[1]^dma_buffer[9]^dma_buffer[17])<<3
 8003e74:	0010      	movs	r0, r2
 8003e76:	9201      	str	r2, [sp, #4]
			          |(dma_buffer[3]^dma_buffer[11]^dma_buffer[19])<<2
 8003e78:	68da      	ldr	r2, [r3, #12]
 8003e7a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8003e7c:	4692      	mov	sl, r2
					|(dma_buffer[5]^dma_buffer[13]^dma_buffer[21])<<1
 8003e7e:	695a      	ldr	r2, [r3, #20]
					|(dma_buffer[7]^dma_buffer[15]^dma_buffer[23])
 8003e80:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
					|(dma_buffer[5]^dma_buffer[13]^dma_buffer[21])<<1
 8003e82:	4691      	mov	r9, r2
 8003e84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
	 calcCRC = ((dma_buffer[1]^dma_buffer[9]^dma_buffer[17])<<3
 8003e86:	9100      	str	r1, [sp, #0]
					|(dma_buffer[5]^dma_buffer[13]^dma_buffer[21])<<1
 8003e88:	4693      	mov	fp, r2
					|(dma_buffer[7]^dma_buffer[15]^dma_buffer[23])
 8003e8a:	69da      	ldr	r2, [r3, #28]
					|(dma_buffer[5]^dma_buffer[13]^dma_buffer[21])<<1
 8003e8c:	6b5e      	ldr	r6, [r3, #52]	; 0x34
					|(dma_buffer[7]^dma_buffer[15]^dma_buffer[23])
 8003e8e:	4690      	mov	r8, r2
	 calcCRC = ((dma_buffer[1]^dma_buffer[9]^dma_buffer[17])<<3
 8003e90:	4662      	mov	r2, ip
 8003e92:	404a      	eors	r2, r1
 8003e94:	4042      	eors	r2, r0
 8003e96:	00d0      	lsls	r0, r2, #3
			          |(dma_buffer[3]^dma_buffer[11]^dma_buffer[19])<<2
 8003e98:	4652      	mov	r2, sl
 8003e9a:	407a      	eors	r2, r7
 8003e9c:	4062      	eors	r2, r4
 8003e9e:	0092      	lsls	r2, r2, #2
 8003ea0:	4302      	orrs	r2, r0
					|(dma_buffer[7]^dma_buffer[15]^dma_buffer[23])
 8003ea2:	4640      	mov	r0, r8
 8003ea4:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003ea6:	4068      	eors	r0, r5
 8003ea8:	4048      	eors	r0, r1
 8003eaa:	4302      	orrs	r2, r0
					|(dma_buffer[5]^dma_buffer[13]^dma_buffer[21])<<1
 8003eac:	4648      	mov	r0, r9
 8003eae:	4659      	mov	r1, fp
 8003eb0:	4070      	eors	r0, r6
 8003eb2:	4048      	eors	r0, r1
 8003eb4:	0040      	lsls	r0, r0, #1
	 checkCRC = (dma_buffer[25]<<3 | dma_buffer[27]<<2 | dma_buffer[29]<<1 | dma_buffer[31]);
 8003eb6:	6e59      	ldr	r1, [r3, #100]	; 0x64
					|(dma_buffer[7]^dma_buffer[15]^dma_buffer[23])
 8003eb8:	4302      	orrs	r2, r0
	 calcCRC = ((dma_buffer[1]^dma_buffer[9]^dma_buffer[17])<<3
 8003eba:	4834      	ldr	r0, [pc, #208]	; (8003f8c <transferComplete+0x190>)
					|(dma_buffer[7]^dma_buffer[15]^dma_buffer[23])
 8003ebc:	b2d2      	uxtb	r2, r2
	 calcCRC = ((dma_buffer[1]^dma_buffer[9]^dma_buffer[17])<<3
 8003ebe:	7002      	strb	r2, [r0, #0]
	 checkCRC = (dma_buffer[25]<<3 | dma_buffer[27]<<2 | dma_buffer[29]<<1 | dma_buffer[31]);
 8003ec0:	00c8      	lsls	r0, r1, #3
 8003ec2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8003ec4:	0089      	lsls	r1, r1, #2
 8003ec6:	4308      	orrs	r0, r1
 8003ec8:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8003eca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ecc:	4308      	orrs	r0, r1
 8003ece:	005b      	lsls	r3, r3, #1
 8003ed0:	4303      	orrs	r3, r0
 8003ed2:	482f      	ldr	r0, [pc, #188]	; (8003f90 <transferComplete+0x194>)
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	7003      	strb	r3, [r0, #0]
			if(calcCRC == checkCRC){
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d025      	beq.n	8003f28 <transferComplete+0x12c>
					error++;
 8003edc:	4a2d      	ldr	r2, [pc, #180]	; (8003f94 <transferComplete+0x198>)
 8003ede:	6813      	ldr	r3, [r2, #0]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	6013      	str	r3, [r2, #0]
 8003ee4:	4b2c      	ldr	r3, [pc, #176]	; (8003f98 <transferComplete+0x19c>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
			if (tocheck > 47 && tocheck < 2048){
 8003ee8:	001a      	movs	r2, r3
 8003eea:	492c      	ldr	r1, [pc, #176]	; (8003f9c <transferComplete+0x1a0>)
 8003eec:	3a30      	subs	r2, #48	; 0x30
 8003eee:	428a      	cmp	r2, r1
 8003ef0:	d914      	bls.n	8003f1c <transferComplete+0x120>
			}else if (tocheck > 1 && tocheck < 48 && input == 0){
 8003ef2:	1e9a      	subs	r2, r3, #2
 8003ef4:	2a2d      	cmp	r2, #45	; 0x2d
 8003ef6:	d803      	bhi.n	8003f00 <transferComplete+0x104>
 8003ef8:	4a29      	ldr	r2, [pc, #164]	; (8003fa0 <transferComplete+0x1a4>)
 8003efa:	6812      	ldr	r2, [r2, #0]
 8003efc:	2a00      	cmp	r2, #0
 8003efe:	d031      	beq.n	8003f64 <transferComplete+0x168>
				commandcount++;
 8003f00:	4928      	ldr	r1, [pc, #160]	; (8003fa4 <transferComplete+0x1a8>)
 8003f02:	680a      	ldr	r2, [r1, #0]
 8003f04:	3201      	adds	r2, #1
 8003f06:	600a      	str	r2, [r1, #0]
				if (commandcount > 1){
 8003f08:	2a01      	cmp	r2, #1
 8003f0a:	dda8      	ble.n	8003e5e <transferComplete+0x62>
				newinput = tocheck ;
 8003f0c:	4a26      	ldr	r2, [pc, #152]	; (8003fa8 <transferComplete+0x1ac>)
 8003f0e:	6013      	str	r3, [r2, #0]
			    commandcount = 0;
 8003f10:	2300      	movs	r3, #0
 8003f12:	600b      	str	r3, [r1, #0]
 8003f14:	e7a3      	b.n	8003e5e <transferComplete+0x62>
			computeProshotDMA();
 8003f16:	f7ff fe93 	bl	8003c40 <computeProshotDMA>
			return;
 8003f1a:	e780      	b.n	8003e1e <transferComplete+0x22>
				newinput = tocheck;
 8003f1c:	4a22      	ldr	r2, [pc, #136]	; (8003fa8 <transferComplete+0x1ac>)
 8003f1e:	6013      	str	r3, [r2, #0]
				commandcount = 0;
 8003f20:	2200      	movs	r2, #0
 8003f22:	4b20      	ldr	r3, [pc, #128]	; (8003fa4 <transferComplete+0x1a8>)
 8003f24:	601a      	str	r2, [r3, #0]
 8003f26:	e79a      	b.n	8003e5e <transferComplete+0x62>
						dma_buffer[1]<<10 | dma_buffer[3]<<9 | dma_buffer[5]<<8 | dma_buffer[7]<<7
 8003f28:	4652      	mov	r2, sl
 8003f2a:	0251      	lsls	r1, r2, #9
					| dma_buffer[17]<<2 | dma_buffer[19]<<1 | dma_buffer[21]);
 8003f2c:	465a      	mov	r2, fp
						dma_buffer[1]<<10 | dma_buffer[3]<<9 | dma_buffer[5]<<8 | dma_buffer[7]<<7
 8003f2e:	9b00      	ldr	r3, [sp, #0]
					| dma_buffer[9]<<6 | dma_buffer[11]<<5 | dma_buffer[13]<<4 | dma_buffer[15]<<3
 8003f30:	017f      	lsls	r7, r7, #5
						dma_buffer[1]<<10 | dma_buffer[3]<<9 | dma_buffer[5]<<8 | dma_buffer[7]<<7
 8003f32:	029b      	lsls	r3, r3, #10
 8003f34:	430b      	orrs	r3, r1
					| dma_buffer[17]<<2 | dma_buffer[19]<<1 | dma_buffer[21]);
 8003f36:	4313      	orrs	r3, r2
						dma_buffer[1]<<10 | dma_buffer[3]<<9 | dma_buffer[5]<<8 | dma_buffer[7]<<7
 8003f38:	464a      	mov	r2, r9
 8003f3a:	0212      	lsls	r2, r2, #8
					| dma_buffer[17]<<2 | dma_buffer[19]<<1 | dma_buffer[21]);
 8003f3c:	4313      	orrs	r3, r2
						dma_buffer[1]<<10 | dma_buffer[3]<<9 | dma_buffer[5]<<8 | dma_buffer[7]<<7
 8003f3e:	4642      	mov	r2, r8
 8003f40:	01d2      	lsls	r2, r2, #7
					| dma_buffer[17]<<2 | dma_buffer[19]<<1 | dma_buffer[21]);
 8003f42:	4313      	orrs	r3, r2
					| dma_buffer[9]<<6 | dma_buffer[11]<<5 | dma_buffer[13]<<4 | dma_buffer[15]<<3
 8003f44:	4662      	mov	r2, ip
 8003f46:	0192      	lsls	r2, r2, #6
					| dma_buffer[17]<<2 | dma_buffer[19]<<1 | dma_buffer[21]);
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	433b      	orrs	r3, r7
 8003f4c:	9a01      	ldr	r2, [sp, #4]
					| dma_buffer[9]<<6 | dma_buffer[11]<<5 | dma_buffer[13]<<4 | dma_buffer[15]<<3
 8003f4e:	0136      	lsls	r6, r6, #4
 8003f50:	00ed      	lsls	r5, r5, #3
					| dma_buffer[17]<<2 | dma_buffer[19]<<1 | dma_buffer[21]);
 8003f52:	4333      	orrs	r3, r6
 8003f54:	432b      	orrs	r3, r5
 8003f56:	0095      	lsls	r5, r2, #2
 8003f58:	432b      	orrs	r3, r5
 8003f5a:	0062      	lsls	r2, r4, #1
 8003f5c:	4313      	orrs	r3, r2
				tocheck = (
 8003f5e:	4a0e      	ldr	r2, [pc, #56]	; (8003f98 <transferComplete+0x19c>)
 8003f60:	6013      	str	r3, [r2, #0]
 8003f62:	e7c1      	b.n	8003ee8 <transferComplete+0xec>
					dshotcommand = tocheck ;
 8003f64:	4a11      	ldr	r2, [pc, #68]	; (8003fac <transferComplete+0x1b0>)
 8003f66:	6013      	str	r3, [r2, #0]
 8003f68:	e779      	b.n	8003e5e <transferComplete+0x62>
 8003f6a:	46c0      	nop			; (mov r8, r8)
 8003f6c:	200000f8 	.word	0x200000f8
 8003f70:	200000c8 	.word	0x200000c8
 8003f74:	200000b4 	.word	0x200000b4
 8003f78:	200000e4 	.word	0x200000e4
 8003f7c:	200000f0 	.word	0x200000f0
 8003f80:	2000022c 	.word	0x2000022c
 8003f84:	20000158 	.word	0x20000158
 8003f88:	20000108 	.word	0x20000108
 8003f8c:	20000198 	.word	0x20000198
 8003f90:	200001ac 	.word	0x200001ac
 8003f94:	200000bc 	.word	0x200000bc
 8003f98:	20000118 	.word	0x20000118
 8003f9c:	000007cf 	.word	0x000007cf
 8003fa0:	200000c4 	.word	0x200000c4
 8003fa4:	2000009c 	.word	0x2000009c
 8003fa8:	200000cc 	.word	0x200000cc
 8003fac:	200000b8 	.word	0x200000b8

08003fb0 <SystemClock_Config>:
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8003fb0:	2210      	movs	r2, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8003fb2:	231a      	movs	r3, #26
{
 8003fb4:	b510      	push	{r4, lr}
 8003fb6:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8003fb8:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8003fba:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003fbc:	3b19      	subs	r3, #25
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8003fbe:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8003fc0:	22a0      	movs	r2, #160	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003fc2:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8003fc4:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003fc6:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003fc8:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003fca:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8003fcc:	0392      	lsls	r2, r2, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003fce:	a804      	add	r0, sp, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003fd0:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003fd2:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8003fd4:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8003fd6:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003fd8:	f7fd f8b6 	bl	8001148 <HAL_RCC_OscConfig>
 8003fdc:	2800      	cmp	r0, #0
 8003fde:	d000      	beq.n	8003fe2 <SystemClock_Config+0x32>
 8003fe0:	e7fe      	b.n	8003fe0 <SystemClock_Config+0x30>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003fe2:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003fe4:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003fe6:	9003      	str	r0, [sp, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003fe8:	2101      	movs	r1, #1
 8003fea:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003fec:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003fee:	9401      	str	r4, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003ff0:	f7fd fae2 	bl	80015b8 <HAL_RCC_ClockConfig>
 8003ff4:	2800      	cmp	r0, #0
 8003ff6:	d000      	beq.n	8003ffa <SystemClock_Config+0x4a>
 8003ff8:	e7fe      	b.n	8003ff8 <SystemClock_Config+0x48>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003ffa:	f7fd fbaf 	bl	800175c <HAL_RCC_GetHCLKFreq>
 8003ffe:	21fa      	movs	r1, #250	; 0xfa
 8004000:	0089      	lsls	r1, r1, #2
 8004002:	f7fc f881 	bl	8000108 <__udivsi3>
 8004006:	f7fc fce9 	bl	80009dc <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800400a:	2004      	movs	r0, #4
 800400c:	f7fc fd02 	bl	8000a14 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8004010:	2001      	movs	r0, #1
 8004012:	2200      	movs	r2, #0
 8004014:	2100      	movs	r1, #0
 8004016:	4240      	negs	r0, r0
 8004018:	f7fc fca2 	bl	8000960 <HAL_NVIC_SetPriority>
}
 800401c:	b010      	add	sp, #64	; 0x40
 800401e:	bd10      	pop	{r4, pc}

08004020 <main>:
{
 8004020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004022:	46de      	mov	lr, fp
 8004024:	4645      	mov	r5, r8
 8004026:	464e      	mov	r6, r9
 8004028:	4657      	mov	r7, sl
 800402a:	b5e0      	push	{r5, r6, r7, lr}
 800402c:	b09f      	sub	sp, #124	; 0x7c
  HAL_Init();
 800402e:	f7fc f9f3 	bl	8000418 <HAL_Init>
  SystemClock_Config();
 8004032:	f7ff ffbd 	bl	8003fb0 <SystemClock_Config>
  HAL_FLASH_Unlock();
 8004036:	f7fc fea1 	bl	8000d7c <HAL_FLASH_Unlock>
  EE_Init();
 800403a:	f7fe fb7d 	bl	8002738 <EE_Init>
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 800403e:	2180      	movs	r1, #128	; 0x80
 8004040:	4cc2      	ldr	r4, [pc, #776]	; (800434c <main+0x32c>)
 8004042:	0289      	lsls	r1, r1, #10
 8004044:	6962      	ldr	r2, [r4, #20]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8004046:	2090      	movs	r0, #144	; 0x90
 8004048:	430a      	orrs	r2, r1
 800404a:	6162      	str	r2, [r4, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800404c:	6963      	ldr	r3, [r4, #20]
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_15);

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800404e:	2500      	movs	r5, #0
 8004050:	400b      	ands	r3, r1
  SET_BIT(RCC->AHBENR, Periphs);
 8004052:	2180      	movs	r1, #128	; 0x80
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8004054:	9308      	str	r3, [sp, #32]
  (void)tmpreg;
 8004056:	9b08      	ldr	r3, [sp, #32]
  SET_BIT(RCC->AHBENR, Periphs);
 8004058:	6962      	ldr	r2, [r4, #20]
 800405a:	02c9      	lsls	r1, r1, #11
 800405c:	430a      	orrs	r2, r1
 800405e:	6162      	str	r2, [r4, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8004060:	6963      	ldr	r3, [r4, #20]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004062:	2601      	movs	r6, #1
 8004064:	400b      	ands	r3, r1
 8004066:	9309      	str	r3, [sp, #36]	; 0x24
  (void)tmpreg;
 8004068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800406a:	2380      	movs	r3, #128	; 0x80
 800406c:	05c0      	lsls	r0, r0, #23
 800406e:	021b      	lsls	r3, r3, #8
 8004070:	6283      	str	r3, [r0, #40]	; 0x28
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004072:	a917      	add	r1, sp, #92	; 0x5c
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8004074:	9317      	str	r3, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004076:	9618      	str	r6, [sp, #96]	; 0x60
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004078:	9519      	str	r5, [sp, #100]	; 0x64
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800407a:	951a      	str	r5, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800407c:	951b      	str	r5, [sp, #108]	; 0x6c
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800407e:	f7fe fad7 	bl	8002630 <LL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004082:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8004084:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004086:	4333      	orrs	r3, r6
 8004088:	6163      	str	r3, [r4, #20]
 800408a:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 800408c:	2102      	movs	r1, #2
  __HAL_RCC_DMA1_CLK_ENABLE();
 800408e:	4033      	ands	r3, r6
 8004090:	9307      	str	r3, [sp, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8004092:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004094:	9b07      	ldr	r3, [sp, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8004096:	f7fc fc63 	bl	8000960 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800409a:	2009      	movs	r0, #9
 800409c:	f7fc fc94 	bl	80009c8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 2, 0);
 80040a0:	2200      	movs	r2, #0
 80040a2:	2102      	movs	r1, #2
 80040a4:	200b      	movs	r0, #11
 80040a6:	f7fc fc5b 	bl	8000960 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 80040aa:	200b      	movs	r0, #11
 80040ac:	f7fc fc8c 	bl	80009c8 <HAL_NVIC_EnableIRQ>
  hadc.Instance = ADC1;
 80040b0:	4ca7      	ldr	r4, [pc, #668]	; (8004350 <main+0x330>)
 80040b2:	4ba8      	ldr	r3, [pc, #672]	; (8004354 <main+0x334>)
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80040b4:	0020      	movs	r0, r4
  hadc.Instance = ADC1;
 80040b6:	6023      	str	r3, [r4, #0]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80040b8:	2308      	movs	r3, #8
 80040ba:	6163      	str	r3, [r4, #20]
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC4;
 80040bc:	3338      	adds	r3, #56	; 0x38
 80040be:	4698      	mov	r8, r3
 80040c0:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80040c2:	2380      	movs	r3, #128	; 0x80
 80040c4:	00db      	lsls	r3, r3, #3
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80040c6:	6065      	str	r5, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80040c8:	60a5      	str	r5, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80040ca:	60e5      	str	r5, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80040cc:	6126      	str	r6, [r4, #16]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80040ce:	61a5      	str	r5, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80040d0:	61e5      	str	r5, [r4, #28]
  hadc.Init.ContinuousConvMode = DISABLE;
 80040d2:	6225      	str	r5, [r4, #32]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 80040d4:	6266      	str	r6, [r4, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80040d6:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = ENABLE;
 80040d8:	6326      	str	r6, [r4, #48]	; 0x30
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80040da:	6366      	str	r6, [r4, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80040dc:	f7fc f9cc 	bl	8000478 <HAL_ADC_Init>
 80040e0:	2800      	cmp	r0, #0
 80040e2:	d000      	beq.n	80040e6 <main+0xc6>
 80040e4:	e7fe      	b.n	80040e4 <main+0xc4>
  sConfig.Channel = ADC_CHANNEL_6;
 80040e6:	2306      	movs	r3, #6
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80040e8:	2780      	movs	r7, #128	; 0x80
  sConfig.Channel = ADC_CHANNEL_6;
 80040ea:	9317      	str	r3, [sp, #92]	; 0x5c
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80040ec:	017f      	lsls	r7, r7, #5
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80040ee:	3b03      	subs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80040f0:	a917      	add	r1, sp, #92	; 0x5c
 80040f2:	0020      	movs	r0, r4
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80040f4:	9718      	str	r7, [sp, #96]	; 0x60
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80040f6:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80040f8:	f7fc fada 	bl	80006b0 <HAL_ADC_ConfigChannel>
 80040fc:	2800      	cmp	r0, #0
 80040fe:	d000      	beq.n	8004102 <main+0xe2>
 8004100:	e7fe      	b.n	8004100 <main+0xe0>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8004102:	2310      	movs	r3, #16
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004104:	a917      	add	r1, sp, #92	; 0x5c
 8004106:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8004108:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800410a:	f7fc fad1 	bl	80006b0 <HAL_ADC_ConfigChannel>
 800410e:	2800      	cmp	r0, #0
 8004110:	d000      	beq.n	8004114 <main+0xf4>
 8004112:	e7fe      	b.n	8004112 <main+0xf2>
  hcomp1.Instance = COMP1;
 8004114:	4d90      	ldr	r5, [pc, #576]	; (8004358 <main+0x338>)
 8004116:	4b91      	ldr	r3, [pc, #580]	; (800435c <main+0x33c>)
  hcomp1.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8004118:	60a8      	str	r0, [r5, #8]
  hcomp1.Instance = COMP1;
 800411a:	602b      	str	r3, [r5, #0]
  hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1;
 800411c:	4643      	mov	r3, r8
  hcomp1.Init.Output = COMP_OUTPUT_NONE;
 800411e:	60e8      	str	r0, [r5, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8004120:	6128      	str	r0, [r5, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8004122:	6168      	str	r0, [r5, #20]
  hcomp1.Init.Mode = COMP_MODE_HIGHSPEED;
 8004124:	61a8      	str	r0, [r5, #24]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8004126:	61e8      	str	r0, [r5, #28]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8004128:	0028      	movs	r0, r5
  hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1;
 800412a:	606b      	str	r3, [r5, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 800412c:	622e      	str	r6, [r5, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 800412e:	f7fc fb49 	bl	80007c4 <HAL_COMP_Init>
 8004132:	2800      	cmp	r0, #0
 8004134:	d000      	beq.n	8004138 <main+0x118>
 8004136:	e7fe      	b.n	8004136 <main+0x116>
  htim1.Instance = TIM1;
 8004138:	4c89      	ldr	r4, [pc, #548]	; (8004360 <main+0x340>)
 800413a:	4b8a      	ldr	r3, [pc, #552]	; (8004364 <main+0x344>)
  htim1.Init.Prescaler = 0;
 800413c:	6060      	str	r0, [r4, #4]
  htim1.Instance = TIM1;
 800413e:	6023      	str	r3, [r4, #0]
  htim1.Init.Period = 1999;
 8004140:	4b89      	ldr	r3, [pc, #548]	; (8004368 <main+0x348>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004142:	60a0      	str	r0, [r4, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004144:	6120      	str	r0, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 8004146:	6160      	str	r0, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004148:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800414a:	0020      	movs	r0, r4
  htim1.Init.Period = 1999;
 800414c:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800414e:	f7fd fb0b 	bl	8001768 <HAL_TIM_Base_Init>
 8004152:	2800      	cmp	r0, #0
 8004154:	d000      	beq.n	8004158 <main+0x138>
 8004156:	e7fe      	b.n	8004156 <main+0x136>
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004158:	a90c      	add	r1, sp, #48	; 0x30
 800415a:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800415c:	970c      	str	r7, [sp, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800415e:	f7fd ffdd 	bl	800211c <HAL_TIM_ConfigClockSource>
 8004162:	2800      	cmp	r0, #0
 8004164:	d000      	beq.n	8004168 <main+0x148>
 8004166:	e7fe      	b.n	8004166 <main+0x146>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004168:	0020      	movs	r0, r4
 800416a:	f7fd fbeb 	bl	8001944 <HAL_TIM_PWM_Init>
 800416e:	2800      	cmp	r0, #0
 8004170:	d000      	beq.n	8004174 <main+0x154>
 8004172:	e7fe      	b.n	8004172 <main+0x152>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004174:	900a      	str	r0, [sp, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004176:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004178:	a90a      	add	r1, sp, #40	; 0x28
 800417a:	0020      	movs	r0, r4
 800417c:	f7fe f9f8 	bl	8002570 <HAL_TIMEx_MasterConfigSynchronization>
 8004180:	2800      	cmp	r0, #0
 8004182:	d000      	beq.n	8004186 <main+0x166>
 8004184:	e7fe      	b.n	8004184 <main+0x164>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004186:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 8004188:	9011      	str	r0, [sp, #68]	; 0x44
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800418a:	9012      	str	r0, [sp, #72]	; 0x48
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800418c:	9013      	str	r0, [sp, #76]	; 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800418e:	9014      	str	r0, [sp, #80]	; 0x50
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004190:	9015      	str	r0, [sp, #84]	; 0x54
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004192:	9016      	str	r0, [sp, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004194:	2200      	movs	r2, #0
 8004196:	a910      	add	r1, sp, #64	; 0x40
 8004198:	0020      	movs	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800419a:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800419c:	f7fd fe88 	bl	8001eb0 <HAL_TIM_PWM_ConfigChannel>
 80041a0:	2800      	cmp	r0, #0
 80041a2:	d000      	beq.n	80041a6 <main+0x186>
 80041a4:	e7fe      	b.n	80041a4 <main+0x184>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80041a6:	2204      	movs	r2, #4
 80041a8:	a910      	add	r1, sp, #64	; 0x40
 80041aa:	0020      	movs	r0, r4
 80041ac:	f7fd fe80 	bl	8001eb0 <HAL_TIM_PWM_ConfigChannel>
 80041b0:	2800      	cmp	r0, #0
 80041b2:	d000      	beq.n	80041b6 <main+0x196>
 80041b4:	e7fe      	b.n	80041b4 <main+0x194>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80041b6:	2208      	movs	r2, #8
 80041b8:	a910      	add	r1, sp, #64	; 0x40
 80041ba:	0020      	movs	r0, r4
 80041bc:	f7fd fe78 	bl	8001eb0 <HAL_TIM_PWM_ConfigChannel>
 80041c0:	2800      	cmp	r0, #0
 80041c2:	d000      	beq.n	80041c6 <main+0x1a6>
 80041c4:	e7fe      	b.n	80041c4 <main+0x1a4>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80041c6:	220c      	movs	r2, #12
 80041c8:	a910      	add	r1, sp, #64	; 0x40
 80041ca:	0020      	movs	r0, r4
 80041cc:	f7fd fe70 	bl	8001eb0 <HAL_TIM_PWM_ConfigChannel>
 80041d0:	2800      	cmp	r0, #0
 80041d2:	d000      	beq.n	80041d6 <main+0x1b6>
 80041d4:	e7fe      	b.n	80041d4 <main+0x1b4>
  sBreakDeadTimeConfig.DeadTime = 30;
 80041d6:	231e      	movs	r3, #30
 80041d8:	931a      	str	r3, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80041da:	2380      	movs	r3, #128	; 0x80
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80041dc:	9017      	str	r0, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80041de:	9018      	str	r0, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80041e0:	9019      	str	r0, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80041e2:	901b      	str	r0, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80041e4:	019b      	lsls	r3, r3, #6
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80041e6:	901d      	str	r0, [sp, #116]	; 0x74
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80041e8:	a917      	add	r1, sp, #92	; 0x5c
 80041ea:	0020      	movs	r0, r4
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80041ec:	931c      	str	r3, [sp, #112]	; 0x70
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80041ee:	f7fe f9df 	bl	80025b0 <HAL_TIMEx_ConfigBreakDeadTime>
 80041f2:	1e06      	subs	r6, r0, #0
 80041f4:	d000      	beq.n	80041f8 <main+0x1d8>
 80041f6:	e7fe      	b.n	80041f6 <main+0x1d6>
  HAL_TIM_MspPostInit(&htim1);
 80041f8:	0020      	movs	r0, r4
 80041fa:	f000 fdeb 	bl	8004dd4 <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 80041fe:	2380      	movs	r3, #128	; 0x80
 8004200:	4f5a      	ldr	r7, [pc, #360]	; (800436c <main+0x34c>)
 8004202:	05db      	lsls	r3, r3, #23
 8004204:	603b      	str	r3, [r7, #0]
  htim2.Init.Prescaler = 10;
 8004206:	230a      	movs	r3, #10
 8004208:	4698      	mov	r8, r3
 800420a:	607b      	str	r3, [r7, #4]
  htim2.Init.Period = 50000;
 800420c:	4b58      	ldr	r3, [pc, #352]	; (8004370 <main+0x350>)
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800420e:	0038      	movs	r0, r7
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004210:	60be      	str	r6, [r7, #8]
  htim2.Init.Period = 50000;
 8004212:	60fb      	str	r3, [r7, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004214:	613e      	str	r6, [r7, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004216:	61be      	str	r6, [r7, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004218:	f7fd faa6 	bl	8001768 <HAL_TIM_Base_Init>
 800421c:	2800      	cmp	r0, #0
 800421e:	d000      	beq.n	8004222 <main+0x202>
 8004220:	e7fe      	b.n	8004220 <main+0x200>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004222:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004224:	a917      	add	r1, sp, #92	; 0x5c
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004226:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004228:	0038      	movs	r0, r7
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800422a:	4699      	mov	r9, r3
 800422c:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800422e:	f7fd ff75 	bl	800211c <HAL_TIM_ConfigClockSource>
 8004232:	2800      	cmp	r0, #0
 8004234:	d000      	beq.n	8004238 <main+0x218>
 8004236:	e7fe      	b.n	8004236 <main+0x216>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004238:	9010      	str	r0, [sp, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800423a:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800423c:	a910      	add	r1, sp, #64	; 0x40
 800423e:	0038      	movs	r0, r7
 8004240:	f7fe f996 	bl	8002570 <HAL_TIMEx_MasterConfigSynchronization>
 8004244:	2800      	cmp	r0, #0
 8004246:	d000      	beq.n	800424a <main+0x22a>
 8004248:	e7fe      	b.n	8004248 <main+0x228>
  htim3.Instance = TIM3;
 800424a:	4e4a      	ldr	r6, [pc, #296]	; (8004374 <main+0x354>)
 800424c:	4b4a      	ldr	r3, [pc, #296]	; (8004378 <main+0x358>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800424e:	60b0      	str	r0, [r6, #8]
  htim3.Instance = TIM3;
 8004250:	6033      	str	r3, [r6, #0]
  htim3.Init.Prescaler = 10;
 8004252:	4643      	mov	r3, r8
 8004254:	6073      	str	r3, [r6, #4]
  htim3.Init.Period = 65535;
 8004256:	4b49      	ldr	r3, [pc, #292]	; (800437c <main+0x35c>)
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004258:	6130      	str	r0, [r6, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800425a:	61b0      	str	r0, [r6, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800425c:	0030      	movs	r0, r6
  htim3.Init.Period = 65535;
 800425e:	4698      	mov	r8, r3
 8004260:	60f3      	str	r3, [r6, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004262:	f7fd fa81 	bl	8001768 <HAL_TIM_Base_Init>
 8004266:	2800      	cmp	r0, #0
 8004268:	d000      	beq.n	800426c <main+0x24c>
 800426a:	e7fe      	b.n	800426a <main+0x24a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800426c:	464b      	mov	r3, r9
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800426e:	a917      	add	r1, sp, #92	; 0x5c
 8004270:	0030      	movs	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004272:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004274:	f7fd ff52 	bl	800211c <HAL_TIM_ConfigClockSource>
 8004278:	2800      	cmp	r0, #0
 800427a:	d000      	beq.n	800427e <main+0x25e>
 800427c:	e7fe      	b.n	800427c <main+0x25c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800427e:	9010      	str	r0, [sp, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004280:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004282:	a910      	add	r1, sp, #64	; 0x40
 8004284:	0030      	movs	r0, r6
 8004286:	f7fe f973 	bl	8002570 <HAL_TIMEx_MasterConfigSynchronization>
 800428a:	2800      	cmp	r0, #0
 800428c:	d000      	beq.n	8004290 <main+0x270>
 800428e:	e7fe      	b.n	800428e <main+0x26e>
  htim15.Instance = TIM15;
 8004290:	4a3b      	ldr	r2, [pc, #236]	; (8004380 <main+0x360>)
 8004292:	4b3c      	ldr	r3, [pc, #240]	; (8004384 <main+0x364>)
  htim15.Init.Prescaler = 0;
 8004294:	6050      	str	r0, [r2, #4]
  htim15.Instance = TIM15;
 8004296:	6013      	str	r3, [r2, #0]
  htim15.Init.Prescaler = 0;
 8004298:	0013      	movs	r3, r2
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800429a:	6090      	str	r0, [r2, #8]
  htim15.Init.Period = 0xffff;
 800429c:	4642      	mov	r2, r8
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800429e:	6118      	str	r0, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80042a0:	6158      	str	r0, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042a2:	6198      	str	r0, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80042a4:	0018      	movs	r0, r3
  htim15.Init.Period = 0xffff;
 80042a6:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80042a8:	f7fd fa5e 	bl	8001768 <HAL_TIM_Base_Init>
 80042ac:	2800      	cmp	r0, #0
 80042ae:	d000      	beq.n	80042b2 <main+0x292>
 80042b0:	e7fe      	b.n	80042b0 <main+0x290>
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 80042b2:	4833      	ldr	r0, [pc, #204]	; (8004380 <main+0x360>)
 80042b4:	f7fd fbea 	bl	8001a8c <HAL_TIM_IC_Init>
 80042b8:	2800      	cmp	r0, #0
 80042ba:	d000      	beq.n	80042be <main+0x29e>
 80042bc:	e7fe      	b.n	80042bc <main+0x29c>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80042be:	2304      	movs	r3, #4
 80042c0:	9317      	str	r3, [sp, #92]	; 0x5c
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80042c2:	334c      	adds	r3, #76	; 0x4c
 80042c4:	9318      	str	r3, [sp, #96]	; 0x60
  sSlaveConfig.TriggerFilter = 0;
 80042c6:	901b      	str	r0, [sp, #108]	; 0x6c
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80042c8:	3b46      	subs	r3, #70	; 0x46
  if (HAL_TIM_SlaveConfigSynchronization(&htim15, &sSlaveConfig) != HAL_OK)
 80042ca:	a917      	add	r1, sp, #92	; 0x5c
 80042cc:	482c      	ldr	r0, [pc, #176]	; (8004380 <main+0x360>)
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80042ce:	4698      	mov	r8, r3
 80042d0:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_TIM_SlaveConfigSynchronization(&htim15, &sSlaveConfig) != HAL_OK)
 80042d2:	f7fd ffe7 	bl	80022a4 <HAL_TIM_SlaveConfigSynchronization>
 80042d6:	2800      	cmp	r0, #0
 80042d8:	d000      	beq.n	80042dc <main+0x2bc>
 80042da:	e7fe      	b.n	80042da <main+0x2ba>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042dc:	900c      	str	r0, [sp, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042de:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80042e0:	a90c      	add	r1, sp, #48	; 0x30
 80042e2:	4827      	ldr	r0, [pc, #156]	; (8004380 <main+0x360>)
 80042e4:	f7fe f944 	bl	8002570 <HAL_TIMEx_MasterConfigSynchronization>
 80042e8:	2800      	cmp	r0, #0
 80042ea:	d000      	beq.n	80042ee <main+0x2ce>
 80042ec:	e7fe      	b.n	80042ec <main+0x2cc>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80042ee:	4643      	mov	r3, r8
 80042f0:	9310      	str	r3, [sp, #64]	; 0x40
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80042f2:	2301      	movs	r3, #1
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80042f4:	9012      	str	r0, [sp, #72]	; 0x48
  sConfigIC.ICFilter = 0;
 80042f6:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80042f8:	2200      	movs	r2, #0
 80042fa:	a910      	add	r1, sp, #64	; 0x40
 80042fc:	4820      	ldr	r0, [pc, #128]	; (8004380 <main+0x360>)
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80042fe:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004300:	f7fd fcf8 	bl	8001cf4 <HAL_TIM_IC_ConfigChannel>
 8004304:	2800      	cmp	r0, #0
 8004306:	d000      	beq.n	800430a <main+0x2ea>
 8004308:	e7fe      	b.n	8004308 <main+0x2e8>
	hiwdg.Instance = IWDG;
 800430a:	4a1f      	ldr	r2, [pc, #124]	; (8004388 <main+0x368>)
 800430c:	4b1f      	ldr	r3, [pc, #124]	; (800438c <main+0x36c>)
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800430e:	0010      	movs	r0, r2
	hiwdg.Instance = IWDG;
 8004310:	6013      	str	r3, [r2, #0]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_16;
 8004312:	2302      	movs	r3, #2
 8004314:	6053      	str	r3, [r2, #4]
	hiwdg.Init.Window = IWDG_WINDOW_DISABLE;
 8004316:	4b1e      	ldr	r3, [pc, #120]	; (8004390 <main+0x370>)
 8004318:	60d3      	str	r3, [r2, #12]
	hiwdg.Init.Reload = 2000;
 800431a:	23fa      	movs	r3, #250	; 0xfa
 800431c:	00db      	lsls	r3, r3, #3
 800431e:	6093      	str	r3, [r2, #8]
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8004320:	f7fc fedc 	bl	80010dc <HAL_IWDG_Init>
 8004324:	2800      	cmp	r0, #0
 8004326:	d000      	beq.n	800432a <main+0x30a>
 8004328:	e7fe      	b.n	8004328 <main+0x308>
  htim16.Instance = TIM16;
 800432a:	4a1a      	ldr	r2, [pc, #104]	; (8004394 <main+0x374>)
 800432c:	4b1a      	ldr	r3, [pc, #104]	; (8004398 <main+0x378>)
  htim16.Init.Prescaler = 0;
 800432e:	6050      	str	r0, [r2, #4]
  htim16.Instance = TIM16;
 8004330:	6013      	str	r3, [r2, #0]
  htim16.Init.Period = 9000;
 8004332:	4b1a      	ldr	r3, [pc, #104]	; (800439c <main+0x37c>)
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004334:	6090      	str	r0, [r2, #8]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004336:	6110      	str	r0, [r2, #16]
  htim16.Init.RepetitionCounter = 0;
 8004338:	6150      	str	r0, [r2, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800433a:	6190      	str	r0, [r2, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800433c:	0010      	movs	r0, r2
  htim16.Init.Period = 9000;
 800433e:	60d3      	str	r3, [r2, #12]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8004340:	f7fd fa12 	bl	8001768 <HAL_TIM_Base_Init>
 8004344:	2800      	cmp	r0, #0
 8004346:	d02b      	beq.n	80043a0 <main+0x380>
 8004348:	e7fe      	b.n	8004348 <main+0x328>
 800434a:	46c0      	nop			; (mov r8, r8)
 800434c:	40021000 	.word	0x40021000
 8004350:	20000448 	.word	0x20000448
 8004354:	40012400 	.word	0x40012400
 8004358:	200001b8 	.word	0x200001b8
 800435c:	4001001c 	.word	0x4001001c
 8004360:	20000374 	.word	0x20000374
 8004364:	40012c00 	.word	0x40012c00
 8004368:	000007cf 	.word	0x000007cf
 800436c:	200003b8 	.word	0x200003b8
 8004370:	0000c350 	.word	0x0000c350
 8004374:	200001e4 	.word	0x200001e4
 8004378:	40000400 	.word	0x40000400
 800437c:	0000ffff 	.word	0x0000ffff
 8004380:	20000158 	.word	0x20000158
 8004384:	40014000 	.word	0x40014000
 8004388:	2000019c 	.word	0x2000019c
 800438c:	40003000 	.word	0x40003000
 8004390:	00000fff 	.word	0x00000fff
 8004394:	20000494 	.word	0x20000494
 8004398:	40014400 	.word	0x40014400
 800439c:	00002328 	.word	0x00002328
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80043a0:	2100      	movs	r1, #0
 80043a2:	0020      	movs	r0, r4
 80043a4:	f7fd fb46 	bl	8001a34 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80043a8:	2100      	movs	r1, #0
 80043aa:	0020      	movs	r0, r4
 80043ac:	f7fe f8cc 	bl	8002548 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80043b0:	2104      	movs	r1, #4
 80043b2:	0020      	movs	r0, r4
 80043b4:	f7fd fb3e 	bl	8001a34 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80043b8:	2104      	movs	r1, #4
 80043ba:	0020      	movs	r0, r4
 80043bc:	f7fe f8c4 	bl	8002548 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80043c0:	2108      	movs	r1, #8
 80043c2:	0020      	movs	r0, r4
 80043c4:	f7fd fb36 	bl	8001a34 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80043c8:	2108      	movs	r1, #8
 80043ca:	0020      	movs	r0, r4
 80043cc:	f7fe f8bc 	bl	8002548 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_Base_Start(&htim2);
 80043d0:	0038      	movs	r0, r7
 80043d2:	f7fd fa41 	bl	8001858 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim16);
 80043d6:	4839      	ldr	r0, [pc, #228]	; (80044bc <main+0x49c>)
 80043d8:	f7fd fa64 	bl	80018a4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim3);
 80043dc:	0030      	movs	r0, r6
 80043de:	f7fd fa3b 	bl	8001858 <HAL_TIM_Base_Start>
	playStartupTune();
 80043e2:	f7ff fa13 	bl	800380c <playStartupTune>
	if (vehicle_mode == 1){                    // quad single direction
 80043e6:	4b36      	ldr	r3, [pc, #216]	; (80044c0 <main+0x4a0>)
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d103      	bne.n	80043f6 <main+0x3d6>
		loadEEpromConfig();
 80043ee:	f7fe fd17 	bl	8002e20 <loadEEpromConfig>
 80043f2:	4b33      	ldr	r3, [pc, #204]	; (80044c0 <main+0x4a0>)
 80043f4:	781b      	ldrb	r3, [r3, #0]
	if (vehicle_mode == 2){                   // crawler or thruster
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d012      	beq.n	8004420 <main+0x400>
	if (vehicle_mode == 3){                 // rc car 50 percent brake on reverse.
 80043fa:	2b03      	cmp	r3, #3
 80043fc:	d043      	beq.n	8004486 <main+0x466>
	if (vehicle_mode == 4){                 // rc car 50 percent brake on reverse.
 80043fe:	2b04      	cmp	r3, #4
 8004400:	d02c      	beq.n	800445c <main+0x43c>
 8004402:	4b30      	ldr	r3, [pc, #192]	; (80044c4 <main+0x4a4>)
 8004404:	4699      	mov	r9, r3
 8004406:	4b30      	ldr	r3, [pc, #192]	; (80044c8 <main+0x4a8>)
 8004408:	9300      	str	r3, [sp, #0]
 800440a:	4b30      	ldr	r3, [pc, #192]	; (80044cc <main+0x4ac>)
 800440c:	9301      	str	r3, [sp, #4]
 800440e:	4b30      	ldr	r3, [pc, #192]	; (80044d0 <main+0x4b0>)
 8004410:	9302      	str	r3, [sp, #8]
	if (HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_4) != HAL_OK)
 8004412:	210c      	movs	r1, #12
 8004414:	0020      	movs	r0, r4
 8004416:	f7fd fa4f 	bl	80018b8 <HAL_TIM_OC_Start_IT>
 800441a:	2800      	cmp	r0, #0
 800441c:	d012      	beq.n	8004444 <main+0x424>
 800441e:	e7fe      	b.n	800441e <main+0x3fe>
		 bi_direction = 1;
 8004420:	4b28      	ldr	r3, [pc, #160]	; (80044c4 <main+0x4a4>)
 8004422:	4699      	mov	r9, r3
 8004424:	2301      	movs	r3, #1
 8004426:	464a      	mov	r2, r9
 8004428:	6013      	str	r3, [r2, #0]
		 slow_decay = 1;                      // for complementary pwm , 0 for diode freewheeling
 800442a:	4a2a      	ldr	r2, [pc, #168]	; (80044d4 <main+0x4b4>)
 800442c:	7013      	strb	r3, [r2, #0]
		 brake = 1;                          // apply full motor brake on stop
 800442e:	4a26      	ldr	r2, [pc, #152]	; (80044c8 <main+0x4a8>)
 8004430:	6013      	str	r3, [r2, #0]
 8004432:	9200      	str	r2, [sp, #0]
		 start_power = 150;
 8004434:	2296      	movs	r2, #150	; 0x96
 8004436:	4b28      	ldr	r3, [pc, #160]	; (80044d8 <main+0x4b8>)
 8004438:	601a      	str	r2, [r3, #0]
 800443a:	4b24      	ldr	r3, [pc, #144]	; (80044cc <main+0x4ac>)
 800443c:	9301      	str	r3, [sp, #4]
 800443e:	4b24      	ldr	r3, [pc, #144]	; (80044d0 <main+0x4b0>)
 8004440:	9302      	str	r3, [sp, #8]
 8004442:	e7e6      	b.n	8004412 <main+0x3f2>
	HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , 64);
 8004444:	2340      	movs	r3, #64	; 0x40
 8004446:	4a25      	ldr	r2, [pc, #148]	; (80044dc <main+0x4bc>)
 8004448:	2100      	movs	r1, #0
 800444a:	4825      	ldr	r0, [pc, #148]	; (80044e0 <main+0x4c0>)
 800444c:	f7fd fb96 	bl	8001b7c <HAL_TIM_IC_Start_DMA>
		if(HAL_COMP_Start_IT(&hcomp1) != HAL_OK)
 8004450:	0028      	movs	r0, r5
 8004452:	f7fc fa07 	bl	8000864 <HAL_COMP_Start_IT>
 8004456:	2800      	cmp	r0, #0
 8004458:	d02a      	beq.n	80044b0 <main+0x490>
 800445a:	e7fe      	b.n	800445a <main+0x43a>
			 bi_direction = 1;
 800445c:	4b19      	ldr	r3, [pc, #100]	; (80044c4 <main+0x4a4>)
			 slow_decay = 0;                      // for complementary pwm , 0 for diode freewheeling
 800445e:	491d      	ldr	r1, [pc, #116]	; (80044d4 <main+0x4b4>)
			 bi_direction = 1;
 8004460:	4699      	mov	r9, r3
 8004462:	2301      	movs	r3, #1
 8004464:	464a      	mov	r2, r9
 8004466:	6013      	str	r3, [r2, #0]
			 slow_decay = 0;                      // for complementary pwm , 0 for diode freewheeling
 8004468:	2200      	movs	r2, #0
 800446a:	700a      	strb	r2, [r1, #0]
			 brake = 0;                          // apply full motor brake on stop
 800446c:	4916      	ldr	r1, [pc, #88]	; (80044c8 <main+0x4a8>)
 800446e:	600a      	str	r2, [r1, #0]
			 prop_brake = 1;
 8004470:	4a16      	ldr	r2, [pc, #88]	; (80044cc <main+0x4ac>)
			 brake = 0;                          // apply full motor brake on stop
 8004472:	9100      	str	r1, [sp, #0]
			 prop_brake = 1;
 8004474:	7013      	strb	r3, [r2, #0]
			 prop_brake_strength = 800;
 8004476:	4b16      	ldr	r3, [pc, #88]	; (80044d0 <main+0x4b0>)
			 prop_brake = 1;
 8004478:	9201      	str	r2, [sp, #4]
			 prop_brake_strength = 800;
 800447a:	9302      	str	r3, [sp, #8]
 800447c:	001a      	movs	r2, r3
 800447e:	23c8      	movs	r3, #200	; 0xc8
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	6013      	str	r3, [r2, #0]
 8004484:	e7c5      	b.n	8004412 <main+0x3f2>
		 bi_direction = 1;
 8004486:	4b0f      	ldr	r3, [pc, #60]	; (80044c4 <main+0x4a4>)
		 slow_decay = 0;                      // for complementary pwm , 0 for diode freewheeling
 8004488:	4912      	ldr	r1, [pc, #72]	; (80044d4 <main+0x4b4>)
		 bi_direction = 1;
 800448a:	4699      	mov	r9, r3
 800448c:	2301      	movs	r3, #1
 800448e:	464a      	mov	r2, r9
 8004490:	6013      	str	r3, [r2, #0]
		 slow_decay = 0;                      // for complementary pwm , 0 for diode freewheeling
 8004492:	2200      	movs	r2, #0
 8004494:	700a      	strb	r2, [r1, #0]
		 brake = 0;                          // apply full motor brake on stop
 8004496:	490c      	ldr	r1, [pc, #48]	; (80044c8 <main+0x4a8>)
 8004498:	600a      	str	r2, [r1, #0]
		 prop_brake = 1;
 800449a:	4a0c      	ldr	r2, [pc, #48]	; (80044cc <main+0x4ac>)
		 brake = 0;                          // apply full motor brake on stop
 800449c:	9100      	str	r1, [sp, #0]
		 prop_brake = 1;
 800449e:	7013      	strb	r3, [r2, #0]
		 prop_brake_strength = 900;
 80044a0:	4b0b      	ldr	r3, [pc, #44]	; (80044d0 <main+0x4b0>)
		 prop_brake = 1;
 80044a2:	9201      	str	r2, [sp, #4]
		 prop_brake_strength = 900;
 80044a4:	9302      	str	r3, [sp, #8]
 80044a6:	001a      	movs	r2, r3
 80044a8:	23e1      	movs	r3, #225	; 0xe1
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	6013      	str	r3, [r2, #0]
 80044ae:	e7b0      	b.n	8004412 <main+0x3f2>
	if(HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80044b0:	480c      	ldr	r0, [pc, #48]	; (80044e4 <main+0x4c4>)
 80044b2:	f7fc fe13 	bl	80010dc <HAL_IWDG_Init>
 80044b6:	2800      	cmp	r0, #0
 80044b8:	d016      	beq.n	80044e8 <main+0x4c8>
 80044ba:	e7fe      	b.n	80044ba <main+0x49a>
 80044bc:	20000494 	.word	0x20000494
 80044c0:	2000004c 	.word	0x2000004c
 80044c4:	20000098 	.word	0x20000098
 80044c8:	20000010 	.word	0x20000010
 80044cc:	200000d2 	.word	0x200000d2
 80044d0:	20000028 	.word	0x20000028
 80044d4:	20000034 	.word	0x20000034
 80044d8:	2000003c 	.word	0x2000003c
 80044dc:	2000022c 	.word	0x2000022c
 80044e0:	20000158 	.word	0x20000158
 80044e4:	2000019c 	.word	0x2000019c
	if(bi_direction){
 80044e8:	464b      	mov	r3, r9
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d000      	beq.n	80044f2 <main+0x4d2>
 80044f0:	e249      	b.n	8004986 <main+0x966>
 80044f2:	4bd3      	ldr	r3, [pc, #844]	; (8004840 <main+0x820>)
 80044f4:	9303      	str	r3, [sp, #12]
 80044f6:	4bd3      	ldr	r3, [pc, #844]	; (8004844 <main+0x824>)
			count = 0;
 80044f8:	2400      	movs	r4, #0
 80044fa:	4698      	mov	r8, r3
	if (dir_reversed == 1){
 80044fc:	4bd2      	ldr	r3, [pc, #840]	; (8004848 <main+0x828>)
 80044fe:	4fd3      	ldr	r7, [pc, #844]	; (800484c <main+0x82c>)
 8004500:	469a      	mov	sl, r3
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4ed2      	ldr	r6, [pc, #840]	; (8004850 <main+0x830>)
 8004506:	3b01      	subs	r3, #1
 8004508:	1e5a      	subs	r2, r3, #1
 800450a:	4193      	sbcs	r3, r2
 800450c:	4642      	mov	r2, r8
 800450e:	6013      	str	r3, [r2, #0]
	TIM1->CCR1 = 1;
 8004510:	2201      	movs	r2, #1
 8004512:	4bd0      	ldr	r3, [pc, #832]	; (8004854 <main+0x834>)
 8004514:	4dd0      	ldr	r5, [pc, #832]	; (8004858 <main+0x838>)
 8004516:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 1;
 8004518:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 1;
 800451a:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = 800;
 800451c:	22c8      	movs	r2, #200	; 0xc8
 800451e:	0092      	lsls	r2, r2, #2
 8004520:	641a      	str	r2, [r3, #64]	; 0x40
 8004522:	4bce      	ldr	r3, [pc, #824]	; (800485c <main+0x83c>)
 8004524:	6819      	ldr	r1, [r3, #0]
 8004526:	4bce      	ldr	r3, [pc, #824]	; (8004860 <main+0x840>)
 8004528:	469b      	mov	fp, r3
		k_erpm = ((100000000 / (commutation_interval * 208 * 6)) * 6)/10 ;
 800452a:	239c      	movs	r3, #156	; 0x9c
 800452c:	00db      	lsls	r3, r3, #3
 800452e:	4359      	muls	r1, r3
 8004530:	48cc      	ldr	r0, [pc, #816]	; (8004864 <main+0x844>)
 8004532:	f7fb fe73 	bl	800021c <__divsi3>
 8004536:	0003      	movs	r3, r0
 8004538:	0040      	lsls	r0, r0, #1
 800453a:	18c0      	adds	r0, r0, r3
 800453c:	0040      	lsls	r0, r0, #1
 800453e:	210a      	movs	r1, #10
 8004540:	f7fb fe6c 	bl	800021c <__divsi3>
 8004544:	4bc8      	ldr	r3, [pc, #800]	; (8004868 <main+0x848>)
		count++;
 8004546:	4ac9      	ldr	r2, [pc, #804]	; (800486c <main+0x84c>)
		k_erpm = ((100000000 / (commutation_interval * 208 * 6)) * 6)/10 ;
 8004548:	6018      	str	r0, [r3, #0]
		count++;
 800454a:	4bc8      	ldr	r3, [pc, #800]	; (800486c <main+0x84c>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	9304      	str	r3, [sp, #16]
 8004550:	3301      	adds	r3, #1
 8004552:	6013      	str	r3, [r2, #0]
		if (count > 100000) {
 8004554:	4ac6      	ldr	r2, [pc, #792]	; (8004870 <main+0x850>)
 8004556:	4293      	cmp	r3, r2
 8004558:	dd01      	ble.n	800455e <main+0x53e>
			count = 0;
 800455a:	4bc4      	ldr	r3, [pc, #784]	; (800486c <main+0x84c>)
 800455c:	601c      	str	r4, [r3, #0]
		compit = 0;
 800455e:	4bc5      	ldr	r3, [pc, #788]	; (8004874 <main+0x854>)
		if (HAL_IWDG_Refresh(&hiwdg) != HAL_OK)              // watchdog refresh
 8004560:	48c5      	ldr	r0, [pc, #788]	; (8004878 <main+0x858>)
		compit = 0;
 8004562:	701c      	strb	r4, [r3, #0]
		if (HAL_IWDG_Refresh(&hiwdg) != HAL_OK)              // watchdog refresh
 8004564:	f7fc fde8 	bl	8001138 <HAL_IWDG_Refresh>
 8004568:	2800      	cmp	r0, #0
 800456a:	d000      	beq.n	800456e <main+0x54e>
 800456c:	e20a      	b.n	8004984 <main+0x964>
		control_loop_count++;
 800456e:	4bc3      	ldr	r3, [pc, #780]	; (800487c <main+0x85c>)
 8004570:	4ac2      	ldr	r2, [pc, #776]	; (800487c <main+0x85c>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	9304      	str	r3, [sp, #16]
 8004576:	3301      	adds	r3, #1
 8004578:	6013      	str	r3, [r2, #0]
		if (control_loop_count > 2) {
 800457a:	2b02      	cmp	r3, #2
 800457c:	dd72      	ble.n	8004664 <main+0x644>
			if (dshotcommand > 0) {
 800457e:	4bc0      	ldr	r3, [pc, #768]	; (8004880 <main+0x860>)
			control_loop_count = 0;
 8004580:	6010      	str	r0, [r2, #0]
			if (dshotcommand > 0) {
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	dc00      	bgt.n	800458a <main+0x56a>
 8004588:	e1f9      	b.n	800497e <main+0x95e>
				if (dshotcommand == 2) {
 800458a:	2b02      	cmp	r3, #2
 800458c:	d103      	bne.n	8004596 <main+0x576>
					playInputTune();
 800458e:	f7ff f9e7 	bl	8003960 <playInputTune>
 8004592:	4bbb      	ldr	r3, [pc, #748]	; (8004880 <main+0x860>)
 8004594:	681b      	ldr	r3, [r3, #0]
				if (dshotcommand == 21) {
 8004596:	2b15      	cmp	r3, #21
 8004598:	d100      	bne.n	800459c <main+0x57c>
 800459a:	e1fa      	b.n	8004992 <main+0x972>
				if (dshotcommand == 20) {     // forward = 1 if dir_reversed = 0
 800459c:	2b14      	cmp	r3, #20
 800459e:	d100      	bne.n	80045a2 <main+0x582>
 80045a0:	e20b      	b.n	80049ba <main+0x99a>
				if (dshotcommand == 7) {
 80045a2:	2b07      	cmp	r3, #7
 80045a4:	d100      	bne.n	80045a8 <main+0x588>
 80045a6:	e1e7      	b.n	8004978 <main+0x958>
				if (dshotcommand == 8) {
 80045a8:	2b08      	cmp	r3, #8
 80045aa:	d100      	bne.n	80045ae <main+0x58e>
 80045ac:	e2c3      	b.n	8004b36 <main+0xb16>
				if (dshotcommand == 9) {
 80045ae:	2b09      	cmp	r3, #9
 80045b0:	d100      	bne.n	80045b4 <main+0x594>
 80045b2:	e1f3      	b.n	800499c <main+0x97c>
				if (dshotcommand == 10) {
 80045b4:	2b0a      	cmp	r3, #10
 80045b6:	d100      	bne.n	80045ba <main+0x59a>
 80045b8:	e20c      	b.n	80049d4 <main+0x9b4>
				if (dshotcommand == 12) {
 80045ba:	2b0c      	cmp	r3, #12
 80045bc:	d100      	bne.n	80045c0 <main+0x5a0>
 80045be:	e203      	b.n	80049c8 <main+0x9a8>
 80045c0:	464b      	mov	r3, r9
				dshotcommand = 0;
 80045c2:	4aaf      	ldr	r2, [pc, #700]	; (8004880 <main+0x860>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6014      	str	r4, [r2, #0]
			if (bi_direction == 1 && (proshot == 0 && dshot == 0)) {
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d100      	bne.n	80045ce <main+0x5ae>
 80045cc:	e209      	b.n	80049e2 <main+0x9c2>
			} else if ((proshot || dshot) && bi_direction) {
 80045ce:	4aad      	ldr	r2, [pc, #692]	; (8004884 <main+0x864>)
 80045d0:	7812      	ldrb	r2, [r2, #0]
 80045d2:	2a00      	cmp	r2, #0
 80045d4:	d104      	bne.n	80045e0 <main+0x5c0>
 80045d6:	4aac      	ldr	r2, [pc, #688]	; (8004888 <main+0x868>)
 80045d8:	7812      	ldrb	r2, [r2, #0]
 80045da:	2a00      	cmp	r2, #0
 80045dc:	d100      	bne.n	80045e0 <main+0x5c0>
 80045de:	e1e8      	b.n	80049b2 <main+0x992>
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d100      	bne.n	80045e6 <main+0x5c6>
 80045e4:	e1e5      	b.n	80049b2 <main+0x992>
				if (newinput > 1097) {
 80045e6:	9b03      	ldr	r3, [sp, #12]
 80045e8:	4aa8      	ldr	r2, [pc, #672]	; (800488c <main+0x86c>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4293      	cmp	r3, r2
 80045ee:	dd0f      	ble.n	8004610 <main+0x5f0>
					if (forward == dir_reversed) {
 80045f0:	4642      	mov	r2, r8
 80045f2:	6811      	ldr	r1, [r2, #0]
 80045f4:	4652      	mov	r2, sl
 80045f6:	6812      	ldr	r2, [r2, #0]
 80045f8:	4291      	cmp	r1, r2
 80045fa:	d105      	bne.n	8004608 <main+0x5e8>
						forward = 1 - dir_reversed;
 80045fc:	2201      	movs	r2, #1
 80045fe:	1a52      	subs	r2, r2, r1
 8004600:	4641      	mov	r1, r8
 8004602:	600a      	str	r2, [r1, #0]
						bemf_counts = 0;
 8004604:	4aa2      	ldr	r2, [pc, #648]	; (8004890 <main+0x870>)
 8004606:	6014      	str	r4, [r2, #0]
					adjusted_input = (newinput - 1100) * 2 + 100;
 8004608:	4aa2      	ldr	r2, [pc, #648]	; (8004894 <main+0x874>)
 800460a:	189a      	adds	r2, r3, r2
 800460c:	0052      	lsls	r2, r2, #1
 800460e:	603a      	str	r2, [r7, #0]
				if (newinput <= 1047 && newinput > 0) {
 8004610:	49a1      	ldr	r1, [pc, #644]	; (8004898 <main+0x878>)
 8004612:	1e5a      	subs	r2, r3, #1
 8004614:	428a      	cmp	r2, r1
 8004616:	d80f      	bhi.n	8004638 <main+0x618>
					if (forward == (1 - dir_reversed)) {
 8004618:	4652      	mov	r2, sl
 800461a:	4640      	mov	r0, r8
 800461c:	6811      	ldr	r1, [r2, #0]
 800461e:	2201      	movs	r2, #1
 8004620:	6800      	ldr	r0, [r0, #0]
 8004622:	1a52      	subs	r2, r2, r1
 8004624:	4282      	cmp	r2, r0
 8004626:	d103      	bne.n	8004630 <main+0x610>
						bemf_counts = 0;
 8004628:	4a99      	ldr	r2, [pc, #612]	; (8004890 <main+0x870>)
 800462a:	6014      	str	r4, [r2, #0]
						forward = dir_reversed;
 800462c:	4642      	mov	r2, r8
 800462e:	6011      	str	r1, [r2, #0]
					adjusted_input = (newinput - 90) * 2;
 8004630:	001a      	movs	r2, r3
 8004632:	3a5a      	subs	r2, #90	; 0x5a
 8004634:	0052      	lsls	r2, r2, #1
 8004636:	603a      	str	r2, [r7, #0]
				if ((newinput > 1047 && newinput < 1098) || newinput <= 120) {
 8004638:	4a98      	ldr	r2, [pc, #608]	; (800489c <main+0x87c>)
 800463a:	189a      	adds	r2, r3, r2
 800463c:	2a31      	cmp	r2, #49	; 0x31
 800463e:	d800      	bhi.n	8004642 <main+0x622>
 8004640:	e1c5      	b.n	80049ce <main+0x9ae>
 8004642:	2b78      	cmp	r3, #120	; 0x78
 8004644:	dc00      	bgt.n	8004648 <main+0x628>
 8004646:	e1c2      	b.n	80049ce <main+0x9ae>
 8004648:	683b      	ldr	r3, [r7, #0]
			if (adjusted_input > 2000) {
 800464a:	22fa      	movs	r2, #250	; 0xfa
 800464c:	00d2      	lsls	r2, r2, #3
 800464e:	4293      	cmp	r3, r2
 8004650:	dd01      	ble.n	8004656 <main+0x636>
				adjusted_input = 2000;
 8004652:	0013      	movs	r3, r2
 8004654:	603a      	str	r2, [r7, #0]
			if (adjusted_input - input > 5) {
 8004656:	6832      	ldr	r2, [r6, #0]
 8004658:	1a99      	subs	r1, r3, r2
 800465a:	2905      	cmp	r1, #5
 800465c:	dc00      	bgt.n	8004660 <main+0x640>
 800465e:	e220      	b.n	8004aa2 <main+0xa82>
				input = input + 2;
 8004660:	3202      	adds	r2, #2
 8004662:	6032      	str	r2, [r6, #0]
		if ( commutation_interval < 120 ){        // desync
 8004664:	4b7d      	ldr	r3, [pc, #500]	; (800485c <main+0x83c>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	9304      	str	r3, [sp, #16]
 800466a:	2b77      	cmp	r3, #119	; 0x77
 800466c:	dc00      	bgt.n	8004670 <main+0x650>
		input = 0;
 800466e:	6034      	str	r4, [r6, #0]
		advance_multiplier = map((commutation_interval), 150, 300, 12, 12);
 8004670:	230c      	movs	r3, #12
 8004672:	4a8b      	ldr	r2, [pc, #556]	; (80048a0 <main+0x880>)
 8004674:	6013      	str	r3, [r2, #0]
		if (inputSet == 0) {
 8004676:	4b8b      	ldr	r3, [pc, #556]	; (80048a4 <main+0x884>)
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d104      	bne.n	8004688 <main+0x668>
			HAL_Delay(10);
 800467e:	200a      	movs	r0, #10
 8004680:	f7fb fee8 	bl	8000454 <HAL_Delay>
			detectInput();
 8004684:	f7ff fa1e 	bl	8003ac4 <detectInput>
		if (!armed) {
 8004688:	4b87      	ldr	r3, [pc, #540]	; (80048a8 <main+0x888>)
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d100      	bne.n	8004692 <main+0x672>
 8004690:	e14c      	b.n	800492c <main+0x90c>
 8004692:	6833      	ldr	r3, [r6, #0]
		if ((input > 47) && (armed == 1)) {
 8004694:	2b2f      	cmp	r3, #47	; 0x2f
 8004696:	dd04      	ble.n	80046a2 <main+0x682>
 8004698:	4a83      	ldr	r2, [pc, #524]	; (80048a8 <main+0x888>)
 800469a:	7812      	ldrb	r2, [r2, #0]
 800469c:	2a01      	cmp	r2, #1
 800469e:	d100      	bne.n	80046a2 <main+0x682>
 80046a0:	e205      	b.n	8004aae <main+0xa8e>
		signaltimeout++;
 80046a2:	4b82      	ldr	r3, [pc, #520]	; (80048ac <main+0x88c>)
 80046a4:	4a81      	ldr	r2, [pc, #516]	; (80048ac <main+0x88c>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	3301      	adds	r3, #1
 80046aa:	6013      	str	r3, [r2, #0]
		if (signaltimeout > signal_timeout_threshold) {
 80046ac:	4a80      	ldr	r2, [pc, #512]	; (80048b0 <main+0x890>)
 80046ae:	6812      	ldr	r2, [r2, #0]
 80046b0:	9204      	str	r2, [sp, #16]
 80046b2:	4293      	cmp	r3, r2
 80046b4:	dd25      	ble.n	8004702 <main+0x6e2>
			armed = 0;
 80046b6:	4b7c      	ldr	r3, [pc, #496]	; (80048a8 <main+0x888>)
			error = 1;
 80046b8:	4a7e      	ldr	r2, [pc, #504]	; (80048b4 <main+0x894>)
			armed = 0;
 80046ba:	701c      	strb	r4, [r3, #0]
			armedcount = 0;
 80046bc:	4b7e      	ldr	r3, [pc, #504]	; (80048b8 <main+0x898>)
			input = 0;
 80046be:	6034      	str	r4, [r6, #0]
			armedcount = 0;
 80046c0:	601c      	str	r4, [r3, #0]
			error = 1;
 80046c2:	2301      	movs	r3, #1
 80046c4:	6013      	str	r3, [r2, #0]
			inputSet = 0;
 80046c6:	4b77      	ldr	r3, [pc, #476]	; (80048a4 <main+0x884>)
			HAL_TIM_Base_Start_IT(&htim16);
 80046c8:	487c      	ldr	r0, [pc, #496]	; (80048bc <main+0x89c>)
			inputSet = 0;
 80046ca:	701c      	strb	r4, [r3, #0]
			TIM15->PSC=0;
 80046cc:	4b7c      	ldr	r3, [pc, #496]	; (80048c0 <main+0x8a0>)
 80046ce:	629c      	str	r4, [r3, #40]	; 0x28
			TIM16->PSC=0;
 80046d0:	4b7c      	ldr	r3, [pc, #496]	; (80048c4 <main+0x8a4>)
 80046d2:	629c      	str	r4, [r3, #40]	; 0x28
			dshot = 0;
 80046d4:	4b6c      	ldr	r3, [pc, #432]	; (8004888 <main+0x868>)
 80046d6:	701c      	strb	r4, [r3, #0]
			proshot = 0;
 80046d8:	4b6a      	ldr	r3, [pc, #424]	; (8004884 <main+0x864>)
 80046da:	701c      	strb	r4, [r3, #0]
			servoPwm = 0;
 80046dc:	4b7a      	ldr	r3, [pc, #488]	; (80048c8 <main+0x8a8>)
 80046de:	701c      	strb	r4, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim16);
 80046e0:	f7fd f8e0 	bl	80018a4 <HAL_TIM_Base_Start_IT>
			IC_buffer_size = 64;
 80046e4:	2340      	movs	r3, #64	; 0x40
 80046e6:	4a79      	ldr	r2, [pc, #484]	; (80048cc <main+0x8ac>)
 80046e8:	2100      	movs	r1, #0
 80046ea:	6013      	str	r3, [r2, #0]
 80046ec:	2280      	movs	r2, #128	; 0x80
 80046ee:	4878      	ldr	r0, [pc, #480]	; (80048d0 <main+0x8b0>)
 80046f0:	0052      	lsls	r2, r2, #1
 80046f2:	f000 fc4b 	bl	8004f8c <memset>
			HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , 64);
 80046f6:	2340      	movs	r3, #64	; 0x40
 80046f8:	4a75      	ldr	r2, [pc, #468]	; (80048d0 <main+0x8b0>)
 80046fa:	2100      	movs	r1, #0
 80046fc:	4875      	ldr	r0, [pc, #468]	; (80048d4 <main+0x8b4>)
 80046fe:	f7fd fa3d 	bl	8001b7c <HAL_TIM_IC_Start_DMA>
		if (input <= 47) {
 8004702:	6833      	ldr	r3, [r6, #0]
 8004704:	2b2f      	cmp	r3, #47	; 0x2f
 8004706:	dc34      	bgt.n	8004772 <main+0x752>
			if (brake == 1){
 8004708:	9b00      	ldr	r3, [sp, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d100      	bne.n	8004712 <main+0x6f2>
 8004710:	e08c      	b.n	800482c <main+0x80c>
			forcedcomcount = 0;
 8004712:	4a71      	ldr	r2, [pc, #452]	; (80048d8 <main+0x8b8>)
 8004714:	6014      	str	r4, [r2, #0]
			started = 0;
 8004716:	4a71      	ldr	r2, [pc, #452]	; (80048dc <main+0x8bc>)
 8004718:	6014      	str	r4, [r2, #0]
			if (!brake && !prop_brake_active) {
 800471a:	2b00      	cmp	r3, #0
 800471c:	d000      	beq.n	8004720 <main+0x700>
 800471e:	e08c      	b.n	800483a <main+0x81a>
 8004720:	4a6f      	ldr	r2, [pc, #444]	; (80048e0 <main+0x8c0>)
 8004722:	7812      	ldrb	r2, [r2, #0]
 8004724:	9205      	str	r2, [sp, #20]
 8004726:	2a00      	cmp	r2, #0
 8004728:	d100      	bne.n	800472c <main+0x70c>
 800472a:	e0f3      	b.n	8004914 <main+0x8f4>
			duty_cycle = 0;
 800472c:	602b      	str	r3, [r5, #0]
			if (brake || tempbrake) {
 800472e:	4b6d      	ldr	r3, [pc, #436]	; (80048e4 <main+0x8c4>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	9304      	str	r3, [sp, #16]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d004      	beq.n	8004742 <main+0x722>
				fullBrake();
 8004738:	f7fe fde4 	bl	8003304 <fullBrake>
				bemf_counts = 0;
 800473c:	4b54      	ldr	r3, [pc, #336]	; (8004890 <main+0x870>)
				duty_cycle = 0;
 800473e:	602c      	str	r4, [r5, #0]
				bemf_counts = 0;
 8004740:	601c      	str	r4, [r3, #0]
			if (prop_brake && prop_brake_active) {
 8004742:	9b01      	ldr	r3, [sp, #4]
 8004744:	781a      	ldrb	r2, [r3, #0]
 8004746:	2300      	movs	r3, #0
 8004748:	2a00      	cmp	r2, #0
 800474a:	d00e      	beq.n	800476a <main+0x74a>
 800474c:	4a64      	ldr	r2, [pc, #400]	; (80048e0 <main+0x8c0>)
 800474e:	7812      	ldrb	r2, [r2, #0]
 8004750:	2a00      	cmp	r2, #0
 8004752:	d00a      	beq.n	800476a <main+0x74a>
				duty_cycle = prop_brake_strength;
 8004754:	9b02      	ldr	r3, [sp, #8]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	9304      	str	r3, [sp, #16]
 800475a:	602b      	str	r3, [r5, #0]
	phaseAPWM();
 800475c:	f7fe fbf0 	bl	8002f40 <phaseAPWM>
	phaseBPWM();
 8004760:	f7fe fb94 	bl	8002e8c <phaseBPWM>
	phaseCPWM();
 8004764:	f7fe fbbc 	bl	8002ee0 <phaseCPWM>
 8004768:	682b      	ldr	r3, [r5, #0]
			TIM1->CCR1 = duty_cycle;// set duty cycle to 50 out of 768 to start.
 800476a:	4a3a      	ldr	r2, [pc, #232]	; (8004854 <main+0x834>)
 800476c:	6353      	str	r3, [r2, #52]	; 0x34
			TIM1->CCR2 = duty_cycle;
 800476e:	6393      	str	r3, [r2, #56]	; 0x38
			TIM1->CCR3 = duty_cycle;
 8004770:	63d3      	str	r3, [r2, #60]	; 0x3c
		if (bemf_counts < 100 || commutation_interval > 2000 || duty_cycle < 250) {
 8004772:	4b47      	ldr	r3, [pc, #284]	; (8004890 <main+0x870>)
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	4b39      	ldr	r3, [pc, #228]	; (800485c <main+0x83c>)
 8004778:	6819      	ldr	r1, [r3, #0]
			filter_level = 10;
 800477a:	230a      	movs	r3, #10
		if (bemf_counts < 100 || commutation_interval > 2000 || duty_cycle < 250) {
 800477c:	2a63      	cmp	r2, #99	; 0x63
 800477e:	dd08      	ble.n	8004792 <main+0x772>
 8004780:	23fa      	movs	r3, #250	; 0xfa
 8004782:	00db      	lsls	r3, r3, #3
 8004784:	4299      	cmp	r1, r3
 8004786:	dc38      	bgt.n	80047fa <main+0x7da>
 8004788:	6828      	ldr	r0, [r5, #0]
			filter_level = 6;
 800478a:	2306      	movs	r3, #6
		if (bemf_counts < 100 || commutation_interval > 2000 || duty_cycle < 250) {
 800478c:	28f9      	cmp	r0, #249	; 0xf9
 800478e:	dc00      	bgt.n	8004792 <main+0x772>
			filter_level = 10;
 8004790:	3304      	adds	r3, #4
 8004792:	4855      	ldr	r0, [pc, #340]	; (80048e8 <main+0x8c8>)
 8004794:	7003      	strb	r3, [r0, #0]
		if (commutation_interval < 200 && bemf_counts > 100){
 8004796:	29c7      	cmp	r1, #199	; 0xc7
 8004798:	dc03      	bgt.n	80047a2 <main+0x782>
 800479a:	2a64      	cmp	r2, #100	; 0x64
 800479c:	dd01      	ble.n	80047a2 <main+0x782>
			filter_level = 3;
 800479e:	2303      	movs	r3, #3
 80047a0:	7003      	strb	r3, [r0, #0]
		if (started == 1) {
 80047a2:	4b4e      	ldr	r3, [pc, #312]	; (80048dc <main+0x8bc>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	9304      	str	r3, [sp, #16]
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d02f      	beq.n	800480c <main+0x7ec>
		if (duty_cycle < 300 && bemf_counts > 10) {
 80047ac:	232c      	movs	r3, #44	; 0x2c
 80047ae:	682a      	ldr	r2, [r5, #0]
 80047b0:	33ff      	adds	r3, #255	; 0xff
 80047b2:	429a      	cmp	r2, r3
 80047b4:	dc25      	bgt.n	8004802 <main+0x7e2>
 80047b6:	4b36      	ldr	r3, [pc, #216]	; (8004890 <main+0x870>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	9304      	str	r3, [sp, #16]
 80047bc:	2b0a      	cmp	r3, #10
 80047be:	dd20      	ble.n	8004802 <main+0x7e2>
 80047c0:	4b4a      	ldr	r3, [pc, #296]	; (80048ec <main+0x8cc>)
			zc_timeout_threshold = 10000;
 80047c2:	4a4b      	ldr	r2, [pc, #300]	; (80048f0 <main+0x8d0>)
		if (duty_cycle < 300 && bemf_counts > 10) {
 80047c4:	469c      	mov	ip, r3
 80047c6:	4b4b      	ldr	r3, [pc, #300]	; (80048f4 <main+0x8d4>)
		zctimeout++;
 80047c8:	484b      	ldr	r0, [pc, #300]	; (80048f8 <main+0x8d8>)
 80047ca:	601a      	str	r2, [r3, #0]
 80047cc:	4b4a      	ldr	r3, [pc, #296]	; (80048f8 <main+0x8d8>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	9304      	str	r3, [sp, #16]
 80047d2:	3301      	adds	r3, #1
 80047d4:	6003      	str	r3, [r0, #0]
		if (zctimeout > zc_timeout_threshold) {
 80047d6:	429a      	cmp	r2, r3
 80047d8:	db00      	blt.n	80047dc <main+0x7bc>
 80047da:	e6a6      	b.n	800452a <main+0x50a>
			bemf_counts = 0;
 80047dc:	4b2c      	ldr	r3, [pc, #176]	; (8004890 <main+0x870>)
 80047de:	601c      	str	r4, [r3, #0]
			bad_commutation = 0;
 80047e0:	4b46      	ldr	r3, [pc, #280]	; (80048fc <main+0x8dc>)
 80047e2:	701c      	strb	r4, [r3, #0]
			sensorless = 0;
 80047e4:	4b46      	ldr	r3, [pc, #280]	; (8004900 <main+0x8e0>)
 80047e6:	601c      	str	r4, [r3, #0]
			EXTI->IMR &= (0 << 21);
 80047e8:	4b46      	ldr	r3, [pc, #280]	; (8004904 <main+0x8e4>)
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	601c      	str	r4, [r3, #0]
			zctimeout = zc_timeout_threshold + 1;
 80047ee:	4662      	mov	r2, ip
			running = 0;
 80047f0:	465b      	mov	r3, fp
			zctimeout = zc_timeout_threshold + 1;
 80047f2:	6002      	str	r2, [r0, #0]
			running = 0;
 80047f4:	601c      	str	r4, [r3, #0]
			duty_cycle = 0;
 80047f6:	602c      	str	r4, [r5, #0]
 80047f8:	e697      	b.n	800452a <main+0x50a>
 80047fa:	230a      	movs	r3, #10
 80047fc:	4a3a      	ldr	r2, [pc, #232]	; (80048e8 <main+0x8c8>)
 80047fe:	7013      	strb	r3, [r2, #0]
 8004800:	e7cf      	b.n	80047a2 <main+0x782>
			zc_timeout_threshold = 2000;
 8004802:	22fa      	movs	r2, #250	; 0xfa
 8004804:	4b40      	ldr	r3, [pc, #256]	; (8004908 <main+0x8e8>)
 8004806:	00d2      	lsls	r2, r2, #3
 8004808:	469c      	mov	ip, r3
 800480a:	e7dc      	b.n	80047c6 <main+0x7a6>
			if (running == 0) {
 800480c:	465b      	mov	r3, fp
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1cb      	bne.n	80047ac <main+0x78c>
				upthreshold = 2;
 8004814:	2202      	movs	r2, #2
 8004816:	493d      	ldr	r1, [pc, #244]	; (800490c <main+0x8ec>)
 8004818:	600a      	str	r2, [r1, #0]
				threshold = 2;
 800481a:	493d      	ldr	r1, [pc, #244]	; (8004910 <main+0x8f0>)
 800481c:	600a      	str	r2, [r1, #0]
				zctimeout = 0;
 800481e:	4a36      	ldr	r2, [pc, #216]	; (80048f8 <main+0x8d8>)
 8004820:	6013      	str	r3, [r2, #0]
				startMotor(); // safety on for input testing   ************************************************
 8004822:	f7fe fe71 	bl	8003508 <startMotor>
 8004826:	4b0d      	ldr	r3, [pc, #52]	; (800485c <main+0x83c>)
 8004828:	6819      	ldr	r1, [r3, #0]
 800482a:	e7bf      	b.n	80047ac <main+0x78c>
			EXTI->IMR &= (0 << 21);
 800482c:	4b35      	ldr	r3, [pc, #212]	; (8004904 <main+0x8e4>)
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	601c      	str	r4, [r3, #0]
			forcedcomcount = 0;
 8004832:	4b29      	ldr	r3, [pc, #164]	; (80048d8 <main+0x8b8>)
 8004834:	601c      	str	r4, [r3, #0]
			started = 0;
 8004836:	4b29      	ldr	r3, [pc, #164]	; (80048dc <main+0x8bc>)
 8004838:	601c      	str	r4, [r3, #0]
			duty_cycle = 0;
 800483a:	602c      	str	r4, [r5, #0]
 800483c:	e77c      	b.n	8004738 <main+0x718>
 800483e:	46c0      	nop			; (mov r8, r8)
 8004840:	200000cc 	.word	0x200000cc
 8004844:	2000001c 	.word	0x2000001c
 8004848:	200000b0 	.word	0x200000b0
 800484c:	200003fc 	.word	0x200003fc
 8004850:	200000c4 	.word	0x200000c4
 8004854:	40012c00 	.word	0x40012c00
 8004858:	20000014 	.word	0x20000014
 800485c:	200000a0 	.word	0x200000a0
 8004860:	200000e8 	.word	0x200000e8
 8004864:	05f5e100 	.word	0x05f5e100
 8004868:	200003b4 	.word	0x200003b4
 800486c:	200000a8 	.word	0x200000a8
 8004870:	000186a0 	.word	0x000186a0
 8004874:	200000a4 	.word	0x200000a4
 8004878:	2000019c 	.word	0x2000019c
 800487c:	200001b0 	.word	0x200001b0
 8004880:	200000b8 	.word	0x200000b8
 8004884:	200000e4 	.word	0x200000e4
 8004888:	200000b4 	.word	0x200000b4
 800488c:	00000449 	.word	0x00000449
 8004890:	20000228 	.word	0x20000228
 8004894:	fffffbe6 	.word	0xfffffbe6
 8004898:	00000416 	.word	0x00000416
 800489c:	fffffbe8 	.word	0xfffffbe8
 80048a0:	2000000c 	.word	0x2000000c
 80048a4:	200000c8 	.word	0x200000c8
 80048a8:	2000008c 	.word	0x2000008c
 80048ac:	200000f8 	.word	0x200000f8
 80048b0:	20000030 	.word	0x20000030
 80048b4:	200000bc 	.word	0x200000bc
 80048b8:	20000090 	.word	0x20000090
 80048bc:	20000494 	.word	0x20000494
 80048c0:	40014000 	.word	0x40014000
 80048c4:	40014400 	.word	0x40014400
 80048c8:	200000f0 	.word	0x200000f0
 80048cc:	20000000 	.word	0x20000000
 80048d0:	2000022c 	.word	0x2000022c
 80048d4:	20000158 	.word	0x20000158
 80048d8:	200000c0 	.word	0x200000c0
 80048dc:	20000100 	.word	0x20000100
 80048e0:	200000d3 	.word	0x200000d3
 80048e4:	2000010c 	.word	0x2000010c
 80048e8:	20000018 	.word	0x20000018
 80048ec:	00002711 	.word	0x00002711
 80048f0:	00002710 	.word	0x00002710
 80048f4:	20000050 	.word	0x20000050
 80048f8:	20000120 	.word	0x20000120
 80048fc:	20000094 	.word	0x20000094
 8004900:	200000ec 	.word	0x200000ec
 8004904:	40010400 	.word	0x40010400
 8004908:	000007d1 	.word	0x000007d1
 800490c:	20000048 	.word	0x20000048
 8004910:	20000044 	.word	0x20000044
				allOff();
 8004914:	f7fe fcb2 	bl	800327c <allOff>
 8004918:	9b00      	ldr	r3, [sp, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	9304      	str	r3, [sp, #16]
			duty_cycle = 0;
 800491e:	9b05      	ldr	r3, [sp, #20]
 8004920:	602b      	str	r3, [r5, #0]
			if (brake || tempbrake) {
 8004922:	9b04      	ldr	r3, [sp, #16]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d100      	bne.n	800492a <main+0x90a>
 8004928:	e701      	b.n	800472e <main+0x70e>
 800492a:	e705      	b.n	8004738 <main+0x718>
				if ((inputSet == 1) && (input == 0)) {
 800492c:	4b84      	ldr	r3, [pc, #528]	; (8004b40 <main+0xb20>)
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	9304      	str	r3, [sp, #16]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d006      	beq.n	8004944 <main+0x924>
 8004936:	6833      	ldr	r3, [r6, #0]
				if (input > 0) {
 8004938:	2b00      	cmp	r3, #0
 800493a:	dc00      	bgt.n	800493e <main+0x91e>
 800493c:	e6b1      	b.n	80046a2 <main+0x682>
					armedcount = 0;
 800493e:	4a81      	ldr	r2, [pc, #516]	; (8004b44 <main+0xb24>)
 8004940:	6014      	str	r4, [r2, #0]
 8004942:	e6a7      	b.n	8004694 <main+0x674>
				if ((inputSet == 1) && (input == 0)) {
 8004944:	6833      	ldr	r3, [r6, #0]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d1f6      	bne.n	8004938 <main+0x918>
					armedcount++;
 800494a:	4b7e      	ldr	r3, [pc, #504]	; (8004b44 <main+0xb24>)
 800494c:	4a7d      	ldr	r2, [pc, #500]	; (8004b44 <main+0xb24>)
 800494e:	681b      	ldr	r3, [r3, #0]
					HAL_Delay(1);
 8004950:	2001      	movs	r0, #1
					armedcount++;
 8004952:	9305      	str	r3, [sp, #20]
 8004954:	3301      	adds	r3, #1
 8004956:	6013      	str	r3, [r2, #0]
					HAL_Delay(1);
 8004958:	f7fb fd7c 	bl	8000454 <HAL_Delay>
					if (armedcount > 2000) {
 800495c:	23fa      	movs	r3, #250	; 0xfa
 800495e:	4a79      	ldr	r2, [pc, #484]	; (8004b44 <main+0xb24>)
 8004960:	00db      	lsls	r3, r3, #3
 8004962:	6812      	ldr	r2, [r2, #0]
 8004964:	9205      	str	r2, [sp, #20]
 8004966:	429a      	cmp	r2, r3
 8004968:	dde5      	ble.n	8004936 <main+0x916>
						armed = 1;
 800496a:	466a      	mov	r2, sp
 800496c:	4b76      	ldr	r3, [pc, #472]	; (8004b48 <main+0xb28>)
 800496e:	7c12      	ldrb	r2, [r2, #16]
 8004970:	701a      	strb	r2, [r3, #0]
						playInputTune();
 8004972:	f7fe fff5 	bl	8003960 <playInputTune>
 8004976:	e7de      	b.n	8004936 <main+0x916>
					dir_reversed = 0;
 8004978:	4653      	mov	r3, sl
 800497a:	601c      	str	r4, [r3, #0]
 800497c:	e620      	b.n	80045c0 <main+0x5a0>
 800497e:	464b      	mov	r3, r9
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	e621      	b.n	80045c8 <main+0x5a8>
 8004984:	e7fe      	b.n	8004984 <main+0x964>
		newinput = 1001;
 8004986:	4b71      	ldr	r3, [pc, #452]	; (8004b4c <main+0xb2c>)
 8004988:	001a      	movs	r2, r3
 800498a:	9303      	str	r3, [sp, #12]
 800498c:	4b70      	ldr	r3, [pc, #448]	; (8004b50 <main+0xb30>)
 800498e:	6013      	str	r3, [r2, #0]
 8004990:	e5b1      	b.n	80044f6 <main+0x4d6>
					forward = dir_reversed;
 8004992:	4652      	mov	r2, sl
 8004994:	4643      	mov	r3, r8
 8004996:	6812      	ldr	r2, [r2, #0]
 8004998:	601a      	str	r2, [r3, #0]
 800499a:	e611      	b.n	80045c0 <main+0x5a0>
					bi_direction = 0;
 800499c:	464b      	mov	r3, r9
 800499e:	601c      	str	r4, [r3, #0]
					armed = 0;
 80049a0:	4b69      	ldr	r3, [pc, #420]	; (8004b48 <main+0xb28>)
 80049a2:	701c      	strb	r4, [r3, #0]
				dshotcommand = 0;
 80049a4:	4b6b      	ldr	r3, [pc, #428]	; (8004b54 <main+0xb34>)
 80049a6:	601c      	str	r4, [r3, #0]
			} else if ((proshot || dshot) && bi_direction) {
 80049a8:	4b6b      	ldr	r3, [pc, #428]	; (8004b58 <main+0xb38>)
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d100      	bne.n	80049b2 <main+0x992>
 80049b0:	e611      	b.n	80045d6 <main+0x5b6>
				adjusted_input = newinput;
 80049b2:	9b03      	ldr	r3, [sp, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	603b      	str	r3, [r7, #0]
 80049b8:	e647      	b.n	800464a <main+0x62a>
					forward = 1 - dir_reversed;
 80049ba:	4652      	mov	r2, sl
 80049bc:	6812      	ldr	r2, [r2, #0]
 80049be:	3b13      	subs	r3, #19
 80049c0:	1a9b      	subs	r3, r3, r2
 80049c2:	4642      	mov	r2, r8
 80049c4:	6013      	str	r3, [r2, #0]
 80049c6:	e5fb      	b.n	80045c0 <main+0x5a0>
					storeEEpromConfig();
 80049c8:	f7fe fa10 	bl	8002dec <storeEEpromConfig>
 80049cc:	e7fe      	b.n	80049cc <main+0x9ac>
					adjusted_input = 0;
 80049ce:	603c      	str	r4, [r7, #0]
				adjusted_input = 2000;
 80049d0:	2300      	movs	r3, #0
 80049d2:	e640      	b.n	8004656 <main+0x636>
					bi_direction = 1;
 80049d4:	464a      	mov	r2, r9
 80049d6:	3b09      	subs	r3, #9
 80049d8:	6013      	str	r3, [r2, #0]
					armed = 0;
 80049da:	4b5b      	ldr	r3, [pc, #364]	; (8004b48 <main+0xb28>)
 80049dc:	701c      	strb	r4, [r3, #0]
				dshotcommand = 0;
 80049de:	4b5d      	ldr	r3, [pc, #372]	; (8004b54 <main+0xb34>)
 80049e0:	601c      	str	r4, [r3, #0]
			if (bi_direction == 1 && (proshot == 0 && dshot == 0)) {
 80049e2:	4b5d      	ldr	r3, [pc, #372]	; (8004b58 <main+0xb38>)
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d000      	beq.n	80049ec <main+0x9cc>
 80049ea:	e5fc      	b.n	80045e6 <main+0x5c6>
 80049ec:	4b5b      	ldr	r3, [pc, #364]	; (8004b5c <main+0xb3c>)
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	9304      	str	r3, [sp, #16]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d000      	beq.n	80049f8 <main+0x9d8>
 80049f6:	e5f6      	b.n	80045e6 <main+0x5c6>
				if (newinput > 1100) {
 80049f8:	9b03      	ldr	r3, [sp, #12]
 80049fa:	4a59      	ldr	r2, [pc, #356]	; (8004b60 <main+0xb40>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4293      	cmp	r3, r2
 8004a00:	dd37      	ble.n	8004a72 <main+0xa52>
					if (forward == dir_reversed) {
 8004a02:	4642      	mov	r2, r8
 8004a04:	6810      	ldr	r0, [r2, #0]
 8004a06:	4652      	mov	r2, sl
 8004a08:	6812      	ldr	r2, [r2, #0]
 8004a0a:	4290      	cmp	r0, r2
 8004a0c:	d028      	beq.n	8004a60 <main+0xa40>
					if (prop_brake_active == 0) {
 8004a0e:	4a55      	ldr	r2, [pc, #340]	; (8004b64 <main+0xb44>)
 8004a10:	7812      	ldrb	r2, [r2, #0]
 8004a12:	2a00      	cmp	r2, #0
 8004a14:	d104      	bne.n	8004a20 <main+0xa00>
						adjusted_input = (newinput - 1050) * 3;
 8004a16:	4a54      	ldr	r2, [pc, #336]	; (8004b68 <main+0xb48>)
 8004a18:	1899      	adds	r1, r3, r2
 8004a1a:	004a      	lsls	r2, r1, #1
 8004a1c:	1852      	adds	r2, r2, r1
 8004a1e:	603a      	str	r2, [r7, #0]
				if (zctimeout >= zc_timeout_threshold) {
 8004a20:	4a52      	ldr	r2, [pc, #328]	; (8004b6c <main+0xb4c>)
 8004a22:	6812      	ldr	r2, [r2, #0]
 8004a24:	9204      	str	r2, [sp, #16]
 8004a26:	4a52      	ldr	r2, [pc, #328]	; (8004b70 <main+0xb50>)
 8004a28:	6812      	ldr	r2, [r2, #0]
 8004a2a:	9205      	str	r2, [sp, #20]
 8004a2c:	9905      	ldr	r1, [sp, #20]
 8004a2e:	9a04      	ldr	r2, [sp, #16]
 8004a30:	428a      	cmp	r2, r1
 8004a32:	db09      	blt.n	8004a48 <main+0xa28>
					if (vehicle_mode != 3) { // car mode requires throttle return to center before direction change
 8004a34:	4a4f      	ldr	r2, [pc, #316]	; (8004b74 <main+0xb54>)
 8004a36:	7812      	ldrb	r2, [r2, #0]
 8004a38:	2a03      	cmp	r2, #3
 8004a3a:	d001      	beq.n	8004a40 <main+0xa20>
						prop_brake_active = 0;
 8004a3c:	4a49      	ldr	r2, [pc, #292]	; (8004b64 <main+0xb44>)
 8004a3e:	7014      	strb	r4, [r2, #0]
					startupcountdown = 0;
 8004a40:	4a4d      	ldr	r2, [pc, #308]	; (8004b78 <main+0xb58>)
 8004a42:	6014      	str	r4, [r2, #0]
					bemf_counts = 0;
 8004a44:	4a4d      	ldr	r2, [pc, #308]	; (8004b7c <main+0xb5c>)
 8004a46:	6014      	str	r4, [r2, #0]
				if (newinput > 800 && newinput < 1100) {
 8004a48:	4a4d      	ldr	r2, [pc, #308]	; (8004b80 <main+0xb60>)
 8004a4a:	4694      	mov	ip, r2
 8004a4c:	2295      	movs	r2, #149	; 0x95
 8004a4e:	4463      	add	r3, ip
 8004a50:	0052      	lsls	r2, r2, #1
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d900      	bls.n	8004a58 <main+0xa38>
 8004a56:	e5f7      	b.n	8004648 <main+0x628>
					prop_brake_active = 0;
 8004a58:	4b42      	ldr	r3, [pc, #264]	; (8004b64 <main+0xb44>)
					adjusted_input = 0;
 8004a5a:	603c      	str	r4, [r7, #0]
					prop_brake_active = 0;
 8004a5c:	701c      	strb	r4, [r3, #0]
 8004a5e:	e7b7      	b.n	80049d0 <main+0x9b0>
						adjusted_input = 0;
 8004a60:	9a04      	ldr	r2, [sp, #16]
						prop_brake_active = 1;
 8004a62:	4940      	ldr	r1, [pc, #256]	; (8004b64 <main+0xb44>)
						adjusted_input = 0;
 8004a64:	603a      	str	r2, [r7, #0]
						prop_brake_active = 1;
 8004a66:	2201      	movs	r2, #1
 8004a68:	700a      	strb	r2, [r1, #0]
						forward = 1 - dir_reversed;
 8004a6a:	4641      	mov	r1, r8
 8004a6c:	1a12      	subs	r2, r2, r0
 8004a6e:	600a      	str	r2, [r1, #0]
 8004a70:	e7d6      	b.n	8004a20 <main+0xa00>
				if (newinput < 800) {
 8004a72:	4a44      	ldr	r2, [pc, #272]	; (8004b84 <main+0xb64>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	dcd3      	bgt.n	8004a20 <main+0xa00>
					if (forward == (1 - dir_reversed)) {
 8004a78:	4652      	mov	r2, sl
 8004a7a:	2001      	movs	r0, #1
 8004a7c:	6812      	ldr	r2, [r2, #0]
 8004a7e:	1a81      	subs	r1, r0, r2
 8004a80:	468c      	mov	ip, r1
 8004a82:	4641      	mov	r1, r8
 8004a84:	6809      	ldr	r1, [r1, #0]
 8004a86:	458c      	cmp	ip, r1
 8004a88:	d02b      	beq.n	8004ae2 <main+0xac2>
					if (prop_brake_active == 0) {
 8004a8a:	4a36      	ldr	r2, [pc, #216]	; (8004b64 <main+0xb44>)
 8004a8c:	7812      	ldrb	r2, [r2, #0]
 8004a8e:	2a00      	cmp	r2, #0
 8004a90:	d1c6      	bne.n	8004a20 <main+0xa00>
						adjusted_input = ((800 - newinput) * 3) + 100;
 8004a92:	21c8      	movs	r1, #200	; 0xc8
 8004a94:	0089      	lsls	r1, r1, #2
 8004a96:	1ac9      	subs	r1, r1, r3
 8004a98:	004a      	lsls	r2, r1, #1
 8004a9a:	1852      	adds	r2, r2, r1
 8004a9c:	3264      	adds	r2, #100	; 0x64
 8004a9e:	603a      	str	r2, [r7, #0]
 8004aa0:	e7be      	b.n	8004a20 <main+0xa00>
			} else if (input - adjusted_input > 5) {
 8004aa2:	1ad1      	subs	r1, r2, r3
 8004aa4:	2905      	cmp	r1, #5
 8004aa6:	dd23      	ble.n	8004af0 <main+0xad0>
				input = input - 2;
 8004aa8:	3a02      	subs	r2, #2
 8004aaa:	6032      	str	r2, [r6, #0]
 8004aac:	e5da      	b.n	8004664 <main+0x644>
			prop_brake_active = 0;
 8004aae:	492d      	ldr	r1, [pc, #180]	; (8004b64 <main+0xb44>)
			duty_cycle = input  - 20;
 8004ab0:	3b14      	subs	r3, #20
			prop_brake_active = 0;
 8004ab2:	700c      	strb	r4, [r1, #0]
			started = 1;
 8004ab4:	4934      	ldr	r1, [pc, #208]	; (8004b88 <main+0xb68>)
			duty_cycle = input  - 20;
 8004ab6:	602b      	str	r3, [r5, #0]
			started = 1;
 8004ab8:	600a      	str	r2, [r1, #0]
			if (bemf_counts < 50) {
 8004aba:	4a30      	ldr	r2, [pc, #192]	; (8004b7c <main+0xb5c>)
 8004abc:	6812      	ldr	r2, [r2, #0]
 8004abe:	9204      	str	r2, [sp, #16]
 8004ac0:	2a31      	cmp	r2, #49	; 0x31
 8004ac2:	dc23      	bgt.n	8004b0c <main+0xaec>
				if (duty_cycle < 150) {
 8004ac4:	2b95      	cmp	r3, #149	; 0x95
 8004ac6:	dc15      	bgt.n	8004af4 <main+0xad4>
					duty_cycle = 150;
 8004ac8:	2396      	movs	r3, #150	; 0x96
 8004aca:	602b      	str	r3, [r5, #0]
			if (running) {
 8004acc:	465b      	mov	r3, fp
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d100      	bne.n	8004ad6 <main+0xab6>
 8004ad4:	e5e5      	b.n	80046a2 <main+0x682>
 8004ad6:	2396      	movs	r3, #150	; 0x96
				TIM1->CCR1 = duty_cycle;// set duty cycle to 50 out of 768 to start.
 8004ad8:	4a2c      	ldr	r2, [pc, #176]	; (8004b8c <main+0xb6c>)
 8004ada:	6353      	str	r3, [r2, #52]	; 0x34
				TIM1->CCR2 = duty_cycle;
 8004adc:	6393      	str	r3, [r2, #56]	; 0x38
				TIM1->CCR3 = duty_cycle;
 8004ade:	63d3      	str	r3, [r2, #60]	; 0x3c
 8004ae0:	e5df      	b.n	80046a2 <main+0x682>
						prop_brake_active = 1;
 8004ae2:	4920      	ldr	r1, [pc, #128]	; (8004b64 <main+0xb44>)
 8004ae4:	7008      	strb	r0, [r1, #0]
						adjusted_input = 0;
 8004ae6:	9904      	ldr	r1, [sp, #16]
 8004ae8:	6039      	str	r1, [r7, #0]
						forward = dir_reversed;
 8004aea:	4641      	mov	r1, r8
 8004aec:	600a      	str	r2, [r1, #0]
 8004aee:	e797      	b.n	8004a20 <main+0xa00>
				input = adjusted_input;
 8004af0:	6033      	str	r3, [r6, #0]
 8004af2:	e5b7      	b.n	8004664 <main+0x644>
				if (duty_cycle > 350) {
 8004af4:	22af      	movs	r2, #175	; 0xaf
 8004af6:	0052      	lsls	r2, r2, #1
 8004af8:	4293      	cmp	r3, r2
 8004afa:	dd12      	ble.n	8004b22 <main+0xb02>
			if (running) {
 8004afc:	465b      	mov	r3, fp
 8004afe:	681b      	ldr	r3, [r3, #0]
					duty_cycle = 350;
 8004b00:	602a      	str	r2, [r5, #0]
			if (running) {
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d100      	bne.n	8004b08 <main+0xae8>
 8004b06:	e5cc      	b.n	80046a2 <main+0x682>
 8004b08:	0013      	movs	r3, r2
 8004b0a:	e7e5      	b.n	8004ad8 <main+0xab8>
 8004b0c:	465a      	mov	r2, fp
 8004b0e:	6812      	ldr	r2, [r2, #0]
 8004b10:	2a00      	cmp	r2, #0
 8004b12:	d100      	bne.n	8004b16 <main+0xaf6>
 8004b14:	e5c5      	b.n	80046a2 <main+0x682>
				if (duty_cycle > 1998) {                             // safety!!!
 8004b16:	4a1e      	ldr	r2, [pc, #120]	; (8004b90 <main+0xb70>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	dd07      	ble.n	8004b2c <main+0xb0c>
					duty_cycle = 1999;
 8004b1c:	4b1d      	ldr	r3, [pc, #116]	; (8004b94 <main+0xb74>)
 8004b1e:	602b      	str	r3, [r5, #0]
 8004b20:	e7da      	b.n	8004ad8 <main+0xab8>
			if (running) {
 8004b22:	465a      	mov	r2, fp
 8004b24:	6812      	ldr	r2, [r2, #0]
 8004b26:	2a00      	cmp	r2, #0
 8004b28:	d100      	bne.n	8004b2c <main+0xb0c>
 8004b2a:	e5ba      	b.n	80046a2 <main+0x682>
				if (duty_cycle < 60) {
 8004b2c:	2b3b      	cmp	r3, #59	; 0x3b
 8004b2e:	dcd3      	bgt.n	8004ad8 <main+0xab8>
					duty_cycle = 60;
 8004b30:	233c      	movs	r3, #60	; 0x3c
 8004b32:	602b      	str	r3, [r5, #0]
 8004b34:	e7d0      	b.n	8004ad8 <main+0xab8>
					dir_reversed = 1;
 8004b36:	4652      	mov	r2, sl
 8004b38:	3b07      	subs	r3, #7
 8004b3a:	6013      	str	r3, [r2, #0]
 8004b3c:	e540      	b.n	80045c0 <main+0x5a0>
 8004b3e:	46c0      	nop			; (mov r8, r8)
 8004b40:	200000c8 	.word	0x200000c8
 8004b44:	20000090 	.word	0x20000090
 8004b48:	2000008c 	.word	0x2000008c
 8004b4c:	200000cc 	.word	0x200000cc
 8004b50:	000003e9 	.word	0x000003e9
 8004b54:	200000b8 	.word	0x200000b8
 8004b58:	200000e4 	.word	0x200000e4
 8004b5c:	200000b4 	.word	0x200000b4
 8004b60:	0000044c 	.word	0x0000044c
 8004b64:	200000d3 	.word	0x200000d3
 8004b68:	fffffbe6 	.word	0xfffffbe6
 8004b6c:	20000120 	.word	0x20000120
 8004b70:	20000050 	.word	0x20000050
 8004b74:	2000004c 	.word	0x2000004c
 8004b78:	20000104 	.word	0x20000104
 8004b7c:	20000228 	.word	0x20000228
 8004b80:	fffffcdf 	.word	0xfffffcdf
 8004b84:	0000031f 	.word	0x0000031f
 8004b88:	20000100 	.word	0x20000100
 8004b8c:	40012c00 	.word	0x40012c00
 8004b90:	000007ce 	.word	0x000007ce
 8004b94:	000007cf 	.word	0x000007cf

08004b98 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8004b98:	e7fe      	b.n	8004b98 <_Error_Handler>
 8004b9a:	46c0      	nop			; (mov r8, r8)

08004b9c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b9c:	2301      	movs	r3, #1

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8004b9e:	2005      	movs	r0, #5
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ba0:	4a0e      	ldr	r2, [pc, #56]	; (8004bdc <HAL_MspInit+0x40>)
{
 8004ba2:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ba4:	6991      	ldr	r1, [r2, #24]
{
 8004ba6:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ba8:	4319      	orrs	r1, r3
 8004baa:	6191      	str	r1, [r2, #24]
 8004bac:	6992      	ldr	r2, [r2, #24]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8004bae:	2100      	movs	r1, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	4240      	negs	r0, r0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bb8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8004bba:	f7fb fed1 	bl	8000960 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8004bbe:	2002      	movs	r0, #2
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	2100      	movs	r1, #0
 8004bc4:	4240      	negs	r0, r0
 8004bc6:	f7fb fecb 	bl	8000960 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8004bca:	2001      	movs	r0, #1
 8004bcc:	2200      	movs	r2, #0
 8004bce:	2100      	movs	r1, #0
 8004bd0:	4240      	negs	r0, r0
 8004bd2:	f7fb fec5 	bl	8000960 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004bd6:	b003      	add	sp, #12
 8004bd8:	bd00      	pop	{pc}
 8004bda:	46c0      	nop			; (mov r8, r8)
 8004bdc:	40021000 	.word	0x40021000

08004be0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004be0:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8004be2:	4b20      	ldr	r3, [pc, #128]	; (8004c64 <HAL_ADC_MspInit+0x84>)
 8004be4:	6802      	ldr	r2, [r0, #0]
{
 8004be6:	b087      	sub	sp, #28
 8004be8:	0004      	movs	r4, r0
  if(hadc->Instance==ADC1)
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d001      	beq.n	8004bf2 <HAL_ADC_MspInit+0x12>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004bee:	b007      	add	sp, #28
 8004bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004bf2:	2780      	movs	r7, #128	; 0x80
 8004bf4:	4b1c      	ldr	r3, [pc, #112]	; (8004c68 <HAL_ADC_MspInit+0x88>)
 8004bf6:	00bf      	lsls	r7, r7, #2
 8004bf8:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bfa:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004bfc:	433a      	orrs	r2, r7
 8004bfe:	619a      	str	r2, [r3, #24]
 8004c00:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c02:	2600      	movs	r6, #0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004c04:	403b      	ands	r3, r7
 8004c06:	9300      	str	r3, [sp, #0]
 8004c08:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8004c0a:	2348      	movs	r3, #72	; 0x48
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c0c:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8004c0e:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c10:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004c12:	3b45      	subs	r3, #69	; 0x45
 8004c14:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c16:	9603      	str	r6, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c18:	f7fc f976 	bl	8000f08 <HAL_GPIO_Init>
    hdma_adc.Instance = DMA1_Channel1;
 8004c1c:	4d13      	ldr	r5, [pc, #76]	; (8004c6c <HAL_ADC_MspInit+0x8c>)
 8004c1e:	4b14      	ldr	r3, [pc, #80]	; (8004c70 <HAL_ADC_MspInit+0x90>)
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8004c20:	0028      	movs	r0, r5
    hdma_adc.Instance = DMA1_Channel1;
 8004c22:	602b      	str	r3, [r5, #0]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8004c24:	2380      	movs	r3, #128	; 0x80
 8004c26:	60eb      	str	r3, [r5, #12]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004c28:	2380      	movs	r3, #128	; 0x80
 8004c2a:	011b      	lsls	r3, r3, #4
 8004c2c:	616b      	str	r3, [r5, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8004c2e:	2320      	movs	r3, #32
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004c30:	606e      	str	r6, [r5, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c32:	60ae      	str	r6, [r5, #8]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004c34:	612f      	str	r7, [r5, #16]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8004c36:	61ab      	str	r3, [r5, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8004c38:	61ee      	str	r6, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8004c3a:	f7fb feff 	bl	8000a3c <HAL_DMA_Init>
 8004c3e:	2800      	cmp	r0, #0
 8004c40:	d10a      	bne.n	8004c58 <HAL_ADC_MspInit+0x78>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8004c42:	63e5      	str	r5, [r4, #60]	; 0x3c
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8004c44:	2200      	movs	r2, #0
 8004c46:	2100      	movs	r1, #0
 8004c48:	200c      	movs	r0, #12
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8004c4a:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8004c4c:	f7fb fe88 	bl	8000960 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8004c50:	200c      	movs	r0, #12
 8004c52:	f7fb feb9 	bl	80009c8 <HAL_NVIC_EnableIRQ>
}
 8004c56:	e7ca      	b.n	8004bee <HAL_ADC_MspInit+0xe>
      _Error_Handler(__FILE__, __LINE__);
 8004c58:	216b      	movs	r1, #107	; 0x6b
 8004c5a:	4806      	ldr	r0, [pc, #24]	; (8004c74 <HAL_ADC_MspInit+0x94>)
 8004c5c:	f7ff ff9c 	bl	8004b98 <_Error_Handler>
 8004c60:	e7ef      	b.n	8004c42 <HAL_ADC_MspInit+0x62>
 8004c62:	46c0      	nop			; (mov r8, r8)
 8004c64:	40012400 	.word	0x40012400
 8004c68:	40021000 	.word	0x40021000
 8004c6c:	20000404 	.word	0x20000404
 8004c70:	40020008 	.word	0x40020008
 8004c74:	08004ff0 	.word	0x08004ff0

08004c78 <HAL_COMP_MspInit>:
  }

}

void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8004c78:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcomp->Instance==COMP1)
 8004c7a:	4b0d      	ldr	r3, [pc, #52]	; (8004cb0 <HAL_COMP_MspInit+0x38>)
 8004c7c:	6802      	ldr	r2, [r0, #0]
{
 8004c7e:	b087      	sub	sp, #28
  if(hcomp->Instance==COMP1)
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d001      	beq.n	8004c88 <HAL_COMP_MspInit+0x10>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 8004c84:	b007      	add	sp, #28
 8004c86:	bd00      	pop	{pc}
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8004c88:	2322      	movs	r3, #34	; 0x22
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c8a:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8004c8c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004c8e:	3b1f      	subs	r3, #31
 8004c90:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c92:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c94:	a901      	add	r1, sp, #4
 8004c96:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c98:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c9a:	f7fc f935 	bl	8000f08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	200c      	movs	r0, #12
 8004ca4:	f7fb fe5c 	bl	8000960 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8004ca8:	200c      	movs	r0, #12
 8004caa:	f7fb fe8d 	bl	80009c8 <HAL_NVIC_EnableIRQ>
}
 8004cae:	e7e9      	b.n	8004c84 <HAL_COMP_MspInit+0xc>
 8004cb0:	4001001c 	.word	0x4001001c

08004cb4 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004cb4:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_base->Instance==TIM1)
 8004cb6:	6803      	ldr	r3, [r0, #0]
 8004cb8:	4a3e      	ldr	r2, [pc, #248]	; (8004db4 <HAL_TIM_Base_MspInit+0x100>)
{
 8004cba:	b08a      	sub	sp, #40	; 0x28
 8004cbc:	0004      	movs	r4, r0
  if(htim_base->Instance==TIM1)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d00e      	beq.n	8004ce0 <HAL_TIM_Base_MspInit+0x2c>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8004cc2:	2280      	movs	r2, #128	; 0x80
 8004cc4:	05d2      	lsls	r2, r2, #23
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d015      	beq.n	8004cf6 <HAL_TIM_Base_MspInit+0x42>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8004cca:	4a3b      	ldr	r2, [pc, #236]	; (8004db8 <HAL_TIM_Base_MspInit+0x104>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d01c      	beq.n	8004d0a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM15)
 8004cd0:	4a3a      	ldr	r2, [pc, #232]	; (8004dbc <HAL_TIM_Base_MspInit+0x108>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d036      	beq.n	8004d44 <HAL_TIM_Base_MspInit+0x90>

  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
  else if(htim_base->Instance==TIM16)
 8004cd6:	4a3a      	ldr	r2, [pc, #232]	; (8004dc0 <HAL_TIM_Base_MspInit+0x10c>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d020      	beq.n	8004d1e <HAL_TIM_Base_MspInit+0x6a>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8004cdc:	b00a      	add	sp, #40	; 0x28
 8004cde:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004ce0:	2080      	movs	r0, #128	; 0x80
 8004ce2:	4a38      	ldr	r2, [pc, #224]	; (8004dc4 <HAL_TIM_Base_MspInit+0x110>)
 8004ce4:	0100      	lsls	r0, r0, #4
 8004ce6:	6991      	ldr	r1, [r2, #24]
 8004ce8:	4301      	orrs	r1, r0
 8004cea:	6191      	str	r1, [r2, #24]
 8004cec:	6993      	ldr	r3, [r2, #24]
 8004cee:	4003      	ands	r3, r0
 8004cf0:	9301      	str	r3, [sp, #4]
 8004cf2:	9b01      	ldr	r3, [sp, #4]
 8004cf4:	e7f2      	b.n	8004cdc <HAL_TIM_Base_MspInit+0x28>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	4a32      	ldr	r2, [pc, #200]	; (8004dc4 <HAL_TIM_Base_MspInit+0x110>)
 8004cfa:	69d1      	ldr	r1, [r2, #28]
 8004cfc:	4319      	orrs	r1, r3
 8004cfe:	61d1      	str	r1, [r2, #28]
 8004d00:	69d2      	ldr	r2, [r2, #28]
 8004d02:	4013      	ands	r3, r2
 8004d04:	9302      	str	r3, [sp, #8]
 8004d06:	9b02      	ldr	r3, [sp, #8]
 8004d08:	e7e8      	b.n	8004cdc <HAL_TIM_Base_MspInit+0x28>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004d0a:	2302      	movs	r3, #2
 8004d0c:	4a2d      	ldr	r2, [pc, #180]	; (8004dc4 <HAL_TIM_Base_MspInit+0x110>)
 8004d0e:	69d1      	ldr	r1, [r2, #28]
 8004d10:	4319      	orrs	r1, r3
 8004d12:	61d1      	str	r1, [r2, #28]
 8004d14:	69d2      	ldr	r2, [r2, #28]
 8004d16:	4013      	ands	r3, r2
 8004d18:	9303      	str	r3, [sp, #12]
 8004d1a:	9b03      	ldr	r3, [sp, #12]
 8004d1c:	e7de      	b.n	8004cdc <HAL_TIM_Base_MspInit+0x28>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004d1e:	2080      	movs	r0, #128	; 0x80
 8004d20:	4a28      	ldr	r2, [pc, #160]	; (8004dc4 <HAL_TIM_Base_MspInit+0x110>)
 8004d22:	0280      	lsls	r0, r0, #10
 8004d24:	6991      	ldr	r1, [r2, #24]
 8004d26:	4301      	orrs	r1, r0
 8004d28:	6191      	str	r1, [r2, #24]
 8004d2a:	6993      	ldr	r3, [r2, #24]
    HAL_NVIC_SetPriority(TIM16_IRQn, 1, 0);
 8004d2c:	2101      	movs	r1, #1
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004d2e:	4003      	ands	r3, r0
 8004d30:	9305      	str	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM16_IRQn, 1, 0);
 8004d32:	2200      	movs	r2, #0
 8004d34:	2015      	movs	r0, #21
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004d36:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM16_IRQn, 1, 0);
 8004d38:	f7fb fe12 	bl	8000960 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8004d3c:	2015      	movs	r0, #21
 8004d3e:	f7fb fe43 	bl	80009c8 <HAL_NVIC_EnableIRQ>
}
 8004d42:	e7cb      	b.n	8004cdc <HAL_TIM_Base_MspInit+0x28>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004d44:	2080      	movs	r0, #128	; 0x80
 8004d46:	4a1f      	ldr	r2, [pc, #124]	; (8004dc4 <HAL_TIM_Base_MspInit+0x110>)
 8004d48:	0240      	lsls	r0, r0, #9
 8004d4a:	6991      	ldr	r1, [r2, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d4c:	2600      	movs	r6, #0
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004d4e:	4301      	orrs	r1, r0
 8004d50:	6191      	str	r1, [r2, #24]
 8004d52:	6993      	ldr	r3, [r2, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d54:	a905      	add	r1, sp, #20
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004d56:	4003      	ands	r3, r0
 8004d58:	9304      	str	r3, [sp, #16]
 8004d5a:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d5c:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004d5e:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d60:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004d62:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d64:	3b02      	subs	r3, #2
 8004d66:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d68:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d6a:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM15;
 8004d6c:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d6e:	f7fc f8cb 	bl	8000f08 <HAL_GPIO_Init>
    hdma_tim15_ch1_up_trig_com.Instance = DMA1_Channel5;
 8004d72:	4d15      	ldr	r5, [pc, #84]	; (8004dc8 <HAL_TIM_Base_MspInit+0x114>)
 8004d74:	4b15      	ldr	r3, [pc, #84]	; (8004dcc <HAL_TIM_Base_MspInit+0x118>)
    if (HAL_DMA_Init(&hdma_tim15_ch1_up_trig_com) != HAL_OK)
 8004d76:	0028      	movs	r0, r5
    hdma_tim15_ch1_up_trig_com.Instance = DMA1_Channel5;
 8004d78:	602b      	str	r3, [r5, #0]
    hdma_tim15_ch1_up_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 8004d7a:	2380      	movs	r3, #128	; 0x80
 8004d7c:	60eb      	str	r3, [r5, #12]
    hdma_tim15_ch1_up_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004d7e:	3380      	adds	r3, #128	; 0x80
 8004d80:	612b      	str	r3, [r5, #16]
    hdma_tim15_ch1_up_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004d82:	2380      	movs	r3, #128	; 0x80
 8004d84:	011b      	lsls	r3, r3, #4
 8004d86:	616b      	str	r3, [r5, #20]
    hdma_tim15_ch1_up_trig_com.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004d88:	2380      	movs	r3, #128	; 0x80
 8004d8a:	015b      	lsls	r3, r3, #5
    hdma_tim15_ch1_up_trig_com.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d8c:	606e      	str	r6, [r5, #4]
    hdma_tim15_ch1_up_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d8e:	60ae      	str	r6, [r5, #8]
    hdma_tim15_ch1_up_trig_com.Init.Mode = DMA_NORMAL;
 8004d90:	61ae      	str	r6, [r5, #24]
    hdma_tim15_ch1_up_trig_com.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004d92:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_tim15_ch1_up_trig_com) != HAL_OK)
 8004d94:	f7fb fe52 	bl	8000a3c <HAL_DMA_Init>
 8004d98:	2800      	cmp	r0, #0
 8004d9a:	d004      	beq.n	8004da6 <HAL_TIM_Base_MspInit+0xf2>
      _Error_Handler(__FILE__, __LINE__);
 8004d9c:	211e      	movs	r1, #30
 8004d9e:	480c      	ldr	r0, [pc, #48]	; (8004dd0 <HAL_TIM_Base_MspInit+0x11c>)
 8004da0:	31ff      	adds	r1, #255	; 0xff
 8004da2:	f7ff fef9 	bl	8004b98 <_Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim15_ch1_up_trig_com);
 8004da6:	6265      	str	r5, [r4, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim15_ch1_up_trig_com);
 8004da8:	6225      	str	r5, [r4, #32]
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim15_ch1_up_trig_com);
 8004daa:	63a5      	str	r5, [r4, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim15_ch1_up_trig_com);
 8004dac:	626c      	str	r4, [r5, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim15_ch1_up_trig_com);
 8004dae:	6365      	str	r5, [r4, #52]	; 0x34
 8004db0:	e794      	b.n	8004cdc <HAL_TIM_Base_MspInit+0x28>
 8004db2:	46c0      	nop			; (mov r8, r8)
 8004db4:	40012c00 	.word	0x40012c00
 8004db8:	40000400 	.word	0x40000400
 8004dbc:	40014000 	.word	0x40014000
 8004dc0:	40014400 	.word	0x40014400
 8004dc4:	40021000 	.word	0x40021000
 8004dc8:	20000330 	.word	0x20000330
 8004dcc:	40020058 	.word	0x40020058
 8004dd0:	08004ff0 	.word	0x08004ff0

08004dd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004dd4:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 8004dd6:	4b10      	ldr	r3, [pc, #64]	; (8004e18 <HAL_TIM_MspPostInit+0x44>)
 8004dd8:	6802      	ldr	r2, [r0, #0]
{
 8004dda:	b087      	sub	sp, #28
  if(htim->Instance==TIM1)
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d001      	beq.n	8004de4 <HAL_TIM_MspPostInit+0x10>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004de0:	b007      	add	sp, #28
 8004de2:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8004de4:	23f8      	movs	r3, #248	; 0xf8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004de6:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004de8:	2402      	movs	r4, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dea:	2500      	movs	r5, #0
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8004dec:	011b      	lsls	r3, r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dee:	a901      	add	r1, sp, #4
 8004df0:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8004df2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004df4:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004df6:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004df8:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004dfa:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dfc:	f7fc f884 	bl	8000f08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004e00:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e02:	a901      	add	r1, sp, #4
 8004e04:	4805      	ldr	r0, [pc, #20]	; (8004e1c <HAL_TIM_MspPostInit+0x48>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004e06:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e08:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e0a:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e0c:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004e0e:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e10:	f7fc f87a 	bl	8000f08 <HAL_GPIO_Init>
}
 8004e14:	e7e4      	b.n	8004de0 <HAL_TIM_MspPostInit+0xc>
 8004e16:	46c0      	nop			; (mov r8, r8)
 8004e18:	40012c00 	.word	0x40012c00
 8004e1c:	48000400 	.word	0x48000400

08004e20 <NMI_Handler>:
 8004e20:	4770      	bx	lr
 8004e22:	46c0      	nop			; (mov r8, r8)

08004e24 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8004e24:	e7fe      	b.n	8004e24 <HardFault_Handler>
 8004e26:	46c0      	nop			; (mov r8, r8)

08004e28 <SVC_Handler>:
 8004e28:	4770      	bx	lr
 8004e2a:	46c0      	nop			; (mov r8, r8)

08004e2c <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004e2c:	4770      	bx	lr
 8004e2e:	46c0      	nop			; (mov r8, r8)

08004e30 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8004e30:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004e32:	f7fb fb01 	bl	8000438 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8004e36:	f7fb fdfd 	bl	8000a34 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004e3a:	bd10      	pop	{r4, pc}

08004e3c <DMA1_Channel1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt.
*/
void DMA1_Channel1_IRQHandler(void)
{
 8004e3c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8004e3e:	4802      	ldr	r0, [pc, #8]	; (8004e48 <DMA1_Channel1_IRQHandler+0xc>)
 8004e40:	f7fb fe70 	bl	8000b24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004e44:	bd10      	pop	{r4, pc}
 8004e46:	46c0      	nop			; (mov r8, r8)
 8004e48:	20000404 	.word	0x20000404

08004e4c <DMA1_Channel4_5_IRQHandler>:

/**
* @brief This function handles DMA1 channel 4 and 5 interrupts.
*/
void DMA1_Channel4_5_IRQHandler(void)
{
 8004e4c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim15_ch1_up_trig_com);
 8004e4e:	4804      	ldr	r0, [pc, #16]	; (8004e60 <DMA1_Channel4_5_IRQHandler+0x14>)
 8004e50:	f7fb fe68 	bl	8000b24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */
  transferComplete();
 8004e54:	f7fe ffd2 	bl	8003dfc <transferComplete>
  TIM16->CNT = 0;
 8004e58:	2200      	movs	r2, #0
 8004e5a:	4b02      	ldr	r3, [pc, #8]	; (8004e64 <DMA1_Channel4_5_IRQHandler+0x18>)
 8004e5c:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8004e5e:	bd10      	pop	{r4, pc}
 8004e60:	20000330 	.word	0x20000330
 8004e64:	40014400 	.word	0x40014400

08004e68 <ADC1_COMP_IRQHandler>:

/**
* @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
*/
void ADC1_COMP_IRQHandler(void)
{
 8004e68:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */
//	HAL_COMP_IRQHandler(&hcomp1);
  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8004e6a:	4803      	ldr	r0, [pc, #12]	; (8004e78 <ADC1_COMP_IRQHandler+0x10>)
 8004e6c:	f7fb fbb0 	bl	80005d0 <HAL_ADC_IRQHandler>
  HAL_COMP_IRQHandler(&hcomp1);
 8004e70:	4802      	ldr	r0, [pc, #8]	; (8004e7c <ADC1_COMP_IRQHandler+0x14>)
 8004e72:	f7fb fd5f 	bl	8000934 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8004e76:	bd10      	pop	{r4, pc}
 8004e78:	20000448 	.word	0x20000448
 8004e7c:	200001b8 	.word	0x200001b8

08004e80 <TIM16_IRQHandler>:

/**
* @brief This function handles TIM16 global interrupt.
*/
void TIM16_IRQHandler(void)
{
 8004e80:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8004e82:	4802      	ldr	r0, [pc, #8]	; (8004e8c <TIM16_IRQHandler+0xc>)
 8004e84:	f7fd faaa 	bl	80023dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8004e88:	bd10      	pop	{r4, pc}
 8004e8a:	46c0      	nop			; (mov r8, r8)
 8004e8c:	20000494 	.word	0x20000494

08004e90 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8004e90:	2101      	movs	r1, #1
 8004e92:	4b11      	ldr	r3, [pc, #68]	; (8004ed8 <SystemInit+0x48>)

#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 8004e94:	4811      	ldr	r0, [pc, #68]	; (8004edc <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 8004e9c:	685a      	ldr	r2, [r3, #4]
 8004e9e:	4002      	ands	r2, r0
 8004ea0:	605a      	str	r2, [r3, #4]
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	480e      	ldr	r0, [pc, #56]	; (8004ee0 <SystemInit+0x50>)
 8004ea6:	4002      	ands	r2, r0
 8004ea8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	480d      	ldr	r0, [pc, #52]	; (8004ee4 <SystemInit+0x54>)
 8004eae:	4002      	ands	r2, r0
 8004eb0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8004eb2:	685a      	ldr	r2, [r3, #4]
 8004eb4:	480c      	ldr	r0, [pc, #48]	; (8004ee8 <SystemInit+0x58>)
 8004eb6:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8004eb8:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8004eba:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8004ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ebe:	4382      	bics	r2, r0
 8004ec0:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
#elif defined (STM32F051x8) || defined (STM32F058xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
 8004ec2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ec4:	4809      	ldr	r0, [pc, #36]	; (8004eec <SystemInit+0x5c>)
 8004ec6:	4002      	ands	r2, r0
 8004ec8:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8004eca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ecc:	438a      	bics	r2, r1
 8004ece:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	609a      	str	r2, [r3, #8]

}
 8004ed4:	4770      	bx	lr
 8004ed6:	46c0      	nop			; (mov r8, r8)
 8004ed8:	40021000 	.word	0x40021000
 8004edc:	f8ffb80c 	.word	0xf8ffb80c
 8004ee0:	fef6ffff 	.word	0xfef6ffff
 8004ee4:	fffbffff 	.word	0xfffbffff
 8004ee8:	ffc0ffff 	.word	0xffc0ffff
 8004eec:	fffffeac 	.word	0xfffffeac

08004ef0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004ef0:	480d      	ldr	r0, [pc, #52]	; (8004f28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004ef2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004ef4:	480d      	ldr	r0, [pc, #52]	; (8004f2c <LoopForever+0x6>)
  ldr r1, =_edata
 8004ef6:	490e      	ldr	r1, [pc, #56]	; (8004f30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004ef8:	4a0e      	ldr	r2, [pc, #56]	; (8004f34 <LoopForever+0xe>)
  movs r3, #0
 8004efa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004efc:	e002      	b.n	8004f04 <LoopCopyDataInit>

08004efe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004efe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004f00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004f02:	3304      	adds	r3, #4

08004f04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004f04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004f06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004f08:	d3f9      	bcc.n	8004efe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004f0a:	4a0b      	ldr	r2, [pc, #44]	; (8004f38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004f0c:	4c0b      	ldr	r4, [pc, #44]	; (8004f3c <LoopForever+0x16>)
  movs r3, #0
 8004f0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004f10:	e001      	b.n	8004f16 <LoopFillZerobss>

08004f12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004f12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004f14:	3204      	adds	r2, #4

08004f16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004f16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004f18:	d3fb      	bcc.n	8004f12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004f1a:	f7ff ffb9 	bl	8004e90 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8004f1e:	f000 f811 	bl	8004f44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004f22:	f7ff f87d 	bl	8004020 <main>

08004f26 <LoopForever>:

LoopForever:
    b LoopForever
 8004f26:	e7fe      	b.n	8004f26 <LoopForever>
  ldr   r0, =_estack
 8004f28:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8004f2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004f30:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8004f34:	08005024 	.word	0x08005024
  ldr r2, =_sbss
 8004f38:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8004f3c:	200004d4 	.word	0x200004d4

08004f40 <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004f40:	e7fe      	b.n	8004f40 <CEC_CAN_IRQHandler>
	...

08004f44 <__libc_init_array>:
 8004f44:	b570      	push	{r4, r5, r6, lr}
 8004f46:	2600      	movs	r6, #0
 8004f48:	4d0c      	ldr	r5, [pc, #48]	; (8004f7c <__libc_init_array+0x38>)
 8004f4a:	4c0d      	ldr	r4, [pc, #52]	; (8004f80 <__libc_init_array+0x3c>)
 8004f4c:	1b64      	subs	r4, r4, r5
 8004f4e:	10a4      	asrs	r4, r4, #2
 8004f50:	42a6      	cmp	r6, r4
 8004f52:	d109      	bne.n	8004f68 <__libc_init_array+0x24>
 8004f54:	2600      	movs	r6, #0
 8004f56:	f000 f821 	bl	8004f9c <_init>
 8004f5a:	4d0a      	ldr	r5, [pc, #40]	; (8004f84 <__libc_init_array+0x40>)
 8004f5c:	4c0a      	ldr	r4, [pc, #40]	; (8004f88 <__libc_init_array+0x44>)
 8004f5e:	1b64      	subs	r4, r4, r5
 8004f60:	10a4      	asrs	r4, r4, #2
 8004f62:	42a6      	cmp	r6, r4
 8004f64:	d105      	bne.n	8004f72 <__libc_init_array+0x2e>
 8004f66:	bd70      	pop	{r4, r5, r6, pc}
 8004f68:	00b3      	lsls	r3, r6, #2
 8004f6a:	58eb      	ldr	r3, [r5, r3]
 8004f6c:	4798      	blx	r3
 8004f6e:	3601      	adds	r6, #1
 8004f70:	e7ee      	b.n	8004f50 <__libc_init_array+0xc>
 8004f72:	00b3      	lsls	r3, r6, #2
 8004f74:	58eb      	ldr	r3, [r5, r3]
 8004f76:	4798      	blx	r3
 8004f78:	3601      	adds	r6, #1
 8004f7a:	e7f2      	b.n	8004f62 <__libc_init_array+0x1e>
 8004f7c:	0800501c 	.word	0x0800501c
 8004f80:	0800501c 	.word	0x0800501c
 8004f84:	0800501c 	.word	0x0800501c
 8004f88:	08005020 	.word	0x08005020

08004f8c <memset>:
 8004f8c:	0003      	movs	r3, r0
 8004f8e:	1882      	adds	r2, r0, r2
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d100      	bne.n	8004f96 <memset+0xa>
 8004f94:	4770      	bx	lr
 8004f96:	7019      	strb	r1, [r3, #0]
 8004f98:	3301      	adds	r3, #1
 8004f9a:	e7f9      	b.n	8004f90 <memset+0x4>

08004f9c <_init>:
 8004f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f9e:	46c0      	nop			; (mov r8, r8)
 8004fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fa2:	bc08      	pop	{r3}
 8004fa4:	469e      	mov	lr, r3
 8004fa6:	4770      	bx	lr

08004fa8 <_fini>:
 8004fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004faa:	46c0      	nop			; (mov r8, r8)
 8004fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fae:	bc08      	pop	{r3}
 8004fb0:	469e      	mov	lr, r3
 8004fb2:	4770      	bx	lr
