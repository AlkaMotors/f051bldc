
f051bldc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005aac  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08005b6c  08005b6c  00015b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005bb8  08005bb8  00015bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005bbc  08005bbc  00015bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000064  20000000  08005bc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000004bc  20000068  08005c24  00020068  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  20000524  08005c24  00020524  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001b2ad  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000368e  00000000  00000000  0003b339  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000ed1d  00000000  00000000  0003e9c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000a40  00000000  00000000  0004d6e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000024d0  00000000  00000000  0004e128  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007d4d  00000000  00000000  000505f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003ffd  00000000  00000000  00058345  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0005c342  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001e10  00000000  00000000  0005c3c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005b54 	.word	0x08005b54

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08005b54 	.word	0x08005b54

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003f4:	b510      	push	{r4, lr}
 80003f6:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 80003f8:	f001 facc 	bl	8001994 <HAL_RCC_GetHCLKFreq>
 80003fc:	21fa      	movs	r1, #250	; 0xfa
 80003fe:	0089      	lsls	r1, r1, #2
 8000400:	f7ff fe82 	bl	8000108 <__udivsi3>
 8000404:	f000 fc06 	bl	8000c14 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000408:	2001      	movs	r0, #1
 800040a:	2200      	movs	r2, #0
 800040c:	0021      	movs	r1, r4
 800040e:	4240      	negs	r0, r0
 8000410:	f000 fbc2 	bl	8000b98 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000414:	2000      	movs	r0, #0
 8000416:	bd10      	pop	{r4, pc}

08000418 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000418:	2110      	movs	r1, #16
 800041a:	4a06      	ldr	r2, [pc, #24]	; (8000434 <HAL_Init+0x1c>)
{
 800041c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800041e:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000420:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000422:	430b      	orrs	r3, r1
 8000424:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000426:	f7ff ffe5 	bl	80003f4 <HAL_InitTick>
  HAL_MspInit();
 800042a:	f005 f993 	bl	8005754 <HAL_MspInit>
}
 800042e:	2000      	movs	r0, #0
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			; (mov r8, r8)
 8000434:	40022000 	.word	0x40022000

08000438 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000438:	4a02      	ldr	r2, [pc, #8]	; (8000444 <HAL_IncTick+0xc>)
 800043a:	6813      	ldr	r3, [r2, #0]
 800043c:	3301      	adds	r3, #1
 800043e:	6013      	str	r3, [r2, #0]
}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	20000184 	.word	0x20000184

08000448 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000448:	4b01      	ldr	r3, [pc, #4]	; (8000450 <HAL_GetTick+0x8>)
 800044a:	6818      	ldr	r0, [r3, #0]
}
 800044c:	4770      	bx	lr
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	20000184 	.word	0x20000184

08000454 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000454:	b530      	push	{r4, r5, lr}
 8000456:	b083      	sub	sp, #12
 8000458:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 800045a:	f7ff fff5 	bl	8000448 <HAL_GetTick>
  uint32_t wait = Delay;
 800045e:	9c01      	ldr	r4, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000460:	0005      	movs	r5, r0
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
     wait++;
 8000462:	1c63      	adds	r3, r4, #1
 8000464:	1e5a      	subs	r2, r3, #1
 8000466:	4193      	sbcs	r3, r2
 8000468:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800046a:	f7ff ffed 	bl	8000448 <HAL_GetTick>
 800046e:	1b40      	subs	r0, r0, r5
 8000470:	42a0      	cmp	r0, r4
 8000472:	d3fa      	bcc.n	800046a <HAL_Delay+0x16>
  {
  }
}
 8000474:	b003      	add	sp, #12
 8000476:	bd30      	pop	{r4, r5, pc}

08000478 <ADC_Enable>:
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8000478:	2300      	movs	r3, #0
{
 800047a:	b570      	push	{r4, r5, r6, lr}
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800047c:	6802      	ldr	r2, [r0, #0]
{
 800047e:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8000480:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000482:	6891      	ldr	r1, [r2, #8]
 8000484:	3303      	adds	r3, #3
{
 8000486:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000488:	400b      	ands	r3, r1
 800048a:	2b01      	cmp	r3, #1
 800048c:	d031      	beq.n	80004f2 <ADC_Enable+0x7a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800048e:	6891      	ldr	r1, [r2, #8]
 8000490:	4b20      	ldr	r3, [pc, #128]	; (8000514 <ADC_Enable+0x9c>)
 8000492:	4219      	tst	r1, r3
 8000494:	d122      	bne.n	80004dc <ADC_Enable+0x64>
      
      return HAL_ERROR;
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000496:	2101      	movs	r1, #1
 8000498:	6893      	ldr	r3, [r2, #8]
 800049a:	430b      	orrs	r3, r1
 800049c:	6093      	str	r3, [r2, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800049e:	4b1e      	ldr	r3, [pc, #120]	; (8000518 <ADC_Enable+0xa0>)
 80004a0:	491e      	ldr	r1, [pc, #120]	; (800051c <ADC_Enable+0xa4>)
 80004a2:	6818      	ldr	r0, [r3, #0]
 80004a4:	f7ff fe30 	bl	8000108 <__udivsi3>
 80004a8:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 80004aa:	9b01      	ldr	r3, [sp, #4]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d005      	beq.n	80004bc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80004b0:	9b01      	ldr	r3, [sp, #4]
 80004b2:	3b01      	subs	r3, #1
 80004b4:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80004b6:	9b01      	ldr	r3, [sp, #4]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d1f9      	bne.n	80004b0 <ADC_Enable+0x38>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80004bc:	f7ff ffc4 	bl	8000448 <HAL_GetTick>
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80004c0:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 80004c2:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80004c4:	e004      	b.n	80004d0 <ADC_Enable+0x58>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80004c6:	f7ff ffbf 	bl	8000448 <HAL_GetTick>
 80004ca:	1b80      	subs	r0, r0, r6
 80004cc:	2802      	cmp	r0, #2
 80004ce:	d818      	bhi.n	8000502 <ADC_Enable+0x8a>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80004d0:	6823      	ldr	r3, [r4, #0]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	421d      	tst	r5, r3
 80004d6:	d0f6      	beq.n	80004c6 <ADC_Enable+0x4e>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80004d8:	2000      	movs	r0, #0
 80004da:	e008      	b.n	80004ee <ADC_Enable+0x76>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80004dc:	2210      	movs	r2, #16
      return HAL_ERROR;
 80004de:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80004e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80004e2:	4313      	orrs	r3, r2
 80004e4:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004e6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80004e8:	3a0f      	subs	r2, #15
 80004ea:	4313      	orrs	r3, r2
 80004ec:	64a3      	str	r3, [r4, #72]	; 0x48
}
 80004ee:	b002      	add	sp, #8
 80004f0:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80004f2:	6811      	ldr	r1, [r2, #0]
 80004f4:	420b      	tst	r3, r1
 80004f6:	d1ef      	bne.n	80004d8 <ADC_Enable+0x60>
 80004f8:	68d3      	ldr	r3, [r2, #12]
 80004fa:	041b      	lsls	r3, r3, #16
 80004fc:	d5c7      	bpl.n	800048e <ADC_Enable+0x16>
  return HAL_OK;
 80004fe:	2000      	movs	r0, #0
 8000500:	e7f5      	b.n	80004ee <ADC_Enable+0x76>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000502:	2210      	movs	r2, #16
 8000504:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 8000506:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000508:	4313      	orrs	r3, r2
 800050a:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800050c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800050e:	431d      	orrs	r5, r3
 8000510:	64a5      	str	r5, [r4, #72]	; 0x48
        return HAL_ERROR;
 8000512:	e7ec      	b.n	80004ee <ADC_Enable+0x76>
 8000514:	80000017 	.word	0x80000017
 8000518:	20000060 	.word	0x20000060
 800051c:	000f4240 	.word	0x000f4240

08000520 <HAL_ADC_Init>:
{
 8000520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000522:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 8000524:	d100      	bne.n	8000528 <HAL_ADC_Init+0x8>
 8000526:	e080      	b.n	800062a <HAL_ADC_Init+0x10a>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000528:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800052a:	2b00      	cmp	r3, #0
 800052c:	d067      	beq.n	80005fe <HAL_ADC_Init+0xde>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800052e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000530:	06db      	lsls	r3, r3, #27
 8000532:	d45e      	bmi.n	80005f2 <HAL_ADC_Init+0xd2>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000534:	2004      	movs	r0, #4
 8000536:	6823      	ldr	r3, [r4, #0]
 8000538:	689a      	ldr	r2, [r3, #8]
 800053a:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 800053c:	d159      	bne.n	80005f2 <HAL_ADC_Init+0xd2>
    ADC_STATE_CLR_SET(hadc->State,
 800053e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000540:	4948      	ldr	r1, [pc, #288]	; (8000664 <HAL_ADC_Init+0x144>)
 8000542:	400a      	ands	r2, r1
 8000544:	3106      	adds	r1, #6
 8000546:	31ff      	adds	r1, #255	; 0xff
 8000548:	430a      	orrs	r2, r1
 800054a:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 800054c:	2203      	movs	r2, #3
 800054e:	6899      	ldr	r1, [r3, #8]
 8000550:	400a      	ands	r2, r1
 8000552:	2a01      	cmp	r2, #1
 8000554:	d059      	beq.n	800060a <HAL_ADC_Init+0xea>
      MODIFY_REG(hadc->Instance->CFGR1,
 8000556:	2118      	movs	r1, #24
 8000558:	68da      	ldr	r2, [r3, #12]
 800055a:	438a      	bics	r2, r1
 800055c:	68a1      	ldr	r1, [r4, #8]
 800055e:	430a      	orrs	r2, r1
 8000560:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000562:	691a      	ldr	r2, [r3, #16]
 8000564:	6861      	ldr	r1, [r4, #4]
 8000566:	0092      	lsls	r2, r2, #2
 8000568:	0892      	lsrs	r2, r2, #2
 800056a:	430a      	orrs	r2, r1
 800056c:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800056e:	68da      	ldr	r2, [r3, #12]
 8000570:	493d      	ldr	r1, [pc, #244]	; (8000668 <HAL_ADC_Init+0x148>)
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8000572:	6a26      	ldr	r6, [r4, #32]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000574:	400a      	ands	r2, r1
 8000576:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8000578:	69a2      	ldr	r2, [r4, #24]
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800057a:	0377      	lsls	r7, r6, #13
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800057c:	0391      	lsls	r1, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 800057e:	69e2      	ldr	r2, [r4, #28]
 8000580:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8000582:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8000584:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000586:	3a01      	subs	r2, #1
 8000588:	1e55      	subs	r5, r2, #1
 800058a:	41aa      	sbcs	r2, r5
 800058c:	0315      	lsls	r5, r2, #12
 800058e:	68e2      	ldr	r2, [r4, #12]
 8000590:	4311      	orrs	r1, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8000592:	6922      	ldr	r2, [r4, #16]
 8000594:	4339      	orrs	r1, r7
 8000596:	2a02      	cmp	r2, #2
 8000598:	d059      	beq.n	800064e <HAL_ADC_Init+0x12e>
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 800059a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800059c:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800059e:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80005a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80005a2:	432a      	orrs	r2, r5
 80005a4:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80005a6:	2901      	cmp	r1, #1
 80005a8:	d04b      	beq.n	8000642 <HAL_ADC_Init+0x122>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80005aa:	20c2      	movs	r0, #194	; 0xc2
 80005ac:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80005ae:	30ff      	adds	r0, #255	; 0xff
 80005b0:	4281      	cmp	r1, r0
 80005b2:	d002      	beq.n	80005ba <HAL_ADC_Init+0x9a>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80005b4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80005b6:	4301      	orrs	r1, r0
 80005b8:	430a      	orrs	r2, r1
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80005ba:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80005bc:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80005be:	4311      	orrs	r1, r2
 80005c0:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80005c2:	2180      	movs	r1, #128	; 0x80
 80005c4:	0549      	lsls	r1, r1, #21
 80005c6:	428d      	cmp	r5, r1
 80005c8:	d026      	beq.n	8000618 <HAL_ADC_Init+0xf8>
 80005ca:	1e69      	subs	r1, r5, #1
 80005cc:	2906      	cmp	r1, #6
 80005ce:	d923      	bls.n	8000618 <HAL_ADC_Init+0xf8>
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80005d0:	68db      	ldr	r3, [r3, #12]
 80005d2:	4926      	ldr	r1, [pc, #152]	; (800066c <HAL_ADC_Init+0x14c>)
 80005d4:	400b      	ands	r3, r1
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d029      	beq.n	800062e <HAL_ADC_Init+0x10e>
      ADC_STATE_CLR_SET(hadc->State,
 80005da:	2212      	movs	r2, #18
 80005dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
      tmp_hal_status = HAL_ERROR;
 80005de:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 80005e0:	4393      	bics	r3, r2
 80005e2:	3a02      	subs	r2, #2
 80005e4:	4313      	orrs	r3, r2
 80005e6:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80005e8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80005ea:	3a0f      	subs	r2, #15
 80005ec:	4313      	orrs	r3, r2
 80005ee:	64a3      	str	r3, [r4, #72]	; 0x48
 80005f0:	e004      	b.n	80005fc <HAL_ADC_Init+0xdc>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80005f2:	2210      	movs	r2, #16
    tmp_hal_status = HAL_ERROR;
 80005f4:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80005f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80005f8:	4313      	orrs	r3, r2
 80005fa:	6463      	str	r3, [r4, #68]	; 0x44
}
 80005fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hadc->Lock = HAL_UNLOCKED;
 80005fe:	2240      	movs	r2, #64	; 0x40
    ADC_CLEAR_ERRORCODE(hadc);
 8000600:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 8000602:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 8000604:	f005 f8c8 	bl	8005798 <HAL_ADC_MspInit>
 8000608:	e791      	b.n	800052e <HAL_ADC_Init+0xe>
    if (ADC_IS_ENABLE(hadc) == RESET)
 800060a:	6819      	ldr	r1, [r3, #0]
 800060c:	420a      	tst	r2, r1
 800060e:	d1ae      	bne.n	800056e <HAL_ADC_Init+0x4e>
 8000610:	68da      	ldr	r2, [r3, #12]
 8000612:	0412      	lsls	r2, r2, #16
 8000614:	d59f      	bpl.n	8000556 <HAL_ADC_Init+0x36>
 8000616:	e7aa      	b.n	800056e <HAL_ADC_Init+0x4e>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000618:	2107      	movs	r1, #7
 800061a:	6958      	ldr	r0, [r3, #20]
 800061c:	4388      	bics	r0, r1
 800061e:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000620:	6958      	ldr	r0, [r3, #20]
 8000622:	4029      	ands	r1, r5
 8000624:	4301      	orrs	r1, r0
 8000626:	6159      	str	r1, [r3, #20]
 8000628:	e7d2      	b.n	80005d0 <HAL_ADC_Init+0xb0>
    return HAL_ERROR;
 800062a:	2001      	movs	r0, #1
 800062c:	e7e6      	b.n	80005fc <HAL_ADC_Init+0xdc>
      ADC_CLEAR_ERRORCODE(hadc);
 800062e:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 8000630:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8000632:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 8000634:	6c63      	ldr	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000636:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8000638:	4393      	bics	r3, r2
 800063a:	3a02      	subs	r2, #2
 800063c:	4313      	orrs	r3, r2
 800063e:	6463      	str	r3, [r4, #68]	; 0x44
 8000640:	e7dc      	b.n	80005fc <HAL_ADC_Init+0xdc>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000642:	2e00      	cmp	r6, #0
 8000644:	d105      	bne.n	8000652 <HAL_ADC_Init+0x132>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000646:	2180      	movs	r1, #128	; 0x80
 8000648:	0249      	lsls	r1, r1, #9
 800064a:	430a      	orrs	r2, r1
 800064c:	e7ad      	b.n	80005aa <HAL_ADC_Init+0x8a>
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800064e:	2004      	movs	r0, #4
 8000650:	e7a3      	b.n	800059a <HAL_ADC_Init+0x7a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000652:	2520      	movs	r5, #32
 8000654:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8000656:	4328      	orrs	r0, r5
 8000658:	6460      	str	r0, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800065a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800065c:	4301      	orrs	r1, r0
 800065e:	64a1      	str	r1, [r4, #72]	; 0x48
 8000660:	e7a3      	b.n	80005aa <HAL_ADC_Init+0x8a>
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	fffffefd 	.word	0xfffffefd
 8000668:	fffe0219 	.word	0xfffe0219
 800066c:	833fffe7 	.word	0x833fffe7

08000670 <HAL_ADC_Start_DMA>:
{
 8000670:	b570      	push	{r4, r5, r6, lr}
 8000672:	000d      	movs	r5, r1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000674:	6801      	ldr	r1, [r0, #0]
{
 8000676:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000678:	688b      	ldr	r3, [r1, #8]
{
 800067a:	0016      	movs	r6, r2
    tmp_hal_status = HAL_BUSY;
 800067c:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800067e:	075b      	lsls	r3, r3, #29
 8000680:	d500      	bpl.n	8000684 <HAL_ADC_Start_DMA+0x14>
}
 8000682:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(hadc);
 8000684:	2340      	movs	r3, #64	; 0x40
 8000686:	5ce2      	ldrb	r2, [r4, r3]
 8000688:	2a01      	cmp	r2, #1
 800068a:	d0fa      	beq.n	8000682 <HAL_ADC_Start_DMA+0x12>
 800068c:	2201      	movs	r2, #1
 800068e:	54e2      	strb	r2, [r4, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000690:	69e3      	ldr	r3, [r4, #28]
 8000692:	2b01      	cmp	r3, #1
 8000694:	d127      	bne.n	80006e6 <HAL_ADC_Start_DMA+0x76>
      ADC_STATE_CLR_SET(hadc->State,
 8000696:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000698:	4a16      	ldr	r2, [pc, #88]	; (80006f4 <HAL_ADC_Start_DMA+0x84>)
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800069a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 800069c:	401a      	ands	r2, r3
 800069e:	2380      	movs	r3, #128	; 0x80
 80006a0:	005b      	lsls	r3, r3, #1
 80006a2:	4313      	orrs	r3, r2
 80006a4:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 80006a6:	2240      	movs	r2, #64	; 0x40
      ADC_CLEAR_ERRORCODE(hadc);
 80006a8:	2300      	movs	r3, #0
 80006aa:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 80006ac:	54a3      	strb	r3, [r4, r2]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80006ae:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <HAL_ADC_Start_DMA+0x88>)
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80006b0:	3a30      	subs	r2, #48	; 0x30
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80006b2:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <HAL_ADC_Start_DMA+0x8c>)
 80006b6:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80006b8:	4b11      	ldr	r3, [pc, #68]	; (8000700 <HAL_ADC_Start_DMA+0x90>)
 80006ba:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80006bc:	231c      	movs	r3, #28
 80006be:	600b      	str	r3, [r1, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80006c0:	684b      	ldr	r3, [r1, #4]
 80006c2:	4313      	orrs	r3, r2
 80006c4:	604b      	str	r3, [r1, #4]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80006c6:	68cb      	ldr	r3, [r1, #12]
 80006c8:	3a0f      	subs	r2, #15
 80006ca:	4313      	orrs	r3, r2
 80006cc:	60cb      	str	r3, [r1, #12]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80006ce:	002a      	movs	r2, r5
 80006d0:	3140      	adds	r1, #64	; 0x40
 80006d2:	0033      	movs	r3, r6
 80006d4:	f000 fb06 	bl	8000ce4 <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80006d8:	2104      	movs	r1, #4
 80006da:	6822      	ldr	r2, [r4, #0]
 80006dc:	2000      	movs	r0, #0
 80006de:	6893      	ldr	r3, [r2, #8]
 80006e0:	430b      	orrs	r3, r1
 80006e2:	6093      	str	r3, [r2, #8]
 80006e4:	e7cd      	b.n	8000682 <HAL_ADC_Start_DMA+0x12>
      tmp_hal_status = ADC_Enable(hadc);
 80006e6:	0020      	movs	r0, r4
 80006e8:	f7ff fec6 	bl	8000478 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80006ec:	2800      	cmp	r0, #0
 80006ee:	d1c8      	bne.n	8000682 <HAL_ADC_Start_DMA+0x12>
 80006f0:	6821      	ldr	r1, [r4, #0]
 80006f2:	e7d0      	b.n	8000696 <HAL_ADC_Start_DMA+0x26>
 80006f4:	fffff0fe 	.word	0xfffff0fe
 80006f8:	08000705 	.word	0x08000705
 80006fc:	08000779 	.word	0x08000779
 8000700:	0800078d 	.word	0x0800078d

08000704 <ADC_DMAConvCplt>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000704:	2150      	movs	r1, #80	; 0x50
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000706:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8000708:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800070a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800070c:	4211      	tst	r1, r2
 800070e:	d122      	bne.n	8000756 <ADC_DMAConvCplt+0x52>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000710:	2280      	movs	r2, #128	; 0x80
 8000712:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000714:	0092      	lsls	r2, r2, #2
 8000716:	430a      	orrs	r2, r1
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000718:	21c0      	movs	r1, #192	; 0xc0
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800071a:	645a      	str	r2, [r3, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	0109      	lsls	r1, r1, #4
 8000720:	68d0      	ldr	r0, [r2, #12]
 8000722:	4208      	tst	r0, r1
 8000724:	d113      	bne.n	800074e <ADC_DMAConvCplt+0x4a>
 8000726:	6a19      	ldr	r1, [r3, #32]
 8000728:	2900      	cmp	r1, #0
 800072a:	d110      	bne.n	800074e <ADC_DMAConvCplt+0x4a>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800072c:	6811      	ldr	r1, [r2, #0]
 800072e:	0709      	lsls	r1, r1, #28
 8000730:	d50d      	bpl.n	800074e <ADC_DMAConvCplt+0x4a>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000732:	6891      	ldr	r1, [r2, #8]
 8000734:	0749      	lsls	r1, r1, #29
 8000736:	d412      	bmi.n	800075e <ADC_DMAConvCplt+0x5a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000738:	200c      	movs	r0, #12
 800073a:	6851      	ldr	r1, [r2, #4]
 800073c:	4381      	bics	r1, r0
 800073e:	6051      	str	r1, [r2, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000740:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000742:	490b      	ldr	r1, [pc, #44]	; (8000770 <ADC_DMAConvCplt+0x6c>)
 8000744:	400a      	ands	r2, r1
 8000746:	3104      	adds	r1, #4
 8000748:	31ff      	adds	r1, #255	; 0xff
 800074a:	430a      	orrs	r2, r1
 800074c:	645a      	str	r2, [r3, #68]	; 0x44
        }
      }
    }

    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 800074e:	0018      	movs	r0, r3
 8000750:	f003 ff7a 	bl	8004648 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8000754:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4798      	blx	r3
}
 800075c:	e7fa      	b.n	8000754 <ADC_DMAConvCplt+0x50>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800075e:	2120      	movs	r1, #32
 8000760:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000762:	430a      	orrs	r2, r1
 8000764:	645a      	str	r2, [r3, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000766:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000768:	391f      	subs	r1, #31
 800076a:	430a      	orrs	r2, r1
 800076c:	649a      	str	r2, [r3, #72]	; 0x48
 800076e:	e7ee      	b.n	800074e <ADC_DMAConvCplt+0x4a>
 8000770:	fffffefe 	.word	0xfffffefe

08000774 <HAL_ADC_ConvHalfCpltCallback>:
 8000774:	4770      	bx	lr
 8000776:	46c0      	nop			; (mov r8, r8)

08000778 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000778:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800077a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800077c:	f7ff fffa 	bl	8000774 <HAL_ADC_ConvHalfCpltCallback>
}
 8000780:	bd10      	pop	{r4, pc}
 8000782:	46c0      	nop			; (mov r8, r8)

08000784 <HAL_ADC_LevelOutOfWindowCallback>:
 8000784:	4770      	bx	lr
 8000786:	46c0      	nop			; (mov r8, r8)

08000788 <HAL_ADC_ErrorCallback>:
}
 8000788:	4770      	bx	lr
 800078a:	46c0      	nop			; (mov r8, r8)

0800078c <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800078c:	2240      	movs	r2, #64	; 0x40
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800078e:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8000790:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000792:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000794:	4313      	orrs	r3, r2
 8000796:	6443      	str	r3, [r0, #68]	; 0x44
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000798:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800079a:	3a3c      	subs	r2, #60	; 0x3c
 800079c:	4313      	orrs	r3, r2
 800079e:	6483      	str	r3, [r0, #72]	; 0x48
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 80007a0:	f7ff fff2 	bl	8000788 <HAL_ADC_ErrorCallback>
}
 80007a4:	bd10      	pop	{r4, pc}
 80007a6:	46c0      	nop			; (mov r8, r8)

080007a8 <HAL_ADC_IRQHandler>:
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80007a8:	2204      	movs	r2, #4
 80007aa:	6803      	ldr	r3, [r0, #0]
{
 80007ac:	b570      	push	{r4, r5, r6, lr}
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80007ae:	6819      	ldr	r1, [r3, #0]
{
 80007b0:	0004      	movs	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80007b2:	420a      	tst	r2, r1
 80007b4:	d04a      	beq.n	800084c <HAL_ADC_IRQHandler+0xa4>
 80007b6:	6859      	ldr	r1, [r3, #4]
 80007b8:	420a      	tst	r2, r1
 80007ba:	d047      	beq.n	800084c <HAL_ADC_IRQHandler+0xa4>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80007bc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80007be:	06d2      	lsls	r2, r2, #27
 80007c0:	d404      	bmi.n	80007cc <HAL_ADC_IRQHandler+0x24>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80007c2:	2280      	movs	r2, #128	; 0x80
 80007c4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80007c6:	0092      	lsls	r2, r2, #2
 80007c8:	430a      	orrs	r2, r1
 80007ca:	6462      	str	r2, [r4, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80007cc:	22c0      	movs	r2, #192	; 0xc0
 80007ce:	68d9      	ldr	r1, [r3, #12]
 80007d0:	0112      	lsls	r2, r2, #4
 80007d2:	4211      	tst	r1, r2
 80007d4:	d113      	bne.n	80007fe <HAL_ADC_IRQHandler+0x56>
 80007d6:	6a22      	ldr	r2, [r4, #32]
 80007d8:	2a00      	cmp	r2, #0
 80007da:	d110      	bne.n	80007fe <HAL_ADC_IRQHandler+0x56>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80007dc:	681a      	ldr	r2, [r3, #0]
 80007de:	0712      	lsls	r2, r2, #28
 80007e0:	d50d      	bpl.n	80007fe <HAL_ADC_IRQHandler+0x56>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80007e2:	689a      	ldr	r2, [r3, #8]
 80007e4:	0752      	lsls	r2, r2, #29
 80007e6:	d444      	bmi.n	8000872 <HAL_ADC_IRQHandler+0xca>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80007e8:	210c      	movs	r1, #12
 80007ea:	685a      	ldr	r2, [r3, #4]
 80007ec:	438a      	bics	r2, r1
 80007ee:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 80007f0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80007f2:	4a24      	ldr	r2, [pc, #144]	; (8000884 <HAL_ADC_IRQHandler+0xdc>)
 80007f4:	4013      	ands	r3, r2
 80007f6:	3204      	adds	r2, #4
 80007f8:	32ff      	adds	r2, #255	; 0xff
 80007fa:	4313      	orrs	r3, r2
 80007fc:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ConvCpltCallback(hadc);
 80007fe:	0020      	movs	r0, r4
 8000800:	f003 ff22 	bl	8004648 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8000804:	220c      	movs	r2, #12
 8000806:	6823      	ldr	r3, [r4, #0]
 8000808:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800080a:	2580      	movs	r5, #128	; 0x80
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	4215      	tst	r5, r2
 8000810:	d002      	beq.n	8000818 <HAL_ADC_IRQHandler+0x70>
 8000812:	685a      	ldr	r2, [r3, #4]
 8000814:	4215      	tst	r5, r2
 8000816:	d121      	bne.n	800085c <HAL_ADC_IRQHandler+0xb4>
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8000818:	2210      	movs	r2, #16
 800081a:	6819      	ldr	r1, [r3, #0]
 800081c:	420a      	tst	r2, r1
 800081e:	d014      	beq.n	800084a <HAL_ADC_IRQHandler+0xa2>
 8000820:	6859      	ldr	r1, [r3, #4]
 8000822:	420a      	tst	r2, r1
 8000824:	d011      	beq.n	800084a <HAL_ADC_IRQHandler+0xa2>
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8000826:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000828:	2a01      	cmp	r2, #1
 800082a:	d002      	beq.n	8000832 <HAL_ADC_IRQHandler+0x8a>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 800082c:	68da      	ldr	r2, [r3, #12]
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800082e:	07d2      	lsls	r2, r2, #31
 8000830:	d509      	bpl.n	8000846 <HAL_ADC_IRQHandler+0x9e>
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000832:	2102      	movs	r1, #2
 8000834:	6ca2      	ldr	r2, [r4, #72]	; 0x48
      HAL_ADC_ErrorCallback(hadc);
 8000836:	0020      	movs	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000838:	430a      	orrs	r2, r1
 800083a:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800083c:	2210      	movs	r2, #16
 800083e:	601a      	str	r2, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 8000840:	f7ff ffa2 	bl	8000788 <HAL_ADC_ErrorCallback>
 8000844:	6823      	ldr	r3, [r4, #0]
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000846:	2210      	movs	r2, #16
 8000848:	601a      	str	r2, [r3, #0]
}
 800084a:	bd70      	pop	{r4, r5, r6, pc}
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800084c:	2208      	movs	r2, #8
 800084e:	6819      	ldr	r1, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000850:	420a      	tst	r2, r1
 8000852:	d0da      	beq.n	800080a <HAL_ADC_IRQHandler+0x62>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000854:	6859      	ldr	r1, [r3, #4]
 8000856:	420a      	tst	r2, r1
 8000858:	d0d7      	beq.n	800080a <HAL_ADC_IRQHandler+0x62>
 800085a:	e7af      	b.n	80007bc <HAL_ADC_IRQHandler+0x14>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800085c:	2380      	movs	r3, #128	; 0x80
 800085e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000860:	025b      	lsls	r3, r3, #9
 8000862:	4313      	orrs	r3, r2
 8000864:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000866:	0020      	movs	r0, r4
 8000868:	f7ff ff8c 	bl	8000784 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800086c:	6823      	ldr	r3, [r4, #0]
 800086e:	601d      	str	r5, [r3, #0]
 8000870:	e7d2      	b.n	8000818 <HAL_ADC_IRQHandler+0x70>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000872:	2220      	movs	r2, #32
 8000874:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000876:	4313      	orrs	r3, r2
 8000878:	6463      	str	r3, [r4, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800087a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800087c:	3a1f      	subs	r2, #31
 800087e:	4313      	orrs	r3, r2
 8000880:	64a3      	str	r3, [r4, #72]	; 0x48
 8000882:	e7bc      	b.n	80007fe <HAL_ADC_IRQHandler+0x56>
 8000884:	fffffefe 	.word	0xfffffefe

08000888 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8000888:	2300      	movs	r3, #0
{
 800088a:	b570      	push	{r4, r5, r6, lr}
 800088c:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 800088e:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000890:	3340      	adds	r3, #64	; 0x40
 8000892:	5cc2      	ldrb	r2, [r0, r3]
{
 8000894:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8000896:	2002      	movs	r0, #2
 8000898:	2a01      	cmp	r2, #1
 800089a:	d03c      	beq.n	8000916 <HAL_ADC_ConfigChannel+0x8e>
 800089c:	2201      	movs	r2, #1
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800089e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  __HAL_LOCK(hadc);
 80008a0:	54e2      	strb	r2, [r4, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80008a2:	6823      	ldr	r3, [r4, #0]
 80008a4:	689d      	ldr	r5, [r3, #8]
 80008a6:	076d      	lsls	r5, r5, #29
 80008a8:	d42d      	bmi.n	8000906 <HAL_ADC_ConfigChannel+0x7e>
    if (sConfig->Rank != ADC_RANK_NONE)
 80008aa:	4d35      	ldr	r5, [pc, #212]	; (8000980 <HAL_ADC_ConfigChannel+0xf8>)
 80008ac:	684e      	ldr	r6, [r1, #4]
 80008ae:	42ae      	cmp	r6, r5
 80008b0:	d033      	beq.n	800091a <HAL_ADC_ConfigChannel+0x92>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80008b2:	680d      	ldr	r5, [r1, #0]
 80008b4:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 80008b6:	40aa      	lsls	r2, r5
 80008b8:	4332      	orrs	r2, r6
 80008ba:	629a      	str	r2, [r3, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80008bc:	2280      	movs	r2, #128	; 0x80
 80008be:	0552      	lsls	r2, r2, #21
 80008c0:	4290      	cmp	r0, r2
 80008c2:	d00f      	beq.n	80008e4 <HAL_ADC_ConfigChannel+0x5c>
 80008c4:	3801      	subs	r0, #1
 80008c6:	2806      	cmp	r0, #6
 80008c8:	d90c      	bls.n	80008e4 <HAL_ADC_ConfigChannel+0x5c>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80008ca:	2207      	movs	r2, #7
 80008cc:	6888      	ldr	r0, [r1, #8]
 80008ce:	6959      	ldr	r1, [r3, #20]
 80008d0:	4011      	ands	r1, r2
 80008d2:	4288      	cmp	r0, r1
 80008d4:	d006      	beq.n	80008e4 <HAL_ADC_ConfigChannel+0x5c>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80008d6:	6959      	ldr	r1, [r3, #20]
 80008d8:	4391      	bics	r1, r2
 80008da:	6159      	str	r1, [r3, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80008dc:	6959      	ldr	r1, [r3, #20]
 80008de:	4002      	ands	r2, r0
 80008e0:	430a      	orrs	r2, r1
 80008e2:	615a      	str	r2, [r3, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80008e4:	002b      	movs	r3, r5
 80008e6:	3b10      	subs	r3, #16
 80008e8:	2b02      	cmp	r3, #2
 80008ea:	d829      	bhi.n	8000940 <HAL_ADC_ConfigChannel+0xb8>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80008ec:	4a25      	ldr	r2, [pc, #148]	; (8000984 <HAL_ADC_ConfigChannel+0xfc>)
 80008ee:	6813      	ldr	r3, [r2, #0]
 80008f0:	2d10      	cmp	r5, #16
 80008f2:	d027      	beq.n	8000944 <HAL_ADC_ConfigChannel+0xbc>
 80008f4:	2280      	movs	r2, #128	; 0x80
 80008f6:	2d11      	cmp	r5, #17
 80008f8:	d03c      	beq.n	8000974 <HAL_ADC_ConfigChannel+0xec>
 80008fa:	0452      	lsls	r2, r2, #17
 80008fc:	4313      	orrs	r3, r2
 80008fe:	4a21      	ldr	r2, [pc, #132]	; (8000984 <HAL_ADC_ConfigChannel+0xfc>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000900:	2000      	movs	r0, #0
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000902:	6013      	str	r3, [r2, #0]
 8000904:	e004      	b.n	8000910 <HAL_ADC_ConfigChannel+0x88>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000906:	2220      	movs	r2, #32
    tmp_hal_status = HAL_ERROR;
 8000908:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800090a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800090c:	4313      	orrs	r3, r2
 800090e:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 8000910:	2200      	movs	r2, #0
 8000912:	2340      	movs	r3, #64	; 0x40
 8000914:	54e2      	strb	r2, [r4, r3]
}
 8000916:	b002      	add	sp, #8
 8000918:	bd70      	pop	{r4, r5, r6, pc}
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800091a:	6809      	ldr	r1, [r1, #0]
 800091c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800091e:	408a      	lsls	r2, r1
 8000920:	4390      	bics	r0, r2
 8000922:	6298      	str	r0, [r3, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000924:	000b      	movs	r3, r1
 8000926:	3b10      	subs	r3, #16
 8000928:	2b02      	cmp	r3, #2
 800092a:	d809      	bhi.n	8000940 <HAL_ADC_ConfigChannel+0xb8>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800092c:	4b15      	ldr	r3, [pc, #84]	; (8000984 <HAL_ADC_ConfigChannel+0xfc>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2910      	cmp	r1, #16
 8000932:	d021      	beq.n	8000978 <HAL_ADC_ConfigChannel+0xf0>
 8000934:	2911      	cmp	r1, #17
 8000936:	d021      	beq.n	800097c <HAL_ADC_ConfigChannel+0xf4>
 8000938:	4a13      	ldr	r2, [pc, #76]	; (8000988 <HAL_ADC_ConfigChannel+0x100>)
 800093a:	4013      	ands	r3, r2
 800093c:	4a11      	ldr	r2, [pc, #68]	; (8000984 <HAL_ADC_ConfigChannel+0xfc>)
 800093e:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000940:	2000      	movs	r0, #0
 8000942:	e7e5      	b.n	8000910 <HAL_ADC_ConfigChannel+0x88>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000944:	2180      	movs	r1, #128	; 0x80
 8000946:	0409      	lsls	r1, r1, #16
 8000948:	430b      	orrs	r3, r1
 800094a:	6013      	str	r3, [r2, #0]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800094c:	4b0f      	ldr	r3, [pc, #60]	; (800098c <HAL_ADC_ConfigChannel+0x104>)
 800094e:	4910      	ldr	r1, [pc, #64]	; (8000990 <HAL_ADC_ConfigChannel+0x108>)
 8000950:	6818      	ldr	r0, [r3, #0]
 8000952:	f7ff fbd9 	bl	8000108 <__udivsi3>
 8000956:	0083      	lsls	r3, r0, #2
 8000958:	1818      	adds	r0, r3, r0
 800095a:	0040      	lsls	r0, r0, #1
 800095c:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 800095e:	9b01      	ldr	r3, [sp, #4]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d0ed      	beq.n	8000940 <HAL_ADC_ConfigChannel+0xb8>
            wait_loop_index--;
 8000964:	9b01      	ldr	r3, [sp, #4]
 8000966:	3b01      	subs	r3, #1
 8000968:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800096a:	9b01      	ldr	r3, [sp, #4]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d1f9      	bne.n	8000964 <HAL_ADC_ConfigChannel+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000970:	2000      	movs	r0, #0
 8000972:	e7cd      	b.n	8000910 <HAL_ADC_ConfigChannel+0x88>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000974:	03d2      	lsls	r2, r2, #15
 8000976:	e7c1      	b.n	80008fc <HAL_ADC_ConfigChannel+0x74>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000978:	4a06      	ldr	r2, [pc, #24]	; (8000994 <HAL_ADC_ConfigChannel+0x10c>)
 800097a:	e7de      	b.n	800093a <HAL_ADC_ConfigChannel+0xb2>
 800097c:	4a06      	ldr	r2, [pc, #24]	; (8000998 <HAL_ADC_ConfigChannel+0x110>)
 800097e:	e7dc      	b.n	800093a <HAL_ADC_ConfigChannel+0xb2>
 8000980:	00001001 	.word	0x00001001
 8000984:	40012708 	.word	0x40012708
 8000988:	feffffff 	.word	0xfeffffff
 800098c:	20000060 	.word	0x20000060
 8000990:	000f4240 	.word	0x000f4240
 8000994:	ff7fffff 	.word	0xff7fffff
 8000998:	ffbfffff 	.word	0xffbfffff

0800099c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 800099c:	b570      	push	{r4, r5, r6, lr}
 800099e:	0004      	movs	r4, r0
 80009a0:	b082      	sub	sp, #8
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t regshift = COMP_CSR_COMP1_SHIFT;
  
  /* Check the COMP handle allocation and lock status */
  if((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 80009a2:	2800      	cmp	r0, #0
 80009a4:	d03b      	beq.n	8000a1e <HAL_COMP_Init+0x82>
 80009a6:	6a83      	ldr	r3, [r0, #40]	; 0x28
  {
    status = HAL_ERROR;
 80009a8:	2001      	movs	r0, #1
  if((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 80009aa:	06db      	lsls	r3, r3, #27
 80009ac:	d501      	bpl.n	80009b2 <HAL_COMP_Init+0x16>
    /* Initialize the COMP state*/
    hcomp->State = HAL_COMP_STATE_READY;
  }
  
  return status;
}
 80009ae:	b002      	add	sp, #8
 80009b0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SYSCFG_CLK_ENABLE();  
 80009b2:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <HAL_COMP_Init+0x8c>)
 80009b4:	699a      	ldr	r2, [r3, #24]
 80009b6:	4302      	orrs	r2, r0
 80009b8:	619a      	str	r2, [r3, #24]
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	4018      	ands	r0, r3
 80009be:	9001      	str	r0, [sp, #4]
    HAL_COMP_MspInit(hcomp);
 80009c0:	0020      	movs	r0, r4
    __HAL_RCC_SYSCFG_CLK_ENABLE();  
 80009c2:	9b01      	ldr	r3, [sp, #4]
    HAL_COMP_MspInit(hcomp);
 80009c4:	f004 ff34 	bl	8005830 <HAL_COMP_MspInit>
    if(hcomp->State == HAL_COMP_STATE_RESET)
 80009c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d024      	beq.n	8000a18 <HAL_COMP_Init+0x7c>
    hcomp->State = HAL_COMP_STATE_BUSY;
 80009ce:	2302      	movs	r3, #2
    if(hcomp->Instance == COMP2)
 80009d0:	6822      	ldr	r2, [r4, #0]
    hcomp->State = HAL_COMP_STATE_BUSY;
 80009d2:	62a3      	str	r3, [r4, #40]	; 0x28
    if(hcomp->Instance == COMP2)
 80009d4:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <HAL_COMP_Init+0x90>)
 80009d6:	429a      	cmp	r2, r3
 80009d8:	d023      	beq.n	8000a22 <HAL_COMP_Init+0x86>
  uint32_t regshift = COMP_CSR_COMP1_SHIFT;
 80009da:	2500      	movs	r5, #0
    if(hcomp->Instance == COMP2)
 80009dc:	4914      	ldr	r1, [pc, #80]	; (8000a30 <HAL_COMP_Init+0x94>)
    MODIFY_REG(COMP->CSR, 
 80009de:	68a6      	ldr	r6, [r4, #8]
 80009e0:	6863      	ldr	r3, [r4, #4]
 80009e2:	4a14      	ldr	r2, [pc, #80]	; (8000a34 <HAL_COMP_Init+0x98>)
 80009e4:	4333      	orrs	r3, r6
 80009e6:	68e6      	ldr	r6, [r4, #12]
 80009e8:	6810      	ldr	r0, [r2, #0]
 80009ea:	4333      	orrs	r3, r6
 80009ec:	6926      	ldr	r6, [r4, #16]
 80009ee:	4001      	ands	r1, r0
 80009f0:	4333      	orrs	r3, r6
 80009f2:	6966      	ldr	r6, [r4, #20]
 80009f4:	4333      	orrs	r3, r6
 80009f6:	69a6      	ldr	r6, [r4, #24]
 80009f8:	4333      	orrs	r3, r6
 80009fa:	40ab      	lsls	r3, r5
 80009fc:	430b      	orrs	r3, r1
 80009fe:	6013      	str	r3, [r2, #0]
    if(hcomp->Init.WindowMode != COMP_WINDOWMODE_DISABLE)
 8000a00:	69e3      	ldr	r3, [r4, #28]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d004      	beq.n	8000a10 <HAL_COMP_Init+0x74>
      COMP->CSR |= COMP_CSR_WNDWEN;
 8000a06:	2380      	movs	r3, #128	; 0x80
 8000a08:	6811      	ldr	r1, [r2, #0]
 8000a0a:	041b      	lsls	r3, r3, #16
 8000a0c:	430b      	orrs	r3, r1
 8000a0e:	6013      	str	r3, [r2, #0]
    hcomp->State = HAL_COMP_STATE_READY;
 8000a10:	2301      	movs	r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8000a12:	2000      	movs	r0, #0
    hcomp->State = HAL_COMP_STATE_READY;
 8000a14:	62a3      	str	r3, [r4, #40]	; 0x28
 8000a16:	e7ca      	b.n	80009ae <HAL_COMP_Init+0x12>
      hcomp->Lock = HAL_UNLOCKED;
 8000a18:	2224      	movs	r2, #36	; 0x24
 8000a1a:	54a3      	strb	r3, [r4, r2]
 8000a1c:	e7d7      	b.n	80009ce <HAL_COMP_Init+0x32>
    status = HAL_ERROR;
 8000a1e:	2001      	movs	r0, #1
 8000a20:	e7c5      	b.n	80009ae <HAL_COMP_Init+0x12>
 8000a22:	4905      	ldr	r1, [pc, #20]	; (8000a38 <HAL_COMP_Init+0x9c>)
      regshift = COMP_CSR_COMP2_SHIFT;
 8000a24:	2510      	movs	r5, #16
 8000a26:	e7da      	b.n	80009de <HAL_COMP_Init+0x42>
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	4001001e 	.word	0x4001001e
 8000a30:	ffffc081 	.word	0xffffc081
 8000a34:	4001001c 	.word	0x4001001c
 8000a38:	c081ffff 	.word	0xc081ffff

08000a3c <HAL_COMP_Start_IT>:
  * @brief  Enables the interrupt and starts the comparator
  * @param  hcomp COMP handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_COMP_Start_IT(COMP_HandleTypeDef *hcomp)
{
 8000a3c:	b510      	push	{r4, lr}
 8000a3e:	1e03      	subs	r3, r0, #0
  if((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8000a40:	d034      	beq.n	8000aac <HAL_COMP_Start_IT+0x70>
 8000a42:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8000a44:	2001      	movs	r0, #1
 8000a46:	06d2      	lsls	r2, r2, #27
 8000a48:	d402      	bmi.n	8000a50 <HAL_COMP_Start_IT+0x14>
    if(hcomp->State == HAL_COMP_STATE_READY)
 8000a4a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8000a4c:	2c01      	cmp	r4, #1
 8000a4e:	d000      	beq.n	8000a52 <HAL_COMP_Start_IT+0x16>
    /* Enable Exti interrupt mode */
    SET_BIT(EXTI->IMR, extiline);
  }

  return status;
}
 8000a50:	bd10      	pop	{r4, pc}
      if(hcomp->Instance == COMP2)
 8000a52:	6818      	ldr	r0, [r3, #0]
 8000a54:	4a1e      	ldr	r2, [pc, #120]	; (8000ad0 <HAL_COMP_Start_IT+0x94>)
 8000a56:	4290      	cmp	r0, r2
 8000a58:	d02e      	beq.n	8000ab8 <HAL_COMP_Start_IT+0x7c>
      SET_BIT(COMP->CSR, COMP_CSR_COMPxEN << regshift);
 8000a5a:	4a1e      	ldr	r2, [pc, #120]	; (8000ad4 <HAL_COMP_Start_IT+0x98>)
 8000a5c:	6811      	ldr	r1, [r2, #0]
 8000a5e:	4321      	orrs	r1, r4
 8000a60:	6011      	str	r1, [r2, #0]
      hcomp->State = HAL_COMP_STATE_BUSY;
 8000a62:	2102      	movs	r1, #2
 8000a64:	6299      	str	r1, [r3, #40]	; 0x28
    extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 8000a66:	4290      	cmp	r0, r2
 8000a68:	d022      	beq.n	8000ab0 <HAL_COMP_Start_IT+0x74>
 8000a6a:	2180      	movs	r1, #128	; 0x80
 8000a6c:	4a1a      	ldr	r2, [pc, #104]	; (8000ad8 <HAL_COMP_Start_IT+0x9c>)
 8000a6e:	03c9      	lsls	r1, r1, #15
    if((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_IT_RISING) != RESET)
 8000a70:	6a1b      	ldr	r3, [r3, #32]
      SET_BIT(EXTI->RTSR, extiline);
 8000a72:	4c1a      	ldr	r4, [pc, #104]	; (8000adc <HAL_COMP_Start_IT+0xa0>)
    if((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_IT_RISING) != RESET)
 8000a74:	07d8      	lsls	r0, r3, #31
 8000a76:	d50f      	bpl.n	8000a98 <HAL_COMP_Start_IT+0x5c>
      SET_BIT(EXTI->RTSR, extiline);
 8000a78:	68a0      	ldr	r0, [r4, #8]
 8000a7a:	4308      	orrs	r0, r1
 8000a7c:	60a0      	str	r0, [r4, #8]
    if((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_IT_FALLING) != RESET)
 8000a7e:	079b      	lsls	r3, r3, #30
 8000a80:	d50f      	bpl.n	8000aa2 <HAL_COMP_Start_IT+0x66>
      SET_BIT(EXTI->FTSR, extiline);
 8000a82:	4a16      	ldr	r2, [pc, #88]	; (8000adc <HAL_COMP_Start_IT+0xa0>)
 8000a84:	68d3      	ldr	r3, [r2, #12]
 8000a86:	430b      	orrs	r3, r1
 8000a88:	60d3      	str	r3, [r2, #12]
    WRITE_REG(EXTI->PR, extiline);
 8000a8a:	4b14      	ldr	r3, [pc, #80]	; (8000adc <HAL_COMP_Start_IT+0xa0>)
    SET_BIT(EXTI->IMR, extiline);
 8000a8c:	2000      	movs	r0, #0
    WRITE_REG(EXTI->PR, extiline);
 8000a8e:	6159      	str	r1, [r3, #20]
    SET_BIT(EXTI->IMR, extiline);
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	430a      	orrs	r2, r1
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	e7db      	b.n	8000a50 <HAL_COMP_Start_IT+0x14>
      CLEAR_BIT(EXTI->RTSR, extiline);
 8000a98:	68a0      	ldr	r0, [r4, #8]
 8000a9a:	4010      	ands	r0, r2
 8000a9c:	60a0      	str	r0, [r4, #8]
    if((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_IT_FALLING) != RESET)
 8000a9e:	079b      	lsls	r3, r3, #30
 8000aa0:	d4ef      	bmi.n	8000a82 <HAL_COMP_Start_IT+0x46>
      CLEAR_BIT(EXTI->FTSR, extiline);
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <HAL_COMP_Start_IT+0xa0>)
 8000aa4:	68d8      	ldr	r0, [r3, #12]
 8000aa6:	4002      	ands	r2, r0
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	e7ee      	b.n	8000a8a <HAL_COMP_Start_IT+0x4e>
  if((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8000aac:	2001      	movs	r0, #1
 8000aae:	e7cf      	b.n	8000a50 <HAL_COMP_Start_IT+0x14>
    extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 8000ab0:	2180      	movs	r1, #128	; 0x80
 8000ab2:	4a0b      	ldr	r2, [pc, #44]	; (8000ae0 <HAL_COMP_Start_IT+0xa4>)
 8000ab4:	0389      	lsls	r1, r1, #14
 8000ab6:	e7db      	b.n	8000a70 <HAL_COMP_Start_IT+0x34>
      SET_BIT(COMP->CSR, COMP_CSR_COMPxEN << regshift);
 8000ab8:	2280      	movs	r2, #128	; 0x80
 8000aba:	4906      	ldr	r1, [pc, #24]	; (8000ad4 <HAL_COMP_Start_IT+0x98>)
 8000abc:	0252      	lsls	r2, r2, #9
 8000abe:	6808      	ldr	r0, [r1, #0]
 8000ac0:	4302      	orrs	r2, r0
 8000ac2:	600a      	str	r2, [r1, #0]
      hcomp->State = HAL_COMP_STATE_BUSY;
 8000ac4:	2202      	movs	r2, #2
    extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 8000ac6:	2180      	movs	r1, #128	; 0x80
      hcomp->State = HAL_COMP_STATE_BUSY;
 8000ac8:	629a      	str	r2, [r3, #40]	; 0x28
    extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 8000aca:	03c9      	lsls	r1, r1, #15
      hcomp->State = HAL_COMP_STATE_BUSY;
 8000acc:	4a02      	ldr	r2, [pc, #8]	; (8000ad8 <HAL_COMP_Start_IT+0x9c>)
 8000ace:	e7cf      	b.n	8000a70 <HAL_COMP_Start_IT+0x34>
 8000ad0:	4001001e 	.word	0x4001001e
 8000ad4:	4001001c 	.word	0x4001001c
 8000ad8:	ffbfffff 	.word	0xffbfffff
 8000adc:	40010400 	.word	0x40010400
 8000ae0:	ffdfffff 	.word	0xffdfffff

08000ae4 <HAL_COMP_Stop_IT>:
  * @brief  Disable the interrupt and Stop the comparator 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Stop_IT(COMP_HandleTypeDef *hcomp)
{ 
 8000ae4:	0002      	movs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Disable the Exti Line interrupt mode */
  CLEAR_BIT(EXTI->IMR, COMP_GET_EXTI_LINE(hcomp->Instance));
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <HAL_COMP_Stop_IT+0x48>)
 8000ae8:	6801      	ldr	r1, [r0, #0]
 8000aea:	4811      	ldr	r0, [pc, #68]	; (8000b30 <HAL_COMP_Stop_IT+0x4c>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4281      	cmp	r1, r0
 8000af0:	d018      	beq.n	8000b24 <HAL_COMP_Stop_IT+0x40>
 8000af2:	4810      	ldr	r0, [pc, #64]	; (8000b34 <HAL_COMP_Stop_IT+0x50>)
 8000af4:	4003      	ands	r3, r0
 8000af6:	480d      	ldr	r0, [pc, #52]	; (8000b2c <HAL_COMP_Stop_IT+0x48>)
 8000af8:	6003      	str	r3, [r0, #0]
  if((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8000afa:	6a93      	ldr	r3, [r2, #40]	; 0x28
    status = HAL_ERROR;
 8000afc:	2001      	movs	r0, #1
  if((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8000afe:	06db      	lsls	r3, r3, #27
 8000b00:	d402      	bmi.n	8000b08 <HAL_COMP_Stop_IT+0x24>
    if(hcomp->State == HAL_COMP_STATE_BUSY)
 8000b02:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8000b04:	2b02      	cmp	r3, #2
 8000b06:	d000      	beq.n	8000b0a <HAL_COMP_Stop_IT+0x26>
  
  status = HAL_COMP_Stop(hcomp);
  
  return status;
}
 8000b08:	4770      	bx	lr
      if(hcomp->Instance == COMP2)
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <HAL_COMP_Stop_IT+0x54>)
 8000b0c:	4299      	cmp	r1, r3
 8000b0e:	d00b      	beq.n	8000b28 <HAL_COMP_Stop_IT+0x44>
 8000b10:	2302      	movs	r3, #2
 8000b12:	425b      	negs	r3, r3
      CLEAR_BIT(COMP->CSR, COMP_CSR_COMPxEN << regshift);
 8000b14:	4906      	ldr	r1, [pc, #24]	; (8000b30 <HAL_COMP_Stop_IT+0x4c>)
 8000b16:	6808      	ldr	r0, [r1, #0]
 8000b18:	4003      	ands	r3, r0
 8000b1a:	600b      	str	r3, [r1, #0]
      hcomp->State = HAL_COMP_STATE_READY;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	2000      	movs	r0, #0
 8000b20:	6293      	str	r3, [r2, #40]	; 0x28
 8000b22:	e7f1      	b.n	8000b08 <HAL_COMP_Stop_IT+0x24>
  CLEAR_BIT(EXTI->IMR, COMP_GET_EXTI_LINE(hcomp->Instance));
 8000b24:	4805      	ldr	r0, [pc, #20]	; (8000b3c <HAL_COMP_Stop_IT+0x58>)
 8000b26:	e7e5      	b.n	8000af4 <HAL_COMP_Stop_IT+0x10>
      if(hcomp->Instance == COMP2)
 8000b28:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <HAL_COMP_Stop_IT+0x5c>)
 8000b2a:	e7f3      	b.n	8000b14 <HAL_COMP_Stop_IT+0x30>
 8000b2c:	40010400 	.word	0x40010400
 8000b30:	4001001c 	.word	0x4001001c
 8000b34:	ffbfffff 	.word	0xffbfffff
 8000b38:	4001001e 	.word	0x4001001e
 8000b3c:	ffdfffff 	.word	0xffdfffff
 8000b40:	fffeffff 	.word	0xfffeffff

08000b44 <HAL_COMP_GetOutputLevel>:
  uint32_t regshift = COMP_CSR_COMP1_SHIFT;
  
  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));
  
  if(hcomp->Instance == COMP2)
 8000b44:	6802      	ldr	r2, [r0, #0]
 8000b46:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <HAL_COMP_GetOutputLevel+0x20>)
 8000b48:	2080      	movs	r0, #128	; 0x80
 8000b4a:	429a      	cmp	r2, r3
 8000b4c:	d007      	beq.n	8000b5e <HAL_COMP_GetOutputLevel+0x1a>
 8000b4e:	01c0      	lsls	r0, r0, #7
  {
    regshift = COMP_CSR_COMP2_SHIFT;
  }
  level = READ_BIT(COMP->CSR, COMP_CSR_COMPxOUT << regshift);
 8000b50:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <HAL_COMP_GetOutputLevel+0x24>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4018      	ands	r0, r3
  
  if(level != 0U)
 8000b56:	d001      	beq.n	8000b5c <HAL_COMP_GetOutputLevel+0x18>
  {
    return(COMP_OUTPUTLEVEL_HIGH);
 8000b58:	2080      	movs	r0, #128	; 0x80
 8000b5a:	01c0      	lsls	r0, r0, #7
  }
  return(COMP_OUTPUTLEVEL_LOW);
}
 8000b5c:	4770      	bx	lr
 8000b5e:	05c0      	lsls	r0, r0, #23
 8000b60:	e7f6      	b.n	8000b50 <HAL_COMP_GetOutputLevel+0xc>
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	4001001e 	.word	0x4001001e
 8000b68:	4001001c 	.word	0x4001001c

08000b6c <HAL_COMP_IRQHandler>:
  uint32_t extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 8000b6c:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <HAL_COMP_IRQHandler+0x24>)
 8000b6e:	6802      	ldr	r2, [r0, #0]
{
 8000b70:	b510      	push	{r4, lr}
  uint32_t extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 8000b72:	429a      	cmp	r2, r3
 8000b74:	d009      	beq.n	8000b8a <HAL_COMP_IRQHandler+0x1e>
 8000b76:	2280      	movs	r2, #128	; 0x80
 8000b78:	03d2      	lsls	r2, r2, #15
  if(READ_BIT(EXTI->PR, extiline) != RESET)
 8000b7a:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <HAL_COMP_IRQHandler+0x28>)
 8000b7c:	6959      	ldr	r1, [r3, #20]
 8000b7e:	4211      	tst	r1, r2
 8000b80:	d002      	beq.n	8000b88 <HAL_COMP_IRQHandler+0x1c>
    WRITE_REG(EXTI->PR, extiline);
 8000b82:	615a      	str	r2, [r3, #20]
    HAL_COMP_TriggerCallback(hcomp);    
 8000b84:	f003 f982 	bl	8003e8c <HAL_COMP_TriggerCallback>
}
 8000b88:	bd10      	pop	{r4, pc}
  uint32_t extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 8000b8a:	2280      	movs	r2, #128	; 0x80
 8000b8c:	0392      	lsls	r2, r2, #14
 8000b8e:	e7f4      	b.n	8000b7a <HAL_COMP_IRQHandler+0xe>
 8000b90:	4001001c 	.word	0x4001001c
 8000b94:	40010400 	.word	0x40010400

08000b98 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b98:	b570      	push	{r4, r5, r6, lr}
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000b9a:	2800      	cmp	r0, #0
 8000b9c:	db14      	blt.n	8000bc8 <HAL_NVIC_SetPriority+0x30>
 8000b9e:	4a16      	ldr	r2, [pc, #88]	; (8000bf8 <HAL_NVIC_SetPriority+0x60>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ba0:	2403      	movs	r4, #3
 8000ba2:	4694      	mov	ip, r2
 8000ba4:	22ff      	movs	r2, #255	; 0xff
 8000ba6:	0883      	lsrs	r3, r0, #2
 8000ba8:	4020      	ands	r0, r4
 8000baa:	0014      	movs	r4, r2
 8000bac:	26c0      	movs	r6, #192	; 0xc0
 8000bae:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bb0:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bb2:	4084      	lsls	r4, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bb4:	400a      	ands	r2, r1
 8000bb6:	4082      	lsls	r2, r0
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	4463      	add	r3, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bbc:	00b6      	lsls	r6, r6, #2
 8000bbe:	599d      	ldr	r5, [r3, r6]
 8000bc0:	43a5      	bics	r5, r4
 8000bc2:	432a      	orrs	r2, r5
 8000bc4:	519a      	str	r2, [r3, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000bc6:	bd70      	pop	{r4, r5, r6, pc}
 8000bc8:	4a0c      	ldr	r2, [pc, #48]	; (8000bfc <HAL_NVIC_SetPriority+0x64>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bca:	24ff      	movs	r4, #255	; 0xff
 8000bcc:	4694      	mov	ip, r2
 8000bce:	230f      	movs	r3, #15
 8000bd0:	2203      	movs	r2, #3
 8000bd2:	b2c0      	uxtb	r0, r0
 8000bd4:	4003      	ands	r3, r0
 8000bd6:	4010      	ands	r0, r2
 8000bd8:	0022      	movs	r2, r4
 8000bda:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bdc:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bde:	4082      	lsls	r2, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000be0:	400c      	ands	r4, r1
 8000be2:	4084      	lsls	r4, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000be4:	3b08      	subs	r3, #8
 8000be6:	089b      	lsrs	r3, r3, #2
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	4463      	add	r3, ip
 8000bec:	69dd      	ldr	r5, [r3, #28]
 8000bee:	4395      	bics	r5, r2
 8000bf0:	432c      	orrs	r4, r5
 8000bf2:	61dc      	str	r4, [r3, #28]
 8000bf4:	e7e7      	b.n	8000bc6 <HAL_NVIC_SetPriority+0x2e>
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	e000e100 	.word	0xe000e100
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000c00:	231f      	movs	r3, #31
 8000c02:	4018      	ands	r0, r3
 8000c04:	3b1e      	subs	r3, #30
 8000c06:	4083      	lsls	r3, r0
 8000c08:	4a01      	ldr	r2, [pc, #4]	; (8000c10 <HAL_NVIC_EnableIRQ+0x10>)
 8000c0a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000c0c:	4770      	bx	lr
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	e000e100 	.word	0xe000e100

08000c14 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c14:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <HAL_SYSTICK_Config+0x2c>)
 8000c16:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c18:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d80e      	bhi.n	8000c3c <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c1e:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c20:	4a08      	ldr	r2, [pc, #32]	; (8000c44 <HAL_SYSTICK_Config+0x30>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c22:	4809      	ldr	r0, [pc, #36]	; (8000c48 <HAL_SYSTICK_Config+0x34>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c24:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c26:	6a03      	ldr	r3, [r0, #32]
 8000c28:	0609      	lsls	r1, r1, #24
 8000c2a:	021b      	lsls	r3, r3, #8
 8000c2c:	0a1b      	lsrs	r3, r3, #8
 8000c2e:	430b      	orrs	r3, r1
 8000c30:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c32:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c34:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c36:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c38:	3307      	adds	r3, #7
 8000c3a:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c3c:	4770      	bx	lr
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	00ffffff 	.word	0x00ffffff
 8000c44:	e000e010 	.word	0xe000e010
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000c4c:	4a05      	ldr	r2, [pc, #20]	; (8000c64 <HAL_SYSTICK_CLKSourceConfig+0x18>)
 8000c4e:	6813      	ldr	r3, [r2, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000c50:	2804      	cmp	r0, #4
 8000c52:	d003      	beq.n	8000c5c <HAL_SYSTICK_CLKSourceConfig+0x10>
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000c54:	2104      	movs	r1, #4
 8000c56:	438b      	bics	r3, r1
 8000c58:	6013      	str	r3, [r2, #0]
  }
}
 8000c5a:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000c5c:	4318      	orrs	r0, r3
 8000c5e:	6010      	str	r0, [r2, #0]
 8000c60:	e7fb      	b.n	8000c5a <HAL_SYSTICK_CLKSourceConfig+0xe>
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	e000e010 	.word	0xe000e010

08000c68 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000c68:	4770      	bx	lr
 8000c6a:	46c0      	nop			; (mov r8, r8)

08000c6c <HAL_SYSTICK_IRQHandler>:
{
 8000c6c:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 8000c6e:	f7ff fffb 	bl	8000c68 <HAL_SYSTICK_Callback>
}
 8000c72:	bd10      	pop	{r4, pc}

08000c74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000c74:	b570      	push	{r4, r5, r6, lr}
 8000c76:	1e04      	subs	r4, r0, #0
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000c78:	d02b      	beq.n	8000cd2 <HAL_DMA_Init+0x5e>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c7a:	2521      	movs	r5, #33	; 0x21
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	5543      	strb	r3, [r0, r5]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000c80:	6800      	ldr	r0, [r0, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c82:	4a15      	ldr	r2, [pc, #84]	; (8000cd8 <HAL_DMA_Init+0x64>)
  tmp = hdma->Instance->CCR;
 8000c84:	6803      	ldr	r3, [r0, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c86:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c88:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8000c8a:	6863      	ldr	r3, [r4, #4]
 8000c8c:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c8e:	68e1      	ldr	r1, [r4, #12]
 8000c90:	430b      	orrs	r3, r1
 8000c92:	6921      	ldr	r1, [r4, #16]
 8000c94:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c96:	6961      	ldr	r1, [r4, #20]
 8000c98:	430b      	orrs	r3, r1
 8000c9a:	69a1      	ldr	r1, [r4, #24]
 8000c9c:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c9e:	69e1      	ldr	r1, [r4, #28]
 8000ca0:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8000ca2:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000ca4:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000ca6:	4b0d      	ldr	r3, [pc, #52]	; (8000cdc <HAL_DMA_Init+0x68>)
 8000ca8:	2114      	movs	r1, #20
 8000caa:	469c      	mov	ip, r3
 8000cac:	4460      	add	r0, ip
 8000cae:	f7ff fa2b 	bl	8000108 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <HAL_DMA_Init+0x6c>)
  hdma->State = HAL_DMA_STATE_READY;
 8000cb4:	2201      	movs	r2, #1
  hdma->DmaBaseAddress = DMA1;
 8000cb6:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->XferCpltCallback = NULL;
 8000cb8:	2300      	movs	r3, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000cba:	0080      	lsls	r0, r0, #2
 8000cbc:	6420      	str	r0, [r4, #64]	; 0x40
  return HAL_OK;
 8000cbe:	2000      	movs	r0, #0
  hdma->XferCpltCallback = NULL;
 8000cc0:	62a3      	str	r3, [r4, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8000cc2:	62e3      	str	r3, [r4, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8000cc4:	6323      	str	r3, [r4, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8000cc6:	6363      	str	r3, [r4, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cc8:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8000cca:	5562      	strb	r2, [r4, r5]
  hdma->Lock = HAL_UNLOCKED;
 8000ccc:	321f      	adds	r2, #31
 8000cce:	54a3      	strb	r3, [r4, r2]
}  
 8000cd0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	e7fc      	b.n	8000cd0 <HAL_DMA_Init+0x5c>
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	ffffc00f 	.word	0xffffc00f
 8000cdc:	bffdfff8 	.word	0xbffdfff8
 8000ce0:	40020000 	.word	0x40020000

08000ce4 <HAL_DMA_Start_IT>:
{
 8000ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8000ce6:	2420      	movs	r4, #32
 8000ce8:	5d05      	ldrb	r5, [r0, r4]
 8000cea:	2602      	movs	r6, #2
 8000cec:	2d01      	cmp	r5, #1
 8000cee:	d008      	beq.n	8000d02 <HAL_DMA_Start_IT+0x1e>
 8000cf0:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8000cf2:	2721      	movs	r7, #33	; 0x21
  __HAL_LOCK(hdma);
 8000cf4:	5505      	strb	r5, [r0, r4]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000cf6:	5dc5      	ldrb	r5, [r0, r7]
 8000cf8:	b2ed      	uxtb	r5, r5
 8000cfa:	2d01      	cmp	r5, #1
 8000cfc:	d003      	beq.n	8000d06 <HAL_DMA_Start_IT+0x22>
    __HAL_UNLOCK(hdma); 
 8000cfe:	2300      	movs	r3, #0
 8000d00:	5503      	strb	r3, [r0, r4]
} 
 8000d02:	0030      	movs	r0, r6
 8000d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d06:	2400      	movs	r4, #0
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000d08:	55c6      	strb	r6, [r0, r7]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d0a:	6384      	str	r4, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d0c:	6804      	ldr	r4, [r0, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000d0e:	6c07      	ldr	r7, [r0, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d10:	6826      	ldr	r6, [r4, #0]
 8000d12:	43ae      	bics	r6, r5
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000d14:	40bd      	lsls	r5, r7
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d16:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000d18:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8000d1a:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8000d1c:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000d1e:	6843      	ldr	r3, [r0, #4]
 8000d20:	2b10      	cmp	r3, #16
 8000d22:	d00e      	beq.n	8000d42 <HAL_DMA_Start_IT+0x5e>
    hdma->Instance->CPAR = SrcAddress;
 8000d24:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 8000d26:	60e2      	str	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8000d28:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d00c      	beq.n	8000d48 <HAL_DMA_Start_IT+0x64>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d2e:	220e      	movs	r2, #14
 8000d30:	6823      	ldr	r3, [r4, #0]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000d36:	2201      	movs	r2, #1
 8000d38:	6823      	ldr	r3, [r4, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000d3a:	2600      	movs	r6, #0
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	6023      	str	r3, [r4, #0]
 8000d40:	e7df      	b.n	8000d02 <HAL_DMA_Start_IT+0x1e>
    hdma->Instance->CPAR = DstAddress;
 8000d42:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000d44:	60e1      	str	r1, [r4, #12]
 8000d46:	e7ef      	b.n	8000d28 <HAL_DMA_Start_IT+0x44>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000d48:	220a      	movs	r2, #10
 8000d4a:	6823      	ldr	r3, [r4, #0]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000d50:	6823      	ldr	r3, [r4, #0]
 8000d52:	3a06      	subs	r2, #6
 8000d54:	4393      	bics	r3, r2
 8000d56:	6023      	str	r3, [r4, #0]
 8000d58:	e7ed      	b.n	8000d36 <HAL_DMA_Start_IT+0x52>
 8000d5a:	46c0      	nop			; (mov r8, r8)

08000d5c <HAL_DMA_IRQHandler>:
{
 8000d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000d5e:	2504      	movs	r5, #4
 8000d60:	002e      	movs	r6, r5
 8000d62:	6c03      	ldr	r3, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d64:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000d66:	409e      	lsls	r6, r3
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d68:	6822      	ldr	r2, [r4, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000d6a:	6801      	ldr	r1, [r0, #0]
 8000d6c:	680f      	ldr	r7, [r1, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000d6e:	4216      	tst	r6, r2
 8000d70:	d00d      	beq.n	8000d8e <HAL_DMA_IRQHandler+0x32>
 8000d72:	423d      	tst	r5, r7
 8000d74:	d00b      	beq.n	8000d8e <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d76:	680b      	ldr	r3, [r1, #0]
 8000d78:	069b      	lsls	r3, r3, #26
 8000d7a:	d402      	bmi.n	8000d82 <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000d7c:	680b      	ldr	r3, [r1, #0]
 8000d7e:	43ab      	bics	r3, r5
 8000d80:	600b      	str	r3, [r1, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000d82:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000d84:	6066      	str	r6, [r4, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d000      	beq.n	8000d8c <HAL_DMA_IRQHandler+0x30>
    	hdma->XferErrorCallback(hdma);
 8000d8a:	4798      	blx	r3
}  
 8000d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000d8e:	2502      	movs	r5, #2
 8000d90:	002e      	movs	r6, r5
 8000d92:	409e      	lsls	r6, r3
 8000d94:	4216      	tst	r6, r2
 8000d96:	d014      	beq.n	8000dc2 <HAL_DMA_IRQHandler+0x66>
 8000d98:	423d      	tst	r5, r7
 8000d9a:	d012      	beq.n	8000dc2 <HAL_DMA_IRQHandler+0x66>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d9c:	680b      	ldr	r3, [r1, #0]
 8000d9e:	069b      	lsls	r3, r3, #26
 8000da0:	d406      	bmi.n	8000db0 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000da2:	220a      	movs	r2, #10
 8000da4:	680b      	ldr	r3, [r1, #0]
 8000da6:	4393      	bics	r3, r2
 8000da8:	600b      	str	r3, [r1, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8000daa:	2321      	movs	r3, #33	; 0x21
 8000dac:	3a09      	subs	r2, #9
 8000dae:	54c2      	strb	r2, [r0, r3]
  	__HAL_UNLOCK(hdma);
 8000db0:	2320      	movs	r3, #32
 8000db2:	2200      	movs	r2, #0
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000db4:	6066      	str	r6, [r4, #4]
  	__HAL_UNLOCK(hdma);
 8000db6:	54c2      	strb	r2, [r0, r3]
  	if(hdma->XferCpltCallback != NULL)
 8000db8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d0e6      	beq.n	8000d8c <HAL_DMA_IRQHandler+0x30>
    	hdma->XferErrorCallback(hdma);
 8000dbe:	4798      	blx	r3
 8000dc0:	e7e4      	b.n	8000d8c <HAL_DMA_IRQHandler+0x30>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000dc2:	2508      	movs	r5, #8
 8000dc4:	002e      	movs	r6, r5
 8000dc6:	409e      	lsls	r6, r3
 8000dc8:	4232      	tst	r2, r6
 8000dca:	d0df      	beq.n	8000d8c <HAL_DMA_IRQHandler+0x30>
 8000dcc:	423d      	tst	r5, r7
 8000dce:	d0dd      	beq.n	8000d8c <HAL_DMA_IRQHandler+0x30>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000dd0:	680a      	ldr	r2, [r1, #0]
 8000dd2:	3506      	adds	r5, #6
 8000dd4:	43aa      	bics	r2, r5
 8000dd6:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000dd8:	2201      	movs	r2, #1
 8000dda:	0011      	movs	r1, r2
 8000ddc:	4099      	lsls	r1, r3
    hdma->State = HAL_DMA_STATE_READY;    
 8000dde:	2321      	movs	r3, #33	; 0x21
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000de0:	6061      	str	r1, [r4, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000de2:	6382      	str	r2, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8000de4:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma); 
 8000de6:	2200      	movs	r2, #0
 8000de8:	3b01      	subs	r3, #1
 8000dea:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferErrorCallback != NULL)
 8000dec:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d0cc      	beq.n	8000d8c <HAL_DMA_IRQHandler+0x30>
    	hdma->XferErrorCallback(hdma);
 8000df2:	4798      	blx	r3
 8000df4:	e7ca      	b.n	8000d8c <HAL_DMA_IRQHandler+0x30>
 8000df6:	46c0      	nop			; (mov r8, r8)

08000df8 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dfa:	46de      	mov	lr, fp
 8000dfc:	4657      	mov	r7, sl
 8000dfe:	464e      	mov	r6, r9
 8000e00:	4645      	mov	r5, r8
 8000e02:	b5e0      	push	{r5, r6, r7, lr}
 8000e04:	469b      	mov	fp, r3
 8000e06:	b083      	sub	sp, #12
  HAL_StatusTypeDef status = HAL_ERROR;
  uint8_t index = 0U;
  uint8_t nbiterations = 0U;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000e08:	4b67      	ldr	r3, [pc, #412]	; (8000fa8 <HAL_FLASH_Program+0x1b0>)
{
 8000e0a:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(&pFlash);
 8000e0c:	469a      	mov	sl, r3
 8000e0e:	7e1b      	ldrb	r3, [r3, #24]
{
 8000e10:	4680      	mov	r8, r0
 8000e12:	4689      	mov	r9, r1
  __HAL_LOCK(&pFlash);
 8000e14:	2002      	movs	r0, #2
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d106      	bne.n	8000e28 <HAL_FLASH_Program+0x30>

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);

  return status;
}
 8000e1a:	b003      	add	sp, #12
 8000e1c:	bc3c      	pop	{r2, r3, r4, r5}
 8000e1e:	4690      	mov	r8, r2
 8000e20:	4699      	mov	r9, r3
 8000e22:	46a2      	mov	sl, r4
 8000e24:	46ab      	mov	fp, r5
 8000e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8000e28:	2301      	movs	r3, #1
 8000e2a:	4652      	mov	r2, sl
 8000e2c:	7613      	strb	r3, [r2, #24]
{
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000e2e:	f7ff fb0b 	bl	8000448 <HAL_GetTick>
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000e32:	4c5e      	ldr	r4, [pc, #376]	; (8000fac <HAL_FLASH_Program+0x1b4>)
  uint32_t tickstart = HAL_GetTick();
 8000e34:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000e36:	2501      	movs	r5, #1
  { 
    if (Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000e38:	4e5d      	ldr	r6, [pc, #372]	; (8000fb0 <HAL_FLASH_Program+0x1b8>)
 8000e3a:	e005      	b.n	8000e48 <HAL_FLASH_Program+0x50>
 8000e3c:	f7ff fb04 	bl	8000448 <HAL_GetTick>
 8000e40:	1bc0      	subs	r0, r0, r7
 8000e42:	42b0      	cmp	r0, r6
 8000e44:	d900      	bls.n	8000e48 <HAL_FLASH_Program+0x50>
 8000e46:	e0a6      	b.n	8000f96 <HAL_FLASH_Program+0x19e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000e48:	68e3      	ldr	r3, [r4, #12]
 8000e4a:	421d      	tst	r5, r3
 8000e4c:	d1f6      	bne.n	8000e3c <HAL_FLASH_Program+0x44>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000e4e:	2320      	movs	r3, #32
 8000e50:	68e2      	ldr	r2, [r4, #12]
 8000e52:	4213      	tst	r3, r2
 8000e54:	d000      	beq.n	8000e58 <HAL_FLASH_Program+0x60>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000e56:	60e3      	str	r3, [r4, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000e58:	4b54      	ldr	r3, [pc, #336]	; (8000fac <HAL_FLASH_Program+0x1b4>)
 8000e5a:	68da      	ldr	r2, [r3, #12]
 8000e5c:	06d2      	lsls	r2, r2, #27
 8000e5e:	d402      	bmi.n	8000e66 <HAL_FLASH_Program+0x6e>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000e60:	68db      	ldr	r3, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000e62:	075b      	lsls	r3, r3, #29
 8000e64:	d51e      	bpl.n	8000ea4 <HAL_FLASH_Program+0xac>
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000e66:	4b51      	ldr	r3, [pc, #324]	; (8000fac <HAL_FLASH_Program+0x1b4>)
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	06db      	lsls	r3, r3, #27
 8000e6c:	d400      	bmi.n	8000e70 <HAL_FLASH_Program+0x78>
 8000e6e:	e094      	b.n	8000f9a <HAL_FLASH_Program+0x1a2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000e70:	4653      	mov	r3, sl
 8000e72:	2202      	movs	r2, #2
 8000e74:	69db      	ldr	r3, [r3, #28]
 8000e76:	2114      	movs	r1, #20
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	4652      	mov	r2, sl
 8000e7c:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8000e7e:	2310      	movs	r3, #16
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000e80:	4a4a      	ldr	r2, [pc, #296]	; (8000fac <HAL_FLASH_Program+0x1b4>)
 8000e82:	68d2      	ldr	r2, [r2, #12]
 8000e84:	0752      	lsls	r2, r2, #29
 8000e86:	d506      	bpl.n	8000e96 <HAL_FLASH_Program+0x9e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000e88:	4653      	mov	r3, sl
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	4652      	mov	r2, sl
 8000e92:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8000e94:	000b      	movs	r3, r1
    return HAL_ERROR;
 8000e96:	2001      	movs	r0, #1
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000e98:	4a44      	ldr	r2, [pc, #272]	; (8000fac <HAL_FLASH_Program+0x1b4>)
 8000e9a:	60d3      	str	r3, [r2, #12]
  __HAL_UNLOCK(&pFlash);
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	4652      	mov	r2, sl
 8000ea0:	7613      	strb	r3, [r2, #24]
  return status;
 8000ea2:	e7ba      	b.n	8000e1a <HAL_FLASH_Program+0x22>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000ea4:	4643      	mov	r3, r8
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d07a      	beq.n	8000fa0 <HAL_FLASH_Program+0x1a8>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000eaa:	4642      	mov	r2, r8
      nbiterations = 4U;
 8000eac:	2304      	movs	r3, #4
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000eae:	2a02      	cmp	r2, #2
 8000eb0:	d078      	beq.n	8000fa4 <HAL_FLASH_Program+0x1ac>
 8000eb2:	464a      	mov	r2, r9
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	3202      	adds	r2, #2
 8000ebc:	189b      	adds	r3, r3, r2
 8000ebe:	9300      	str	r3, [sp, #0]
      nbiterations = 4U;
 8000ec0:	2300      	movs	r3, #0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000ec2:	2501      	movs	r5, #1
      nbiterations = 4U;
 8000ec4:	4698      	mov	r8, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000ec6:	4c39      	ldr	r4, [pc, #228]	; (8000fac <HAL_FLASH_Program+0x1b4>)
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000ec8:	2220      	movs	r2, #32
 8000eca:	4643      	mov	r3, r8
 8000ecc:	4252      	negs	r2, r2
 8000ece:	189b      	adds	r3, r3, r2
 8000ed0:	d457      	bmi.n	8000f82 <HAL_FLASH_Program+0x18a>
 8000ed2:	465a      	mov	r2, fp
 8000ed4:	40da      	lsrs	r2, r3
 8000ed6:	0013      	movs	r3, r2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000ed8:	2200      	movs	r2, #0
 8000eda:	4651      	mov	r1, sl
 8000edc:	61ca      	str	r2, [r1, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000ede:	6922      	ldr	r2, [r4, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000ee0:	b29b      	uxth	r3, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000ee2:	432a      	orrs	r2, r5
 8000ee4:	6122      	str	r2, [r4, #16]
  *(__IO uint16_t*)Address = Data;
 8000ee6:	464a      	mov	r2, r9
 8000ee8:	8013      	strh	r3, [r2, #0]
  uint32_t tickstart = HAL_GetTick();
 8000eea:	f7ff faad 	bl	8000448 <HAL_GetTick>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000eee:	4e30      	ldr	r6, [pc, #192]	; (8000fb0 <HAL_FLASH_Program+0x1b8>)
  uint32_t tickstart = HAL_GetTick();
 8000ef0:	0007      	movs	r7, r0
 8000ef2:	e004      	b.n	8000efe <HAL_FLASH_Program+0x106>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000ef4:	f7ff faa8 	bl	8000448 <HAL_GetTick>
 8000ef8:	1bc0      	subs	r0, r0, r7
 8000efa:	42b0      	cmp	r0, r6
 8000efc:	d83c      	bhi.n	8000f78 <HAL_FLASH_Program+0x180>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000efe:	68e3      	ldr	r3, [r4, #12]
 8000f00:	421d      	tst	r5, r3
 8000f02:	d1f7      	bne.n	8000ef4 <HAL_FLASH_Program+0xfc>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000f04:	2220      	movs	r2, #32
 8000f06:	68e3      	ldr	r3, [r4, #12]
 8000f08:	421a      	tst	r2, r3
 8000f0a:	d001      	beq.n	8000f10 <HAL_FLASH_Program+0x118>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000f0c:	2320      	movs	r3, #32
 8000f0e:	60e3      	str	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000f10:	68e3      	ldr	r3, [r4, #12]
 8000f12:	06db      	lsls	r3, r3, #27
 8000f14:	d402      	bmi.n	8000f1c <HAL_FLASH_Program+0x124>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000f16:	68e3      	ldr	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000f18:	075b      	lsls	r3, r3, #29
 8000f1a:	d51f      	bpl.n	8000f5c <HAL_FLASH_Program+0x164>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000f1c:	4b23      	ldr	r3, [pc, #140]	; (8000fac <HAL_FLASH_Program+0x1b4>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	06db      	lsls	r3, r3, #27
 8000f22:	d52b      	bpl.n	8000f7c <HAL_FLASH_Program+0x184>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000f24:	4653      	mov	r3, sl
 8000f26:	2202      	movs	r2, #2
 8000f28:	69db      	ldr	r3, [r3, #28]
 8000f2a:	2114      	movs	r1, #20
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	4652      	mov	r2, sl
 8000f30:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8000f32:	2310      	movs	r3, #16
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000f34:	4a1d      	ldr	r2, [pc, #116]	; (8000fac <HAL_FLASH_Program+0x1b4>)
 8000f36:	68d2      	ldr	r2, [r2, #12]
 8000f38:	0752      	lsls	r2, r2, #29
 8000f3a:	d506      	bpl.n	8000f4a <HAL_FLASH_Program+0x152>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000f3c:	4653      	mov	r3, sl
 8000f3e:	2201      	movs	r2, #1
 8000f40:	69db      	ldr	r3, [r3, #28]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	4652      	mov	r2, sl
 8000f46:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8000f48:	000b      	movs	r3, r1
    return HAL_ERROR;
 8000f4a:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000f4c:	4a17      	ldr	r2, [pc, #92]	; (8000fac <HAL_FLASH_Program+0x1b4>)
 8000f4e:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000f50:	2101      	movs	r1, #1
 8000f52:	4a16      	ldr	r2, [pc, #88]	; (8000fac <HAL_FLASH_Program+0x1b4>)
 8000f54:	6913      	ldr	r3, [r2, #16]
 8000f56:	438b      	bics	r3, r1
 8000f58:	6113      	str	r3, [r2, #16]
 8000f5a:	e79f      	b.n	8000e9c <HAL_FLASH_Program+0xa4>
 8000f5c:	6923      	ldr	r3, [r4, #16]
 8000f5e:	43ab      	bics	r3, r5
 8000f60:	6123      	str	r3, [r4, #16]
 8000f62:	2310      	movs	r3, #16
 8000f64:	469c      	mov	ip, r3
 8000f66:	3b0e      	subs	r3, #14
 8000f68:	44e0      	add	r8, ip
 8000f6a:	469c      	mov	ip, r3
    for (index = 0U; index < nbiterations; index++)
 8000f6c:	9b00      	ldr	r3, [sp, #0]
 8000f6e:	44e1      	add	r9, ip
 8000f70:	454b      	cmp	r3, r9
 8000f72:	d1a9      	bne.n	8000ec8 <HAL_FLASH_Program+0xd0>
 8000f74:	2000      	movs	r0, #0
 8000f76:	e791      	b.n	8000e9c <HAL_FLASH_Program+0xa4>
        return HAL_TIMEOUT;
 8000f78:	2003      	movs	r0, #3
 8000f7a:	e7e9      	b.n	8000f50 <HAL_FLASH_Program+0x158>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000f7c:	2104      	movs	r1, #4
  uint32_t flags = 0U;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	e7d8      	b.n	8000f34 <HAL_FLASH_Program+0x13c>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000f82:	4642      	mov	r2, r8
 8000f84:	2320      	movs	r3, #32
 8000f86:	1a9b      	subs	r3, r3, r2
 8000f88:	465a      	mov	r2, fp
 8000f8a:	4641      	mov	r1, r8
 8000f8c:	409a      	lsls	r2, r3
 8000f8e:	9b01      	ldr	r3, [sp, #4]
 8000f90:	40cb      	lsrs	r3, r1
 8000f92:	4313      	orrs	r3, r2
 8000f94:	e7a0      	b.n	8000ed8 <HAL_FLASH_Program+0xe0>
        return HAL_TIMEOUT;
 8000f96:	2003      	movs	r0, #3
 8000f98:	e780      	b.n	8000e9c <HAL_FLASH_Program+0xa4>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000f9a:	2104      	movs	r1, #4
  uint32_t flags = 0U;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	e76f      	b.n	8000e80 <HAL_FLASH_Program+0x88>
      nbiterations = 1U;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e786      	b.n	8000eb2 <HAL_FLASH_Program+0xba>
      nbiterations = 2U;
 8000fa4:	3b02      	subs	r3, #2
 8000fa6:	e784      	b.n	8000eb2 <HAL_FLASH_Program+0xba>
 8000fa8:	20000188 	.word	0x20000188
 8000fac:	40022000 	.word	0x40022000
 8000fb0:	0000c350 	.word	0x0000c350

08000fb4 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8000fb4:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <HAL_FLASH_Unlock+0x18>)
    return HAL_ERROR;
 8000fb6:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8000fb8:	691a      	ldr	r2, [r3, #16]
 8000fba:	0612      	lsls	r2, r2, #24
 8000fbc:	d504      	bpl.n	8000fc8 <HAL_FLASH_Unlock+0x14>
  return HAL_OK; 
 8000fbe:	2000      	movs	r0, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000fc0:	4a03      	ldr	r2, [pc, #12]	; (8000fd0 <HAL_FLASH_Unlock+0x1c>)
 8000fc2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000fc4:	4a03      	ldr	r2, [pc, #12]	; (8000fd4 <HAL_FLASH_Unlock+0x20>)
 8000fc6:	605a      	str	r2, [r3, #4]
}
 8000fc8:	4770      	bx	lr
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	40022000 	.word	0x40022000
 8000fd0:	45670123 	.word	0x45670123
 8000fd4:	cdef89ab 	.word	0xcdef89ab

08000fd8 <FLASH_WaitForLastOperation>:
{
 8000fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fda:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000fdc:	f7ff fa34 	bl	8000448 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000fe0:	2501      	movs	r5, #1
  uint32_t tickstart = HAL_GetTick();
 8000fe2:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000fe4:	4e1f      	ldr	r6, [pc, #124]	; (8001064 <FLASH_WaitForLastOperation+0x8c>)
 8000fe6:	1c63      	adds	r3, r4, #1
 8000fe8:	d125      	bne.n	8001036 <FLASH_WaitForLastOperation+0x5e>
 8000fea:	2201      	movs	r2, #1
 8000fec:	491d      	ldr	r1, [pc, #116]	; (8001064 <FLASH_WaitForLastOperation+0x8c>)
 8000fee:	68cb      	ldr	r3, [r1, #12]
 8000ff0:	421a      	tst	r2, r3
 8000ff2:	d1fc      	bne.n	8000fee <FLASH_WaitForLastOperation+0x16>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000ff4:	2220      	movs	r2, #32
 8000ff6:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <FLASH_WaitForLastOperation+0x8c>)
 8000ff8:	68d9      	ldr	r1, [r3, #12]
 8000ffa:	420a      	tst	r2, r1
 8000ffc:	d127      	bne.n	800104e <FLASH_WaitForLastOperation+0x76>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000ffe:	4b19      	ldr	r3, [pc, #100]	; (8001064 <FLASH_WaitForLastOperation+0x8c>)
 8001000:	68da      	ldr	r2, [r3, #12]
 8001002:	06d2      	lsls	r2, r2, #27
 8001004:	d403      	bmi.n	800100e <FLASH_WaitForLastOperation+0x36>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001006:	68db      	ldr	r3, [r3, #12]
  return HAL_OK;
 8001008:	2000      	movs	r0, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800100a:	075b      	lsls	r3, r3, #29
 800100c:	d512      	bpl.n	8001034 <FLASH_WaitForLastOperation+0x5c>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <FLASH_WaitForLastOperation+0x8c>)
 8001010:	68db      	ldr	r3, [r3, #12]
 8001012:	06db      	lsls	r3, r3, #27
 8001014:	d41d      	bmi.n	8001052 <FLASH_WaitForLastOperation+0x7a>
 8001016:	2104      	movs	r1, #4
  uint32_t flags = 0U;
 8001018:	2300      	movs	r3, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800101a:	4a12      	ldr	r2, [pc, #72]	; (8001064 <FLASH_WaitForLastOperation+0x8c>)
 800101c:	68d2      	ldr	r2, [r2, #12]
 800101e:	0752      	lsls	r2, r2, #29
 8001020:	d505      	bpl.n	800102e <FLASH_WaitForLastOperation+0x56>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001022:	2001      	movs	r0, #1
 8001024:	4a10      	ldr	r2, [pc, #64]	; (8001068 <FLASH_WaitForLastOperation+0x90>)
 8001026:	69d3      	ldr	r3, [r2, #28]
 8001028:	4303      	orrs	r3, r0
 800102a:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 800102c:	000b      	movs	r3, r1
    return HAL_ERROR;
 800102e:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001030:	4a0c      	ldr	r2, [pc, #48]	; (8001064 <FLASH_WaitForLastOperation+0x8c>)
 8001032:	60d3      	str	r3, [r2, #12]
}
 8001034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001036:	68f3      	ldr	r3, [r6, #12]
 8001038:	421d      	tst	r5, r3
 800103a:	d0db      	beq.n	8000ff4 <FLASH_WaitForLastOperation+0x1c>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800103c:	2c00      	cmp	r4, #0
 800103e:	d004      	beq.n	800104a <FLASH_WaitForLastOperation+0x72>
 8001040:	f7ff fa02 	bl	8000448 <HAL_GetTick>
 8001044:	1bc0      	subs	r0, r0, r7
 8001046:	4284      	cmp	r4, r0
 8001048:	d2cd      	bcs.n	8000fe6 <FLASH_WaitForLastOperation+0xe>
        return HAL_TIMEOUT;
 800104a:	2003      	movs	r0, #3
 800104c:	e7f2      	b.n	8001034 <FLASH_WaitForLastOperation+0x5c>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800104e:	60da      	str	r2, [r3, #12]
 8001050:	e7d5      	b.n	8000ffe <FLASH_WaitForLastOperation+0x26>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001052:	2102      	movs	r1, #2
 8001054:	4a04      	ldr	r2, [pc, #16]	; (8001068 <FLASH_WaitForLastOperation+0x90>)
 8001056:	69d3      	ldr	r3, [r2, #28]
 8001058:	430b      	orrs	r3, r1
 800105a:	61d3      	str	r3, [r2, #28]
 800105c:	3112      	adds	r1, #18
    flags |= FLASH_FLAG_WRPERR;
 800105e:	2310      	movs	r3, #16
 8001060:	e7db      	b.n	800101a <FLASH_WaitForLastOperation+0x42>
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	40022000 	.word	0x40022000
 8001068:	20000188 	.word	0x20000188

0800106c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800106c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800106e:	464f      	mov	r7, r9
 8001070:	4646      	mov	r6, r8
 8001072:	46d6      	mov	lr, sl
 8001074:	b5c0      	push	{r6, r7, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t address = 0U;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001076:	4f2f      	ldr	r7, [pc, #188]	; (8001134 <HAL_FLASHEx_Erase+0xc8>)
{
 8001078:	0006      	movs	r6, r0
  __HAL_LOCK(&pFlash);
 800107a:	7e3b      	ldrb	r3, [r7, #24]
{
 800107c:	4689      	mov	r9, r1
  __HAL_LOCK(&pFlash);
 800107e:	2002      	movs	r0, #2
 8001080:	2b01      	cmp	r3, #1
 8001082:	d041      	beq.n	8001108 <HAL_FLASHEx_Erase+0x9c>
 8001084:	2301      	movs	r3, #1
 8001086:	763b      	strb	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001088:	6833      	ldr	r3, [r6, #0]
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800108a:	482b      	ldr	r0, [pc, #172]	; (8001138 <HAL_FLASHEx_Erase+0xcc>)
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800108c:	2b01      	cmp	r3, #1
 800108e:	d034      	beq.n	80010fa <HAL_FLASHEx_Erase+0x8e>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001090:	f7ff ffa2 	bl	8000fd8 <FLASH_WaitForLastOperation>
 8001094:	2800      	cmp	r0, #0
 8001096:	d134      	bne.n	8001102 <HAL_FLASHEx_Erase+0x96>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001098:	2301      	movs	r3, #1
 800109a:	464a      	mov	r2, r9
 800109c:	425b      	negs	r3, r3
 800109e:	6013      	str	r3, [r2, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80010a0:	68b3      	ldr	r3, [r6, #8]
        for(address = pEraseInit->PageAddress;
 80010a2:	6875      	ldr	r5, [r6, #4]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80010a4:	029b      	lsls	r3, r3, #10
 80010a6:	195b      	adds	r3, r3, r5
        for(address = pEraseInit->PageAddress;
 80010a8:	429d      	cmp	r5, r3
 80010aa:	d22a      	bcs.n	8001102 <HAL_FLASHEx_Erase+0x96>
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80010ac:	2300      	movs	r3, #0

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80010ae:	4c23      	ldr	r4, [pc, #140]	; (800113c <HAL_FLASHEx_Erase+0xd0>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80010b0:	4698      	mov	r8, r3
 80010b2:	e00a      	b.n	80010ca <HAL_FLASHEx_Erase+0x5e>
            address += FLASH_PAGE_SIZE)
 80010b4:	2380      	movs	r3, #128	; 0x80
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	469c      	mov	ip, r3
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80010ba:	6872      	ldr	r2, [r6, #4]
            address += FLASH_PAGE_SIZE)
 80010bc:	4465      	add	r5, ip
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80010be:	4694      	mov	ip, r2
 80010c0:	68b3      	ldr	r3, [r6, #8]
 80010c2:	029b      	lsls	r3, r3, #10
 80010c4:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 80010c6:	42ab      	cmp	r3, r5
 80010c8:	d91c      	bls.n	8001104 <HAL_FLASHEx_Erase+0x98>
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80010ca:	2202      	movs	r2, #2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80010cc:	4643      	mov	r3, r8
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80010ce:	4692      	mov	sl, r2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80010d0:	61fb      	str	r3, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80010d2:	6923      	ldr	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80010d4:	4818      	ldr	r0, [pc, #96]	; (8001138 <HAL_FLASHEx_Erase+0xcc>)
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80010d6:	4313      	orrs	r3, r2
 80010d8:	6123      	str	r3, [r4, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80010da:	6165      	str	r5, [r4, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80010dc:	6923      	ldr	r3, [r4, #16]
 80010de:	323e      	adds	r2, #62	; 0x3e
 80010e0:	4313      	orrs	r3, r2
 80010e2:	6123      	str	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80010e4:	f7ff ff78 	bl	8000fd8 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80010e8:	4652      	mov	r2, sl
 80010ea:	6923      	ldr	r3, [r4, #16]
 80010ec:	4393      	bics	r3, r2
 80010ee:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 80010f0:	2800      	cmp	r0, #0
 80010f2:	d0df      	beq.n	80010b4 <HAL_FLASHEx_Erase+0x48>
            *PageError = address;
 80010f4:	464b      	mov	r3, r9
 80010f6:	601d      	str	r5, [r3, #0]
            break;
 80010f8:	e004      	b.n	8001104 <HAL_FLASHEx_Erase+0x98>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80010fa:	f7ff ff6d 	bl	8000fd8 <FLASH_WaitForLastOperation>
 80010fe:	2800      	cmp	r0, #0
 8001100:	d007      	beq.n	8001112 <HAL_FLASHEx_Erase+0xa6>
  HAL_StatusTypeDef status = HAL_ERROR;
 8001102:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8001104:	2300      	movs	r3, #0
 8001106:	763b      	strb	r3, [r7, #24]
}
 8001108:	bc1c      	pop	{r2, r3, r4}
 800110a:	4690      	mov	r8, r2
 800110c:	4699      	mov	r9, r3
 800110e:	46a2      	mov	sl, r4
 8001110:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001112:	2504      	movs	r5, #4
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001114:	2240      	movs	r2, #64	; 0x40
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001116:	4c09      	ldr	r4, [pc, #36]	; (800113c <HAL_FLASHEx_Erase+0xd0>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001118:	61f8      	str	r0, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800111a:	6923      	ldr	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800111c:	4806      	ldr	r0, [pc, #24]	; (8001138 <HAL_FLASHEx_Erase+0xcc>)
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800111e:	432b      	orrs	r3, r5
 8001120:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001122:	6923      	ldr	r3, [r4, #16]
 8001124:	4313      	orrs	r3, r2
 8001126:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001128:	f7ff ff56 	bl	8000fd8 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800112c:	6923      	ldr	r3, [r4, #16]
 800112e:	43ab      	bics	r3, r5
 8001130:	6123      	str	r3, [r4, #16]
 8001132:	e7e7      	b.n	8001104 <HAL_FLASHEx_Erase+0x98>
 8001134:	20000188 	.word	0x20000188
 8001138:	0000c350 	.word	0x0000c350
 800113c:	40022000 	.word	0x40022000

08001140 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001142:	46de      	mov	lr, fp
 8001144:	4657      	mov	r7, sl
 8001146:	464e      	mov	r6, r9
 8001148:	4645      	mov	r5, r8
 800114a:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800114c:	680b      	ldr	r3, [r1, #0]
{ 
 800114e:	b085      	sub	sp, #20
 8001150:	468b      	mov	fp, r1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001152:	469c      	mov	ip, r3
 8001154:	2200      	movs	r2, #0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d100      	bne.n	800115c <HAL_GPIO_Init+0x1c>
 800115a:	e0b7      	b.n	80012cc <HAL_GPIO_Init+0x18c>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115c:	4b64      	ldr	r3, [pc, #400]	; (80012f0 <HAL_GPIO_Init+0x1b0>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800115e:	46e1      	mov	r9, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001160:	469a      	mov	sl, r3
        temp = EXTI->IMR;
 8001162:	4b64      	ldr	r3, [pc, #400]	; (80012f4 <HAL_GPIO_Init+0x1b4>)
 8001164:	4698      	mov	r8, r3
 8001166:	e067      	b.n	8001238 <HAL_GPIO_Init+0xf8>
      temp = GPIOx->MODER;
 8001168:	6803      	ldr	r3, [r0, #0]
 800116a:	0056      	lsls	r6, r2, #1
 800116c:	469c      	mov	ip, r3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 800116e:	2303      	movs	r3, #3
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001170:	2703      	movs	r7, #3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8001172:	40b3      	lsls	r3, r6
 8001174:	4664      	mov	r4, ip
 8001176:	43db      	mvns	r3, r3
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001178:	400f      	ands	r7, r1
 800117a:	40b7      	lsls	r7, r6
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 800117c:	401c      	ands	r4, r3
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800117e:	433c      	orrs	r4, r7
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001180:	9f01      	ldr	r7, [sp, #4]
      GPIOx->MODER = temp;
 8001182:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001184:	3f01      	subs	r7, #1
 8001186:	2f01      	cmp	r7, #1
 8001188:	d800      	bhi.n	800118c <HAL_GPIO_Init+0x4c>
 800118a:	e081      	b.n	8001290 <HAL_GPIO_Init+0x150>
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800118c:	465c      	mov	r4, fp
      temp = GPIOx->PUPDR;
 800118e:	68c5      	ldr	r5, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001190:	402b      	ands	r3, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8001192:	68a5      	ldr	r5, [r4, #8]
 8001194:	40b5      	lsls	r5, r6
 8001196:	432b      	orrs	r3, r5
      GPIOx->PUPDR = temp;
 8001198:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800119a:	2380      	movs	r3, #128	; 0x80
 800119c:	055b      	lsls	r3, r3, #21
 800119e:	4219      	tst	r1, r3
 80011a0:	d046      	beq.n	8001230 <HAL_GPIO_Init+0xf0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a2:	4653      	mov	r3, sl
 80011a4:	2401      	movs	r4, #1
 80011a6:	699b      	ldr	r3, [r3, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80011a8:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011aa:	4323      	orrs	r3, r4
 80011ac:	4654      	mov	r4, sl
 80011ae:	61a3      	str	r3, [r4, #24]
 80011b0:	69a3      	ldr	r3, [r4, #24]
 80011b2:	2401      	movs	r4, #1
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80011b4:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b6:	4023      	ands	r3, r4
 80011b8:	4c4f      	ldr	r4, [pc, #316]	; (80012f8 <HAL_GPIO_Init+0x1b8>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80011ba:	4016      	ands	r6, r2
 80011bc:	46a4      	mov	ip, r4
 80011be:	00b6      	lsls	r6, r6, #2
 80011c0:	40b7      	lsls	r7, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011c2:	2490      	movs	r4, #144	; 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c4:	9303      	str	r3, [sp, #12]
 80011c6:	9b03      	ldr	r3, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 80011c8:	0893      	lsrs	r3, r2, #2
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	4463      	add	r3, ip
 80011ce:	689d      	ldr	r5, [r3, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011d0:	05e4      	lsls	r4, r4, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80011d2:	43bd      	bics	r5, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011d4:	42a0      	cmp	r0, r4
 80011d6:	d100      	bne.n	80011da <HAL_GPIO_Init+0x9a>
 80011d8:	e07f      	b.n	80012da <HAL_GPIO_Init+0x19a>
 80011da:	4f48      	ldr	r7, [pc, #288]	; (80012fc <HAL_GPIO_Init+0x1bc>)
 80011dc:	42b8      	cmp	r0, r7
 80011de:	d100      	bne.n	80011e2 <HAL_GPIO_Init+0xa2>
 80011e0:	e07d      	b.n	80012de <HAL_GPIO_Init+0x19e>
 80011e2:	4f47      	ldr	r7, [pc, #284]	; (8001300 <HAL_GPIO_Init+0x1c0>)
 80011e4:	42b8      	cmp	r0, r7
 80011e6:	d100      	bne.n	80011ea <HAL_GPIO_Init+0xaa>
 80011e8:	e07c      	b.n	80012e4 <HAL_GPIO_Init+0x1a4>
 80011ea:	4f46      	ldr	r7, [pc, #280]	; (8001304 <HAL_GPIO_Init+0x1c4>)
 80011ec:	42b8      	cmp	r0, r7
 80011ee:	d100      	bne.n	80011f2 <HAL_GPIO_Init+0xb2>
 80011f0:	e07b      	b.n	80012ea <HAL_GPIO_Init+0x1aa>
 80011f2:	2705      	movs	r7, #5
 80011f4:	40b7      	lsls	r7, r6
 80011f6:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 80011f8:	609d      	str	r5, [r3, #8]
        temp = EXTI->IMR;
 80011fa:	4643      	mov	r3, r8
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80011fc:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->IMR;
 80011fe:	681b      	ldr	r3, [r3, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001200:	43e5      	mvns	r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001202:	03cc      	lsls	r4, r1, #15
 8001204:	d45f      	bmi.n	80012c6 <HAL_GPIO_Init+0x186>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001206:	402b      	ands	r3, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 8001208:	4644      	mov	r4, r8
 800120a:	6023      	str	r3, [r4, #0]

        temp = EXTI->EMR;
 800120c:	6863      	ldr	r3, [r4, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800120e:	038c      	lsls	r4, r1, #14
 8001210:	d456      	bmi.n	80012c0 <HAL_GPIO_Init+0x180>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8001212:	402b      	ands	r3, r5
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 8001214:	4644      	mov	r4, r8
 8001216:	6063      	str	r3, [r4, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001218:	68a3      	ldr	r3, [r4, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800121a:	02cc      	lsls	r4, r1, #11
 800121c:	d44d      	bmi.n	80012ba <HAL_GPIO_Init+0x17a>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800121e:	402b      	ands	r3, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 8001220:	4644      	mov	r4, r8
 8001222:	60a3      	str	r3, [r4, #8]

        temp = EXTI->FTSR;
 8001224:	68e3      	ldr	r3, [r4, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001226:	0289      	lsls	r1, r1, #10
 8001228:	d444      	bmi.n	80012b4 <HAL_GPIO_Init+0x174>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800122a:	402b      	ands	r3, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 800122c:	4641      	mov	r1, r8
 800122e:	60cb      	str	r3, [r1, #12]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001230:	464b      	mov	r3, r9
      }
    }
    
    position++;
 8001232:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001234:	40d3      	lsrs	r3, r2
 8001236:	d049      	beq.n	80012cc <HAL_GPIO_Init+0x18c>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001238:	2501      	movs	r5, #1
 800123a:	464c      	mov	r4, r9
 800123c:	4095      	lsls	r5, r2
 800123e:	402c      	ands	r4, r5
 8001240:	9400      	str	r4, [sp, #0]
    if(iocurrent)
 8001242:	d0f5      	beq.n	8001230 <HAL_GPIO_Init+0xf0>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001244:	465b      	mov	r3, fp
 8001246:	6859      	ldr	r1, [r3, #4]
 8001248:	2310      	movs	r3, #16
 800124a:	000f      	movs	r7, r1
 800124c:	439f      	bics	r7, r3
 800124e:	003b      	movs	r3, r7
 8001250:	9701      	str	r7, [sp, #4]
 8001252:	2f02      	cmp	r7, #2
 8001254:	d188      	bne.n	8001168 <HAL_GPIO_Init+0x28>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8001256:	240f      	movs	r4, #15
 8001258:	3305      	adds	r3, #5
 800125a:	4013      	ands	r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	409c      	lsls	r4, r3
        temp = GPIOx->AFR[position >> 3];
 8001260:	08d6      	lsrs	r6, r2, #3
 8001262:	00b6      	lsls	r6, r6, #2
 8001264:	1986      	adds	r6, r0, r6
 8001266:	6a37      	ldr	r7, [r6, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8001268:	43a7      	bics	r7, r4
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 800126a:	465c      	mov	r4, fp
 800126c:	6924      	ldr	r4, [r4, #16]
 800126e:	409c      	lsls	r4, r3
 8001270:	0023      	movs	r3, r4
 8001272:	433b      	orrs	r3, r7
        GPIOx->AFR[position >> 3U] = temp;
 8001274:	6233      	str	r3, [r6, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8001276:	2303      	movs	r3, #3
 8001278:	0056      	lsls	r6, r2, #1
 800127a:	40b3      	lsls	r3, r6
 800127c:	43db      	mvns	r3, r3
      temp = GPIOx->MODER;
 800127e:	6807      	ldr	r7, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8001280:	401f      	ands	r7, r3
 8001282:	46bc      	mov	ip, r7
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001284:	2703      	movs	r7, #3
 8001286:	400f      	ands	r7, r1
 8001288:	40b7      	lsls	r7, r6
 800128a:	4664      	mov	r4, ip
 800128c:	4327      	orrs	r7, r4
      GPIOx->MODER = temp;
 800128e:	6007      	str	r7, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 8001290:	6887      	ldr	r7, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8001292:	465c      	mov	r4, fp
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001294:	401f      	ands	r7, r3
 8001296:	46bc      	mov	ip, r7
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8001298:	68e7      	ldr	r7, [r4, #12]
 800129a:	4664      	mov	r4, ip
 800129c:	40b7      	lsls	r7, r6
 800129e:	4327      	orrs	r7, r4
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012a0:	2401      	movs	r4, #1
        GPIOx->OSPEEDR = temp;
 80012a2:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80012a4:	6847      	ldr	r7, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80012a6:	43af      	bics	r7, r5
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012a8:	090d      	lsrs	r5, r1, #4
 80012aa:	4025      	ands	r5, r4
 80012ac:	4095      	lsls	r5, r2
 80012ae:	433d      	orrs	r5, r7
        GPIOx->OTYPER = temp;
 80012b0:	6045      	str	r5, [r0, #4]
 80012b2:	e76b      	b.n	800118c <HAL_GPIO_Init+0x4c>
          SET_BIT(temp, iocurrent); 
 80012b4:	9900      	ldr	r1, [sp, #0]
 80012b6:	430b      	orrs	r3, r1
 80012b8:	e7b8      	b.n	800122c <HAL_GPIO_Init+0xec>
          SET_BIT(temp, iocurrent); 
 80012ba:	9c00      	ldr	r4, [sp, #0]
 80012bc:	4323      	orrs	r3, r4
 80012be:	e7af      	b.n	8001220 <HAL_GPIO_Init+0xe0>
          SET_BIT(temp, iocurrent); 
 80012c0:	9c00      	ldr	r4, [sp, #0]
 80012c2:	4323      	orrs	r3, r4
 80012c4:	e7a6      	b.n	8001214 <HAL_GPIO_Init+0xd4>
          SET_BIT(temp, iocurrent); 
 80012c6:	9c00      	ldr	r4, [sp, #0]
 80012c8:	4323      	orrs	r3, r4
 80012ca:	e79d      	b.n	8001208 <HAL_GPIO_Init+0xc8>
  } 
}
 80012cc:	b005      	add	sp, #20
 80012ce:	bc3c      	pop	{r2, r3, r4, r5}
 80012d0:	4690      	mov	r8, r2
 80012d2:	4699      	mov	r9, r3
 80012d4:	46a2      	mov	sl, r4
 80012d6:	46ab      	mov	fp, r5
 80012d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012da:	2700      	movs	r7, #0
 80012dc:	e78b      	b.n	80011f6 <HAL_GPIO_Init+0xb6>
 80012de:	2701      	movs	r7, #1
 80012e0:	40b7      	lsls	r7, r6
 80012e2:	e788      	b.n	80011f6 <HAL_GPIO_Init+0xb6>
 80012e4:	2702      	movs	r7, #2
 80012e6:	40b7      	lsls	r7, r6
 80012e8:	e785      	b.n	80011f6 <HAL_GPIO_Init+0xb6>
 80012ea:	2703      	movs	r7, #3
 80012ec:	40b7      	lsls	r7, r6
 80012ee:	e782      	b.n	80011f6 <HAL_GPIO_Init+0xb6>
 80012f0:	40021000 	.word	0x40021000
 80012f4:	40010400 	.word	0x40010400
 80012f8:	40010000 	.word	0x40010000
 80012fc:	48000400 	.word	0x48000400
 8001300:	48000800 	.word	0x48000800
 8001304:	48000c00 	.word	0x48000c00

08001308 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001308:	6900      	ldr	r0, [r0, #16]
 800130a:	4008      	ands	r0, r1
 800130c:	1e41      	subs	r1, r0, #1
 800130e:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8001310:	b2c0      	uxtb	r0, r0
  }
 8001312:	4770      	bx	lr

08001314 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001314:	b570      	push	{r4, r5, r6, lr}
 8001316:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 8001318:	d01e      	beq.n	8001358 <HAL_IWDG_Init+0x44>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 800131a:	6803      	ldr	r3, [r0, #0]
 800131c:	4a11      	ldr	r2, [pc, #68]	; (8001364 <HAL_IWDG_Init+0x50>)
 800131e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001320:	4a11      	ldr	r2, [pc, #68]	; (8001368 <HAL_IWDG_Init+0x54>)
 8001322:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001324:	6842      	ldr	r2, [r0, #4]
 8001326:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001328:	6882      	ldr	r2, [r0, #8]
 800132a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800132c:	f7ff f88c 	bl	8000448 <HAL_GetTick>
 8001330:	0005      	movs	r5, r0

   /* Wait for register to be updated */
  while(hiwdg->Instance->SR != RESET)
 8001332:	e004      	b.n	800133e <HAL_IWDG_Init+0x2a>
  {
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001334:	f7ff f888 	bl	8000448 <HAL_GetTick>
 8001338:	1b40      	subs	r0, r0, r5
 800133a:	2827      	cmp	r0, #39	; 0x27
 800133c:	d80a      	bhi.n	8001354 <HAL_IWDG_Init+0x40>
  while(hiwdg->Instance->SR != RESET)
 800133e:	6823      	ldr	r3, [r4, #0]
 8001340:	68da      	ldr	r2, [r3, #12]
 8001342:	2a00      	cmp	r2, #0
 8001344:	d1f6      	bne.n	8001334 <HAL_IWDG_Init+0x20>
    }
  }

  /* If window parameter is different than current value, modify window 
  register */
  if(hiwdg->Instance->WINR != hiwdg->Init.Window)
 8001346:	6919      	ldr	r1, [r3, #16]
 8001348:	68e2      	ldr	r2, [r4, #12]
 800134a:	4291      	cmp	r1, r2
 800134c:	d006      	beq.n	800135c <HAL_IWDG_Init+0x48>
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
  }

  /* Return function status */
  return HAL_OK;
 800134e:	2000      	movs	r0, #0
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8001350:	611a      	str	r2, [r3, #16]
}
 8001352:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 8001354:	2003      	movs	r0, #3
 8001356:	e7fc      	b.n	8001352 <HAL_IWDG_Init+0x3e>
    return HAL_ERROR;
 8001358:	2001      	movs	r0, #1
 800135a:	e7fa      	b.n	8001352 <HAL_IWDG_Init+0x3e>
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800135c:	4a03      	ldr	r2, [pc, #12]	; (800136c <HAL_IWDG_Init+0x58>)
  return HAL_OK;
 800135e:	2000      	movs	r0, #0
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	e7f6      	b.n	8001352 <HAL_IWDG_Init+0x3e>
 8001364:	0000cccc 	.word	0x0000cccc
 8001368:	00005555 	.word	0x00005555
 800136c:	0000aaaa 	.word	0x0000aaaa

08001370 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001370:	6803      	ldr	r3, [r0, #0]
 8001372:	4a02      	ldr	r2, [pc, #8]	; (800137c <HAL_IWDG_Refresh+0xc>)

  /* Return function status */
  return HAL_OK;
}
 8001374:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001376:	601a      	str	r2, [r3, #0]
}
 8001378:	4770      	bx	lr
 800137a:	46c0      	nop			; (mov r8, r8)
 800137c:	0000aaaa 	.word	0x0000aaaa

08001380 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001382:	46ce      	mov	lr, r9
 8001384:	4647      	mov	r7, r8
 8001386:	b580      	push	{r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001388:	6803      	ldr	r3, [r0, #0]
{
 800138a:	b083      	sub	sp, #12
 800138c:	0004      	movs	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800138e:	07da      	lsls	r2, r3, #31
 8001390:	d52f      	bpl.n	80013f2 <HAL_RCC_OscConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001392:	220c      	movs	r2, #12
 8001394:	48c4      	ldr	r0, [pc, #784]	; (80016a8 <HAL_RCC_OscConfig+0x328>)
 8001396:	6841      	ldr	r1, [r0, #4]
 8001398:	4011      	ands	r1, r2
 800139a:	2904      	cmp	r1, #4
 800139c:	d100      	bne.n	80013a0 <HAL_RCC_OscConfig+0x20>
 800139e:	e110      	b.n	80015c2 <HAL_RCC_OscConfig+0x242>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013a0:	6841      	ldr	r1, [r0, #4]
 80013a2:	400a      	ands	r2, r1
 80013a4:	2a08      	cmp	r2, #8
 80013a6:	d100      	bne.n	80013aa <HAL_RCC_OscConfig+0x2a>
 80013a8:	e107      	b.n	80015ba <HAL_RCC_OscConfig+0x23a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013aa:	6863      	ldr	r3, [r4, #4]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d100      	bne.n	80013b2 <HAL_RCC_OscConfig+0x32>
 80013b0:	e186      	b.n	80016c0 <HAL_RCC_OscConfig+0x340>
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d100      	bne.n	80013b8 <HAL_RCC_OscConfig+0x38>
 80013b6:	e11a      	b.n	80015ee <HAL_RCC_OscConfig+0x26e>
 80013b8:	2b05      	cmp	r3, #5
 80013ba:	d100      	bne.n	80013be <HAL_RCC_OscConfig+0x3e>
 80013bc:	e1db      	b.n	8001776 <HAL_RCC_OscConfig+0x3f6>
 80013be:	4bba      	ldr	r3, [pc, #744]	; (80016a8 <HAL_RCC_OscConfig+0x328>)
 80013c0:	49ba      	ldr	r1, [pc, #744]	; (80016ac <HAL_RCC_OscConfig+0x32c>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	400a      	ands	r2, r1
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	49b9      	ldr	r1, [pc, #740]	; (80016b0 <HAL_RCC_OscConfig+0x330>)
 80013cc:	400a      	ands	r2, r1
 80013ce:	601a      	str	r2, [r3, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d0:	f7ff f83a 	bl	8000448 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d4:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 80013d6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d8:	4eb3      	ldr	r6, [pc, #716]	; (80016a8 <HAL_RCC_OscConfig+0x328>)
 80013da:	02ad      	lsls	r5, r5, #10
 80013dc:	e005      	b.n	80013ea <HAL_RCC_OscConfig+0x6a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013de:	f7ff f833 	bl	8000448 <HAL_GetTick>
 80013e2:	1bc0      	subs	r0, r0, r7
 80013e4:	2864      	cmp	r0, #100	; 0x64
 80013e6:	d900      	bls.n	80013ea <HAL_RCC_OscConfig+0x6a>
 80013e8:	e12f      	b.n	800164a <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ea:	6833      	ldr	r3, [r6, #0]
 80013ec:	422b      	tst	r3, r5
 80013ee:	d0f6      	beq.n	80013de <HAL_RCC_OscConfig+0x5e>
 80013f0:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013f2:	079a      	lsls	r2, r3, #30
 80013f4:	d529      	bpl.n	800144a <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80013f6:	220c      	movs	r2, #12
 80013f8:	49ab      	ldr	r1, [pc, #684]	; (80016a8 <HAL_RCC_OscConfig+0x328>)
 80013fa:	6848      	ldr	r0, [r1, #4]
 80013fc:	4202      	tst	r2, r0
 80013fe:	d100      	bne.n	8001402 <HAL_RCC_OscConfig+0x82>
 8001400:	e0bf      	b.n	8001582 <HAL_RCC_OscConfig+0x202>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001402:	6848      	ldr	r0, [r1, #4]
 8001404:	4002      	ands	r2, r0
 8001406:	2a08      	cmp	r2, #8
 8001408:	d100      	bne.n	800140c <HAL_RCC_OscConfig+0x8c>
 800140a:	e0b6      	b.n	800157a <HAL_RCC_OscConfig+0x1fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800140c:	68e3      	ldr	r3, [r4, #12]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800140e:	4da6      	ldr	r5, [pc, #664]	; (80016a8 <HAL_RCC_OscConfig+0x328>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001410:	2b00      	cmp	r3, #0
 8001412:	d100      	bne.n	8001416 <HAL_RCC_OscConfig+0x96>
 8001414:	e134      	b.n	8001680 <HAL_RCC_OscConfig+0x300>
        __HAL_RCC_HSI_ENABLE();
 8001416:	2201      	movs	r2, #1
 8001418:	682b      	ldr	r3, [r5, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800141a:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 800141c:	4313      	orrs	r3, r2
 800141e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001420:	f7ff f812 	bl	8000448 <HAL_GetTick>
 8001424:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001426:	e005      	b.n	8001434 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001428:	f7ff f80e 	bl	8000448 <HAL_GetTick>
 800142c:	1bc0      	subs	r0, r0, r7
 800142e:	2802      	cmp	r0, #2
 8001430:	d900      	bls.n	8001434 <HAL_RCC_OscConfig+0xb4>
 8001432:	e10a      	b.n	800164a <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001434:	682b      	ldr	r3, [r5, #0]
 8001436:	421e      	tst	r6, r3
 8001438:	d0f6      	beq.n	8001428 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800143a:	21f8      	movs	r1, #248	; 0xf8
 800143c:	682a      	ldr	r2, [r5, #0]
 800143e:	6923      	ldr	r3, [r4, #16]
 8001440:	438a      	bics	r2, r1
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	4313      	orrs	r3, r2
 8001446:	602b      	str	r3, [r5, #0]
 8001448:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800144a:	071a      	lsls	r2, r3, #28
 800144c:	d500      	bpl.n	8001450 <HAL_RCC_OscConfig+0xd0>
 800144e:	e07d      	b.n	800154c <HAL_RCC_OscConfig+0x1cc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001450:	075a      	lsls	r2, r3, #29
 8001452:	d540      	bpl.n	80014d6 <HAL_RCC_OscConfig+0x156>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001454:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001456:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001458:	4b93      	ldr	r3, [pc, #588]	; (80016a8 <HAL_RCC_OscConfig+0x328>)
 800145a:	0552      	lsls	r2, r2, #21
 800145c:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 800145e:	4680      	mov	r8, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001460:	4211      	tst	r1, r2
 8001462:	d108      	bne.n	8001476 <HAL_RCC_OscConfig+0xf6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001464:	69d9      	ldr	r1, [r3, #28]
 8001466:	4311      	orrs	r1, r2
 8001468:	61d9      	str	r1, [r3, #28]
 800146a:	69db      	ldr	r3, [r3, #28]
 800146c:	401a      	ands	r2, r3
 800146e:	9201      	str	r2, [sp, #4]
 8001470:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001472:	2301      	movs	r3, #1
 8001474:	4698      	mov	r8, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001476:	2780      	movs	r7, #128	; 0x80
 8001478:	4e8e      	ldr	r6, [pc, #568]	; (80016b4 <HAL_RCC_OscConfig+0x334>)
 800147a:	007f      	lsls	r7, r7, #1
 800147c:	6833      	ldr	r3, [r6, #0]
 800147e:	423b      	tst	r3, r7
 8001480:	d100      	bne.n	8001484 <HAL_RCC_OscConfig+0x104>
 8001482:	e0cd      	b.n	8001620 <HAL_RCC_OscConfig+0x2a0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001484:	68a3      	ldr	r3, [r4, #8]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d100      	bne.n	800148c <HAL_RCC_OscConfig+0x10c>
 800148a:	e0d9      	b.n	8001640 <HAL_RCC_OscConfig+0x2c0>
 800148c:	2b00      	cmp	r3, #0
 800148e:	d100      	bne.n	8001492 <HAL_RCC_OscConfig+0x112>
 8001490:	e0dd      	b.n	800164e <HAL_RCC_OscConfig+0x2ce>
 8001492:	2b05      	cmp	r3, #5
 8001494:	d100      	bne.n	8001498 <HAL_RCC_OscConfig+0x118>
 8001496:	e198      	b.n	80017ca <HAL_RCC_OscConfig+0x44a>
 8001498:	2101      	movs	r1, #1
 800149a:	4b83      	ldr	r3, [pc, #524]	; (80016a8 <HAL_RCC_OscConfig+0x328>)
 800149c:	6a1a      	ldr	r2, [r3, #32]
 800149e:	438a      	bics	r2, r1
 80014a0:	621a      	str	r2, [r3, #32]
 80014a2:	6a1a      	ldr	r2, [r3, #32]
 80014a4:	3103      	adds	r1, #3
 80014a6:	438a      	bics	r2, r1
 80014a8:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014aa:	f7fe ffcd 	bl	8000448 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ae:	4f7e      	ldr	r7, [pc, #504]	; (80016a8 <HAL_RCC_OscConfig+0x328>)
      tickstart = HAL_GetTick();
 80014b0:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014b2:	2602      	movs	r6, #2
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014b4:	4d80      	ldr	r5, [pc, #512]	; (80016b8 <HAL_RCC_OscConfig+0x338>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014b6:	e006      	b.n	80014c6 <HAL_RCC_OscConfig+0x146>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014b8:	f7fe ffc6 	bl	8000448 <HAL_GetTick>
 80014bc:	464b      	mov	r3, r9
 80014be:	1ac0      	subs	r0, r0, r3
 80014c0:	42a8      	cmp	r0, r5
 80014c2:	d900      	bls.n	80014c6 <HAL_RCC_OscConfig+0x146>
 80014c4:	e0c1      	b.n	800164a <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014c6:	6a3b      	ldr	r3, [r7, #32]
 80014c8:	421e      	tst	r6, r3
 80014ca:	d0f5      	beq.n	80014b8 <HAL_RCC_OscConfig+0x138>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80014cc:	4643      	mov	r3, r8
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d100      	bne.n	80014d4 <HAL_RCC_OscConfig+0x154>
 80014d2:	e113      	b.n	80016fc <HAL_RCC_OscConfig+0x37c>
 80014d4:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80014d6:	06db      	lsls	r3, r3, #27
 80014d8:	d512      	bpl.n	8001500 <HAL_RCC_OscConfig+0x180>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80014da:	6963      	ldr	r3, [r4, #20]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d100      	bne.n	80014e2 <HAL_RCC_OscConfig+0x162>
 80014e0:	e155      	b.n	800178e <HAL_RCC_OscConfig+0x40e>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80014e2:	3305      	adds	r3, #5
 80014e4:	d000      	beq.n	80014e8 <HAL_RCC_OscConfig+0x168>
 80014e6:	e0f2      	b.n	80016ce <HAL_RCC_OscConfig+0x34e>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80014e8:	2104      	movs	r1, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80014ea:	20f8      	movs	r0, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 80014ec:	4a6e      	ldr	r2, [pc, #440]	; (80016a8 <HAL_RCC_OscConfig+0x328>)
 80014ee:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80014f0:	438b      	bics	r3, r1
 80014f2:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80014f4:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80014f6:	69a3      	ldr	r3, [r4, #24]
 80014f8:	4381      	bics	r1, r0
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	430b      	orrs	r3, r1
 80014fe:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001500:	6a23      	ldr	r3, [r4, #32]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d01c      	beq.n	8001540 <HAL_RCC_OscConfig+0x1c0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001506:	220c      	movs	r2, #12
 8001508:	4d67      	ldr	r5, [pc, #412]	; (80016a8 <HAL_RCC_OscConfig+0x328>)
 800150a:	6869      	ldr	r1, [r5, #4]
 800150c:	400a      	ands	r2, r1
 800150e:	2a08      	cmp	r2, #8
 8001510:	d03e      	beq.n	8001590 <HAL_RCC_OscConfig+0x210>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001512:	2b02      	cmp	r3, #2
 8001514:	d100      	bne.n	8001518 <HAL_RCC_OscConfig+0x198>
 8001516:	e0f8      	b.n	800170a <HAL_RCC_OscConfig+0x38a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001518:	682b      	ldr	r3, [r5, #0]
 800151a:	4a68      	ldr	r2, [pc, #416]	; (80016bc <HAL_RCC_OscConfig+0x33c>)
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800151c:	002c      	movs	r4, r5
        __HAL_RCC_PLL_DISABLE();
 800151e:	4013      	ands	r3, r2
 8001520:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001522:	f7fe ff91 	bl	8000448 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001526:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8001528:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800152a:	04ad      	lsls	r5, r5, #18
 800152c:	e005      	b.n	800153a <HAL_RCC_OscConfig+0x1ba>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800152e:	f7fe ff8b 	bl	8000448 <HAL_GetTick>
 8001532:	1b80      	subs	r0, r0, r6
 8001534:	2802      	cmp	r0, #2
 8001536:	d900      	bls.n	800153a <HAL_RCC_OscConfig+0x1ba>
 8001538:	e087      	b.n	800164a <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800153a:	6823      	ldr	r3, [r4, #0]
 800153c:	422b      	tst	r3, r5
 800153e:	d1f6      	bne.n	800152e <HAL_RCC_OscConfig+0x1ae>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001540:	2000      	movs	r0, #0
}
 8001542:	b003      	add	sp, #12
 8001544:	bc0c      	pop	{r2, r3}
 8001546:	4690      	mov	r8, r2
 8001548:	4699      	mov	r9, r3
 800154a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800154c:	69e3      	ldr	r3, [r4, #28]
      __HAL_RCC_LSI_ENABLE();
 800154e:	4d56      	ldr	r5, [pc, #344]	; (80016a8 <HAL_RCC_OscConfig+0x328>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001550:	2b00      	cmp	r3, #0
 8001552:	d01f      	beq.n	8001594 <HAL_RCC_OscConfig+0x214>
      __HAL_RCC_LSI_ENABLE();
 8001554:	2201      	movs	r2, #1
 8001556:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001558:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 800155a:	4313      	orrs	r3, r2
 800155c:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 800155e:	f7fe ff73 	bl	8000448 <HAL_GetTick>
 8001562:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001564:	e004      	b.n	8001570 <HAL_RCC_OscConfig+0x1f0>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001566:	f7fe ff6f 	bl	8000448 <HAL_GetTick>
 800156a:	1bc0      	subs	r0, r0, r7
 800156c:	2802      	cmp	r0, #2
 800156e:	d86c      	bhi.n	800164a <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001570:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001572:	421e      	tst	r6, r3
 8001574:	d0f7      	beq.n	8001566 <HAL_RCC_OscConfig+0x1e6>
 8001576:	6823      	ldr	r3, [r4, #0]
 8001578:	e76a      	b.n	8001450 <HAL_RCC_OscConfig+0xd0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800157a:	684a      	ldr	r2, [r1, #4]
 800157c:	03d2      	lsls	r2, r2, #15
 800157e:	d500      	bpl.n	8001582 <HAL_RCC_OscConfig+0x202>
 8001580:	e744      	b.n	800140c <HAL_RCC_OscConfig+0x8c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001582:	4a49      	ldr	r2, [pc, #292]	; (80016a8 <HAL_RCC_OscConfig+0x328>)
 8001584:	6812      	ldr	r2, [r2, #0]
 8001586:	0792      	lsls	r2, r2, #30
 8001588:	d525      	bpl.n	80015d6 <HAL_RCC_OscConfig+0x256>
 800158a:	68e2      	ldr	r2, [r4, #12]
 800158c:	2a01      	cmp	r2, #1
 800158e:	d022      	beq.n	80015d6 <HAL_RCC_OscConfig+0x256>
      return HAL_ERROR;
 8001590:	2001      	movs	r0, #1
 8001592:	e7d6      	b.n	8001542 <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_DISABLE();
 8001594:	2201      	movs	r2, #1
 8001596:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001598:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 800159a:	4393      	bics	r3, r2
 800159c:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 800159e:	f7fe ff53 	bl	8000448 <HAL_GetTick>
 80015a2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015a4:	e004      	b.n	80015b0 <HAL_RCC_OscConfig+0x230>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015a6:	f7fe ff4f 	bl	8000448 <HAL_GetTick>
 80015aa:	1bc0      	subs	r0, r0, r7
 80015ac:	2802      	cmp	r0, #2
 80015ae:	d84c      	bhi.n	800164a <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015b0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80015b2:	421e      	tst	r6, r3
 80015b4:	d1f7      	bne.n	80015a6 <HAL_RCC_OscConfig+0x226>
 80015b6:	6823      	ldr	r3, [r4, #0]
 80015b8:	e74a      	b.n	8001450 <HAL_RCC_OscConfig+0xd0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015ba:	6842      	ldr	r2, [r0, #4]
 80015bc:	03d2      	lsls	r2, r2, #15
 80015be:	d400      	bmi.n	80015c2 <HAL_RCC_OscConfig+0x242>
 80015c0:	e6f3      	b.n	80013aa <HAL_RCC_OscConfig+0x2a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c2:	4a39      	ldr	r2, [pc, #228]	; (80016a8 <HAL_RCC_OscConfig+0x328>)
 80015c4:	6812      	ldr	r2, [r2, #0]
 80015c6:	0392      	lsls	r2, r2, #14
 80015c8:	d400      	bmi.n	80015cc <HAL_RCC_OscConfig+0x24c>
 80015ca:	e712      	b.n	80013f2 <HAL_RCC_OscConfig+0x72>
 80015cc:	6862      	ldr	r2, [r4, #4]
 80015ce:	2a00      	cmp	r2, #0
 80015d0:	d000      	beq.n	80015d4 <HAL_RCC_OscConfig+0x254>
 80015d2:	e70e      	b.n	80013f2 <HAL_RCC_OscConfig+0x72>
 80015d4:	e7dc      	b.n	8001590 <HAL_RCC_OscConfig+0x210>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d6:	25f8      	movs	r5, #248	; 0xf8
 80015d8:	4833      	ldr	r0, [pc, #204]	; (80016a8 <HAL_RCC_OscConfig+0x328>)
 80015da:	6922      	ldr	r2, [r4, #16]
 80015dc:	6801      	ldr	r1, [r0, #0]
 80015de:	00d2      	lsls	r2, r2, #3
 80015e0:	43a9      	bics	r1, r5
 80015e2:	430a      	orrs	r2, r1
 80015e4:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015e6:	071a      	lsls	r2, r3, #28
 80015e8:	d400      	bmi.n	80015ec <HAL_RCC_OscConfig+0x26c>
 80015ea:	e731      	b.n	8001450 <HAL_RCC_OscConfig+0xd0>
 80015ec:	e7ae      	b.n	800154c <HAL_RCC_OscConfig+0x1cc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ee:	4d2e      	ldr	r5, [pc, #184]	; (80016a8 <HAL_RCC_OscConfig+0x328>)
 80015f0:	4a2e      	ldr	r2, [pc, #184]	; (80016ac <HAL_RCC_OscConfig+0x32c>)
 80015f2:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015f4:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015f6:	4013      	ands	r3, r2
 80015f8:	602b      	str	r3, [r5, #0]
 80015fa:	682b      	ldr	r3, [r5, #0]
 80015fc:	4a2c      	ldr	r2, [pc, #176]	; (80016b0 <HAL_RCC_OscConfig+0x330>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015fe:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001600:	4013      	ands	r3, r2
 8001602:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001604:	f7fe ff20 	bl	8000448 <HAL_GetTick>
 8001608:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800160a:	e004      	b.n	8001616 <HAL_RCC_OscConfig+0x296>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800160c:	f7fe ff1c 	bl	8000448 <HAL_GetTick>
 8001610:	1bc0      	subs	r0, r0, r7
 8001612:	2864      	cmp	r0, #100	; 0x64
 8001614:	d819      	bhi.n	800164a <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001616:	682b      	ldr	r3, [r5, #0]
 8001618:	4233      	tst	r3, r6
 800161a:	d1f7      	bne.n	800160c <HAL_RCC_OscConfig+0x28c>
 800161c:	6823      	ldr	r3, [r4, #0]
 800161e:	e6e8      	b.n	80013f2 <HAL_RCC_OscConfig+0x72>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001620:	6833      	ldr	r3, [r6, #0]
 8001622:	433b      	orrs	r3, r7
 8001624:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001626:	f7fe ff0f 	bl	8000448 <HAL_GetTick>
 800162a:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800162c:	e004      	b.n	8001638 <HAL_RCC_OscConfig+0x2b8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800162e:	f7fe ff0b 	bl	8000448 <HAL_GetTick>
 8001632:	1b40      	subs	r0, r0, r5
 8001634:	2864      	cmp	r0, #100	; 0x64
 8001636:	d808      	bhi.n	800164a <HAL_RCC_OscConfig+0x2ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001638:	6833      	ldr	r3, [r6, #0]
 800163a:	423b      	tst	r3, r7
 800163c:	d0f7      	beq.n	800162e <HAL_RCC_OscConfig+0x2ae>
 800163e:	e721      	b.n	8001484 <HAL_RCC_OscConfig+0x104>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001640:	4919      	ldr	r1, [pc, #100]	; (80016a8 <HAL_RCC_OscConfig+0x328>)
 8001642:	6a0a      	ldr	r2, [r1, #32]
 8001644:	4313      	orrs	r3, r2
 8001646:	620b      	str	r3, [r1, #32]
 8001648:	e72f      	b.n	80014aa <HAL_RCC_OscConfig+0x12a>
            return HAL_TIMEOUT;
 800164a:	2003      	movs	r0, #3
 800164c:	e779      	b.n	8001542 <HAL_RCC_OscConfig+0x1c2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800164e:	2201      	movs	r2, #1
 8001650:	4e15      	ldr	r6, [pc, #84]	; (80016a8 <HAL_RCC_OscConfig+0x328>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001652:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001654:	6a33      	ldr	r3, [r6, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001656:	4d18      	ldr	r5, [pc, #96]	; (80016b8 <HAL_RCC_OscConfig+0x338>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001658:	4393      	bics	r3, r2
 800165a:	6233      	str	r3, [r6, #32]
 800165c:	6a33      	ldr	r3, [r6, #32]
 800165e:	3203      	adds	r2, #3
 8001660:	4393      	bics	r3, r2
 8001662:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8001664:	f7fe fef0 	bl	8000448 <HAL_GetTick>
 8001668:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800166a:	e005      	b.n	8001678 <HAL_RCC_OscConfig+0x2f8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800166c:	f7fe feec 	bl	8000448 <HAL_GetTick>
 8001670:	464b      	mov	r3, r9
 8001672:	1ac0      	subs	r0, r0, r3
 8001674:	42a8      	cmp	r0, r5
 8001676:	d8e8      	bhi.n	800164a <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001678:	6a33      	ldr	r3, [r6, #32]
 800167a:	421f      	tst	r7, r3
 800167c:	d1f6      	bne.n	800166c <HAL_RCC_OscConfig+0x2ec>
 800167e:	e725      	b.n	80014cc <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_DISABLE();
 8001680:	2201      	movs	r2, #1
 8001682:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001684:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8001686:	4393      	bics	r3, r2
 8001688:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800168a:	f7fe fedd 	bl	8000448 <HAL_GetTick>
 800168e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001690:	e004      	b.n	800169c <HAL_RCC_OscConfig+0x31c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001692:	f7fe fed9 	bl	8000448 <HAL_GetTick>
 8001696:	1bc0      	subs	r0, r0, r7
 8001698:	2802      	cmp	r0, #2
 800169a:	d8d6      	bhi.n	800164a <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800169c:	682b      	ldr	r3, [r5, #0]
 800169e:	421e      	tst	r6, r3
 80016a0:	d1f7      	bne.n	8001692 <HAL_RCC_OscConfig+0x312>
 80016a2:	6823      	ldr	r3, [r4, #0]
 80016a4:	e6d1      	b.n	800144a <HAL_RCC_OscConfig+0xca>
 80016a6:	46c0      	nop			; (mov r8, r8)
 80016a8:	40021000 	.word	0x40021000
 80016ac:	fffeffff 	.word	0xfffeffff
 80016b0:	fffbffff 	.word	0xfffbffff
 80016b4:	40007000 	.word	0x40007000
 80016b8:	00001388 	.word	0x00001388
 80016bc:	feffffff 	.word	0xfeffffff
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016c0:	2380      	movs	r3, #128	; 0x80
 80016c2:	4a47      	ldr	r2, [pc, #284]	; (80017e0 <HAL_RCC_OscConfig+0x460>)
 80016c4:	025b      	lsls	r3, r3, #9
 80016c6:	6811      	ldr	r1, [r2, #0]
 80016c8:	430b      	orrs	r3, r1
 80016ca:	6013      	str	r3, [r2, #0]
 80016cc:	e680      	b.n	80013d0 <HAL_RCC_OscConfig+0x50>
      __HAL_RCC_HSI14ADC_DISABLE();
 80016ce:	2204      	movs	r2, #4
 80016d0:	4d43      	ldr	r5, [pc, #268]	; (80017e0 <HAL_RCC_OscConfig+0x460>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80016d2:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80016d4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80016d6:	4313      	orrs	r3, r2
 80016d8:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80016da:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80016dc:	3a03      	subs	r2, #3
 80016de:	4393      	bics	r3, r2
 80016e0:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80016e2:	f7fe feb1 	bl	8000448 <HAL_GetTick>
 80016e6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80016e8:	e004      	b.n	80016f4 <HAL_RCC_OscConfig+0x374>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80016ea:	f7fe fead 	bl	8000448 <HAL_GetTick>
 80016ee:	1bc0      	subs	r0, r0, r7
 80016f0:	2802      	cmp	r0, #2
 80016f2:	d8aa      	bhi.n	800164a <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80016f4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80016f6:	421e      	tst	r6, r3
 80016f8:	d1f7      	bne.n	80016ea <HAL_RCC_OscConfig+0x36a>
 80016fa:	e701      	b.n	8001500 <HAL_RCC_OscConfig+0x180>
      __HAL_RCC_PWR_CLK_DISABLE();
 80016fc:	4a38      	ldr	r2, [pc, #224]	; (80017e0 <HAL_RCC_OscConfig+0x460>)
 80016fe:	4939      	ldr	r1, [pc, #228]	; (80017e4 <HAL_RCC_OscConfig+0x464>)
 8001700:	69d3      	ldr	r3, [r2, #28]
 8001702:	400b      	ands	r3, r1
 8001704:	61d3      	str	r3, [r2, #28]
 8001706:	6823      	ldr	r3, [r4, #0]
 8001708:	e6e5      	b.n	80014d6 <HAL_RCC_OscConfig+0x156>
        __HAL_RCC_PLL_DISABLE();
 800170a:	682b      	ldr	r3, [r5, #0]
 800170c:	4a36      	ldr	r2, [pc, #216]	; (80017e8 <HAL_RCC_OscConfig+0x468>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800170e:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001710:	4013      	ands	r3, r2
 8001712:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001714:	f7fe fe98 	bl	8000448 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001718:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 800171a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800171c:	e004      	b.n	8001728 <HAL_RCC_OscConfig+0x3a8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800171e:	f7fe fe93 	bl	8000448 <HAL_GetTick>
 8001722:	1bc0      	subs	r0, r0, r7
 8001724:	2802      	cmp	r0, #2
 8001726:	d890      	bhi.n	800164a <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001728:	682b      	ldr	r3, [r5, #0]
 800172a:	4233      	tst	r3, r6
 800172c:	d1f7      	bne.n	800171e <HAL_RCC_OscConfig+0x39e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800172e:	220f      	movs	r2, #15
 8001730:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001732:	4393      	bics	r3, r2
 8001734:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001736:	4313      	orrs	r3, r2
 8001738:	62eb      	str	r3, [r5, #44]	; 0x2c
 800173a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800173c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800173e:	686a      	ldr	r2, [r5, #4]
 8001740:	430b      	orrs	r3, r1
 8001742:	492a      	ldr	r1, [pc, #168]	; (80017ec <HAL_RCC_OscConfig+0x46c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001744:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001746:	400a      	ands	r2, r1
 8001748:	4313      	orrs	r3, r2
 800174a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800174c:	2380      	movs	r3, #128	; 0x80
 800174e:	682a      	ldr	r2, [r5, #0]
 8001750:	045b      	lsls	r3, r3, #17
 8001752:	4313      	orrs	r3, r2
 8001754:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001756:	f7fe fe77 	bl	8000448 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800175a:	4d21      	ldr	r5, [pc, #132]	; (80017e0 <HAL_RCC_OscConfig+0x460>)
        tickstart = HAL_GetTick();
 800175c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800175e:	04a4      	lsls	r4, r4, #18
 8001760:	e005      	b.n	800176e <HAL_RCC_OscConfig+0x3ee>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001762:	f7fe fe71 	bl	8000448 <HAL_GetTick>
 8001766:	1b80      	subs	r0, r0, r6
 8001768:	2802      	cmp	r0, #2
 800176a:	d900      	bls.n	800176e <HAL_RCC_OscConfig+0x3ee>
 800176c:	e76d      	b.n	800164a <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800176e:	682b      	ldr	r3, [r5, #0]
 8001770:	4223      	tst	r3, r4
 8001772:	d0f6      	beq.n	8001762 <HAL_RCC_OscConfig+0x3e2>
 8001774:	e6e4      	b.n	8001540 <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001776:	2280      	movs	r2, #128	; 0x80
 8001778:	4b19      	ldr	r3, [pc, #100]	; (80017e0 <HAL_RCC_OscConfig+0x460>)
 800177a:	02d2      	lsls	r2, r2, #11
 800177c:	6819      	ldr	r1, [r3, #0]
 800177e:	430a      	orrs	r2, r1
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	2280      	movs	r2, #128	; 0x80
 8001784:	6819      	ldr	r1, [r3, #0]
 8001786:	0252      	lsls	r2, r2, #9
 8001788:	430a      	orrs	r2, r1
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	e620      	b.n	80013d0 <HAL_RCC_OscConfig+0x50>
      __HAL_RCC_HSI14ADC_DISABLE();
 800178e:	2104      	movs	r1, #4
 8001790:	4d13      	ldr	r5, [pc, #76]	; (80017e0 <HAL_RCC_OscConfig+0x460>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001792:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001794:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001796:	430a      	orrs	r2, r1
 8001798:	636a      	str	r2, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 800179a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800179c:	4313      	orrs	r3, r2
 800179e:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80017a0:	f7fe fe52 	bl	8000448 <HAL_GetTick>
 80017a4:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80017a6:	e005      	b.n	80017b4 <HAL_RCC_OscConfig+0x434>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80017a8:	f7fe fe4e 	bl	8000448 <HAL_GetTick>
 80017ac:	1bc0      	subs	r0, r0, r7
 80017ae:	2802      	cmp	r0, #2
 80017b0:	d900      	bls.n	80017b4 <HAL_RCC_OscConfig+0x434>
 80017b2:	e74a      	b.n	800164a <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80017b4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80017b6:	421e      	tst	r6, r3
 80017b8:	d0f6      	beq.n	80017a8 <HAL_RCC_OscConfig+0x428>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80017ba:	21f8      	movs	r1, #248	; 0xf8
 80017bc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80017be:	69a3      	ldr	r3, [r4, #24]
 80017c0:	438a      	bics	r2, r1
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	4313      	orrs	r3, r2
 80017c6:	636b      	str	r3, [r5, #52]	; 0x34
 80017c8:	e69a      	b.n	8001500 <HAL_RCC_OscConfig+0x180>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ca:	2104      	movs	r1, #4
 80017cc:	4b04      	ldr	r3, [pc, #16]	; (80017e0 <HAL_RCC_OscConfig+0x460>)
 80017ce:	6a1a      	ldr	r2, [r3, #32]
 80017d0:	430a      	orrs	r2, r1
 80017d2:	621a      	str	r2, [r3, #32]
 80017d4:	6a1a      	ldr	r2, [r3, #32]
 80017d6:	3903      	subs	r1, #3
 80017d8:	430a      	orrs	r2, r1
 80017da:	621a      	str	r2, [r3, #32]
 80017dc:	e665      	b.n	80014aa <HAL_RCC_OscConfig+0x12a>
 80017de:	46c0      	nop			; (mov r8, r8)
 80017e0:	40021000 	.word	0x40021000
 80017e4:	efffffff 	.word	0xefffffff
 80017e8:	feffffff 	.word	0xfeffffff
 80017ec:	ffc2ffff 	.word	0xffc2ffff

080017f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017f2:	46ce      	mov	lr, r9
 80017f4:	4647      	mov	r7, r8
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80017f6:	2201      	movs	r2, #1
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	000c      	movs	r4, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80017fc:	495c      	ldr	r1, [pc, #368]	; (8001970 <HAL_RCC_ClockConfig+0x180>)
{
 80017fe:	b089      	sub	sp, #36	; 0x24
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001800:	680b      	ldr	r3, [r1, #0]
{
 8001802:	0005      	movs	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001804:	4013      	ands	r3, r2
 8001806:	42a3      	cmp	r3, r4
 8001808:	d20d      	bcs.n	8001826 <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800180a:	680b      	ldr	r3, [r1, #0]
 800180c:	4393      	bics	r3, r2
 800180e:	4323      	orrs	r3, r4
 8001810:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001812:	680b      	ldr	r3, [r1, #0]
 8001814:	401a      	ands	r2, r3
 8001816:	4294      	cmp	r4, r2
 8001818:	d005      	beq.n	8001826 <HAL_RCC_ClockConfig+0x36>
    {
      return HAL_ERROR;
 800181a:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 800181c:	b009      	add	sp, #36	; 0x24
 800181e:	bc0c      	pop	{r2, r3}
 8001820:	4690      	mov	r8, r2
 8001822:	4699      	mov	r9, r3
 8001824:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001826:	682b      	ldr	r3, [r5, #0]
 8001828:	079a      	lsls	r2, r3, #30
 800182a:	d506      	bpl.n	800183a <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800182c:	20f0      	movs	r0, #240	; 0xf0
 800182e:	4951      	ldr	r1, [pc, #324]	; (8001974 <HAL_RCC_ClockConfig+0x184>)
 8001830:	684a      	ldr	r2, [r1, #4]
 8001832:	4382      	bics	r2, r0
 8001834:	68a8      	ldr	r0, [r5, #8]
 8001836:	4302      	orrs	r2, r0
 8001838:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800183a:	07db      	lsls	r3, r3, #31
 800183c:	d524      	bpl.n	8001888 <HAL_RCC_ClockConfig+0x98>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800183e:	4b4d      	ldr	r3, [pc, #308]	; (8001974 <HAL_RCC_ClockConfig+0x184>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001840:	686a      	ldr	r2, [r5, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001842:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001844:	2a01      	cmp	r2, #1
 8001846:	d06a      	beq.n	800191e <HAL_RCC_ClockConfig+0x12e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001848:	2a02      	cmp	r2, #2
 800184a:	d063      	beq.n	8001914 <HAL_RCC_ClockConfig+0x124>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800184c:	079b      	lsls	r3, r3, #30
 800184e:	d5e4      	bpl.n	800181a <HAL_RCC_ClockConfig+0x2a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001850:	2103      	movs	r1, #3
 8001852:	4e48      	ldr	r6, [pc, #288]	; (8001974 <HAL_RCC_ClockConfig+0x184>)
 8001854:	6873      	ldr	r3, [r6, #4]
 8001856:	438b      	bics	r3, r1
 8001858:	4313      	orrs	r3, r2
 800185a:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800185c:	f7fe fdf4 	bl	8000448 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001860:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001862:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001864:	2b01      	cmp	r3, #1
 8001866:	d05d      	beq.n	8001924 <HAL_RCC_ClockConfig+0x134>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001868:	2b02      	cmp	r3, #2
 800186a:	d06b      	beq.n	8001944 <HAL_RCC_ClockConfig+0x154>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800186c:	230c      	movs	r3, #12
 800186e:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001870:	4b41      	ldr	r3, [pc, #260]	; (8001978 <HAL_RCC_ClockConfig+0x188>)
 8001872:	4699      	mov	r9, r3
 8001874:	e004      	b.n	8001880 <HAL_RCC_ClockConfig+0x90>
 8001876:	f7fe fde7 	bl	8000448 <HAL_GetTick>
 800187a:	1bc0      	subs	r0, r0, r7
 800187c:	4548      	cmp	r0, r9
 800187e:	d84c      	bhi.n	800191a <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001880:	4642      	mov	r2, r8
 8001882:	6873      	ldr	r3, [r6, #4]
 8001884:	421a      	tst	r2, r3
 8001886:	d1f6      	bne.n	8001876 <HAL_RCC_ClockConfig+0x86>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001888:	2101      	movs	r1, #1
 800188a:	4a39      	ldr	r2, [pc, #228]	; (8001970 <HAL_RCC_ClockConfig+0x180>)
 800188c:	6813      	ldr	r3, [r2, #0]
 800188e:	400b      	ands	r3, r1
 8001890:	429c      	cmp	r4, r3
 8001892:	d205      	bcs.n	80018a0 <HAL_RCC_ClockConfig+0xb0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001894:	6813      	ldr	r3, [r2, #0]
 8001896:	438b      	bics	r3, r1
 8001898:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800189a:	6813      	ldr	r3, [r2, #0]
 800189c:	4219      	tst	r1, r3
 800189e:	d1bc      	bne.n	800181a <HAL_RCC_ClockConfig+0x2a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a0:	682b      	ldr	r3, [r5, #0]
 80018a2:	075b      	lsls	r3, r3, #29
 80018a4:	d506      	bpl.n	80018b4 <HAL_RCC_ClockConfig+0xc4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80018a6:	4a33      	ldr	r2, [pc, #204]	; (8001974 <HAL_RCC_ClockConfig+0x184>)
 80018a8:	4934      	ldr	r1, [pc, #208]	; (800197c <HAL_RCC_ClockConfig+0x18c>)
 80018aa:	6853      	ldr	r3, [r2, #4]
 80018ac:	400b      	ands	r3, r1
 80018ae:	68e9      	ldr	r1, [r5, #12]
 80018b0:	430b      	orrs	r3, r1
 80018b2:	6053      	str	r3, [r2, #4]
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80018b4:	4b32      	ldr	r3, [pc, #200]	; (8001980 <HAL_RCC_ClockConfig+0x190>)
 80018b6:	466a      	mov	r2, sp
 80018b8:	0018      	movs	r0, r3
 80018ba:	c870      	ldmia	r0!, {r4, r5, r6}
 80018bc:	c270      	stmia	r2!, {r4, r5, r6}
 80018be:	6800      	ldr	r0, [r0, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80018c0:	3310      	adds	r3, #16
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80018c2:	6010      	str	r0, [r2, #0]
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80018c4:	aa04      	add	r2, sp, #16
 80018c6:	0010      	movs	r0, r2
 80018c8:	cb70      	ldmia	r3!, {r4, r5, r6}
 80018ca:	c070      	stmia	r0!, {r4, r5, r6}
 80018cc:	681b      	ldr	r3, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80018ce:	4d29      	ldr	r5, [pc, #164]	; (8001974 <HAL_RCC_ClockConfig+0x184>)
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80018d0:	6003      	str	r3, [r0, #0]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018d2:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 80018d4:	6868      	ldr	r0, [r5, #4]
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80018d6:	4669      	mov	r1, sp
  switch (tmpreg & RCC_CFGR_SWS)
 80018d8:	4003      	ands	r3, r0
 80018da:	2b08      	cmp	r3, #8
 80018dc:	d10b      	bne.n	80018f6 <HAL_RCC_ClockConfig+0x106>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80018de:	3307      	adds	r3, #7
 80018e0:	0c84      	lsrs	r4, r0, #18
 80018e2:	401c      	ands	r4, r3
 80018e4:	5d0c      	ldrb	r4, [r1, r4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80018e6:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80018e8:	400b      	ands	r3, r1
 80018ea:	5cd1      	ldrb	r1, [r2, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80018ec:	03c3      	lsls	r3, r0, #15
 80018ee:	d439      	bmi.n	8001964 <HAL_RCC_ClockConfig+0x174>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 80018f0:	4824      	ldr	r0, [pc, #144]	; (8001984 <HAL_RCC_ClockConfig+0x194>)
 80018f2:	4360      	muls	r0, r4
 80018f4:	e000      	b.n	80018f8 <HAL_RCC_ClockConfig+0x108>
      sysclockfreq = HSE_VALUE;
 80018f6:	4824      	ldr	r0, [pc, #144]	; (8001988 <HAL_RCC_ClockConfig+0x198>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80018f8:	4b1e      	ldr	r3, [pc, #120]	; (8001974 <HAL_RCC_ClockConfig+0x184>)
 80018fa:	4a24      	ldr	r2, [pc, #144]	; (800198c <HAL_RCC_ClockConfig+0x19c>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	061b      	lsls	r3, r3, #24
 8001900:	0f1b      	lsrs	r3, r3, #28
 8001902:	5cd3      	ldrb	r3, [r2, r3]
 8001904:	40d8      	lsrs	r0, r3
 8001906:	4b22      	ldr	r3, [pc, #136]	; (8001990 <HAL_RCC_ClockConfig+0x1a0>)
 8001908:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800190a:	2000      	movs	r0, #0
 800190c:	f7fe fd72 	bl	80003f4 <HAL_InitTick>
  return HAL_OK;
 8001910:	2000      	movs	r0, #0
 8001912:	e783      	b.n	800181c <HAL_RCC_ClockConfig+0x2c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001914:	019b      	lsls	r3, r3, #6
 8001916:	d49b      	bmi.n	8001850 <HAL_RCC_ClockConfig+0x60>
 8001918:	e77f      	b.n	800181a <HAL_RCC_ClockConfig+0x2a>
          return HAL_TIMEOUT;
 800191a:	2003      	movs	r0, #3
 800191c:	e77e      	b.n	800181c <HAL_RCC_ClockConfig+0x2c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800191e:	039b      	lsls	r3, r3, #14
 8001920:	d496      	bmi.n	8001850 <HAL_RCC_ClockConfig+0x60>
 8001922:	e77a      	b.n	800181a <HAL_RCC_ClockConfig+0x2a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001924:	330b      	adds	r3, #11
 8001926:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001928:	4b13      	ldr	r3, [pc, #76]	; (8001978 <HAL_RCC_ClockConfig+0x188>)
 800192a:	4699      	mov	r9, r3
 800192c:	e004      	b.n	8001938 <HAL_RCC_ClockConfig+0x148>
 800192e:	f7fe fd8b 	bl	8000448 <HAL_GetTick>
 8001932:	1bc0      	subs	r0, r0, r7
 8001934:	4548      	cmp	r0, r9
 8001936:	d8f0      	bhi.n	800191a <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001938:	4642      	mov	r2, r8
 800193a:	6873      	ldr	r3, [r6, #4]
 800193c:	4013      	ands	r3, r2
 800193e:	2b04      	cmp	r3, #4
 8001940:	d1f5      	bne.n	800192e <HAL_RCC_ClockConfig+0x13e>
 8001942:	e7a1      	b.n	8001888 <HAL_RCC_ClockConfig+0x98>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001944:	330a      	adds	r3, #10
 8001946:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001948:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <HAL_RCC_ClockConfig+0x188>)
 800194a:	4699      	mov	r9, r3
 800194c:	e004      	b.n	8001958 <HAL_RCC_ClockConfig+0x168>
 800194e:	f7fe fd7b 	bl	8000448 <HAL_GetTick>
 8001952:	1bc0      	subs	r0, r0, r7
 8001954:	4548      	cmp	r0, r9
 8001956:	d8e0      	bhi.n	800191a <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001958:	4642      	mov	r2, r8
 800195a:	6873      	ldr	r3, [r6, #4]
 800195c:	4013      	ands	r3, r2
 800195e:	2b08      	cmp	r3, #8
 8001960:	d1f5      	bne.n	800194e <HAL_RCC_ClockConfig+0x15e>
 8001962:	e791      	b.n	8001888 <HAL_RCC_ClockConfig+0x98>
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001964:	4808      	ldr	r0, [pc, #32]	; (8001988 <HAL_RCC_ClockConfig+0x198>)
 8001966:	f7fe fbcf 	bl	8000108 <__udivsi3>
 800196a:	4360      	muls	r0, r4
 800196c:	e7c4      	b.n	80018f8 <HAL_RCC_ClockConfig+0x108>
 800196e:	46c0      	nop			; (mov r8, r8)
 8001970:	40022000 	.word	0x40022000
 8001974:	40021000 	.word	0x40021000
 8001978:	00001388 	.word	0x00001388
 800197c:	fffff8ff 	.word	0xfffff8ff
 8001980:	08005b6c 	.word	0x08005b6c
 8001984:	003d0900 	.word	0x003d0900
 8001988:	007a1200 	.word	0x007a1200
 800198c:	08005ba8 	.word	0x08005ba8
 8001990:	20000060 	.word	0x20000060

08001994 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8001994:	4b01      	ldr	r3, [pc, #4]	; (800199c <HAL_RCC_GetHCLKFreq+0x8>)
 8001996:	6818      	ldr	r0, [r3, #0]
}
 8001998:	4770      	bx	lr
 800199a:	46c0      	nop			; (mov r8, r8)
 800199c:	20000060 	.word	0x20000060

080019a0 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019a0:	b510      	push	{r4, lr}
 80019a2:	1e04      	subs	r4, r0, #0
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80019a4:	d064      	beq.n	8001a70 <HAL_TIM_Base_Init+0xd0>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80019a6:	233d      	movs	r3, #61	; 0x3d
 80019a8:	5cc3      	ldrb	r3, [r0, r3]
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d03d      	beq.n	8001a2c <HAL_TIM_Base_Init+0x8c>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80019b0:	2202      	movs	r2, #2
 80019b2:	233d      	movs	r3, #61	; 0x3d
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019b4:	492f      	ldr	r1, [pc, #188]	; (8001a74 <HAL_TIM_Base_Init+0xd4>)
  htim->State= HAL_TIM_STATE_BUSY;
 80019b6:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019b8:	6823      	ldr	r3, [r4, #0]
  tmpcr1 = TIMx->CR1;
 80019ba:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019bc:	428b      	cmp	r3, r1
 80019be:	d021      	beq.n	8001a04 <HAL_TIM_Base_Init+0x64>
 80019c0:	2180      	movs	r1, #128	; 0x80
 80019c2:	05c9      	lsls	r1, r1, #23
 80019c4:	428b      	cmp	r3, r1
 80019c6:	d036      	beq.n	8001a36 <HAL_TIM_Base_Init+0x96>
 80019c8:	492b      	ldr	r1, [pc, #172]	; (8001a78 <HAL_TIM_Base_Init+0xd8>)
 80019ca:	428b      	cmp	r3, r1
 80019cc:	d033      	beq.n	8001a36 <HAL_TIM_Base_Init+0x96>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80019ce:	492b      	ldr	r1, [pc, #172]	; (8001a7c <HAL_TIM_Base_Init+0xdc>)
 80019d0:	428b      	cmp	r3, r1
 80019d2:	d048      	beq.n	8001a66 <HAL_TIM_Base_Init+0xc6>
 80019d4:	492a      	ldr	r1, [pc, #168]	; (8001a80 <HAL_TIM_Base_Init+0xe0>)
 80019d6:	428b      	cmp	r3, r1
 80019d8:	d018      	beq.n	8001a0c <HAL_TIM_Base_Init+0x6c>
 80019da:	492a      	ldr	r1, [pc, #168]	; (8001a84 <HAL_TIM_Base_Init+0xe4>)
 80019dc:	428b      	cmp	r3, r1
 80019de:	d015      	beq.n	8001a0c <HAL_TIM_Base_Init+0x6c>
 80019e0:	4929      	ldr	r1, [pc, #164]	; (8001a88 <HAL_TIM_Base_Init+0xe8>)
 80019e2:	428b      	cmp	r3, r1
 80019e4:	d012      	beq.n	8001a0c <HAL_TIM_Base_Init+0x6c>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019e6:	2180      	movs	r1, #128	; 0x80
 80019e8:	438a      	bics	r2, r1
 80019ea:	69a1      	ldr	r1, [r4, #24]
 80019ec:	430a      	orrs	r2, r1

  TIMx->CR1 = tmpcr1;
 80019ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019f0:	68e2      	ldr	r2, [r4, #12]
 80019f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80019f4:	6862      	ldr	r2, [r4, #4]
 80019f6:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80019f8:	2201      	movs	r2, #1
 80019fa:	615a      	str	r2, [r3, #20]
  htim->State= HAL_TIM_STATE_READY;
 80019fc:	233d      	movs	r3, #61	; 0x3d
  return HAL_OK;
 80019fe:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001a00:	54e2      	strb	r2, [r4, r3]
}
 8001a02:	bd10      	pop	{r4, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a04:	2170      	movs	r1, #112	; 0x70
 8001a06:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 8001a08:	68a1      	ldr	r1, [r4, #8]
 8001a0a:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a0c:	491f      	ldr	r1, [pc, #124]	; (8001a8c <HAL_TIM_Base_Init+0xec>)
 8001a0e:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a10:	6921      	ldr	r1, [r4, #16]
 8001a12:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a14:	2180      	movs	r1, #128	; 0x80
 8001a16:	438a      	bics	r2, r1
 8001a18:	69a1      	ldr	r1, [r4, #24]
 8001a1a:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8001a1c:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a1e:	68e2      	ldr	r2, [r4, #12]
 8001a20:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001a22:	6862      	ldr	r2, [r4, #4]
 8001a24:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8001a26:	6962      	ldr	r2, [r4, #20]
 8001a28:	631a      	str	r2, [r3, #48]	; 0x30
 8001a2a:	e7e5      	b.n	80019f8 <HAL_TIM_Base_Init+0x58>
    htim->Lock = HAL_UNLOCKED;
 8001a2c:	223c      	movs	r2, #60	; 0x3c
 8001a2e:	5483      	strb	r3, [r0, r2]
    HAL_TIM_Base_MspInit(htim);
 8001a30:	f003 ff1c 	bl	800586c <HAL_TIM_Base_MspInit>
 8001a34:	e7bc      	b.n	80019b0 <HAL_TIM_Base_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a36:	2170      	movs	r1, #112	; 0x70
 8001a38:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 8001a3a:	68a1      	ldr	r1, [r4, #8]
 8001a3c:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a3e:	4913      	ldr	r1, [pc, #76]	; (8001a8c <HAL_TIM_Base_Init+0xec>)
 8001a40:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a42:	6921      	ldr	r1, [r4, #16]
 8001a44:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a46:	2180      	movs	r1, #128	; 0x80
 8001a48:	438a      	bics	r2, r1
 8001a4a:	69a1      	ldr	r1, [r4, #24]
 8001a4c:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8001a4e:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a50:	68e2      	ldr	r2, [r4, #12]
 8001a52:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001a54:	6862      	ldr	r2, [r4, #4]
 8001a56:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a58:	4a0a      	ldr	r2, [pc, #40]	; (8001a84 <HAL_TIM_Base_Init+0xe4>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d0e3      	beq.n	8001a26 <HAL_TIM_Base_Init+0x86>
 8001a5e:	4a0a      	ldr	r2, [pc, #40]	; (8001a88 <HAL_TIM_Base_Init+0xe8>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d0e0      	beq.n	8001a26 <HAL_TIM_Base_Init+0x86>
 8001a64:	e7c8      	b.n	80019f8 <HAL_TIM_Base_Init+0x58>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a66:	4909      	ldr	r1, [pc, #36]	; (8001a8c <HAL_TIM_Base_Init+0xec>)
 8001a68:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a6a:	6921      	ldr	r1, [r4, #16]
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	e7ba      	b.n	80019e6 <HAL_TIM_Base_Init+0x46>
    return HAL_ERROR;
 8001a70:	2001      	movs	r0, #1
 8001a72:	e7c6      	b.n	8001a02 <HAL_TIM_Base_Init+0x62>
 8001a74:	40012c00 	.word	0x40012c00
 8001a78:	40000400 	.word	0x40000400
 8001a7c:	40002000 	.word	0x40002000
 8001a80:	40014000 	.word	0x40014000
 8001a84:	40014400 	.word	0x40014400
 8001a88:	40014800 	.word	0x40014800
 8001a8c:	fffffcff 	.word	0xfffffcff

08001a90 <HAL_TIM_Base_Start>:
  htim->State= HAL_TIM_STATE_BUSY;
 8001a90:	223d      	movs	r2, #61	; 0x3d
 8001a92:	2302      	movs	r3, #2
  __HAL_TIM_ENABLE(htim);
 8001a94:	2101      	movs	r1, #1
{
 8001a96:	b510      	push	{r4, lr}
  __HAL_TIM_ENABLE(htim);
 8001a98:	6804      	ldr	r4, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001a9a:	5483      	strb	r3, [r0, r2]
  __HAL_TIM_ENABLE(htim);
 8001a9c:	6823      	ldr	r3, [r4, #0]
 8001a9e:	430b      	orrs	r3, r1
 8001aa0:	6023      	str	r3, [r4, #0]
  htim->State= HAL_TIM_STATE_READY;
 8001aa2:	5481      	strb	r1, [r0, r2]
}
 8001aa4:	2000      	movs	r0, #0
 8001aa6:	bd10      	pop	{r4, pc}

08001aa8 <HAL_TIM_Base_Stop>:
  htim->State= HAL_TIM_STATE_BUSY;
 8001aa8:	2202      	movs	r2, #2
 8001aaa:	233d      	movs	r3, #61	; 0x3d
 8001aac:	54c2      	strb	r2, [r0, r3]
  __HAL_TIM_DISABLE(htim);
 8001aae:	6803      	ldr	r3, [r0, #0]
 8001ab0:	4a08      	ldr	r2, [pc, #32]	; (8001ad4 <HAL_TIM_Base_Stop+0x2c>)
 8001ab2:	6a19      	ldr	r1, [r3, #32]
 8001ab4:	4211      	tst	r1, r2
 8001ab6:	d107      	bne.n	8001ac8 <HAL_TIM_Base_Stop+0x20>
 8001ab8:	6a19      	ldr	r1, [r3, #32]
 8001aba:	4a07      	ldr	r2, [pc, #28]	; (8001ad8 <HAL_TIM_Base_Stop+0x30>)
 8001abc:	4211      	tst	r1, r2
 8001abe:	d103      	bne.n	8001ac8 <HAL_TIM_Base_Stop+0x20>
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	438a      	bics	r2, r1
 8001ac6:	601a      	str	r2, [r3, #0]
  htim->State= HAL_TIM_STATE_READY;
 8001ac8:	2201      	movs	r2, #1
 8001aca:	233d      	movs	r3, #61	; 0x3d
 8001acc:	54c2      	strb	r2, [r0, r3]
}
 8001ace:	2000      	movs	r0, #0
 8001ad0:	4770      	bx	lr
 8001ad2:	46c0      	nop			; (mov r8, r8)
 8001ad4:	00001111 	.word	0x00001111
 8001ad8:	00000444 	.word	0x00000444

08001adc <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001adc:	6803      	ldr	r3, [r0, #0]
 8001ade:	2001      	movs	r0, #1
 8001ae0:	68d9      	ldr	r1, [r3, #12]
 8001ae2:	4301      	orrs	r1, r0
 8001ae4:	60d9      	str	r1, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	4302      	orrs	r2, r0
 8001aea:	601a      	str	r2, [r3, #0]
}
 8001aec:	2000      	movs	r0, #0
 8001aee:	4770      	bx	lr

08001af0 <HAL_TIM_OC_Start_IT>:
 8001af0:	2904      	cmp	r1, #4
 8001af2:	d023      	beq.n	8001b3c <HAL_TIM_OC_Start_IT+0x4c>
 8001af4:	d92d      	bls.n	8001b52 <HAL_TIM_OC_Start_IT+0x62>
 8001af6:	2908      	cmp	r1, #8
 8001af8:	d020      	beq.n	8001b3c <HAL_TIM_OC_Start_IT+0x4c>
 8001afa:	290c      	cmp	r1, #12
 8001afc:	d131      	bne.n	8001b62 <HAL_TIM_OC_Start_IT+0x72>
 8001afe:	6803      	ldr	r3, [r0, #0]
 8001b00:	2010      	movs	r0, #16
 8001b02:	68da      	ldr	r2, [r3, #12]
 8001b04:	4302      	orrs	r2, r0
 8001b06:	60da      	str	r2, [r3, #12]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	408a      	lsls	r2, r1
 8001b0c:	6a19      	ldr	r1, [r3, #32]
 8001b0e:	4391      	bics	r1, r2
 8001b10:	6219      	str	r1, [r3, #32]
 8001b12:	6a19      	ldr	r1, [r3, #32]
 8001b14:	430a      	orrs	r2, r1
 8001b16:	621a      	str	r2, [r3, #32]
 8001b18:	4a13      	ldr	r2, [pc, #76]	; (8001b68 <HAL_TIM_OC_Start_IT+0x78>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d013      	beq.n	8001b46 <HAL_TIM_OC_Start_IT+0x56>
 8001b1e:	4a13      	ldr	r2, [pc, #76]	; (8001b6c <HAL_TIM_OC_Start_IT+0x7c>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d010      	beq.n	8001b46 <HAL_TIM_OC_Start_IT+0x56>
 8001b24:	4a12      	ldr	r2, [pc, #72]	; (8001b70 <HAL_TIM_OC_Start_IT+0x80>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d00d      	beq.n	8001b46 <HAL_TIM_OC_Start_IT+0x56>
 8001b2a:	4a12      	ldr	r2, [pc, #72]	; (8001b74 <HAL_TIM_OC_Start_IT+0x84>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d00a      	beq.n	8001b46 <HAL_TIM_OC_Start_IT+0x56>
 8001b30:	2101      	movs	r1, #1
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	2000      	movs	r0, #0
 8001b36:	430a      	orrs	r2, r1
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	4770      	bx	lr
 8001b3c:	6803      	ldr	r3, [r0, #0]
 8001b3e:	68da      	ldr	r2, [r3, #12]
 8001b40:	430a      	orrs	r2, r1
 8001b42:	60da      	str	r2, [r3, #12]
 8001b44:	e7e0      	b.n	8001b08 <HAL_TIM_OC_Start_IT+0x18>
 8001b46:	2280      	movs	r2, #128	; 0x80
 8001b48:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001b4a:	0212      	lsls	r2, r2, #8
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	645a      	str	r2, [r3, #68]	; 0x44
 8001b50:	e7ee      	b.n	8001b30 <HAL_TIM_OC_Start_IT+0x40>
 8001b52:	2900      	cmp	r1, #0
 8001b54:	d105      	bne.n	8001b62 <HAL_TIM_OC_Start_IT+0x72>
 8001b56:	6803      	ldr	r3, [r0, #0]
 8001b58:	2002      	movs	r0, #2
 8001b5a:	68da      	ldr	r2, [r3, #12]
 8001b5c:	4302      	orrs	r2, r0
 8001b5e:	60da      	str	r2, [r3, #12]
 8001b60:	e7d2      	b.n	8001b08 <HAL_TIM_OC_Start_IT+0x18>
 8001b62:	6803      	ldr	r3, [r0, #0]
 8001b64:	e7d0      	b.n	8001b08 <HAL_TIM_OC_Start_IT+0x18>
 8001b66:	46c0      	nop			; (mov r8, r8)
 8001b68:	40012c00 	.word	0x40012c00
 8001b6c:	40014000 	.word	0x40014000
 8001b70:	40014400 	.word	0x40014400
 8001b74:	40014800 	.word	0x40014800

08001b78 <HAL_TIM_PWM_MspInit>:
 8001b78:	4770      	bx	lr
 8001b7a:	46c0      	nop			; (mov r8, r8)

08001b7c <HAL_TIM_PWM_Init>:
{
 8001b7c:	b510      	push	{r4, lr}
 8001b7e:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8001b80:	d064      	beq.n	8001c4c <HAL_TIM_PWM_Init+0xd0>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001b82:	233d      	movs	r3, #61	; 0x3d
 8001b84:	5cc3      	ldrb	r3, [r0, r3]
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d03d      	beq.n	8001c08 <HAL_TIM_PWM_Init+0x8c>
  htim->State= HAL_TIM_STATE_BUSY;
 8001b8c:	2202      	movs	r2, #2
 8001b8e:	233d      	movs	r3, #61	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b90:	492f      	ldr	r1, [pc, #188]	; (8001c50 <HAL_TIM_PWM_Init+0xd4>)
  htim->State= HAL_TIM_STATE_BUSY;
 8001b92:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b94:	6823      	ldr	r3, [r4, #0]
  tmpcr1 = TIMx->CR1;
 8001b96:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b98:	428b      	cmp	r3, r1
 8001b9a:	d021      	beq.n	8001be0 <HAL_TIM_PWM_Init+0x64>
 8001b9c:	2180      	movs	r1, #128	; 0x80
 8001b9e:	05c9      	lsls	r1, r1, #23
 8001ba0:	428b      	cmp	r3, r1
 8001ba2:	d036      	beq.n	8001c12 <HAL_TIM_PWM_Init+0x96>
 8001ba4:	492b      	ldr	r1, [pc, #172]	; (8001c54 <HAL_TIM_PWM_Init+0xd8>)
 8001ba6:	428b      	cmp	r3, r1
 8001ba8:	d033      	beq.n	8001c12 <HAL_TIM_PWM_Init+0x96>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001baa:	492b      	ldr	r1, [pc, #172]	; (8001c58 <HAL_TIM_PWM_Init+0xdc>)
 8001bac:	428b      	cmp	r3, r1
 8001bae:	d048      	beq.n	8001c42 <HAL_TIM_PWM_Init+0xc6>
 8001bb0:	492a      	ldr	r1, [pc, #168]	; (8001c5c <HAL_TIM_PWM_Init+0xe0>)
 8001bb2:	428b      	cmp	r3, r1
 8001bb4:	d018      	beq.n	8001be8 <HAL_TIM_PWM_Init+0x6c>
 8001bb6:	492a      	ldr	r1, [pc, #168]	; (8001c60 <HAL_TIM_PWM_Init+0xe4>)
 8001bb8:	428b      	cmp	r3, r1
 8001bba:	d015      	beq.n	8001be8 <HAL_TIM_PWM_Init+0x6c>
 8001bbc:	4929      	ldr	r1, [pc, #164]	; (8001c64 <HAL_TIM_PWM_Init+0xe8>)
 8001bbe:	428b      	cmp	r3, r1
 8001bc0:	d012      	beq.n	8001be8 <HAL_TIM_PWM_Init+0x6c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001bc2:	2180      	movs	r1, #128	; 0x80
 8001bc4:	438a      	bics	r2, r1
 8001bc6:	69a1      	ldr	r1, [r4, #24]
 8001bc8:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8001bca:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001bcc:	68e2      	ldr	r2, [r4, #12]
 8001bce:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001bd0:	6862      	ldr	r2, [r4, #4]
 8001bd2:	629a      	str	r2, [r3, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	615a      	str	r2, [r3, #20]
  htim->State= HAL_TIM_STATE_READY;
 8001bd8:	233d      	movs	r3, #61	; 0x3d
  return HAL_OK;
 8001bda:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001bdc:	54e2      	strb	r2, [r4, r3]
}
 8001bde:	bd10      	pop	{r4, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001be0:	2170      	movs	r1, #112	; 0x70
 8001be2:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 8001be4:	68a1      	ldr	r1, [r4, #8]
 8001be6:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8001be8:	491f      	ldr	r1, [pc, #124]	; (8001c68 <HAL_TIM_PWM_Init+0xec>)
 8001bea:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bec:	6921      	ldr	r1, [r4, #16]
 8001bee:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001bf0:	2180      	movs	r1, #128	; 0x80
 8001bf2:	438a      	bics	r2, r1
 8001bf4:	69a1      	ldr	r1, [r4, #24]
 8001bf6:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8001bf8:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001bfa:	68e2      	ldr	r2, [r4, #12]
 8001bfc:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001bfe:	6862      	ldr	r2, [r4, #4]
 8001c00:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8001c02:	6962      	ldr	r2, [r4, #20]
 8001c04:	631a      	str	r2, [r3, #48]	; 0x30
 8001c06:	e7e5      	b.n	8001bd4 <HAL_TIM_PWM_Init+0x58>
    htim->Lock = HAL_UNLOCKED;
 8001c08:	223c      	movs	r2, #60	; 0x3c
 8001c0a:	5483      	strb	r3, [r0, r2]
    HAL_TIM_PWM_MspInit(htim);
 8001c0c:	f7ff ffb4 	bl	8001b78 <HAL_TIM_PWM_MspInit>
 8001c10:	e7bc      	b.n	8001b8c <HAL_TIM_PWM_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c12:	2170      	movs	r1, #112	; 0x70
 8001c14:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 8001c16:	68a1      	ldr	r1, [r4, #8]
 8001c18:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c1a:	4913      	ldr	r1, [pc, #76]	; (8001c68 <HAL_TIM_PWM_Init+0xec>)
 8001c1c:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c1e:	6921      	ldr	r1, [r4, #16]
 8001c20:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c22:	2180      	movs	r1, #128	; 0x80
 8001c24:	438a      	bics	r2, r1
 8001c26:	69a1      	ldr	r1, [r4, #24]
 8001c28:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8001c2a:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c2c:	68e2      	ldr	r2, [r4, #12]
 8001c2e:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001c30:	6862      	ldr	r2, [r4, #4]
 8001c32:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c34:	4a0a      	ldr	r2, [pc, #40]	; (8001c60 <HAL_TIM_PWM_Init+0xe4>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d0e3      	beq.n	8001c02 <HAL_TIM_PWM_Init+0x86>
 8001c3a:	4a0a      	ldr	r2, [pc, #40]	; (8001c64 <HAL_TIM_PWM_Init+0xe8>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d0e0      	beq.n	8001c02 <HAL_TIM_PWM_Init+0x86>
 8001c40:	e7c8      	b.n	8001bd4 <HAL_TIM_PWM_Init+0x58>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c42:	4909      	ldr	r1, [pc, #36]	; (8001c68 <HAL_TIM_PWM_Init+0xec>)
 8001c44:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c46:	6921      	ldr	r1, [r4, #16]
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	e7ba      	b.n	8001bc2 <HAL_TIM_PWM_Init+0x46>
    return HAL_ERROR;
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	e7c6      	b.n	8001bde <HAL_TIM_PWM_Init+0x62>
 8001c50:	40012c00 	.word	0x40012c00
 8001c54:	40000400 	.word	0x40000400
 8001c58:	40002000 	.word	0x40002000
 8001c5c:	40014000 	.word	0x40014000
 8001c60:	40014400 	.word	0x40014400
 8001c64:	40014800 	.word	0x40014800
 8001c68:	fffffcff 	.word	0xfffffcff

08001c6c <HAL_TIM_PWM_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	408a      	lsls	r2, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001c70:	6803      	ldr	r3, [r0, #0]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001c72:	6a19      	ldr	r1, [r3, #32]
 8001c74:	4391      	bics	r1, r2
 8001c76:	6219      	str	r1, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001c78:	6a19      	ldr	r1, [r3, #32]
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	621a      	str	r2, [r3, #32]
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001c7e:	4a0c      	ldr	r2, [pc, #48]	; (8001cb0 <HAL_TIM_PWM_Start+0x44>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d00e      	beq.n	8001ca2 <HAL_TIM_PWM_Start+0x36>
 8001c84:	4a0b      	ldr	r2, [pc, #44]	; (8001cb4 <HAL_TIM_PWM_Start+0x48>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d00b      	beq.n	8001ca2 <HAL_TIM_PWM_Start+0x36>
 8001c8a:	4a0b      	ldr	r2, [pc, #44]	; (8001cb8 <HAL_TIM_PWM_Start+0x4c>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d008      	beq.n	8001ca2 <HAL_TIM_PWM_Start+0x36>
 8001c90:	4a0a      	ldr	r2, [pc, #40]	; (8001cbc <HAL_TIM_PWM_Start+0x50>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d005      	beq.n	8001ca2 <HAL_TIM_PWM_Start+0x36>
  __HAL_TIM_ENABLE(htim);
 8001c96:	2101      	movs	r1, #1
 8001c98:	681a      	ldr	r2, [r3, #0]
}
 8001c9a:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	601a      	str	r2, [r3, #0]
}
 8001ca0:	4770      	bx	lr
    __HAL_TIM_MOE_ENABLE(htim);
 8001ca2:	2280      	movs	r2, #128	; 0x80
 8001ca4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001ca6:	0212      	lsls	r2, r2, #8
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	645a      	str	r2, [r3, #68]	; 0x44
 8001cac:	e7f3      	b.n	8001c96 <HAL_TIM_PWM_Start+0x2a>
 8001cae:	46c0      	nop			; (mov r8, r8)
 8001cb0:	40012c00 	.word	0x40012c00
 8001cb4:	40014000 	.word	0x40014000
 8001cb8:	40014400 	.word	0x40014400
 8001cbc:	40014800 	.word	0x40014800

08001cc0 <HAL_TIM_IC_MspInit>:
 8001cc0:	4770      	bx	lr
 8001cc2:	46c0      	nop			; (mov r8, r8)

08001cc4 <HAL_TIM_IC_Init>:
{
 8001cc4:	b510      	push	{r4, lr}
 8001cc6:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8001cc8:	d064      	beq.n	8001d94 <HAL_TIM_IC_Init+0xd0>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001cca:	233d      	movs	r3, #61	; 0x3d
 8001ccc:	5cc3      	ldrb	r3, [r0, r3]
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d03d      	beq.n	8001d50 <HAL_TIM_IC_Init+0x8c>
  htim->State= HAL_TIM_STATE_BUSY;
 8001cd4:	2202      	movs	r2, #2
 8001cd6:	233d      	movs	r3, #61	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cd8:	492f      	ldr	r1, [pc, #188]	; (8001d98 <HAL_TIM_IC_Init+0xd4>)
  htim->State= HAL_TIM_STATE_BUSY;
 8001cda:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cdc:	6823      	ldr	r3, [r4, #0]
  tmpcr1 = TIMx->CR1;
 8001cde:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ce0:	428b      	cmp	r3, r1
 8001ce2:	d021      	beq.n	8001d28 <HAL_TIM_IC_Init+0x64>
 8001ce4:	2180      	movs	r1, #128	; 0x80
 8001ce6:	05c9      	lsls	r1, r1, #23
 8001ce8:	428b      	cmp	r3, r1
 8001cea:	d036      	beq.n	8001d5a <HAL_TIM_IC_Init+0x96>
 8001cec:	492b      	ldr	r1, [pc, #172]	; (8001d9c <HAL_TIM_IC_Init+0xd8>)
 8001cee:	428b      	cmp	r3, r1
 8001cf0:	d033      	beq.n	8001d5a <HAL_TIM_IC_Init+0x96>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cf2:	492b      	ldr	r1, [pc, #172]	; (8001da0 <HAL_TIM_IC_Init+0xdc>)
 8001cf4:	428b      	cmp	r3, r1
 8001cf6:	d048      	beq.n	8001d8a <HAL_TIM_IC_Init+0xc6>
 8001cf8:	492a      	ldr	r1, [pc, #168]	; (8001da4 <HAL_TIM_IC_Init+0xe0>)
 8001cfa:	428b      	cmp	r3, r1
 8001cfc:	d018      	beq.n	8001d30 <HAL_TIM_IC_Init+0x6c>
 8001cfe:	492a      	ldr	r1, [pc, #168]	; (8001da8 <HAL_TIM_IC_Init+0xe4>)
 8001d00:	428b      	cmp	r3, r1
 8001d02:	d015      	beq.n	8001d30 <HAL_TIM_IC_Init+0x6c>
 8001d04:	4929      	ldr	r1, [pc, #164]	; (8001dac <HAL_TIM_IC_Init+0xe8>)
 8001d06:	428b      	cmp	r3, r1
 8001d08:	d012      	beq.n	8001d30 <HAL_TIM_IC_Init+0x6c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d0a:	2180      	movs	r1, #128	; 0x80
 8001d0c:	438a      	bics	r2, r1
 8001d0e:	69a1      	ldr	r1, [r4, #24]
 8001d10:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8001d12:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d14:	68e2      	ldr	r2, [r4, #12]
 8001d16:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001d18:	6862      	ldr	r2, [r4, #4]
 8001d1a:	629a      	str	r2, [r3, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	615a      	str	r2, [r3, #20]
  htim->State= HAL_TIM_STATE_READY;
 8001d20:	233d      	movs	r3, #61	; 0x3d
  return HAL_OK;
 8001d22:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001d24:	54e2      	strb	r2, [r4, r3]
}
 8001d26:	bd10      	pop	{r4, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d28:	2170      	movs	r1, #112	; 0x70
 8001d2a:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 8001d2c:	68a1      	ldr	r1, [r4, #8]
 8001d2e:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d30:	491f      	ldr	r1, [pc, #124]	; (8001db0 <HAL_TIM_IC_Init+0xec>)
 8001d32:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d34:	6921      	ldr	r1, [r4, #16]
 8001d36:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d38:	2180      	movs	r1, #128	; 0x80
 8001d3a:	438a      	bics	r2, r1
 8001d3c:	69a1      	ldr	r1, [r4, #24]
 8001d3e:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8001d40:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d42:	68e2      	ldr	r2, [r4, #12]
 8001d44:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001d46:	6862      	ldr	r2, [r4, #4]
 8001d48:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8001d4a:	6962      	ldr	r2, [r4, #20]
 8001d4c:	631a      	str	r2, [r3, #48]	; 0x30
 8001d4e:	e7e5      	b.n	8001d1c <HAL_TIM_IC_Init+0x58>
    htim->Lock = HAL_UNLOCKED;
 8001d50:	223c      	movs	r2, #60	; 0x3c
 8001d52:	5483      	strb	r3, [r0, r2]
    HAL_TIM_IC_MspInit(htim);
 8001d54:	f7ff ffb4 	bl	8001cc0 <HAL_TIM_IC_MspInit>
 8001d58:	e7bc      	b.n	8001cd4 <HAL_TIM_IC_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d5a:	2170      	movs	r1, #112	; 0x70
 8001d5c:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 8001d5e:	68a1      	ldr	r1, [r4, #8]
 8001d60:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d62:	4913      	ldr	r1, [pc, #76]	; (8001db0 <HAL_TIM_IC_Init+0xec>)
 8001d64:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d66:	6921      	ldr	r1, [r4, #16]
 8001d68:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d6a:	2180      	movs	r1, #128	; 0x80
 8001d6c:	438a      	bics	r2, r1
 8001d6e:	69a1      	ldr	r1, [r4, #24]
 8001d70:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8001d72:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d74:	68e2      	ldr	r2, [r4, #12]
 8001d76:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001d78:	6862      	ldr	r2, [r4, #4]
 8001d7a:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d7c:	4a0a      	ldr	r2, [pc, #40]	; (8001da8 <HAL_TIM_IC_Init+0xe4>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d0e3      	beq.n	8001d4a <HAL_TIM_IC_Init+0x86>
 8001d82:	4a0a      	ldr	r2, [pc, #40]	; (8001dac <HAL_TIM_IC_Init+0xe8>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d0e0      	beq.n	8001d4a <HAL_TIM_IC_Init+0x86>
 8001d88:	e7c8      	b.n	8001d1c <HAL_TIM_IC_Init+0x58>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d8a:	4909      	ldr	r1, [pc, #36]	; (8001db0 <HAL_TIM_IC_Init+0xec>)
 8001d8c:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d8e:	6921      	ldr	r1, [r4, #16]
 8001d90:	430a      	orrs	r2, r1
 8001d92:	e7ba      	b.n	8001d0a <HAL_TIM_IC_Init+0x46>
    return HAL_ERROR;
 8001d94:	2001      	movs	r0, #1
 8001d96:	e7c6      	b.n	8001d26 <HAL_TIM_IC_Init+0x62>
 8001d98:	40012c00 	.word	0x40012c00
 8001d9c:	40000400 	.word	0x40000400
 8001da0:	40002000 	.word	0x40002000
 8001da4:	40014000 	.word	0x40014000
 8001da8:	40014400 	.word	0x40014400
 8001dac:	40014800 	.word	0x40014800
 8001db0:	fffffcff 	.word	0xfffffcff

08001db4 <HAL_TIM_IC_Start_DMA>:
{
 8001db4:	b570      	push	{r4, r5, r6, lr}
 8001db6:	000d      	movs	r5, r1
  if((htim->State == HAL_TIM_STATE_BUSY))
 8001db8:	213d      	movs	r1, #61	; 0x3d
 8001dba:	5c46      	ldrb	r6, [r0, r1]
{
 8001dbc:	0004      	movs	r4, r0
     return HAL_BUSY;
 8001dbe:	2002      	movs	r0, #2
  if((htim->State == HAL_TIM_STATE_BUSY))
 8001dc0:	2e02      	cmp	r6, #2
 8001dc2:	d026      	beq.n	8001e12 <HAL_TIM_IC_Start_DMA+0x5e>
  else if((htim->State == HAL_TIM_STATE_READY))
 8001dc4:	5c61      	ldrb	r1, [r4, r1]
 8001dc6:	2901      	cmp	r1, #1
 8001dc8:	d024      	beq.n	8001e14 <HAL_TIM_IC_Start_DMA+0x60>
  switch (Channel)
 8001dca:	2d04      	cmp	r5, #4
 8001dcc:	d03a      	beq.n	8001e44 <HAL_TIM_IC_Start_DMA+0x90>
 8001dce:	2d04      	cmp	r5, #4
 8001dd0:	d948      	bls.n	8001e64 <HAL_TIM_IC_Start_DMA+0xb0>
 8001dd2:	2d08      	cmp	r5, #8
 8001dd4:	d026      	beq.n	8001e24 <HAL_TIM_IC_Start_DMA+0x70>
 8001dd6:	2d0c      	cmp	r5, #12
 8001dd8:	d156      	bne.n	8001e88 <HAL_TIM_IC_Start_DMA+0xd4>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8001dda:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001ddc:	492d      	ldr	r1, [pc, #180]	; (8001e94 <HAL_TIM_IC_Start_DMA+0xe0>)
 8001dde:	6281      	str	r1, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8001de0:	492d      	ldr	r1, [pc, #180]	; (8001e98 <HAL_TIM_IC_Start_DMA+0xe4>)
 8001de2:	6301      	str	r1, [r0, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length);
 8001de4:	6821      	ldr	r1, [r4, #0]
 8001de6:	3140      	adds	r1, #64	; 0x40
 8001de8:	f7fe ff7c 	bl	8000ce4 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8001dec:	2280      	movs	r2, #128	; 0x80
 8001dee:	6823      	ldr	r3, [r4, #0]
 8001df0:	0152      	lsls	r2, r2, #5
 8001df2:	68d9      	ldr	r1, [r3, #12]
 8001df4:	430a      	orrs	r2, r1
 8001df6:	60da      	str	r2, [r3, #12]
  tmp = TIM_CCER_CC1E << Channel;
 8001df8:	2001      	movs	r0, #1
 8001dfa:	0002      	movs	r2, r0
 8001dfc:	40aa      	lsls	r2, r5
  TIMx->CCER &= ~tmp;
 8001dfe:	6a19      	ldr	r1, [r3, #32]
 8001e00:	4391      	bics	r1, r2
 8001e02:	6219      	str	r1, [r3, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001e04:	6a19      	ldr	r1, [r3, #32]
 8001e06:	430a      	orrs	r2, r1
 8001e08:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	4302      	orrs	r2, r0
  return HAL_OK;
 8001e0e:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8001e10:	601a      	str	r2, [r3, #0]
}
 8001e12:	bd70      	pop	{r4, r5, r6, pc}
    if((pData == 0U ) && (Length > 0U))
 8001e14:	2a00      	cmp	r2, #0
 8001e16:	d039      	beq.n	8001e8c <HAL_TIM_IC_Start_DMA+0xd8>
      htim->State = HAL_TIM_STATE_BUSY;
 8001e18:	2002      	movs	r0, #2
 8001e1a:	213d      	movs	r1, #61	; 0x3d
 8001e1c:	5460      	strb	r0, [r4, r1]
  switch (Channel)
 8001e1e:	2d04      	cmp	r5, #4
 8001e20:	d1d5      	bne.n	8001dce <HAL_TIM_IC_Start_DMA+0x1a>
 8001e22:	e00f      	b.n	8001e44 <HAL_TIM_IC_Start_DMA+0x90>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8001e24:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001e26:	491b      	ldr	r1, [pc, #108]	; (8001e94 <HAL_TIM_IC_Start_DMA+0xe0>)
 8001e28:	6281      	str	r1, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8001e2a:	491b      	ldr	r1, [pc, #108]	; (8001e98 <HAL_TIM_IC_Start_DMA+0xe4>)
 8001e2c:	6301      	str	r1, [r0, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length);
 8001e2e:	6821      	ldr	r1, [r4, #0]
 8001e30:	313c      	adds	r1, #60	; 0x3c
 8001e32:	f7fe ff57 	bl	8000ce4 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8001e36:	2280      	movs	r2, #128	; 0x80
 8001e38:	6823      	ldr	r3, [r4, #0]
 8001e3a:	0112      	lsls	r2, r2, #4
 8001e3c:	68d9      	ldr	r1, [r3, #12]
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	60da      	str	r2, [r3, #12]
    break;
 8001e42:	e7d9      	b.n	8001df8 <HAL_TIM_IC_Start_DMA+0x44>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8001e44:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001e46:	4913      	ldr	r1, [pc, #76]	; (8001e94 <HAL_TIM_IC_Start_DMA+0xe0>)
 8001e48:	6281      	str	r1, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8001e4a:	4913      	ldr	r1, [pc, #76]	; (8001e98 <HAL_TIM_IC_Start_DMA+0xe4>)
 8001e4c:	6301      	str	r1, [r0, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length);
 8001e4e:	6821      	ldr	r1, [r4, #0]
 8001e50:	3138      	adds	r1, #56	; 0x38
 8001e52:	f7fe ff47 	bl	8000ce4 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8001e56:	2280      	movs	r2, #128	; 0x80
 8001e58:	6823      	ldr	r3, [r4, #0]
 8001e5a:	00d2      	lsls	r2, r2, #3
 8001e5c:	68d9      	ldr	r1, [r3, #12]
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	60da      	str	r2, [r3, #12]
    break;
 8001e62:	e7c9      	b.n	8001df8 <HAL_TIM_IC_Start_DMA+0x44>
  switch (Channel)
 8001e64:	2d00      	cmp	r5, #0
 8001e66:	d10f      	bne.n	8001e88 <HAL_TIM_IC_Start_DMA+0xd4>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8001e68:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001e6a:	490a      	ldr	r1, [pc, #40]	; (8001e94 <HAL_TIM_IC_Start_DMA+0xe0>)
 8001e6c:	6281      	str	r1, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8001e6e:	490a      	ldr	r1, [pc, #40]	; (8001e98 <HAL_TIM_IC_Start_DMA+0xe4>)
 8001e70:	6301      	str	r1, [r0, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length);
 8001e72:	6821      	ldr	r1, [r4, #0]
 8001e74:	3134      	adds	r1, #52	; 0x34
 8001e76:	f7fe ff35 	bl	8000ce4 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8001e7a:	2280      	movs	r2, #128	; 0x80
 8001e7c:	6823      	ldr	r3, [r4, #0]
 8001e7e:	0092      	lsls	r2, r2, #2
 8001e80:	68d9      	ldr	r1, [r3, #12]
 8001e82:	430a      	orrs	r2, r1
 8001e84:	60da      	str	r2, [r3, #12]
    break;
 8001e86:	e7b7      	b.n	8001df8 <HAL_TIM_IC_Start_DMA+0x44>
 8001e88:	6823      	ldr	r3, [r4, #0]
 8001e8a:	e7b5      	b.n	8001df8 <HAL_TIM_IC_Start_DMA+0x44>
      return HAL_ERROR;
 8001e8c:	3801      	subs	r0, #1
    if((pData == 0U ) && (Length > 0U))
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0c2      	beq.n	8001e18 <HAL_TIM_IC_Start_DMA+0x64>
 8001e92:	e7be      	b.n	8001e12 <HAL_TIM_IC_Start_DMA+0x5e>
 8001e94:	080025cd 	.word	0x080025cd
 8001e98:	08002771 	.word	0x08002771

08001e9c <HAL_TIM_IC_Stop_DMA>:
{
 8001e9c:	b530      	push	{r4, r5, lr}
  switch (Channel)
 8001e9e:	2904      	cmp	r1, #4
 8001ea0:	d031      	beq.n	8001f06 <HAL_TIM_IC_Stop_DMA+0x6a>
 8001ea2:	d926      	bls.n	8001ef2 <HAL_TIM_IC_Stop_DMA+0x56>
 8001ea4:	2908      	cmp	r1, #8
 8001ea6:	d01e      	beq.n	8001ee6 <HAL_TIM_IC_Stop_DMA+0x4a>
 8001ea8:	290c      	cmp	r1, #12
 8001eaa:	d12a      	bne.n	8001f02 <HAL_TIM_IC_Stop_DMA+0x66>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8001eac:	6803      	ldr	r3, [r0, #0]
 8001eae:	4c19      	ldr	r4, [pc, #100]	; (8001f14 <HAL_TIM_IC_Stop_DMA+0x78>)
 8001eb0:	68da      	ldr	r2, [r3, #12]
 8001eb2:	4022      	ands	r2, r4
 8001eb4:	60da      	str	r2, [r3, #12]
  tmp = TIM_CCER_CC1E << Channel;
 8001eb6:	2401      	movs	r4, #1
 8001eb8:	0025      	movs	r5, r4
 8001eba:	408d      	lsls	r5, r1
  TIMx->CCER &= ~tmp;
 8001ebc:	6a1a      	ldr	r2, [r3, #32]
 8001ebe:	43aa      	bics	r2, r5
 8001ec0:	621a      	str	r2, [r3, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001ec2:	6a1a      	ldr	r2, [r3, #32]
 8001ec4:	621a      	str	r2, [r3, #32]
  __HAL_TIM_DISABLE(htim);
 8001ec6:	6a19      	ldr	r1, [r3, #32]
 8001ec8:	4a13      	ldr	r2, [pc, #76]	; (8001f18 <HAL_TIM_IC_Stop_DMA+0x7c>)
 8001eca:	4211      	tst	r1, r2
 8001ecc:	d106      	bne.n	8001edc <HAL_TIM_IC_Stop_DMA+0x40>
 8001ece:	6a19      	ldr	r1, [r3, #32]
 8001ed0:	4a12      	ldr	r2, [pc, #72]	; (8001f1c <HAL_TIM_IC_Stop_DMA+0x80>)
 8001ed2:	4211      	tst	r1, r2
 8001ed4:	d102      	bne.n	8001edc <HAL_TIM_IC_Stop_DMA+0x40>
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	43a2      	bics	r2, r4
 8001eda:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8001edc:	2201      	movs	r2, #1
 8001ede:	233d      	movs	r3, #61	; 0x3d
 8001ee0:	54c2      	strb	r2, [r0, r3]
}
 8001ee2:	2000      	movs	r0, #0
 8001ee4:	bd30      	pop	{r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8001ee6:	6803      	ldr	r3, [r0, #0]
 8001ee8:	4c0d      	ldr	r4, [pc, #52]	; (8001f20 <HAL_TIM_IC_Stop_DMA+0x84>)
 8001eea:	68da      	ldr	r2, [r3, #12]
 8001eec:	4022      	ands	r2, r4
 8001eee:	60da      	str	r2, [r3, #12]
    break;
 8001ef0:	e7e1      	b.n	8001eb6 <HAL_TIM_IC_Stop_DMA+0x1a>
  switch (Channel)
 8001ef2:	2900      	cmp	r1, #0
 8001ef4:	d105      	bne.n	8001f02 <HAL_TIM_IC_Stop_DMA+0x66>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8001ef6:	6803      	ldr	r3, [r0, #0]
 8001ef8:	4c0a      	ldr	r4, [pc, #40]	; (8001f24 <HAL_TIM_IC_Stop_DMA+0x88>)
 8001efa:	68da      	ldr	r2, [r3, #12]
 8001efc:	4022      	ands	r2, r4
 8001efe:	60da      	str	r2, [r3, #12]
    break;
 8001f00:	e7d9      	b.n	8001eb6 <HAL_TIM_IC_Stop_DMA+0x1a>
 8001f02:	6803      	ldr	r3, [r0, #0]
 8001f04:	e7d7      	b.n	8001eb6 <HAL_TIM_IC_Stop_DMA+0x1a>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8001f06:	6803      	ldr	r3, [r0, #0]
 8001f08:	4c07      	ldr	r4, [pc, #28]	; (8001f28 <HAL_TIM_IC_Stop_DMA+0x8c>)
 8001f0a:	68da      	ldr	r2, [r3, #12]
 8001f0c:	4022      	ands	r2, r4
 8001f0e:	60da      	str	r2, [r3, #12]
    break;
 8001f10:	e7d1      	b.n	8001eb6 <HAL_TIM_IC_Stop_DMA+0x1a>
 8001f12:	46c0      	nop			; (mov r8, r8)
 8001f14:	ffffefff 	.word	0xffffefff
 8001f18:	00001111 	.word	0x00001111
 8001f1c:	00000444 	.word	0x00000444
 8001f20:	fffff7ff 	.word	0xfffff7ff
 8001f24:	fffffdff 	.word	0xfffffdff
 8001f28:	fffffbff 	.word	0xfffffbff

08001f2c <HAL_TIM_IC_ConfigChannel>:
{
 8001f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f2e:	46ce      	mov	lr, r9
 8001f30:	4647      	mov	r7, r8
  __HAL_LOCK(htim);
 8001f32:	243c      	movs	r4, #60	; 0x3c
{
 8001f34:	b580      	push	{r7, lr}
  __HAL_LOCK(htim);
 8001f36:	5d05      	ldrb	r5, [r0, r4]
{
 8001f38:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8001f3a:	2002      	movs	r0, #2
 8001f3c:	2d01      	cmp	r5, #1
 8001f3e:	d038      	beq.n	8001fb2 <HAL_TIM_IC_ConfigChannel+0x86>
 8001f40:	2501      	movs	r5, #1
 8001f42:	551d      	strb	r5, [r3, r4]
  htim->State = HAL_TIM_STATE_BUSY;
 8001f44:	3401      	adds	r4, #1
 8001f46:	5518      	strb	r0, [r3, r4]
  if (Channel == TIM_CHANNEL_1)
 8001f48:	2a00      	cmp	r2, #0
 8001f4a:	d036      	beq.n	8001fba <HAL_TIM_IC_ConfigChannel+0x8e>
  else if (Channel == TIM_CHANNEL_2)
 8001f4c:	2a04      	cmp	r2, #4
 8001f4e:	d063      	beq.n	8002018 <HAL_TIM_IC_ConfigChannel+0xec>
  else if (Channel == TIM_CHANNEL_3)
 8001f50:	2a08      	cmp	r2, #8
 8001f52:	d100      	bne.n	8001f56 <HAL_TIM_IC_ConfigChannel+0x2a>
 8001f54:	e086      	b.n	8002064 <HAL_TIM_IC_ConfigChannel+0x138>
    TIM_TI4_SetConfig(htim->Instance,
 8001f56:	6808      	ldr	r0, [r1, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	4680      	mov	r8, r0
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001f5c:	6a16      	ldr	r6, [r2, #32]
 8001f5e:	4f58      	ldr	r7, [pc, #352]	; (80020c0 <HAL_TIM_IC_ConfigChannel+0x194>)
    TIM_TI4_SetConfig(htim->Instance,
 8001f60:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001f62:	403e      	ands	r6, r7
    TIM_TI4_SetConfig(htim->Instance,
 8001f64:	68cc      	ldr	r4, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001f66:	6216      	str	r6, [r2, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001f68:	69d7      	ldr	r7, [r2, #28]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8001f6a:	4856      	ldr	r0, [pc, #344]	; (80020c4 <HAL_TIM_IC_ConfigChannel+0x198>)
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8001f6c:	022d      	lsls	r5, r5, #8
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8001f6e:	4007      	ands	r7, r0
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8001f70:	433d      	orrs	r5, r7
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8001f72:	4f55      	ldr	r7, [pc, #340]	; (80020c8 <HAL_TIM_IC_ConfigChannel+0x19c>)
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001f74:	0724      	lsls	r4, r4, #28
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8001f76:	403d      	ands	r5, r7
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001f78:	0c24      	lsrs	r4, r4, #16
  tmpccer = TIMx->CCER;
 8001f7a:	6a16      	ldr	r6, [r2, #32]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001f7c:	432c      	orrs	r4, r5
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8001f7e:	4d53      	ldr	r5, [pc, #332]	; (80020cc <HAL_TIM_IC_ConfigChannel+0x1a0>)
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001f80:	4640      	mov	r0, r8
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8001f82:	4035      	ands	r5, r6
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001f84:	26a0      	movs	r6, #160	; 0xa0
 8001f86:	0300      	lsls	r0, r0, #12
 8001f88:	0236      	lsls	r6, r6, #8
 8001f8a:	4030      	ands	r0, r6
 8001f8c:	4328      	orrs	r0, r5
  TIMx->CCMR2 = tmpccmr2;
 8001f8e:	61d4      	str	r4, [r2, #28]
  TIMx->CCER = tmpccer ;
 8001f90:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001f92:	69d0      	ldr	r0, [r2, #28]
 8001f94:	4c4e      	ldr	r4, [pc, #312]	; (80020d0 <HAL_TIM_IC_ConfigChannel+0x1a4>)
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001f96:	6889      	ldr	r1, [r1, #8]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001f98:	4020      	ands	r0, r4
 8001f9a:	61d0      	str	r0, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001f9c:	69d0      	ldr	r0, [r2, #28]
 8001f9e:	0209      	lsls	r1, r1, #8
 8001fa0:	4301      	orrs	r1, r0
 8001fa2:	61d1      	str	r1, [r2, #28]
  htim->State = HAL_TIM_STATE_READY;
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	223d      	movs	r2, #61	; 0x3d
 8001fa8:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(htim);
 8001faa:	2100      	movs	r1, #0
  return HAL_OK;
 8001fac:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8001fae:	3a01      	subs	r2, #1
 8001fb0:	5499      	strb	r1, [r3, r2]
}
 8001fb2:	bc0c      	pop	{r2, r3}
 8001fb4:	4690      	mov	r8, r2
 8001fb6:	4699      	mov	r9, r3
 8001fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    TIM_TI1_SetConfig(htim->Instance,
 8001fba:	6848      	ldr	r0, [r1, #4]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	4680      	mov	r8, r0
 8001fc0:	68c8      	ldr	r0, [r1, #12]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001fc2:	4c44      	ldr	r4, [pc, #272]	; (80020d4 <HAL_TIM_IC_ConfigChannel+0x1a8>)
    TIM_TI1_SetConfig(htim->Instance,
 8001fc4:	4681      	mov	r9, r0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fc6:	6a10      	ldr	r0, [r2, #32]
    TIM_TI1_SetConfig(htim->Instance,
 8001fc8:	680f      	ldr	r7, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fca:	43a8      	bics	r0, r5
 8001fcc:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fce:	6990      	ldr	r0, [r2, #24]
  tmpccer = TIMx->CCER;
 8001fd0:	6a16      	ldr	r6, [r2, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001fd2:	42a2      	cmp	r2, r4
 8001fd4:	d06d      	beq.n	80020b2 <HAL_TIM_IC_ConfigChannel+0x186>
 8001fd6:	2480      	movs	r4, #128	; 0x80
 8001fd8:	05e4      	lsls	r4, r4, #23
 8001fda:	42a2      	cmp	r2, r4
 8001fdc:	d069      	beq.n	80020b2 <HAL_TIM_IC_ConfigChannel+0x186>
 8001fde:	4c3e      	ldr	r4, [pc, #248]	; (80020d8 <HAL_TIM_IC_ConfigChannel+0x1ac>)
 8001fe0:	42a2      	cmp	r2, r4
 8001fe2:	d066      	beq.n	80020b2 <HAL_TIM_IC_ConfigChannel+0x186>
 8001fe4:	4c3d      	ldr	r4, [pc, #244]	; (80020dc <HAL_TIM_IC_ConfigChannel+0x1b0>)
 8001fe6:	42a2      	cmp	r2, r4
 8001fe8:	d063      	beq.n	80020b2 <HAL_TIM_IC_ConfigChannel+0x186>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8001fea:	4305      	orrs	r5, r0
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001fec:	20f0      	movs	r0, #240	; 0xf0
 8001fee:	4385      	bics	r5, r0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001ff0:	4648      	mov	r0, r9
 8001ff2:	24ff      	movs	r4, #255	; 0xff
 8001ff4:	0100      	lsls	r0, r0, #4
 8001ff6:	4004      	ands	r4, r0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001ff8:	200a      	movs	r0, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001ffa:	4325      	orrs	r5, r4
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001ffc:	240c      	movs	r4, #12
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001ffe:	4386      	bics	r6, r0
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002000:	4038      	ands	r0, r7
 8002002:	4330      	orrs	r0, r6
  TIMx->CCMR1 = tmpccmr1;
 8002004:	6195      	str	r5, [r2, #24]
  TIMx->CCER = tmpccer;
 8002006:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002008:	6990      	ldr	r0, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800200a:	6889      	ldr	r1, [r1, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800200c:	43a0      	bics	r0, r4
 800200e:	6190      	str	r0, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002010:	6990      	ldr	r0, [r2, #24]
 8002012:	4301      	orrs	r1, r0
 8002014:	6191      	str	r1, [r2, #24]
 8002016:	e7c5      	b.n	8001fa4 <HAL_TIM_IC_ConfigChannel+0x78>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002018:	2710      	movs	r7, #16
    TIM_TI2_SetConfig(htim->Instance,
 800201a:	68c8      	ldr	r0, [r1, #12]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	4680      	mov	r8, r0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002020:	6a15      	ldr	r5, [r2, #32]
    TIM_TI2_SetConfig(htim->Instance,
 8002022:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002024:	43bd      	bics	r5, r7
    TIM_TI2_SetConfig(htim->Instance,
 8002026:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002028:	6215      	str	r5, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800202a:	6997      	ldr	r7, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800202c:	4825      	ldr	r0, [pc, #148]	; (80020c4 <HAL_TIM_IC_ConfigChannel+0x198>)
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800202e:	0224      	lsls	r4, r4, #8
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002030:	4007      	ands	r7, r0
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002032:	4640      	mov	r0, r8
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002034:	433c      	orrs	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002036:	4f24      	ldr	r7, [pc, #144]	; (80020c8 <HAL_TIM_IC_ConfigChannel+0x19c>)
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002038:	0700      	lsls	r0, r0, #28
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800203a:	403c      	ands	r4, r7
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800203c:	0c00      	lsrs	r0, r0, #16
 800203e:	4320      	orrs	r0, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002040:	24a0      	movs	r4, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8002042:	6a15      	ldr	r5, [r2, #32]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002044:	0136      	lsls	r6, r6, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002046:	43a5      	bics	r5, r4
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002048:	4034      	ands	r4, r6
 800204a:	4325      	orrs	r5, r4
  TIMx->CCMR1 = tmpccmr1 ;
 800204c:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 800204e:	6215      	str	r5, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002050:	6990      	ldr	r0, [r2, #24]
 8002052:	4c1f      	ldr	r4, [pc, #124]	; (80020d0 <HAL_TIM_IC_ConfigChannel+0x1a4>)
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002054:	6889      	ldr	r1, [r1, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002056:	4020      	ands	r0, r4
 8002058:	6190      	str	r0, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800205a:	6990      	ldr	r0, [r2, #24]
 800205c:	0209      	lsls	r1, r1, #8
 800205e:	4301      	orrs	r1, r0
 8002060:	6191      	str	r1, [r2, #24]
 8002062:	e79f      	b.n	8001fa4 <HAL_TIM_IC_ConfigChannel+0x78>
    TIM_TI3_SetConfig(htim->Instance,
 8002064:	6808      	ldr	r0, [r1, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	4680      	mov	r8, r0
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800206a:	2003      	movs	r0, #3
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800206c:	6a16      	ldr	r6, [r2, #32]
 800206e:	4f1c      	ldr	r7, [pc, #112]	; (80020e0 <HAL_TIM_IC_ConfigChannel+0x1b4>)
    TIM_TI3_SetConfig(htim->Instance,
 8002070:	68cc      	ldr	r4, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002072:	403e      	ands	r6, r7
    TIM_TI3_SetConfig(htim->Instance,
 8002074:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002076:	6216      	str	r6, [r2, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002078:	69d7      	ldr	r7, [r2, #28]
  tmpccer = TIMx->CCER;
 800207a:	6a16      	ldr	r6, [r2, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800207c:	4387      	bics	r7, r0
  tmpccmr2 |= TIM_ICSelection;
 800207e:	433d      	orrs	r5, r7
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002080:	27f0      	movs	r7, #240	; 0xf0
 8002082:	43bd      	bics	r5, r7
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002084:	0127      	lsls	r7, r4, #4
 8002086:	24ff      	movs	r4, #255	; 0xff
 8002088:	403c      	ands	r4, r7
 800208a:	432c      	orrs	r4, r5
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800208c:	4d15      	ldr	r5, [pc, #84]	; (80020e4 <HAL_TIM_IC_ConfigChannel+0x1b8>)
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800208e:	4640      	mov	r0, r8
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002090:	4035      	ands	r5, r6
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002092:	26a0      	movs	r6, #160	; 0xa0
  TIMx->CCMR2 = tmpccmr2;
 8002094:	61d4      	str	r4, [r2, #28]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002096:	240c      	movs	r4, #12
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002098:	0200      	lsls	r0, r0, #8
 800209a:	0136      	lsls	r6, r6, #4
 800209c:	4030      	ands	r0, r6
 800209e:	4328      	orrs	r0, r5
  TIMx->CCER = tmpccer;
 80020a0:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80020a2:	69d0      	ldr	r0, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80020a4:	6889      	ldr	r1, [r1, #8]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80020a6:	43a0      	bics	r0, r4
 80020a8:	61d0      	str	r0, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80020aa:	69d0      	ldr	r0, [r2, #28]
 80020ac:	4301      	orrs	r1, r0
 80020ae:	61d1      	str	r1, [r2, #28]
 80020b0:	e778      	b.n	8001fa4 <HAL_TIM_IC_ConfigChannel+0x78>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80020b2:	2503      	movs	r5, #3
 80020b4:	43a8      	bics	r0, r5
 80020b6:	0005      	movs	r5, r0
    tmpccmr1 |= TIM_ICSelection;
 80020b8:	4640      	mov	r0, r8
 80020ba:	4328      	orrs	r0, r5
 80020bc:	0005      	movs	r5, r0
 80020be:	e795      	b.n	8001fec <HAL_TIM_IC_ConfigChannel+0xc0>
 80020c0:	ffffefff 	.word	0xffffefff
 80020c4:	fffffcff 	.word	0xfffffcff
 80020c8:	ffff0fff 	.word	0xffff0fff
 80020cc:	ffff5fff 	.word	0xffff5fff
 80020d0:	fffff3ff 	.word	0xfffff3ff
 80020d4:	40012c00 	.word	0x40012c00
 80020d8:	40000400 	.word	0x40000400
 80020dc:	40014000 	.word	0x40014000
 80020e0:	fffffeff 	.word	0xfffffeff
 80020e4:	fffff5ff 	.word	0xfffff5ff

080020e8 <HAL_TIM_PWM_ConfigChannel>:
{
 80020e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80020ea:	243c      	movs	r4, #60	; 0x3c
 80020ec:	5d05      	ldrb	r5, [r0, r4]
{
 80020ee:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 80020f0:	2002      	movs	r0, #2
 80020f2:	2d01      	cmp	r5, #1
 80020f4:	d048      	beq.n	8002188 <HAL_TIM_PWM_ConfigChannel+0xa0>
 80020f6:	2501      	movs	r5, #1
 80020f8:	551d      	strb	r5, [r3, r4]
  htim->State = HAL_TIM_STATE_BUSY;
 80020fa:	3401      	adds	r4, #1
 80020fc:	5518      	strb	r0, [r3, r4]
  switch (Channel)
 80020fe:	2a04      	cmp	r2, #4
 8002100:	d043      	beq.n	800218a <HAL_TIM_PWM_ConfigChannel+0xa2>
 8002102:	d800      	bhi.n	8002106 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002104:	e0a6      	b.n	8002254 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002106:	2a08      	cmp	r2, #8
 8002108:	d100      	bne.n	800210c <HAL_TIM_PWM_ConfigChannel+0x24>
 800210a:	e074      	b.n	80021f6 <HAL_TIM_PWM_ConfigChannel+0x10e>
 800210c:	2a0c      	cmp	r2, #12
 800210e:	d134      	bne.n	800217a <HAL_TIM_PWM_ConfigChannel+0x92>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002110:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002112:	4c81      	ldr	r4, [pc, #516]	; (8002318 <HAL_TIM_PWM_ConfigChannel+0x230>)
 8002114:	6a10      	ldr	r0, [r2, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002116:	4d81      	ldr	r5, [pc, #516]	; (800231c <HAL_TIM_PWM_ConfigChannel+0x234>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002118:	4020      	ands	r0, r4
 800211a:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 800211c:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 800211e:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8002120:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002122:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002124:	680d      	ldr	r5, [r1, #0]
 8002126:	022d      	lsls	r5, r5, #8
 8002128:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC4P;
 800212a:	4c7d      	ldr	r4, [pc, #500]	; (8002320 <HAL_TIM_PWM_ConfigChannel+0x238>)
 800212c:	4004      	ands	r4, r0
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800212e:	6888      	ldr	r0, [r1, #8]
 8002130:	0300      	lsls	r0, r0, #12
 8002132:	4320      	orrs	r0, r4
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002134:	4c7b      	ldr	r4, [pc, #492]	; (8002324 <HAL_TIM_PWM_ConfigChannel+0x23c>)
 8002136:	42a2      	cmp	r2, r4
 8002138:	d100      	bne.n	800213c <HAL_TIM_PWM_ConfigChannel+0x54>
 800213a:	e0ca      	b.n	80022d2 <HAL_TIM_PWM_ConfigChannel+0x1ea>
 800213c:	4c7a      	ldr	r4, [pc, #488]	; (8002328 <HAL_TIM_PWM_ConfigChannel+0x240>)
 800213e:	42a2      	cmp	r2, r4
 8002140:	d100      	bne.n	8002144 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8002142:	e0c6      	b.n	80022d2 <HAL_TIM_PWM_ConfigChannel+0x1ea>
 8002144:	4c79      	ldr	r4, [pc, #484]	; (800232c <HAL_TIM_PWM_ConfigChannel+0x244>)
 8002146:	42a2      	cmp	r2, r4
 8002148:	d100      	bne.n	800214c <HAL_TIM_PWM_ConfigChannel+0x64>
 800214a:	e0c2      	b.n	80022d2 <HAL_TIM_PWM_ConfigChannel+0x1ea>
 800214c:	4c78      	ldr	r4, [pc, #480]	; (8002330 <HAL_TIM_PWM_ConfigChannel+0x248>)
 800214e:	42a2      	cmp	r2, r4
 8002150:	d100      	bne.n	8002154 <HAL_TIM_PWM_ConfigChannel+0x6c>
 8002152:	e0be      	b.n	80022d2 <HAL_TIM_PWM_ConfigChannel+0x1ea>
  TIMx->CCR4 = OC_Config->Pulse;
 8002154:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002156:	6056      	str	r6, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002158:	61d5      	str	r5, [r2, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800215a:	6414      	str	r4, [r2, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800215c:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800215e:	2080      	movs	r0, #128	; 0x80
 8002160:	69d4      	ldr	r4, [r2, #28]
 8002162:	0100      	lsls	r0, r0, #4
 8002164:	4320      	orrs	r0, r4
 8002166:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002168:	69d0      	ldr	r0, [r2, #28]
 800216a:	4c72      	ldr	r4, [pc, #456]	; (8002334 <HAL_TIM_PWM_ConfigChannel+0x24c>)
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800216c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800216e:	4020      	ands	r0, r4
 8002170:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002172:	69d0      	ldr	r0, [r2, #28]
 8002174:	0209      	lsls	r1, r1, #8
 8002176:	4301      	orrs	r1, r0
 8002178:	61d1      	str	r1, [r2, #28]
  htim->State = HAL_TIM_STATE_READY;
 800217a:	2101      	movs	r1, #1
 800217c:	223d      	movs	r2, #61	; 0x3d
 800217e:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(htim);
 8002180:	2100      	movs	r1, #0
  return HAL_OK;
 8002182:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8002184:	3a01      	subs	r2, #1
 8002186:	5499      	strb	r1, [r3, r2]
}
 8002188:	bdf0      	pop	{r4, r5, r6, r7, pc}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800218a:	2410      	movs	r4, #16
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800218c:	681a      	ldr	r2, [r3, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800218e:	4d63      	ldr	r5, [pc, #396]	; (800231c <HAL_TIM_PWM_ConfigChannel+0x234>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002190:	6a10      	ldr	r0, [r2, #32]
 8002192:	43a0      	bics	r0, r4
 8002194:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8002196:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8002198:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 800219a:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800219c:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800219e:	680d      	ldr	r5, [r1, #0]
 80021a0:	022d      	lsls	r5, r5, #8
 80021a2:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC2P;
 80021a4:	2420      	movs	r4, #32
 80021a6:	43a0      	bics	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80021a8:	688c      	ldr	r4, [r1, #8]
 80021aa:	0124      	lsls	r4, r4, #4
 80021ac:	4320      	orrs	r0, r4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80021ae:	4c5d      	ldr	r4, [pc, #372]	; (8002324 <HAL_TIM_PWM_ConfigChannel+0x23c>)
 80021b0:	42a2      	cmp	r2, r4
 80021b2:	d100      	bne.n	80021b6 <HAL_TIM_PWM_ConfigChannel+0xce>
 80021b4:	e093      	b.n	80022de <HAL_TIM_PWM_ConfigChannel+0x1f6>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80021b6:	4c5c      	ldr	r4, [pc, #368]	; (8002328 <HAL_TIM_PWM_ConfigChannel+0x240>)
 80021b8:	42a2      	cmp	r2, r4
 80021ba:	d100      	bne.n	80021be <HAL_TIM_PWM_ConfigChannel+0xd6>
 80021bc:	e096      	b.n	80022ec <HAL_TIM_PWM_ConfigChannel+0x204>
 80021be:	4c5b      	ldr	r4, [pc, #364]	; (800232c <HAL_TIM_PWM_ConfigChannel+0x244>)
 80021c0:	42a2      	cmp	r2, r4
 80021c2:	d100      	bne.n	80021c6 <HAL_TIM_PWM_ConfigChannel+0xde>
 80021c4:	e092      	b.n	80022ec <HAL_TIM_PWM_ConfigChannel+0x204>
 80021c6:	4c5a      	ldr	r4, [pc, #360]	; (8002330 <HAL_TIM_PWM_ConfigChannel+0x248>)
 80021c8:	42a2      	cmp	r2, r4
 80021ca:	d100      	bne.n	80021ce <HAL_TIM_PWM_ConfigChannel+0xe6>
 80021cc:	e08e      	b.n	80022ec <HAL_TIM_PWM_ConfigChannel+0x204>
  TIMx->CCR2 = OC_Config->Pulse;
 80021ce:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80021d0:	6056      	str	r6, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 80021d2:	6195      	str	r5, [r2, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80021d4:	6394      	str	r4, [r2, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80021d6:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80021d8:	2080      	movs	r0, #128	; 0x80
 80021da:	6994      	ldr	r4, [r2, #24]
 80021dc:	0100      	lsls	r0, r0, #4
 80021de:	4320      	orrs	r0, r4
 80021e0:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80021e2:	6990      	ldr	r0, [r2, #24]
 80021e4:	4c53      	ldr	r4, [pc, #332]	; (8002334 <HAL_TIM_PWM_ConfigChannel+0x24c>)
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80021e6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80021e8:	4020      	ands	r0, r4
 80021ea:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80021ec:	6990      	ldr	r0, [r2, #24]
 80021ee:	0209      	lsls	r1, r1, #8
 80021f0:	4301      	orrs	r1, r0
 80021f2:	6191      	str	r1, [r2, #24]
    break;
 80021f4:	e7c1      	b.n	800217a <HAL_TIM_PWM_ConfigChannel+0x92>
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80021f6:	2673      	movs	r6, #115	; 0x73
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80021f8:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80021fa:	4c4f      	ldr	r4, [pc, #316]	; (8002338 <HAL_TIM_PWM_ConfigChannel+0x250>)
 80021fc:	6a10      	ldr	r0, [r2, #32]
 80021fe:	4020      	ands	r0, r4
 8002200:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8002202:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8002204:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8002206:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002208:	43b4      	bics	r4, r6
  tmpccmrx |= OC_Config->OCMode;
 800220a:	680e      	ldr	r6, [r1, #0]
 800220c:	4326      	orrs	r6, r4
  tmpccer &= ~TIM_CCER_CC3P;
 800220e:	4c4b      	ldr	r4, [pc, #300]	; (800233c <HAL_TIM_PWM_ConfigChannel+0x254>)
 8002210:	4020      	ands	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002212:	688c      	ldr	r4, [r1, #8]
 8002214:	0224      	lsls	r4, r4, #8
 8002216:	4320      	orrs	r0, r4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002218:	4c42      	ldr	r4, [pc, #264]	; (8002324 <HAL_TIM_PWM_ConfigChannel+0x23c>)
 800221a:	42a2      	cmp	r2, r4
 800221c:	d04a      	beq.n	80022b4 <HAL_TIM_PWM_ConfigChannel+0x1cc>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800221e:	4c42      	ldr	r4, [pc, #264]	; (8002328 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8002220:	42a2      	cmp	r2, r4
 8002222:	d04e      	beq.n	80022c2 <HAL_TIM_PWM_ConfigChannel+0x1da>
 8002224:	4c41      	ldr	r4, [pc, #260]	; (800232c <HAL_TIM_PWM_ConfigChannel+0x244>)
 8002226:	42a2      	cmp	r2, r4
 8002228:	d04b      	beq.n	80022c2 <HAL_TIM_PWM_ConfigChannel+0x1da>
 800222a:	4c41      	ldr	r4, [pc, #260]	; (8002330 <HAL_TIM_PWM_ConfigChannel+0x248>)
 800222c:	42a2      	cmp	r2, r4
 800222e:	d048      	beq.n	80022c2 <HAL_TIM_PWM_ConfigChannel+0x1da>
  TIMx->CCR3 = OC_Config->Pulse;
 8002230:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002232:	6055      	str	r5, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002234:	61d6      	str	r6, [r2, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8002236:	63d4      	str	r4, [r2, #60]	; 0x3c
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002238:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 800223a:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800223c:	69d0      	ldr	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800223e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002240:	4320      	orrs	r0, r4
 8002242:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002244:	69d0      	ldr	r0, [r2, #28]
 8002246:	3c04      	subs	r4, #4
 8002248:	43a0      	bics	r0, r4
 800224a:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800224c:	69d0      	ldr	r0, [r2, #28]
 800224e:	4301      	orrs	r1, r0
 8002250:	61d1      	str	r1, [r2, #28]
    break;
 8002252:	e792      	b.n	800217a <HAL_TIM_PWM_ConfigChannel+0x92>
  switch (Channel)
 8002254:	2a00      	cmp	r2, #0
 8002256:	d000      	beq.n	800225a <HAL_TIM_PWM_ConfigChannel+0x172>
 8002258:	e78f      	b.n	800217a <HAL_TIM_PWM_ConfigChannel+0x92>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800225a:	681a      	ldr	r2, [r3, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800225c:	2773      	movs	r7, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800225e:	6a14      	ldr	r4, [r2, #32]
 8002260:	43ac      	bics	r4, r5
 8002262:	6214      	str	r4, [r2, #32]
  tmpccer = TIMx->CCER;
 8002264:	6a14      	ldr	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8002266:	6856      	ldr	r6, [r2, #4]
  tmpccer &= ~TIM_CCER_CC1P;
 8002268:	4384      	bics	r4, r0
 800226a:	0020      	movs	r0, r4
  tmpccmrx = TIMx->CCMR1;
 800226c:	6995      	ldr	r5, [r2, #24]
  tmpccer |= OC_Config->OCPolarity;
 800226e:	688c      	ldr	r4, [r1, #8]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002270:	43bd      	bics	r5, r7
  tmpccer |= OC_Config->OCPolarity;
 8002272:	4320      	orrs	r0, r4
  tmpccmrx |= OC_Config->OCMode;
 8002274:	680f      	ldr	r7, [r1, #0]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002276:	4c2b      	ldr	r4, [pc, #172]	; (8002324 <HAL_TIM_PWM_ConfigChannel+0x23c>)
  tmpccmrx |= OC_Config->OCMode;
 8002278:	433d      	orrs	r5, r7
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800227a:	42a2      	cmp	r2, r4
 800227c:	d03e      	beq.n	80022fc <HAL_TIM_PWM_ConfigChannel+0x214>
 800227e:	4c2a      	ldr	r4, [pc, #168]	; (8002328 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8002280:	42a2      	cmp	r2, r4
 8002282:	d03b      	beq.n	80022fc <HAL_TIM_PWM_ConfigChannel+0x214>
 8002284:	4c29      	ldr	r4, [pc, #164]	; (800232c <HAL_TIM_PWM_ConfigChannel+0x244>)
 8002286:	42a2      	cmp	r2, r4
 8002288:	d038      	beq.n	80022fc <HAL_TIM_PWM_ConfigChannel+0x214>
 800228a:	4c29      	ldr	r4, [pc, #164]	; (8002330 <HAL_TIM_PWM_ConfigChannel+0x248>)
 800228c:	42a2      	cmp	r2, r4
 800228e:	d035      	beq.n	80022fc <HAL_TIM_PWM_ConfigChannel+0x214>
  TIMx->CCR1 = OC_Config->Pulse;
 8002290:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002292:	6056      	str	r6, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002294:	6195      	str	r5, [r2, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8002296:	6354      	str	r4, [r2, #52]	; 0x34
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002298:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 800229a:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800229c:	6990      	ldr	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800229e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022a0:	4320      	orrs	r0, r4
 80022a2:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80022a4:	6990      	ldr	r0, [r2, #24]
 80022a6:	3c04      	subs	r4, #4
 80022a8:	43a0      	bics	r0, r4
 80022aa:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022ac:	6990      	ldr	r0, [r2, #24]
 80022ae:	4301      	orrs	r1, r0
 80022b0:	6191      	str	r1, [r2, #24]
    break;
 80022b2:	e762      	b.n	800217a <HAL_TIM_PWM_ConfigChannel+0x92>
    tmpccer &= ~TIM_CCER_CC3NP;
 80022b4:	4c22      	ldr	r4, [pc, #136]	; (8002340 <HAL_TIM_PWM_ConfigChannel+0x258>)
 80022b6:	4004      	ands	r4, r0
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80022b8:	68c8      	ldr	r0, [r1, #12]
 80022ba:	0200      	lsls	r0, r0, #8
 80022bc:	4320      	orrs	r0, r4
    tmpccer &= ~TIM_CCER_CC3NE;
 80022be:	4c1d      	ldr	r4, [pc, #116]	; (8002334 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 80022c0:	4020      	ands	r0, r4
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80022c2:	4c20      	ldr	r4, [pc, #128]	; (8002344 <HAL_TIM_PWM_ConfigChannel+0x25c>)
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80022c4:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80022c6:	402c      	ands	r4, r5
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80022c8:	698d      	ldr	r5, [r1, #24]
 80022ca:	433d      	orrs	r5, r7
 80022cc:	012d      	lsls	r5, r5, #4
 80022ce:	4325      	orrs	r5, r4
 80022d0:	e7ae      	b.n	8002230 <HAL_TIM_PWM_ConfigChannel+0x148>
    tmpcr2 &= ~TIM_CR2_OIS4;
 80022d2:	4c1d      	ldr	r4, [pc, #116]	; (8002348 <HAL_TIM_PWM_ConfigChannel+0x260>)
 80022d4:	4034      	ands	r4, r6
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80022d6:	694e      	ldr	r6, [r1, #20]
 80022d8:	01b6      	lsls	r6, r6, #6
 80022da:	4326      	orrs	r6, r4
 80022dc:	e73a      	b.n	8002154 <HAL_TIM_PWM_ConfigChannel+0x6c>
    tmpccer &= ~TIM_CCER_CC2NP;
 80022de:	2480      	movs	r4, #128	; 0x80
 80022e0:	43a0      	bics	r0, r4
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80022e2:	68cc      	ldr	r4, [r1, #12]
 80022e4:	0127      	lsls	r7, r4, #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80022e6:	2440      	movs	r4, #64	; 0x40
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80022e8:	4338      	orrs	r0, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 80022ea:	43a0      	bics	r0, r4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80022ec:	4c17      	ldr	r4, [pc, #92]	; (800234c <HAL_TIM_PWM_ConfigChannel+0x264>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80022ee:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80022f0:	4034      	ands	r4, r6
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80022f2:	698e      	ldr	r6, [r1, #24]
 80022f4:	433e      	orrs	r6, r7
 80022f6:	00b6      	lsls	r6, r6, #2
 80022f8:	4326      	orrs	r6, r4
 80022fa:	e768      	b.n	80021ce <HAL_TIM_PWM_ConfigChannel+0xe6>
    tmpccer &= ~TIM_CCER_CC1NP;
 80022fc:	2408      	movs	r4, #8
 80022fe:	43a0      	bics	r0, r4
    tmpccer |= OC_Config->OCNPolarity;
 8002300:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8002302:	698f      	ldr	r7, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 8002304:	4320      	orrs	r0, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 8002306:	2404      	movs	r4, #4
 8002308:	43a0      	bics	r0, r4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800230a:	4c11      	ldr	r4, [pc, #68]	; (8002350 <HAL_TIM_PWM_ConfigChannel+0x268>)
 800230c:	4026      	ands	r6, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 800230e:	694c      	ldr	r4, [r1, #20]
 8002310:	433c      	orrs	r4, r7
 8002312:	4326      	orrs	r6, r4
 8002314:	e7bc      	b.n	8002290 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8002316:	46c0      	nop			; (mov r8, r8)
 8002318:	ffffefff 	.word	0xffffefff
 800231c:	ffff8cff 	.word	0xffff8cff
 8002320:	ffffdfff 	.word	0xffffdfff
 8002324:	40012c00 	.word	0x40012c00
 8002328:	40014000 	.word	0x40014000
 800232c:	40014400 	.word	0x40014400
 8002330:	40014800 	.word	0x40014800
 8002334:	fffffbff 	.word	0xfffffbff
 8002338:	fffffeff 	.word	0xfffffeff
 800233c:	fffffdff 	.word	0xfffffdff
 8002340:	fffff7ff 	.word	0xfffff7ff
 8002344:	ffffcfff 	.word	0xffffcfff
 8002348:	ffffbfff 	.word	0xffffbfff
 800234c:	fffff3ff 	.word	0xfffff3ff
 8002350:	fffffcff 	.word	0xfffffcff

08002354 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002354:	223c      	movs	r2, #60	; 0x3c
{
 8002356:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8002358:	5c84      	ldrb	r4, [r0, r2]
 800235a:	2302      	movs	r3, #2
 800235c:	2c01      	cmp	r4, #1
 800235e:	d03d      	beq.n	80023dc <HAL_TIM_ConfigClockSource+0x88>
 8002360:	2401      	movs	r4, #1
 8002362:	5484      	strb	r4, [r0, r2]
  htim->State = HAL_TIM_STATE_BUSY;
 8002364:	3201      	adds	r2, #1
 8002366:	5483      	strb	r3, [r0, r2]
  tmpsmcr = htim->Instance->SMCR;
 8002368:	6803      	ldr	r3, [r0, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800236a:	4d59      	ldr	r5, [pc, #356]	; (80024d0 <HAL_TIM_ConfigClockSource+0x17c>)
  tmpsmcr = htim->Instance->SMCR;
 800236c:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800236e:	402a      	ands	r2, r5
  htim->Instance->SMCR = tmpsmcr;
 8002370:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8002372:	680a      	ldr	r2, [r1, #0]
 8002374:	2a40      	cmp	r2, #64	; 0x40
 8002376:	d100      	bne.n	800237a <HAL_TIM_ConfigClockSource+0x26>
 8002378:	e074      	b.n	8002464 <HAL_TIM_ConfigClockSource+0x110>
 800237a:	d91b      	bls.n	80023b4 <HAL_TIM_ConfigClockSource+0x60>
 800237c:	2a70      	cmp	r2, #112	; 0x70
 800237e:	d061      	beq.n	8002444 <HAL_TIM_ConfigClockSource+0xf0>
 8002380:	d92e      	bls.n	80023e0 <HAL_TIM_ConfigClockSource+0x8c>
 8002382:	2480      	movs	r4, #128	; 0x80
 8002384:	0164      	lsls	r4, r4, #5
 8002386:	42a2      	cmp	r2, r4
 8002388:	d057      	beq.n	800243a <HAL_TIM_ConfigClockSource+0xe6>
 800238a:	2480      	movs	r4, #128	; 0x80
 800238c:	01a4      	lsls	r4, r4, #6
 800238e:	42a2      	cmp	r2, r4
 8002390:	d11d      	bne.n	80023ce <HAL_TIM_ConfigClockSource+0x7a>
  tmpsmcr = TIMx->SMCR;
 8002392:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002394:	4c4f      	ldr	r4, [pc, #316]	; (80024d4 <HAL_TIM_ConfigClockSource+0x180>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002396:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002398:	4014      	ands	r4, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800239a:	688a      	ldr	r2, [r1, #8]
 800239c:	68c9      	ldr	r1, [r1, #12]
 800239e:	432a      	orrs	r2, r5
 80023a0:	0209      	lsls	r1, r1, #8
 80023a2:	430a      	orrs	r2, r1
 80023a4:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 80023a6:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023a8:	2280      	movs	r2, #128	; 0x80
 80023aa:	6899      	ldr	r1, [r3, #8]
 80023ac:	01d2      	lsls	r2, r2, #7
 80023ae:	430a      	orrs	r2, r1
 80023b0:	609a      	str	r2, [r3, #8]
    break;
 80023b2:	e00c      	b.n	80023ce <HAL_TIM_ConfigClockSource+0x7a>
  switch (sClockSourceConfig->ClockSource)
 80023b4:	2a10      	cmp	r2, #16
 80023b6:	d030      	beq.n	800241a <HAL_TIM_ConfigClockSource+0xc6>
 80023b8:	d936      	bls.n	8002428 <HAL_TIM_ConfigClockSource+0xd4>
 80023ba:	2a20      	cmp	r2, #32
 80023bc:	d069      	beq.n	8002492 <HAL_TIM_ConfigClockSource+0x13e>
 80023be:	2a30      	cmp	r2, #48	; 0x30
 80023c0:	d105      	bne.n	80023ce <HAL_TIM_ConfigClockSource+0x7a>
   tmpsmcr &= ~TIM_SMCR_TS;
 80023c2:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 80023c4:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80023c6:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80023c8:	3939      	subs	r1, #57	; 0x39
 80023ca:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 80023cc:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 80023ce:	2201      	movs	r2, #1
 80023d0:	233d      	movs	r3, #61	; 0x3d
 80023d2:	54c2      	strb	r2, [r0, r3]
  __HAL_UNLOCK(htim);
 80023d4:	2200      	movs	r2, #0
 80023d6:	3b01      	subs	r3, #1
 80023d8:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	0018      	movs	r0, r3
 80023de:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80023e0:	2a50      	cmp	r2, #80	; 0x50
 80023e2:	d05d      	beq.n	80024a0 <HAL_TIM_ConfigClockSource+0x14c>
 80023e4:	2a60      	cmp	r2, #96	; 0x60
 80023e6:	d1f2      	bne.n	80023ce <HAL_TIM_ConfigClockSource+0x7a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023e8:	2510      	movs	r5, #16
 80023ea:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80023ec:	684a      	ldr	r2, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023ee:	43ac      	bics	r4, r5
      TIM_TI2_ConfigInputStage(htim->Instance,
 80023f0:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023f2:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023f4:	699d      	ldr	r5, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023f6:	4e38      	ldr	r6, [pc, #224]	; (80024d8 <HAL_TIM_ConfigClockSource+0x184>)
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80023f8:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023fa:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80023fc:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80023fe:	25a0      	movs	r5, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8002400:	6a1c      	ldr	r4, [r3, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8002402:	6199      	str	r1, [r3, #24]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002404:	2170      	movs	r1, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002406:	43ac      	bics	r4, r5
  tmpccer |= (TIM_ICPolarity << 4U);
 8002408:	0112      	lsls	r2, r2, #4
 800240a:	4322      	orrs	r2, r4
  TIMx->CCER = tmpccer;
 800240c:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800240e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002410:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002412:	3909      	subs	r1, #9
 8002414:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	e7d9      	b.n	80023ce <HAL_TIM_ConfigClockSource+0x7a>
   tmpsmcr &= ~TIM_SMCR_TS;
 800241a:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 800241c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800241e:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002420:	3959      	subs	r1, #89	; 0x59
 8002422:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 8002424:	609a      	str	r2, [r3, #8]
 8002426:	e7d2      	b.n	80023ce <HAL_TIM_ConfigClockSource+0x7a>
  switch (sClockSourceConfig->ClockSource)
 8002428:	2a00      	cmp	r2, #0
 800242a:	d1d0      	bne.n	80023ce <HAL_TIM_ConfigClockSource+0x7a>
   tmpsmcr &= ~TIM_SMCR_TS;
 800242c:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 800242e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002430:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002432:	3969      	subs	r1, #105	; 0x69
 8002434:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 8002436:	609a      	str	r2, [r3, #8]
 8002438:	e7c9      	b.n	80023ce <HAL_TIM_ConfigClockSource+0x7a>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800243a:	2107      	movs	r1, #7
 800243c:	689a      	ldr	r2, [r3, #8]
 800243e:	438a      	bics	r2, r1
 8002440:	609a      	str	r2, [r3, #8]
    break;
 8002442:	e7c4      	b.n	80023ce <HAL_TIM_ConfigClockSource+0x7a>
  tmpsmcr = TIMx->SMCR;
 8002444:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002446:	4c23      	ldr	r4, [pc, #140]	; (80024d4 <HAL_TIM_ConfigClockSource+0x180>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002448:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800244a:	4014      	ands	r4, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800244c:	688a      	ldr	r2, [r1, #8]
 800244e:	68c9      	ldr	r1, [r1, #12]
 8002450:	432a      	orrs	r2, r5
 8002452:	0209      	lsls	r1, r1, #8
 8002454:	430a      	orrs	r2, r1
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002456:	2177      	movs	r1, #119	; 0x77
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002458:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 800245a:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 800245c:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800245e:	430a      	orrs	r2, r1
      htim->Instance->SMCR = tmpsmcr;
 8002460:	609a      	str	r2, [r3, #8]
    break;
 8002462:	e7b4      	b.n	80023ce <HAL_TIM_ConfigClockSource+0x7a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002464:	684d      	ldr	r5, [r1, #4]
 8002466:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 8002468:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800246a:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800246c:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800246e:	43a6      	bics	r6, r4
 8002470:	621e      	str	r6, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002472:	26f0      	movs	r6, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8002474:	699c      	ldr	r4, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002476:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002478:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800247a:	240a      	movs	r4, #10
 800247c:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 800247e:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8002480:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002482:	6219      	str	r1, [r3, #32]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002484:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8002486:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002488:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800248a:	3929      	subs	r1, #41	; 0x29
 800248c:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 800248e:	609a      	str	r2, [r3, #8]
 8002490:	e79d      	b.n	80023ce <HAL_TIM_ConfigClockSource+0x7a>
   tmpsmcr &= ~TIM_SMCR_TS;
 8002492:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8002494:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002496:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002498:	3949      	subs	r1, #73	; 0x49
 800249a:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 800249c:	609a      	str	r2, [r3, #8]
 800249e:	e796      	b.n	80023ce <HAL_TIM_ConfigClockSource+0x7a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024a0:	684d      	ldr	r5, [r1, #4]
 80024a2:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 80024a4:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024a6:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024a8:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024aa:	43a6      	bics	r6, r4
 80024ac:	621e      	str	r6, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024ae:	26f0      	movs	r6, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 80024b0:	699c      	ldr	r4, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024b2:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024b4:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024b6:	240a      	movs	r4, #10
 80024b8:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 80024ba:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 80024bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024be:	6219      	str	r1, [r3, #32]
   tmpsmcr &= ~TIM_SMCR_TS;
 80024c0:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 80024c2:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80024c4:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80024c6:	3919      	subs	r1, #25
 80024c8:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 80024ca:	609a      	str	r2, [r3, #8]
 80024cc:	e77f      	b.n	80023ce <HAL_TIM_ConfigClockSource+0x7a>
 80024ce:	46c0      	nop			; (mov r8, r8)
 80024d0:	ffff0088 	.word	0xffff0088
 80024d4:	ffff00ff 	.word	0xffff00ff
 80024d8:	ffff0fff 	.word	0xffff0fff

080024dc <HAL_TIM_SlaveConfigSynchronization>:
  __HAL_LOCK(htim);
 80024dc:	233c      	movs	r3, #60	; 0x3c
{
 80024de:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80024e0:	5cc4      	ldrb	r4, [r0, r3]
{
 80024e2:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 80024e4:	2002      	movs	r0, #2
 80024e6:	2c01      	cmp	r4, #1
 80024e8:	d100      	bne.n	80024ec <HAL_TIM_SlaveConfigSynchronization+0x10>
    }
 80024ea:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 80024ec:	2501      	movs	r5, #1
  tmpsmcr &= ~TIM_SMCR_TS;
 80024ee:	2470      	movs	r4, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_SMS;
 80024f0:	2607      	movs	r6, #7
  __HAL_LOCK(htim);
 80024f2:	54d5      	strb	r5, [r2, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 80024f4:	3301      	adds	r3, #1
 80024f6:	54d0      	strb	r0, [r2, r3]
  tmpsmcr = htim->Instance->SMCR;
 80024f8:	6813      	ldr	r3, [r2, #0]
 80024fa:	6898      	ldr	r0, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80024fc:	43a0      	bics	r0, r4
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80024fe:	684c      	ldr	r4, [r1, #4]
 8002500:	4320      	orrs	r0, r4
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002502:	43b0      	bics	r0, r6
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002504:	680e      	ldr	r6, [r1, #0]
 8002506:	4330      	orrs	r0, r6
  htim->Instance->SMCR = tmpsmcr;
 8002508:	6098      	str	r0, [r3, #8]
  switch (sSlaveConfig->InputTrigger)
 800250a:	2c50      	cmp	r4, #80	; 0x50
 800250c:	d042      	beq.n	8002594 <HAL_TIM_SlaveConfigSynchronization+0xb8>
 800250e:	d91e      	bls.n	800254e <HAL_TIM_SlaveConfigSynchronization+0x72>
 8002510:	2c60      	cmp	r4, #96	; 0x60
 8002512:	d02b      	beq.n	800256c <HAL_TIM_SlaveConfigSynchronization+0x90>
 8002514:	2c70      	cmp	r4, #112	; 0x70
 8002516:	d10a      	bne.n	800252e <HAL_TIM_SlaveConfigSynchronization+0x52>
  tmpsmcr = TIMx->SMCR;
 8002518:	689c      	ldr	r4, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800251a:	4827      	ldr	r0, [pc, #156]	; (80025b8 <HAL_TIM_SlaveConfigSynchronization+0xdc>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800251c:	688d      	ldr	r5, [r1, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800251e:	4004      	ands	r4, r0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002520:	68c8      	ldr	r0, [r1, #12]
 8002522:	6909      	ldr	r1, [r1, #16]
 8002524:	4328      	orrs	r0, r5
 8002526:	0209      	lsls	r1, r1, #8
 8002528:	4301      	orrs	r1, r0
 800252a:	4321      	orrs	r1, r4
  TIMx->SMCR = tmpsmcr;
 800252c:	6099      	str	r1, [r3, #8]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800252e:	2040      	movs	r0, #64	; 0x40
 8002530:	68d9      	ldr	r1, [r3, #12]
 8002532:	4381      	bics	r1, r0
 8002534:	60d9      	str	r1, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002536:	68d9      	ldr	r1, [r3, #12]
 8002538:	4820      	ldr	r0, [pc, #128]	; (80025bc <HAL_TIM_SlaveConfigSynchronization+0xe0>)
 800253a:	4001      	ands	r1, r0
 800253c:	60d9      	str	r1, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 800253e:	2101      	movs	r1, #1
 8002540:	233d      	movs	r3, #61	; 0x3d
 8002542:	54d1      	strb	r1, [r2, r3]
  __HAL_UNLOCK(htim);
 8002544:	2100      	movs	r1, #0
 8002546:	3b01      	subs	r3, #1
 8002548:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 800254a:	2000      	movs	r0, #0
 800254c:	e7cd      	b.n	80024ea <HAL_TIM_SlaveConfigSynchronization+0xe>
  switch (sSlaveConfig->InputTrigger)
 800254e:	2c40      	cmp	r4, #64	; 0x40
 8002550:	d1ed      	bne.n	800252e <HAL_TIM_SlaveConfigSynchronization+0x52>
      tmpccer = htim->Instance->CCER;
 8002552:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002554:	6a18      	ldr	r0, [r3, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002556:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002558:	43a8      	bics	r0, r5
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800255a:	25f0      	movs	r5, #240	; 0xf0
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800255c:	6218      	str	r0, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800255e:	6998      	ldr	r0, [r3, #24]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002560:	0109      	lsls	r1, r1, #4
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002562:	43a8      	bics	r0, r5
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002564:	4301      	orrs	r1, r0
      htim->Instance->CCMR1 = tmpccmr1;
 8002566:	6199      	str	r1, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002568:	621c      	str	r4, [r3, #32]
 800256a:	e7e0      	b.n	800252e <HAL_TIM_SlaveConfigSynchronization+0x52>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800256c:	2510      	movs	r5, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 800256e:	6888      	ldr	r0, [r1, #8]
 8002570:	690c      	ldr	r4, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002572:	6a19      	ldr	r1, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002574:	4e12      	ldr	r6, [pc, #72]	; (80025c0 <HAL_TIM_SlaveConfigSynchronization+0xe4>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002576:	43a9      	bics	r1, r5
 8002578:	6219      	str	r1, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800257a:	699d      	ldr	r5, [r3, #24]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800257c:	0324      	lsls	r4, r4, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800257e:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002580:	432c      	orrs	r4, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002582:	25a0      	movs	r5, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8002584:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8002586:	619c      	str	r4, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002588:	43a9      	bics	r1, r5
 800258a:	000d      	movs	r5, r1
  tmpccer |= (TIM_ICPolarity << 4U);
 800258c:	0101      	lsls	r1, r0, #4
 800258e:	4329      	orrs	r1, r5
  TIMx->CCER = tmpccer;
 8002590:	6219      	str	r1, [r3, #32]
 8002592:	e7cc      	b.n	800252e <HAL_TIM_SlaveConfigSynchronization+0x52>
  tmpccer = TIMx->CCER;
 8002594:	6a1c      	ldr	r4, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002596:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002598:	6888      	ldr	r0, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800259a:	43ae      	bics	r6, r5
      TIM_TI1_ConfigInputStage(htim->Instance,
 800259c:	6909      	ldr	r1, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800259e:	621e      	str	r6, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025a0:	26f0      	movs	r6, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 80025a2:	699d      	ldr	r5, [r3, #24]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025a4:	0109      	lsls	r1, r1, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025a6:	43b5      	bics	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025a8:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025aa:	250a      	movs	r5, #10
 80025ac:	43ac      	bics	r4, r5
  tmpccer |= TIM_ICPolarity;
 80025ae:	4320      	orrs	r0, r4
  TIMx->CCMR1 = tmpccmr1;
 80025b0:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80025b2:	6218      	str	r0, [r3, #32]
 80025b4:	e7bb      	b.n	800252e <HAL_TIM_SlaveConfigSynchronization+0x52>
 80025b6:	46c0      	nop			; (mov r8, r8)
 80025b8:	ffff00ff 	.word	0xffff00ff
 80025bc:	ffffbfff 	.word	0xffffbfff
 80025c0:	ffff0fff 	.word	0xffff0fff

080025c4 <HAL_TIM_OC_DelayElapsedCallback>:
 80025c4:	4770      	bx	lr
 80025c6:	46c0      	nop			; (mov r8, r8)

080025c8 <HAL_TIM_IC_CaptureCallback>:
 80025c8:	4770      	bx	lr
 80025ca:	46c0      	nop			; (mov r8, r8)

080025cc <TIM_DMACaptureCplt>:
  htim->State= HAL_TIM_STATE_READY;
 80025cc:	223d      	movs	r2, #61	; 0x3d
 80025ce:	2301      	movs	r3, #1
{
 80025d0:	b510      	push	{r4, lr}
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025d2:	6a44      	ldr	r4, [r0, #36]	; 0x24
  htim->State= HAL_TIM_STATE_READY;
 80025d4:	54a3      	strb	r3, [r4, r2]
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80025d6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80025d8:	4290      	cmp	r0, r2
 80025da:	d00f      	beq.n	80025fc <TIM_DMACaptureCplt+0x30>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80025dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80025de:	4298      	cmp	r0, r3
 80025e0:	d00e      	beq.n	8002600 <TIM_DMACaptureCplt+0x34>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80025e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80025e4:	4298      	cmp	r0, r3
 80025e6:	d00e      	beq.n	8002606 <TIM_DMACaptureCplt+0x3a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80025e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80025ea:	4298      	cmp	r0, r3
 80025ec:	d005      	beq.n	80025fa <TIM_DMACaptureCplt+0x2e>
  HAL_TIM_IC_CaptureCallback(htim);
 80025ee:	0020      	movs	r0, r4
 80025f0:	f7ff ffea 	bl	80025c8 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025f4:	2300      	movs	r3, #0
 80025f6:	7723      	strb	r3, [r4, #28]
}
 80025f8:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025fa:	2308      	movs	r3, #8
 80025fc:	7723      	strb	r3, [r4, #28]
 80025fe:	e7f6      	b.n	80025ee <TIM_DMACaptureCplt+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002600:	2302      	movs	r3, #2
 8002602:	7723      	strb	r3, [r4, #28]
 8002604:	e7f3      	b.n	80025ee <TIM_DMACaptureCplt+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002606:	2304      	movs	r3, #4
 8002608:	7723      	strb	r3, [r4, #28]
 800260a:	e7f0      	b.n	80025ee <TIM_DMACaptureCplt+0x22>

0800260c <HAL_TIM_PWM_PulseFinishedCallback>:
 800260c:	4770      	bx	lr
 800260e:	46c0      	nop			; (mov r8, r8)

08002610 <HAL_TIM_TriggerCallback>:
 8002610:	4770      	bx	lr
 8002612:	46c0      	nop			; (mov r8, r8)

08002614 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002614:	2202      	movs	r2, #2
 8002616:	6803      	ldr	r3, [r0, #0]
{
 8002618:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800261a:	6919      	ldr	r1, [r3, #16]
{
 800261c:	0004      	movs	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800261e:	420a      	tst	r2, r1
 8002620:	d002      	beq.n	8002628 <HAL_TIM_IRQHandler+0x14>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002622:	68d9      	ldr	r1, [r3, #12]
 8002624:	420a      	tst	r2, r1
 8002626:	d168      	bne.n	80026fa <HAL_TIM_IRQHandler+0xe6>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002628:	2204      	movs	r2, #4
 800262a:	6919      	ldr	r1, [r3, #16]
 800262c:	420a      	tst	r2, r1
 800262e:	d002      	beq.n	8002636 <HAL_TIM_IRQHandler+0x22>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002630:	68d9      	ldr	r1, [r3, #12]
 8002632:	420a      	tst	r2, r1
 8002634:	d14e      	bne.n	80026d4 <HAL_TIM_IRQHandler+0xc0>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002636:	2208      	movs	r2, #8
 8002638:	6919      	ldr	r1, [r3, #16]
 800263a:	420a      	tst	r2, r1
 800263c:	d002      	beq.n	8002644 <HAL_TIM_IRQHandler+0x30>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800263e:	68d9      	ldr	r1, [r3, #12]
 8002640:	420a      	tst	r2, r1
 8002642:	d136      	bne.n	80026b2 <HAL_TIM_IRQHandler+0x9e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002644:	2210      	movs	r2, #16
 8002646:	6919      	ldr	r1, [r3, #16]
 8002648:	420a      	tst	r2, r1
 800264a:	d002      	beq.n	8002652 <HAL_TIM_IRQHandler+0x3e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800264c:	68d9      	ldr	r1, [r3, #12]
 800264e:	420a      	tst	r2, r1
 8002650:	d11c      	bne.n	800268c <HAL_TIM_IRQHandler+0x78>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002652:	2201      	movs	r2, #1
 8002654:	6919      	ldr	r1, [r3, #16]
 8002656:	420a      	tst	r2, r1
 8002658:	d002      	beq.n	8002660 <HAL_TIM_IRQHandler+0x4c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800265a:	68d9      	ldr	r1, [r3, #12]
 800265c:	420a      	tst	r2, r1
 800265e:	d169      	bne.n	8002734 <HAL_TIM_IRQHandler+0x120>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002660:	2280      	movs	r2, #128	; 0x80
 8002662:	6919      	ldr	r1, [r3, #16]
 8002664:	420a      	tst	r2, r1
 8002666:	d002      	beq.n	800266e <HAL_TIM_IRQHandler+0x5a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002668:	68d9      	ldr	r1, [r3, #12]
 800266a:	420a      	tst	r2, r1
 800266c:	d169      	bne.n	8002742 <HAL_TIM_IRQHandler+0x12e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800266e:	2240      	movs	r2, #64	; 0x40
 8002670:	6919      	ldr	r1, [r3, #16]
 8002672:	420a      	tst	r2, r1
 8002674:	d002      	beq.n	800267c <HAL_TIM_IRQHandler+0x68>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002676:	68d9      	ldr	r1, [r3, #12]
 8002678:	420a      	tst	r2, r1
 800267a:	d154      	bne.n	8002726 <HAL_TIM_IRQHandler+0x112>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800267c:	2220      	movs	r2, #32
 800267e:	6919      	ldr	r1, [r3, #16]
 8002680:	420a      	tst	r2, r1
 8002682:	d002      	beq.n	800268a <HAL_TIM_IRQHandler+0x76>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002684:	68d9      	ldr	r1, [r3, #12]
 8002686:	420a      	tst	r2, r1
 8002688:	d147      	bne.n	800271a <HAL_TIM_IRQHandler+0x106>
}
 800268a:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800268c:	3a21      	subs	r2, #33	; 0x21
 800268e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002690:	3219      	adds	r2, #25
 8002692:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002694:	69da      	ldr	r2, [r3, #28]
 8002696:	23c0      	movs	r3, #192	; 0xc0
 8002698:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800269a:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800269c:	421a      	tst	r2, r3
 800269e:	d15b      	bne.n	8002758 <HAL_TIM_IRQHandler+0x144>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026a0:	f7ff ff90 	bl	80025c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026a4:	0020      	movs	r0, r4
 80026a6:	f7ff ffb1 	bl	800260c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026aa:	2300      	movs	r3, #0
 80026ac:	7723      	strb	r3, [r4, #28]
 80026ae:	6823      	ldr	r3, [r4, #0]
 80026b0:	e7cf      	b.n	8002652 <HAL_TIM_IRQHandler+0x3e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026b2:	3a11      	subs	r2, #17
 80026b4:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026b6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026b8:	320d      	adds	r2, #13
 80026ba:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80026bc:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026be:	079b      	lsls	r3, r3, #30
 80026c0:	d150      	bne.n	8002764 <HAL_TIM_IRQHandler+0x150>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026c2:	f7ff ff7f 	bl	80025c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026c6:	0020      	movs	r0, r4
 80026c8:	f7ff ffa0 	bl	800260c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026cc:	2300      	movs	r3, #0
 80026ce:	7723      	strb	r3, [r4, #28]
 80026d0:	6823      	ldr	r3, [r4, #0]
 80026d2:	e7b7      	b.n	8002644 <HAL_TIM_IRQHandler+0x30>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026d4:	3a09      	subs	r2, #9
 80026d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026d8:	3207      	adds	r2, #7
 80026da:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026dc:	699a      	ldr	r2, [r3, #24]
 80026de:	23c0      	movs	r3, #192	; 0xc0
 80026e0:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80026e2:	0020      	movs	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026e4:	421a      	tst	r2, r3
 80026e6:	d13a      	bne.n	800275e <HAL_TIM_IRQHandler+0x14a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026e8:	f7ff ff6c 	bl	80025c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026ec:	0020      	movs	r0, r4
 80026ee:	f7ff ff8d 	bl	800260c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026f2:	2300      	movs	r3, #0
 80026f4:	7723      	strb	r3, [r4, #28]
 80026f6:	6823      	ldr	r3, [r4, #0]
 80026f8:	e79d      	b.n	8002636 <HAL_TIM_IRQHandler+0x22>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026fa:	3a05      	subs	r2, #5
 80026fc:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026fe:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002700:	3204      	adds	r2, #4
 8002702:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002704:	079b      	lsls	r3, r3, #30
 8002706:	d124      	bne.n	8002752 <HAL_TIM_IRQHandler+0x13e>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002708:	f7ff ff5c 	bl	80025c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800270c:	0020      	movs	r0, r4
 800270e:	f7ff ff7d 	bl	800260c <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002712:	2300      	movs	r3, #0
 8002714:	7723      	strb	r3, [r4, #28]
 8002716:	6823      	ldr	r3, [r4, #0]
 8002718:	e786      	b.n	8002628 <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800271a:	3a41      	subs	r2, #65	; 0x41
 800271c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 800271e:	0020      	movs	r0, r4
 8002720:	f000 f89e 	bl	8002860 <HAL_TIMEx_CommutationCallback>
}
 8002724:	e7b1      	b.n	800268a <HAL_TIM_IRQHandler+0x76>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002726:	3a81      	subs	r2, #129	; 0x81
 8002728:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800272a:	0020      	movs	r0, r4
 800272c:	f7ff ff70 	bl	8002610 <HAL_TIM_TriggerCallback>
 8002730:	6823      	ldr	r3, [r4, #0]
 8002732:	e7a3      	b.n	800267c <HAL_TIM_IRQHandler+0x68>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002734:	3a03      	subs	r2, #3
 8002736:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002738:	0020      	movs	r0, r4
 800273a:	f001 fb27 	bl	8003d8c <HAL_TIM_PeriodElapsedCallback>
 800273e:	6823      	ldr	r3, [r4, #0]
 8002740:	e78e      	b.n	8002660 <HAL_TIM_IRQHandler+0x4c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002742:	3a02      	subs	r2, #2
 8002744:	3aff      	subs	r2, #255	; 0xff
 8002746:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002748:	0020      	movs	r0, r4
 800274a:	f000 f88b 	bl	8002864 <HAL_TIMEx_BreakCallback>
 800274e:	6823      	ldr	r3, [r4, #0]
 8002750:	e78d      	b.n	800266e <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_IC_CaptureCallback(htim);
 8002752:	f7ff ff39 	bl	80025c8 <HAL_TIM_IC_CaptureCallback>
 8002756:	e7dc      	b.n	8002712 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8002758:	f7ff ff36 	bl	80025c8 <HAL_TIM_IC_CaptureCallback>
 800275c:	e7a5      	b.n	80026aa <HAL_TIM_IRQHandler+0x96>
        HAL_TIM_IC_CaptureCallback(htim);
 800275e:	f7ff ff33 	bl	80025c8 <HAL_TIM_IC_CaptureCallback>
 8002762:	e7c6      	b.n	80026f2 <HAL_TIM_IRQHandler+0xde>
        HAL_TIM_IC_CaptureCallback(htim);
 8002764:	f7ff ff30 	bl	80025c8 <HAL_TIM_IC_CaptureCallback>
 8002768:	e7b0      	b.n	80026cc <HAL_TIM_IRQHandler+0xb8>
 800276a:	46c0      	nop			; (mov r8, r8)

0800276c <HAL_TIM_ErrorCallback>:
}
 800276c:	4770      	bx	lr
 800276e:	46c0      	nop			; (mov r8, r8)

08002770 <TIM_DMAError>:
  htim->State= HAL_TIM_STATE_READY;
 8002770:	2201      	movs	r2, #1
 8002772:	233d      	movs	r3, #61	; 0x3d
{
 8002774:	b510      	push	{r4, lr}
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002776:	6a40      	ldr	r0, [r0, #36]	; 0x24
  htim->State= HAL_TIM_STATE_READY;
 8002778:	54c2      	strb	r2, [r0, r3]
  HAL_TIM_ErrorCallback(htim);
 800277a:	f7ff fff7 	bl	800276c <HAL_TIM_ErrorCallback>
}
 800277e:	bd10      	pop	{r4, pc}

08002780 <HAL_TIMEx_PWMN_Start>:
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelNState)
{
  uint32_t tmp = 0U;

  tmp = TIM_CCER_CC1NE << Channel;
 8002780:	2204      	movs	r2, #4
 8002782:	408a      	lsls	r2, r1
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8002784:	6803      	ldr	r3, [r0, #0]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8002786:	6a19      	ldr	r1, [r3, #32]
}
 8002788:	2000      	movs	r0, #0
  TIMx->CCER &=  ~tmp;
 800278a:	4391      	bics	r1, r2
 800278c:	6219      	str	r1, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelNState << Channel);
 800278e:	6a19      	ldr	r1, [r3, #32]
 8002790:	430a      	orrs	r2, r1
 8002792:	621a      	str	r2, [r3, #32]
  __HAL_TIM_MOE_ENABLE(htim);
 8002794:	2280      	movs	r2, #128	; 0x80
 8002796:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002798:	0212      	lsls	r2, r2, #8
 800279a:	430a      	orrs	r2, r1
  __HAL_TIM_ENABLE(htim);
 800279c:	2101      	movs	r1, #1
  __HAL_TIM_MOE_ENABLE(htim);
 800279e:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	430a      	orrs	r2, r1
 80027a4:	601a      	str	r2, [r3, #0]
}
 80027a6:	4770      	bx	lr

080027a8 <HAL_TIMEx_MasterConfigSynchronization>:
{
 80027a8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80027aa:	243c      	movs	r4, #60	; 0x3c
 80027ac:	5d03      	ldrb	r3, [r0, r4]
{
 80027ae:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 80027b0:	2002      	movs	r0, #2
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d017      	beq.n	80027e6 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
  htim->State = HAL_TIM_STATE_BUSY;
 80027b6:	253d      	movs	r5, #61	; 0x3d
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80027b8:	2670      	movs	r6, #112	; 0x70
 80027ba:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80027bc:	5550      	strb	r0, [r2, r5]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80027be:	6858      	ldr	r0, [r3, #4]
 80027c0:	43b0      	bics	r0, r6
 80027c2:	6058      	str	r0, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80027c4:	6858      	ldr	r0, [r3, #4]
 80027c6:	680e      	ldr	r6, [r1, #0]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80027c8:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80027ca:	4330      	orrs	r0, r6
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80027cc:	2680      	movs	r6, #128	; 0x80
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80027ce:	6058      	str	r0, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80027d0:	6898      	ldr	r0, [r3, #8]
 80027d2:	43b0      	bics	r0, r6
 80027d4:	6098      	str	r0, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80027d6:	6898      	ldr	r0, [r3, #8]
 80027d8:	4301      	orrs	r1, r0
 80027da:	6099      	str	r1, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 80027dc:	2301      	movs	r3, #1
 80027de:	5553      	strb	r3, [r2, r5]
  __HAL_UNLOCK(htim);
 80027e0:	2300      	movs	r3, #0
  return HAL_OK;
 80027e2:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 80027e4:	5513      	strb	r3, [r2, r4]
}
 80027e6:	bd70      	pop	{r4, r5, r6, pc}

080027e8 <HAL_TIMEx_ConfigBreakDeadTime>:
{
 80027e8:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 80027ea:	243c      	movs	r4, #60	; 0x3c
 80027ec:	5d03      	ldrb	r3, [r0, r4]
{
 80027ee:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 80027f0:	2002      	movs	r0, #2
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d024      	beq.n	8002840 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  htim->State = HAL_TIM_STATE_BUSY;
 80027f6:	253d      	movs	r5, #61	; 0x3d
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80027f8:	4b12      	ldr	r3, [pc, #72]	; (8002844 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>)
  htim->State = HAL_TIM_STATE_BUSY;
 80027fa:	5550      	strb	r0, [r2, r5]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80027fc:	68c8      	ldr	r0, [r1, #12]
 80027fe:	4003      	ands	r3, r0
 8002800:	6888      	ldr	r0, [r1, #8]
 8002802:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002804:	4810      	ldr	r0, [pc, #64]	; (8002848 <HAL_TIMEx_ConfigBreakDeadTime+0x60>)
 8002806:	4003      	ands	r3, r0
 8002808:	6848      	ldr	r0, [r1, #4]
 800280a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800280c:	480f      	ldr	r0, [pc, #60]	; (800284c <HAL_TIMEx_ConfigBreakDeadTime+0x64>)
 800280e:	4003      	ands	r3, r0
 8002810:	6808      	ldr	r0, [r1, #0]
 8002812:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002814:	480e      	ldr	r0, [pc, #56]	; (8002850 <HAL_TIMEx_ConfigBreakDeadTime+0x68>)
 8002816:	4003      	ands	r3, r0
 8002818:	6908      	ldr	r0, [r1, #16]
 800281a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800281c:	480d      	ldr	r0, [pc, #52]	; (8002854 <HAL_TIMEx_ConfigBreakDeadTime+0x6c>)
 800281e:	4003      	ands	r3, r0
 8002820:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002822:	6989      	ldr	r1, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002824:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002826:	480c      	ldr	r0, [pc, #48]	; (8002858 <HAL_TIMEx_ConfigBreakDeadTime+0x70>)
 8002828:	4003      	ands	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 800282a:	480c      	ldr	r0, [pc, #48]	; (800285c <HAL_TIMEx_ConfigBreakDeadTime+0x74>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800282c:	430b      	orrs	r3, r1
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 800282e:	4003      	ands	r3, r0
 8002830:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 8002832:	6811      	ldr	r1, [r2, #0]
  return HAL_OK;
 8002834:	2000      	movs	r0, #0
  htim->Instance->BDTR = tmpbdtr;
 8002836:	644b      	str	r3, [r1, #68]	; 0x44
  htim->State = HAL_TIM_STATE_READY;
 8002838:	2301      	movs	r3, #1
 800283a:	5553      	strb	r3, [r2, r5]
  __HAL_UNLOCK(htim);
 800283c:	2300      	movs	r3, #0
 800283e:	5513      	strb	r3, [r2, r4]
}
 8002840:	bd30      	pop	{r4, r5, pc}
 8002842:	46c0      	nop			; (mov r8, r8)
 8002844:	fffffcff 	.word	0xfffffcff
 8002848:	fffffbff 	.word	0xfffffbff
 800284c:	fffff7ff 	.word	0xfffff7ff
 8002850:	ffffefff 	.word	0xffffefff
 8002854:	ffffdfff 	.word	0xffffdfff
 8002858:	ffffbfff 	.word	0xffffbfff
 800285c:	ffff7fff 	.word	0xffff7fff

08002860 <HAL_TIMEx_CommutationCallback>:
 8002860:	4770      	bx	lr
 8002862:	46c0      	nop			; (mov r8, r8)

08002864 <HAL_TIMEx_BreakCallback>:
}
 8002864:	4770      	bx	lr
 8002866:	46c0      	nop			; (mov r8, r8)

08002868 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800286a:	46de      	mov	lr, fp
 800286c:	464e      	mov	r6, r9
 800286e:	4657      	mov	r7, sl
 8002870:	4645      	mov	r5, r8
 8002872:	b5e0      	push	{r5, r6, r7, lr}
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002874:	680e      	ldr	r6, [r1, #0]
{
 8002876:	468b      	mov	fp, r1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002878:	2e00      	cmp	r6, #0
 800287a:	d100      	bne.n	800287e <LL_GPIO_Init+0x16>
 800287c:	e073      	b.n	8002966 <LL_GPIO_Init+0xfe>
 800287e:	684b      	ldr	r3, [r1, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	469c      	mov	ip, r3
 8002884:	2301      	movs	r3, #1
 8002886:	425b      	negs	r3, r3
 8002888:	4463      	add	r3, ip
 800288a:	4698      	mov	r8, r3
 800288c:	e00a      	b.n	80028a4 <LL_GPIO_Init+0x3c>
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 800288e:	4659      	mov	r1, fp
 8002890:	6909      	ldr	r1, [r1, #16]
 8002892:	68c3      	ldr	r3, [r0, #12]
 8002894:	434d      	muls	r5, r1
 8002896:	401c      	ands	r4, r3
 8002898:	432c      	orrs	r4, r5
 800289a:	60c4      	str	r4, [r0, #12]
 800289c:	0033      	movs	r3, r6
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
      }
    }
    pinpos++;
 800289e:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80028a0:	40d3      	lsrs	r3, r2
 80028a2:	d042      	beq.n	800292a <LL_GPIO_Init+0xc2>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80028a4:	2301      	movs	r3, #1
 80028a6:	4093      	lsls	r3, r2
 80028a8:	4033      	ands	r3, r6
    if (currentpin)
 80028aa:	d0f7      	beq.n	800289c <LL_GPIO_Init+0x34>
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 80028ac:	001d      	movs	r5, r3
 80028ae:	6804      	ldr	r4, [r0, #0]
 80028b0:	435d      	muls	r5, r3
 80028b2:	46a1      	mov	r9, r4
 80028b4:	006c      	lsls	r4, r5, #1
 80028b6:	1964      	adds	r4, r4, r5
 80028b8:	464f      	mov	r7, r9
 80028ba:	43e4      	mvns	r4, r4
 80028bc:	4027      	ands	r7, r4
 80028be:	46b9      	mov	r9, r7
 80028c0:	4667      	mov	r7, ip
 80028c2:	436f      	muls	r7, r5
 80028c4:	46ba      	mov	sl, r7
 80028c6:	464f      	mov	r7, r9
 80028c8:	4651      	mov	r1, sl
 80028ca:	430f      	orrs	r7, r1
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80028cc:	4641      	mov	r1, r8
 80028ce:	6007      	str	r7, [r0, #0]
 80028d0:	2901      	cmp	r1, #1
 80028d2:	d8dc      	bhi.n	800288e <LL_GPIO_Init+0x26>
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 80028d4:	6881      	ldr	r1, [r0, #8]
 80028d6:	468a      	mov	sl, r1
 80028d8:	4659      	mov	r1, fp
 80028da:	6889      	ldr	r1, [r1, #8]
 80028dc:	4369      	muls	r1, r5
 80028de:	4689      	mov	r9, r1
 80028e0:	4651      	mov	r1, sl
 80028e2:	4021      	ands	r1, r4
 80028e4:	468a      	mov	sl, r1
 80028e6:	4649      	mov	r1, r9
 80028e8:	4657      	mov	r7, sl
 80028ea:	4339      	orrs	r1, r7
 80028ec:	6081      	str	r1, [r0, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 80028ee:	68c1      	ldr	r1, [r0, #12]
 80028f0:	468a      	mov	sl, r1
 80028f2:	4659      	mov	r1, fp
 80028f4:	6909      	ldr	r1, [r1, #16]
 80028f6:	4369      	muls	r1, r5
 80028f8:	4689      	mov	r9, r1
 80028fa:	4651      	mov	r1, sl
 80028fc:	400c      	ands	r4, r1
 80028fe:	4649      	mov	r1, r9
 8002900:	430c      	orrs	r4, r1
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002902:	4661      	mov	r1, ip
 8002904:	60c4      	str	r4, [r0, #12]
 8002906:	2902      	cmp	r1, #2
 8002908:	d1c8      	bne.n	800289c <LL_GPIO_Init+0x34>
        if (currentpin < LL_GPIO_PIN_8)
 800290a:	2bff      	cmp	r3, #255	; 0xff
 800290c:	d81e      	bhi.n	800294c <LL_GPIO_Init+0xe4>
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800290e:	4659      	mov	r1, fp
 8002910:	436d      	muls	r5, r5
 8002912:	6949      	ldr	r1, [r1, #20]
 8002914:	012c      	lsls	r4, r5, #4
 8002916:	1b64      	subs	r4, r4, r5
 8002918:	434d      	muls	r5, r1
 800291a:	6a03      	ldr	r3, [r0, #32]
    pinpos++;
 800291c:	3201      	adds	r2, #1
 800291e:	43a3      	bics	r3, r4
 8002920:	431d      	orrs	r5, r3
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002922:	0033      	movs	r3, r6
 8002924:	6205      	str	r5, [r0, #32]
 8002926:	40d3      	lsrs	r3, r2
 8002928:	d1bc      	bne.n	80028a4 <LL_GPIO_Init+0x3c>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800292a:	4643      	mov	r3, r8
 800292c:	2b01      	cmp	r3, #1
 800292e:	d806      	bhi.n	800293e <LL_GPIO_Init+0xd6>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002930:	465a      	mov	r2, fp
 8002932:	6843      	ldr	r3, [r0, #4]
 8002934:	68d2      	ldr	r2, [r2, #12]
 8002936:	43b3      	bics	r3, r6
 8002938:	4356      	muls	r6, r2
 800293a:	431e      	orrs	r6, r3
 800293c:	6046      	str	r6, [r0, #4]
    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);

  }
  return (SUCCESS);
}
 800293e:	2001      	movs	r0, #1
 8002940:	bc3c      	pop	{r2, r3, r4, r5}
 8002942:	4690      	mov	r8, r2
 8002944:	4699      	mov	r9, r3
 8002946:	46a2      	mov	sl, r4
 8002948:	46ab      	mov	fp, r5
 800294a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800294c:	4659      	mov	r1, fp
 800294e:	0a1b      	lsrs	r3, r3, #8
 8002950:	435b      	muls	r3, r3
 8002952:	435b      	muls	r3, r3
 8002954:	6949      	ldr	r1, [r1, #20]
 8002956:	011d      	lsls	r5, r3, #4
 8002958:	1aed      	subs	r5, r5, r3
 800295a:	434b      	muls	r3, r1
 800295c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800295e:	43ac      	bics	r4, r5
 8002960:	4323      	orrs	r3, r4
 8002962:	6243      	str	r3, [r0, #36]	; 0x24
 8002964:	e79a      	b.n	800289c <LL_GPIO_Init+0x34>
 8002966:	684b      	ldr	r3, [r1, #4]
 8002968:	3b01      	subs	r3, #1
 800296a:	4698      	mov	r8, r3
 800296c:	e7dd      	b.n	800292a <LL_GPIO_Init+0xc2>
 800296e:	46c0      	nop			; (mov r8, r8)

08002970 <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 8002970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002972:	4647      	mov	r7, r8
 8002974:	46ce      	mov	lr, r9
  uint16_t pagestatus0 = 6, pagestatus1 = 6;
  uint16_t varidx = 0;
  uint16_t eepromstatus = 0, readstatus = 0;
  int16_t x = -1;
  HAL_StatusTypeDef  flashstatus;
  uint32_t page_error = 0;
 8002976:	2500      	movs	r5, #0
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);

  /* Fill EraseInit structure*/
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
  s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
  s_eraseinit.NbPages     = 1;
 8002978:	2601      	movs	r6, #1
{
 800297a:	b580      	push	{r7, lr}
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800297c:	49a5      	ldr	r1, [pc, #660]	; (8002c14 <EE_Init+0x2a4>)
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800297e:	4fa6      	ldr	r7, [pc, #664]	; (8002c18 <EE_Init+0x2a8>)
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002980:	880b      	ldrh	r3, [r1, #0]
  
  /* Check for invalid header states and repair if necessary */
  switch (pagestatus0)
 8002982:	48a6      	ldr	r0, [pc, #664]	; (8002c1c <EE_Init+0x2ac>)
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002984:	883c      	ldrh	r4, [r7, #0]
{
 8002986:	b089      	sub	sp, #36	; 0x24
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002988:	b29b      	uxth	r3, r3
  uint32_t page_error = 0;
 800298a:	9500      	str	r5, [sp, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800298c:	b2a4      	uxth	r4, r4
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 800298e:	9502      	str	r5, [sp, #8]
  s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 8002990:	9103      	str	r1, [sp, #12]
  s_eraseinit.NbPages     = 1;
 8002992:	9604      	str	r6, [sp, #16]
  switch (pagestatus0)
 8002994:	4283      	cmp	r3, r0
 8002996:	d100      	bne.n	800299a <EE_Init+0x2a>
 8002998:	e096      	b.n	8002ac8 <EE_Init+0x158>
 800299a:	4aa1      	ldr	r2, [pc, #644]	; (8002c20 <EE_Init+0x2b0>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d022      	beq.n	80029e6 <EE_Init+0x76>
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d03e      	beq.n	8002a22 <EE_Init+0xb2>
{
  HAL_StatusTypeDef flashstatus = HAL_OK;
  uint32_t page_error = 0;
  FLASH_EraseInitTypeDef s_eraseinit;

  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80029a4:	a805      	add	r0, sp, #20
  uint32_t page_error = 0;
 80029a6:	9501      	str	r5, [sp, #4]
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80029a8:	9505      	str	r5, [sp, #20]
  s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 80029aa:	6041      	str	r1, [r0, #4]
  s_eraseinit.NbPages     = 1;
 80029ac:	6086      	str	r6, [r0, #8]
  while (Address <= PAGE0_END_ADDRESS)
 80029ae:	4c9d      	ldr	r4, [pc, #628]	; (8002c24 <EE_Init+0x2b4>)
 80029b0:	e002      	b.n	80029b8 <EE_Init+0x48>
    Address = Address + 4;
 80029b2:	3104      	adds	r1, #4
  while (Address <= PAGE0_END_ADDRESS)
 80029b4:	42a1      	cmp	r1, r4
 80029b6:	d007      	beq.n	80029c8 <EE_Init+0x58>
    addressvalue = (*(__IO uint16_t*)Address);
 80029b8:	880b      	ldrh	r3, [r1, #0]
    if (addressvalue != ERASED)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d0f9      	beq.n	80029b2 <EE_Init+0x42>
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
  {
    flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error); 
 80029be:	a901      	add	r1, sp, #4
 80029c0:	f7fe fb54 	bl	800106c <HAL_FLASHEx_Erase>
    /* If erase operation was failed, a Flash error code is returned */
    if (flashstatus != HAL_OK)
 80029c4:	2800      	cmp	r0, #0
 80029c6:	d12a      	bne.n	8002a1e <EE_Init+0xae>
    {
      return flashstatus;
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 80029c8:	2200      	movs	r2, #0
 80029ca:	2300      	movs	r3, #0
 80029cc:	4991      	ldr	r1, [pc, #580]	; (8002c14 <EE_Init+0x2a4>)
 80029ce:	2001      	movs	r0, #1
 80029d0:	f7fe fa12 	bl	8000df8 <HAL_FLASH_Program>
  /* If program operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 80029d4:	2800      	cmp	r0, #0
 80029d6:	d122      	bne.n	8002a1e <EE_Init+0xae>
  return HAL_OK;
 80029d8:	2400      	movs	r4, #0
}
 80029da:	0020      	movs	r0, r4
 80029dc:	b009      	add	sp, #36	; 0x24
 80029de:	bc0c      	pop	{r2, r3}
 80029e0:	4690      	mov	r8, r2
 80029e2:	4699      	mov	r9, r3
 80029e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pagestatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 80029e6:	2c00      	cmp	r4, #0
 80029e8:	d100      	bne.n	80029ec <EE_Init+0x7c>
 80029ea:	e0a0      	b.n	8002b2e <EE_Init+0x1be>
      else if (pagestatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 80029ec:	4284      	cmp	r4, r0
 80029ee:	d000      	beq.n	80029f2 <EE_Init+0x82>
 80029f0:	e101      	b.n	8002bf6 <EE_Init+0x286>
  while (Address <= PAGE0_END_ADDRESS)
 80029f2:	488c      	ldr	r0, [pc, #560]	; (8002c24 <EE_Init+0x2b4>)
 80029f4:	e002      	b.n	80029fc <EE_Init+0x8c>
    Address = Address + 4;
 80029f6:	3104      	adds	r1, #4
  while (Address <= PAGE0_END_ADDRESS)
 80029f8:	4281      	cmp	r1, r0
 80029fa:	d008      	beq.n	8002a0e <EE_Init+0x9e>
    addressvalue = (*(__IO uint16_t*)Address);
 80029fc:	880a      	ldrh	r2, [r1, #0]
    if (addressvalue != ERASED)
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d0f9      	beq.n	80029f6 <EE_Init+0x86>
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8002a02:	4669      	mov	r1, sp
 8002a04:	a802      	add	r0, sp, #8
 8002a06:	f7fe fb31 	bl	800106c <HAL_FLASHEx_Erase>
          if (flashstatus != HAL_OK)
 8002a0a:	2800      	cmp	r0, #0
 8002a0c:	d107      	bne.n	8002a1e <EE_Init+0xae>
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 8002a0e:	2200      	movs	r2, #0
 8002a10:	2300      	movs	r3, #0
 8002a12:	4981      	ldr	r1, [pc, #516]	; (8002c18 <EE_Init+0x2a8>)
 8002a14:	2001      	movs	r0, #1
 8002a16:	f7fe f9ef 	bl	8000df8 <HAL_FLASH_Program>
        if (flashstatus != HAL_OK)
 8002a1a:	2800      	cmp	r0, #0
 8002a1c:	d0dc      	beq.n	80029d8 <EE_Init+0x68>
        return flashstatus;
 8002a1e:	b284      	uxth	r4, r0
 8002a20:	e7db      	b.n	80029da <EE_Init+0x6a>
      if (pagestatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 8002a22:	2c00      	cmp	r4, #0
 8002a24:	d100      	bne.n	8002a28 <EE_Init+0xb8>
 8002a26:	e092      	b.n	8002b4e <EE_Init+0x1de>
      else if (pagestatus1 == ERASED) /* Page0 valid, Page1 erased */
 8002a28:	4294      	cmp	r4, r2
 8002a2a:	d0d5      	beq.n	80029d8 <EE_Init+0x68>
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	425b      	negs	r3, r3
 8002a30:	4698      	mov	r8, r3
      *Data = (*(__IO uint16_t*)(address - 2));
 8002a32:	4b7d      	ldr	r3, [pc, #500]	; (8002c28 <EE_Init+0x2b8>)
 8002a34:	2600      	movs	r6, #0
 8002a36:	4699      	mov	r9, r3
 8002a38:	4f7c      	ldr	r7, [pc, #496]	; (8002c2c <EE_Init+0x2bc>)
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 8002a3a:	4b7d      	ldr	r3, [pc, #500]	; (8002c30 <EE_Init+0x2c0>)
 8002a3c:	0072      	lsls	r2, r6, #1
 8002a3e:	881b      	ldrh	r3, [r3, #0]
 8002a40:	5abc      	ldrh	r4, [r7, r2]
 8002a42:	42a3      	cmp	r3, r4
 8002a44:	d100      	bne.n	8002a48 <EE_Init+0xd8>
 8002a46:	e0be      	b.n	8002bc6 <EE_Init+0x256>
          if (varidx != x)
 8002a48:	4546      	cmp	r6, r8
 8002a4a:	d01a      	beq.n	8002a82 <EE_Init+0x112>
static uint16_t EE_FindValidPage(uint8_t Operation)
{
  uint16_t pagestatus0 = 6, pagestatus1 = 6;

  /* Get Page0 actual status */
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002a4c:	4b71      	ldr	r3, [pc, #452]	; (8002c14 <EE_Init+0x2a4>)
 8002a4e:	881a      	ldrh	r2, [r3, #0]

  /* Get Page1 actual status */
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002a50:	4b71      	ldr	r3, [pc, #452]	; (8002c18 <EE_Init+0x2a8>)
 8002a52:	881b      	ldrh	r3, [r3, #0]
 8002a54:	b29b      	uxth	r3, r3
      {
        return NO_VALID_PAGE;   /* No valid Page */
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (pagestatus0 == VALID_PAGE)
 8002a56:	2a00      	cmp	r2, #0
 8002a58:	d100      	bne.n	8002a5c <EE_Init+0xec>
 8002a5a:	e0b7      	b.n	8002bcc <EE_Init+0x25c>
      {
        return PAGE0;           /* Page0 valid */
      }
      else if (pagestatus1 == VALID_PAGE)
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d000      	beq.n	8002a62 <EE_Init+0xf2>
 8002a60:	e11f      	b.n	8002ca2 <EE_Init+0x332>
 8002a62:	4b74      	ldr	r3, [pc, #464]	; (8002c34 <EE_Init+0x2c4>)
 8002a64:	4974      	ldr	r1, [pc, #464]	; (8002c38 <EE_Init+0x2c8>)
 8002a66:	001a      	movs	r2, r3
 8002a68:	4874      	ldr	r0, [pc, #464]	; (8002c3c <EE_Init+0x2cc>)
    addressvalue = (*(__IO uint16_t*)address);
 8002a6a:	881b      	ldrh	r3, [r3, #0]
    if (addressvalue == VirtAddress)
 8002a6c:	429c      	cmp	r4, r3
 8002a6e:	d105      	bne.n	8002a7c <EE_Init+0x10c>
 8002a70:	e0ef      	b.n	8002c52 <EE_Init+0x2e2>
    addressvalue = (*(__IO uint16_t*)address);
 8002a72:	8819      	ldrh	r1, [r3, #0]
    if (addressvalue == VirtAddress)
 8002a74:	428c      	cmp	r4, r1
 8002a76:	d100      	bne.n	8002a7a <EE_Init+0x10a>
 8002a78:	e0ea      	b.n	8002c50 <EE_Init+0x2e0>
 8002a7a:	001a      	movs	r2, r3
      address = address - 4;
 8002a7c:	1f13      	subs	r3, r2, #4
  while (address > (PageStartAddress + 2))
 8002a7e:	4283      	cmp	r3, r0
 8002a80:	d8f7      	bhi.n	8002a72 <EE_Init+0x102>
 8002a82:	3601      	adds	r6, #1
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8002a84:	2e03      	cmp	r6, #3
 8002a86:	d1d8      	bne.n	8002a3a <EE_Init+0xca>
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 8002a88:	2200      	movs	r2, #0
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	4962      	ldr	r1, [pc, #392]	; (8002c18 <EE_Init+0x2a8>)
 8002a8e:	2001      	movs	r0, #1
 8002a90:	f7fe f9b2 	bl	8000df8 <HAL_FLASH_Program>
        if (flashstatus != HAL_OK)
 8002a94:	2800      	cmp	r0, #0
 8002a96:	d1c2      	bne.n	8002a1e <EE_Init+0xae>
        s_eraseinit.NbPages     = 1;
 8002a98:	2201      	movs	r2, #1
        s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 8002a9a:	4b5e      	ldr	r3, [pc, #376]	; (8002c14 <EE_Init+0x2a4>)
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8002a9c:	9002      	str	r0, [sp, #8]
        s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 8002a9e:	9303      	str	r3, [sp, #12]
        s_eraseinit.NbPages     = 1;
 8002aa0:	9204      	str	r2, [sp, #16]
    if (addressvalue != ERASED)
 8002aa2:	495f      	ldr	r1, [pc, #380]	; (8002c20 <EE_Init+0x2b0>)
  while (Address <= PAGE0_END_ADDRESS)
 8002aa4:	485f      	ldr	r0, [pc, #380]	; (8002c24 <EE_Init+0x2b4>)
 8002aa6:	e003      	b.n	8002ab0 <EE_Init+0x140>
    Address = Address + 4;
 8002aa8:	3304      	adds	r3, #4
  while (Address <= PAGE0_END_ADDRESS)
 8002aaa:	4283      	cmp	r3, r0
 8002aac:	d100      	bne.n	8002ab0 <EE_Init+0x140>
 8002aae:	e793      	b.n	80029d8 <EE_Init+0x68>
    addressvalue = (*(__IO uint16_t*)Address);
 8002ab0:	881a      	ldrh	r2, [r3, #0]
    if (addressvalue != ERASED)
 8002ab2:	428a      	cmp	r2, r1
 8002ab4:	d0f8      	beq.n	8002aa8 <EE_Init+0x138>
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8002ab6:	4669      	mov	r1, sp
 8002ab8:	a802      	add	r0, sp, #8
 8002aba:	f7fe fad7 	bl	800106c <HAL_FLASHEx_Erase>
          if (flashstatus != HAL_OK)
 8002abe:	2800      	cmp	r0, #0
 8002ac0:	d100      	bne.n	8002ac4 <EE_Init+0x154>
 8002ac2:	e789      	b.n	80029d8 <EE_Init+0x68>
        return flashstatus;
 8002ac4:	b284      	uxth	r4, r0
 8002ac6:	e788      	b.n	80029da <EE_Init+0x6a>
      if (pagestatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8002ac8:	2c00      	cmp	r4, #0
 8002aca:	d11d      	bne.n	8002b08 <EE_Init+0x198>
 8002acc:	2301      	movs	r3, #1
 8002ace:	2600      	movs	r6, #0
 8002ad0:	425b      	negs	r3, r3
 8002ad2:	4698      	mov	r8, r3
      *Data = (*(__IO uint16_t*)(address - 2));
 8002ad4:	4b54      	ldr	r3, [pc, #336]	; (8002c28 <EE_Init+0x2b8>)
 8002ad6:	4f55      	ldr	r7, [pc, #340]	; (8002c2c <EE_Init+0x2bc>)
 8002ad8:	4699      	mov	r9, r3
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 8002ada:	4b59      	ldr	r3, [pc, #356]	; (8002c40 <EE_Init+0x2d0>)
 8002adc:	0072      	lsls	r2, r6, #1
 8002ade:	881b      	ldrh	r3, [r3, #0]
 8002ae0:	5abc      	ldrh	r4, [r7, r2]
 8002ae2:	42a3      	cmp	r3, r4
 8002ae4:	d06c      	beq.n	8002bc0 <EE_Init+0x250>
          if (varidx != x)
 8002ae6:	4546      	cmp	r6, r8
 8002ae8:	d060      	beq.n	8002bac <EE_Init+0x23c>
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002aea:	4b4a      	ldr	r3, [pc, #296]	; (8002c14 <EE_Init+0x2a4>)
 8002aec:	881a      	ldrh	r2, [r3, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002aee:	4b4a      	ldr	r3, [pc, #296]	; (8002c18 <EE_Init+0x2a8>)
 8002af0:	881b      	ldrh	r3, [r3, #0]
 8002af2:	b29b      	uxth	r3, r3
      if (pagestatus0 == VALID_PAGE)
 8002af4:	2a00      	cmp	r2, #0
 8002af6:	d06e      	beq.n	8002bd6 <EE_Init+0x266>
      else if (pagestatus1 == VALID_PAGE)
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d000      	beq.n	8002afe <EE_Init+0x18e>
 8002afc:	e0fc      	b.n	8002cf8 <EE_Init+0x388>
 8002afe:	4b4d      	ldr	r3, [pc, #308]	; (8002c34 <EE_Init+0x2c4>)
 8002b00:	494d      	ldr	r1, [pc, #308]	; (8002c38 <EE_Init+0x2c8>)
 8002b02:	001a      	movs	r2, r3
 8002b04:	484d      	ldr	r0, [pc, #308]	; (8002c3c <EE_Init+0x2cc>)
 8002b06:	e06a      	b.n	8002bde <EE_Init+0x26e>
      else if (pagestatus1 == ERASED) /* Page0 receive, Page1 erased */
 8002b08:	4a45      	ldr	r2, [pc, #276]	; (8002c20 <EE_Init+0x2b0>)
 8002b0a:	4294      	cmp	r4, r2
 8002b0c:	d100      	bne.n	8002b10 <EE_Init+0x1a0>
 8002b0e:	e0f6      	b.n	8002cfe <EE_Init+0x38e>
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8002b10:	a805      	add	r0, sp, #20
  uint32_t page_error = 0;
 8002b12:	9501      	str	r5, [sp, #4]
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8002b14:	9505      	str	r5, [sp, #20]
  s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 8002b16:	6041      	str	r1, [r0, #4]
  s_eraseinit.NbPages     = 1;
 8002b18:	6086      	str	r6, [r0, #8]
  while (Address <= PAGE0_END_ADDRESS)
 8002b1a:	4c42      	ldr	r4, [pc, #264]	; (8002c24 <EE_Init+0x2b4>)
 8002b1c:	e003      	b.n	8002b26 <EE_Init+0x1b6>
    Address = Address + 4;
 8002b1e:	3104      	adds	r1, #4
  while (Address <= PAGE0_END_ADDRESS)
 8002b20:	42a1      	cmp	r1, r4
 8002b22:	d100      	bne.n	8002b26 <EE_Init+0x1b6>
 8002b24:	e750      	b.n	80029c8 <EE_Init+0x58>
    addressvalue = (*(__IO uint16_t*)Address);
 8002b26:	880b      	ldrh	r3, [r1, #0]
    if (addressvalue != ERASED)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d0f8      	beq.n	8002b1e <EE_Init+0x1ae>
 8002b2c:	e747      	b.n	80029be <EE_Init+0x4e>
  while (Address <= PAGE0_END_ADDRESS)
 8002b2e:	483d      	ldr	r0, [pc, #244]	; (8002c24 <EE_Init+0x2b4>)
 8002b30:	e003      	b.n	8002b3a <EE_Init+0x1ca>
    Address = Address + 4;
 8002b32:	3104      	adds	r1, #4
  while (Address <= PAGE0_END_ADDRESS)
 8002b34:	4281      	cmp	r1, r0
 8002b36:	d100      	bne.n	8002b3a <EE_Init+0x1ca>
 8002b38:	e74e      	b.n	80029d8 <EE_Init+0x68>
    addressvalue = (*(__IO uint16_t*)Address);
 8002b3a:	880a      	ldrh	r2, [r1, #0]
    if (addressvalue != ERASED)
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d0f8      	beq.n	8002b32 <EE_Init+0x1c2>
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8002b40:	4669      	mov	r1, sp
 8002b42:	a802      	add	r0, sp, #8
 8002b44:	f7fe fa92 	bl	800106c <HAL_FLASHEx_Erase>
          if (flashstatus != HAL_OK)
 8002b48:	2800      	cmp	r0, #0
 8002b4a:	d1bb      	bne.n	8002ac4 <EE_Init+0x154>
 8002b4c:	e744      	b.n	80029d8 <EE_Init+0x68>
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8002b4e:	a805      	add	r0, sp, #20
  uint32_t page_error = 0;
 8002b50:	9401      	str	r4, [sp, #4]
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8002b52:	9405      	str	r4, [sp, #20]
  s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 8002b54:	6041      	str	r1, [r0, #4]
  s_eraseinit.NbPages     = 1;
 8002b56:	6086      	str	r6, [r0, #8]
  while (Address <= PAGE0_END_ADDRESS)
 8002b58:	4d32      	ldr	r5, [pc, #200]	; (8002c24 <EE_Init+0x2b4>)
 8002b5a:	e002      	b.n	8002b62 <EE_Init+0x1f2>
    Address = Address + 4;
 8002b5c:	3104      	adds	r1, #4
  while (Address <= PAGE0_END_ADDRESS)
 8002b5e:	42a9      	cmp	r1, r5
 8002b60:	d008      	beq.n	8002b74 <EE_Init+0x204>
    addressvalue = (*(__IO uint16_t*)Address);
 8002b62:	880b      	ldrh	r3, [r1, #0]
    if (addressvalue != ERASED)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d0f9      	beq.n	8002b5c <EE_Init+0x1ec>
    flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error); 
 8002b68:	a901      	add	r1, sp, #4
 8002b6a:	f7fe fa7f 	bl	800106c <HAL_FLASHEx_Erase>
    if (flashstatus != HAL_OK)
 8002b6e:	2800      	cmp	r0, #0
 8002b70:	d000      	beq.n	8002b74 <EE_Init+0x204>
 8002b72:	e754      	b.n	8002a1e <EE_Init+0xae>
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 8002b74:	2200      	movs	r2, #0
 8002b76:	2300      	movs	r3, #0
 8002b78:	4926      	ldr	r1, [pc, #152]	; (8002c14 <EE_Init+0x2a4>)
 8002b7a:	2001      	movs	r0, #1
 8002b7c:	f7fe f93c 	bl	8000df8 <HAL_FLASH_Program>
  if (flashstatus != HAL_OK)
 8002b80:	2800      	cmp	r0, #0
 8002b82:	d100      	bne.n	8002b86 <EE_Init+0x216>
 8002b84:	e729      	b.n	80029da <EE_Init+0x6a>
 8002b86:	e74a      	b.n	8002a1e <EE_Init+0xae>
  {
    /* Verify if address and address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
    {
      /* Set variable data */
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, Data);       
 8002b88:	2300      	movs	r3, #0
 8002b8a:	0029      	movs	r1, r5
 8002b8c:	2001      	movs	r0, #1
 8002b8e:	f7fe f933 	bl	8000df8 <HAL_FLASH_Program>
      /* If program operation was failed, a Flash error code is returned */
      if (flashstatus != HAL_OK)
 8002b92:	2800      	cmp	r0, #0
 8002b94:	d000      	beq.n	8002b98 <EE_Init+0x228>
 8002b96:	e742      	b.n	8002a1e <EE_Init+0xae>
      {
        return flashstatus;
      }
      /* Set variable virtual address */
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, VirtAddress);       
 8002b98:	0022      	movs	r2, r4
 8002b9a:	1ca9      	adds	r1, r5, #2
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	2001      	movs	r0, #1
 8002ba0:	f7fe f92a 	bl	8000df8 <HAL_FLASH_Program>
      /* Return program operation status */
      return flashstatus;
 8002ba4:	b284      	uxth	r4, r0
              if (eepromstatus != HAL_OK)
 8002ba6:	2c00      	cmp	r4, #0
 8002ba8:	d000      	beq.n	8002bac <EE_Init+0x23c>
 8002baa:	e716      	b.n	80029da <EE_Init+0x6a>
 8002bac:	3601      	adds	r6, #1
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8002bae:	2e03      	cmp	r6, #3
 8002bb0:	d100      	bne.n	8002bb4 <EE_Init+0x244>
 8002bb2:	e709      	b.n	80029c8 <EE_Init+0x58>
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 8002bb4:	4b22      	ldr	r3, [pc, #136]	; (8002c40 <EE_Init+0x2d0>)
 8002bb6:	0072      	lsls	r2, r6, #1
 8002bb8:	881b      	ldrh	r3, [r3, #0]
 8002bba:	5abc      	ldrh	r4, [r7, r2]
 8002bbc:	42a3      	cmp	r3, r4
 8002bbe:	d192      	bne.n	8002ae6 <EE_Init+0x176>
            x = varidx;
 8002bc0:	b233      	sxth	r3, r6
 8002bc2:	4698      	mov	r8, r3
 8002bc4:	e78f      	b.n	8002ae6 <EE_Init+0x176>
            x = varidx;
 8002bc6:	b233      	sxth	r3, r6
 8002bc8:	4698      	mov	r8, r3
 8002bca:	e73d      	b.n	8002a48 <EE_Init+0xd8>
      if (pagestatus0 == VALID_PAGE)
 8002bcc:	4b1d      	ldr	r3, [pc, #116]	; (8002c44 <EE_Init+0x2d4>)
 8002bce:	491e      	ldr	r1, [pc, #120]	; (8002c48 <EE_Init+0x2d8>)
 8002bd0:	001a      	movs	r2, r3
 8002bd2:	481e      	ldr	r0, [pc, #120]	; (8002c4c <EE_Init+0x2dc>)
 8002bd4:	e749      	b.n	8002a6a <EE_Init+0xfa>
 8002bd6:	4b1b      	ldr	r3, [pc, #108]	; (8002c44 <EE_Init+0x2d4>)
 8002bd8:	491b      	ldr	r1, [pc, #108]	; (8002c48 <EE_Init+0x2d8>)
 8002bda:	001a      	movs	r2, r3
 8002bdc:	481b      	ldr	r0, [pc, #108]	; (8002c4c <EE_Init+0x2dc>)
    addressvalue = (*(__IO uint16_t*)address);
 8002bde:	881b      	ldrh	r3, [r3, #0]
    if (addressvalue == VirtAddress)
 8002be0:	429c      	cmp	r4, r3
 8002be2:	d104      	bne.n	8002bee <EE_Init+0x27e>
 8002be4:	e061      	b.n	8002caa <EE_Init+0x33a>
    addressvalue = (*(__IO uint16_t*)address);
 8002be6:	8819      	ldrh	r1, [r3, #0]
    if (addressvalue == VirtAddress)
 8002be8:	428c      	cmp	r4, r1
 8002bea:	d05d      	beq.n	8002ca8 <EE_Init+0x338>
 8002bec:	001a      	movs	r2, r3
      address = address - 4;
 8002bee:	1f13      	subs	r3, r2, #4
  while (address > (PageStartAddress + 2))
 8002bf0:	4298      	cmp	r0, r3
 8002bf2:	d3f8      	bcc.n	8002be6 <EE_Init+0x276>
 8002bf4:	e7da      	b.n	8002bac <EE_Init+0x23c>
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8002bf6:	a805      	add	r0, sp, #20
  uint32_t page_error = 0;
 8002bf8:	9501      	str	r5, [sp, #4]
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8002bfa:	9505      	str	r5, [sp, #20]
  s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 8002bfc:	6041      	str	r1, [r0, #4]
  s_eraseinit.NbPages     = 1;
 8002bfe:	6086      	str	r6, [r0, #8]
  while (Address <= PAGE0_END_ADDRESS)
 8002c00:	4c08      	ldr	r4, [pc, #32]	; (8002c24 <EE_Init+0x2b4>)
 8002c02:	e003      	b.n	8002c0c <EE_Init+0x29c>
    Address = Address + 4;
 8002c04:	3104      	adds	r1, #4
  while (Address <= PAGE0_END_ADDRESS)
 8002c06:	42a1      	cmp	r1, r4
 8002c08:	d100      	bne.n	8002c0c <EE_Init+0x29c>
 8002c0a:	e6dd      	b.n	80029c8 <EE_Init+0x58>
    addressvalue = (*(__IO uint16_t*)Address);
 8002c0c:	880a      	ldrh	r2, [r1, #0]
    if (addressvalue != ERASED)
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d0f8      	beq.n	8002c04 <EE_Init+0x294>
 8002c12:	e6d4      	b.n	80029be <EE_Init+0x4e>
 8002c14:	08007000 	.word	0x08007000
 8002c18:	08007800 	.word	0x08007800
 8002c1c:	0000eeee 	.word	0x0000eeee
 8002c20:	0000ffff 	.word	0x0000ffff
 8002c24:	08007400 	.word	0x08007400
 8002c28:	20000084 	.word	0x20000084
 8002c2c:	20000004 	.word	0x20000004
 8002c30:	08007806 	.word	0x08007806
 8002c34:	0800f3fe 	.word	0x0800f3fe
 8002c38:	0800f3fc 	.word	0x0800f3fc
 8002c3c:	0800f002 	.word	0x0800f002
 8002c40:	08007006 	.word	0x08007006
 8002c44:	080073fe 	.word	0x080073fe
 8002c48:	080073fc 	.word	0x080073fc
 8002c4c:	08007002 	.word	0x08007002
 8002c50:	1f91      	subs	r1, r2, #6
      *Data = (*(__IO uint16_t*)(address - 2));
 8002c52:	464b      	mov	r3, r9
 8002c54:	880a      	ldrh	r2, [r1, #0]
 8002c56:	b292      	uxth	r2, r2
 8002c58:	801a      	strh	r2, [r3, #0]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002c5a:	4d38      	ldr	r5, [pc, #224]	; (8002d3c <EE_Init+0x3cc>)
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002c5c:	4b38      	ldr	r3, [pc, #224]	; (8002d40 <EE_Init+0x3d0>)
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002c5e:	8828      	ldrh	r0, [r5, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002c60:	881b      	ldrh	r3, [r3, #0]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002c62:	b280      	uxth	r0, r0
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002c64:	b29b      	uxth	r3, r3
      if (pagestatus1 == VALID_PAGE)
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d111      	bne.n	8002c8e <EE_Init+0x31e>
        if (pagestatus0 == RECEIVE_DATA)
 8002c6a:	4b36      	ldr	r3, [pc, #216]	; (8002d44 <EE_Init+0x3d4>)
 8002c6c:	4298      	cmp	r0, r3
 8002c6e:	d013      	beq.n	8002c98 <EE_Init+0x328>
 8002c70:	4d35      	ldr	r5, [pc, #212]	; (8002d48 <EE_Init+0x3d8>)
 8002c72:	4936      	ldr	r1, [pc, #216]	; (8002d4c <EE_Init+0x3dc>)
 8002c74:	002b      	movs	r3, r5
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	d103      	bne.n	8002c84 <EE_Init+0x314>
 8002c7c:	e04a      	b.n	8002d14 <EE_Init+0x3a4>
 8002c7e:	682b      	ldr	r3, [r5, #0]
 8002c80:	3301      	adds	r3, #1
 8002c82:	d047      	beq.n	8002d14 <EE_Init+0x3a4>
    }
    else
    {
      /* Next address location */
      address = address + 4;
 8002c84:	3504      	adds	r5, #4
  while (address < pageendaddress)
 8002c86:	42a9      	cmp	r1, r5
 8002c88:	d8f9      	bhi.n	8002c7e <EE_Init+0x30e>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8002c8a:	2480      	movs	r4, #128	; 0x80
 8002c8c:	e6a5      	b.n	80029da <EE_Init+0x6a>
      else if (pagestatus0 == VALID_PAGE)
 8002c8e:	2800      	cmp	r0, #0
 8002c90:	d105      	bne.n	8002c9e <EE_Init+0x32e>
        if (pagestatus1 == RECEIVE_DATA)
 8002c92:	492c      	ldr	r1, [pc, #176]	; (8002d44 <EE_Init+0x3d4>)
 8002c94:	428b      	cmp	r3, r1
 8002c96:	d0eb      	beq.n	8002c70 <EE_Init+0x300>
 8002c98:	492d      	ldr	r1, [pc, #180]	; (8002d50 <EE_Init+0x3e0>)
 8002c9a:	002b      	movs	r3, r5
 8002c9c:	e7eb      	b.n	8002c76 <EE_Init+0x306>
    return  NO_VALID_PAGE;
 8002c9e:	24ab      	movs	r4, #171	; 0xab
 8002ca0:	e69b      	b.n	80029da <EE_Init+0x6a>
 8002ca2:	4b2c      	ldr	r3, [pc, #176]	; (8002d54 <EE_Init+0x3e4>)
 8002ca4:	881a      	ldrh	r2, [r3, #0]
 8002ca6:	e7d8      	b.n	8002c5a <EE_Init+0x2ea>
 8002ca8:	1f91      	subs	r1, r2, #6
      *Data = (*(__IO uint16_t*)(address - 2));
 8002caa:	464b      	mov	r3, r9
 8002cac:	880a      	ldrh	r2, [r1, #0]
 8002cae:	b292      	uxth	r2, r2
 8002cb0:	801a      	strh	r2, [r3, #0]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002cb2:	4d22      	ldr	r5, [pc, #136]	; (8002d3c <EE_Init+0x3cc>)
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002cb4:	4b22      	ldr	r3, [pc, #136]	; (8002d40 <EE_Init+0x3d0>)
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002cb6:	8828      	ldrh	r0, [r5, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002cb8:	881b      	ldrh	r3, [r3, #0]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002cba:	b280      	uxth	r0, r0
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002cbc:	b29b      	uxth	r3, r3
      if (pagestatus1 == VALID_PAGE)
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d013      	beq.n	8002cea <EE_Init+0x37a>
      else if (pagestatus0 == VALID_PAGE)
 8002cc2:	2800      	cmp	r0, #0
 8002cc4:	d1eb      	bne.n	8002c9e <EE_Init+0x32e>
        if (pagestatus1 == RECEIVE_DATA)
 8002cc6:	491f      	ldr	r1, [pc, #124]	; (8002d44 <EE_Init+0x3d4>)
 8002cc8:	428b      	cmp	r3, r1
 8002cca:	d011      	beq.n	8002cf0 <EE_Init+0x380>
 8002ccc:	002b      	movs	r3, r5
 8002cce:	4920      	ldr	r1, [pc, #128]	; (8002d50 <EE_Init+0x3e0>)
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	d104      	bne.n	8002ce0 <EE_Init+0x370>
 8002cd6:	e757      	b.n	8002b88 <EE_Init+0x218>
 8002cd8:	682b      	ldr	r3, [r5, #0]
 8002cda:	3301      	adds	r3, #1
 8002cdc:	d100      	bne.n	8002ce0 <EE_Init+0x370>
 8002cde:	e753      	b.n	8002b88 <EE_Init+0x218>
      address = address + 4;
 8002ce0:	3504      	adds	r5, #4
  while (address < pageendaddress)
 8002ce2:	42a9      	cmp	r1, r5
 8002ce4:	d8f8      	bhi.n	8002cd8 <EE_Init+0x368>
  return PAGE_FULL;
 8002ce6:	2480      	movs	r4, #128	; 0x80
 8002ce8:	e677      	b.n	80029da <EE_Init+0x6a>
        if (pagestatus0 == RECEIVE_DATA)
 8002cea:	4b16      	ldr	r3, [pc, #88]	; (8002d44 <EE_Init+0x3d4>)
 8002cec:	4298      	cmp	r0, r3
 8002cee:	d0ed      	beq.n	8002ccc <EE_Init+0x35c>
 8002cf0:	4d15      	ldr	r5, [pc, #84]	; (8002d48 <EE_Init+0x3d8>)
 8002cf2:	4916      	ldr	r1, [pc, #88]	; (8002d4c <EE_Init+0x3dc>)
 8002cf4:	002b      	movs	r3, r5
 8002cf6:	e7eb      	b.n	8002cd0 <EE_Init+0x360>
 8002cf8:	4b16      	ldr	r3, [pc, #88]	; (8002d54 <EE_Init+0x3e4>)
 8002cfa:	881a      	ldrh	r2, [r3, #0]
 8002cfc:	e7d9      	b.n	8002cb2 <EE_Init+0x342>
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8002cfe:	2200      	movs	r2, #0
 8002d00:	2300      	movs	r3, #0
 8002d02:	2001      	movs	r0, #1
        s_eraseinit.PageAddress = PAGE1_BASE_ADDRESS;
 8002d04:	9703      	str	r7, [sp, #12]
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8002d06:	f7fe f877 	bl	8000df8 <HAL_FLASH_Program>
        if (flashstatus != HAL_OK)
 8002d0a:	2800      	cmp	r0, #0
 8002d0c:	d100      	bne.n	8002d10 <EE_Init+0x3a0>
 8002d0e:	e663      	b.n	80029d8 <EE_Init+0x68>
        return flashstatus;
 8002d10:	b284      	uxth	r4, r0
 8002d12:	e662      	b.n	80029da <EE_Init+0x6a>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, Data);       
 8002d14:	2300      	movs	r3, #0
 8002d16:	0029      	movs	r1, r5
 8002d18:	2001      	movs	r0, #1
 8002d1a:	f7fe f86d 	bl	8000df8 <HAL_FLASH_Program>
      if (flashstatus != HAL_OK)
 8002d1e:	2800      	cmp	r0, #0
 8002d20:	d000      	beq.n	8002d24 <EE_Init+0x3b4>
 8002d22:	e67c      	b.n	8002a1e <EE_Init+0xae>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, VirtAddress);       
 8002d24:	0022      	movs	r2, r4
 8002d26:	1ca9      	adds	r1, r5, #2
 8002d28:	2300      	movs	r3, #0
 8002d2a:	2001      	movs	r0, #1
 8002d2c:	f7fe f864 	bl	8000df8 <HAL_FLASH_Program>
      return flashstatus;
 8002d30:	b284      	uxth	r4, r0
              if (eepromstatus != HAL_OK)
 8002d32:	2c00      	cmp	r4, #0
 8002d34:	d100      	bne.n	8002d38 <EE_Init+0x3c8>
 8002d36:	e6a4      	b.n	8002a82 <EE_Init+0x112>
 8002d38:	e64f      	b.n	80029da <EE_Init+0x6a>
 8002d3a:	46c0      	nop			; (mov r8, r8)
 8002d3c:	08007000 	.word	0x08007000
 8002d40:	08007800 	.word	0x08007800
 8002d44:	0000eeee 	.word	0x0000eeee
 8002d48:	0800f000 	.word	0x0800f000
 8002d4c:	0800f3ff 	.word	0x0800f3ff
 8002d50:	080073ff 	.word	0x080073ff
 8002d54:	20000084 	.word	0x20000084

08002d58 <EE_ReadVariable>:
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002d58:	4b13      	ldr	r3, [pc, #76]	; (8002da8 <EE_ReadVariable+0x50>)
{
 8002d5a:	b530      	push	{r4, r5, lr}
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002d5c:	881a      	ldrh	r2, [r3, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002d5e:	4b13      	ldr	r3, [pc, #76]	; (8002dac <EE_ReadVariable+0x54>)
 8002d60:	881b      	ldrh	r3, [r3, #0]
 8002d62:	b29b      	uxth	r3, r3
      if (pagestatus0 == VALID_PAGE)
 8002d64:	2a00      	cmp	r2, #0
 8002d66:	d006      	beq.n	8002d76 <EE_ReadVariable+0x1e>
      else if (pagestatus1 == VALID_PAGE)
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d115      	bne.n	8002d98 <EE_ReadVariable+0x40>
 8002d6c:	4a10      	ldr	r2, [pc, #64]	; (8002db0 <EE_ReadVariable+0x58>)
 8002d6e:	4c11      	ldr	r4, [pc, #68]	; (8002db4 <EE_ReadVariable+0x5c>)
 8002d70:	4d11      	ldr	r5, [pc, #68]	; (8002db8 <EE_ReadVariable+0x60>)
 8002d72:	0013      	movs	r3, r2
 8002d74:	e003      	b.n	8002d7e <EE_ReadVariable+0x26>
      if (pagestatus0 == VALID_PAGE)
 8002d76:	4a11      	ldr	r2, [pc, #68]	; (8002dbc <EE_ReadVariable+0x64>)
 8002d78:	4c11      	ldr	r4, [pc, #68]	; (8002dc0 <EE_ReadVariable+0x68>)
 8002d7a:	0013      	movs	r3, r2
 8002d7c:	4d11      	ldr	r5, [pc, #68]	; (8002dc4 <EE_ReadVariable+0x6c>)
    addressvalue = (*(__IO uint16_t*)address);
 8002d7e:	881b      	ldrh	r3, [r3, #0]
    if (addressvalue == VirtAddress)
 8002d80:	4298      	cmp	r0, r3
 8002d82:	d104      	bne.n	8002d8e <EE_ReadVariable+0x36>
 8002d84:	e00b      	b.n	8002d9e <EE_ReadVariable+0x46>
    addressvalue = (*(__IO uint16_t*)address);
 8002d86:	881c      	ldrh	r4, [r3, #0]
    if (addressvalue == VirtAddress)
 8002d88:	4284      	cmp	r4, r0
 8002d8a:	d007      	beq.n	8002d9c <EE_ReadVariable+0x44>
 8002d8c:	001a      	movs	r2, r3
      address = address - 4;
 8002d8e:	1f13      	subs	r3, r2, #4
  while (address > (PageStartAddress + 2))
 8002d90:	429d      	cmp	r5, r3
 8002d92:	d3f8      	bcc.n	8002d86 <EE_ReadVariable+0x2e>
  uint16_t addressvalue = 0x5555, readstatus = 1;
 8002d94:	2001      	movs	r0, #1
}
 8002d96:	bd30      	pop	{r4, r5, pc}
    return  NO_VALID_PAGE;
 8002d98:	20ab      	movs	r0, #171	; 0xab
 8002d9a:	e7fc      	b.n	8002d96 <EE_ReadVariable+0x3e>
 8002d9c:	1f94      	subs	r4, r2, #6
      *Data = (*(__IO uint16_t*)(address - 2));
 8002d9e:	8823      	ldrh	r3, [r4, #0]
      readstatus = 0;
 8002da0:	2000      	movs	r0, #0
      *Data = (*(__IO uint16_t*)(address - 2));
 8002da2:	800b      	strh	r3, [r1, #0]
      break;
 8002da4:	e7f7      	b.n	8002d96 <EE_ReadVariable+0x3e>
 8002da6:	46c0      	nop			; (mov r8, r8)
 8002da8:	08007000 	.word	0x08007000
 8002dac:	08007800 	.word	0x08007800
 8002db0:	0800f3fe 	.word	0x0800f3fe
 8002db4:	0800f3fc 	.word	0x0800f3fc
 8002db8:	0800f002 	.word	0x0800f002
 8002dbc:	080073fe 	.word	0x080073fe
 8002dc0:	080073fc 	.word	0x080073fc
 8002dc4:	08007002 	.word	0x08007002

08002dc8 <EE_WriteVariable>:
{
 8002dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dca:	464e      	mov	r6, r9
 8002dcc:	4645      	mov	r5, r8
 8002dce:	46de      	mov	lr, fp
 8002dd0:	4657      	mov	r7, sl
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002dd2:	4b86      	ldr	r3, [pc, #536]	; (8002fec <EE_WriteVariable+0x224>)
{
 8002dd4:	b5e0      	push	{r5, r6, r7, lr}
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002dd6:	4a86      	ldr	r2, [pc, #536]	; (8002ff0 <EE_WriteVariable+0x228>)
{
 8002dd8:	000d      	movs	r5, r1
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002dda:	8819      	ldrh	r1, [r3, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002ddc:	8812      	ldrh	r2, [r2, #0]
{
 8002dde:	b085      	sub	sp, #20
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002de0:	b292      	uxth	r2, r2
{
 8002de2:	0006      	movs	r6, r0
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002de4:	b289      	uxth	r1, r1
      if (pagestatus1 == VALID_PAGE)
 8002de6:	2a00      	cmp	r2, #0
 8002de8:	d129      	bne.n	8002e3e <EE_WriteVariable+0x76>
        if (pagestatus0 == RECEIVE_DATA)
 8002dea:	4a82      	ldr	r2, [pc, #520]	; (8002ff4 <EE_WriteVariable+0x22c>)
 8002dec:	4291      	cmp	r1, r2
 8002dee:	d02c      	beq.n	8002e4a <EE_WriteVariable+0x82>
 8002df0:	4b81      	ldr	r3, [pc, #516]	; (8002ff8 <EE_WriteVariable+0x230>)
 8002df2:	4a82      	ldr	r2, [pc, #520]	; (8002ffc <EE_WriteVariable+0x234>)
 8002df4:	001c      	movs	r4, r3
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	d103      	bne.n	8002e04 <EE_WriteVariable+0x3c>
 8002dfc:	e028      	b.n	8002e50 <EE_WriteVariable+0x88>
 8002dfe:	6823      	ldr	r3, [r4, #0]
 8002e00:	3301      	adds	r3, #1
 8002e02:	d025      	beq.n	8002e50 <EE_WriteVariable+0x88>
      address = address + 4;
 8002e04:	3404      	adds	r4, #4
  while (address < pageendaddress)
 8002e06:	42a2      	cmp	r2, r4
 8002e08:	d8f9      	bhi.n	8002dfe <EE_WriteVariable+0x36>
  HAL_StatusTypeDef flashstatus = HAL_OK;
  uint32_t newpageaddress = EEPROM_START_ADDRESS;
  uint32_t oldpageid = 0;
  uint16_t validpage = PAGE0, varidx = 0;
  uint16_t eepromstatus = 0, readstatus = 0;
  uint32_t page_error = 0;
 8002e0a:	2300      	movs	r3, #0
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002e0c:	4a77      	ldr	r2, [pc, #476]	; (8002fec <EE_WriteVariable+0x224>)
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002e0e:	4c78      	ldr	r4, [pc, #480]	; (8002ff0 <EE_WriteVariable+0x228>)
  uint32_t page_error = 0;
 8002e10:	9300      	str	r3, [sp, #0]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002e12:	8811      	ldrh	r1, [r2, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002e14:	8823      	ldrh	r3, [r4, #0]
 8002e16:	b29b      	uxth	r3, r3
      if (pagestatus0 == VALID_PAGE)
 8002e18:	2900      	cmp	r1, #0
 8002e1a:	d125      	bne.n	8002e68 <EE_WriteVariable+0xa0>
  {
    /* New page address  where variable will be moved to */
    newpageaddress = PAGE1_BASE_ADDRESS;

    /* Old page ID where variable will be taken from */
    oldpageid = PAGE0_BASE_ADDRESS;
 8002e1c:	4690      	mov	r8, r2
  {
    return NO_VALID_PAGE;       /* No valid Page */
  }

  /* Set the new Page status to RECEIVE_DATA status */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, newpageaddress, RECEIVE_DATA);  
 8002e1e:	4a75      	ldr	r2, [pc, #468]	; (8002ff4 <EE_WriteVariable+0x22c>)
 8002e20:	2300      	movs	r3, #0
 8002e22:	0021      	movs	r1, r4
 8002e24:	2001      	movs	r0, #1
 8002e26:	f7fd ffe7 	bl	8000df8 <HAL_FLASH_Program>
  /* If program operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 8002e2a:	2800      	cmp	r0, #0
 8002e2c:	d02a      	beq.n	8002e84 <EE_WriteVariable+0xbc>
  /* Erase the old Page: Set old Page status to ERASED status */
  flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);  
  /* If erase operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
  {
    return flashstatus;
 8002e2e:	b280      	uxth	r0, r0
}
 8002e30:	b005      	add	sp, #20
 8002e32:	bc3c      	pop	{r2, r3, r4, r5}
 8002e34:	4690      	mov	r8, r2
 8002e36:	4699      	mov	r9, r3
 8002e38:	46a2      	mov	sl, r4
 8002e3a:	46ab      	mov	fp, r5
 8002e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return  NO_VALID_PAGE;
 8002e3e:	20ab      	movs	r0, #171	; 0xab
      else if (pagestatus0 == VALID_PAGE)
 8002e40:	2900      	cmp	r1, #0
 8002e42:	d1f5      	bne.n	8002e30 <EE_WriteVariable+0x68>
        if (pagestatus1 == RECEIVE_DATA)
 8002e44:	496b      	ldr	r1, [pc, #428]	; (8002ff4 <EE_WriteVariable+0x22c>)
 8002e46:	428a      	cmp	r2, r1
 8002e48:	d0d2      	beq.n	8002df0 <EE_WriteVariable+0x28>
 8002e4a:	001c      	movs	r4, r3
 8002e4c:	4a6c      	ldr	r2, [pc, #432]	; (8003000 <EE_WriteVariable+0x238>)
 8002e4e:	e7d2      	b.n	8002df6 <EE_WriteVariable+0x2e>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, Data);       
 8002e50:	002a      	movs	r2, r5
 8002e52:	2300      	movs	r3, #0
 8002e54:	0021      	movs	r1, r4
 8002e56:	2001      	movs	r0, #1
 8002e58:	f7fd ffce 	bl	8000df8 <HAL_FLASH_Program>
      if (flashstatus != HAL_OK)
 8002e5c:	2800      	cmp	r0, #0
 8002e5e:	d008      	beq.n	8002e72 <EE_WriteVariable+0xaa>
      return flashstatus;
 8002e60:	b280      	uxth	r0, r0
  if (Status == PAGE_FULL)
 8002e62:	2880      	cmp	r0, #128	; 0x80
 8002e64:	d1e4      	bne.n	8002e30 <EE_WriteVariable+0x68>
 8002e66:	e7d0      	b.n	8002e0a <EE_WriteVariable+0x42>
      else if (pagestatus1 == VALID_PAGE)
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d109      	bne.n	8002e80 <EE_WriteVariable+0xb8>
    oldpageid = PAGE1_BASE_ADDRESS;
 8002e6c:	46a0      	mov	r8, r4
    newpageaddress = PAGE0_BASE_ADDRESS;
 8002e6e:	0014      	movs	r4, r2
 8002e70:	e7d5      	b.n	8002e1e <EE_WriteVariable+0x56>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, VirtAddress);       
 8002e72:	1ca1      	adds	r1, r4, #2
 8002e74:	0032      	movs	r2, r6
 8002e76:	2300      	movs	r3, #0
 8002e78:	2001      	movs	r0, #1
 8002e7a:	f7fd ffbd 	bl	8000df8 <HAL_FLASH_Program>
 8002e7e:	e7ef      	b.n	8002e60 <EE_WriteVariable+0x98>
    return NO_VALID_PAGE;       /* No valid Page */
 8002e80:	20ab      	movs	r0, #171	; 0xab
 8002e82:	e7d5      	b.n	8002e30 <EE_WriteVariable+0x68>
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002e84:	4b59      	ldr	r3, [pc, #356]	; (8002fec <EE_WriteVariable+0x224>)
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002e86:	4a5a      	ldr	r2, [pc, #360]	; (8002ff0 <EE_WriteVariable+0x228>)
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002e88:	8819      	ldrh	r1, [r3, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002e8a:	8812      	ldrh	r2, [r2, #0]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002e8c:	b289      	uxth	r1, r1
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002e8e:	b292      	uxth	r2, r2
      if (pagestatus1 == VALID_PAGE)
 8002e90:	2a00      	cmp	r2, #0
 8002e92:	d111      	bne.n	8002eb8 <EE_WriteVariable+0xf0>
        if (pagestatus0 == RECEIVE_DATA)
 8002e94:	4a57      	ldr	r2, [pc, #348]	; (8002ff4 <EE_WriteVariable+0x22c>)
 8002e96:	4291      	cmp	r1, r2
 8002e98:	d013      	beq.n	8002ec2 <EE_WriteVariable+0xfa>
 8002e9a:	4b57      	ldr	r3, [pc, #348]	; (8002ff8 <EE_WriteVariable+0x230>)
 8002e9c:	4a57      	ldr	r2, [pc, #348]	; (8002ffc <EE_WriteVariable+0x234>)
 8002e9e:	001f      	movs	r7, r3
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	d103      	bne.n	8002eae <EE_WriteVariable+0xe6>
 8002ea6:	e00f      	b.n	8002ec8 <EE_WriteVariable+0x100>
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	d00c      	beq.n	8002ec8 <EE_WriteVariable+0x100>
      address = address + 4;
 8002eae:	3704      	adds	r7, #4
  while (address < pageendaddress)
 8002eb0:	4297      	cmp	r7, r2
 8002eb2:	d3f9      	bcc.n	8002ea8 <EE_WriteVariable+0xe0>
  return PAGE_FULL;
 8002eb4:	2080      	movs	r0, #128	; 0x80
 8002eb6:	e7bb      	b.n	8002e30 <EE_WriteVariable+0x68>
      else if (pagestatus0 == VALID_PAGE)
 8002eb8:	2900      	cmp	r1, #0
 8002eba:	d1e1      	bne.n	8002e80 <EE_WriteVariable+0xb8>
        if (pagestatus1 == RECEIVE_DATA)
 8002ebc:	494d      	ldr	r1, [pc, #308]	; (8002ff4 <EE_WriteVariable+0x22c>)
 8002ebe:	428a      	cmp	r2, r1
 8002ec0:	d0eb      	beq.n	8002e9a <EE_WriteVariable+0xd2>
 8002ec2:	4a4f      	ldr	r2, [pc, #316]	; (8003000 <EE_WriteVariable+0x238>)
 8002ec4:	001f      	movs	r7, r3
 8002ec6:	e7eb      	b.n	8002ea0 <EE_WriteVariable+0xd8>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, Data);       
 8002ec8:	002a      	movs	r2, r5
 8002eca:	2300      	movs	r3, #0
 8002ecc:	0039      	movs	r1, r7
 8002ece:	2001      	movs	r0, #1
 8002ed0:	f7fd ff92 	bl	8000df8 <HAL_FLASH_Program>
      if (flashstatus != HAL_OK)
 8002ed4:	2800      	cmp	r0, #0
 8002ed6:	d1aa      	bne.n	8002e2e <EE_WriteVariable+0x66>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, VirtAddress);       
 8002ed8:	1cb9      	adds	r1, r7, #2
 8002eda:	0032      	movs	r2, r6
 8002edc:	2300      	movs	r3, #0
 8002ede:	2001      	movs	r0, #1
 8002ee0:	f7fd ff8a 	bl	8000df8 <HAL_FLASH_Program>
      return flashstatus;
 8002ee4:	b280      	uxth	r0, r0
  if (eepromstatus != HAL_OK)
 8002ee6:	2800      	cmp	r0, #0
 8002ee8:	d1a2      	bne.n	8002e30 <EE_WriteVariable+0x68>
 8002eea:	4b46      	ldr	r3, [pc, #280]	; (8003004 <EE_WriteVariable+0x23c>)
 8002eec:	2700      	movs	r7, #0
 8002eee:	4699      	mov	r9, r3
      *Data = (*(__IO uint16_t*)(address - 2));
 8002ef0:	4b45      	ldr	r3, [pc, #276]	; (8003008 <EE_WriteVariable+0x240>)
 8002ef2:	469a      	mov	sl, r3
    if (VirtAddVarTab[varidx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8002ef4:	464b      	mov	r3, r9
 8002ef6:	5bdb      	ldrh	r3, [r3, r7]
 8002ef8:	469b      	mov	fp, r3
 8002efa:	429e      	cmp	r6, r3
 8002efc:	d017      	beq.n	8002f2e <EE_WriteVariable+0x166>
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002efe:	4b3b      	ldr	r3, [pc, #236]	; (8002fec <EE_WriteVariable+0x224>)
 8002f00:	881a      	ldrh	r2, [r3, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002f02:	4b3b      	ldr	r3, [pc, #236]	; (8002ff0 <EE_WriteVariable+0x228>)
 8002f04:	881b      	ldrh	r3, [r3, #0]
 8002f06:	b29b      	uxth	r3, r3
      if (pagestatus0 == VALID_PAGE)
 8002f08:	2a00      	cmp	r2, #0
 8002f0a:	d02d      	beq.n	8002f68 <EE_WriteVariable+0x1a0>
      else if (pagestatus1 == VALID_PAGE)
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d14f      	bne.n	8002fb0 <EE_WriteVariable+0x1e8>
 8002f10:	4a3e      	ldr	r2, [pc, #248]	; (800300c <EE_WriteVariable+0x244>)
 8002f12:	493f      	ldr	r1, [pc, #252]	; (8003010 <EE_WriteVariable+0x248>)
 8002f14:	0013      	movs	r3, r2
 8002f16:	483f      	ldr	r0, [pc, #252]	; (8003014 <EE_WriteVariable+0x24c>)
    addressvalue = (*(__IO uint16_t*)address);
 8002f18:	881b      	ldrh	r3, [r3, #0]
    if (addressvalue == VirtAddress)
 8002f1a:	459b      	cmp	fp, r3
 8002f1c:	d104      	bne.n	8002f28 <EE_WriteVariable+0x160>
 8002f1e:	e029      	b.n	8002f74 <EE_WriteVariable+0x1ac>
    addressvalue = (*(__IO uint16_t*)address);
 8002f20:	8819      	ldrh	r1, [r3, #0]
    if (addressvalue == VirtAddress)
 8002f22:	458b      	cmp	fp, r1
 8002f24:	d025      	beq.n	8002f72 <EE_WriteVariable+0x1aa>
 8002f26:	001a      	movs	r2, r3
      address = address - 4;
 8002f28:	1f13      	subs	r3, r2, #4
  while (address > (PageStartAddress + 2))
 8002f2a:	4298      	cmp	r0, r3
 8002f2c:	d3f8      	bcc.n	8002f20 <EE_WriteVariable+0x158>
 8002f2e:	3702      	adds	r7, #2
  for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8002f30:	2f06      	cmp	r7, #6
 8002f32:	d1df      	bne.n	8002ef4 <EE_WriteVariable+0x12c>
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8002f34:	2300      	movs	r3, #0
 8002f36:	9301      	str	r3, [sp, #4]
  s_eraseinit.PageAddress = oldpageid;
 8002f38:	4643      	mov	r3, r8
 8002f3a:	9302      	str	r3, [sp, #8]
  s_eraseinit.NbPages     = 1;
 8002f3c:	2301      	movs	r3, #1
  flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);  
 8002f3e:	4669      	mov	r1, sp
 8002f40:	a801      	add	r0, sp, #4
  s_eraseinit.NbPages     = 1;
 8002f42:	9303      	str	r3, [sp, #12]
  flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);  
 8002f44:	f7fe f892 	bl	800106c <HAL_FLASHEx_Erase>
  if (flashstatus != HAL_OK)
 8002f48:	2800      	cmp	r0, #0
 8002f4a:	d000      	beq.n	8002f4e <EE_WriteVariable+0x186>
 8002f4c:	e76f      	b.n	8002e2e <EE_WriteVariable+0x66>
  }

  /* Set new Page status to VALID_PAGE status */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, newpageaddress, VALID_PAGE);   
 8002f4e:	2300      	movs	r3, #0
 8002f50:	2200      	movs	r2, #0
 8002f52:	0021      	movs	r1, r4
 8002f54:	2001      	movs	r0, #1
 8002f56:	f7fd ff4f 	bl	8000df8 <HAL_FLASH_Program>
 8002f5a:	0003      	movs	r3, r0
  }
  
  

  /* Return last operation flash status */
  return flashstatus;
 8002f5c:	2000      	movs	r0, #0
  if (flashstatus != HAL_OK)
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d100      	bne.n	8002f64 <EE_WriteVariable+0x19c>
 8002f62:	e765      	b.n	8002e30 <EE_WriteVariable+0x68>
    return flashstatus;
 8002f64:	b298      	uxth	r0, r3
 8002f66:	e763      	b.n	8002e30 <EE_WriteVariable+0x68>
      if (pagestatus0 == VALID_PAGE)
 8002f68:	4a2b      	ldr	r2, [pc, #172]	; (8003018 <EE_WriteVariable+0x250>)
 8002f6a:	492c      	ldr	r1, [pc, #176]	; (800301c <EE_WriteVariable+0x254>)
 8002f6c:	482c      	ldr	r0, [pc, #176]	; (8003020 <EE_WriteVariable+0x258>)
 8002f6e:	0013      	movs	r3, r2
 8002f70:	e7d2      	b.n	8002f18 <EE_WriteVariable+0x150>
 8002f72:	1f91      	subs	r1, r2, #6
      *Data = (*(__IO uint16_t*)(address - 2));
 8002f74:	4653      	mov	r3, sl
 8002f76:	880a      	ldrh	r2, [r1, #0]
 8002f78:	b292      	uxth	r2, r2
 8002f7a:	801a      	strh	r2, [r3, #0]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002f7c:	4b1b      	ldr	r3, [pc, #108]	; (8002fec <EE_WriteVariable+0x224>)
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002f7e:	491c      	ldr	r1, [pc, #112]	; (8002ff0 <EE_WriteVariable+0x228>)
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002f80:	8818      	ldrh	r0, [r3, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002f82:	8809      	ldrh	r1, [r1, #0]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002f84:	b280      	uxth	r0, r0
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002f86:	b289      	uxth	r1, r1
      if (pagestatus1 == VALID_PAGE)
 8002f88:	2900      	cmp	r1, #0
 8002f8a:	d114      	bne.n	8002fb6 <EE_WriteVariable+0x1ee>
        if (pagestatus0 == RECEIVE_DATA)
 8002f8c:	4919      	ldr	r1, [pc, #100]	; (8002ff4 <EE_WriteVariable+0x22c>)
 8002f8e:	4288      	cmp	r0, r1
 8002f90:	d017      	beq.n	8002fc2 <EE_WriteVariable+0x1fa>
 8002f92:	4b19      	ldr	r3, [pc, #100]	; (8002ff8 <EE_WriteVariable+0x230>)
 8002f94:	4919      	ldr	r1, [pc, #100]	; (8002ffc <EE_WriteVariable+0x234>)
 8002f96:	001d      	movs	r5, r3
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	d103      	bne.n	8002fa6 <EE_WriteVariable+0x1de>
 8002f9e:	e013      	b.n	8002fc8 <EE_WriteVariable+0x200>
 8002fa0:	682b      	ldr	r3, [r5, #0]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	d010      	beq.n	8002fc8 <EE_WriteVariable+0x200>
      address = address + 4;
 8002fa6:	3504      	adds	r5, #4
  while (address < pageendaddress)
 8002fa8:	428d      	cmp	r5, r1
 8002faa:	d3f9      	bcc.n	8002fa0 <EE_WriteVariable+0x1d8>
  return PAGE_FULL;
 8002fac:	2080      	movs	r0, #128	; 0x80
 8002fae:	e73f      	b.n	8002e30 <EE_WriteVariable+0x68>
 8002fb0:	4b15      	ldr	r3, [pc, #84]	; (8003008 <EE_WriteVariable+0x240>)
 8002fb2:	881a      	ldrh	r2, [r3, #0]
 8002fb4:	e7e2      	b.n	8002f7c <EE_WriteVariable+0x1b4>
      else if (pagestatus0 == VALID_PAGE)
 8002fb6:	2800      	cmp	r0, #0
 8002fb8:	d000      	beq.n	8002fbc <EE_WriteVariable+0x1f4>
 8002fba:	e761      	b.n	8002e80 <EE_WriteVariable+0xb8>
        if (pagestatus1 == RECEIVE_DATA)
 8002fbc:	480d      	ldr	r0, [pc, #52]	; (8002ff4 <EE_WriteVariable+0x22c>)
 8002fbe:	4281      	cmp	r1, r0
 8002fc0:	d0e7      	beq.n	8002f92 <EE_WriteVariable+0x1ca>
 8002fc2:	001d      	movs	r5, r3
 8002fc4:	490e      	ldr	r1, [pc, #56]	; (8003000 <EE_WriteVariable+0x238>)
 8002fc6:	e7e7      	b.n	8002f98 <EE_WriteVariable+0x1d0>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, Data);       
 8002fc8:	2300      	movs	r3, #0
 8002fca:	0029      	movs	r1, r5
 8002fcc:	2001      	movs	r0, #1
 8002fce:	f7fd ff13 	bl	8000df8 <HAL_FLASH_Program>
      if (flashstatus != HAL_OK)
 8002fd2:	2800      	cmp	r0, #0
 8002fd4:	d000      	beq.n	8002fd8 <EE_WriteVariable+0x210>
 8002fd6:	e72a      	b.n	8002e2e <EE_WriteVariable+0x66>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, VirtAddress);       
 8002fd8:	1ca9      	adds	r1, r5, #2
 8002fda:	465a      	mov	r2, fp
 8002fdc:	2300      	movs	r3, #0
 8002fde:	2001      	movs	r0, #1
 8002fe0:	f7fd ff0a 	bl	8000df8 <HAL_FLASH_Program>
      return flashstatus;
 8002fe4:	b280      	uxth	r0, r0
        if (eepromstatus != HAL_OK)
 8002fe6:	2800      	cmp	r0, #0
 8002fe8:	d0a1      	beq.n	8002f2e <EE_WriteVariable+0x166>
 8002fea:	e721      	b.n	8002e30 <EE_WriteVariable+0x68>
 8002fec:	08007000 	.word	0x08007000
 8002ff0:	08007800 	.word	0x08007800
 8002ff4:	0000eeee 	.word	0x0000eeee
 8002ff8:	0800f000 	.word	0x0800f000
 8002ffc:	0800f3ff 	.word	0x0800f3ff
 8003000:	080073ff 	.word	0x080073ff
 8003004:	20000004 	.word	0x20000004
 8003008:	20000084 	.word	0x20000084
 800300c:	0800f3fe 	.word	0x0800f3fe
 8003010:	0800f3fc 	.word	0x0800f3fc
 8003014:	0800f002 	.word	0x0800f002
 8003018:	080073fe 	.word	0x080073fe
 800301c:	080073fc 	.word	0x080073fc
 8003020:	08007002 	.word	0x08007002

08003024 <computeDshotDMA.part.1>:
    			}
    			}

}

void computeDshotDMA(){
 8003024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003026:	46de      	mov	lr, fp
 8003028:	4657      	mov	r7, sl
 800302a:	464e      	mov	r6, r9
 800302c:	4645      	mov	r5, r8
 800302e:	b5e0      	push	{r5, r6, r7, lr}
	if (dma_buffer[0] < 1000){
		return;
	}

	for (int i = 1; i < 32; i+=2){
		dpulse[(i-1)/2] = (dma_buffer[i]  / 10) - 1;
 8003030:	4d70      	ldr	r5, [pc, #448]	; (80031f4 <computeDshotDMA.part.1+0x1d0>)
void computeDshotDMA(){
 8003032:	b08b      	sub	sp, #44	; 0x2c
		dpulse[(i-1)/2] = (dma_buffer[i]  / 10) - 1;
 8003034:	6868      	ldr	r0, [r5, #4]
 8003036:	210a      	movs	r1, #10
 8003038:	f7fd f866 	bl	8000108 <__udivsi3>
 800303c:	4c6e      	ldr	r4, [pc, #440]	; (80031f8 <computeDshotDMA.part.1+0x1d4>)
 800303e:	1e43      	subs	r3, r0, #1
 8003040:	6023      	str	r3, [r4, #0]
 8003042:	68e8      	ldr	r0, [r5, #12]
 8003044:	210a      	movs	r1, #10
 8003046:	9301      	str	r3, [sp, #4]
 8003048:	f7fd f85e 	bl	8000108 <__udivsi3>
 800304c:	1e47      	subs	r7, r0, #1
 800304e:	6067      	str	r7, [r4, #4]
 8003050:	6968      	ldr	r0, [r5, #20]
 8003052:	210a      	movs	r1, #10
 8003054:	f7fd f858 	bl	8000108 <__udivsi3>
 8003058:	1e42      	subs	r2, r0, #1
 800305a:	60a2      	str	r2, [r4, #8]
 800305c:	69e8      	ldr	r0, [r5, #28]
 800305e:	210a      	movs	r1, #10
 8003060:	9202      	str	r2, [sp, #8]
 8003062:	f7fd f851 	bl	8000108 <__udivsi3>
 8003066:	1e41      	subs	r1, r0, #1
 8003068:	60e1      	str	r1, [r4, #12]
 800306a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800306c:	9103      	str	r1, [sp, #12]
 800306e:	210a      	movs	r1, #10
 8003070:	f7fd f84a 	bl	8000108 <__udivsi3>
 8003074:	3801      	subs	r0, #1
 8003076:	6120      	str	r0, [r4, #16]
 8003078:	9004      	str	r0, [sp, #16]
 800307a:	210a      	movs	r1, #10
 800307c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800307e:	f7fd f843 	bl	8000108 <__udivsi3>
 8003082:	3801      	subs	r0, #1
 8003084:	6160      	str	r0, [r4, #20]
 8003086:	9005      	str	r0, [sp, #20]
 8003088:	210a      	movs	r1, #10
 800308a:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800308c:	f7fd f83c 	bl	8000108 <__udivsi3>
 8003090:	1e46      	subs	r6, r0, #1
 8003092:	61a6      	str	r6, [r4, #24]
 8003094:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8003096:	210a      	movs	r1, #10
 8003098:	9606      	str	r6, [sp, #24]
 800309a:	f7fd f835 	bl	8000108 <__udivsi3>
 800309e:	1e46      	subs	r6, r0, #1
 80030a0:	61e6      	str	r6, [r4, #28]
 80030a2:	6c68      	ldr	r0, [r5, #68]	; 0x44
 80030a4:	210a      	movs	r1, #10
 80030a6:	f7fd f82f 	bl	8000108 <__udivsi3>
 80030aa:	46b3      	mov	fp, r6
 80030ac:	1e46      	subs	r6, r0, #1
 80030ae:	6226      	str	r6, [r4, #32]
 80030b0:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 80030b2:	210a      	movs	r1, #10
 80030b4:	f7fd f828 	bl	8000108 <__udivsi3>
 80030b8:	46b1      	mov	r9, r6
 80030ba:	1e46      	subs	r6, r0, #1
 80030bc:	6266      	str	r6, [r4, #36]	; 0x24
 80030be:	6d68      	ldr	r0, [r5, #84]	; 0x54
 80030c0:	210a      	movs	r1, #10
 80030c2:	f7fd f821 	bl	8000108 <__udivsi3>
 80030c6:	46b0      	mov	r8, r6
 80030c8:	1e46      	subs	r6, r0, #1
 80030ca:	62a6      	str	r6, [r4, #40]	; 0x28
 80030cc:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 80030ce:	210a      	movs	r1, #10
 80030d0:	f7fd f81a 	bl	8000108 <__udivsi3>
 80030d4:	46b2      	mov	sl, r6
 80030d6:	1e46      	subs	r6, r0, #1
 80030d8:	62e6      	str	r6, [r4, #44]	; 0x2c
 80030da:	6e68      	ldr	r0, [r5, #100]	; 0x64
 80030dc:	210a      	movs	r1, #10
 80030de:	9607      	str	r6, [sp, #28]
 80030e0:	f7fd f812 	bl	8000108 <__udivsi3>
 80030e4:	1e43      	subs	r3, r0, #1
 80030e6:	6323      	str	r3, [r4, #48]	; 0x30
 80030e8:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 80030ea:	210a      	movs	r1, #10
 80030ec:	9308      	str	r3, [sp, #32]
 80030ee:	f7fd f80b 	bl	8000108 <__udivsi3>
 80030f2:	1e46      	subs	r6, r0, #1
 80030f4:	6366      	str	r6, [r4, #52]	; 0x34
 80030f6:	210a      	movs	r1, #10
 80030f8:	6f68      	ldr	r0, [r5, #116]	; 0x74
 80030fa:	f7fd f805 	bl	8000108 <__udivsi3>
 80030fe:	1e42      	subs	r2, r0, #1
 8003100:	63a2      	str	r2, [r4, #56]	; 0x38
 8003102:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
 8003104:	210a      	movs	r1, #10
 8003106:	9209      	str	r2, [sp, #36]	; 0x24
 8003108:	f7fc fffe 	bl	8000108 <__udivsi3>
	}

	 calcCRC = ((dpulse[0]^dpulse[4]^dpulse[8])<<3
 800310c:	9d04      	ldr	r5, [sp, #16]
 800310e:	9b01      	ldr	r3, [sp, #4]
		dpulse[(i-1)/2] = (dma_buffer[i]  / 10) - 1;
 8003110:	3801      	subs	r0, #1
	 calcCRC = ((dpulse[0]^dpulse[4]^dpulse[8])<<3
 8003112:	406b      	eors	r3, r5
 8003114:	464d      	mov	r5, r9
		dpulse[(i-1)/2] = (dma_buffer[i]  / 10) - 1;
 8003116:	63e0      	str	r0, [r4, #60]	; 0x3c
			          |(dpulse[1]^dpulse[5]^dpulse[9])<<2
 8003118:	9c05      	ldr	r4, [sp, #20]
	 calcCRC = ((dpulse[0]^dpulse[4]^dpulse[8])<<3
 800311a:	406b      	eors	r3, r5
			          |(dpulse[1]^dpulse[5]^dpulse[9])<<2
 800311c:	407c      	eors	r4, r7
 800311e:	0022      	movs	r2, r4
 8003120:	4645      	mov	r5, r8
 8003122:	406a      	eors	r2, r5
					|(dpulse[2]^dpulse[6]^dpulse[10])<<1
					|(dpulse[3]^dpulse[7]^dpulse[11])
 8003124:	465d      	mov	r5, fp
 8003126:	9903      	ldr	r1, [sp, #12]
			          |(dpulse[1]^dpulse[5]^dpulse[9])<<2
 8003128:	0092      	lsls	r2, r2, #2
					|(dpulse[3]^dpulse[7]^dpulse[11])
 800312a:	4069      	eors	r1, r5
	 calcCRC = ((dpulse[0]^dpulse[4]^dpulse[8])<<3
 800312c:	00db      	lsls	r3, r3, #3
			          |(dpulse[1]^dpulse[5]^dpulse[9])<<2
 800312e:	4313      	orrs	r3, r2
					|(dpulse[3]^dpulse[7]^dpulse[11])
 8003130:	000a      	movs	r2, r1
 8003132:	9c07      	ldr	r4, [sp, #28]
					|(dpulse[2]^dpulse[6]^dpulse[10])<<1
 8003134:	9906      	ldr	r1, [sp, #24]
					|(dpulse[3]^dpulse[7]^dpulse[11])
 8003136:	4062      	eors	r2, r4
					|(dpulse[2]^dpulse[6]^dpulse[10])<<1
 8003138:	4654      	mov	r4, sl
					|(dpulse[3]^dpulse[7]^dpulse[11])
 800313a:	4313      	orrs	r3, r2
					|(dpulse[2]^dpulse[6]^dpulse[10])<<1
 800313c:	9a02      	ldr	r2, [sp, #8]
				);
	 checkCRC = (dpulse[12]<<3 | dpulse[13]<<2 | dpulse[14]<<1 | dpulse[15]);
 800313e:	00b6      	lsls	r6, r6, #2
					|(dpulse[2]^dpulse[6]^dpulse[10])<<1
 8003140:	404a      	eors	r2, r1
 8003142:	4062      	eors	r2, r4
 8003144:	0052      	lsls	r2, r2, #1
					|(dpulse[3]^dpulse[7]^dpulse[11])
 8003146:	4313      	orrs	r3, r2
	 calcCRC = ((dpulse[0]^dpulse[4]^dpulse[8])<<3
 8003148:	4a2c      	ldr	r2, [pc, #176]	; (80031fc <computeDshotDMA.part.1+0x1d8>)
					|(dpulse[3]^dpulse[7]^dpulse[11])
 800314a:	b2db      	uxtb	r3, r3
	 calcCRC = ((dpulse[0]^dpulse[4]^dpulse[8])<<3
 800314c:	7013      	strb	r3, [r2, #0]
	 checkCRC = (dpulse[12]<<3 | dpulse[13]<<2 | dpulse[14]<<1 | dpulse[15]);
 800314e:	9a08      	ldr	r2, [sp, #32]
 8003150:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003152:	00d2      	lsls	r2, r2, #3
 8003154:	4332      	orrs	r2, r6
 8003156:	4302      	orrs	r2, r0
 8003158:	0048      	lsls	r0, r1, #1
 800315a:	4302      	orrs	r2, r0
 800315c:	4928      	ldr	r1, [pc, #160]	; (8003200 <computeDshotDMA.part.1+0x1dc>)
 800315e:	b2d2      	uxtb	r2, r2
 8003160:	700a      	strb	r2, [r1, #0]
//
			if(calcCRC == checkCRC){
 8003162:	4293      	cmp	r3, r2
 8003164:	d027      	beq.n	80031b6 <computeDshotDMA.part.1+0x192>
 8003166:	4b27      	ldr	r3, [pc, #156]	; (8003204 <computeDshotDMA.part.1+0x1e0>)
 8003168:	6818      	ldr	r0, [r3, #0]
//				success++;
				}else{
//					error++;
				}

			if (tocheck > 47 && tocheck < 2048){
 800316a:	0003      	movs	r3, r0
 800316c:	4a26      	ldr	r2, [pc, #152]	; (8003208 <computeDshotDMA.part.1+0x1e4>)
 800316e:	3b30      	subs	r3, #48	; 0x30
 8003170:	4293      	cmp	r3, r2
 8003172:	d91a      	bls.n	80031aa <computeDshotDMA.part.1+0x186>
				newinput = tocheck;
				commandcount = 0;
			}else if (tocheck > 1 && tocheck < 48 && input == 0){
 8003174:	1e83      	subs	r3, r0, #2
 8003176:	2b2d      	cmp	r3, #45	; 0x2d
 8003178:	d910      	bls.n	800319c <computeDshotDMA.part.1+0x178>

					dshotcommand = tocheck ;


			}else{
				commandcount++;
 800317a:	4a24      	ldr	r2, [pc, #144]	; (800320c <computeDshotDMA.part.1+0x1e8>)
 800317c:	6813      	ldr	r3, [r2, #0]
 800317e:	3301      	adds	r3, #1
 8003180:	6013      	str	r3, [r2, #0]
				if (commandcount > 1){
 8003182:	2b01      	cmp	r3, #1
 8003184:	dd03      	ble.n	800318e <computeDshotDMA.part.1+0x16a>
				newinput = tocheck ;
 8003186:	4b22      	ldr	r3, [pc, #136]	; (8003210 <computeDshotDMA.part.1+0x1ec>)
 8003188:	6018      	str	r0, [r3, #0]
			    commandcount = 0;
 800318a:	2300      	movs	r3, #0
 800318c:	6013      	str	r3, [r2, #0]
			}
			}

}
 800318e:	b00b      	add	sp, #44	; 0x2c
 8003190:	bc3c      	pop	{r2, r3, r4, r5}
 8003192:	4690      	mov	r8, r2
 8003194:	4699      	mov	r9, r3
 8003196:	46a2      	mov	sl, r4
 8003198:	46ab      	mov	fp, r5
 800319a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			}else if (tocheck > 1 && tocheck < 48 && input == 0){
 800319c:	4b1d      	ldr	r3, [pc, #116]	; (8003214 <computeDshotDMA.part.1+0x1f0>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1ea      	bne.n	800317a <computeDshotDMA.part.1+0x156>
					dshotcommand = tocheck ;
 80031a4:	4b1c      	ldr	r3, [pc, #112]	; (8003218 <computeDshotDMA.part.1+0x1f4>)
 80031a6:	6018      	str	r0, [r3, #0]
 80031a8:	e7f1      	b.n	800318e <computeDshotDMA.part.1+0x16a>
				commandcount = 0;
 80031aa:	2200      	movs	r2, #0
				newinput = tocheck;
 80031ac:	4b18      	ldr	r3, [pc, #96]	; (8003210 <computeDshotDMA.part.1+0x1ec>)
 80031ae:	6018      	str	r0, [r3, #0]
				commandcount = 0;
 80031b0:	4b16      	ldr	r3, [pc, #88]	; (800320c <computeDshotDMA.part.1+0x1e8>)
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	e7eb      	b.n	800318e <computeDshotDMA.part.1+0x16a>
					dpulse[0]<<10 | dpulse[1]<<9 | dpulse[2]<<8 | dpulse[3]<<7
 80031b6:	9b01      	ldr	r3, [sp, #4]
 80031b8:	027f      	lsls	r7, r7, #9
 80031ba:	0298      	lsls	r0, r3, #10
 80031bc:	9b02      	ldr	r3, [sp, #8]
 80031be:	4338      	orrs	r0, r7
 80031c0:	021f      	lsls	r7, r3, #8
 80031c2:	9b03      	ldr	r3, [sp, #12]
					| dpulse[8]<<2 | dpulse[9]<<1 | dpulse[10]);
 80031c4:	4320      	orrs	r0, r4
					dpulse[0]<<10 | dpulse[1]<<9 | dpulse[2]<<8 | dpulse[3]<<7
 80031c6:	01db      	lsls	r3, r3, #7
					| dpulse[8]<<2 | dpulse[9]<<1 | dpulse[10]);
 80031c8:	4338      	orrs	r0, r7
 80031ca:	4318      	orrs	r0, r3
					| dpulse[4]<<6 | dpulse[5]<<5 | dpulse[6]<<4 | dpulse[7]<<3
 80031cc:	9b04      	ldr	r3, [sp, #16]
 80031ce:	019b      	lsls	r3, r3, #6
					| dpulse[8]<<2 | dpulse[9]<<1 | dpulse[10]);
 80031d0:	4318      	orrs	r0, r3
					| dpulse[4]<<6 | dpulse[5]<<5 | dpulse[6]<<4 | dpulse[7]<<3
 80031d2:	9b05      	ldr	r3, [sp, #20]
 80031d4:	015b      	lsls	r3, r3, #5
					| dpulse[8]<<2 | dpulse[9]<<1 | dpulse[10]);
 80031d6:	4318      	orrs	r0, r3
					| dpulse[4]<<6 | dpulse[5]<<5 | dpulse[6]<<4 | dpulse[7]<<3
 80031d8:	9b06      	ldr	r3, [sp, #24]
 80031da:	011b      	lsls	r3, r3, #4
					| dpulse[8]<<2 | dpulse[9]<<1 | dpulse[10]);
 80031dc:	4318      	orrs	r0, r3
					| dpulse[4]<<6 | dpulse[5]<<5 | dpulse[6]<<4 | dpulse[7]<<3
 80031de:	00eb      	lsls	r3, r5, #3
					| dpulse[8]<<2 | dpulse[9]<<1 | dpulse[10]);
 80031e0:	4318      	orrs	r0, r3
 80031e2:	464b      	mov	r3, r9
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4318      	orrs	r0, r3
 80031e8:	4643      	mov	r3, r8
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	4318      	orrs	r0, r3
				tocheck = (
 80031ee:	4b05      	ldr	r3, [pc, #20]	; (8003204 <computeDshotDMA.part.1+0x1e0>)
 80031f0:	6018      	str	r0, [r3, #0]
 80031f2:	e7ba      	b.n	800316a <computeDshotDMA.part.1+0x146>
 80031f4:	20000284 	.word	0x20000284
 80031f8:	200000c8 	.word	0x200000c8
 80031fc:	200001f0 	.word	0x200001f0
 8003200:	20000204 	.word	0x20000204
 8003204:	20000174 	.word	0x20000174
 8003208:	000007cf 	.word	0x000007cf
 800320c:	200000b0 	.word	0x200000b0
 8003210:	2000012c 	.word	0x2000012c
 8003214:	2000011c 	.word	0x2000011c
 8003218:	2000010c 	.word	0x2000010c

0800321c <storeEEpromConfig>:
void storeEEpromConfig(){
 800321c:	b510      	push	{r4, lr}
	 EE_WriteVariable(VirtAddVarTab[EEvehiclemode], vehicle_mode);
 800321e:	4b08      	ldr	r3, [pc, #32]	; (8003240 <storeEEpromConfig+0x24>)
 8003220:	4c08      	ldr	r4, [pc, #32]	; (8003244 <storeEEpromConfig+0x28>)
 8003222:	7819      	ldrb	r1, [r3, #0]
 8003224:	8820      	ldrh	r0, [r4, #0]
 8003226:	f7ff fdcf 	bl	8002dc8 <EE_WriteVariable>
	 EE_WriteVariable(VirtAddVarTab[EEdirection], dir_reversed);
 800322a:	4b07      	ldr	r3, [pc, #28]	; (8003248 <storeEEpromConfig+0x2c>)
 800322c:	8860      	ldrh	r0, [r4, #2]
 800322e:	8819      	ldrh	r1, [r3, #0]
 8003230:	f7ff fdca 	bl	8002dc8 <EE_WriteVariable>
	 EE_WriteVariable(VirtAddVarTab[EEbidirection], bi_direction);
 8003234:	4b05      	ldr	r3, [pc, #20]	; (800324c <storeEEpromConfig+0x30>)
 8003236:	88a0      	ldrh	r0, [r4, #4]
 8003238:	8819      	ldrh	r1, [r3, #0]
 800323a:	f7ff fdc5 	bl	8002dc8 <EE_WriteVariable>
}
 800323e:	bd10      	pop	{r4, pc}
 8003240:	20000058 	.word	0x20000058
 8003244:	20000004 	.word	0x20000004
 8003248:	200000c4 	.word	0x200000c4
 800324c:	200000ac 	.word	0x200000ac

08003250 <loadEEpromConfig>:
void loadEEpromConfig(){
 8003250:	b570      	push	{r4, r5, r6, lr}
	 EE_ReadVariable(VirtAddVarTab[EEvehiclemode], &VarDataTab[EEvehiclemode]);
 8003252:	4c15      	ldr	r4, [pc, #84]	; (80032a8 <loadEEpromConfig+0x58>)
 8003254:	4d15      	ldr	r5, [pc, #84]	; (80032ac <loadEEpromConfig+0x5c>)
 8003256:	0021      	movs	r1, r4
 8003258:	8828      	ldrh	r0, [r5, #0]
 800325a:	f7ff fd7d 	bl	8002d58 <EE_ReadVariable>
	 EE_ReadVariable(VirtAddVarTab[EEdirection], &VarDataTab[EEdirection]);
 800325e:	1ca1      	adds	r1, r4, #2
 8003260:	8868      	ldrh	r0, [r5, #2]
 8003262:	f7ff fd79 	bl	8002d58 <EE_ReadVariable>
	 EE_ReadVariable(VirtAddVarTab[EEbidirection], &VarDataTab[EEbidirection]);
 8003266:	1d21      	adds	r1, r4, #4
 8003268:	88a8      	ldrh	r0, [r5, #4]
 800326a:	f7ff fd75 	bl	8002d58 <EE_ReadVariable>
	 if (VarDataTab[EEvehiclemode] == 0){             // nothing in the eeprom
 800326e:	8823      	ldrh	r3, [r4, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d008      	beq.n	8003286 <loadEEpromConfig+0x36>
	 vehicle_mode = VarDataTab[EEvehiclemode];
 8003274:	4a0e      	ldr	r2, [pc, #56]	; (80032b0 <loadEEpromConfig+0x60>)
 8003276:	7013      	strb	r3, [r2, #0]
	 dir_reversed = VarDataTab[EEdirection];
 8003278:	8862      	ldrh	r2, [r4, #2]
 800327a:	4b0e      	ldr	r3, [pc, #56]	; (80032b4 <loadEEpromConfig+0x64>)
 800327c:	601a      	str	r2, [r3, #0]
	 bi_direction = VarDataTab[EEbidirection];
 800327e:	88a2      	ldrh	r2, [r4, #4]
 8003280:	4b0d      	ldr	r3, [pc, #52]	; (80032b8 <loadEEpromConfig+0x68>)
 8003282:	601a      	str	r2, [r3, #0]
}
 8003284:	bd70      	pop	{r4, r5, r6, pc}
	 EE_WriteVariable(VirtAddVarTab[EEvehiclemode], vehicle_mode);
 8003286:	4b0a      	ldr	r3, [pc, #40]	; (80032b0 <loadEEpromConfig+0x60>)
 8003288:	8828      	ldrh	r0, [r5, #0]
 800328a:	7819      	ldrb	r1, [r3, #0]
 800328c:	f7ff fd9c 	bl	8002dc8 <EE_WriteVariable>
	 EE_WriteVariable(VirtAddVarTab[EEdirection], dir_reversed);
 8003290:	4b08      	ldr	r3, [pc, #32]	; (80032b4 <loadEEpromConfig+0x64>)
 8003292:	8868      	ldrh	r0, [r5, #2]
 8003294:	8819      	ldrh	r1, [r3, #0]
 8003296:	f7ff fd97 	bl	8002dc8 <EE_WriteVariable>
	 EE_WriteVariable(VirtAddVarTab[EEbidirection], bi_direction);
 800329a:	4b07      	ldr	r3, [pc, #28]	; (80032b8 <loadEEpromConfig+0x68>)
 800329c:	88a8      	ldrh	r0, [r5, #4]
 800329e:	8819      	ldrh	r1, [r3, #0]
 80032a0:	f7ff fd92 	bl	8002dc8 <EE_WriteVariable>
 80032a4:	e7ee      	b.n	8003284 <loadEEpromConfig+0x34>
 80032a6:	46c0      	nop			; (mov r8, r8)
 80032a8:	20000094 	.word	0x20000094
 80032ac:	20000004 	.word	0x20000004
 80032b0:	20000058 	.word	0x20000058
 80032b4:	200000c4 	.word	0x200000c4
 80032b8:	200000ac 	.word	0x200000ac

080032bc <phaseB>:
	if (newPhase == pwm) {
 80032bc:	4b2b      	ldr	r3, [pc, #172]	; (800336c <phaseB+0xb0>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4283      	cmp	r3, r0
 80032c2:	d031      	beq.n	8003328 <phaseB+0x6c>
	if (newPhase == floating) {
 80032c4:	4b2a      	ldr	r3, [pc, #168]	; (8003370 <phaseB+0xb4>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4298      	cmp	r0, r3
 80032ca:	d018      	beq.n	80032fe <phaseB+0x42>
	if (newPhase == lowside) {          // low mosfet on
 80032cc:	4b29      	ldr	r3, [pc, #164]	; (8003374 <phaseB+0xb8>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4298      	cmp	r0, r3
 80032d2:	d113      	bne.n	80032fc <phaseB+0x40>
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 80032d4:	2103      	movs	r1, #3
 80032d6:	4a28      	ldr	r2, [pc, #160]	; (8003378 <phaseB+0xbc>)
 80032d8:	6813      	ldr	r3, [r2, #0]
 80032da:	438b      	bics	r3, r1
 80032dc:	3902      	subs	r1, #2
 80032de:	430b      	orrs	r3, r1
 80032e0:	6013      	str	r3, [r2, #0]
 80032e2:	2390      	movs	r3, #144	; 0x90
		GPIOB->BSRR = GPIO_PIN_0;
 80032e4:	6191      	str	r1, [r2, #24]
 80032e6:	05db      	lsls	r3, r3, #23
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	4924      	ldr	r1, [pc, #144]	; (800337c <phaseB+0xc0>)
 80032ec:	4011      	ands	r1, r2
 80032ee:	2280      	movs	r2, #128	; 0x80
 80032f0:	02d2      	lsls	r2, r2, #11
 80032f2:	430a      	orrs	r2, r1
 80032f4:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_9;
 80032f6:	2280      	movs	r2, #128	; 0x80
 80032f8:	0092      	lsls	r2, r2, #2
 80032fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80032fc:	4770      	bx	lr
 80032fe:	2103      	movs	r1, #3
 8003300:	4a1d      	ldr	r2, [pc, #116]	; (8003378 <phaseB+0xbc>)
 8003302:	6813      	ldr	r3, [r2, #0]
 8003304:	438b      	bics	r3, r1
 8003306:	3902      	subs	r1, #2
 8003308:	430b      	orrs	r3, r1
 800330a:	6013      	str	r3, [r2, #0]
 800330c:	2390      	movs	r3, #144	; 0x90
		GPIOB->BRR = GPIO_PIN_0;
 800330e:	6291      	str	r1, [r2, #40]	; 0x28
 8003310:	05db      	lsls	r3, r3, #23
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	4919      	ldr	r1, [pc, #100]	; (800337c <phaseB+0xc0>)
 8003316:	4011      	ands	r1, r2
 8003318:	2280      	movs	r2, #128	; 0x80
 800331a:	02d2      	lsls	r2, r2, #11
 800331c:	430a      	orrs	r2, r1
 800331e:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_9;
 8003320:	2280      	movs	r2, #128	; 0x80
 8003322:	0092      	lsls	r2, r2, #2
 8003324:	629a      	str	r2, [r3, #40]	; 0x28
 8003326:	e7d1      	b.n	80032cc <phaseB+0x10>
		if(!slow_decay  || prop_brake_active){            // for future
 8003328:	4b15      	ldr	r3, [pc, #84]	; (8003380 <phaseB+0xc4>)
 800332a:	4a13      	ldr	r2, [pc, #76]	; (8003378 <phaseB+0xbc>)
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d110      	bne.n	8003354 <phaseB+0x98>
 8003332:	2103      	movs	r1, #3
 8003334:	6813      	ldr	r3, [r2, #0]
 8003336:	438b      	bics	r3, r1
 8003338:	3902      	subs	r1, #2
 800333a:	430b      	orrs	r3, r1
 800333c:	6013      	str	r3, [r2, #0]
		GPIOB->BRR = GPIO_PIN_0;
 800333e:	6291      	str	r1, [r2, #40]	; 0x28
 8003340:	2190      	movs	r1, #144	; 0x90
 8003342:	05c9      	lsls	r1, r1, #23
 8003344:	680b      	ldr	r3, [r1, #0]
 8003346:	4a0d      	ldr	r2, [pc, #52]	; (800337c <phaseB+0xc0>)
 8003348:	401a      	ands	r2, r3
 800334a:	2380      	movs	r3, #128	; 0x80
 800334c:	031b      	lsls	r3, r3, #12
 800334e:	4313      	orrs	r3, r2
 8003350:	600b      	str	r3, [r1, #0]
 8003352:	e7b7      	b.n	80032c4 <phaseB+0x8>
		if(!slow_decay  || prop_brake_active){            // for future
 8003354:	4b0b      	ldr	r3, [pc, #44]	; (8003384 <phaseB+0xc8>)
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1ea      	bne.n	8003332 <phaseB+0x76>
 800335c:	2103      	movs	r1, #3
 800335e:	6813      	ldr	r3, [r2, #0]
 8003360:	438b      	bics	r3, r1
 8003362:	3901      	subs	r1, #1
 8003364:	430b      	orrs	r3, r1
 8003366:	6013      	str	r3, [r2, #0]
 8003368:	e7ea      	b.n	8003340 <phaseB+0x84>
 800336a:	46c0      	nop			; (mov r8, r8)
 800336c:	20000034 	.word	0x20000034
 8003370:	2000001c 	.word	0x2000001c
 8003374:	20000028 	.word	0x20000028
 8003378:	48000400 	.word	0x48000400
 800337c:	fff3ffff 	.word	0xfff3ffff
 8003380:	20000040 	.word	0x20000040
 8003384:	20000133 	.word	0x20000133

08003388 <phaseC>:
	if (newPhase == pwm) {  // pwm
 8003388:	4b2f      	ldr	r3, [pc, #188]	; (8003448 <phaseC+0xc0>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4283      	cmp	r3, r0
 800338e:	d033      	beq.n	80033f8 <phaseC+0x70>
	if (newPhase == floating) {            // floating
 8003390:	4b2e      	ldr	r3, [pc, #184]	; (800344c <phaseC+0xc4>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4298      	cmp	r0, r3
 8003396:	d019      	beq.n	80033cc <phaseC+0x44>
	if (newPhase == lowside) {              // lowside
 8003398:	4b2d      	ldr	r3, [pc, #180]	; (8003450 <phaseC+0xc8>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4298      	cmp	r0, r3
 800339e:	d114      	bne.n	80033ca <phaseC+0x42>
 80033a0:	2390      	movs	r3, #144	; 0x90
 80033a2:	05db      	lsls	r3, r3, #23
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	492b      	ldr	r1, [pc, #172]	; (8003454 <phaseC+0xcc>)
 80033a8:	4011      	ands	r1, r2
 80033aa:	2280      	movs	r2, #128	; 0x80
 80033ac:	01d2      	lsls	r2, r2, #7
 80033ae:	430a      	orrs	r2, r1
 80033b0:	601a      	str	r2, [r3, #0]
		GPIOA->BSRR = GPIO_PIN_7;
 80033b2:	2280      	movs	r2, #128	; 0x80
 80033b4:	619a      	str	r2, [r3, #24]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	4927      	ldr	r1, [pc, #156]	; (8003458 <phaseC+0xd0>)
 80033ba:	4011      	ands	r1, r2
 80033bc:	2280      	movs	r2, #128	; 0x80
 80033be:	0252      	lsls	r2, r2, #9
 80033c0:	430a      	orrs	r2, r1
 80033c2:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_8;
 80033c4:	2280      	movs	r2, #128	; 0x80
 80033c6:	0052      	lsls	r2, r2, #1
 80033c8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80033ca:	4770      	bx	lr
 80033cc:	2390      	movs	r3, #144	; 0x90
 80033ce:	05db      	lsls	r3, r3, #23
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	4920      	ldr	r1, [pc, #128]	; (8003454 <phaseC+0xcc>)
 80033d4:	4011      	ands	r1, r2
 80033d6:	2280      	movs	r2, #128	; 0x80
 80033d8:	01d2      	lsls	r2, r2, #7
 80033da:	430a      	orrs	r2, r1
 80033dc:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_7;
 80033de:	2280      	movs	r2, #128	; 0x80
 80033e0:	629a      	str	r2, [r3, #40]	; 0x28
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	491c      	ldr	r1, [pc, #112]	; (8003458 <phaseC+0xd0>)
 80033e6:	4011      	ands	r1, r2
 80033e8:	2280      	movs	r2, #128	; 0x80
 80033ea:	0252      	lsls	r2, r2, #9
 80033ec:	430a      	orrs	r2, r1
 80033ee:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_8;
 80033f0:	2280      	movs	r2, #128	; 0x80
 80033f2:	0052      	lsls	r2, r2, #1
 80033f4:	629a      	str	r2, [r3, #40]	; 0x28
 80033f6:	e7cf      	b.n	8003398 <phaseC+0x10>
		if (!slow_decay || prop_brake_active){
 80033f8:	4b18      	ldr	r3, [pc, #96]	; (800345c <phaseC+0xd4>)
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d114      	bne.n	800342a <phaseC+0xa2>
 8003400:	2390      	movs	r3, #144	; 0x90
 8003402:	05db      	lsls	r3, r3, #23
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	4913      	ldr	r1, [pc, #76]	; (8003454 <phaseC+0xcc>)
 8003408:	4011      	ands	r1, r2
 800340a:	2280      	movs	r2, #128	; 0x80
 800340c:	01d2      	lsls	r2, r2, #7
 800340e:	430a      	orrs	r2, r1
 8003410:	601a      	str	r2, [r3, #0]
			GPIOA->BRR = GPIO_PIN_7;
 8003412:	2280      	movs	r2, #128	; 0x80
 8003414:	629a      	str	r2, [r3, #40]	; 0x28
 8003416:	2190      	movs	r1, #144	; 0x90
 8003418:	05c9      	lsls	r1, r1, #23
 800341a:	680b      	ldr	r3, [r1, #0]
 800341c:	4a0e      	ldr	r2, [pc, #56]	; (8003458 <phaseC+0xd0>)
 800341e:	401a      	ands	r2, r3
 8003420:	2380      	movs	r3, #128	; 0x80
 8003422:	029b      	lsls	r3, r3, #10
 8003424:	4313      	orrs	r3, r2
 8003426:	600b      	str	r3, [r1, #0]
 8003428:	e7b2      	b.n	8003390 <phaseC+0x8>
		if (!slow_decay || prop_brake_active){
 800342a:	4b0d      	ldr	r3, [pc, #52]	; (8003460 <phaseC+0xd8>)
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1e6      	bne.n	8003400 <phaseC+0x78>
 8003432:	2190      	movs	r1, #144	; 0x90
 8003434:	05c9      	lsls	r1, r1, #23
 8003436:	680b      	ldr	r3, [r1, #0]
 8003438:	4a06      	ldr	r2, [pc, #24]	; (8003454 <phaseC+0xcc>)
 800343a:	401a      	ands	r2, r3
 800343c:	2380      	movs	r3, #128	; 0x80
 800343e:	021b      	lsls	r3, r3, #8
 8003440:	4313      	orrs	r3, r2
 8003442:	600b      	str	r3, [r1, #0]
 8003444:	e7e7      	b.n	8003416 <phaseC+0x8e>
 8003446:	46c0      	nop			; (mov r8, r8)
 8003448:	20000034 	.word	0x20000034
 800344c:	2000001c 	.word	0x2000001c
 8003450:	20000028 	.word	0x20000028
 8003454:	ffff3fff 	.word	0xffff3fff
 8003458:	fffcffff 	.word	0xfffcffff
 800345c:	20000040 	.word	0x20000040
 8003460:	20000133 	.word	0x20000133

08003464 <phaseA>:
	if (newPhase == pwm) {
 8003464:	4b2c      	ldr	r3, [pc, #176]	; (8003518 <phaseA+0xb4>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4283      	cmp	r3, r0
 800346a:	d033      	beq.n	80034d4 <phaseA+0x70>
	if (newPhase == floating) {
 800346c:	4b2b      	ldr	r3, [pc, #172]	; (800351c <phaseA+0xb8>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4298      	cmp	r0, r3
 8003472:	d019      	beq.n	80034a8 <phaseA+0x44>
	if (newPhase == lowside) {
 8003474:	4b2a      	ldr	r3, [pc, #168]	; (8003520 <phaseA+0xbc>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4298      	cmp	r0, r3
 800347a:	d114      	bne.n	80034a6 <phaseA+0x42>
 800347c:	210c      	movs	r1, #12
 800347e:	4a29      	ldr	r2, [pc, #164]	; (8003524 <phaseA+0xc0>)
 8003480:	6813      	ldr	r3, [r2, #0]
 8003482:	438b      	bics	r3, r1
 8003484:	3908      	subs	r1, #8
 8003486:	430b      	orrs	r3, r1
 8003488:	6013      	str	r3, [r2, #0]
		GPIOB->BSRR = GPIO_PIN_1;
 800348a:	2302      	movs	r3, #2
 800348c:	6193      	str	r3, [r2, #24]
 800348e:	2390      	movs	r3, #144	; 0x90
 8003490:	05db      	lsls	r3, r3, #23
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	4924      	ldr	r1, [pc, #144]	; (8003528 <phaseA+0xc4>)
 8003496:	4011      	ands	r1, r2
 8003498:	2280      	movs	r2, #128	; 0x80
 800349a:	0352      	lsls	r2, r2, #13
 800349c:	430a      	orrs	r2, r1
 800349e:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_10;
 80034a0:	2280      	movs	r2, #128	; 0x80
 80034a2:	00d2      	lsls	r2, r2, #3
 80034a4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80034a6:	4770      	bx	lr
 80034a8:	210c      	movs	r1, #12
 80034aa:	4a1e      	ldr	r2, [pc, #120]	; (8003524 <phaseA+0xc0>)
 80034ac:	6813      	ldr	r3, [r2, #0]
 80034ae:	438b      	bics	r3, r1
 80034b0:	3908      	subs	r1, #8
 80034b2:	430b      	orrs	r3, r1
 80034b4:	6013      	str	r3, [r2, #0]
		GPIOB->BRR = GPIO_PIN_1;
 80034b6:	2302      	movs	r3, #2
 80034b8:	6293      	str	r3, [r2, #40]	; 0x28
 80034ba:	2390      	movs	r3, #144	; 0x90
 80034bc:	05db      	lsls	r3, r3, #23
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	4919      	ldr	r1, [pc, #100]	; (8003528 <phaseA+0xc4>)
 80034c2:	4011      	ands	r1, r2
 80034c4:	2280      	movs	r2, #128	; 0x80
 80034c6:	0352      	lsls	r2, r2, #13
 80034c8:	430a      	orrs	r2, r1
 80034ca:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_10;
 80034cc:	2280      	movs	r2, #128	; 0x80
 80034ce:	00d2      	lsls	r2, r2, #3
 80034d0:	629a      	str	r2, [r3, #40]	; 0x28
 80034d2:	e7cf      	b.n	8003474 <phaseA+0x10>
		if (!slow_decay || prop_brake_active){
 80034d4:	4b15      	ldr	r3, [pc, #84]	; (800352c <phaseA+0xc8>)
 80034d6:	4a13      	ldr	r2, [pc, #76]	; (8003524 <phaseA+0xc0>)
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d111      	bne.n	8003502 <phaseA+0x9e>
 80034de:	210c      	movs	r1, #12
 80034e0:	6813      	ldr	r3, [r2, #0]
 80034e2:	438b      	bics	r3, r1
 80034e4:	3908      	subs	r1, #8
 80034e6:	430b      	orrs	r3, r1
 80034e8:	6013      	str	r3, [r2, #0]
			GPIOB->BRR = GPIO_PIN_1;
 80034ea:	2302      	movs	r3, #2
 80034ec:	6293      	str	r3, [r2, #40]	; 0x28
 80034ee:	2190      	movs	r1, #144	; 0x90
 80034f0:	05c9      	lsls	r1, r1, #23
 80034f2:	680b      	ldr	r3, [r1, #0]
 80034f4:	4a0c      	ldr	r2, [pc, #48]	; (8003528 <phaseA+0xc4>)
 80034f6:	401a      	ands	r2, r3
 80034f8:	2380      	movs	r3, #128	; 0x80
 80034fa:	039b      	lsls	r3, r3, #14
 80034fc:	4313      	orrs	r3, r2
 80034fe:	600b      	str	r3, [r1, #0]
 8003500:	e7b4      	b.n	800346c <phaseA+0x8>
		if (!slow_decay || prop_brake_active){
 8003502:	4b0b      	ldr	r3, [pc, #44]	; (8003530 <phaseA+0xcc>)
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1e9      	bne.n	80034de <phaseA+0x7a>
 800350a:	210c      	movs	r1, #12
 800350c:	6813      	ldr	r3, [r2, #0]
 800350e:	438b      	bics	r3, r1
 8003510:	3904      	subs	r1, #4
 8003512:	430b      	orrs	r3, r1
 8003514:	6013      	str	r3, [r2, #0]
 8003516:	e7ea      	b.n	80034ee <phaseA+0x8a>
 8003518:	20000034 	.word	0x20000034
 800351c:	2000001c 	.word	0x2000001c
 8003520:	20000028 	.word	0x20000028
 8003524:	48000400 	.word	0x48000400
 8003528:	ffcfffff 	.word	0xffcfffff
 800352c:	20000040 	.word	0x20000040
 8003530:	20000133 	.word	0x20000133

08003534 <comStep>:
void comStep(int newStep) {
 8003534:	b510      	push	{r4, lr}
	if (newStep == 1) {			//A-B
 8003536:	2801      	cmp	r0, #1
 8003538:	d02a      	beq.n	8003590 <comStep+0x5c>
	if (newStep == 2) {			// C-B
 800353a:	2802      	cmp	r0, #2
 800353c:	d02e      	beq.n	800359c <comStep+0x68>
	if (newStep == 3) {		// C-A
 800353e:	2803      	cmp	r0, #3
 8003540:	d039      	beq.n	80035b6 <comStep+0x82>
	if (newStep == 4) {    // B-A
 8003542:	2804      	cmp	r0, #4
 8003544:	d004      	beq.n	8003550 <comStep+0x1c>
	if (newStep == 5) {          // B-C
 8003546:	2805      	cmp	r0, #5
 8003548:	d01c      	beq.n	8003584 <comStep+0x50>
	if (newStep == 6) {       // A-C
 800354a:	2806      	cmp	r0, #6
 800354c:	d00d      	beq.n	800356a <comStep+0x36>
}
 800354e:	bd10      	pop	{r4, pc}
		phaseA(lowside);
 8003550:	4b1c      	ldr	r3, [pc, #112]	; (80035c4 <comStep+0x90>)
 8003552:	6818      	ldr	r0, [r3, #0]
 8003554:	f7ff ff86 	bl	8003464 <phaseA>
		phaseB(pwm);
 8003558:	4b1b      	ldr	r3, [pc, #108]	; (80035c8 <comStep+0x94>)
 800355a:	6818      	ldr	r0, [r3, #0]
 800355c:	f7ff feae 	bl	80032bc <phaseB>
		phaseC(floating);
 8003560:	4b1a      	ldr	r3, [pc, #104]	; (80035cc <comStep+0x98>)
 8003562:	6818      	ldr	r0, [r3, #0]
 8003564:	f7ff ff10 	bl	8003388 <phaseC>
 8003568:	e7f1      	b.n	800354e <comStep+0x1a>
		phaseA(pwm);
 800356a:	4b17      	ldr	r3, [pc, #92]	; (80035c8 <comStep+0x94>)
 800356c:	6818      	ldr	r0, [r3, #0]
 800356e:	f7ff ff79 	bl	8003464 <phaseA>
		phaseB(floating);
 8003572:	4b16      	ldr	r3, [pc, #88]	; (80035cc <comStep+0x98>)
 8003574:	6818      	ldr	r0, [r3, #0]
 8003576:	f7ff fea1 	bl	80032bc <phaseB>
		phaseC(lowside);
 800357a:	4b12      	ldr	r3, [pc, #72]	; (80035c4 <comStep+0x90>)
 800357c:	6818      	ldr	r0, [r3, #0]
 800357e:	f7ff ff03 	bl	8003388 <phaseC>
}
 8003582:	e7e4      	b.n	800354e <comStep+0x1a>
		phaseA(floating);
 8003584:	4b11      	ldr	r3, [pc, #68]	; (80035cc <comStep+0x98>)
 8003586:	6818      	ldr	r0, [r3, #0]
 8003588:	f7ff ff6c 	bl	8003464 <phaseA>
		phaseB(pwm);
 800358c:	4b0e      	ldr	r3, [pc, #56]	; (80035c8 <comStep+0x94>)
 800358e:	e7f1      	b.n	8003574 <comStep+0x40>
		phaseA(pwm);
 8003590:	4b0d      	ldr	r3, [pc, #52]	; (80035c8 <comStep+0x94>)
 8003592:	6818      	ldr	r0, [r3, #0]
 8003594:	f7ff ff66 	bl	8003464 <phaseA>
		phaseB(lowside);
 8003598:	4b0a      	ldr	r3, [pc, #40]	; (80035c4 <comStep+0x90>)
 800359a:	e7de      	b.n	800355a <comStep+0x26>
		phaseA(floating);
 800359c:	4b0b      	ldr	r3, [pc, #44]	; (80035cc <comStep+0x98>)
 800359e:	6818      	ldr	r0, [r3, #0]
 80035a0:	f7ff ff60 	bl	8003464 <phaseA>
		phaseB(lowside);
 80035a4:	4b07      	ldr	r3, [pc, #28]	; (80035c4 <comStep+0x90>)
		phaseB(floating);
 80035a6:	6818      	ldr	r0, [r3, #0]
 80035a8:	f7ff fe88 	bl	80032bc <phaseB>
		phaseC(pwm);
 80035ac:	4b06      	ldr	r3, [pc, #24]	; (80035c8 <comStep+0x94>)
 80035ae:	6818      	ldr	r0, [r3, #0]
 80035b0:	f7ff feea 	bl	8003388 <phaseC>
 80035b4:	e7cb      	b.n	800354e <comStep+0x1a>
		phaseA(lowside);
 80035b6:	4b03      	ldr	r3, [pc, #12]	; (80035c4 <comStep+0x90>)
 80035b8:	6818      	ldr	r0, [r3, #0]
 80035ba:	f7ff ff53 	bl	8003464 <phaseA>
		phaseB(floating);
 80035be:	4b03      	ldr	r3, [pc, #12]	; (80035cc <comStep+0x98>)
 80035c0:	e7f1      	b.n	80035a6 <comStep+0x72>
 80035c2:	46c0      	nop			; (mov r8, r8)
 80035c4:	20000028 	.word	0x20000028
 80035c8:	20000034 	.word	0x20000034
 80035cc:	2000001c 	.word	0x2000001c

080035d0 <allOff>:
void allOff() {                   // coast
 80035d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035d2:	46de      	mov	lr, fp
 80035d4:	4657      	mov	r7, sl
 80035d6:	464e      	mov	r6, r9
 80035d8:	4645      	mov	r5, r8
	phaseA(floating);
 80035da:	4b82      	ldr	r3, [pc, #520]	; (80037e4 <allOff+0x214>)
	if (newPhase == pwm) {
 80035dc:	4a82      	ldr	r2, [pc, #520]	; (80037e8 <allOff+0x218>)
	phaseA(floating);
 80035de:	681b      	ldr	r3, [r3, #0]
	if (newPhase == pwm) {
 80035e0:	6811      	ldr	r1, [r2, #0]
void allOff() {                   // coast
 80035e2:	b5e0      	push	{r5, r6, r7, lr}
	if (newPhase == pwm) {
 80035e4:	428b      	cmp	r3, r1
 80035e6:	d100      	bne.n	80035ea <allOff+0x1a>
 80035e8:	e0c1      	b.n	800376e <allOff+0x19e>
 80035ea:	270c      	movs	r7, #12
 80035ec:	2404      	movs	r4, #4
 80035ee:	4e7f      	ldr	r6, [pc, #508]	; (80037ec <allOff+0x21c>)
 80035f0:	46a4      	mov	ip, r4
 80035f2:	6832      	ldr	r2, [r6, #0]
 80035f4:	4d7e      	ldr	r5, [pc, #504]	; (80037f0 <allOff+0x220>)
 80035f6:	43ba      	bics	r2, r7
 80035f8:	4322      	orrs	r2, r4
 80035fa:	6032      	str	r2, [r6, #0]
 80035fc:	2490      	movs	r4, #144	; 0x90
		GPIOB->BRR = GPIO_PIN_1;
 80035fe:	2202      	movs	r2, #2
 8003600:	05e4      	lsls	r4, r4, #23
 8003602:	62b2      	str	r2, [r6, #40]	; 0x28
 8003604:	4691      	mov	r9, r2
 8003606:	6822      	ldr	r2, [r4, #0]
 8003608:	46a8      	mov	r8, r5
 800360a:	402a      	ands	r2, r5
 800360c:	2580      	movs	r5, #128	; 0x80
 800360e:	036d      	lsls	r5, r5, #13
 8003610:	432a      	orrs	r2, r5
 8003612:	6022      	str	r2, [r4, #0]
		GPIOA->BRR = GPIO_PIN_10;
 8003614:	2280      	movs	r2, #128	; 0x80
 8003616:	00d2      	lsls	r2, r2, #3
 8003618:	4693      	mov	fp, r2
 800361a:	62a2      	str	r2, [r4, #40]	; 0x28
	if (newPhase == lowside) {
 800361c:	4a75      	ldr	r2, [pc, #468]	; (80037f4 <allOff+0x224>)
 800361e:	46aa      	mov	sl, r5
 8003620:	6815      	ldr	r5, [r2, #0]
 8003622:	42ab      	cmp	r3, r5
 8003624:	d10e      	bne.n	8003644 <allOff+0x74>
 8003626:	4660      	mov	r0, ip
 8003628:	6832      	ldr	r2, [r6, #0]
 800362a:	43ba      	bics	r2, r7
 800362c:	4302      	orrs	r2, r0
 800362e:	6032      	str	r2, [r6, #0]
		GPIOB->BSRR = GPIO_PIN_1;
 8003630:	464a      	mov	r2, r9
 8003632:	4640      	mov	r0, r8
 8003634:	61b2      	str	r2, [r6, #24]
 8003636:	6822      	ldr	r2, [r4, #0]
 8003638:	4002      	ands	r2, r0
 800363a:	4650      	mov	r0, sl
 800363c:	4310      	orrs	r0, r2
		GPIOA->BRR = GPIO_PIN_10;
 800363e:	465a      	mov	r2, fp
 8003640:	6020      	str	r0, [r4, #0]
 8003642:	62a2      	str	r2, [r4, #40]	; 0x28
	if (newPhase == pwm) {
 8003644:	001e      	movs	r6, r3
 8003646:	428b      	cmp	r3, r1
 8003648:	d100      	bne.n	800364c <allOff+0x7c>
 800364a:	e078      	b.n	800373e <allOff+0x16e>
 800364c:	2703      	movs	r7, #3
 800364e:	4c67      	ldr	r4, [pc, #412]	; (80037ec <allOff+0x21c>)
 8003650:	46b8      	mov	r8, r7
 8003652:	6822      	ldr	r2, [r4, #0]
 8003654:	4868      	ldr	r0, [pc, #416]	; (80037f8 <allOff+0x228>)
 8003656:	43ba      	bics	r2, r7
 8003658:	3f02      	subs	r7, #2
 800365a:	433a      	orrs	r2, r7
 800365c:	6022      	str	r2, [r4, #0]
 800365e:	46bc      	mov	ip, r7
		GPIOB->BRR = GPIO_PIN_0;
 8003660:	62a7      	str	r7, [r4, #40]	; 0x28
 8003662:	2790      	movs	r7, #144	; 0x90
 8003664:	05ff      	lsls	r7, r7, #23
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	4681      	mov	r9, r0
 800366a:	4002      	ands	r2, r0
 800366c:	2080      	movs	r0, #128	; 0x80
 800366e:	02c0      	lsls	r0, r0, #11
 8003670:	4302      	orrs	r2, r0
 8003672:	603a      	str	r2, [r7, #0]
		GPIOA->BRR = GPIO_PIN_9;
 8003674:	2280      	movs	r2, #128	; 0x80
 8003676:	0092      	lsls	r2, r2, #2
 8003678:	4682      	mov	sl, r0
 800367a:	62ba      	str	r2, [r7, #40]	; 0x28
	if (newPhase == lowside) {          // low mosfet on
 800367c:	42ab      	cmp	r3, r5
 800367e:	d10d      	bne.n	800369c <allOff+0xcc>
 8003680:	4640      	mov	r0, r8
 8003682:	6823      	ldr	r3, [r4, #0]
 8003684:	4383      	bics	r3, r0
 8003686:	4660      	mov	r0, ip
 8003688:	4303      	orrs	r3, r0
 800368a:	6023      	str	r3, [r4, #0]
		GPIOB->BSRR = GPIO_PIN_0;
 800368c:	61a0      	str	r0, [r4, #24]
 800368e:	4648      	mov	r0, r9
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	4003      	ands	r3, r0
 8003694:	4650      	mov	r0, sl
 8003696:	4318      	orrs	r0, r3
 8003698:	6038      	str	r0, [r7, #0]
		GPIOA->BRR = GPIO_PIN_9;
 800369a:	62ba      	str	r2, [r7, #40]	; 0x28
	if (newPhase == pwm) {  // pwm
 800369c:	42b1      	cmp	r1, r6
 800369e:	d031      	beq.n	8003704 <allOff+0x134>
 80036a0:	2390      	movs	r3, #144	; 0x90
 80036a2:	05db      	lsls	r3, r3, #23
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	4955      	ldr	r1, [pc, #340]	; (80037fc <allOff+0x22c>)
 80036a8:	4011      	ands	r1, r2
 80036aa:	2280      	movs	r2, #128	; 0x80
 80036ac:	01d2      	lsls	r2, r2, #7
 80036ae:	430a      	orrs	r2, r1
 80036b0:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_7;
 80036b2:	2280      	movs	r2, #128	; 0x80
 80036b4:	629a      	str	r2, [r3, #40]	; 0x28
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	4951      	ldr	r1, [pc, #324]	; (8003800 <allOff+0x230>)
 80036ba:	4011      	ands	r1, r2
 80036bc:	2280      	movs	r2, #128	; 0x80
 80036be:	0252      	lsls	r2, r2, #9
 80036c0:	430a      	orrs	r2, r1
 80036c2:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_8;
 80036c4:	2280      	movs	r2, #128	; 0x80
 80036c6:	0052      	lsls	r2, r2, #1
 80036c8:	629a      	str	r2, [r3, #40]	; 0x28
	if (newPhase == lowside) {              // lowside
 80036ca:	42b5      	cmp	r5, r6
 80036cc:	d114      	bne.n	80036f8 <allOff+0x128>
 80036ce:	2390      	movs	r3, #144	; 0x90
 80036d0:	05db      	lsls	r3, r3, #23
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	4949      	ldr	r1, [pc, #292]	; (80037fc <allOff+0x22c>)
 80036d6:	4011      	ands	r1, r2
 80036d8:	2280      	movs	r2, #128	; 0x80
 80036da:	01d2      	lsls	r2, r2, #7
 80036dc:	430a      	orrs	r2, r1
 80036de:	601a      	str	r2, [r3, #0]
		GPIOA->BSRR = GPIO_PIN_7;
 80036e0:	2280      	movs	r2, #128	; 0x80
 80036e2:	619a      	str	r2, [r3, #24]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	4946      	ldr	r1, [pc, #280]	; (8003800 <allOff+0x230>)
 80036e8:	4011      	ands	r1, r2
 80036ea:	2280      	movs	r2, #128	; 0x80
 80036ec:	0252      	lsls	r2, r2, #9
 80036ee:	430a      	orrs	r2, r1
 80036f0:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_8;
 80036f2:	2280      	movs	r2, #128	; 0x80
 80036f4:	0052      	lsls	r2, r2, #1
 80036f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036f8:	bc3c      	pop	{r2, r3, r4, r5}
 80036fa:	4690      	mov	r8, r2
 80036fc:	4699      	mov	r9, r3
 80036fe:	46a2      	mov	sl, r4
 8003700:	46ab      	mov	fp, r5
 8003702:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!slow_decay || prop_brake_active){
 8003704:	4b3f      	ldr	r3, [pc, #252]	; (8003804 <allOff+0x234>)
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d15d      	bne.n	80037c8 <allOff+0x1f8>
 800370c:	2390      	movs	r3, #144	; 0x90
 800370e:	05db      	lsls	r3, r3, #23
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	493a      	ldr	r1, [pc, #232]	; (80037fc <allOff+0x22c>)
 8003714:	4011      	ands	r1, r2
 8003716:	2280      	movs	r2, #128	; 0x80
 8003718:	01d2      	lsls	r2, r2, #7
 800371a:	430a      	orrs	r2, r1
 800371c:	601a      	str	r2, [r3, #0]
			GPIOA->BRR = GPIO_PIN_7;
 800371e:	2280      	movs	r2, #128	; 0x80
 8003720:	629a      	str	r2, [r3, #40]	; 0x28
 8003722:	2190      	movs	r1, #144	; 0x90
 8003724:	05c9      	lsls	r1, r1, #23
 8003726:	680b      	ldr	r3, [r1, #0]
 8003728:	4a35      	ldr	r2, [pc, #212]	; (8003800 <allOff+0x230>)
 800372a:	401a      	ands	r2, r3
 800372c:	2380      	movs	r3, #128	; 0x80
 800372e:	029b      	lsls	r3, r3, #10
 8003730:	4313      	orrs	r3, r2
 8003732:	600b      	str	r3, [r1, #0]
	if (newPhase == floating) {            // floating
 8003734:	4b2b      	ldr	r3, [pc, #172]	; (80037e4 <allOff+0x214>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	42b3      	cmp	r3, r6
 800373a:	d1c6      	bne.n	80036ca <allOff+0xfa>
 800373c:	e7b0      	b.n	80036a0 <allOff+0xd0>
		if(!slow_decay  || prop_brake_active){            // for future
 800373e:	4a31      	ldr	r2, [pc, #196]	; (8003804 <allOff+0x234>)
 8003740:	4c2a      	ldr	r4, [pc, #168]	; (80037ec <allOff+0x21c>)
 8003742:	7812      	ldrb	r2, [r2, #0]
 8003744:	2a00      	cmp	r2, #0
 8003746:	d134      	bne.n	80037b2 <allOff+0x1e2>
 8003748:	2603      	movs	r6, #3
 800374a:	6822      	ldr	r2, [r4, #0]
 800374c:	43b2      	bics	r2, r6
 800374e:	3e02      	subs	r6, #2
 8003750:	4332      	orrs	r2, r6
 8003752:	6022      	str	r2, [r4, #0]
		GPIOB->BRR = GPIO_PIN_0;
 8003754:	62a6      	str	r6, [r4, #40]	; 0x28
 8003756:	2690      	movs	r6, #144	; 0x90
 8003758:	05f6      	lsls	r6, r6, #23
 800375a:	6832      	ldr	r2, [r6, #0]
 800375c:	4c26      	ldr	r4, [pc, #152]	; (80037f8 <allOff+0x228>)
 800375e:	4014      	ands	r4, r2
 8003760:	2280      	movs	r2, #128	; 0x80
 8003762:	0312      	lsls	r2, r2, #12
 8003764:	4322      	orrs	r2, r4
 8003766:	6032      	str	r2, [r6, #0]
 8003768:	000e      	movs	r6, r1
 800376a:	0019      	movs	r1, r3
 800376c:	e76e      	b.n	800364c <allOff+0x7c>
		if (!slow_decay || prop_brake_active){
 800376e:	4a25      	ldr	r2, [pc, #148]	; (8003804 <allOff+0x234>)
 8003770:	4c1e      	ldr	r4, [pc, #120]	; (80037ec <allOff+0x21c>)
 8003772:	7812      	ldrb	r2, [r2, #0]
 8003774:	2a00      	cmp	r2, #0
 8003776:	d111      	bne.n	800379c <allOff+0x1cc>
 8003778:	250c      	movs	r5, #12
 800377a:	6822      	ldr	r2, [r4, #0]
 800377c:	43aa      	bics	r2, r5
 800377e:	3d08      	subs	r5, #8
 8003780:	432a      	orrs	r2, r5
 8003782:	6022      	str	r2, [r4, #0]
			GPIOB->BRR = GPIO_PIN_1;
 8003784:	2202      	movs	r2, #2
 8003786:	62a2      	str	r2, [r4, #40]	; 0x28
 8003788:	2590      	movs	r5, #144	; 0x90
 800378a:	05ed      	lsls	r5, r5, #23
 800378c:	682a      	ldr	r2, [r5, #0]
 800378e:	4c18      	ldr	r4, [pc, #96]	; (80037f0 <allOff+0x220>)
 8003790:	4014      	ands	r4, r2
 8003792:	2280      	movs	r2, #128	; 0x80
 8003794:	0392      	lsls	r2, r2, #14
 8003796:	4322      	orrs	r2, r4
 8003798:	602a      	str	r2, [r5, #0]
 800379a:	e726      	b.n	80035ea <allOff+0x1a>
		if (!slow_decay || prop_brake_active){
 800379c:	4a1a      	ldr	r2, [pc, #104]	; (8003808 <allOff+0x238>)
 800379e:	7812      	ldrb	r2, [r2, #0]
 80037a0:	2a00      	cmp	r2, #0
 80037a2:	d1e9      	bne.n	8003778 <allOff+0x1a8>
 80037a4:	250c      	movs	r5, #12
 80037a6:	6822      	ldr	r2, [r4, #0]
 80037a8:	43aa      	bics	r2, r5
 80037aa:	3d04      	subs	r5, #4
 80037ac:	432a      	orrs	r2, r5
 80037ae:	6022      	str	r2, [r4, #0]
 80037b0:	e7ea      	b.n	8003788 <allOff+0x1b8>
		if(!slow_decay  || prop_brake_active){            // for future
 80037b2:	4a15      	ldr	r2, [pc, #84]	; (8003808 <allOff+0x238>)
 80037b4:	7812      	ldrb	r2, [r2, #0]
 80037b6:	2a00      	cmp	r2, #0
 80037b8:	d1c6      	bne.n	8003748 <allOff+0x178>
 80037ba:	2603      	movs	r6, #3
 80037bc:	6822      	ldr	r2, [r4, #0]
 80037be:	43b2      	bics	r2, r6
 80037c0:	3e01      	subs	r6, #1
 80037c2:	4332      	orrs	r2, r6
 80037c4:	6022      	str	r2, [r4, #0]
 80037c6:	e7c6      	b.n	8003756 <allOff+0x186>
		if (!slow_decay || prop_brake_active){
 80037c8:	4b0f      	ldr	r3, [pc, #60]	; (8003808 <allOff+0x238>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d19d      	bne.n	800370c <allOff+0x13c>
 80037d0:	2190      	movs	r1, #144	; 0x90
 80037d2:	05c9      	lsls	r1, r1, #23
 80037d4:	680b      	ldr	r3, [r1, #0]
 80037d6:	4a09      	ldr	r2, [pc, #36]	; (80037fc <allOff+0x22c>)
 80037d8:	401a      	ands	r2, r3
 80037da:	2380      	movs	r3, #128	; 0x80
 80037dc:	021b      	lsls	r3, r3, #8
 80037de:	4313      	orrs	r3, r2
 80037e0:	600b      	str	r3, [r1, #0]
 80037e2:	e79e      	b.n	8003722 <allOff+0x152>
 80037e4:	2000001c 	.word	0x2000001c
 80037e8:	20000034 	.word	0x20000034
 80037ec:	48000400 	.word	0x48000400
 80037f0:	ffcfffff 	.word	0xffcfffff
 80037f4:	20000028 	.word	0x20000028
 80037f8:	fff3ffff 	.word	0xfff3ffff
 80037fc:	ffff3fff 	.word	0xffff3fff
 8003800:	fffcffff 	.word	0xfffcffff
 8003804:	20000040 	.word	0x20000040
 8003808:	20000133 	.word	0x20000133

0800380c <fullBrake>:
void fullBrake(){                     // full braking shorting all low sides
 800380c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (newPhase == pwm) {
 800380e:	4b8a      	ldr	r3, [pc, #552]	; (8003a38 <fullBrake+0x22c>)
	phaseA(lowside);
 8003810:	4d8a      	ldr	r5, [pc, #552]	; (8003a3c <fullBrake+0x230>)
	if (newPhase == pwm) {
 8003812:	681a      	ldr	r2, [r3, #0]
	phaseA(lowside);
 8003814:	6829      	ldr	r1, [r5, #0]
	if (newPhase == pwm) {
 8003816:	4291      	cmp	r1, r2
 8003818:	d100      	bne.n	800381c <fullBrake+0x10>
 800381a:	e0cc      	b.n	80039b6 <fullBrake+0x1aa>
	if (newPhase == floating) {
 800381c:	4b88      	ldr	r3, [pc, #544]	; (8003a40 <fullBrake+0x234>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4299      	cmp	r1, r3
 8003822:	d04a      	beq.n	80038ba <fullBrake+0xae>
 8003824:	260c      	movs	r6, #12
 8003826:	4c87      	ldr	r4, [pc, #540]	; (8003a44 <fullBrake+0x238>)
 8003828:	6820      	ldr	r0, [r4, #0]
 800382a:	43b0      	bics	r0, r6
 800382c:	3e08      	subs	r6, #8
 800382e:	4330      	orrs	r0, r6
 8003830:	6020      	str	r0, [r4, #0]
		GPIOB->BSRR = GPIO_PIN_1;
 8003832:	2002      	movs	r0, #2
 8003834:	61a0      	str	r0, [r4, #24]
 8003836:	2090      	movs	r0, #144	; 0x90
 8003838:	05c0      	lsls	r0, r0, #23
 800383a:	6804      	ldr	r4, [r0, #0]
 800383c:	4e82      	ldr	r6, [pc, #520]	; (8003a48 <fullBrake+0x23c>)
 800383e:	4026      	ands	r6, r4
 8003840:	2480      	movs	r4, #128	; 0x80
 8003842:	0364      	lsls	r4, r4, #13
 8003844:	4334      	orrs	r4, r6
 8003846:	6004      	str	r4, [r0, #0]
		GPIOA->BRR = GPIO_PIN_10;
 8003848:	2480      	movs	r4, #128	; 0x80
 800384a:	001e      	movs	r6, r3
 800384c:	000b      	movs	r3, r1
 800384e:	00e4      	lsls	r4, r4, #3
 8003850:	6284      	str	r4, [r0, #40]	; 0x28
	if (newPhase == pwm) {
 8003852:	4293      	cmp	r3, r2
 8003854:	d100      	bne.n	8003858 <fullBrake+0x4c>
 8003856:	e093      	b.n	8003980 <fullBrake+0x174>
	if (newPhase == floating) {
 8003858:	42b3      	cmp	r3, r6
 800385a:	d100      	bne.n	800385e <fullBrake+0x52>
 800385c:	e07b      	b.n	8003956 <fullBrake+0x14a>
 800385e:	2403      	movs	r4, #3
 8003860:	4878      	ldr	r0, [pc, #480]	; (8003a44 <fullBrake+0x238>)
 8003862:	6801      	ldr	r1, [r0, #0]
 8003864:	43a1      	bics	r1, r4
 8003866:	3c02      	subs	r4, #2
 8003868:	4321      	orrs	r1, r4
 800386a:	6001      	str	r1, [r0, #0]
 800386c:	2190      	movs	r1, #144	; 0x90
		GPIOB->BSRR = GPIO_PIN_0;
 800386e:	6184      	str	r4, [r0, #24]
 8003870:	05c9      	lsls	r1, r1, #23
 8003872:	6808      	ldr	r0, [r1, #0]
 8003874:	4c75      	ldr	r4, [pc, #468]	; (8003a4c <fullBrake+0x240>)
 8003876:	4004      	ands	r4, r0
 8003878:	2080      	movs	r0, #128	; 0x80
 800387a:	02c0      	lsls	r0, r0, #11
 800387c:	4320      	orrs	r0, r4
 800387e:	6008      	str	r0, [r1, #0]
		GPIOA->BRR = GPIO_PIN_9;
 8003880:	2080      	movs	r0, #128	; 0x80
 8003882:	0080      	lsls	r0, r0, #2
 8003884:	6288      	str	r0, [r1, #40]	; 0x28
	if (newPhase == pwm) {  // pwm
 8003886:	4293      	cmp	r3, r2
 8003888:	d031      	beq.n	80038ee <fullBrake+0xe2>
	if (newPhase == floating) {            // floating
 800388a:	42b3      	cmp	r3, r6
 800388c:	d049      	beq.n	8003922 <fullBrake+0x116>
 800388e:	2390      	movs	r3, #144	; 0x90
 8003890:	05db      	lsls	r3, r3, #23
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	496e      	ldr	r1, [pc, #440]	; (8003a50 <fullBrake+0x244>)
 8003896:	4011      	ands	r1, r2
 8003898:	2280      	movs	r2, #128	; 0x80
 800389a:	01d2      	lsls	r2, r2, #7
 800389c:	430a      	orrs	r2, r1
 800389e:	601a      	str	r2, [r3, #0]
		GPIOA->BSRR = GPIO_PIN_7;
 80038a0:	2280      	movs	r2, #128	; 0x80
 80038a2:	619a      	str	r2, [r3, #24]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	496b      	ldr	r1, [pc, #428]	; (8003a54 <fullBrake+0x248>)
 80038a8:	4011      	ands	r1, r2
 80038aa:	2280      	movs	r2, #128	; 0x80
 80038ac:	0252      	lsls	r2, r2, #9
 80038ae:	430a      	orrs	r2, r1
 80038b0:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_8;
 80038b2:	2280      	movs	r2, #128	; 0x80
 80038b4:	0052      	lsls	r2, r2, #1
 80038b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80038b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (newPhase == floating) {
 80038ba:	000e      	movs	r6, r1
 80038bc:	270c      	movs	r7, #12
 80038be:	4c61      	ldr	r4, [pc, #388]	; (8003a44 <fullBrake+0x238>)
 80038c0:	6820      	ldr	r0, [r4, #0]
 80038c2:	43b8      	bics	r0, r7
 80038c4:	3f08      	subs	r7, #8
 80038c6:	4338      	orrs	r0, r7
 80038c8:	6020      	str	r0, [r4, #0]
		GPIOB->BRR = GPIO_PIN_1;
 80038ca:	2002      	movs	r0, #2
 80038cc:	62a0      	str	r0, [r4, #40]	; 0x28
 80038ce:	2090      	movs	r0, #144	; 0x90
 80038d0:	05c0      	lsls	r0, r0, #23
 80038d2:	6804      	ldr	r4, [r0, #0]
 80038d4:	4f5c      	ldr	r7, [pc, #368]	; (8003a48 <fullBrake+0x23c>)
 80038d6:	4027      	ands	r7, r4
 80038d8:	2480      	movs	r4, #128	; 0x80
 80038da:	0364      	lsls	r4, r4, #13
 80038dc:	433c      	orrs	r4, r7
 80038de:	6004      	str	r4, [r0, #0]
		GPIOA->BRR = GPIO_PIN_10;
 80038e0:	2480      	movs	r4, #128	; 0x80
 80038e2:	00e4      	lsls	r4, r4, #3
 80038e4:	6284      	str	r4, [r0, #40]	; 0x28
	if (newPhase == lowside) {
 80038e6:	4299      	cmp	r1, r3
 80038e8:	d1b3      	bne.n	8003852 <fullBrake+0x46>
 80038ea:	0033      	movs	r3, r6
 80038ec:	e79a      	b.n	8003824 <fullBrake+0x18>
		if (!slow_decay || prop_brake_active){
 80038ee:	4a5a      	ldr	r2, [pc, #360]	; (8003a58 <fullBrake+0x24c>)
 80038f0:	7812      	ldrb	r2, [r2, #0]
 80038f2:	2a00      	cmp	r2, #0
 80038f4:	d17d      	bne.n	80039f2 <fullBrake+0x1e6>
 80038f6:	2290      	movs	r2, #144	; 0x90
 80038f8:	05d2      	lsls	r2, r2, #23
 80038fa:	6811      	ldr	r1, [r2, #0]
 80038fc:	4854      	ldr	r0, [pc, #336]	; (8003a50 <fullBrake+0x244>)
 80038fe:	4008      	ands	r0, r1
 8003900:	2180      	movs	r1, #128	; 0x80
 8003902:	01c9      	lsls	r1, r1, #7
 8003904:	4301      	orrs	r1, r0
 8003906:	6011      	str	r1, [r2, #0]
			GPIOA->BRR = GPIO_PIN_7;
 8003908:	2180      	movs	r1, #128	; 0x80
 800390a:	6291      	str	r1, [r2, #40]	; 0x28
 800390c:	2090      	movs	r0, #144	; 0x90
 800390e:	05c0      	lsls	r0, r0, #23
 8003910:	6802      	ldr	r2, [r0, #0]
 8003912:	4950      	ldr	r1, [pc, #320]	; (8003a54 <fullBrake+0x248>)
 8003914:	4011      	ands	r1, r2
 8003916:	2280      	movs	r2, #128	; 0x80
 8003918:	0292      	lsls	r2, r2, #10
 800391a:	430a      	orrs	r2, r1
 800391c:	6002      	str	r2, [r0, #0]
	if (newPhase == floating) {            // floating
 800391e:	42b3      	cmp	r3, r6
 8003920:	d114      	bne.n	800394c <fullBrake+0x140>
 8003922:	2290      	movs	r2, #144	; 0x90
 8003924:	05d2      	lsls	r2, r2, #23
 8003926:	6811      	ldr	r1, [r2, #0]
 8003928:	4849      	ldr	r0, [pc, #292]	; (8003a50 <fullBrake+0x244>)
 800392a:	4008      	ands	r0, r1
 800392c:	2180      	movs	r1, #128	; 0x80
 800392e:	01c9      	lsls	r1, r1, #7
 8003930:	4301      	orrs	r1, r0
 8003932:	6011      	str	r1, [r2, #0]
		GPIOA->BRR = GPIO_PIN_7;
 8003934:	2180      	movs	r1, #128	; 0x80
 8003936:	6291      	str	r1, [r2, #40]	; 0x28
 8003938:	6811      	ldr	r1, [r2, #0]
 800393a:	4846      	ldr	r0, [pc, #280]	; (8003a54 <fullBrake+0x248>)
 800393c:	4008      	ands	r0, r1
 800393e:	2180      	movs	r1, #128	; 0x80
 8003940:	0249      	lsls	r1, r1, #9
 8003942:	4301      	orrs	r1, r0
 8003944:	6011      	str	r1, [r2, #0]
		GPIOA->BRR = GPIO_PIN_8;
 8003946:	2180      	movs	r1, #128	; 0x80
 8003948:	0049      	lsls	r1, r1, #1
 800394a:	6291      	str	r1, [r2, #40]	; 0x28
	if (newPhase == lowside) {              // lowside
 800394c:	682a      	ldr	r2, [r5, #0]
 800394e:	4293      	cmp	r3, r2
 8003950:	d1b2      	bne.n	80038b8 <fullBrake+0xac>
 8003952:	e79c      	b.n	800388e <fullBrake+0x82>
	if (newPhase == floating) {
 8003954:	000a      	movs	r2, r1
 8003956:	2403      	movs	r4, #3
 8003958:	483a      	ldr	r0, [pc, #232]	; (8003a44 <fullBrake+0x238>)
 800395a:	6801      	ldr	r1, [r0, #0]
 800395c:	43a1      	bics	r1, r4
 800395e:	3c02      	subs	r4, #2
 8003960:	4321      	orrs	r1, r4
 8003962:	6001      	str	r1, [r0, #0]
 8003964:	2190      	movs	r1, #144	; 0x90
		GPIOB->BRR = GPIO_PIN_0;
 8003966:	6284      	str	r4, [r0, #40]	; 0x28
 8003968:	05c9      	lsls	r1, r1, #23
 800396a:	6808      	ldr	r0, [r1, #0]
 800396c:	4c37      	ldr	r4, [pc, #220]	; (8003a4c <fullBrake+0x240>)
 800396e:	4004      	ands	r4, r0
 8003970:	2080      	movs	r0, #128	; 0x80
 8003972:	02c0      	lsls	r0, r0, #11
 8003974:	4320      	orrs	r0, r4
 8003976:	6008      	str	r0, [r1, #0]
		GPIOA->BRR = GPIO_PIN_9;
 8003978:	2080      	movs	r0, #128	; 0x80
 800397a:	0080      	lsls	r0, r0, #2
 800397c:	6288      	str	r0, [r1, #40]	; 0x28
 800397e:	e76e      	b.n	800385e <fullBrake+0x52>
		if(!slow_decay  || prop_brake_active){            // for future
 8003980:	4935      	ldr	r1, [pc, #212]	; (8003a58 <fullBrake+0x24c>)
 8003982:	4830      	ldr	r0, [pc, #192]	; (8003a44 <fullBrake+0x238>)
 8003984:	7809      	ldrb	r1, [r1, #0]
 8003986:	2900      	cmp	r1, #0
 8003988:	d14b      	bne.n	8003a22 <fullBrake+0x216>
 800398a:	2403      	movs	r4, #3
 800398c:	6801      	ldr	r1, [r0, #0]
 800398e:	43a1      	bics	r1, r4
 8003990:	3c02      	subs	r4, #2
 8003992:	4321      	orrs	r1, r4
 8003994:	6001      	str	r1, [r0, #0]
		GPIOB->BRR = GPIO_PIN_0;
 8003996:	6284      	str	r4, [r0, #40]	; 0x28
 8003998:	2490      	movs	r4, #144	; 0x90
 800399a:	05e4      	lsls	r4, r4, #23
 800399c:	6821      	ldr	r1, [r4, #0]
 800399e:	482b      	ldr	r0, [pc, #172]	; (8003a4c <fullBrake+0x240>)
 80039a0:	4008      	ands	r0, r1
 80039a2:	2180      	movs	r1, #128	; 0x80
 80039a4:	0309      	lsls	r1, r1, #12
 80039a6:	4301      	orrs	r1, r0
 80039a8:	6021      	str	r1, [r4, #0]
	if (newPhase == floating) {
 80039aa:	0019      	movs	r1, r3
 80039ac:	0013      	movs	r3, r2
 80039ae:	42b2      	cmp	r2, r6
 80039b0:	d0d0      	beq.n	8003954 <fullBrake+0x148>
 80039b2:	000a      	movs	r2, r1
 80039b4:	e753      	b.n	800385e <fullBrake+0x52>
		if (!slow_decay || prop_brake_active){
 80039b6:	4b28      	ldr	r3, [pc, #160]	; (8003a58 <fullBrake+0x24c>)
 80039b8:	4822      	ldr	r0, [pc, #136]	; (8003a44 <fullBrake+0x238>)
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d125      	bne.n	8003a0c <fullBrake+0x200>
 80039c0:	240c      	movs	r4, #12
 80039c2:	6803      	ldr	r3, [r0, #0]
 80039c4:	43a3      	bics	r3, r4
 80039c6:	3c08      	subs	r4, #8
 80039c8:	4323      	orrs	r3, r4
 80039ca:	6003      	str	r3, [r0, #0]
			GPIOB->BRR = GPIO_PIN_1;
 80039cc:	2302      	movs	r3, #2
 80039ce:	6283      	str	r3, [r0, #40]	; 0x28
 80039d0:	2490      	movs	r4, #144	; 0x90
 80039d2:	05e4      	lsls	r4, r4, #23
 80039d4:	6823      	ldr	r3, [r4, #0]
 80039d6:	481c      	ldr	r0, [pc, #112]	; (8003a48 <fullBrake+0x23c>)
 80039d8:	4018      	ands	r0, r3
 80039da:	2380      	movs	r3, #128	; 0x80
 80039dc:	039b      	lsls	r3, r3, #14
 80039de:	4303      	orrs	r3, r0
 80039e0:	6023      	str	r3, [r4, #0]
	if (newPhase == floating) {
 80039e2:	4b17      	ldr	r3, [pc, #92]	; (8003a40 <fullBrake+0x234>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d000      	beq.n	80039ec <fullBrake+0x1e0>
 80039ea:	e71b      	b.n	8003824 <fullBrake+0x18>
 80039ec:	0016      	movs	r6, r2
 80039ee:	000b      	movs	r3, r1
 80039f0:	e764      	b.n	80038bc <fullBrake+0xb0>
		if (!slow_decay || prop_brake_active){
 80039f2:	4a1a      	ldr	r2, [pc, #104]	; (8003a5c <fullBrake+0x250>)
 80039f4:	7812      	ldrb	r2, [r2, #0]
 80039f6:	2a00      	cmp	r2, #0
 80039f8:	d000      	beq.n	80039fc <fullBrake+0x1f0>
 80039fa:	e77c      	b.n	80038f6 <fullBrake+0xea>
 80039fc:	680a      	ldr	r2, [r1, #0]
 80039fe:	4814      	ldr	r0, [pc, #80]	; (8003a50 <fullBrake+0x244>)
 8003a00:	4010      	ands	r0, r2
 8003a02:	2280      	movs	r2, #128	; 0x80
 8003a04:	0212      	lsls	r2, r2, #8
 8003a06:	4302      	orrs	r2, r0
 8003a08:	600a      	str	r2, [r1, #0]
 8003a0a:	e77f      	b.n	800390c <fullBrake+0x100>
		if (!slow_decay || prop_brake_active){
 8003a0c:	4b13      	ldr	r3, [pc, #76]	; (8003a5c <fullBrake+0x250>)
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1d5      	bne.n	80039c0 <fullBrake+0x1b4>
 8003a14:	240c      	movs	r4, #12
 8003a16:	6803      	ldr	r3, [r0, #0]
 8003a18:	43a3      	bics	r3, r4
 8003a1a:	3c04      	subs	r4, #4
 8003a1c:	4323      	orrs	r3, r4
 8003a1e:	6003      	str	r3, [r0, #0]
 8003a20:	e7d6      	b.n	80039d0 <fullBrake+0x1c4>
		if(!slow_decay  || prop_brake_active){            // for future
 8003a22:	490e      	ldr	r1, [pc, #56]	; (8003a5c <fullBrake+0x250>)
 8003a24:	7809      	ldrb	r1, [r1, #0]
 8003a26:	2900      	cmp	r1, #0
 8003a28:	d1af      	bne.n	800398a <fullBrake+0x17e>
 8003a2a:	2403      	movs	r4, #3
 8003a2c:	6801      	ldr	r1, [r0, #0]
 8003a2e:	43a1      	bics	r1, r4
 8003a30:	3c01      	subs	r4, #1
 8003a32:	4321      	orrs	r1, r4
 8003a34:	6001      	str	r1, [r0, #0]
 8003a36:	e7af      	b.n	8003998 <fullBrake+0x18c>
 8003a38:	20000034 	.word	0x20000034
 8003a3c:	20000028 	.word	0x20000028
 8003a40:	2000001c 	.word	0x2000001c
 8003a44:	48000400 	.word	0x48000400
 8003a48:	ffcfffff 	.word	0xffcfffff
 8003a4c:	fff3ffff 	.word	0xfff3ffff
 8003a50:	ffff3fff 	.word	0xffff3fff
 8003a54:	fffcffff 	.word	0xfffcffff
 8003a58:	20000040 	.word	0x20000040
 8003a5c:	20000133 	.word	0x20000133

08003a60 <proBrake>:
void proBrake(){                    // duty cycle controls braking strength
 8003a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a62:	46c6      	mov	lr, r8
 8003a64:	b500      	push	{lr}
		if (!slow_decay || prop_brake_active){
 8003a66:	4a7b      	ldr	r2, [pc, #492]	; (8003c54 <proBrake+0x1f4>)
	phaseA(pwm);
 8003a68:	4b7b      	ldr	r3, [pc, #492]	; (8003c58 <proBrake+0x1f8>)
		if (!slow_decay || prop_brake_active){
 8003a6a:	7812      	ldrb	r2, [r2, #0]
	phaseA(pwm);
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	487b      	ldr	r0, [pc, #492]	; (8003c5c <proBrake+0x1fc>)
		if (!slow_decay || prop_brake_active){
 8003a70:	2a00      	cmp	r2, #0
 8003a72:	d004      	beq.n	8003a7e <proBrake+0x1e>
 8003a74:	497a      	ldr	r1, [pc, #488]	; (8003c60 <proBrake+0x200>)
 8003a76:	7809      	ldrb	r1, [r1, #0]
 8003a78:	2900      	cmp	r1, #0
 8003a7a:	d100      	bne.n	8003a7e <proBrake+0x1e>
 8003a7c:	e0e2      	b.n	8003c44 <proBrake+0x1e4>
 8003a7e:	240c      	movs	r4, #12
 8003a80:	6801      	ldr	r1, [r0, #0]
 8003a82:	43a1      	bics	r1, r4
 8003a84:	3c08      	subs	r4, #8
 8003a86:	4321      	orrs	r1, r4
 8003a88:	6001      	str	r1, [r0, #0]
			GPIOB->BRR = GPIO_PIN_1;
 8003a8a:	2102      	movs	r1, #2
 8003a8c:	6281      	str	r1, [r0, #40]	; 0x28
 8003a8e:	2490      	movs	r4, #144	; 0x90
 8003a90:	2180      	movs	r1, #128	; 0x80
 8003a92:	05e4      	lsls	r4, r4, #23
 8003a94:	6820      	ldr	r0, [r4, #0]
 8003a96:	4d73      	ldr	r5, [pc, #460]	; (8003c64 <proBrake+0x204>)
 8003a98:	0389      	lsls	r1, r1, #14
 8003a9a:	4028      	ands	r0, r5
 8003a9c:	4301      	orrs	r1, r0
 8003a9e:	6021      	str	r1, [r4, #0]
	if (newPhase == floating) {
 8003aa0:	4971      	ldr	r1, [pc, #452]	; (8003c68 <proBrake+0x208>)
 8003aa2:	6808      	ldr	r0, [r1, #0]
 8003aa4:	4283      	cmp	r3, r0
 8003aa6:	d100      	bne.n	8003aaa <proBrake+0x4a>
 8003aa8:	e07f      	b.n	8003baa <proBrake+0x14a>
	if (newPhase == lowside) {
 8003aaa:	4970      	ldr	r1, [pc, #448]	; (8003c6c <proBrake+0x20c>)
 8003aac:	6809      	ldr	r1, [r1, #0]
 8003aae:	428b      	cmp	r3, r1
 8003ab0:	d114      	bne.n	8003adc <proBrake+0x7c>
 8003ab2:	260c      	movs	r6, #12
 8003ab4:	4d69      	ldr	r5, [pc, #420]	; (8003c5c <proBrake+0x1fc>)
 8003ab6:	682c      	ldr	r4, [r5, #0]
 8003ab8:	43b4      	bics	r4, r6
 8003aba:	3e08      	subs	r6, #8
 8003abc:	4334      	orrs	r4, r6
 8003abe:	602c      	str	r4, [r5, #0]
		GPIOB->BSRR = GPIO_PIN_1;
 8003ac0:	2402      	movs	r4, #2
 8003ac2:	61ac      	str	r4, [r5, #24]
 8003ac4:	2490      	movs	r4, #144	; 0x90
 8003ac6:	05e4      	lsls	r4, r4, #23
 8003ac8:	6825      	ldr	r5, [r4, #0]
 8003aca:	4e66      	ldr	r6, [pc, #408]	; (8003c64 <proBrake+0x204>)
 8003acc:	402e      	ands	r6, r5
 8003ace:	2580      	movs	r5, #128	; 0x80
 8003ad0:	036d      	lsls	r5, r5, #13
 8003ad2:	4335      	orrs	r5, r6
 8003ad4:	6025      	str	r5, [r4, #0]
		GPIOA->BRR = GPIO_PIN_10;
 8003ad6:	2580      	movs	r5, #128	; 0x80
 8003ad8:	00ed      	lsls	r5, r5, #3
 8003ada:	62a5      	str	r5, [r4, #40]	; 0x28
 8003adc:	4d5f      	ldr	r5, [pc, #380]	; (8003c5c <proBrake+0x1fc>)
		if(!slow_decay  || prop_brake_active){            // for future
 8003ade:	2a00      	cmp	r2, #0
 8003ae0:	d004      	beq.n	8003aec <proBrake+0x8c>
 8003ae2:	4c5f      	ldr	r4, [pc, #380]	; (8003c60 <proBrake+0x200>)
 8003ae4:	7824      	ldrb	r4, [r4, #0]
 8003ae6:	2c00      	cmp	r4, #0
 8003ae8:	d100      	bne.n	8003aec <proBrake+0x8c>
 8003aea:	e0a4      	b.n	8003c36 <proBrake+0x1d6>
 8003aec:	2603      	movs	r6, #3
 8003aee:	682c      	ldr	r4, [r5, #0]
 8003af0:	43b4      	bics	r4, r6
 8003af2:	3e02      	subs	r6, #2
 8003af4:	4334      	orrs	r4, r6
 8003af6:	602c      	str	r4, [r5, #0]
		GPIOB->BRR = GPIO_PIN_0;
 8003af8:	62ae      	str	r6, [r5, #40]	; 0x28
 8003afa:	2690      	movs	r6, #144	; 0x90
 8003afc:	2480      	movs	r4, #128	; 0x80
 8003afe:	05f6      	lsls	r6, r6, #23
 8003b00:	6835      	ldr	r5, [r6, #0]
 8003b02:	4f5b      	ldr	r7, [pc, #364]	; (8003c70 <proBrake+0x210>)
 8003b04:	0324      	lsls	r4, r4, #12
 8003b06:	403d      	ands	r5, r7
 8003b08:	432c      	orrs	r4, r5
 8003b0a:	6034      	str	r4, [r6, #0]
	if (newPhase == floating) {
 8003b0c:	4283      	cmp	r3, r0
 8003b0e:	d100      	bne.n	8003b12 <proBrake+0xb2>
 8003b10:	e071      	b.n	8003bf6 <proBrake+0x196>
	if (newPhase == lowside) {          // low mosfet on
 8003b12:	428b      	cmp	r3, r1
 8003b14:	d113      	bne.n	8003b3e <proBrake+0xde>
 8003b16:	2603      	movs	r6, #3
 8003b18:	4d50      	ldr	r5, [pc, #320]	; (8003c5c <proBrake+0x1fc>)
 8003b1a:	682c      	ldr	r4, [r5, #0]
 8003b1c:	43b4      	bics	r4, r6
 8003b1e:	3e02      	subs	r6, #2
 8003b20:	4334      	orrs	r4, r6
 8003b22:	602c      	str	r4, [r5, #0]
 8003b24:	2490      	movs	r4, #144	; 0x90
		GPIOB->BSRR = GPIO_PIN_0;
 8003b26:	61ae      	str	r6, [r5, #24]
 8003b28:	05e4      	lsls	r4, r4, #23
 8003b2a:	6825      	ldr	r5, [r4, #0]
 8003b2c:	4e50      	ldr	r6, [pc, #320]	; (8003c70 <proBrake+0x210>)
 8003b2e:	402e      	ands	r6, r5
 8003b30:	2580      	movs	r5, #128	; 0x80
 8003b32:	02ed      	lsls	r5, r5, #11
 8003b34:	4335      	orrs	r5, r6
 8003b36:	6025      	str	r5, [r4, #0]
		GPIOA->BRR = GPIO_PIN_9;
 8003b38:	2580      	movs	r5, #128	; 0x80
 8003b3a:	00ad      	lsls	r5, r5, #2
 8003b3c:	62a5      	str	r5, [r4, #40]	; 0x28
		if (!slow_decay || prop_brake_active){
 8003b3e:	2a00      	cmp	r2, #0
 8003b40:	d003      	beq.n	8003b4a <proBrake+0xea>
 8003b42:	4a47      	ldr	r2, [pc, #284]	; (8003c60 <proBrake+0x200>)
 8003b44:	7812      	ldrb	r2, [r2, #0]
 8003b46:	2a00      	cmp	r2, #0
 8003b48:	d06b      	beq.n	8003c22 <proBrake+0x1c2>
 8003b4a:	2290      	movs	r2, #144	; 0x90
 8003b4c:	05d2      	lsls	r2, r2, #23
 8003b4e:	6814      	ldr	r4, [r2, #0]
 8003b50:	4d48      	ldr	r5, [pc, #288]	; (8003c74 <proBrake+0x214>)
 8003b52:	4025      	ands	r5, r4
 8003b54:	2480      	movs	r4, #128	; 0x80
 8003b56:	01e4      	lsls	r4, r4, #7
 8003b58:	432c      	orrs	r4, r5
 8003b5a:	6014      	str	r4, [r2, #0]
			GPIOA->BRR = GPIO_PIN_7;
 8003b5c:	2480      	movs	r4, #128	; 0x80
 8003b5e:	6294      	str	r4, [r2, #40]	; 0x28
 8003b60:	2290      	movs	r2, #144	; 0x90
 8003b62:	2480      	movs	r4, #128	; 0x80
 8003b64:	05d2      	lsls	r2, r2, #23
 8003b66:	6815      	ldr	r5, [r2, #0]
 8003b68:	4e43      	ldr	r6, [pc, #268]	; (8003c78 <proBrake+0x218>)
 8003b6a:	02a4      	lsls	r4, r4, #10
 8003b6c:	4035      	ands	r5, r6
 8003b6e:	432c      	orrs	r4, r5
 8003b70:	6014      	str	r4, [r2, #0]
	if (newPhase == floating) {            // floating
 8003b72:	4283      	cmp	r3, r0
 8003b74:	d02c      	beq.n	8003bd0 <proBrake+0x170>
	if (newPhase == lowside) {              // lowside
 8003b76:	428b      	cmp	r3, r1
 8003b78:	d114      	bne.n	8003ba4 <proBrake+0x144>
 8003b7a:	2390      	movs	r3, #144	; 0x90
 8003b7c:	05db      	lsls	r3, r3, #23
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	493c      	ldr	r1, [pc, #240]	; (8003c74 <proBrake+0x214>)
 8003b82:	4011      	ands	r1, r2
 8003b84:	2280      	movs	r2, #128	; 0x80
 8003b86:	01d2      	lsls	r2, r2, #7
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	601a      	str	r2, [r3, #0]
		GPIOA->BSRR = GPIO_PIN_7;
 8003b8c:	2280      	movs	r2, #128	; 0x80
 8003b8e:	619a      	str	r2, [r3, #24]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	4939      	ldr	r1, [pc, #228]	; (8003c78 <proBrake+0x218>)
 8003b94:	4011      	ands	r1, r2
 8003b96:	2280      	movs	r2, #128	; 0x80
 8003b98:	0252      	lsls	r2, r2, #9
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_8;
 8003b9e:	2280      	movs	r2, #128	; 0x80
 8003ba0:	0052      	lsls	r2, r2, #1
 8003ba2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ba4:	bc04      	pop	{r2}
 8003ba6:	4690      	mov	r8, r2
 8003ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003baa:	270c      	movs	r7, #12
 8003bac:	4e2b      	ldr	r6, [pc, #172]	; (8003c5c <proBrake+0x1fc>)
 8003bae:	6831      	ldr	r1, [r6, #0]
 8003bb0:	43b9      	bics	r1, r7
 8003bb2:	3f08      	subs	r7, #8
 8003bb4:	4339      	orrs	r1, r7
 8003bb6:	6031      	str	r1, [r6, #0]
		GPIOB->BRR = GPIO_PIN_1;
 8003bb8:	2102      	movs	r1, #2
 8003bba:	62b1      	str	r1, [r6, #40]	; 0x28
 8003bbc:	6821      	ldr	r1, [r4, #0]
 8003bbe:	4029      	ands	r1, r5
 8003bc0:	2580      	movs	r5, #128	; 0x80
 8003bc2:	036d      	lsls	r5, r5, #13
 8003bc4:	430d      	orrs	r5, r1
		GPIOA->BRR = GPIO_PIN_10;
 8003bc6:	2180      	movs	r1, #128	; 0x80
 8003bc8:	00c9      	lsls	r1, r1, #3
 8003bca:	6025      	str	r5, [r4, #0]
 8003bcc:	62a1      	str	r1, [r4, #40]	; 0x28
 8003bce:	e76c      	b.n	8003aaa <proBrake+0x4a>
 8003bd0:	6810      	ldr	r0, [r2, #0]
 8003bd2:	4c28      	ldr	r4, [pc, #160]	; (8003c74 <proBrake+0x214>)
 8003bd4:	4004      	ands	r4, r0
 8003bd6:	2080      	movs	r0, #128	; 0x80
 8003bd8:	01c0      	lsls	r0, r0, #7
 8003bda:	4320      	orrs	r0, r4
 8003bdc:	6010      	str	r0, [r2, #0]
		GPIOA->BRR = GPIO_PIN_7;
 8003bde:	2080      	movs	r0, #128	; 0x80
 8003be0:	6290      	str	r0, [r2, #40]	; 0x28
 8003be2:	6810      	ldr	r0, [r2, #0]
 8003be4:	4030      	ands	r0, r6
 8003be6:	2680      	movs	r6, #128	; 0x80
 8003be8:	0276      	lsls	r6, r6, #9
 8003bea:	4306      	orrs	r6, r0
		GPIOA->BRR = GPIO_PIN_8;
 8003bec:	2080      	movs	r0, #128	; 0x80
 8003bee:	0040      	lsls	r0, r0, #1
 8003bf0:	6016      	str	r6, [r2, #0]
 8003bf2:	6290      	str	r0, [r2, #40]	; 0x28
 8003bf4:	e7bf      	b.n	8003b76 <proBrake+0x116>
 8003bf6:	4c19      	ldr	r4, [pc, #100]	; (8003c5c <proBrake+0x1fc>)
 8003bf8:	2503      	movs	r5, #3
 8003bfa:	46a0      	mov	r8, r4
 8003bfc:	6824      	ldr	r4, [r4, #0]
 8003bfe:	43ac      	bics	r4, r5
 8003c00:	3d02      	subs	r5, #2
 8003c02:	432c      	orrs	r4, r5
 8003c04:	46ac      	mov	ip, r5
 8003c06:	4645      	mov	r5, r8
 8003c08:	602c      	str	r4, [r5, #0]
		GPIOB->BRR = GPIO_PIN_0;
 8003c0a:	4664      	mov	r4, ip
 8003c0c:	62ac      	str	r4, [r5, #40]	; 0x28
 8003c0e:	6834      	ldr	r4, [r6, #0]
 8003c10:	403c      	ands	r4, r7
 8003c12:	2780      	movs	r7, #128	; 0x80
 8003c14:	02ff      	lsls	r7, r7, #11
 8003c16:	4327      	orrs	r7, r4
		GPIOA->BRR = GPIO_PIN_9;
 8003c18:	2480      	movs	r4, #128	; 0x80
 8003c1a:	00a4      	lsls	r4, r4, #2
 8003c1c:	6037      	str	r7, [r6, #0]
 8003c1e:	62b4      	str	r4, [r6, #40]	; 0x28
 8003c20:	e777      	b.n	8003b12 <proBrake+0xb2>
 8003c22:	2590      	movs	r5, #144	; 0x90
 8003c24:	05ed      	lsls	r5, r5, #23
 8003c26:	682a      	ldr	r2, [r5, #0]
 8003c28:	4c12      	ldr	r4, [pc, #72]	; (8003c74 <proBrake+0x214>)
 8003c2a:	4014      	ands	r4, r2
 8003c2c:	2280      	movs	r2, #128	; 0x80
 8003c2e:	0212      	lsls	r2, r2, #8
 8003c30:	4322      	orrs	r2, r4
 8003c32:	602a      	str	r2, [r5, #0]
 8003c34:	e794      	b.n	8003b60 <proBrake+0x100>
 8003c36:	2603      	movs	r6, #3
 8003c38:	682c      	ldr	r4, [r5, #0]
 8003c3a:	43b4      	bics	r4, r6
 8003c3c:	3e01      	subs	r6, #1
 8003c3e:	4334      	orrs	r4, r6
 8003c40:	602c      	str	r4, [r5, #0]
 8003c42:	e75a      	b.n	8003afa <proBrake+0x9a>
 8003c44:	240c      	movs	r4, #12
 8003c46:	6801      	ldr	r1, [r0, #0]
 8003c48:	43a1      	bics	r1, r4
 8003c4a:	3c04      	subs	r4, #4
 8003c4c:	4321      	orrs	r1, r4
 8003c4e:	6001      	str	r1, [r0, #0]
 8003c50:	e71d      	b.n	8003a8e <proBrake+0x2e>
 8003c52:	46c0      	nop			; (mov r8, r8)
 8003c54:	20000040 	.word	0x20000040
 8003c58:	20000034 	.word	0x20000034
 8003c5c:	48000400 	.word	0x48000400
 8003c60:	20000133 	.word	0x20000133
 8003c64:	ffcfffff 	.word	0xffcfffff
 8003c68:	2000001c 	.word	0x2000001c
 8003c6c:	20000028 	.word	0x20000028
 8003c70:	fff3ffff 	.word	0xfff3ffff
 8003c74:	ffff3fff 	.word	0xffff3fff
 8003c78:	fffcffff 	.word	0xfffcffff

08003c7c <commutate>:
	if (forward == 1){
 8003c7c:	4b3e      	ldr	r3, [pc, #248]	; (8003d78 <commutate+0xfc>)
void commutate() {
 8003c7e:	b570      	push	{r4, r5, r6, lr}
	if (forward == 1){
 8003c80:	681a      	ldr	r2, [r3, #0]
		step++;
 8003c82:	4c3e      	ldr	r4, [pc, #248]	; (8003d7c <commutate+0x100>)
 8003c84:	6823      	ldr	r3, [r4, #0]
	if (forward == 1){
 8003c86:	2a01      	cmp	r2, #1
 8003c88:	d04e      	beq.n	8003d28 <commutate+0xac>
	if (forward == 0){
 8003c8a:	2a00      	cmp	r2, #0
 8003c8c:	d023      	beq.n	8003cd6 <commutate+0x5a>
 8003c8e:	4d3c      	ldr	r5, [pc, #240]	; (8003d80 <commutate+0x104>)
	if (input > 47){
 8003c90:	4a3c      	ldr	r2, [pc, #240]	; (8003d84 <commutate+0x108>)
 8003c92:	6812      	ldr	r2, [r2, #0]
 8003c94:	2a2f      	cmp	r2, #47	; 0x2f
 8003c96:	dd03      	ble.n	8003ca0 <commutate+0x24>
comStep(step);
 8003c98:	0018      	movs	r0, r3
 8003c9a:	f7ff fc4b 	bl	8003534 <comStep>
 8003c9e:	6823      	ldr	r3, [r4, #0]
		hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_IO1;
 8003ca0:	4839      	ldr	r0, [pc, #228]	; (8003d88 <commutate+0x10c>)
	if (step == 1 || step == 4) {   // c floating
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d02f      	beq.n	8003d06 <commutate+0x8a>
 8003ca6:	2b04      	cmp	r3, #4
 8003ca8:	d02d      	beq.n	8003d06 <commutate+0x8a>
	if (step == 2 || step == 5) {     // a floating
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d028      	beq.n	8003d00 <commutate+0x84>
 8003cae:	2b05      	cmp	r3, #5
 8003cb0:	d026      	beq.n	8003d00 <commutate+0x84>
	if (step == 3 || step == 6) {      // b floating
 8003cb2:	2b03      	cmp	r3, #3
 8003cb4:	d00c      	beq.n	8003cd0 <commutate+0x54>
 8003cb6:	2b06      	cmp	r3, #6
 8003cb8:	d00a      	beq.n	8003cd0 <commutate+0x54>
	if (rising){
 8003cba:	682b      	ldr	r3, [r5, #0]
		hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_FALLING;   // polarity of comp output reversed
 8003cbc:	1e5a      	subs	r2, r3, #1
 8003cbe:	4193      	sbcs	r3, r2
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	6203      	str	r3, [r0, #32]
	if (HAL_COMP_Init(&hcomp1) != HAL_OK) {
 8003cc4:	f7fc fe6a 	bl	800099c <HAL_COMP_Init>
 8003cc8:	2800      	cmp	r0, #0
 8003cca:	d000      	beq.n	8003cce <commutate+0x52>
 8003ccc:	e7fe      	b.n	8003ccc <commutate+0x50>
}
 8003cce:	bd70      	pop	{r4, r5, r6, pc}
		hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1;
 8003cd0:	2340      	movs	r3, #64	; 0x40
 8003cd2:	6043      	str	r3, [r0, #4]
 8003cd4:	e7f1      	b.n	8003cba <commutate+0x3e>
		step--;
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	6023      	str	r3, [r4, #0]
		if (step < 1) {
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	dd33      	ble.n	8003d46 <commutate+0xca>
		if (step == 1 || step == 3 || step == 5) {
 8003cde:	2202      	movs	r2, #2
 8003ce0:	0019      	movs	r1, r3
 8003ce2:	4391      	bics	r1, r2
 8003ce4:	2901      	cmp	r1, #1
 8003ce6:	d011      	beq.n	8003d0c <commutate+0x90>
 8003ce8:	2b05      	cmp	r3, #5
 8003cea:	d00f      	beq.n	8003d0c <commutate+0x90>
 8003cec:	2204      	movs	r2, #4
 8003cee:	0019      	movs	r1, r3
 8003cf0:	4391      	bics	r1, r2
 8003cf2:	000a      	movs	r2, r1
 8003cf4:	4d22      	ldr	r5, [pc, #136]	; (8003d80 <commutate+0x104>)
		if (step == 2 || step == 4 || step == 6) {
 8003cf6:	2a02      	cmp	r2, #2
 8003cf8:	d111      	bne.n	8003d1e <commutate+0xa2>
			rising = 1;
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	602a      	str	r2, [r5, #0]
 8003cfe:	e7c7      	b.n	8003c90 <commutate+0x14>
		hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_DAC2;
 8003d00:	2250      	movs	r2, #80	; 0x50
 8003d02:	6042      	str	r2, [r0, #4]
 8003d04:	e7d5      	b.n	8003cb2 <commutate+0x36>
		hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_IO1;
 8003d06:	2260      	movs	r2, #96	; 0x60
 8003d08:	6042      	str	r2, [r0, #4]
 8003d0a:	e7ce      	b.n	8003caa <commutate+0x2e>
			rising = 0;
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	0019      	movs	r1, r3
 8003d10:	4d1b      	ldr	r5, [pc, #108]	; (8003d80 <commutate+0x104>)
 8003d12:	602a      	str	r2, [r5, #0]
 8003d14:	3204      	adds	r2, #4
 8003d16:	4391      	bics	r1, r2
 8003d18:	000a      	movs	r2, r1
		if (step == 2 || step == 4 || step == 6) {
 8003d1a:	2a02      	cmp	r2, #2
 8003d1c:	d0ed      	beq.n	8003cfa <commutate+0x7e>
 8003d1e:	2b04      	cmp	r3, #4
 8003d20:	d1b6      	bne.n	8003c90 <commutate+0x14>
			rising = 1;
 8003d22:	2201      	movs	r2, #1
 8003d24:	602a      	str	r2, [r5, #0]
 8003d26:	e7b3      	b.n	8003c90 <commutate+0x14>
		step++;
 8003d28:	3301      	adds	r3, #1
 8003d2a:	6023      	str	r3, [r4, #0]
		if (step > 6) {
 8003d2c:	2b06      	cmp	r3, #6
 8003d2e:	dd13      	ble.n	8003d58 <commutate+0xdc>
		if (step == 1 || step == 3 || step == 5) {
 8003d30:	2301      	movs	r3, #1
			step = 1;
 8003d32:	6022      	str	r2, [r4, #0]
			rising = 1;                                // is back emf rising or falling
 8003d34:	2101      	movs	r1, #1
 8003d36:	4d12      	ldr	r5, [pc, #72]	; (8003d80 <commutate+0x104>)
 8003d38:	6029      	str	r1, [r5, #0]
		if (step == 2 || step == 4 || step == 6) {
 8003d3a:	2a02      	cmp	r2, #2
 8003d3c:	d009      	beq.n	8003d52 <commutate+0xd6>
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	d007      	beq.n	8003d52 <commutate+0xd6>
 8003d42:	6823      	ldr	r3, [r4, #0]
 8003d44:	e7a4      	b.n	8003c90 <commutate+0x14>
			step = 6;
 8003d46:	2306      	movs	r3, #6
			rising = 1;
 8003d48:	2201      	movs	r2, #1
 8003d4a:	4d0d      	ldr	r5, [pc, #52]	; (8003d80 <commutate+0x104>)
			step = 6;
 8003d4c:	6023      	str	r3, [r4, #0]
			rising = 1;
 8003d4e:	602a      	str	r2, [r5, #0]
 8003d50:	e79e      	b.n	8003c90 <commutate+0x14>
			rising = 0;
 8003d52:	2300      	movs	r3, #0
 8003d54:	602b      	str	r3, [r5, #0]
 8003d56:	e7f4      	b.n	8003d42 <commutate+0xc6>
		if (step == 1 || step == 3 || step == 5) {
 8003d58:	2102      	movs	r1, #2
 8003d5a:	0018      	movs	r0, r3
 8003d5c:	4388      	bics	r0, r1
 8003d5e:	2801      	cmp	r0, #1
 8003d60:	d007      	beq.n	8003d72 <commutate+0xf6>
 8003d62:	2b05      	cmp	r3, #5
 8003d64:	d0e6      	beq.n	8003d34 <commutate+0xb8>
 8003d66:	2204      	movs	r2, #4
 8003d68:	0019      	movs	r1, r3
 8003d6a:	4391      	bics	r1, r2
 8003d6c:	000a      	movs	r2, r1
 8003d6e:	4d04      	ldr	r5, [pc, #16]	; (8003d80 <commutate+0x104>)
 8003d70:	e7e3      	b.n	8003d3a <commutate+0xbe>
 8003d72:	001a      	movs	r2, r3
 8003d74:	e7de      	b.n	8003d34 <commutate+0xb8>
 8003d76:	46c0      	nop			; (mov r8, r8)
 8003d78:	20000020 	.word	0x20000020
 8003d7c:	2000004c 	.word	0x2000004c
 8003d80:	20000038 	.word	0x20000038
 8003d84:	2000011c 	.word	0x2000011c
 8003d88:	20000210 	.word	0x20000210

08003d8c <HAL_TIM_PeriodElapsedCallback>:
			if (htim->Instance==TIM16)
 8003d8c:	4b0f      	ldr	r3, [pc, #60]	; (8003dcc <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003d8e:	6802      	ldr	r2, [r0, #0]
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003d90:	b570      	push	{r4, r5, r6, lr}
			if (htim->Instance==TIM16)
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d000      	beq.n	8003d98 <HAL_TIM_PeriodElapsedCallback+0xc>
}
 8003d96:	bd70      	pop	{r4, r5, r6, pc}
			if(inputSet == 1){
 8003d98:	4b0d      	ldr	r3, [pc, #52]	; (8003dd0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d1fa      	bne.n	8003d96 <HAL_TIM_PeriodElapsedCallback+0xa>
				 if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2)){
 8003da0:	2090      	movs	r0, #144	; 0x90
 8003da2:	2104      	movs	r1, #4
 8003da4:	05c0      	lsls	r0, r0, #23
 8003da6:	f7fd faaf 	bl	8001308 <HAL_GPIO_ReadPin>
 8003daa:	1e04      	subs	r4, r0, #0
 8003dac:	d1f3      	bne.n	8003d96 <HAL_TIM_PeriodElapsedCallback+0xa>
		     HAL_TIM_IC_Stop_DMA(&htim15,TIM_CHANNEL_1);
 8003dae:	4d09      	ldr	r5, [pc, #36]	; (8003dd4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8003db0:	2100      	movs	r1, #0
 8003db2:	0028      	movs	r0, r5
 8003db4:	f7fe f872 	bl	8001e9c <HAL_TIM_IC_Stop_DMA>
			 TIM15->CNT = 0;
 8003db8:	4b07      	ldr	r3, [pc, #28]	; (8003dd8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
				 HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , IC_buffer_size);
 8003dba:	4a08      	ldr	r2, [pc, #32]	; (8003ddc <HAL_TIM_PeriodElapsedCallback+0x50>)
			 TIM15->CNT = 0;
 8003dbc:	625c      	str	r4, [r3, #36]	; 0x24
				 HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , IC_buffer_size);
 8003dbe:	4b08      	ldr	r3, [pc, #32]	; (8003de0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8003dc0:	2100      	movs	r1, #0
 8003dc2:	881b      	ldrh	r3, [r3, #0]
 8003dc4:	0028      	movs	r0, r5
 8003dc6:	f7fd fff5 	bl	8001db4 <HAL_TIM_IC_Start_DMA>
}
 8003dca:	e7e4      	b.n	8003d96 <HAL_TIM_PeriodElapsedCallback+0xa>
 8003dcc:	40014400 	.word	0x40014400
 8003dd0:	20000120 	.word	0x20000120
 8003dd4:	200001b0 	.word	0x200001b0
 8003dd8:	40014000 	.word	0x40014000
 8003ddc:	20000284 	.word	0x20000284
 8003de0:	20000000 	.word	0x20000000

08003de4 <startMotor>:
void startMotor() {
 8003de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003de6:	4646      	mov	r6, r8
 8003de8:	46d6      	mov	lr, sl
 8003dea:	464f      	mov	r7, r9
 startcount++;
 8003dec:	4a1c      	ldr	r2, [pc, #112]	; (8003e60 <startMotor+0x7c>)
void startMotor() {
 8003dee:	b5c0      	push	{r6, r7, lr}
 startcount++;
 8003df0:	6813      	ldr	r3, [r2, #0]
    char decaystate = slow_decay;
 8003df2:	4c1c      	ldr	r4, [pc, #112]	; (8003e64 <startMotor+0x80>)
 startcount++;
 8003df4:	3301      	adds	r3, #1
 8003df6:	6013      	str	r3, [r2, #0]
    char decaystate = slow_decay;
 8003df8:	7823      	ldrb	r3, [r4, #0]
    sensorless = 0;
 8003dfa:	4e1b      	ldr	r6, [pc, #108]	; (8003e68 <startMotor+0x84>)
    char decaystate = slow_decay;
 8003dfc:	469a      	mov	sl, r3
    sensorless = 0;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	6033      	str	r3, [r6, #0]
	if (running == 0){
 8003e02:	4b1a      	ldr	r3, [pc, #104]	; (8003e6c <startMotor+0x88>)
 8003e04:	681d      	ldr	r5, [r3, #0]
 8003e06:	4698      	mov	r8, r3
 8003e08:	2d00      	cmp	r5, #0
 8003e0a:	d00d      	beq.n	8003e28 <startMotor+0x44>
	slow_decay = decaystate;    // return to normal
 8003e0c:	4653      	mov	r3, sl
 8003e0e:	7023      	strb	r3, [r4, #0]
	sensorless = 1;
 8003e10:	2301      	movs	r3, #1
 8003e12:	6033      	str	r3, [r6, #0]
	startupcountdown =0;
 8003e14:	2300      	movs	r3, #0
 8003e16:	4a16      	ldr	r2, [pc, #88]	; (8003e70 <startMotor+0x8c>)
 8003e18:	6013      	str	r3, [r2, #0]
	bemf_counts = 0;
 8003e1a:	4a16      	ldr	r2, [pc, #88]	; (8003e74 <startMotor+0x90>)
 8003e1c:	6013      	str	r3, [r2, #0]
}
 8003e1e:	bc1c      	pop	{r2, r3, r4}
 8003e20:	4690      	mov	r8, r2
 8003e22:	4699      	mov	r9, r3
 8003e24:	46a2      	mov	sl, r4
 8003e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_COMP_Stop_IT(&hcomp1);
 8003e28:	4f13      	ldr	r7, [pc, #76]	; (8003e78 <startMotor+0x94>)
 8003e2a:	0038      	movs	r0, r7
 8003e2c:	f7fc fe5a 	bl	8000ae4 <HAL_COMP_Stop_IT>
		slow_decay = 1;
 8003e30:	2301      	movs	r3, #1
 8003e32:	4699      	mov	r9, r3
 8003e34:	7023      	strb	r3, [r4, #0]
	commutate();
 8003e36:	f7ff ff21 	bl	8003c7c <commutate>
	commutation_interval = 30000;
 8003e3a:	4a10      	ldr	r2, [pc, #64]	; (8003e7c <startMotor+0x98>)
 8003e3c:	4b10      	ldr	r3, [pc, #64]	; (8003e80 <startMotor+0x9c>)
	if (HAL_COMP_Start_IT(&hcomp1) != HAL_OK) {
 8003e3e:	0038      	movs	r0, r7
	commutation_interval = 30000;
 8003e40:	601a      	str	r2, [r3, #0]
	TIM3->CNT = 0;
 8003e42:	4b10      	ldr	r3, [pc, #64]	; (8003e84 <startMotor+0xa0>)
	TIM2->ARR = commutation_interval * 2;
 8003e44:	4a10      	ldr	r2, [pc, #64]	; (8003e88 <startMotor+0xa4>)
	TIM3->CNT = 0;
 8003e46:	625d      	str	r5, [r3, #36]	; 0x24
	TIM2->CNT = 0;
 8003e48:	2380      	movs	r3, #128	; 0x80
 8003e4a:	05db      	lsls	r3, r3, #23
 8003e4c:	625d      	str	r5, [r3, #36]	; 0x24
	TIM2->ARR = commutation_interval * 2;
 8003e4e:	62da      	str	r2, [r3, #44]	; 0x2c
	running = 1;
 8003e50:	4643      	mov	r3, r8
 8003e52:	464a      	mov	r2, r9
 8003e54:	601a      	str	r2, [r3, #0]
	if (HAL_COMP_Start_IT(&hcomp1) != HAL_OK) {
 8003e56:	f7fc fdf1 	bl	8000a3c <HAL_COMP_Start_IT>
 8003e5a:	2800      	cmp	r0, #0
 8003e5c:	d0d6      	beq.n	8003e0c <startMotor+0x28>
 8003e5e:	e7fe      	b.n	8003e5e <startMotor+0x7a>
 8003e60:	2000015c 	.word	0x2000015c
 8003e64:	20000040 	.word	0x20000040
 8003e68:	2000014c 	.word	0x2000014c
 8003e6c:	20000148 	.word	0x20000148
 8003e70:	20000164 	.word	0x20000164
 8003e74:	20000280 	.word	0x20000280
 8003e78:	20000210 	.word	0x20000210
 8003e7c:	00007530 	.word	0x00007530
 8003e80:	200000b4 	.word	0x200000b4
 8003e84:	40000400 	.word	0x40000400
 8003e88:	0000ea60 	.word	0x0000ea60

08003e8c <HAL_COMP_TriggerCallback>:
void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp) {
 8003e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e8e:	46de      	mov	lr, fp
 8003e90:	4657      	mov	r7, sl
 8003e92:	464e      	mov	r6, r9
 8003e94:	4645      	mov	r5, r8
 8003e96:	b5e0      	push	{r5, r6, r7, lr}
	if( bemf_counts > 100 && commutation_interval < 400){
 8003e98:	4b94      	ldr	r3, [pc, #592]	; (80040ec <HAL_COMP_TriggerCallback+0x260>)
void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp) {
 8003e9a:	b083      	sub	sp, #12
	if( bemf_counts > 100 && commutation_interval < 400){
 8003e9c:	469b      	mov	fp, r3
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2b64      	cmp	r3, #100	; 0x64
 8003ea2:	dd05      	ble.n	8003eb0 <HAL_COMP_TriggerCallback+0x24>
 8003ea4:	2390      	movs	r3, #144	; 0x90
 8003ea6:	4f92      	ldr	r7, [pc, #584]	; (80040f0 <HAL_COMP_TriggerCallback+0x264>)
 8003ea8:	33ff      	adds	r3, #255	; 0xff
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	dd40      	ble.n	8003f32 <HAL_COMP_TriggerCallback+0xa6>
		timestamp = TIM3->CNT;
 8003eb0:	4a90      	ldr	r2, [pc, #576]	; (80040f4 <HAL_COMP_TriggerCallback+0x268>)
	if (compit > 200){
 8003eb2:	4b91      	ldr	r3, [pc, #580]	; (80040f8 <HAL_COMP_TriggerCallback+0x26c>)
		timestamp = TIM3->CNT;
 8003eb4:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8003eb6:	4f91      	ldr	r7, [pc, #580]	; (80040fc <HAL_COMP_TriggerCallback+0x270>)
	if (compit > 200){
 8003eb8:	781b      	ldrb	r3, [r3, #0]
		timestamp = TIM3->CNT;
 8003eba:	0001      	movs	r1, r0
 8003ebc:	6038      	str	r0, [r7, #0]
	if (compit > 200){
 8003ebe:	2bc8      	cmp	r3, #200	; 0xc8
 8003ec0:	d900      	bls.n	8003ec4 <HAL_COMP_TriggerCallback+0x38>
 8003ec2:	e10c      	b.n	80040de <HAL_COMP_TriggerCallback+0x252>
	compit +=1;
 8003ec4:	4c8c      	ldr	r4, [pc, #560]	; (80040f8 <HAL_COMP_TriggerCallback+0x26c>)
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	7023      	strb	r3, [r4, #0]
 8003eca:	4b8d      	ldr	r3, [pc, #564]	; (8004100 <HAL_COMP_TriggerCallback+0x274>)
 8003ecc:	681c      	ldr	r4, [r3, #0]
	while (TIM3->CNT - timestamp < filter_delay){
 8003ece:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003ed0:	1a1b      	subs	r3, r3, r0
 8003ed2:	429c      	cmp	r4, r3
 8003ed4:	d8fb      	bhi.n	8003ece <HAL_COMP_TriggerCallback+0x42>
	if (rising){
 8003ed6:	4b8b      	ldr	r3, [pc, #556]	; (8004104 <HAL_COMP_TriggerCallback+0x278>)
		for (int i = 0; i < filter_level; i++){
 8003ed8:	4e8b      	ldr	r6, [pc, #556]	; (8004108 <HAL_COMP_TriggerCallback+0x27c>)
	if (rising){
 8003eda:	681d      	ldr	r5, [r3, #0]
		for (int i = 0; i < filter_level; i++){
 8003edc:	7833      	ldrb	r3, [r6, #0]
	if (rising){
 8003ede:	2d00      	cmp	r5, #0
 8003ee0:	d019      	beq.n	8003f16 <HAL_COMP_TriggerCallback+0x8a>
		for (int i = 0; i < filter_level; i++){
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d100      	bne.n	8003ee8 <HAL_COMP_TriggerCallback+0x5c>
 8003ee6:	e0ff      	b.n	80040e8 <HAL_COMP_TriggerCallback+0x25c>
		if (HAL_COMP_GetOutputLevel(&hcomp1) == COMP_OUTPUTLEVEL_HIGH){
 8003ee8:	2380      	movs	r3, #128	; 0x80
 8003eea:	01db      	lsls	r3, r3, #7
		for (int i = 0; i < filter_level; i++){
 8003eec:	2500      	movs	r5, #0
 8003eee:	4c87      	ldr	r4, [pc, #540]	; (800410c <HAL_COMP_TriggerCallback+0x280>)
		if (HAL_COMP_GetOutputLevel(&hcomp1) == COMP_OUTPUTLEVEL_HIGH){
 8003ef0:	4698      	mov	r8, r3
 8003ef2:	e004      	b.n	8003efe <HAL_COMP_TriggerCallback+0x72>
		for (int i = 0; i < filter_level; i++){
 8003ef4:	7833      	ldrb	r3, [r6, #0]
 8003ef6:	3501      	adds	r5, #1
 8003ef8:	42ab      	cmp	r3, r5
 8003efa:	dc00      	bgt.n	8003efe <HAL_COMP_TriggerCallback+0x72>
 8003efc:	e076      	b.n	8003fec <HAL_COMP_TriggerCallback+0x160>
		if (HAL_COMP_GetOutputLevel(&hcomp1) == COMP_OUTPUTLEVEL_HIGH){
 8003efe:	0020      	movs	r0, r4
 8003f00:	f7fc fe20 	bl	8000b44 <HAL_COMP_GetOutputLevel>
 8003f04:	4540      	cmp	r0, r8
 8003f06:	d1f5      	bne.n	8003ef4 <HAL_COMP_TriggerCallback+0x68>
}
 8003f08:	b003      	add	sp, #12
 8003f0a:	bc3c      	pop	{r2, r3, r4, r5}
 8003f0c:	4690      	mov	r8, r2
 8003f0e:	4699      	mov	r9, r3
 8003f10:	46a2      	mov	sl, r4
 8003f12:	46ab      	mov	fp, r5
 8003f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f16:	4c7d      	ldr	r4, [pc, #500]	; (800410c <HAL_COMP_TriggerCallback+0x280>)
		for (int i = 0; i < filter_level; i++){
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d104      	bne.n	8003f26 <HAL_COMP_TriggerCallback+0x9a>
 8003f1c:	e067      	b.n	8003fee <HAL_COMP_TriggerCallback+0x162>
 8003f1e:	7833      	ldrb	r3, [r6, #0]
 8003f20:	3501      	adds	r5, #1
 8003f22:	42ab      	cmp	r3, r5
 8003f24:	dd62      	ble.n	8003fec <HAL_COMP_TriggerCallback+0x160>
		if (HAL_COMP_GetOutputLevel(&hcomp1) == COMP_OUTPUTLEVEL_LOW){
 8003f26:	0020      	movs	r0, r4
 8003f28:	f7fc fe0c 	bl	8000b44 <HAL_COMP_GetOutputLevel>
 8003f2c:	2800      	cmp	r0, #0
 8003f2e:	d1f6      	bne.n	8003f1e <HAL_COMP_TriggerCallback+0x92>
 8003f30:	e7ea      	b.n	8003f08 <HAL_COMP_TriggerCallback+0x7c>
		thiszctime = TIM3->CNT;
 8003f32:	4d70      	ldr	r5, [pc, #448]	; (80040f4 <HAL_COMP_TriggerCallback+0x268>)
 8003f34:	4b72      	ldr	r3, [pc, #456]	; (8004100 <HAL_COMP_TriggerCallback+0x274>)
 8003f36:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8003f38:	4e75      	ldr	r6, [pc, #468]	; (8004110 <HAL_COMP_TriggerCallback+0x284>)
 8003f3a:	6819      	ldr	r1, [r3, #0]
 8003f3c:	6032      	str	r2, [r6, #0]
		while (TIM3->CNT - thiszctime < filter_delay){
 8003f3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003f40:	1a9b      	subs	r3, r3, r2
 8003f42:	428b      	cmp	r3, r1
 8003f44:	d3fb      	bcc.n	8003f3e <HAL_COMP_TriggerCallback+0xb2>
		if (HAL_COMP_GetOutputLevel(&hcomp1) == rising){
 8003f46:	4c71      	ldr	r4, [pc, #452]	; (800410c <HAL_COMP_TriggerCallback+0x280>)
 8003f48:	0020      	movs	r0, r4
 8003f4a:	f7fc fdfb 	bl	8000b44 <HAL_COMP_GetOutputLevel>
 8003f4e:	4b6d      	ldr	r3, [pc, #436]	; (8004104 <HAL_COMP_TriggerCallback+0x278>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4298      	cmp	r0, r3
 8003f54:	d0d8      	beq.n	8003f08 <HAL_COMP_TriggerCallback+0x7c>
		TIM3->CNT = 0;
 8003f56:	2300      	movs	r3, #0
 8003f58:	4698      	mov	r8, r3
 8003f5a:	626b      	str	r3, [r5, #36]	; 0x24
		HAL_COMP_Stop_IT(&hcomp1);
 8003f5c:	0020      	movs	r0, r4
 8003f5e:	f7fc fdc1 	bl	8000ae4 <HAL_COMP_Stop_IT>
        zctimeout = 0;
 8003f62:	4642      	mov	r2, r8
 8003f64:	4b6b      	ldr	r3, [pc, #428]	; (8004114 <HAL_COMP_TriggerCallback+0x288>)
        commutation_interval = ((2 *commutation_interval) + thiszctime) / 3;     // TEST!   divide by two when tracking up down time independant
 8003f66:	2103      	movs	r1, #3
        zctimeout = 0;
 8003f68:	601a      	str	r2, [r3, #0]
        commutation_interval = ((2 *commutation_interval) + thiszctime) / 3;     // TEST!   divide by two when tracking up down time independant
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	005d      	lsls	r5, r3, #1
 8003f6e:	6833      	ldr	r3, [r6, #0]
 8003f70:	18ed      	adds	r5, r5, r3
 8003f72:	0028      	movs	r0, r5
 8003f74:	f7fc f952 	bl	800021c <__divsi3>
		bad_commutation = 0;
 8003f78:	4642      	mov	r2, r8
 8003f7a:	4b67      	ldr	r3, [pc, #412]	; (8004118 <HAL_COMP_TriggerCallback+0x28c>)
        commutation_interval = ((2 *commutation_interval) + thiszctime) / 3;     // TEST!   divide by two when tracking up down time independant
 8003f7c:	6038      	str	r0, [r7, #0]
		bad_commutation = 0;
 8003f7e:	701a      	strb	r2, [r3, #0]
					advance = commutation_interval / advancedivisor;
 8003f80:	4b66      	ldr	r3, [pc, #408]	; (800411c <HAL_COMP_TriggerCallback+0x290>)
 8003f82:	7819      	ldrb	r1, [r3, #0]
 8003f84:	f7fc f94a 	bl	800021c <__divsi3>
 8003f88:	4b65      	ldr	r3, [pc, #404]	; (8004120 <HAL_COMP_TriggerCallback+0x294>)
 8003f8a:	0006      	movs	r6, r0
 8003f8c:	6018      	str	r0, [r3, #0]
					waitTime = commutation_interval /2  - advance;
 8003f8e:	2106      	movs	r1, #6
 8003f90:	0028      	movs	r0, r5
 8003f92:	f7fc f943 	bl	800021c <__divsi3>
 8003f96:	4b63      	ldr	r3, [pc, #396]	; (8004124 <HAL_COMP_TriggerCallback+0x298>)
 8003f98:	1b86      	subs	r6, r0, r6
 8003f9a:	601e      	str	r6, [r3, #0]
 8003f9c:	4698      	mov	r8, r3
					blanktime = commutation_interval / 4;
 8003f9e:	4b62      	ldr	r3, [pc, #392]	; (8004128 <HAL_COMP_TriggerCallback+0x29c>)
 8003fa0:	210c      	movs	r1, #12
 8003fa2:	4699      	mov	r9, r3
 8003fa4:	0028      	movs	r0, r5
 8003fa6:	f7fc f939 	bl	800021c <__divsi3>
 8003faa:	464b      	mov	r3, r9
 8003fac:	6018      	str	r0, [r3, #0]
					while (TIM3->CNT  < waitTime){
 8003fae:	4b51      	ldr	r3, [pc, #324]	; (80040f4 <HAL_COMP_TriggerCallback+0x268>)
 8003fb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fb2:	42b2      	cmp	r2, r6
 8003fb4:	d3fc      	bcc.n	8003fb0 <HAL_COMP_TriggerCallback+0x124>
					            TIM1->CNT = duty_cycle;
 8003fb6:	4b5d      	ldr	r3, [pc, #372]	; (800412c <HAL_COMP_TriggerCallback+0x2a0>)
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	4b5d      	ldr	r3, [pc, #372]	; (8004130 <HAL_COMP_TriggerCallback+0x2a4>)
 8003fbc:	625a      	str	r2, [r3, #36]	; 0x24
                                forcedcount = 0;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	4a5c      	ldr	r2, [pc, #368]	; (8004134 <HAL_COMP_TriggerCallback+0x2a8>)
 8003fc2:	6013      	str	r3, [r2, #0]
								compit = 0;
 8003fc4:	4a4c      	ldr	r2, [pc, #304]	; (80040f8 <HAL_COMP_TriggerCallback+0x26c>)
 8003fc6:	7013      	strb	r3, [r2, #0]
								commutate();
 8003fc8:	f7ff fe58 	bl	8003c7c <commutate>
 8003fcc:	4643      	mov	r3, r8
 8003fce:	464a      	mov	r2, r9
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	6812      	ldr	r2, [r2, #0]
 8003fd4:	189b      	adds	r3, r3, r2
								while (TIM3->CNT  < waitTime + blanktime){
 8003fd6:	4a47      	ldr	r2, [pc, #284]	; (80040f4 <HAL_COMP_TriggerCallback+0x268>)
 8003fd8:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8003fda:	4299      	cmp	r1, r3
 8003fdc:	d3fc      	bcc.n	8003fd8 <HAL_COMP_TriggerCallback+0x14c>
								if (HAL_COMP_Start_IT(&hcomp1) != HAL_OK) {
 8003fde:	0020      	movs	r0, r4
 8003fe0:	f7fc fd2c 	bl	8000a3c <HAL_COMP_Start_IT>
 8003fe4:	2800      	cmp	r0, #0
 8003fe6:	d100      	bne.n	8003fea <HAL_COMP_TriggerCallback+0x15e>
 8003fe8:	e78e      	b.n	8003f08 <HAL_COMP_TriggerCallback+0x7c>
 8003fea:	e7fe      	b.n	8003fea <HAL_COMP_TriggerCallback+0x15e>
 8003fec:	6839      	ldr	r1, [r7, #0]
	TIM3->CNT = TIM3->CNT - timestamp;
 8003fee:	4f41      	ldr	r7, [pc, #260]	; (80040f4 <HAL_COMP_TriggerCallback+0x268>)
	thiszctime = timestamp;
 8003ff0:	4e47      	ldr	r6, [pc, #284]	; (8004110 <HAL_COMP_TriggerCallback+0x284>)
	TIM3->CNT = TIM3->CNT - timestamp;
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	thiszctime = timestamp;
 8003ff4:	6031      	str	r1, [r6, #0]
	TIM3->CNT = TIM3->CNT - timestamp;
 8003ff6:	1a59      	subs	r1, r3, r1
 8003ff8:	6279      	str	r1, [r7, #36]	; 0x24
	HAL_COMP_Stop_IT(&hcomp1);
 8003ffa:	0020      	movs	r0, r4
 8003ffc:	f7fc fd72 	bl	8000ae4 <HAL_COMP_Stop_IT>
	zctimeout = 0;
 8004000:	2300      	movs	r3, #0
 8004002:	4699      	mov	r9, r3
 8004004:	464a      	mov	r2, r9
 8004006:	4b43      	ldr	r3, [pc, #268]	; (8004114 <HAL_COMP_TriggerCallback+0x288>)
				commutation_interval = ((4 *commutation_interval) + thiszctime) / 5;    // TEST!   divide by two when tracking up down time independant
 8004008:	2105      	movs	r1, #5
	zctimeout = 0;
 800400a:	601a      	str	r2, [r3, #0]
				commutation_interval = ((4 *commutation_interval) + thiszctime) / 5;    // TEST!   divide by two when tracking up down time independant
 800400c:	6833      	ldr	r3, [r6, #0]
 800400e:	4a38      	ldr	r2, [pc, #224]	; (80040f0 <HAL_COMP_TriggerCallback+0x264>)
 8004010:	469c      	mov	ip, r3
 8004012:	4690      	mov	r8, r2
 8004014:	6812      	ldr	r2, [r2, #0]
 8004016:	9301      	str	r3, [sp, #4]
 8004018:	0095      	lsls	r5, r2, #2
 800401a:	4465      	add	r5, ip
 800401c:	0028      	movs	r0, r5
 800401e:	f7fc f8fd 	bl	800021c <__divsi3>
 8004022:	4643      	mov	r3, r8
				bad_commutation = 0;
 8004024:	464a      	mov	r2, r9
				commutation_interval = ((4 *commutation_interval) + thiszctime) / 5;    // TEST!   divide by two when tracking up down time independant
 8004026:	6018      	str	r0, [r3, #0]
				bad_commutation = 0;
 8004028:	4b3b      	ldr	r3, [pc, #236]	; (8004118 <HAL_COMP_TriggerCallback+0x28c>)
 800402a:	701a      	strb	r2, [r3, #0]
			advance = commutation_interval / advancedivisor;
 800402c:	4b3b      	ldr	r3, [pc, #236]	; (800411c <HAL_COMP_TriggerCallback+0x290>)
 800402e:	7819      	ldrb	r1, [r3, #0]
 8004030:	f7fc f8f4 	bl	800021c <__divsi3>
 8004034:	4682      	mov	sl, r0
 8004036:	4b3a      	ldr	r3, [pc, #232]	; (8004120 <HAL_COMP_TriggerCallback+0x294>)
			waitTime = commutation_interval /2   - advance ;
 8004038:	210a      	movs	r1, #10
			advance = commutation_interval / advancedivisor;
 800403a:	6018      	str	r0, [r3, #0]
			waitTime = commutation_interval /2   - advance ;
 800403c:	0028      	movs	r0, r5
 800403e:	f7fc f8ed 	bl	800021c <__divsi3>
 8004042:	4653      	mov	r3, sl
 8004044:	1ac3      	subs	r3, r0, r3
 8004046:	469a      	mov	sl, r3
 8004048:	4652      	mov	r2, sl
 800404a:	4b36      	ldr	r3, [pc, #216]	; (8004124 <HAL_COMP_TriggerCallback+0x298>)
			blanktime = commutation_interval / 4;
 800404c:	2114      	movs	r1, #20
			waitTime = commutation_interval /2   - advance ;
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	4698      	mov	r8, r3
			blanktime = commutation_interval / 4;
 8004052:	4b35      	ldr	r3, [pc, #212]	; (8004128 <HAL_COMP_TriggerCallback+0x29c>)
 8004054:	0028      	movs	r0, r5
 8004056:	4699      	mov	r9, r3
 8004058:	f7fc f8e0 	bl	800021c <__divsi3>
 800405c:	464b      	mov	r3, r9
 800405e:	6018      	str	r0, [r3, #0]
		if(tempbrake){
 8004060:	4b35      	ldr	r3, [pc, #212]	; (8004138 <HAL_COMP_TriggerCallback+0x2ac>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d13b      	bne.n	80040e0 <HAL_COMP_TriggerCallback+0x254>
		if (sensorless){
 8004068:	4b34      	ldr	r3, [pc, #208]	; (800413c <HAL_COMP_TriggerCallback+0x2b0>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d025      	beq.n	80040bc <HAL_COMP_TriggerCallback+0x230>
			while (TIM3->CNT  < waitTime){
 8004070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004072:	459a      	cmp	sl, r3
 8004074:	d907      	bls.n	8004086 <HAL_COMP_TriggerCallback+0x1fa>
				GPIOA->BSRR = GPIO_PIN_15;
 8004076:	2290      	movs	r2, #144	; 0x90
 8004078:	2380      	movs	r3, #128	; 0x80
 800407a:	05d2      	lsls	r2, r2, #23
 800407c:	021b      	lsls	r3, r3, #8
 800407e:	6193      	str	r3, [r2, #24]
			while (TIM3->CNT  < waitTime){
 8004080:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004082:	4551      	cmp	r1, sl
 8004084:	d3fb      	bcc.n	800407e <HAL_COMP_TriggerCallback+0x1f2>
			TIM1->CNT = duty_cycle;
 8004086:	4b29      	ldr	r3, [pc, #164]	; (800412c <HAL_COMP_TriggerCallback+0x2a0>)
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	4b29      	ldr	r3, [pc, #164]	; (8004130 <HAL_COMP_TriggerCallback+0x2a4>)
 800408c:	625a      	str	r2, [r3, #36]	; 0x24
			GPIOA->BRR = GPIO_PIN_15;
 800408e:	2280      	movs	r2, #128	; 0x80
 8004090:	2390      	movs	r3, #144	; 0x90
 8004092:	0212      	lsls	r2, r2, #8
 8004094:	05db      	lsls	r3, r3, #23
 8004096:	629a      	str	r2, [r3, #40]	; 0x28
			forcedcount = 0;
 8004098:	2300      	movs	r3, #0
 800409a:	4a26      	ldr	r2, [pc, #152]	; (8004134 <HAL_COMP_TriggerCallback+0x2a8>)
 800409c:	6013      	str	r3, [r2, #0]
			compit = 0;
 800409e:	4a16      	ldr	r2, [pc, #88]	; (80040f8 <HAL_COMP_TriggerCallback+0x26c>)
 80040a0:	7013      	strb	r3, [r2, #0]
			commutate();
 80040a2:	f7ff fdeb 	bl	8003c7c <commutate>
 80040a6:	4643      	mov	r3, r8
 80040a8:	464a      	mov	r2, r9
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6812      	ldr	r2, [r2, #0]
 80040ae:	189b      	adds	r3, r3, r2
			while (TIM3->CNT  < waitTime + blanktime){
 80040b0:	4a10      	ldr	r2, [pc, #64]	; (80040f4 <HAL_COMP_TriggerCallback+0x268>)
 80040b2:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80040b4:	4299      	cmp	r1, r3
 80040b6:	d3fc      	bcc.n	80040b2 <HAL_COMP_TriggerCallback+0x226>
 80040b8:	6833      	ldr	r3, [r6, #0]
 80040ba:	9301      	str	r3, [sp, #4]
		lastzctime = thiszctime;
 80040bc:	4b20      	ldr	r3, [pc, #128]	; (8004140 <HAL_COMP_TriggerCallback+0x2b4>)
 80040be:	9a01      	ldr	r2, [sp, #4]
 80040c0:	601a      	str	r2, [r3, #0]
		if (bemf_counts < 200){
 80040c2:	465b      	mov	r3, fp
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2bc7      	cmp	r3, #199	; 0xc7
 80040c8:	dc02      	bgt.n	80040d0 <HAL_COMP_TriggerCallback+0x244>
        bemf_counts++;
 80040ca:	465a      	mov	r2, fp
 80040cc:	3301      	adds	r3, #1
 80040ce:	6013      	str	r3, [r2, #0]
	if (HAL_COMP_Start_IT(&hcomp1) != HAL_OK) {
 80040d0:	0020      	movs	r0, r4
 80040d2:	f7fc fcb3 	bl	8000a3c <HAL_COMP_Start_IT>
 80040d6:	2800      	cmp	r0, #0
 80040d8:	d100      	bne.n	80040dc <HAL_COMP_TriggerCallback+0x250>
 80040da:	e715      	b.n	8003f08 <HAL_COMP_TriggerCallback+0x7c>
 80040dc:	e7fe      	b.n	80040dc <HAL_COMP_TriggerCallback+0x250>
 80040de:	4c0b      	ldr	r4, [pc, #44]	; (800410c <HAL_COMP_TriggerCallback+0x280>)
		HAL_COMP_Stop_IT(&hcomp1);
 80040e0:	0020      	movs	r0, r4
 80040e2:	f7fc fcff 	bl	8000ae4 <HAL_COMP_Stop_IT>
		return;
 80040e6:	e70f      	b.n	8003f08 <HAL_COMP_TriggerCallback+0x7c>
 80040e8:	4c08      	ldr	r4, [pc, #32]	; (800410c <HAL_COMP_TriggerCallback+0x280>)
 80040ea:	e780      	b.n	8003fee <HAL_COMP_TriggerCallback+0x162>
 80040ec:	20000280 	.word	0x20000280
 80040f0:	200000b4 	.word	0x200000b4
 80040f4:	40000400 	.word	0x40000400
 80040f8:	200000b8 	.word	0x200000b8
 80040fc:	200001ac 	.word	0x200001ac
 8004100:	20000014 	.word	0x20000014
 8004104:	20000038 	.word	0x20000038
 8004108:	20000018 	.word	0x20000018
 800410c:	20000210 	.word	0x20000210
 8004110:	20000170 	.word	0x20000170
 8004114:	20000180 	.word	0x20000180
 8004118:	200000a8 	.word	0x200000a8
 800411c:	2000000a 	.word	0x2000000a
 8004120:	2000009c 	.word	0x2000009c
 8004124:	2000017c 	.word	0x2000017c
 8004128:	20000384 	.word	0x20000384
 800412c:	20000010 	.word	0x20000010
 8004130:	40012c00 	.word	0x40012c00
 8004134:	20000118 	.word	0x20000118
 8004138:	20000168 	.word	0x20000168
 800413c:	2000014c 	.word	0x2000014c
 8004140:	20000124 	.word	0x20000124

08004144 <playStartupTune>:
void playStartupTune(){
 8004144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004146:	46de      	mov	lr, fp
 8004148:	4657      	mov	r7, sl
 800414a:	464e      	mov	r6, r9
	TIM1->PSC = 75;
 800414c:	234b      	movs	r3, #75	; 0x4b
void playStartupTune(){
 800414e:	4645      	mov	r5, r8
	TIM1->PSC = 75;
 8004150:	4c93      	ldr	r4, [pc, #588]	; (80043a0 <playStartupTune+0x25c>)
void playStartupTune(){
 8004152:	b5e0      	push	{r5, r6, r7, lr}
	TIM1->PSC = 75;
 8004154:	62a3      	str	r3, [r4, #40]	; 0x28
	TIM1->CCR1 = 5;
 8004156:	3b46      	subs	r3, #70	; 0x46
 8004158:	6363      	str	r3, [r4, #52]	; 0x34
	TIM1->CCR2 = 5;
 800415a:	63a3      	str	r3, [r4, #56]	; 0x38
	TIM1->CCR3 = 5;
 800415c:	63e3      	str	r3, [r4, #60]	; 0x3c
		phaseA(floating);
 800415e:	4b91      	ldr	r3, [pc, #580]	; (80043a4 <playStartupTune+0x260>)
 8004160:	6818      	ldr	r0, [r3, #0]
 8004162:	f7ff f97f 	bl	8003464 <phaseA>
		phaseB(lowside);
 8004166:	4e90      	ldr	r6, [pc, #576]	; (80043a8 <playStartupTune+0x264>)
 8004168:	6830      	ldr	r0, [r6, #0]
 800416a:	f7ff f8a7 	bl	80032bc <phaseB>
		phaseC(pwm);
 800416e:	4f8f      	ldr	r7, [pc, #572]	; (80043ac <playStartupTune+0x268>)
 8004170:	6838      	ldr	r0, [r7, #0]
 8004172:	f7ff f909 	bl	8003388 <phaseC>
	HAL_Delay(100);
 8004176:	2064      	movs	r0, #100	; 0x64
 8004178:	f7fc f96c 	bl	8000454 <HAL_Delay>
	TIM1->PSC = 50;
 800417c:	2332      	movs	r3, #50	; 0x32
	HAL_Delay(100);
 800417e:	2064      	movs	r0, #100	; 0x64
	TIM1->PSC = 50;
 8004180:	62a3      	str	r3, [r4, #40]	; 0x28
	HAL_Delay(100);
 8004182:	f7fc f967 	bl	8000454 <HAL_Delay>
	TIM1->PSC = 25;
 8004186:	2319      	movs	r3, #25
	HAL_Delay(100);
 8004188:	2064      	movs	r0, #100	; 0x64
	TIM1->PSC = 25;
 800418a:	62a3      	str	r3, [r4, #40]	; 0x28
	HAL_Delay(100);
 800418c:	f7fc f962 	bl	8000454 <HAL_Delay>
	phaseA(floating);
 8004190:	4b84      	ldr	r3, [pc, #528]	; (80043a4 <playStartupTune+0x260>)
	if (newPhase == pwm) {
 8004192:	683c      	ldr	r4, [r7, #0]
	phaseA(floating);
 8004194:	681b      	ldr	r3, [r3, #0]
	if (newPhase == pwm) {
 8004196:	42a3      	cmp	r3, r4
 8004198:	d100      	bne.n	800419c <playStartupTune+0x58>
 800419a:	e0c5      	b.n	8004328 <playStartupTune+0x1e4>
 800419c:	210c      	movs	r1, #12
 800419e:	4884      	ldr	r0, [pc, #528]	; (80043b0 <playStartupTune+0x26c>)
 80041a0:	468a      	mov	sl, r1
 80041a2:	6802      	ldr	r2, [r0, #0]
 80041a4:	4f83      	ldr	r7, [pc, #524]	; (80043b4 <playStartupTune+0x270>)
 80041a6:	438a      	bics	r2, r1
 80041a8:	3908      	subs	r1, #8
 80041aa:	430a      	orrs	r2, r1
 80041ac:	6002      	str	r2, [r0, #0]
 80041ae:	4689      	mov	r9, r1
		GPIOB->BRR = GPIO_PIN_1;
 80041b0:	2202      	movs	r2, #2
 80041b2:	2190      	movs	r1, #144	; 0x90
 80041b4:	6282      	str	r2, [r0, #40]	; 0x28
 80041b6:	05c9      	lsls	r1, r1, #23
 80041b8:	4690      	mov	r8, r2
 80041ba:	680a      	ldr	r2, [r1, #0]
 80041bc:	46bc      	mov	ip, r7
 80041be:	403a      	ands	r2, r7
 80041c0:	2780      	movs	r7, #128	; 0x80
 80041c2:	037f      	lsls	r7, r7, #13
 80041c4:	433a      	orrs	r2, r7
 80041c6:	600a      	str	r2, [r1, #0]
		GPIOA->BRR = GPIO_PIN_10;
 80041c8:	2280      	movs	r2, #128	; 0x80
	if (newPhase == lowside) {
 80041ca:	6836      	ldr	r6, [r6, #0]
		GPIOA->BRR = GPIO_PIN_10;
 80041cc:	00d2      	lsls	r2, r2, #3
 80041ce:	628a      	str	r2, [r1, #40]	; 0x28
	if (newPhase == lowside) {
 80041d0:	42b3      	cmp	r3, r6
 80041d2:	d111      	bne.n	80041f8 <playStartupTune+0xb4>
 80041d4:	4652      	mov	r2, sl
 80041d6:	6805      	ldr	r5, [r0, #0]
 80041d8:	4395      	bics	r5, r2
 80041da:	46ab      	mov	fp, r5
 80041dc:	464d      	mov	r5, r9
 80041de:	465a      	mov	r2, fp
 80041e0:	4315      	orrs	r5, r2
		GPIOB->BSRR = GPIO_PIN_1;
 80041e2:	4642      	mov	r2, r8
 80041e4:	6005      	str	r5, [r0, #0]
 80041e6:	6182      	str	r2, [r0, #24]
 80041e8:	4662      	mov	r2, ip
 80041ea:	6808      	ldr	r0, [r1, #0]
 80041ec:	4010      	ands	r0, r2
		GPIOA->BRR = GPIO_PIN_10;
 80041ee:	2280      	movs	r2, #128	; 0x80
 80041f0:	4307      	orrs	r7, r0
 80041f2:	00d2      	lsls	r2, r2, #3
 80041f4:	600f      	str	r7, [r1, #0]
 80041f6:	628a      	str	r2, [r1, #40]	; 0x28
	if (newPhase == pwm) {
 80041f8:	0018      	movs	r0, r3
 80041fa:	42a3      	cmp	r3, r4
 80041fc:	d100      	bne.n	8004200 <playStartupTune+0xbc>
 80041fe:	e07b      	b.n	80042f8 <playStartupTune+0x1b4>
 8004200:	2703      	movs	r7, #3
 8004202:	496b      	ldr	r1, [pc, #428]	; (80043b0 <playStartupTune+0x26c>)
 8004204:	46b8      	mov	r8, r7
 8004206:	680a      	ldr	r2, [r1, #0]
 8004208:	4d6b      	ldr	r5, [pc, #428]	; (80043b8 <playStartupTune+0x274>)
 800420a:	43ba      	bics	r2, r7
 800420c:	3f02      	subs	r7, #2
 800420e:	433a      	orrs	r2, r7
 8004210:	600a      	str	r2, [r1, #0]
 8004212:	46bc      	mov	ip, r7
		GPIOB->BRR = GPIO_PIN_0;
 8004214:	628f      	str	r7, [r1, #40]	; 0x28
 8004216:	2790      	movs	r7, #144	; 0x90
 8004218:	05ff      	lsls	r7, r7, #23
 800421a:	683a      	ldr	r2, [r7, #0]
 800421c:	46a9      	mov	r9, r5
 800421e:	402a      	ands	r2, r5
 8004220:	2580      	movs	r5, #128	; 0x80
 8004222:	02ed      	lsls	r5, r5, #11
 8004224:	432a      	orrs	r2, r5
 8004226:	603a      	str	r2, [r7, #0]
		GPIOA->BRR = GPIO_PIN_9;
 8004228:	2280      	movs	r2, #128	; 0x80
 800422a:	0092      	lsls	r2, r2, #2
 800422c:	46aa      	mov	sl, r5
 800422e:	62ba      	str	r2, [r7, #40]	; 0x28
	if (newPhase == lowside) {          // low mosfet on
 8004230:	42b3      	cmp	r3, r6
 8004232:	d10d      	bne.n	8004250 <playStartupTune+0x10c>
 8004234:	4645      	mov	r5, r8
 8004236:	680b      	ldr	r3, [r1, #0]
 8004238:	43ab      	bics	r3, r5
 800423a:	4665      	mov	r5, ip
 800423c:	432b      	orrs	r3, r5
 800423e:	600b      	str	r3, [r1, #0]
		GPIOB->BSRR = GPIO_PIN_0;
 8004240:	618d      	str	r5, [r1, #24]
 8004242:	4649      	mov	r1, r9
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	400b      	ands	r3, r1
 8004248:	4651      	mov	r1, sl
 800424a:	4319      	orrs	r1, r3
 800424c:	6039      	str	r1, [r7, #0]
		GPIOA->BRR = GPIO_PIN_9;
 800424e:	62ba      	str	r2, [r7, #40]	; 0x28
	if (newPhase == pwm) {  // pwm
 8004250:	42a0      	cmp	r0, r4
 8004252:	d034      	beq.n	80042be <playStartupTune+0x17a>
 8004254:	2390      	movs	r3, #144	; 0x90
 8004256:	05db      	lsls	r3, r3, #23
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	4958      	ldr	r1, [pc, #352]	; (80043bc <playStartupTune+0x278>)
 800425c:	4011      	ands	r1, r2
 800425e:	2280      	movs	r2, #128	; 0x80
 8004260:	01d2      	lsls	r2, r2, #7
 8004262:	430a      	orrs	r2, r1
 8004264:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_7;
 8004266:	2280      	movs	r2, #128	; 0x80
 8004268:	629a      	str	r2, [r3, #40]	; 0x28
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	4954      	ldr	r1, [pc, #336]	; (80043c0 <playStartupTune+0x27c>)
 800426e:	4011      	ands	r1, r2
 8004270:	2280      	movs	r2, #128	; 0x80
 8004272:	0252      	lsls	r2, r2, #9
 8004274:	430a      	orrs	r2, r1
 8004276:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_8;
 8004278:	2280      	movs	r2, #128	; 0x80
 800427a:	0052      	lsls	r2, r2, #1
 800427c:	629a      	str	r2, [r3, #40]	; 0x28
	if (newPhase == lowside) {              // lowside
 800427e:	42b0      	cmp	r0, r6
 8004280:	d114      	bne.n	80042ac <playStartupTune+0x168>
 8004282:	2390      	movs	r3, #144	; 0x90
 8004284:	05db      	lsls	r3, r3, #23
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	494c      	ldr	r1, [pc, #304]	; (80043bc <playStartupTune+0x278>)
 800428a:	4011      	ands	r1, r2
 800428c:	2280      	movs	r2, #128	; 0x80
 800428e:	01d2      	lsls	r2, r2, #7
 8004290:	430a      	orrs	r2, r1
 8004292:	601a      	str	r2, [r3, #0]
		GPIOA->BSRR = GPIO_PIN_7;
 8004294:	2280      	movs	r2, #128	; 0x80
 8004296:	619a      	str	r2, [r3, #24]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	4949      	ldr	r1, [pc, #292]	; (80043c0 <playStartupTune+0x27c>)
 800429c:	4011      	ands	r1, r2
 800429e:	2280      	movs	r2, #128	; 0x80
 80042a0:	0252      	lsls	r2, r2, #9
 80042a2:	430a      	orrs	r2, r1
 80042a4:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_8;
 80042a6:	2280      	movs	r2, #128	; 0x80
 80042a8:	0052      	lsls	r2, r2, #1
 80042aa:	629a      	str	r2, [r3, #40]	; 0x28
	TIM1->PSC = 0;
 80042ac:	2200      	movs	r2, #0
 80042ae:	4b3c      	ldr	r3, [pc, #240]	; (80043a0 <playStartupTune+0x25c>)
 80042b0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80042b2:	bc3c      	pop	{r2, r3, r4, r5}
 80042b4:	4690      	mov	r8, r2
 80042b6:	4699      	mov	r9, r3
 80042b8:	46a2      	mov	sl, r4
 80042ba:	46ab      	mov	fp, r5
 80042bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!slow_decay || prop_brake_active){
 80042be:	4b41      	ldr	r3, [pc, #260]	; (80043c4 <playStartupTune+0x280>)
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d15d      	bne.n	8004382 <playStartupTune+0x23e>
 80042c6:	2390      	movs	r3, #144	; 0x90
 80042c8:	05db      	lsls	r3, r3, #23
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	493b      	ldr	r1, [pc, #236]	; (80043bc <playStartupTune+0x278>)
 80042ce:	4011      	ands	r1, r2
 80042d0:	2280      	movs	r2, #128	; 0x80
 80042d2:	01d2      	lsls	r2, r2, #7
 80042d4:	430a      	orrs	r2, r1
 80042d6:	601a      	str	r2, [r3, #0]
			GPIOA->BRR = GPIO_PIN_7;
 80042d8:	2280      	movs	r2, #128	; 0x80
 80042da:	629a      	str	r2, [r3, #40]	; 0x28
 80042dc:	2190      	movs	r1, #144	; 0x90
 80042de:	05c9      	lsls	r1, r1, #23
 80042e0:	680b      	ldr	r3, [r1, #0]
 80042e2:	4a37      	ldr	r2, [pc, #220]	; (80043c0 <playStartupTune+0x27c>)
 80042e4:	401a      	ands	r2, r3
 80042e6:	2380      	movs	r3, #128	; 0x80
 80042e8:	029b      	lsls	r3, r3, #10
 80042ea:	4313      	orrs	r3, r2
 80042ec:	600b      	str	r3, [r1, #0]
	if (newPhase == floating) {            // floating
 80042ee:	4b2d      	ldr	r3, [pc, #180]	; (80043a4 <playStartupTune+0x260>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4298      	cmp	r0, r3
 80042f4:	d1c3      	bne.n	800427e <playStartupTune+0x13a>
 80042f6:	e7ad      	b.n	8004254 <playStartupTune+0x110>
		if(!slow_decay  || prop_brake_active){            // for future
 80042f8:	4a32      	ldr	r2, [pc, #200]	; (80043c4 <playStartupTune+0x280>)
 80042fa:	492d      	ldr	r1, [pc, #180]	; (80043b0 <playStartupTune+0x26c>)
 80042fc:	7812      	ldrb	r2, [r2, #0]
 80042fe:	2a00      	cmp	r2, #0
 8004300:	d134      	bne.n	800436c <playStartupTune+0x228>
 8004302:	2003      	movs	r0, #3
 8004304:	680a      	ldr	r2, [r1, #0]
 8004306:	4382      	bics	r2, r0
 8004308:	3802      	subs	r0, #2
 800430a:	4302      	orrs	r2, r0
 800430c:	600a      	str	r2, [r1, #0]
		GPIOB->BRR = GPIO_PIN_0;
 800430e:	6288      	str	r0, [r1, #40]	; 0x28
 8004310:	2090      	movs	r0, #144	; 0x90
 8004312:	05c0      	lsls	r0, r0, #23
 8004314:	6802      	ldr	r2, [r0, #0]
 8004316:	4928      	ldr	r1, [pc, #160]	; (80043b8 <playStartupTune+0x274>)
 8004318:	4011      	ands	r1, r2
 800431a:	2280      	movs	r2, #128	; 0x80
 800431c:	0312      	lsls	r2, r2, #12
 800431e:	430a      	orrs	r2, r1
 8004320:	6002      	str	r2, [r0, #0]
 8004322:	0020      	movs	r0, r4
 8004324:	001c      	movs	r4, r3
 8004326:	e76b      	b.n	8004200 <playStartupTune+0xbc>
		if (!slow_decay || prop_brake_active){
 8004328:	4a26      	ldr	r2, [pc, #152]	; (80043c4 <playStartupTune+0x280>)
 800432a:	4921      	ldr	r1, [pc, #132]	; (80043b0 <playStartupTune+0x26c>)
 800432c:	7812      	ldrb	r2, [r2, #0]
 800432e:	2a00      	cmp	r2, #0
 8004330:	d111      	bne.n	8004356 <playStartupTune+0x212>
 8004332:	200c      	movs	r0, #12
 8004334:	680a      	ldr	r2, [r1, #0]
 8004336:	4382      	bics	r2, r0
 8004338:	3808      	subs	r0, #8
 800433a:	4302      	orrs	r2, r0
 800433c:	600a      	str	r2, [r1, #0]
			GPIOB->BRR = GPIO_PIN_1;
 800433e:	2202      	movs	r2, #2
 8004340:	628a      	str	r2, [r1, #40]	; 0x28
 8004342:	2090      	movs	r0, #144	; 0x90
 8004344:	05c0      	lsls	r0, r0, #23
 8004346:	6802      	ldr	r2, [r0, #0]
 8004348:	491a      	ldr	r1, [pc, #104]	; (80043b4 <playStartupTune+0x270>)
 800434a:	4011      	ands	r1, r2
 800434c:	2280      	movs	r2, #128	; 0x80
 800434e:	0392      	lsls	r2, r2, #14
 8004350:	430a      	orrs	r2, r1
 8004352:	6002      	str	r2, [r0, #0]
 8004354:	e722      	b.n	800419c <playStartupTune+0x58>
		if (!slow_decay || prop_brake_active){
 8004356:	4a1c      	ldr	r2, [pc, #112]	; (80043c8 <playStartupTune+0x284>)
 8004358:	7812      	ldrb	r2, [r2, #0]
 800435a:	2a00      	cmp	r2, #0
 800435c:	d1e9      	bne.n	8004332 <playStartupTune+0x1ee>
 800435e:	200c      	movs	r0, #12
 8004360:	680a      	ldr	r2, [r1, #0]
 8004362:	4382      	bics	r2, r0
 8004364:	3804      	subs	r0, #4
 8004366:	4302      	orrs	r2, r0
 8004368:	600a      	str	r2, [r1, #0]
 800436a:	e7ea      	b.n	8004342 <playStartupTune+0x1fe>
		if(!slow_decay  || prop_brake_active){            // for future
 800436c:	4a16      	ldr	r2, [pc, #88]	; (80043c8 <playStartupTune+0x284>)
 800436e:	7812      	ldrb	r2, [r2, #0]
 8004370:	2a00      	cmp	r2, #0
 8004372:	d1c6      	bne.n	8004302 <playStartupTune+0x1be>
 8004374:	2003      	movs	r0, #3
 8004376:	680a      	ldr	r2, [r1, #0]
 8004378:	4382      	bics	r2, r0
 800437a:	3801      	subs	r0, #1
 800437c:	4302      	orrs	r2, r0
 800437e:	600a      	str	r2, [r1, #0]
 8004380:	e7c6      	b.n	8004310 <playStartupTune+0x1cc>
		if (!slow_decay || prop_brake_active){
 8004382:	4b11      	ldr	r3, [pc, #68]	; (80043c8 <playStartupTune+0x284>)
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d19d      	bne.n	80042c6 <playStartupTune+0x182>
 800438a:	2190      	movs	r1, #144	; 0x90
 800438c:	05c9      	lsls	r1, r1, #23
 800438e:	680b      	ldr	r3, [r1, #0]
 8004390:	4a0a      	ldr	r2, [pc, #40]	; (80043bc <playStartupTune+0x278>)
 8004392:	401a      	ands	r2, r3
 8004394:	2380      	movs	r3, #128	; 0x80
 8004396:	021b      	lsls	r3, r3, #8
 8004398:	4313      	orrs	r3, r2
 800439a:	600b      	str	r3, [r1, #0]
 800439c:	e79e      	b.n	80042dc <playStartupTune+0x198>
 800439e:	46c0      	nop			; (mov r8, r8)
 80043a0:	40012c00 	.word	0x40012c00
 80043a4:	2000001c 	.word	0x2000001c
 80043a8:	20000028 	.word	0x20000028
 80043ac:	20000034 	.word	0x20000034
 80043b0:	48000400 	.word	0x48000400
 80043b4:	ffcfffff 	.word	0xffcfffff
 80043b8:	fff3ffff 	.word	0xfff3ffff
 80043bc:	ffff3fff 	.word	0xffff3fff
 80043c0:	fffcffff 	.word	0xfffcffff
 80043c4:	20000040 	.word	0x20000040
 80043c8:	20000133 	.word	0x20000133

080043cc <playInputTune>:
void playInputTune(){
 80043cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ce:	46de      	mov	lr, fp
 80043d0:	4657      	mov	r7, sl
 80043d2:	464e      	mov	r6, r9
 80043d4:	4645      	mov	r5, r8
	TIM1->PSC = 100;
 80043d6:	2364      	movs	r3, #100	; 0x64
void playInputTune(){
 80043d8:	b5e0      	push	{r5, r6, r7, lr}
	TIM1->PSC = 100;
 80043da:	4d90      	ldr	r5, [pc, #576]	; (800461c <playInputTune+0x250>)
 80043dc:	62ab      	str	r3, [r5, #40]	; 0x28
	TIM1->CCR1 = 5;
 80043de:	3b5f      	subs	r3, #95	; 0x5f
 80043e0:	636b      	str	r3, [r5, #52]	; 0x34
	TIM1->CCR2 = 5;
 80043e2:	63ab      	str	r3, [r5, #56]	; 0x38
	TIM1->CCR3 = 5;
 80043e4:	63eb      	str	r3, [r5, #60]	; 0x3c
		phaseA(floating);
 80043e6:	4b8e      	ldr	r3, [pc, #568]	; (8004620 <playInputTune+0x254>)
 80043e8:	6818      	ldr	r0, [r3, #0]
 80043ea:	f7ff f83b 	bl	8003464 <phaseA>
		phaseB(lowside);
 80043ee:	4e8d      	ldr	r6, [pc, #564]	; (8004624 <playInputTune+0x258>)
 80043f0:	6830      	ldr	r0, [r6, #0]
 80043f2:	f7fe ff63 	bl	80032bc <phaseB>
		phaseC(pwm);
 80043f6:	4f8c      	ldr	r7, [pc, #560]	; (8004628 <playInputTune+0x25c>)
 80043f8:	6838      	ldr	r0, [r7, #0]
 80043fa:	f7fe ffc5 	bl	8003388 <phaseC>
	HAL_Delay(100);
 80043fe:	2064      	movs	r0, #100	; 0x64
 8004400:	f7fc f828 	bl	8000454 <HAL_Delay>
	TIM1->PSC = 50;
 8004404:	2332      	movs	r3, #50	; 0x32
	HAL_Delay(100);
 8004406:	2064      	movs	r0, #100	; 0x64
	TIM1->PSC = 50;
 8004408:	62ab      	str	r3, [r5, #40]	; 0x28
	HAL_Delay(100);
 800440a:	f7fc f823 	bl	8000454 <HAL_Delay>
	phaseA(floating);
 800440e:	4b84      	ldr	r3, [pc, #528]	; (8004620 <playInputTune+0x254>)
	if (newPhase == pwm) {
 8004410:	683d      	ldr	r5, [r7, #0]
	phaseA(floating);
 8004412:	681b      	ldr	r3, [r3, #0]
	if (newPhase == pwm) {
 8004414:	42ab      	cmp	r3, r5
 8004416:	d100      	bne.n	800441a <playInputTune+0x4e>
 8004418:	e0c5      	b.n	80045a6 <playInputTune+0x1da>
 800441a:	210c      	movs	r1, #12
 800441c:	4883      	ldr	r0, [pc, #524]	; (800462c <playInputTune+0x260>)
 800441e:	468a      	mov	sl, r1
 8004420:	6802      	ldr	r2, [r0, #0]
 8004422:	4f83      	ldr	r7, [pc, #524]	; (8004630 <playInputTune+0x264>)
 8004424:	438a      	bics	r2, r1
 8004426:	3908      	subs	r1, #8
 8004428:	430a      	orrs	r2, r1
 800442a:	6002      	str	r2, [r0, #0]
 800442c:	4689      	mov	r9, r1
		GPIOB->BRR = GPIO_PIN_1;
 800442e:	2202      	movs	r2, #2
 8004430:	2190      	movs	r1, #144	; 0x90
 8004432:	6282      	str	r2, [r0, #40]	; 0x28
 8004434:	05c9      	lsls	r1, r1, #23
 8004436:	4690      	mov	r8, r2
 8004438:	680a      	ldr	r2, [r1, #0]
 800443a:	46bc      	mov	ip, r7
 800443c:	403a      	ands	r2, r7
 800443e:	2780      	movs	r7, #128	; 0x80
 8004440:	037f      	lsls	r7, r7, #13
 8004442:	433a      	orrs	r2, r7
 8004444:	600a      	str	r2, [r1, #0]
		GPIOA->BRR = GPIO_PIN_10;
 8004446:	2280      	movs	r2, #128	; 0x80
	if (newPhase == lowside) {
 8004448:	6836      	ldr	r6, [r6, #0]
		GPIOA->BRR = GPIO_PIN_10;
 800444a:	00d2      	lsls	r2, r2, #3
 800444c:	628a      	str	r2, [r1, #40]	; 0x28
	if (newPhase == lowside) {
 800444e:	42b3      	cmp	r3, r6
 8004450:	d111      	bne.n	8004476 <playInputTune+0xaa>
 8004452:	4652      	mov	r2, sl
 8004454:	6804      	ldr	r4, [r0, #0]
 8004456:	4394      	bics	r4, r2
 8004458:	46a3      	mov	fp, r4
 800445a:	464c      	mov	r4, r9
 800445c:	465a      	mov	r2, fp
 800445e:	4314      	orrs	r4, r2
		GPIOB->BSRR = GPIO_PIN_1;
 8004460:	4642      	mov	r2, r8
 8004462:	6004      	str	r4, [r0, #0]
 8004464:	6182      	str	r2, [r0, #24]
 8004466:	4662      	mov	r2, ip
 8004468:	6808      	ldr	r0, [r1, #0]
 800446a:	4010      	ands	r0, r2
		GPIOA->BRR = GPIO_PIN_10;
 800446c:	2280      	movs	r2, #128	; 0x80
 800446e:	4307      	orrs	r7, r0
 8004470:	00d2      	lsls	r2, r2, #3
 8004472:	600f      	str	r7, [r1, #0]
 8004474:	628a      	str	r2, [r1, #40]	; 0x28
	if (newPhase == pwm) {
 8004476:	0018      	movs	r0, r3
 8004478:	42ab      	cmp	r3, r5
 800447a:	d100      	bne.n	800447e <playInputTune+0xb2>
 800447c:	e07b      	b.n	8004576 <playInputTune+0x1aa>
 800447e:	2703      	movs	r7, #3
 8004480:	496a      	ldr	r1, [pc, #424]	; (800462c <playInputTune+0x260>)
 8004482:	46b8      	mov	r8, r7
 8004484:	680a      	ldr	r2, [r1, #0]
 8004486:	4c6b      	ldr	r4, [pc, #428]	; (8004634 <playInputTune+0x268>)
 8004488:	43ba      	bics	r2, r7
 800448a:	3f02      	subs	r7, #2
 800448c:	433a      	orrs	r2, r7
 800448e:	600a      	str	r2, [r1, #0]
 8004490:	46bc      	mov	ip, r7
		GPIOB->BRR = GPIO_PIN_0;
 8004492:	628f      	str	r7, [r1, #40]	; 0x28
 8004494:	2790      	movs	r7, #144	; 0x90
 8004496:	05ff      	lsls	r7, r7, #23
 8004498:	683a      	ldr	r2, [r7, #0]
 800449a:	46a1      	mov	r9, r4
 800449c:	4022      	ands	r2, r4
 800449e:	2480      	movs	r4, #128	; 0x80
 80044a0:	02e4      	lsls	r4, r4, #11
 80044a2:	4322      	orrs	r2, r4
 80044a4:	603a      	str	r2, [r7, #0]
		GPIOA->BRR = GPIO_PIN_9;
 80044a6:	2280      	movs	r2, #128	; 0x80
 80044a8:	0092      	lsls	r2, r2, #2
 80044aa:	46a2      	mov	sl, r4
 80044ac:	62ba      	str	r2, [r7, #40]	; 0x28
	if (newPhase == lowside) {          // low mosfet on
 80044ae:	42b3      	cmp	r3, r6
 80044b0:	d10d      	bne.n	80044ce <playInputTune+0x102>
 80044b2:	4644      	mov	r4, r8
 80044b4:	680b      	ldr	r3, [r1, #0]
 80044b6:	43a3      	bics	r3, r4
 80044b8:	4664      	mov	r4, ip
 80044ba:	4323      	orrs	r3, r4
 80044bc:	600b      	str	r3, [r1, #0]
		GPIOB->BSRR = GPIO_PIN_0;
 80044be:	618c      	str	r4, [r1, #24]
 80044c0:	4649      	mov	r1, r9
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	400b      	ands	r3, r1
 80044c6:	4651      	mov	r1, sl
 80044c8:	4319      	orrs	r1, r3
 80044ca:	6039      	str	r1, [r7, #0]
		GPIOA->BRR = GPIO_PIN_9;
 80044cc:	62ba      	str	r2, [r7, #40]	; 0x28
	if (newPhase == pwm) {  // pwm
 80044ce:	42a8      	cmp	r0, r5
 80044d0:	d034      	beq.n	800453c <playInputTune+0x170>
 80044d2:	2390      	movs	r3, #144	; 0x90
 80044d4:	05db      	lsls	r3, r3, #23
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	4957      	ldr	r1, [pc, #348]	; (8004638 <playInputTune+0x26c>)
 80044da:	4011      	ands	r1, r2
 80044dc:	2280      	movs	r2, #128	; 0x80
 80044de:	01d2      	lsls	r2, r2, #7
 80044e0:	430a      	orrs	r2, r1
 80044e2:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_7;
 80044e4:	2280      	movs	r2, #128	; 0x80
 80044e6:	629a      	str	r2, [r3, #40]	; 0x28
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	4954      	ldr	r1, [pc, #336]	; (800463c <playInputTune+0x270>)
 80044ec:	4011      	ands	r1, r2
 80044ee:	2280      	movs	r2, #128	; 0x80
 80044f0:	0252      	lsls	r2, r2, #9
 80044f2:	430a      	orrs	r2, r1
 80044f4:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_8;
 80044f6:	2280      	movs	r2, #128	; 0x80
 80044f8:	0052      	lsls	r2, r2, #1
 80044fa:	629a      	str	r2, [r3, #40]	; 0x28
	if (newPhase == lowside) {              // lowside
 80044fc:	42b0      	cmp	r0, r6
 80044fe:	d114      	bne.n	800452a <playInputTune+0x15e>
 8004500:	2390      	movs	r3, #144	; 0x90
 8004502:	05db      	lsls	r3, r3, #23
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	494c      	ldr	r1, [pc, #304]	; (8004638 <playInputTune+0x26c>)
 8004508:	4011      	ands	r1, r2
 800450a:	2280      	movs	r2, #128	; 0x80
 800450c:	01d2      	lsls	r2, r2, #7
 800450e:	430a      	orrs	r2, r1
 8004510:	601a      	str	r2, [r3, #0]
		GPIOA->BSRR = GPIO_PIN_7;
 8004512:	2280      	movs	r2, #128	; 0x80
 8004514:	619a      	str	r2, [r3, #24]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	4948      	ldr	r1, [pc, #288]	; (800463c <playInputTune+0x270>)
 800451a:	4011      	ands	r1, r2
 800451c:	2280      	movs	r2, #128	; 0x80
 800451e:	0252      	lsls	r2, r2, #9
 8004520:	430a      	orrs	r2, r1
 8004522:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_8;
 8004524:	2280      	movs	r2, #128	; 0x80
 8004526:	0052      	lsls	r2, r2, #1
 8004528:	629a      	str	r2, [r3, #40]	; 0x28
	TIM1->PSC = 0;
 800452a:	2200      	movs	r2, #0
 800452c:	4b3b      	ldr	r3, [pc, #236]	; (800461c <playInputTune+0x250>)
 800452e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004530:	bc3c      	pop	{r2, r3, r4, r5}
 8004532:	4690      	mov	r8, r2
 8004534:	4699      	mov	r9, r3
 8004536:	46a2      	mov	sl, r4
 8004538:	46ab      	mov	fp, r5
 800453a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!slow_decay || prop_brake_active){
 800453c:	4b40      	ldr	r3, [pc, #256]	; (8004640 <playInputTune+0x274>)
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d15d      	bne.n	8004600 <playInputTune+0x234>
 8004544:	2390      	movs	r3, #144	; 0x90
 8004546:	05db      	lsls	r3, r3, #23
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	493b      	ldr	r1, [pc, #236]	; (8004638 <playInputTune+0x26c>)
 800454c:	4011      	ands	r1, r2
 800454e:	2280      	movs	r2, #128	; 0x80
 8004550:	01d2      	lsls	r2, r2, #7
 8004552:	430a      	orrs	r2, r1
 8004554:	601a      	str	r2, [r3, #0]
			GPIOA->BRR = GPIO_PIN_7;
 8004556:	2280      	movs	r2, #128	; 0x80
 8004558:	629a      	str	r2, [r3, #40]	; 0x28
 800455a:	2190      	movs	r1, #144	; 0x90
 800455c:	05c9      	lsls	r1, r1, #23
 800455e:	680b      	ldr	r3, [r1, #0]
 8004560:	4a36      	ldr	r2, [pc, #216]	; (800463c <playInputTune+0x270>)
 8004562:	401a      	ands	r2, r3
 8004564:	2380      	movs	r3, #128	; 0x80
 8004566:	029b      	lsls	r3, r3, #10
 8004568:	4313      	orrs	r3, r2
 800456a:	600b      	str	r3, [r1, #0]
	if (newPhase == floating) {            // floating
 800456c:	4b2c      	ldr	r3, [pc, #176]	; (8004620 <playInputTune+0x254>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4298      	cmp	r0, r3
 8004572:	d1c3      	bne.n	80044fc <playInputTune+0x130>
 8004574:	e7ad      	b.n	80044d2 <playInputTune+0x106>
		if(!slow_decay  || prop_brake_active){            // for future
 8004576:	4a32      	ldr	r2, [pc, #200]	; (8004640 <playInputTune+0x274>)
 8004578:	492c      	ldr	r1, [pc, #176]	; (800462c <playInputTune+0x260>)
 800457a:	7812      	ldrb	r2, [r2, #0]
 800457c:	2a00      	cmp	r2, #0
 800457e:	d134      	bne.n	80045ea <playInputTune+0x21e>
 8004580:	2003      	movs	r0, #3
 8004582:	680a      	ldr	r2, [r1, #0]
 8004584:	4382      	bics	r2, r0
 8004586:	3802      	subs	r0, #2
 8004588:	4302      	orrs	r2, r0
 800458a:	600a      	str	r2, [r1, #0]
		GPIOB->BRR = GPIO_PIN_0;
 800458c:	6288      	str	r0, [r1, #40]	; 0x28
 800458e:	2090      	movs	r0, #144	; 0x90
 8004590:	05c0      	lsls	r0, r0, #23
 8004592:	6802      	ldr	r2, [r0, #0]
 8004594:	4927      	ldr	r1, [pc, #156]	; (8004634 <playInputTune+0x268>)
 8004596:	4011      	ands	r1, r2
 8004598:	2280      	movs	r2, #128	; 0x80
 800459a:	0312      	lsls	r2, r2, #12
 800459c:	430a      	orrs	r2, r1
 800459e:	6002      	str	r2, [r0, #0]
 80045a0:	0028      	movs	r0, r5
 80045a2:	001d      	movs	r5, r3
 80045a4:	e76b      	b.n	800447e <playInputTune+0xb2>
		if (!slow_decay || prop_brake_active){
 80045a6:	4a26      	ldr	r2, [pc, #152]	; (8004640 <playInputTune+0x274>)
 80045a8:	4920      	ldr	r1, [pc, #128]	; (800462c <playInputTune+0x260>)
 80045aa:	7812      	ldrb	r2, [r2, #0]
 80045ac:	2a00      	cmp	r2, #0
 80045ae:	d111      	bne.n	80045d4 <playInputTune+0x208>
 80045b0:	200c      	movs	r0, #12
 80045b2:	680a      	ldr	r2, [r1, #0]
 80045b4:	4382      	bics	r2, r0
 80045b6:	3808      	subs	r0, #8
 80045b8:	4302      	orrs	r2, r0
 80045ba:	600a      	str	r2, [r1, #0]
			GPIOB->BRR = GPIO_PIN_1;
 80045bc:	2202      	movs	r2, #2
 80045be:	628a      	str	r2, [r1, #40]	; 0x28
 80045c0:	2090      	movs	r0, #144	; 0x90
 80045c2:	05c0      	lsls	r0, r0, #23
 80045c4:	6802      	ldr	r2, [r0, #0]
 80045c6:	491a      	ldr	r1, [pc, #104]	; (8004630 <playInputTune+0x264>)
 80045c8:	4011      	ands	r1, r2
 80045ca:	2280      	movs	r2, #128	; 0x80
 80045cc:	0392      	lsls	r2, r2, #14
 80045ce:	430a      	orrs	r2, r1
 80045d0:	6002      	str	r2, [r0, #0]
 80045d2:	e722      	b.n	800441a <playInputTune+0x4e>
		if (!slow_decay || prop_brake_active){
 80045d4:	4a1b      	ldr	r2, [pc, #108]	; (8004644 <playInputTune+0x278>)
 80045d6:	7812      	ldrb	r2, [r2, #0]
 80045d8:	2a00      	cmp	r2, #0
 80045da:	d1e9      	bne.n	80045b0 <playInputTune+0x1e4>
 80045dc:	200c      	movs	r0, #12
 80045de:	680a      	ldr	r2, [r1, #0]
 80045e0:	4382      	bics	r2, r0
 80045e2:	3804      	subs	r0, #4
 80045e4:	4302      	orrs	r2, r0
 80045e6:	600a      	str	r2, [r1, #0]
 80045e8:	e7ea      	b.n	80045c0 <playInputTune+0x1f4>
		if(!slow_decay  || prop_brake_active){            // for future
 80045ea:	4a16      	ldr	r2, [pc, #88]	; (8004644 <playInputTune+0x278>)
 80045ec:	7812      	ldrb	r2, [r2, #0]
 80045ee:	2a00      	cmp	r2, #0
 80045f0:	d1c6      	bne.n	8004580 <playInputTune+0x1b4>
 80045f2:	2003      	movs	r0, #3
 80045f4:	680a      	ldr	r2, [r1, #0]
 80045f6:	4382      	bics	r2, r0
 80045f8:	3801      	subs	r0, #1
 80045fa:	4302      	orrs	r2, r0
 80045fc:	600a      	str	r2, [r1, #0]
 80045fe:	e7c6      	b.n	800458e <playInputTune+0x1c2>
		if (!slow_decay || prop_brake_active){
 8004600:	4b10      	ldr	r3, [pc, #64]	; (8004644 <playInputTune+0x278>)
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d19d      	bne.n	8004544 <playInputTune+0x178>
 8004608:	2190      	movs	r1, #144	; 0x90
 800460a:	05c9      	lsls	r1, r1, #23
 800460c:	680b      	ldr	r3, [r1, #0]
 800460e:	4a0a      	ldr	r2, [pc, #40]	; (8004638 <playInputTune+0x26c>)
 8004610:	401a      	ands	r2, r3
 8004612:	2380      	movs	r3, #128	; 0x80
 8004614:	021b      	lsls	r3, r3, #8
 8004616:	4313      	orrs	r3, r2
 8004618:	600b      	str	r3, [r1, #0]
 800461a:	e79e      	b.n	800455a <playInputTune+0x18e>
 800461c:	40012c00 	.word	0x40012c00
 8004620:	2000001c 	.word	0x2000001c
 8004624:	20000028 	.word	0x20000028
 8004628:	20000034 	.word	0x20000034
 800462c:	48000400 	.word	0x48000400
 8004630:	ffcfffff 	.word	0xffcfffff
 8004634:	fff3ffff 	.word	0xfff3ffff
 8004638:	ffff3fff 	.word	0xffff3fff
 800463c:	fffcffff 	.word	0xfffcffff
 8004640:	20000040 	.word	0x20000040
 8004644:	20000133 	.word	0x20000133

08004648 <HAL_ADC_ConvCpltCallback>:
	voltageraw = ADC1ConvertedValues[0];
 8004648:	4b05      	ldr	r3, [pc, #20]	; (8004660 <HAL_ADC_ConvCpltCallback+0x18>)
 800464a:	4a06      	ldr	r2, [pc, #24]	; (8004664 <HAL_ADC_ConvCpltCallback+0x1c>)
 800464c:	6819      	ldr	r1, [r3, #0]
 800464e:	6011      	str	r1, [r2, #0]
	currentraw = ADC1ConvertedValues[1];
 8004650:	4a05      	ldr	r2, [pc, #20]	; (8004668 <HAL_ADC_ConvCpltCallback+0x20>)
 8004652:	6859      	ldr	r1, [r3, #4]
 8004654:	6011      	str	r1, [r2, #0]
	tempraw = ADC1ConvertedValues[2];
 8004656:	689a      	ldr	r2, [r3, #8]
 8004658:	4b04      	ldr	r3, [pc, #16]	; (800466c <HAL_ADC_ConvCpltCallback+0x24>)
 800465a:	601a      	str	r2, [r3, #0]
}
 800465c:	4770      	bx	lr
 800465e:	46c0      	nop			; (mov r8, r8)
 8004660:	20000088 	.word	0x20000088
 8004664:	20000178 	.word	0x20000178
 8004668:	200000c0 	.word	0x200000c0
 800466c:	2000016c 	.word	0x2000016c

08004670 <detectInput>:
void detectInput(){
 8004670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004672:	4645      	mov	r5, r8
 8004674:	46de      	mov	lr, fp
 8004676:	4657      	mov	r7, sl
 8004678:	464e      	mov	r6, r9
	smallestnumber = 20000;
 800467a:	4b48      	ldr	r3, [pc, #288]	; (800479c <detectInput+0x12c>)
void detectInput(){
 800467c:	b5e0      	push	{r5, r6, r7, lr}
	smallestnumber = 20000;
 800467e:	4d48      	ldr	r5, [pc, #288]	; (80047a0 <detectInput+0x130>)
 8004680:	469b      	mov	fp, r3
 8004682:	601d      	str	r5, [r3, #0]
	dshot = 0;
 8004684:	4b47      	ldr	r3, [pc, #284]	; (80047a4 <detectInput+0x134>)
 8004686:	4698      	mov	r8, r3
 8004688:	2300      	movs	r3, #0
 800468a:	4642      	mov	r2, r8
 800468c:	7013      	strb	r3, [r2, #0]
	proshot = 0;
 800468e:	4a46      	ldr	r2, [pc, #280]	; (80047a8 <detectInput+0x138>)
 8004690:	7013      	strb	r3, [r2, #0]
 8004692:	4691      	mov	r9, r2
	multishot = 0;
 8004694:	4a45      	ldr	r2, [pc, #276]	; (80047ac <detectInput+0x13c>)
 8004696:	7013      	strb	r3, [r2, #0]
	oneshot42 = 0;
 8004698:	4a45      	ldr	r2, [pc, #276]	; (80047b0 <detectInput+0x140>)
 800469a:	7013      	strb	r3, [r2, #0]
	oneshot125 = 0;
 800469c:	4a45      	ldr	r2, [pc, #276]	; (80047b4 <detectInput+0x144>)
 800469e:	7013      	strb	r3, [r2, #0]
	servoPwm = 0;
 80046a0:	4a45      	ldr	r2, [pc, #276]	; (80047b8 <detectInput+0x148>)
 80046a2:	7013      	strb	r3, [r2, #0]
	for ( int j = 1 ; j < input_buffer_size; j++){
 80046a4:	4b45      	ldr	r3, [pc, #276]	; (80047bc <detectInput+0x14c>)
	servoPwm = 0;
 80046a6:	4692      	mov	sl, r2
	for ( int j = 1 ; j < input_buffer_size; j++){
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	dc00      	bgt.n	80046b0 <detectInput+0x40>
 80046ae:	e071      	b.n	8004794 <detectInput+0x124>
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	469c      	mov	ip, r3
 80046b4:	002f      	movs	r7, r5
 80046b6:	4942      	ldr	r1, [pc, #264]	; (80047c0 <detectInput+0x150>)
 80046b8:	1f0a      	subs	r2, r1, #4
 80046ba:	4494      	add	ip, r2
		if(dma_buffer[j]  < smallestnumber){ // blank space
 80046bc:	680b      	ldr	r3, [r1, #0]
 80046be:	003a      	movs	r2, r7
 80046c0:	001c      	movs	r4, r3
 80046c2:	42bb      	cmp	r3, r7
 80046c4:	d300      	bcc.n	80046c8 <detectInput+0x58>
 80046c6:	003c      	movs	r4, r7
 80046c8:	0027      	movs	r7, r4
 80046ca:	001e      	movs	r6, r3
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d900      	bls.n	80046d2 <detectInput+0x62>
 80046d0:	0016      	movs	r6, r2
 80046d2:	0028      	movs	r0, r5
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d200      	bcs.n	80046da <detectInput+0x6a>
 80046d8:	0018      	movs	r0, r3
 80046da:	3104      	adds	r1, #4
 80046dc:	0005      	movs	r5, r0
	for ( int j = 1 ; j < input_buffer_size; j++){
 80046de:	4561      	cmp	r1, ip
 80046e0:	d1ec      	bne.n	80046bc <detectInput+0x4c>
 80046e2:	465b      	mov	r3, fp
 80046e4:	6018      	str	r0, [r3, #0]
	if ((smallestnumber > 3)&&(smallestnumber < 22)){
 80046e6:	1f33      	subs	r3, r6, #4
 80046e8:	2b11      	cmp	r3, #17
 80046ea:	d828      	bhi.n	800473e <detectInput+0xce>
		dshot = 1;
 80046ec:	2301      	movs	r3, #1
 80046ee:	4642      	mov	r2, r8
 80046f0:	7013      	strb	r3, [r2, #0]
		TIM16->ARR = 8000;
 80046f2:	22fa      	movs	r2, #250	; 0xfa
		IC_buffer_size = 32;
 80046f4:	4d33      	ldr	r5, [pc, #204]	; (80047c4 <detectInput+0x154>)
 80046f6:	331f      	adds	r3, #31
 80046f8:	602b      	str	r3, [r5, #0]
		TIM16->ARR = 8000;
 80046fa:	4b33      	ldr	r3, [pc, #204]	; (80047c8 <detectInput+0x158>)
 80046fc:	0152      	lsls	r2, r2, #5
 80046fe:	62da      	str	r2, [r3, #44]	; 0x2c
 8004700:	0033      	movs	r3, r6
 8004702:	3b29      	subs	r3, #41	; 0x29
	if ((smallestnumber > 40 )&&(smallestnumber < 80)){
 8004704:	2b26      	cmp	r3, #38	; 0x26
 8004706:	d82d      	bhi.n	8004764 <detectInput+0xf4>
		proshot = 1;
 8004708:	2301      	movs	r3, #1
 800470a:	464a      	mov	r2, r9
 800470c:	7013      	strb	r3, [r2, #0]
		TIM16->ARR = 8000;
 800470e:	22fa      	movs	r2, #250	; 0xfa
		IC_buffer_size = 8;
 8004710:	3307      	adds	r3, #7
 8004712:	602b      	str	r3, [r5, #0]
		TIM16->ARR = 8000;
 8004714:	4b2c      	ldr	r3, [pc, #176]	; (80047c8 <detectInput+0x158>)
 8004716:	0152      	lsls	r2, r2, #5
 8004718:	62da      	str	r2, [r3, #44]	; 0x2c
	if (smallestnumber == 0){
 800471a:	465b      	mov	r3, fp
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d131      	bne.n	8004786 <detectInput+0x116>
		inputSet = 0;
 8004722:	4a2a      	ldr	r2, [pc, #168]	; (80047cc <detectInput+0x15c>)
 8004724:	7013      	strb	r3, [r2, #0]
	HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , IC_buffer_size);
 8004726:	882b      	ldrh	r3, [r5, #0]
 8004728:	4a29      	ldr	r2, [pc, #164]	; (80047d0 <detectInput+0x160>)
 800472a:	2100      	movs	r1, #0
 800472c:	4829      	ldr	r0, [pc, #164]	; (80047d4 <detectInput+0x164>)
 800472e:	f7fd fb41 	bl	8001db4 <HAL_TIM_IC_Start_DMA>
}
 8004732:	bc3c      	pop	{r2, r3, r4, r5}
 8004734:	4690      	mov	r8, r2
 8004736:	4699      	mov	r9, r3
 8004738:	46a2      	mov	sl, r4
 800473a:	46ab      	mov	fp, r5
 800473c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((smallestnumber > 22)&&(smallestnumber < 30)){
 800473e:	3e17      	subs	r6, #23
 8004740:	3b25      	subs	r3, #37	; 0x25
 8004742:	2e06      	cmp	r6, #6
 8004744:	d828      	bhi.n	8004798 <detectInput+0x128>
			dshot = 1;
 8004746:	2201      	movs	r2, #1
 8004748:	4641      	mov	r1, r8
 800474a:	700a      	strb	r2, [r1, #0]
			TIM15->PSC = 1;
 800474c:	4922      	ldr	r1, [pc, #136]	; (80047d8 <detectInput+0x168>)
			IC_buffer_size = 32;
 800474e:	4d1d      	ldr	r5, [pc, #116]	; (80047c4 <detectInput+0x154>)
			TIM15->PSC = 1;
 8004750:	628a      	str	r2, [r1, #40]	; 0x28
			TIM16->PSC = 1;
 8004752:	491d      	ldr	r1, [pc, #116]	; (80047c8 <detectInput+0x158>)
 8004754:	628a      	str	r2, [r1, #40]	; 0x28
			TIM16->ARR = 8000;
 8004756:	22fa      	movs	r2, #250	; 0xfa
 8004758:	0152      	lsls	r2, r2, #5
 800475a:	62ca      	str	r2, [r1, #44]	; 0x2c
			IC_buffer_size = 32;
 800475c:	2220      	movs	r2, #32
 800475e:	602a      	str	r2, [r5, #0]
	if ((smallestnumber > 40 )&&(smallestnumber < 80)){
 8004760:	2b26      	cmp	r3, #38	; 0x26
 8004762:	d9d1      	bls.n	8004708 <detectInput+0x98>
	if (smallestnumber > 100){
 8004764:	2c64      	cmp	r4, #100	; 0x64
 8004766:	ddd8      	ble.n	800471a <detectInput+0xaa>
		servoPwm = 1;
 8004768:	2301      	movs	r3, #1
 800476a:	4652      	mov	r2, sl
 800476c:	7013      	strb	r3, [r2, #0]
		TIM15->PSC = 47;
 800476e:	222f      	movs	r2, #47	; 0x2f
 8004770:	4b19      	ldr	r3, [pc, #100]	; (80047d8 <detectInput+0x168>)
		HAL_TIM_Base_Stop(&htim16);
 8004772:	481a      	ldr	r0, [pc, #104]	; (80047dc <detectInput+0x16c>)
		TIM15->PSC = 47;
 8004774:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_TIM_Base_Stop(&htim16);
 8004776:	f7fd f997 	bl	8001aa8 <HAL_TIM_Base_Stop>
		IC_buffer_size = 6;
 800477a:	2306      	movs	r3, #6
 800477c:	602b      	str	r3, [r5, #0]
	if (smallestnumber == 0){
 800477e:	465b      	mov	r3, fp
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d0cd      	beq.n	8004722 <detectInput+0xb2>
		inputSet = 1;
 8004786:	2201      	movs	r2, #1
 8004788:	4b10      	ldr	r3, [pc, #64]	; (80047cc <detectInput+0x15c>)
		HAL_Delay(50);
 800478a:	2032      	movs	r0, #50	; 0x32
		inputSet = 1;
 800478c:	701a      	strb	r2, [r3, #0]
		HAL_Delay(50);
 800478e:	f7fb fe61 	bl	8000454 <HAL_Delay>
 8004792:	e7c8      	b.n	8004726 <detectInput+0xb6>
 8004794:	4d0b      	ldr	r5, [pc, #44]	; (80047c4 <detectInput+0x154>)
 8004796:	e7e7      	b.n	8004768 <detectInput+0xf8>
 8004798:	4d0a      	ldr	r5, [pc, #40]	; (80047c4 <detectInput+0x154>)
 800479a:	e7b3      	b.n	8004704 <detectInput+0x94>
 800479c:	20000044 	.word	0x20000044
 80047a0:	00004e20 	.word	0x00004e20
 80047a4:	20000108 	.word	0x20000108
 80047a8:	20000144 	.word	0x20000144
 80047ac:	20000128 	.word	0x20000128
 80047b0:	20000131 	.word	0x20000131
 80047b4:	20000130 	.word	0x20000130
 80047b8:	20000150 	.word	0x20000150
 80047bc:	20000024 	.word	0x20000024
 80047c0:	20000288 	.word	0x20000288
 80047c4:	20000000 	.word	0x20000000
 80047c8:	40014400 	.word	0x40014400
 80047cc:	20000120 	.word	0x20000120
 80047d0:	20000284 	.word	0x20000284
 80047d4:	200001b0 	.word	0x200001b0
 80047d8:	40014000 	.word	0x40014000
 80047dc:	200004e4 	.word	0x200004e4

080047e0 <computeProshotDMA>:
   if (( total < 800 && total > 600)&& (dma_buffer[0]> 1000)){
 80047e0:	493f      	ldr	r1, [pc, #252]	; (80048e0 <computeProshotDMA+0x100>)
 int total = dma_buffer[1]+ dma_buffer[2] + dma_buffer[3] + dma_buffer[4]+ dma_buffer[5] + dma_buffer[6] + dma_buffer[7];
 80047e2:	4a40      	ldr	r2, [pc, #256]	; (80048e4 <computeProshotDMA+0x104>)
   if (( total < 800 && total > 600)&& (dma_buffer[0]> 1000)){
 80047e4:	468c      	mov	ip, r1
 int total = dma_buffer[1]+ dma_buffer[2] + dma_buffer[3] + dma_buffer[4]+ dma_buffer[5] + dma_buffer[6] + dma_buffer[7];
 80047e6:	6850      	ldr	r0, [r2, #4]
 80047e8:	6893      	ldr	r3, [r2, #8]
   if (( total < 800 && total > 600)&& (dma_buffer[0]> 1000)){
 80047ea:	6911      	ldr	r1, [r2, #16]
 int total = dma_buffer[1]+ dma_buffer[2] + dma_buffer[3] + dma_buffer[4]+ dma_buffer[5] + dma_buffer[6] + dma_buffer[7];
 80047ec:	18c3      	adds	r3, r0, r3
   if (( total < 800 && total > 600)&& (dma_buffer[0]> 1000)){
 80047ee:	4463      	add	r3, ip
 80047f0:	468c      	mov	ip, r1
void computeProshotDMA(){
 80047f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 int total = dma_buffer[1]+ dma_buffer[2] + dma_buffer[3] + dma_buffer[4]+ dma_buffer[5] + dma_buffer[6] + dma_buffer[7];
 80047f4:	68d6      	ldr	r6, [r2, #12]
   if (( total < 800 && total > 600)&& (dma_buffer[0]> 1000)){
 80047f6:	6991      	ldr	r1, [r2, #24]
 80047f8:	199b      	adds	r3, r3, r6
 80047fa:	4463      	add	r3, ip
 80047fc:	468c      	mov	ip, r1
void computeProshotDMA(){
 80047fe:	46c6      	mov	lr, r8
 int total = dma_buffer[1]+ dma_buffer[2] + dma_buffer[3] + dma_buffer[4]+ dma_buffer[5] + dma_buffer[6] + dma_buffer[7];
 8004800:	6955      	ldr	r5, [r2, #20]
 8004802:	69d4      	ldr	r4, [r2, #28]
   if (( total < 800 && total > 600)&& (dma_buffer[0]> 1000)){
 8004804:	195b      	adds	r3, r3, r5
 8004806:	4463      	add	r3, ip
 8004808:	191b      	adds	r3, r3, r4
void computeProshotDMA(){
 800480a:	b500      	push	{lr}
   if (( total < 800 && total > 600)&& (dma_buffer[0]> 1000)){
 800480c:	2bc6      	cmp	r3, #198	; 0xc6
 800480e:	d84e      	bhi.n	80048ae <computeProshotDMA+0xce>
 8004810:	23fa      	movs	r3, #250	; 0xfa
 8004812:	6812      	ldr	r2, [r2, #0]
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	429a      	cmp	r2, r3
 8004818:	d949      	bls.n	80048ae <computeProshotDMA+0xce>
    propulse[(i-1) / 2] = (dma_buffer[i] - 45) /6;
 800481a:	2106      	movs	r1, #6
 800481c:	382d      	subs	r0, #45	; 0x2d
 800481e:	f7fb fc73 	bl	8000108 <__udivsi3>
 8004822:	4b31      	ldr	r3, [pc, #196]	; (80048e8 <computeProshotDMA+0x108>)
 8004824:	0007      	movs	r7, r0
 8004826:	6018      	str	r0, [r3, #0]
 8004828:	0030      	movs	r0, r6
 800482a:	4698      	mov	r8, r3
 800482c:	2106      	movs	r1, #6
 800482e:	382d      	subs	r0, #45	; 0x2d
 8004830:	f7fb fc6a 	bl	8000108 <__udivsi3>
 8004834:	4643      	mov	r3, r8
 8004836:	0006      	movs	r6, r0
 8004838:	6058      	str	r0, [r3, #4]
 800483a:	0028      	movs	r0, r5
 800483c:	2106      	movs	r1, #6
 800483e:	382d      	subs	r0, #45	; 0x2d
 8004840:	f7fb fc62 	bl	8000108 <__udivsi3>
 8004844:	4643      	mov	r3, r8
 8004846:	0005      	movs	r5, r0
 8004848:	6098      	str	r0, [r3, #8]
 800484a:	0020      	movs	r0, r4
 800484c:	2106      	movs	r1, #6
 800484e:	382d      	subs	r0, #45	; 0x2d
 8004850:	f7fb fc5a 	bl	8000108 <__udivsi3>
 8004854:	4643      	mov	r3, r8
 8004856:	60d8      	str	r0, [r3, #12]
	calcCRC = ((propulse[0]^propulse[1]^propulse[2])<<3
 8004858:	003b      	movs	r3, r7
 800485a:	4073      	eors	r3, r6
 800485c:	406b      	eors	r3, r5
							|(propulse[0]^propulse[1]^propulse[2])<<2
 800485e:	0099      	lsls	r1, r3, #2
	calcCRC = ((propulse[0]^propulse[1]^propulse[2])<<3
 8004860:	00da      	lsls	r2, r3, #3
							|(propulse[0]^propulse[1]^propulse[2])<<2
 8004862:	430a      	orrs	r2, r1
							|(propulse[0]^propulse[1]^propulse[2]));
 8004864:	431a      	orrs	r2, r3
							|(propulse[0]^propulse[1]^propulse[2])<<1
 8004866:	005b      	lsls	r3, r3, #1
							|(propulse[0]^propulse[1]^propulse[2]));
 8004868:	431a      	orrs	r2, r3
	calcCRC = ((propulse[0]^propulse[1]^propulse[2])<<3
 800486a:	4b20      	ldr	r3, [pc, #128]	; (80048ec <computeProshotDMA+0x10c>)
							|(propulse[0]^propulse[1]^propulse[2]));
 800486c:	b2d2      	uxtb	r2, r2
	calcCRC = ((propulse[0]^propulse[1]^propulse[2])<<3
 800486e:	701a      	strb	r2, [r3, #0]
	checkCRC = (propulse[3]<<3 | propulse[3]<<2 | propulse[3]<<1 | propulse[3]);
 8004870:	0081      	lsls	r1, r0, #2
 8004872:	00c3      	lsls	r3, r0, #3
 8004874:	430b      	orrs	r3, r1
 8004876:	4303      	orrs	r3, r0
 8004878:	0040      	lsls	r0, r0, #1
 800487a:	4318      	orrs	r0, r3
 800487c:	4b1c      	ldr	r3, [pc, #112]	; (80048f0 <computeProshotDMA+0x110>)
 800487e:	b2c0      	uxtb	r0, r0
 8004880:	7018      	strb	r0, [r3, #0]
    if ( checkCRC == calcCRC){
 8004882:	4282      	cmp	r2, r0
 8004884:	d023      	beq.n	80048ce <computeProshotDMA+0xee>
 8004886:	4b1b      	ldr	r3, [pc, #108]	; (80048f4 <computeProshotDMA+0x114>)
 8004888:	681d      	ldr	r5, [r3, #0]
    if (tocheck > 47 && tocheck < 2048){
 800488a:	002b      	movs	r3, r5
 800488c:	4a1a      	ldr	r2, [pc, #104]	; (80048f8 <computeProshotDMA+0x118>)
 800488e:	3b30      	subs	r3, #48	; 0x30
 8004890:	4293      	cmp	r3, r2
 8004892:	d916      	bls.n	80048c2 <computeProshotDMA+0xe2>
    			}else if (tocheck > 1 && tocheck < 48 && input == 0){
 8004894:	1eab      	subs	r3, r5, #2
 8004896:	2b2d      	cmp	r3, #45	; 0x2d
 8004898:	d90c      	bls.n	80048b4 <computeProshotDMA+0xd4>
    				commandcount++;
 800489a:	4a18      	ldr	r2, [pc, #96]	; (80048fc <computeProshotDMA+0x11c>)
 800489c:	6813      	ldr	r3, [r2, #0]
 800489e:	3301      	adds	r3, #1
 80048a0:	6013      	str	r3, [r2, #0]
    				if (commandcount > 1){
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	dd03      	ble.n	80048ae <computeProshotDMA+0xce>
    				newinput = tocheck ;
 80048a6:	4b16      	ldr	r3, [pc, #88]	; (8004900 <computeProshotDMA+0x120>)
 80048a8:	601d      	str	r5, [r3, #0]
    			    commandcount = 0;
 80048aa:	2300      	movs	r3, #0
 80048ac:	6013      	str	r3, [r2, #0]
}
 80048ae:	bc04      	pop	{r2}
 80048b0:	4690      	mov	r8, r2
 80048b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    			}else if (tocheck > 1 && tocheck < 48 && input == 0){
 80048b4:	4b13      	ldr	r3, [pc, #76]	; (8004904 <computeProshotDMA+0x124>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1ee      	bne.n	800489a <computeProshotDMA+0xba>
    					dshotcommand = tocheck ;
 80048bc:	4b12      	ldr	r3, [pc, #72]	; (8004908 <computeProshotDMA+0x128>)
 80048be:	601d      	str	r5, [r3, #0]
 80048c0:	e7f5      	b.n	80048ae <computeProshotDMA+0xce>
    				commandcount = 0;
 80048c2:	2200      	movs	r2, #0
    	newinput = tocheck ;
 80048c4:	4b0e      	ldr	r3, [pc, #56]	; (8004900 <computeProshotDMA+0x120>)
 80048c6:	601d      	str	r5, [r3, #0]
    				commandcount = 0;
 80048c8:	4b0c      	ldr	r3, [pc, #48]	; (80048fc <computeProshotDMA+0x11c>)
 80048ca:	601a      	str	r2, [r3, #0]
 80048cc:	e7ef      	b.n	80048ae <computeProshotDMA+0xce>
    	tocheck = ((propulse[0]<<7 | propulse[1]<<3 | propulse[2]>>1));
 80048ce:	01ff      	lsls	r7, r7, #7
 80048d0:	00f6      	lsls	r6, r6, #3
 80048d2:	433e      	orrs	r6, r7
 80048d4:	106d      	asrs	r5, r5, #1
 80048d6:	4b07      	ldr	r3, [pc, #28]	; (80048f4 <computeProshotDMA+0x114>)
 80048d8:	4335      	orrs	r5, r6
 80048da:	601d      	str	r5, [r3, #0]
 80048dc:	e7d5      	b.n	800488a <computeProshotDMA+0xaa>
 80048de:	46c0      	nop			; (mov r8, r8)
 80048e0:	fffffda7 	.word	0xfffffda7
 80048e4:	20000284 	.word	0x20000284
 80048e8:	20000134 	.word	0x20000134
 80048ec:	200001f0 	.word	0x200001f0
 80048f0:	20000204 	.word	0x20000204
 80048f4:	20000174 	.word	0x20000174
 80048f8:	000007cf 	.word	0x000007cf
 80048fc:	200000b0 	.word	0x200000b0
 8004900:	2000012c 	.word	0x2000012c
 8004904:	2000011c 	.word	0x2000011c
 8004908:	2000010c 	.word	0x2000010c

0800490c <computeServoInput>:



void computeServoInput(){

	if ( dma_buffer[1] < 2000 && dma_buffer[1] > 1000){
 800490c:	4b27      	ldr	r3, [pc, #156]	; (80049ac <computeServoInput+0xa0>)
 800490e:	4a28      	ldr	r2, [pc, #160]	; (80049b0 <computeServoInput+0xa4>)
 8004910:	6858      	ldr	r0, [r3, #4]
void computeServoInput(){
 8004912:	b510      	push	{r4, lr}
	if ( dma_buffer[1] < 2000 && dma_buffer[1] > 1000){
 8004914:	1881      	adds	r1, r0, r2
 8004916:	4a27      	ldr	r2, [pc, #156]	; (80049b4 <computeServoInput+0xa8>)
		if(dma_buffer[2]< 1000 || dma_buffer[2] > 2500){
 8004918:	689b      	ldr	r3, [r3, #8]
	if ( dma_buffer[1] < 2000 && dma_buffer[1] > 1000){
 800491a:	4291      	cmp	r1, r2
 800491c:	d813      	bhi.n	8004946 <computeServoInput+0x3a>
		if(dma_buffer[2]< 1000 || dma_buffer[2] > 2500){
 800491e:	4a26      	ldr	r2, [pc, #152]	; (80049b8 <computeServoInput+0xac>)
 8004920:	4694      	mov	ip, r2
 8004922:	4a26      	ldr	r2, [pc, #152]	; (80049bc <computeServoInput+0xb0>)
 8004924:	4463      	add	r3, ip
 8004926:	4293      	cmp	r3, r2
 8004928:	d821      	bhi.n	800496e <computeServoInput+0x62>
 800492a:	4b25      	ldr	r3, [pc, #148]	; (80049c0 <computeServoInput+0xb4>)
		servorawinput = map(dma_buffer[2], 1100,2000,0,2000);
		}
	}


	if (servorawinput - newinput > max_servo_deviation){
 800492c:	4925      	ldr	r1, [pc, #148]	; (80049c4 <computeServoInput+0xb8>)
 800492e:	4a26      	ldr	r2, [pc, #152]	; (80049c8 <computeServoInput+0xbc>)
 8004930:	6818      	ldr	r0, [r3, #0]
 8004932:	6812      	ldr	r2, [r2, #0]
 8004934:	680b      	ldr	r3, [r1, #0]
 8004936:	1ac4      	subs	r4, r0, r3
 8004938:	4294      	cmp	r4, r2
 800493a:	dc2e      	bgt.n	800499a <computeServoInput+0x8e>
		newinput += max_servo_deviation;
	}else if(newinput - servorawinput > max_servo_deviation){
 800493c:	1a1c      	subs	r4, r3, r0
 800493e:	42a2      	cmp	r2, r4
 8004940:	db2e      	blt.n	80049a0 <computeServoInput+0x94>
		newinput -= max_servo_deviation;
	}else{
		newinput = servorawinput;
 8004942:	6008      	str	r0, [r1, #0]
//			break;
//		}
////		lastnumber = dma_buffer[j];
//	}

}
 8004944:	bd10      	pop	{r4, pc}
	}else if( dma_buffer[2] < 2000 && dma_buffer[2] > 1000) {
 8004946:	491a      	ldr	r1, [pc, #104]	; (80049b0 <computeServoInput+0xa4>)
 8004948:	1859      	adds	r1, r3, r1
 800494a:	4291      	cmp	r1, r2
 800494c:	d8ed      	bhi.n	800492a <computeServoInput+0x1e>
		if(dma_buffer[1]< 1000 || dma_buffer[1] > 2500){
 800494e:	4a1a      	ldr	r2, [pc, #104]	; (80049b8 <computeServoInput+0xac>)
 8004950:	4694      	mov	ip, r2
 8004952:	4a1a      	ldr	r2, [pc, #104]	; (80049bc <computeServoInput+0xb0>)
 8004954:	4460      	add	r0, ip
 8004956:	4290      	cmp	r0, r2
 8004958:	d9e7      	bls.n	800492a <computeServoInput+0x1e>
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800495a:	4a1c      	ldr	r2, [pc, #112]	; (80049cc <computeServoInput+0xc0>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d200      	bcs.n	8004962 <computeServoInput+0x56>
 8004960:	0013      	movs	r3, r2
 8004962:	4a1b      	ldr	r2, [pc, #108]	; (80049d0 <computeServoInput+0xc4>)
 8004964:	20fa      	movs	r0, #250	; 0xfa
 8004966:	4694      	mov	ip, r2
 8004968:	00c0      	lsls	r0, r0, #3
 800496a:	4463      	add	r3, ip
 800496c:	e007      	b.n	800497e <computeServoInput+0x72>
 800496e:	4b17      	ldr	r3, [pc, #92]	; (80049cc <computeServoInput+0xc0>)
 8004970:	4298      	cmp	r0, r3
 8004972:	d318      	bcc.n	80049a6 <computeServoInput+0x9a>
 8004974:	4b16      	ldr	r3, [pc, #88]	; (80049d0 <computeServoInput+0xc4>)
 8004976:	469c      	mov	ip, r3
 8004978:	23fa      	movs	r3, #250	; 0xfa
 800497a:	4460      	add	r0, ip
 800497c:	00db      	lsls	r3, r3, #3
 800497e:	21e1      	movs	r1, #225	; 0xe1
 8004980:	4358      	muls	r0, r3
 8004982:	0089      	lsls	r1, r1, #2
 8004984:	f7fb fc4a 	bl	800021c <__divsi3>
		servorawinput = map(dma_buffer[2], 1100,2000,0,2000);
 8004988:	4b0d      	ldr	r3, [pc, #52]	; (80049c0 <computeServoInput+0xb4>)
	if (servorawinput - newinput > max_servo_deviation){
 800498a:	490e      	ldr	r1, [pc, #56]	; (80049c4 <computeServoInput+0xb8>)
 800498c:	4a0e      	ldr	r2, [pc, #56]	; (80049c8 <computeServoInput+0xbc>)
		servorawinput = map(dma_buffer[2], 1100,2000,0,2000);
 800498e:	6018      	str	r0, [r3, #0]
	if (servorawinput - newinput > max_servo_deviation){
 8004990:	6812      	ldr	r2, [r2, #0]
 8004992:	680b      	ldr	r3, [r1, #0]
 8004994:	1ac4      	subs	r4, r0, r3
 8004996:	4294      	cmp	r4, r2
 8004998:	ddd0      	ble.n	800493c <computeServoInput+0x30>
		newinput += max_servo_deviation;
 800499a:	189b      	adds	r3, r3, r2
 800499c:	600b      	str	r3, [r1, #0]
 800499e:	e7d1      	b.n	8004944 <computeServoInput+0x38>
		newinput -= max_servo_deviation;
 80049a0:	1a9b      	subs	r3, r3, r2
 80049a2:	600b      	str	r3, [r1, #0]
 80049a4:	e7ce      	b.n	8004944 <computeServoInput+0x38>
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80049a6:	0018      	movs	r0, r3
 80049a8:	e7e4      	b.n	8004974 <computeServoInput+0x68>
 80049aa:	46c0      	nop			; (mov r8, r8)
 80049ac:	20000284 	.word	0x20000284
 80049b0:	fffffc17 	.word	0xfffffc17
 80049b4:	000003e6 	.word	0x000003e6
 80049b8:	fffffc18 	.word	0xfffffc18
 80049bc:	000005dc 	.word	0x000005dc
 80049c0:	20000154 	.word	0x20000154
 80049c4:	2000012c 	.word	0x2000012c
 80049c8:	2000002c 	.word	0x2000002c
 80049cc:	0000044c 	.word	0x0000044c
 80049d0:	fffffbb4 	.word	0xfffffbb4

080049d4 <transferComplete>:
//}

void transferComplete(){

//	compit = 0;
	signaltimeout = 0;
 80049d4:	2200      	movs	r2, #0
void transferComplete(){
 80049d6:	b510      	push	{r4, lr}
	signaltimeout = 0;
 80049d8:	4b50      	ldr	r3, [pc, #320]	; (8004b1c <transferComplete+0x148>)
 80049da:	601a      	str	r2, [r3, #0]
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);


	if (inputSet == 1){
 80049dc:	4b50      	ldr	r3, [pc, #320]	; (8004b20 <transferComplete+0x14c>)
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d000      	beq.n	80049e6 <transferComplete+0x12>

		}
	}


}
 80049e4:	bd10      	pop	{r4, pc}
		if (dshot == 1){
 80049e6:	4b4f      	ldr	r3, [pc, #316]	; (8004b24 <transferComplete+0x150>)
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d043      	beq.n	8004a76 <transferComplete+0xa2>
		if (proshot == 1){
 80049ee:	4b4e      	ldr	r3, [pc, #312]	; (8004b28 <transferComplete+0x154>)
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d053      	beq.n	8004a9e <transferComplete+0xca>
		if  (servoPwm == 1){
 80049f6:	4b4d      	ldr	r3, [pc, #308]	; (8004b2c <transferComplete+0x158>)
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d043      	beq.n	8004a86 <transferComplete+0xb2>
		if  (multishot){
 80049fe:	4b4c      	ldr	r3, [pc, #304]	; (8004b30 <transferComplete+0x15c>)
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d127      	bne.n	8004a56 <transferComplete+0x82>
		if  (oneshot125){
 8004a06:	4b4b      	ldr	r3, [pc, #300]	; (8004b34 <transferComplete+0x160>)
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d113      	bne.n	8004a36 <transferComplete+0x62>
		if  (oneshot42){
 8004a0e:	4b4a      	ldr	r3, [pc, #296]	; (8004b38 <transferComplete+0x164>)
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d0e6      	beq.n	80049e4 <transferComplete+0x10>
	int lastnumber = dma_buffer[0];
 8004a16:	4c49      	ldr	r4, [pc, #292]	; (8004b3c <transferComplete+0x168>)
		if(((dma_buffer[j] - lastnumber) < 4500) && ((dma_buffer[j] - lastnumber) > 0)){ // blank space
 8004a18:	4849      	ldr	r0, [pc, #292]	; (8004b40 <transferComplete+0x16c>)
	int lastnumber = dma_buffer[0];
 8004a1a:	6823      	ldr	r3, [r4, #0]
		if(((dma_buffer[j] - lastnumber) < 4500) && ((dma_buffer[j] - lastnumber) > 0)){ // blank space
 8004a1c:	6862      	ldr	r2, [r4, #4]
 8004a1e:	1ad1      	subs	r1, r2, r3
 8004a20:	4281      	cmp	r1, r0
 8004a22:	d801      	bhi.n	8004a28 <transferComplete+0x54>
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d13d      	bne.n	8004aa4 <transferComplete+0xd0>
			HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , 3);
 8004a28:	2303      	movs	r3, #3
 8004a2a:	0022      	movs	r2, r4
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	4845      	ldr	r0, [pc, #276]	; (8004b44 <transferComplete+0x170>)
 8004a30:	f7fd f9c0 	bl	8001db4 <HAL_TIM_IC_Start_DMA>
}
 8004a34:	e7d6      	b.n	80049e4 <transferComplete+0x10>
	int lastnumber = dma_buffer[0];
 8004a36:	4c41      	ldr	r4, [pc, #260]	; (8004b3c <transferComplete+0x168>)
		if(((dma_buffer[j] - lastnumber) < 12300) && ((dma_buffer[j] - lastnumber) > 0)){ // blank space
 8004a38:	4843      	ldr	r0, [pc, #268]	; (8004b48 <transferComplete+0x174>)
	int lastnumber = dma_buffer[0];
 8004a3a:	6822      	ldr	r2, [r4, #0]
		if(((dma_buffer[j] - lastnumber) < 12300) && ((dma_buffer[j] - lastnumber) > 0)){ // blank space
 8004a3c:	6863      	ldr	r3, [r4, #4]
 8004a3e:	1a99      	subs	r1, r3, r2
 8004a40:	4281      	cmp	r1, r0
 8004a42:	d801      	bhi.n	8004a48 <transferComplete+0x74>
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d154      	bne.n	8004af2 <transferComplete+0x11e>
			HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , 3);
 8004a48:	2303      	movs	r3, #3
 8004a4a:	0022      	movs	r2, r4
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	483d      	ldr	r0, [pc, #244]	; (8004b44 <transferComplete+0x170>)
 8004a50:	f7fd f9b0 	bl	8001db4 <HAL_TIM_IC_Start_DMA>
 8004a54:	e7db      	b.n	8004a0e <transferComplete+0x3a>
	int lastnumber = dma_buffer[0];
 8004a56:	4c39      	ldr	r4, [pc, #228]	; (8004b3c <transferComplete+0x168>)
		if(((dma_buffer[j] - lastnumber) < 1500) && ((dma_buffer[j] - lastnumber) > 0)){ // blank space
 8004a58:	483c      	ldr	r0, [pc, #240]	; (8004b4c <transferComplete+0x178>)
	int lastnumber = dma_buffer[0];
 8004a5a:	6822      	ldr	r2, [r4, #0]
		if(((dma_buffer[j] - lastnumber) < 1500) && ((dma_buffer[j] - lastnumber) > 0)){ // blank space
 8004a5c:	6863      	ldr	r3, [r4, #4]
 8004a5e:	1a99      	subs	r1, r3, r2
 8004a60:	4281      	cmp	r1, r0
 8004a62:	d801      	bhi.n	8004a68 <transferComplete+0x94>
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d132      	bne.n	8004ace <transferComplete+0xfa>
			HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , 3);
 8004a68:	2303      	movs	r3, #3
 8004a6a:	0022      	movs	r2, r4
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	4835      	ldr	r0, [pc, #212]	; (8004b44 <transferComplete+0x170>)
 8004a70:	f7fd f9a0 	bl	8001db4 <HAL_TIM_IC_Start_DMA>
 8004a74:	e7c7      	b.n	8004a06 <transferComplete+0x32>
	if (dma_buffer[0] < 1000){
 8004a76:	4a31      	ldr	r2, [pc, #196]	; (8004b3c <transferComplete+0x168>)
 8004a78:	4b35      	ldr	r3, [pc, #212]	; (8004b50 <transferComplete+0x17c>)
 8004a7a:	6812      	ldr	r2, [r2, #0]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d9b6      	bls.n	80049ee <transferComplete+0x1a>
 8004a80:	f7fe fad0 	bl	8003024 <computeDshotDMA.part.1>
 8004a84:	e7b3      	b.n	80049ee <transferComplete+0x1a>
			computeServoInput();
 8004a86:	f7ff ff41 	bl	800490c <computeServoInput>
			TIM15->CNT = 0;
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	4b31      	ldr	r3, [pc, #196]	; (8004b54 <transferComplete+0x180>)
				HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , 3);
 8004a8e:	2100      	movs	r1, #0
			TIM15->CNT = 0;
 8004a90:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , 3);
 8004a92:	482c      	ldr	r0, [pc, #176]	; (8004b44 <transferComplete+0x170>)
 8004a94:	2303      	movs	r3, #3
 8004a96:	4a29      	ldr	r2, [pc, #164]	; (8004b3c <transferComplete+0x168>)
 8004a98:	f7fd f98c 	bl	8001db4 <HAL_TIM_IC_Start_DMA>
 8004a9c:	e7af      	b.n	80049fe <transferComplete+0x2a>
			computeProshotDMA();
 8004a9e:	f7ff fe9f 	bl	80047e0 <computeProshotDMA>
 8004aa2:	e7a8      	b.n	80049f6 <transferComplete+0x22>
	if (x < in_min){
 8004aa4:	4b2c      	ldr	r3, [pc, #176]	; (8004b58 <transferComplete+0x184>)
 8004aa6:	2000      	movs	r0, #0
 8004aa8:	4299      	cmp	r1, r3
 8004aaa:	d90d      	bls.n	8004ac8 <transferComplete+0xf4>
 8004aac:	23fc      	movs	r3, #252	; 0xfc
 8004aae:	011b      	lsls	r3, r3, #4
 8004ab0:	4299      	cmp	r1, r3
 8004ab2:	dd00      	ble.n	8004ab6 <transferComplete+0xe2>
 8004ab4:	0019      	movs	r1, r3
 8004ab6:	4b29      	ldr	r3, [pc, #164]	; (8004b5c <transferComplete+0x188>)
 8004ab8:	20fa      	movs	r0, #250	; 0xfa
 8004aba:	469c      	mov	ip, r3
 8004abc:	00c0      	lsls	r0, r0, #3
 8004abe:	4461      	add	r1, ip
 8004ac0:	4348      	muls	r0, r1
 8004ac2:	4927      	ldr	r1, [pc, #156]	; (8004b60 <transferComplete+0x18c>)
 8004ac4:	f7fb fbaa 	bl	800021c <__divsi3>
			newinput = map((dma_buffer[j] - lastnumber),2020, 4032, 0, 2000);
 8004ac8:	4b26      	ldr	r3, [pc, #152]	; (8004b64 <transferComplete+0x190>)
 8004aca:	6018      	str	r0, [r3, #0]
 8004acc:	e7ac      	b.n	8004a28 <transferComplete+0x54>
	if (x < in_min){
 8004ace:	2000      	movs	r0, #0
 8004ad0:	29f2      	cmp	r1, #242	; 0xf2
 8004ad2:	d90b      	bls.n	8004aec <transferComplete+0x118>
 8004ad4:	2396      	movs	r3, #150	; 0x96
 8004ad6:	00db      	lsls	r3, r3, #3
 8004ad8:	4299      	cmp	r1, r3
 8004ada:	dd00      	ble.n	8004ade <transferComplete+0x10a>
 8004adc:	0019      	movs	r1, r3
 8004ade:	20fa      	movs	r0, #250	; 0xfa
 8004ae0:	39f3      	subs	r1, #243	; 0xf3
 8004ae2:	00c0      	lsls	r0, r0, #3
 8004ae4:	4348      	muls	r0, r1
 8004ae6:	4920      	ldr	r1, [pc, #128]	; (8004b68 <transferComplete+0x194>)
 8004ae8:	f7fb fb98 	bl	800021c <__divsi3>
			newinput = map((dma_buffer[j] - lastnumber),243,1200, 0, 2000);
 8004aec:	4b1d      	ldr	r3, [pc, #116]	; (8004b64 <transferComplete+0x190>)
 8004aee:	6018      	str	r0, [r3, #0]
 8004af0:	e7ba      	b.n	8004a68 <transferComplete+0x94>
	if (x < in_min){
 8004af2:	4b1e      	ldr	r3, [pc, #120]	; (8004b6c <transferComplete+0x198>)
 8004af4:	2000      	movs	r0, #0
 8004af6:	4299      	cmp	r1, r3
 8004af8:	d90c      	bls.n	8004b14 <transferComplete+0x140>
 8004afa:	4b1d      	ldr	r3, [pc, #116]	; (8004b70 <transferComplete+0x19c>)
 8004afc:	4299      	cmp	r1, r3
 8004afe:	dd00      	ble.n	8004b02 <transferComplete+0x12e>
 8004b00:	0019      	movs	r1, r3
 8004b02:	4b1c      	ldr	r3, [pc, #112]	; (8004b74 <transferComplete+0x1a0>)
 8004b04:	20fa      	movs	r0, #250	; 0xfa
 8004b06:	469c      	mov	ip, r3
 8004b08:	00c0      	lsls	r0, r0, #3
 8004b0a:	4461      	add	r1, ip
 8004b0c:	4348      	muls	r0, r1
 8004b0e:	491a      	ldr	r1, [pc, #104]	; (8004b78 <transferComplete+0x1a4>)
 8004b10:	f7fb fb84 	bl	800021c <__divsi3>
			newinput = map((dma_buffer[j] - lastnumber),6500,12000, 0, 2000);
 8004b14:	4b13      	ldr	r3, [pc, #76]	; (8004b64 <transferComplete+0x190>)
 8004b16:	6018      	str	r0, [r3, #0]
 8004b18:	e796      	b.n	8004a48 <transferComplete+0x74>
 8004b1a:	46c0      	nop			; (mov r8, r8)
 8004b1c:	20000158 	.word	0x20000158
 8004b20:	20000120 	.word	0x20000120
 8004b24:	20000108 	.word	0x20000108
 8004b28:	20000144 	.word	0x20000144
 8004b2c:	20000150 	.word	0x20000150
 8004b30:	20000128 	.word	0x20000128
 8004b34:	20000130 	.word	0x20000130
 8004b38:	20000131 	.word	0x20000131
 8004b3c:	20000284 	.word	0x20000284
 8004b40:	00001193 	.word	0x00001193
 8004b44:	200001b0 	.word	0x200001b0
 8004b48:	0000300b 	.word	0x0000300b
 8004b4c:	000005db 	.word	0x000005db
 8004b50:	000003e7 	.word	0x000003e7
 8004b54:	40014000 	.word	0x40014000
 8004b58:	000007e3 	.word	0x000007e3
 8004b5c:	fffff81c 	.word	0xfffff81c
 8004b60:	000007dc 	.word	0x000007dc
 8004b64:	2000012c 	.word	0x2000012c
 8004b68:	000003bd 	.word	0x000003bd
 8004b6c:	00001963 	.word	0x00001963
 8004b70:	00002ee0 	.word	0x00002ee0
 8004b74:	ffffe69c 	.word	0xffffe69c
 8004b78:	0000157c 	.word	0x0000157c

08004b7c <SystemClock_Config>:
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8004b7c:	2210      	movs	r2, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8004b7e:	231a      	movs	r3, #26
{
 8004b80:	b510      	push	{r4, lr}
 8004b82:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8004b84:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8004b86:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004b88:	3b19      	subs	r3, #25
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8004b8a:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8004b8c:	22a0      	movs	r2, #160	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004b8e:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8004b90:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004b92:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004b94:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004b96:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8004b98:	0392      	lsls	r2, r2, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004b9a:	a804      	add	r0, sp, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004b9c:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004b9e:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8004ba0:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8004ba2:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004ba4:	f7fc fbec 	bl	8001380 <HAL_RCC_OscConfig>
 8004ba8:	2800      	cmp	r0, #0
 8004baa:	d000      	beq.n	8004bae <SystemClock_Config+0x32>
 8004bac:	e7fe      	b.n	8004bac <SystemClock_Config+0x30>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004bae:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004bb0:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004bb2:	9003      	str	r0, [sp, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004bb4:	2101      	movs	r1, #1
 8004bb6:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004bb8:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004bba:	9401      	str	r4, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004bbc:	f7fc fe18 	bl	80017f0 <HAL_RCC_ClockConfig>
 8004bc0:	2800      	cmp	r0, #0
 8004bc2:	d000      	beq.n	8004bc6 <SystemClock_Config+0x4a>
 8004bc4:	e7fe      	b.n	8004bc4 <SystemClock_Config+0x48>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8004bc6:	f7fc fee5 	bl	8001994 <HAL_RCC_GetHCLKFreq>
 8004bca:	21fa      	movs	r1, #250	; 0xfa
 8004bcc:	0089      	lsls	r1, r1, #2
 8004bce:	f7fb fa9b 	bl	8000108 <__udivsi3>
 8004bd2:	f7fc f81f 	bl	8000c14 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8004bd6:	2004      	movs	r0, #4
 8004bd8:	f7fc f838 	bl	8000c4c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8004bdc:	2001      	movs	r0, #1
 8004bde:	2200      	movs	r2, #0
 8004be0:	2100      	movs	r1, #0
 8004be2:	4240      	negs	r0, r0
 8004be4:	f7fb ffd8 	bl	8000b98 <HAL_NVIC_SetPriority>
}
 8004be8:	b010      	add	sp, #64	; 0x40
 8004bea:	bd10      	pop	{r4, pc}

08004bec <main>:
{
 8004bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bee:	46de      	mov	lr, fp
 8004bf0:	464e      	mov	r6, r9
 8004bf2:	4645      	mov	r5, r8
 8004bf4:	4657      	mov	r7, sl
 8004bf6:	b5e0      	push	{r5, r6, r7, lr}
 8004bf8:	b09f      	sub	sp, #124	; 0x7c
  HAL_Init();
 8004bfa:	f7fb fc0d 	bl	8000418 <HAL_Init>
  SystemClock_Config();
 8004bfe:	f7ff ffbd 	bl	8004b7c <SystemClock_Config>
  HAL_FLASH_Unlock();
 8004c02:	f7fc f9d7 	bl	8000fb4 <HAL_FLASH_Unlock>
  EE_Init();
 8004c06:	f7fd feb3 	bl	8002970 <EE_Init>
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8004c0a:	2180      	movs	r1, #128	; 0x80
 8004c0c:	4dc3      	ldr	r5, [pc, #780]	; (8004f1c <main+0x330>)
 8004c0e:	0289      	lsls	r1, r1, #10
 8004c10:	696a      	ldr	r2, [r5, #20]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8004c12:	2090      	movs	r0, #144	; 0x90
 8004c14:	430a      	orrs	r2, r1
 8004c16:	616a      	str	r2, [r5, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8004c18:	696b      	ldr	r3, [r5, #20]
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_15);

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004c1a:	2400      	movs	r4, #0
 8004c1c:	400b      	ands	r3, r1
  SET_BIT(RCC->AHBENR, Periphs);
 8004c1e:	2180      	movs	r1, #128	; 0x80
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8004c20:	9308      	str	r3, [sp, #32]
  (void)tmpreg;
 8004c22:	9b08      	ldr	r3, [sp, #32]
  SET_BIT(RCC->AHBENR, Periphs);
 8004c24:	696a      	ldr	r2, [r5, #20]
 8004c26:	02c9      	lsls	r1, r1, #11
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	616a      	str	r2, [r5, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8004c2c:	696b      	ldr	r3, [r5, #20]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004c2e:	2601      	movs	r6, #1
 8004c30:	400b      	ands	r3, r1
 8004c32:	9309      	str	r3, [sp, #36]	; 0x24
  (void)tmpreg;
 8004c34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c36:	2380      	movs	r3, #128	; 0x80
 8004c38:	05c0      	lsls	r0, r0, #23
 8004c3a:	021b      	lsls	r3, r3, #8
 8004c3c:	6283      	str	r3, [r0, #40]	; 0x28
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c3e:	a917      	add	r1, sp, #92	; 0x5c
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8004c40:	9317      	str	r3, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004c42:	9618      	str	r6, [sp, #96]	; 0x60
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004c44:	9419      	str	r4, [sp, #100]	; 0x64
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004c46:	941a      	str	r4, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004c48:	941b      	str	r4, [sp, #108]	; 0x6c
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c4a:	f7fd fe0d 	bl	8002868 <LL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004c4e:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8004c50:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004c52:	4333      	orrs	r3, r6
 8004c54:	616b      	str	r3, [r5, #20]
 8004c56:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8004c58:	2102      	movs	r1, #2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004c5a:	4033      	ands	r3, r6
 8004c5c:	9307      	str	r3, [sp, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8004c5e:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004c60:	9b07      	ldr	r3, [sp, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8004c62:	f7fb ff99 	bl	8000b98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004c66:	2009      	movs	r0, #9
 8004c68:	f7fb ffca 	bl	8000c00 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 2, 0);
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	2102      	movs	r1, #2
 8004c70:	200b      	movs	r0, #11
 8004c72:	f7fb ff91 	bl	8000b98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8004c76:	200b      	movs	r0, #11
 8004c78:	f7fb ffc2 	bl	8000c00 <HAL_NVIC_EnableIRQ>
  hadc.Instance = ADC1;
 8004c7c:	4da8      	ldr	r5, [pc, #672]	; (8004f20 <main+0x334>)
 8004c7e:	4ba9      	ldr	r3, [pc, #676]	; (8004f24 <main+0x338>)
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8004c80:	0028      	movs	r0, r5
  hadc.Instance = ADC1;
 8004c82:	602b      	str	r3, [r5, #0]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004c84:	2308      	movs	r3, #8
 8004c86:	616b      	str	r3, [r5, #20]
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC4;
 8004c88:	3338      	adds	r3, #56	; 0x38
 8004c8a:	62ab      	str	r3, [r5, #40]	; 0x28
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8004c8c:	2380      	movs	r3, #128	; 0x80
 8004c8e:	00db      	lsls	r3, r3, #3
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8004c90:	606c      	str	r4, [r5, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8004c92:	60ac      	str	r4, [r5, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004c94:	60ec      	str	r4, [r5, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8004c96:	612e      	str	r6, [r5, #16]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8004c98:	61ac      	str	r4, [r5, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8004c9a:	61ec      	str	r4, [r5, #28]
  hadc.Init.ContinuousConvMode = DISABLE;
 8004c9c:	622c      	str	r4, [r5, #32]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8004c9e:	626e      	str	r6, [r5, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8004ca0:	62eb      	str	r3, [r5, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = ENABLE;
 8004ca2:	632e      	str	r6, [r5, #48]	; 0x30
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004ca4:	636e      	str	r6, [r5, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8004ca6:	f7fb fc3b 	bl	8000520 <HAL_ADC_Init>
 8004caa:	2800      	cmp	r0, #0
 8004cac:	d000      	beq.n	8004cb0 <main+0xc4>
 8004cae:	e7fe      	b.n	8004cae <main+0xc2>
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8004cb0:	2680      	movs	r6, #128	; 0x80
  sConfig.Channel = ADC_CHANNEL_3;
 8004cb2:	2403      	movs	r4, #3
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8004cb4:	2307      	movs	r3, #7
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8004cb6:	0176      	lsls	r6, r6, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004cb8:	a917      	add	r1, sp, #92	; 0x5c
 8004cba:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_3;
 8004cbc:	9417      	str	r4, [sp, #92]	; 0x5c
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8004cbe:	9618      	str	r6, [sp, #96]	; 0x60
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8004cc0:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004cc2:	f7fb fde1 	bl	8000888 <HAL_ADC_ConfigChannel>
 8004cc6:	2800      	cmp	r0, #0
 8004cc8:	d000      	beq.n	8004ccc <main+0xe0>
 8004cca:	e7fe      	b.n	8004cca <main+0xde>
  sConfig.Channel = ADC_CHANNEL_6;
 8004ccc:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004cce:	a917      	add	r1, sp, #92	; 0x5c
 8004cd0:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_6;
 8004cd2:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004cd4:	f7fb fdd8 	bl	8000888 <HAL_ADC_ConfigChannel>
 8004cd8:	2800      	cmp	r0, #0
 8004cda:	d000      	beq.n	8004cde <main+0xf2>
 8004cdc:	e7fe      	b.n	8004cdc <main+0xf0>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8004cde:	2310      	movs	r3, #16
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004ce0:	a917      	add	r1, sp, #92	; 0x5c
 8004ce2:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8004ce4:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004ce6:	f7fb fdcf 	bl	8000888 <HAL_ADC_ConfigChannel>
 8004cea:	2800      	cmp	r0, #0
 8004cec:	d000      	beq.n	8004cf0 <main+0x104>
 8004cee:	e7fe      	b.n	8004cee <main+0x102>
  hcomp1.Instance = COMP1;
 8004cf0:	4a8d      	ldr	r2, [pc, #564]	; (8004f28 <main+0x33c>)
 8004cf2:	4b8e      	ldr	r3, [pc, #568]	; (8004f2c <main+0x340>)
  hcomp1.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8004cf4:	6090      	str	r0, [r2, #8]
  hcomp1.Instance = COMP1;
 8004cf6:	6013      	str	r3, [r2, #0]
  hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_DAC2;
 8004cf8:	2350      	movs	r3, #80	; 0x50
  hcomp1.Init.Output = COMP_OUTPUT_NONE;
 8004cfa:	60d0      	str	r0, [r2, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8004cfc:	6110      	str	r0, [r2, #16]
  hcomp1.Init.Mode = COMP_MODE_HIGHSPEED;
 8004cfe:	6190      	str	r0, [r2, #24]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8004d00:	61d0      	str	r0, [r2, #28]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8004d02:	0010      	movs	r0, r2
  hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_DAC2;
 8004d04:	6053      	str	r3, [r2, #4]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_LOW;
 8004d06:	6156      	str	r6, [r2, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 8004d08:	6214      	str	r4, [r2, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8004d0a:	f7fb fe47 	bl	800099c <HAL_COMP_Init>
 8004d0e:	2800      	cmp	r0, #0
 8004d10:	d000      	beq.n	8004d14 <main+0x128>
 8004d12:	e7fe      	b.n	8004d12 <main+0x126>
  htim1.Instance = TIM1;
 8004d14:	4c86      	ldr	r4, [pc, #536]	; (8004f30 <main+0x344>)
 8004d16:	4b87      	ldr	r3, [pc, #540]	; (8004f34 <main+0x348>)
  htim1.Init.Prescaler = 0;
 8004d18:	6060      	str	r0, [r4, #4]
  htim1.Instance = TIM1;
 8004d1a:	6023      	str	r3, [r4, #0]
  htim1.Init.Period = 1999;
 8004d1c:	4b86      	ldr	r3, [pc, #536]	; (8004f38 <main+0x34c>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d1e:	60a0      	str	r0, [r4, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d20:	6120      	str	r0, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 8004d22:	6160      	str	r0, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d24:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004d26:	0020      	movs	r0, r4
  htim1.Init.Period = 1999;
 8004d28:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004d2a:	f7fc fe39 	bl	80019a0 <HAL_TIM_Base_Init>
 8004d2e:	2800      	cmp	r0, #0
 8004d30:	d000      	beq.n	8004d34 <main+0x148>
 8004d32:	e7fe      	b.n	8004d32 <main+0x146>
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004d34:	a90c      	add	r1, sp, #48	; 0x30
 8004d36:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d38:	960c      	str	r6, [sp, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004d3a:	f7fd fb0b 	bl	8002354 <HAL_TIM_ConfigClockSource>
 8004d3e:	2800      	cmp	r0, #0
 8004d40:	d000      	beq.n	8004d44 <main+0x158>
 8004d42:	e7fe      	b.n	8004d42 <main+0x156>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004d44:	0020      	movs	r0, r4
 8004d46:	f7fc ff19 	bl	8001b7c <HAL_TIM_PWM_Init>
 8004d4a:	2800      	cmp	r0, #0
 8004d4c:	d000      	beq.n	8004d50 <main+0x164>
 8004d4e:	e7fe      	b.n	8004d4e <main+0x162>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d50:	900a      	str	r0, [sp, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d52:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004d54:	a90a      	add	r1, sp, #40	; 0x28
 8004d56:	0020      	movs	r0, r4
 8004d58:	f7fd fd26 	bl	80027a8 <HAL_TIMEx_MasterConfigSynchronization>
 8004d5c:	2800      	cmp	r0, #0
 8004d5e:	d000      	beq.n	8004d62 <main+0x176>
 8004d60:	e7fe      	b.n	8004d60 <main+0x174>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004d62:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 8004d64:	9011      	str	r0, [sp, #68]	; 0x44
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d66:	9012      	str	r0, [sp, #72]	; 0x48
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004d68:	9013      	str	r0, [sp, #76]	; 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004d6a:	9014      	str	r0, [sp, #80]	; 0x50
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004d6c:	9015      	str	r0, [sp, #84]	; 0x54
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004d6e:	9016      	str	r0, [sp, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004d70:	2200      	movs	r2, #0
 8004d72:	a910      	add	r1, sp, #64	; 0x40
 8004d74:	0020      	movs	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004d76:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004d78:	f7fd f9b6 	bl	80020e8 <HAL_TIM_PWM_ConfigChannel>
 8004d7c:	2800      	cmp	r0, #0
 8004d7e:	d000      	beq.n	8004d82 <main+0x196>
 8004d80:	e7fe      	b.n	8004d80 <main+0x194>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004d82:	2204      	movs	r2, #4
 8004d84:	a910      	add	r1, sp, #64	; 0x40
 8004d86:	0020      	movs	r0, r4
 8004d88:	f7fd f9ae 	bl	80020e8 <HAL_TIM_PWM_ConfigChannel>
 8004d8c:	2800      	cmp	r0, #0
 8004d8e:	d000      	beq.n	8004d92 <main+0x1a6>
 8004d90:	e7fe      	b.n	8004d90 <main+0x1a4>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004d92:	2208      	movs	r2, #8
 8004d94:	a910      	add	r1, sp, #64	; 0x40
 8004d96:	0020      	movs	r0, r4
 8004d98:	f7fd f9a6 	bl	80020e8 <HAL_TIM_PWM_ConfigChannel>
 8004d9c:	2800      	cmp	r0, #0
 8004d9e:	d000      	beq.n	8004da2 <main+0x1b6>
 8004da0:	e7fe      	b.n	8004da0 <main+0x1b4>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004da2:	220c      	movs	r2, #12
 8004da4:	a910      	add	r1, sp, #64	; 0x40
 8004da6:	0020      	movs	r0, r4
 8004da8:	f7fd f99e 	bl	80020e8 <HAL_TIM_PWM_ConfigChannel>
 8004dac:	2800      	cmp	r0, #0
 8004dae:	d000      	beq.n	8004db2 <main+0x1c6>
 8004db0:	e7fe      	b.n	8004db0 <main+0x1c4>
  sBreakDeadTimeConfig.DeadTime = 60;
 8004db2:	233c      	movs	r3, #60	; 0x3c
 8004db4:	931a      	str	r3, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004db6:	2380      	movs	r3, #128	; 0x80
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004db8:	9017      	str	r0, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004dba:	9018      	str	r0, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004dbc:	9019      	str	r0, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004dbe:	901b      	str	r0, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004dc0:	019b      	lsls	r3, r3, #6
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004dc2:	901d      	str	r0, [sp, #116]	; 0x74
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004dc4:	a917      	add	r1, sp, #92	; 0x5c
 8004dc6:	0020      	movs	r0, r4
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004dc8:	931c      	str	r3, [sp, #112]	; 0x70
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004dca:	f7fd fd0d 	bl	80027e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8004dce:	1e07      	subs	r7, r0, #0
 8004dd0:	d000      	beq.n	8004dd4 <main+0x1e8>
 8004dd2:	e7fe      	b.n	8004dd2 <main+0x1e6>
  HAL_TIM_MspPostInit(&htim1);
 8004dd4:	0020      	movs	r0, r4
 8004dd6:	f000 fdd9 	bl	800598c <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 8004dda:	2380      	movs	r3, #128	; 0x80
 8004ddc:	4e57      	ldr	r6, [pc, #348]	; (8004f3c <main+0x350>)
 8004dde:	05db      	lsls	r3, r3, #23
 8004de0:	6033      	str	r3, [r6, #0]
  htim2.Init.Prescaler = 100;
 8004de2:	2364      	movs	r3, #100	; 0x64
 8004de4:	6073      	str	r3, [r6, #4]
  htim2.Init.Period = 5000;
 8004de6:	4b56      	ldr	r3, [pc, #344]	; (8004f40 <main+0x354>)
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004de8:	0030      	movs	r0, r6
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004dea:	60b7      	str	r7, [r6, #8]
  htim2.Init.Period = 5000;
 8004dec:	60f3      	str	r3, [r6, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004dee:	6137      	str	r7, [r6, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004df0:	61b7      	str	r7, [r6, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004df2:	f7fc fdd5 	bl	80019a0 <HAL_TIM_Base_Init>
 8004df6:	2800      	cmp	r0, #0
 8004df8:	d000      	beq.n	8004dfc <main+0x210>
 8004dfa:	e7fe      	b.n	8004dfa <main+0x20e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004dfc:	2780      	movs	r7, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004dfe:	a917      	add	r1, sp, #92	; 0x5c
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004e00:	017f      	lsls	r7, r7, #5
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004e02:	0030      	movs	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004e04:	9717      	str	r7, [sp, #92]	; 0x5c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004e06:	f7fd faa5 	bl	8002354 <HAL_TIM_ConfigClockSource>
 8004e0a:	2800      	cmp	r0, #0
 8004e0c:	d000      	beq.n	8004e10 <main+0x224>
 8004e0e:	e7fe      	b.n	8004e0e <main+0x222>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e10:	9010      	str	r0, [sp, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e12:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004e14:	a910      	add	r1, sp, #64	; 0x40
 8004e16:	0030      	movs	r0, r6
 8004e18:	f7fd fcc6 	bl	80027a8 <HAL_TIMEx_MasterConfigSynchronization>
 8004e1c:	2800      	cmp	r0, #0
 8004e1e:	d000      	beq.n	8004e22 <main+0x236>
 8004e20:	e7fe      	b.n	8004e20 <main+0x234>
  htim3.Instance = TIM3;
 8004e22:	4e48      	ldr	r6, [pc, #288]	; (8004f44 <main+0x358>)
 8004e24:	4b48      	ldr	r3, [pc, #288]	; (8004f48 <main+0x35c>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e26:	60b0      	str	r0, [r6, #8]
  htim3.Instance = TIM3;
 8004e28:	6033      	str	r3, [r6, #0]
  htim3.Init.Prescaler = 10;
 8004e2a:	230a      	movs	r3, #10
 8004e2c:	6073      	str	r3, [r6, #4]
  htim3.Init.Period = 65535;
 8004e2e:	4b47      	ldr	r3, [pc, #284]	; (8004f4c <main+0x360>)
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e30:	6130      	str	r0, [r6, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e32:	61b0      	str	r0, [r6, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004e34:	0030      	movs	r0, r6
  htim3.Init.Period = 65535;
 8004e36:	60f3      	str	r3, [r6, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004e38:	f7fc fdb2 	bl	80019a0 <HAL_TIM_Base_Init>
 8004e3c:	2800      	cmp	r0, #0
 8004e3e:	d000      	beq.n	8004e42 <main+0x256>
 8004e40:	e7fe      	b.n	8004e40 <main+0x254>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004e42:	a917      	add	r1, sp, #92	; 0x5c
 8004e44:	0030      	movs	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004e46:	9717      	str	r7, [sp, #92]	; 0x5c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004e48:	f7fd fa84 	bl	8002354 <HAL_TIM_ConfigClockSource>
 8004e4c:	2800      	cmp	r0, #0
 8004e4e:	d000      	beq.n	8004e52 <main+0x266>
 8004e50:	e7fe      	b.n	8004e50 <main+0x264>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e52:	9010      	str	r0, [sp, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e54:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004e56:	a910      	add	r1, sp, #64	; 0x40
 8004e58:	0030      	movs	r0, r6
 8004e5a:	f7fd fca5 	bl	80027a8 <HAL_TIMEx_MasterConfigSynchronization>
 8004e5e:	2800      	cmp	r0, #0
 8004e60:	d000      	beq.n	8004e64 <main+0x278>
 8004e62:	e7fe      	b.n	8004e62 <main+0x276>
  htim15.Instance = TIM15;
 8004e64:	4a3a      	ldr	r2, [pc, #232]	; (8004f50 <main+0x364>)
 8004e66:	4b3b      	ldr	r3, [pc, #236]	; (8004f54 <main+0x368>)
  htim15.Init.Period = 0xffff;
 8004e68:	4939      	ldr	r1, [pc, #228]	; (8004f50 <main+0x364>)
  htim15.Instance = TIM15;
 8004e6a:	6013      	str	r3, [r2, #0]
  htim15.Init.Prescaler = 0;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	6053      	str	r3, [r2, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e70:	6093      	str	r3, [r2, #8]
  htim15.Init.Period = 0xffff;
 8004e72:	4a36      	ldr	r2, [pc, #216]	; (8004f4c <main+0x360>)
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8004e74:	0008      	movs	r0, r1
  htim15.Init.Period = 0xffff;
 8004e76:	60ca      	str	r2, [r1, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e78:	610b      	str	r3, [r1, #16]
  htim15.Init.RepetitionCounter = 0;
 8004e7a:	614b      	str	r3, [r1, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e7c:	618b      	str	r3, [r1, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8004e7e:	f7fc fd8f 	bl	80019a0 <HAL_TIM_Base_Init>
 8004e82:	2800      	cmp	r0, #0
 8004e84:	d000      	beq.n	8004e88 <main+0x29c>
 8004e86:	e7fe      	b.n	8004e86 <main+0x29a>
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8004e88:	4831      	ldr	r0, [pc, #196]	; (8004f50 <main+0x364>)
 8004e8a:	f7fc ff1b 	bl	8001cc4 <HAL_TIM_IC_Init>
 8004e8e:	2800      	cmp	r0, #0
 8004e90:	d000      	beq.n	8004e94 <main+0x2a8>
 8004e92:	e7fe      	b.n	8004e92 <main+0x2a6>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8004e94:	2304      	movs	r3, #4
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8004e96:	270a      	movs	r7, #10
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8004e98:	9317      	str	r3, [sp, #92]	; 0x5c
  sSlaveConfig.TriggerFilter = 0;
 8004e9a:	901b      	str	r0, [sp, #108]	; 0x6c
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8004e9c:	334c      	adds	r3, #76	; 0x4c
  if (HAL_TIM_SlaveConfigSynchronization(&htim15, &sSlaveConfig) != HAL_OK)
 8004e9e:	a917      	add	r1, sp, #92	; 0x5c
 8004ea0:	482b      	ldr	r0, [pc, #172]	; (8004f50 <main+0x364>)
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8004ea2:	9318      	str	r3, [sp, #96]	; 0x60
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8004ea4:	9719      	str	r7, [sp, #100]	; 0x64
  if (HAL_TIM_SlaveConfigSynchronization(&htim15, &sSlaveConfig) != HAL_OK)
 8004ea6:	f7fd fb19 	bl	80024dc <HAL_TIM_SlaveConfigSynchronization>
 8004eaa:	2800      	cmp	r0, #0
 8004eac:	d000      	beq.n	8004eb0 <main+0x2c4>
 8004eae:	e7fe      	b.n	8004eae <main+0x2c2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004eb0:	900c      	str	r0, [sp, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004eb2:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8004eb4:	a90c      	add	r1, sp, #48	; 0x30
 8004eb6:	4826      	ldr	r0, [pc, #152]	; (8004f50 <main+0x364>)
 8004eb8:	f7fd fc76 	bl	80027a8 <HAL_TIMEx_MasterConfigSynchronization>
 8004ebc:	2800      	cmp	r0, #0
 8004ebe:	d000      	beq.n	8004ec2 <main+0x2d6>
 8004ec0:	e7fe      	b.n	8004ec0 <main+0x2d4>
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004ec2:	2301      	movs	r3, #1
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004ec4:	9012      	str	r0, [sp, #72]	; 0x48
  sConfigIC.ICFilter = 0;
 8004ec6:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004ec8:	2200      	movs	r2, #0
 8004eca:	a910      	add	r1, sp, #64	; 0x40
 8004ecc:	4820      	ldr	r0, [pc, #128]	; (8004f50 <main+0x364>)
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8004ece:	9710      	str	r7, [sp, #64]	; 0x40
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004ed0:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004ed2:	f7fd f82b 	bl	8001f2c <HAL_TIM_IC_ConfigChannel>
 8004ed6:	2800      	cmp	r0, #0
 8004ed8:	d000      	beq.n	8004edc <main+0x2f0>
 8004eda:	e7fe      	b.n	8004eda <main+0x2ee>
	hiwdg.Instance = IWDG;
 8004edc:	4a1e      	ldr	r2, [pc, #120]	; (8004f58 <main+0x36c>)
 8004ede:	4b1f      	ldr	r3, [pc, #124]	; (8004f5c <main+0x370>)
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8004ee0:	0010      	movs	r0, r2
	hiwdg.Instance = IWDG;
 8004ee2:	6013      	str	r3, [r2, #0]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_16;
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	6053      	str	r3, [r2, #4]
	hiwdg.Init.Window = IWDG_WINDOW_DISABLE;
 8004ee8:	4b1d      	ldr	r3, [pc, #116]	; (8004f60 <main+0x374>)
 8004eea:	60d3      	str	r3, [r2, #12]
	hiwdg.Init.Reload = 2000;
 8004eec:	23fa      	movs	r3, #250	; 0xfa
 8004eee:	00db      	lsls	r3, r3, #3
 8004ef0:	6093      	str	r3, [r2, #8]
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8004ef2:	f7fc fa0f 	bl	8001314 <HAL_IWDG_Init>
 8004ef6:	2800      	cmp	r0, #0
 8004ef8:	d000      	beq.n	8004efc <main+0x310>
 8004efa:	e7fe      	b.n	8004efa <main+0x30e>
  htim16.Instance = TIM16;
 8004efc:	4a19      	ldr	r2, [pc, #100]	; (8004f64 <main+0x378>)
 8004efe:	4b1a      	ldr	r3, [pc, #104]	; (8004f68 <main+0x37c>)
  htim16.Init.Prescaler = 0;
 8004f00:	6050      	str	r0, [r2, #4]
  htim16.Instance = TIM16;
 8004f02:	6013      	str	r3, [r2, #0]
  htim16.Init.Period = 9000;
 8004f04:	4b19      	ldr	r3, [pc, #100]	; (8004f6c <main+0x380>)
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f06:	6090      	str	r0, [r2, #8]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f08:	6110      	str	r0, [r2, #16]
  htim16.Init.RepetitionCounter = 0;
 8004f0a:	6150      	str	r0, [r2, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f0c:	6190      	str	r0, [r2, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8004f0e:	0010      	movs	r0, r2
  htim16.Init.Period = 9000;
 8004f10:	60d3      	str	r3, [r2, #12]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8004f12:	f7fc fd45 	bl	80019a0 <HAL_TIM_Base_Init>
 8004f16:	2800      	cmp	r0, #0
 8004f18:	d02a      	beq.n	8004f70 <main+0x384>
 8004f1a:	e7fe      	b.n	8004f1a <main+0x32e>
 8004f1c:	40021000 	.word	0x40021000
 8004f20:	20000498 	.word	0x20000498
 8004f24:	40012400 	.word	0x40012400
 8004f28:	20000210 	.word	0x20000210
 8004f2c:	4001001c 	.word	0x4001001c
 8004f30:	200003cc 	.word	0x200003cc
 8004f34:	40012c00 	.word	0x40012c00
 8004f38:	000007cf 	.word	0x000007cf
 8004f3c:	2000040c 	.word	0x2000040c
 8004f40:	00001388 	.word	0x00001388
 8004f44:	2000023c 	.word	0x2000023c
 8004f48:	40000400 	.word	0x40000400
 8004f4c:	0000ffff 	.word	0x0000ffff
 8004f50:	200001b0 	.word	0x200001b0
 8004f54:	40014000 	.word	0x40014000
 8004f58:	200001f4 	.word	0x200001f4
 8004f5c:	40003000 	.word	0x40003000
 8004f60:	00000fff 	.word	0x00000fff
 8004f64:	200004e4 	.word	0x200004e4
 8004f68:	40014400 	.word	0x40014400
 8004f6c:	00002328 	.word	0x00002328
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8004f70:	2100      	movs	r1, #0
 8004f72:	0020      	movs	r0, r4
 8004f74:	f7fc fe7a 	bl	8001c6c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8004f78:	2100      	movs	r1, #0
 8004f7a:	0020      	movs	r0, r4
 8004f7c:	f7fd fc00 	bl	8002780 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8004f80:	2104      	movs	r1, #4
 8004f82:	0020      	movs	r0, r4
 8004f84:	f7fc fe72 	bl	8001c6c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8004f88:	2104      	movs	r1, #4
 8004f8a:	0020      	movs	r0, r4
 8004f8c:	f7fd fbf8 	bl	8002780 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8004f90:	2108      	movs	r1, #8
 8004f92:	0020      	movs	r0, r4
 8004f94:	f7fc fe6a 	bl	8001c6c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8004f98:	2108      	movs	r1, #8
 8004f9a:	0020      	movs	r0, r4
 8004f9c:	f7fd fbf0 	bl	8002780 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_Base_Start_IT(&htim16);
 8004fa0:	483d      	ldr	r0, [pc, #244]	; (8005098 <main+0x4ac>)
 8004fa2:	f7fc fd9b 	bl	8001adc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim3);
 8004fa6:	0030      	movs	r0, r6
 8004fa8:	f7fc fd72 	bl	8001a90 <HAL_TIM_Base_Start>
	playStartupTune();
 8004fac:	f7ff f8ca 	bl	8004144 <playStartupTune>
	if (vehicle_mode == 1){                    // quad single direction
 8004fb0:	4b3a      	ldr	r3, [pc, #232]	; (800509c <main+0x4b0>)
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d103      	bne.n	8004fc0 <main+0x3d4>
		loadEEpromConfig();
 8004fb8:	f7fe f94a 	bl	8003250 <loadEEpromConfig>
 8004fbc:	4b37      	ldr	r3, [pc, #220]	; (800509c <main+0x4b0>)
 8004fbe:	781b      	ldrb	r3, [r3, #0]
	if (vehicle_mode == 2){                   // crawler or thruster
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d012      	beq.n	8004fea <main+0x3fe>
	if (vehicle_mode == 3){                 // rc car 50 percent brake on reverse.
 8004fc4:	2b03      	cmp	r3, #3
 8004fc6:	d045      	beq.n	8005054 <main+0x468>
	if (vehicle_mode == 4){                 // rc car 50 percent brake on reverse.
 8004fc8:	2b04      	cmp	r3, #4
 8004fca:	d02e      	beq.n	800502a <main+0x43e>
 8004fcc:	4b34      	ldr	r3, [pc, #208]	; (80050a0 <main+0x4b4>)
 8004fce:	4699      	mov	r9, r3
 8004fd0:	4b34      	ldr	r3, [pc, #208]	; (80050a4 <main+0x4b8>)
 8004fd2:	9300      	str	r3, [sp, #0]
 8004fd4:	4b34      	ldr	r3, [pc, #208]	; (80050a8 <main+0x4bc>)
 8004fd6:	9301      	str	r3, [sp, #4]
 8004fd8:	4b34      	ldr	r3, [pc, #208]	; (80050ac <main+0x4c0>)
 8004fda:	9302      	str	r3, [sp, #8]
	if (HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_4) != HAL_OK)
 8004fdc:	210c      	movs	r1, #12
 8004fde:	0020      	movs	r0, r4
 8004fe0:	f7fc fd86 	bl	8001af0 <HAL_TIM_OC_Start_IT>
 8004fe4:	2800      	cmp	r0, #0
 8004fe6:	d012      	beq.n	800500e <main+0x422>
 8004fe8:	e7fe      	b.n	8004fe8 <main+0x3fc>
		 bi_direction = 1;
 8004fea:	4b2d      	ldr	r3, [pc, #180]	; (80050a0 <main+0x4b4>)
 8004fec:	4699      	mov	r9, r3
 8004fee:	2301      	movs	r3, #1
 8004ff0:	464a      	mov	r2, r9
 8004ff2:	6013      	str	r3, [r2, #0]
		 slow_decay = 1;                      // for complementary pwm , 0 for diode freewheeling
 8004ff4:	4a2e      	ldr	r2, [pc, #184]	; (80050b0 <main+0x4c4>)
 8004ff6:	7013      	strb	r3, [r2, #0]
		 brake = 1;                          // apply full motor brake on stop
 8004ff8:	4a2a      	ldr	r2, [pc, #168]	; (80050a4 <main+0x4b8>)
 8004ffa:	6013      	str	r3, [r2, #0]
 8004ffc:	9200      	str	r2, [sp, #0]
		 start_power = 150;
 8004ffe:	2296      	movs	r2, #150	; 0x96
 8005000:	4b2c      	ldr	r3, [pc, #176]	; (80050b4 <main+0x4c8>)
 8005002:	601a      	str	r2, [r3, #0]
 8005004:	4b28      	ldr	r3, [pc, #160]	; (80050a8 <main+0x4bc>)
 8005006:	9301      	str	r3, [sp, #4]
 8005008:	4b28      	ldr	r3, [pc, #160]	; (80050ac <main+0x4c0>)
 800500a:	9302      	str	r3, [sp, #8]
 800500c:	e7e6      	b.n	8004fdc <main+0x3f0>
	HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , 64);
 800500e:	4a2a      	ldr	r2, [pc, #168]	; (80050b8 <main+0x4cc>)
 8005010:	2100      	movs	r1, #0
 8005012:	2340      	movs	r3, #64	; 0x40
 8005014:	4829      	ldr	r0, [pc, #164]	; (80050bc <main+0x4d0>)
 8005016:	f7fc fecd 	bl	8001db4 <HAL_TIM_IC_Start_DMA>
	if (HAL_ADC_Start_DMA(&hadc, (uint32_t*)ADC1ConvertedValues, 3) != HAL_OK){
 800501a:	2203      	movs	r2, #3
 800501c:	4928      	ldr	r1, [pc, #160]	; (80050c0 <main+0x4d4>)
 800501e:	0028      	movs	r0, r5
 8005020:	f7fb fb26 	bl	8000670 <HAL_ADC_Start_DMA>
 8005024:	2800      	cmp	r0, #0
 8005026:	d02a      	beq.n	800507e <main+0x492>
 8005028:	e7fe      	b.n	8005028 <main+0x43c>
			 bi_direction = 1;
 800502a:	4b1d      	ldr	r3, [pc, #116]	; (80050a0 <main+0x4b4>)
			 slow_decay = 0;                      // for complementary pwm , 0 for diode freewheeling
 800502c:	4920      	ldr	r1, [pc, #128]	; (80050b0 <main+0x4c4>)
			 bi_direction = 1;
 800502e:	4699      	mov	r9, r3
 8005030:	2301      	movs	r3, #1
 8005032:	464a      	mov	r2, r9
 8005034:	6013      	str	r3, [r2, #0]
			 slow_decay = 0;                      // for complementary pwm , 0 for diode freewheeling
 8005036:	2200      	movs	r2, #0
 8005038:	700a      	strb	r2, [r1, #0]
			 brake = 0;                          // apply full motor brake on stop
 800503a:	491a      	ldr	r1, [pc, #104]	; (80050a4 <main+0x4b8>)
 800503c:	600a      	str	r2, [r1, #0]
			 prop_brake = 1;
 800503e:	4a1a      	ldr	r2, [pc, #104]	; (80050a8 <main+0x4bc>)
			 brake = 0;                          // apply full motor brake on stop
 8005040:	9100      	str	r1, [sp, #0]
			 prop_brake = 1;
 8005042:	7013      	strb	r3, [r2, #0]
			 prop_brake_strength = 800;
 8005044:	4b19      	ldr	r3, [pc, #100]	; (80050ac <main+0x4c0>)
			 prop_brake = 1;
 8005046:	9201      	str	r2, [sp, #4]
			 prop_brake_strength = 800;
 8005048:	9302      	str	r3, [sp, #8]
 800504a:	001a      	movs	r2, r3
 800504c:	23c8      	movs	r3, #200	; 0xc8
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	6013      	str	r3, [r2, #0]
 8005052:	e7c3      	b.n	8004fdc <main+0x3f0>
		 bi_direction = 1;
 8005054:	4b12      	ldr	r3, [pc, #72]	; (80050a0 <main+0x4b4>)
		 slow_decay = 0;                      // for complementary pwm , 0 for diode freewheeling
 8005056:	4916      	ldr	r1, [pc, #88]	; (80050b0 <main+0x4c4>)
		 bi_direction = 1;
 8005058:	4699      	mov	r9, r3
 800505a:	2301      	movs	r3, #1
 800505c:	464a      	mov	r2, r9
 800505e:	6013      	str	r3, [r2, #0]
		 slow_decay = 0;                      // for complementary pwm , 0 for diode freewheeling
 8005060:	2200      	movs	r2, #0
 8005062:	700a      	strb	r2, [r1, #0]
		 brake = 0;                          // apply full motor brake on stop
 8005064:	490f      	ldr	r1, [pc, #60]	; (80050a4 <main+0x4b8>)
 8005066:	600a      	str	r2, [r1, #0]
		 prop_brake = 1;
 8005068:	4a0f      	ldr	r2, [pc, #60]	; (80050a8 <main+0x4bc>)
		 brake = 0;                          // apply full motor brake on stop
 800506a:	9100      	str	r1, [sp, #0]
		 prop_brake = 1;
 800506c:	7013      	strb	r3, [r2, #0]
		 prop_brake_strength = 900;
 800506e:	4b0f      	ldr	r3, [pc, #60]	; (80050ac <main+0x4c0>)
		 prop_brake = 1;
 8005070:	9201      	str	r2, [sp, #4]
		 prop_brake_strength = 900;
 8005072:	9302      	str	r3, [sp, #8]
 8005074:	001a      	movs	r2, r3
 8005076:	23e1      	movs	r3, #225	; 0xe1
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	6013      	str	r3, [r2, #0]
 800507c:	e7ae      	b.n	8004fdc <main+0x3f0>
		if(HAL_COMP_Start_IT(&hcomp1) != HAL_OK)
 800507e:	4811      	ldr	r0, [pc, #68]	; (80050c4 <main+0x4d8>)
 8005080:	f7fb fcdc 	bl	8000a3c <HAL_COMP_Start_IT>
 8005084:	2800      	cmp	r0, #0
 8005086:	d000      	beq.n	800508a <main+0x49e>
 8005088:	e7fe      	b.n	8005088 <main+0x49c>
	if(HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800508a:	480f      	ldr	r0, [pc, #60]	; (80050c8 <main+0x4dc>)
 800508c:	f7fc f942 	bl	8001314 <HAL_IWDG_Init>
 8005090:	2800      	cmp	r0, #0
 8005092:	d01b      	beq.n	80050cc <main+0x4e0>
 8005094:	e7fe      	b.n	8005094 <main+0x4a8>
 8005096:	46c0      	nop			; (mov r8, r8)
 8005098:	200004e4 	.word	0x200004e4
 800509c:	20000058 	.word	0x20000058
 80050a0:	200000ac 	.word	0x200000ac
 80050a4:	2000000c 	.word	0x2000000c
 80050a8:	20000132 	.word	0x20000132
 80050ac:	20000030 	.word	0x20000030
 80050b0:	20000040 	.word	0x20000040
 80050b4:	20000048 	.word	0x20000048
 80050b8:	20000284 	.word	0x20000284
 80050bc:	200001b0 	.word	0x200001b0
 80050c0:	20000088 	.word	0x20000088
 80050c4:	20000210 	.word	0x20000210
 80050c8:	200001f4 	.word	0x200001f4
	if(bi_direction){
 80050cc:	464b      	mov	r3, r9
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d000      	beq.n	80050d6 <main+0x4ea>
 80050d4:	e28d      	b.n	80055f2 <main+0xa06>
 80050d6:	4bd1      	ldr	r3, [pc, #836]	; (800541c <main+0x830>)
 80050d8:	9303      	str	r3, [sp, #12]
 80050da:	4bd1      	ldr	r3, [pc, #836]	; (8005420 <main+0x834>)
			count = 0;
 80050dc:	2400      	movs	r4, #0
 80050de:	4698      	mov	r8, r3
	if (dir_reversed == 1){
 80050e0:	4bd0      	ldr	r3, [pc, #832]	; (8005424 <main+0x838>)
 80050e2:	4ed1      	ldr	r6, [pc, #836]	; (8005428 <main+0x83c>)
 80050e4:	469a      	mov	sl, r3
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4fd0      	ldr	r7, [pc, #832]	; (800542c <main+0x840>)
 80050ea:	3b01      	subs	r3, #1
 80050ec:	1e5a      	subs	r2, r3, #1
 80050ee:	4193      	sbcs	r3, r2
 80050f0:	4642      	mov	r2, r8
 80050f2:	6013      	str	r3, [r2, #0]
	TIM1->CCR1 = 1;
 80050f4:	2201      	movs	r2, #1
 80050f6:	4bce      	ldr	r3, [pc, #824]	; (8005430 <main+0x844>)
 80050f8:	4dce      	ldr	r5, [pc, #824]	; (8005434 <main+0x848>)
 80050fa:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 1;
 80050fc:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 1;
 80050fe:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = 800;
 8005100:	22c8      	movs	r2, #200	; 0xc8
 8005102:	0092      	lsls	r2, r2, #2
 8005104:	641a      	str	r2, [r3, #64]	; 0x40
 8005106:	4bcc      	ldr	r3, [pc, #816]	; (8005438 <main+0x84c>)
 8005108:	469b      	mov	fp, r3
		count++;
 800510a:	4bcc      	ldr	r3, [pc, #816]	; (800543c <main+0x850>)
 800510c:	4acb      	ldr	r2, [pc, #812]	; (800543c <main+0x850>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	9304      	str	r3, [sp, #16]
 8005112:	3301      	adds	r3, #1
 8005114:	6013      	str	r3, [r2, #0]
		if (count > 100000) {
 8005116:	4aca      	ldr	r2, [pc, #808]	; (8005440 <main+0x854>)
 8005118:	4293      	cmp	r3, r2
 800511a:	dd01      	ble.n	8005120 <main+0x534>
			count = 0;
 800511c:	4bc7      	ldr	r3, [pc, #796]	; (800543c <main+0x850>)
 800511e:	601c      	str	r4, [r3, #0]
		compit = 0;
 8005120:	4bc8      	ldr	r3, [pc, #800]	; (8005444 <main+0x858>)
		if (HAL_IWDG_Refresh(&hiwdg) != HAL_OK)              // watchdog refresh
 8005122:	48c9      	ldr	r0, [pc, #804]	; (8005448 <main+0x85c>)
		compit = 0;
 8005124:	701c      	strb	r4, [r3, #0]
		if (HAL_IWDG_Refresh(&hiwdg) != HAL_OK)              // watchdog refresh
 8005126:	f7fc f923 	bl	8001370 <HAL_IWDG_Refresh>
 800512a:	2800      	cmp	r0, #0
 800512c:	d000      	beq.n	8005130 <main+0x544>
 800512e:	e25f      	b.n	80055f0 <main+0xa04>
		control_loop_count++;
 8005130:	4bc6      	ldr	r3, [pc, #792]	; (800544c <main+0x860>)
 8005132:	4ac6      	ldr	r2, [pc, #792]	; (800544c <main+0x860>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	9304      	str	r3, [sp, #16]
 8005138:	3301      	adds	r3, #1
 800513a:	6013      	str	r3, [r2, #0]
		if (control_loop_count > 1) {
 800513c:	2b01      	cmp	r3, #1
 800513e:	dd72      	ble.n	8005226 <main+0x63a>
			if (dshotcommand > 0) {
 8005140:	4bc3      	ldr	r3, [pc, #780]	; (8005450 <main+0x864>)
			control_loop_count = 0;
 8005142:	6010      	str	r0, [r2, #0]
			if (dshotcommand > 0) {
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	dc00      	bgt.n	800514c <main+0x560>
 800514a:	e23a      	b.n	80055c2 <main+0x9d6>
				if (dshotcommand == 2) {
 800514c:	2b02      	cmp	r3, #2
 800514e:	d103      	bne.n	8005158 <main+0x56c>
					playInputTune();
 8005150:	f7ff f93c 	bl	80043cc <playInputTune>
 8005154:	4bbe      	ldr	r3, [pc, #760]	; (8005450 <main+0x864>)
 8005156:	681b      	ldr	r3, [r3, #0]
				if (dshotcommand == 21) {
 8005158:	2b15      	cmp	r3, #21
 800515a:	d100      	bne.n	800515e <main+0x572>
 800515c:	e234      	b.n	80055c8 <main+0x9dc>
				if (dshotcommand == 20) {     // forward = 1 if dir_reversed = 0
 800515e:	2b14      	cmp	r3, #20
 8005160:	d100      	bne.n	8005164 <main+0x578>
 8005162:	e227      	b.n	80055b4 <main+0x9c8>
				if (dshotcommand == 7) {
 8005164:	2b07      	cmp	r3, #7
 8005166:	d100      	bne.n	800516a <main+0x57e>
 8005168:	e221      	b.n	80055ae <main+0x9c2>
				if (dshotcommand == 8) {
 800516a:	2b08      	cmp	r3, #8
 800516c:	d100      	bne.n	8005170 <main+0x584>
 800516e:	e2b9      	b.n	80056e4 <main+0xaf8>
				if (dshotcommand == 9) {
 8005170:	2b09      	cmp	r3, #9
 8005172:	d100      	bne.n	8005176 <main+0x58a>
 8005174:	e22d      	b.n	80055d2 <main+0x9e6>
				if (dshotcommand == 10) {
 8005176:	2b0a      	cmp	r3, #10
 8005178:	d100      	bne.n	800517c <main+0x590>
 800517a:	e243      	b.n	8005604 <main+0xa18>
				if (dshotcommand == 12) {
 800517c:	2b0c      	cmp	r3, #12
 800517e:	d100      	bne.n	8005182 <main+0x596>
 8005180:	e23d      	b.n	80055fe <main+0xa12>
 8005182:	464b      	mov	r3, r9
				dshotcommand = 0;
 8005184:	4ab2      	ldr	r2, [pc, #712]	; (8005450 <main+0x864>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	6014      	str	r4, [r2, #0]
			if (bi_direction == 1 && (proshot == 0 && dshot == 0)) {
 800518a:	2b01      	cmp	r3, #1
 800518c:	d100      	bne.n	8005190 <main+0x5a4>
 800518e:	e240      	b.n	8005612 <main+0xa26>
			} else if ((proshot || dshot) && bi_direction) {
 8005190:	4ab0      	ldr	r2, [pc, #704]	; (8005454 <main+0x868>)
 8005192:	7812      	ldrb	r2, [r2, #0]
 8005194:	2a00      	cmp	r2, #0
 8005196:	d104      	bne.n	80051a2 <main+0x5b6>
 8005198:	4aaf      	ldr	r2, [pc, #700]	; (8005458 <main+0x86c>)
 800519a:	7812      	ldrb	r2, [r2, #0]
 800519c:	2a00      	cmp	r2, #0
 800519e:	d100      	bne.n	80051a2 <main+0x5b6>
 80051a0:	e222      	b.n	80055e8 <main+0x9fc>
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d100      	bne.n	80051a8 <main+0x5bc>
 80051a6:	e21f      	b.n	80055e8 <main+0x9fc>
				if (newinput > 1097) {
 80051a8:	9b03      	ldr	r3, [sp, #12]
 80051aa:	4aac      	ldr	r2, [pc, #688]	; (800545c <main+0x870>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4293      	cmp	r3, r2
 80051b0:	dd0f      	ble.n	80051d2 <main+0x5e6>
					if (forward == dir_reversed) {
 80051b2:	4642      	mov	r2, r8
 80051b4:	6811      	ldr	r1, [r2, #0]
 80051b6:	4652      	mov	r2, sl
 80051b8:	6812      	ldr	r2, [r2, #0]
 80051ba:	4291      	cmp	r1, r2
 80051bc:	d105      	bne.n	80051ca <main+0x5de>
						forward = 1 - dir_reversed;
 80051be:	2201      	movs	r2, #1
 80051c0:	1a52      	subs	r2, r2, r1
 80051c2:	4641      	mov	r1, r8
 80051c4:	600a      	str	r2, [r1, #0]
						bemf_counts = 0;
 80051c6:	4aa6      	ldr	r2, [pc, #664]	; (8005460 <main+0x874>)
 80051c8:	6014      	str	r4, [r2, #0]
					adjusted_input = (newinput - 1100) * 2 + 100;
 80051ca:	4aa6      	ldr	r2, [pc, #664]	; (8005464 <main+0x878>)
 80051cc:	189a      	adds	r2, r3, r2
 80051ce:	0052      	lsls	r2, r2, #1
 80051d0:	6032      	str	r2, [r6, #0]
				if (newinput <= 1047 && newinput > 0) {
 80051d2:	49a5      	ldr	r1, [pc, #660]	; (8005468 <main+0x87c>)
 80051d4:	1e5a      	subs	r2, r3, #1
 80051d6:	428a      	cmp	r2, r1
 80051d8:	d80f      	bhi.n	80051fa <main+0x60e>
					if (forward == (1 - dir_reversed)) {
 80051da:	4652      	mov	r2, sl
 80051dc:	4640      	mov	r0, r8
 80051de:	6811      	ldr	r1, [r2, #0]
 80051e0:	2201      	movs	r2, #1
 80051e2:	6800      	ldr	r0, [r0, #0]
 80051e4:	1a52      	subs	r2, r2, r1
 80051e6:	4282      	cmp	r2, r0
 80051e8:	d103      	bne.n	80051f2 <main+0x606>
						bemf_counts = 0;
 80051ea:	4a9d      	ldr	r2, [pc, #628]	; (8005460 <main+0x874>)
 80051ec:	6014      	str	r4, [r2, #0]
						forward = dir_reversed;
 80051ee:	4642      	mov	r2, r8
 80051f0:	6011      	str	r1, [r2, #0]
					adjusted_input = (newinput - 90) * 2;
 80051f2:	001a      	movs	r2, r3
 80051f4:	3a5a      	subs	r2, #90	; 0x5a
 80051f6:	0052      	lsls	r2, r2, #1
 80051f8:	6032      	str	r2, [r6, #0]
				if ((newinput > 1047 && newinput < 1098) || newinput <= 120) {
 80051fa:	4a9c      	ldr	r2, [pc, #624]	; (800546c <main+0x880>)
 80051fc:	189a      	adds	r2, r3, r2
 80051fe:	2a31      	cmp	r2, #49	; 0x31
 8005200:	d800      	bhi.n	8005204 <main+0x618>
 8005202:	e266      	b.n	80056d2 <main+0xae6>
 8005204:	2b78      	cmp	r3, #120	; 0x78
 8005206:	dc00      	bgt.n	800520a <main+0x61e>
 8005208:	e263      	b.n	80056d2 <main+0xae6>
 800520a:	6833      	ldr	r3, [r6, #0]
			if (adjusted_input > 2000) {
 800520c:	22fa      	movs	r2, #250	; 0xfa
 800520e:	00d2      	lsls	r2, r2, #3
 8005210:	4293      	cmp	r3, r2
 8005212:	dd01      	ble.n	8005218 <main+0x62c>
				adjusted_input = 2000;
 8005214:	0013      	movs	r3, r2
 8005216:	6032      	str	r2, [r6, #0]
			if (adjusted_input - input > 25) {
 8005218:	683a      	ldr	r2, [r7, #0]
 800521a:	1a99      	subs	r1, r3, r2
 800521c:	2919      	cmp	r1, #25
 800521e:	dc00      	bgt.n	8005222 <main+0x636>
 8005220:	e264      	b.n	80056ec <main+0xb00>
				input = input + 10;
 8005222:	320a      	adds	r2, #10
 8005224:	603a      	str	r2, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8005226:	4b92      	ldr	r3, [pc, #584]	; (8005470 <main+0x884>)
 8005228:	4a92      	ldr	r2, [pc, #584]	; (8005474 <main+0x888>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4293      	cmp	r3, r2
 800522e:	dc00      	bgt.n	8005232 <main+0x646>
 8005230:	e1b8      	b.n	80055a4 <main+0x9b8>
 8005232:	0013      	movs	r3, r2
 8005234:	3bc8      	subs	r3, #200	; 0xc8
 8005236:	00d8      	lsls	r0, r3, #3
 8005238:	18c0      	adds	r0, r0, r3
 800523a:	0040      	lsls	r0, r0, #1
 800523c:	498e      	ldr	r1, [pc, #568]	; (8005478 <main+0x88c>)
 800523e:	f7fa ffed 	bl	800021c <__divsi3>
		advancedivisor = map((commutation_interval), 200, 10000, 2, 20);
 8005242:	4b8e      	ldr	r3, [pc, #568]	; (800547c <main+0x890>)
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8005244:	3002      	adds	r0, #2
		advancedivisor = map((commutation_interval), 200, 10000, 2, 20);
 8005246:	7018      	strb	r0, [r3, #0]
		if (inputSet == 0) {
 8005248:	4b8d      	ldr	r3, [pc, #564]	; (8005480 <main+0x894>)
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d104      	bne.n	800525a <main+0x66e>
			HAL_Delay(10);
 8005250:	200a      	movs	r0, #10
 8005252:	f7fb f8ff 	bl	8000454 <HAL_Delay>
			detectInput();
 8005256:	f7ff fa0b 	bl	8004670 <detectInput>
		if (!armed) {
 800525a:	4b8a      	ldr	r3, [pc, #552]	; (8005484 <main+0x898>)
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d100      	bne.n	8005264 <main+0x678>
 8005262:	e0b1      	b.n	80053c8 <main+0x7dc>
 8005264:	683b      	ldr	r3, [r7, #0]
		if ((input > 47) && (armed == 1)) {
 8005266:	2b2f      	cmp	r3, #47	; 0x2f
 8005268:	dd04      	ble.n	8005274 <main+0x688>
 800526a:	4a86      	ldr	r2, [pc, #536]	; (8005484 <main+0x898>)
 800526c:	7812      	ldrb	r2, [r2, #0]
 800526e:	2a01      	cmp	r2, #1
 8005270:	d100      	bne.n	8005274 <main+0x688>
 8005272:	e0b6      	b.n	80053e2 <main+0x7f6>
		signaltimeout++;
 8005274:	4b84      	ldr	r3, [pc, #528]	; (8005488 <main+0x89c>)
 8005276:	4a84      	ldr	r2, [pc, #528]	; (8005488 <main+0x89c>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	3301      	adds	r3, #1
 800527c:	6013      	str	r3, [r2, #0]
		if (signaltimeout > signal_timeout_threshold) {
 800527e:	4a83      	ldr	r2, [pc, #524]	; (800548c <main+0x8a0>)
 8005280:	6812      	ldr	r2, [r2, #0]
 8005282:	9204      	str	r2, [sp, #16]
 8005284:	4293      	cmp	r3, r2
 8005286:	dd25      	ble.n	80052d4 <main+0x6e8>
			armed = 0;
 8005288:	4b7e      	ldr	r3, [pc, #504]	; (8005484 <main+0x898>)
			error = 1;
 800528a:	4a81      	ldr	r2, [pc, #516]	; (8005490 <main+0x8a4>)
			armed = 0;
 800528c:	701c      	strb	r4, [r3, #0]
			armedcount = 0;
 800528e:	4b81      	ldr	r3, [pc, #516]	; (8005494 <main+0x8a8>)
			input = 0;
 8005290:	603c      	str	r4, [r7, #0]
			armedcount = 0;
 8005292:	601c      	str	r4, [r3, #0]
			error = 1;
 8005294:	2301      	movs	r3, #1
 8005296:	6013      	str	r3, [r2, #0]
			inputSet = 0;
 8005298:	4b79      	ldr	r3, [pc, #484]	; (8005480 <main+0x894>)
			HAL_TIM_Base_Start_IT(&htim16);
 800529a:	487f      	ldr	r0, [pc, #508]	; (8005498 <main+0x8ac>)
			inputSet = 0;
 800529c:	701c      	strb	r4, [r3, #0]
			TIM15->PSC=0;
 800529e:	4b7f      	ldr	r3, [pc, #508]	; (800549c <main+0x8b0>)
 80052a0:	629c      	str	r4, [r3, #40]	; 0x28
			TIM16->PSC=0;
 80052a2:	4b7f      	ldr	r3, [pc, #508]	; (80054a0 <main+0x8b4>)
 80052a4:	629c      	str	r4, [r3, #40]	; 0x28
			dshot = 0;
 80052a6:	4b6c      	ldr	r3, [pc, #432]	; (8005458 <main+0x86c>)
 80052a8:	701c      	strb	r4, [r3, #0]
			proshot = 0;
 80052aa:	4b6a      	ldr	r3, [pc, #424]	; (8005454 <main+0x868>)
 80052ac:	701c      	strb	r4, [r3, #0]
			servoPwm = 0;
 80052ae:	4b7d      	ldr	r3, [pc, #500]	; (80054a4 <main+0x8b8>)
 80052b0:	701c      	strb	r4, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim16);
 80052b2:	f7fc fc13 	bl	8001adc <HAL_TIM_Base_Start_IT>
			IC_buffer_size = 64;
 80052b6:	2340      	movs	r3, #64	; 0x40
 80052b8:	4a7b      	ldr	r2, [pc, #492]	; (80054a8 <main+0x8bc>)
 80052ba:	2100      	movs	r1, #0
 80052bc:	6013      	str	r3, [r2, #0]
 80052be:	2280      	movs	r2, #128	; 0x80
 80052c0:	487a      	ldr	r0, [pc, #488]	; (80054ac <main+0x8c0>)
 80052c2:	0052      	lsls	r2, r2, #1
 80052c4:	f000 fc3e 	bl	8005b44 <memset>
			HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , 64);
 80052c8:	2340      	movs	r3, #64	; 0x40
 80052ca:	4a78      	ldr	r2, [pc, #480]	; (80054ac <main+0x8c0>)
 80052cc:	2100      	movs	r1, #0
 80052ce:	4878      	ldr	r0, [pc, #480]	; (80054b0 <main+0x8c4>)
 80052d0:	f7fc fd70 	bl	8001db4 <HAL_TIM_IC_Start_DMA>
		if (input <= 47) {
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	2b2f      	cmp	r3, #47	; 0x2f
 80052d8:	dc2a      	bgt.n	8005330 <main+0x744>
			forcedcomcount = 0;
 80052da:	4b76      	ldr	r3, [pc, #472]	; (80054b4 <main+0x8c8>)
 80052dc:	601c      	str	r4, [r3, #0]
			started = 0;
 80052de:	4b76      	ldr	r3, [pc, #472]	; (80054b8 <main+0x8cc>)
 80052e0:	601c      	str	r4, [r3, #0]
			if (!brake && !prop_brake_active) {
 80052e2:	9b00      	ldr	r3, [sp, #0]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d169      	bne.n	80053be <main+0x7d2>
 80052ea:	4a74      	ldr	r2, [pc, #464]	; (80054bc <main+0x8d0>)
 80052ec:	7812      	ldrb	r2, [r2, #0]
 80052ee:	9205      	str	r2, [sp, #20]
 80052f0:	2a00      	cmp	r2, #0
 80052f2:	d100      	bne.n	80052f6 <main+0x70a>
 80052f4:	e138      	b.n	8005568 <main+0x97c>
			duty_cycle = 0;
 80052f6:	602b      	str	r3, [r5, #0]
			if (brake || tempbrake) {
 80052f8:	4b71      	ldr	r3, [pc, #452]	; (80054c0 <main+0x8d4>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	9304      	str	r3, [sp, #16]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d002      	beq.n	8005308 <main+0x71c>
				fullBrake();
 8005302:	f7fe fa83 	bl	800380c <fullBrake>
				duty_cycle = 0;
 8005306:	602c      	str	r4, [r5, #0]
			if (prop_brake && prop_brake_active) {
 8005308:	9b01      	ldr	r3, [sp, #4]
 800530a:	781a      	ldrb	r2, [r3, #0]
 800530c:	2300      	movs	r3, #0
 800530e:	2a00      	cmp	r2, #0
 8005310:	d00a      	beq.n	8005328 <main+0x73c>
 8005312:	4a6a      	ldr	r2, [pc, #424]	; (80054bc <main+0x8d0>)
 8005314:	7812      	ldrb	r2, [r2, #0]
 8005316:	2a00      	cmp	r2, #0
 8005318:	d006      	beq.n	8005328 <main+0x73c>
				duty_cycle = prop_brake_strength;
 800531a:	9b02      	ldr	r3, [sp, #8]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	9304      	str	r3, [sp, #16]
 8005320:	602b      	str	r3, [r5, #0]
				proBrake();
 8005322:	f7fe fb9d 	bl	8003a60 <proBrake>
 8005326:	682b      	ldr	r3, [r5, #0]
			TIM1->CCR1 = duty_cycle;// set duty cycle to 50 out of 768 to start.
 8005328:	4a41      	ldr	r2, [pc, #260]	; (8005430 <main+0x844>)
 800532a:	6353      	str	r3, [r2, #52]	; 0x34
			TIM1->CCR2 = duty_cycle;
 800532c:	6393      	str	r3, [r2, #56]	; 0x38
			TIM1->CCR3 = duty_cycle;
 800532e:	63d3      	str	r3, [r2, #60]	; 0x3c
		if (bemf_counts < 100 || commutation_interval > 15000) {
 8005330:	4b4b      	ldr	r3, [pc, #300]	; (8005460 <main+0x874>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	9304      	str	r3, [sp, #16]
 8005336:	2b63      	cmp	r3, #99	; 0x63
 8005338:	dc39      	bgt.n	80053ae <main+0x7c2>
			filter_level = 12;
 800533a:	210c      	movs	r1, #12
			filter_delay = 15;
 800533c:	220f      	movs	r2, #15
 800533e:	4b4c      	ldr	r3, [pc, #304]	; (8005470 <main+0x884>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4860      	ldr	r0, [pc, #384]	; (80054c4 <main+0x8d8>)
		if (commutation_interval > 400 && commutation_interval < 1000) {
 8005344:	3b92      	subs	r3, #146	; 0x92
 8005346:	7001      	strb	r1, [r0, #0]
 8005348:	495f      	ldr	r1, [pc, #380]	; (80054c8 <main+0x8dc>)
 800534a:	3bff      	subs	r3, #255	; 0xff
 800534c:	600a      	str	r2, [r1, #0]
 800534e:	4a5f      	ldr	r2, [pc, #380]	; (80054cc <main+0x8e0>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d803      	bhi.n	800535c <main+0x770>
			filter_delay = 5;
 8005354:	2305      	movs	r3, #5
 8005356:	600b      	str	r3, [r1, #0]
			filter_level = 2;
 8005358:	3b03      	subs	r3, #3
 800535a:	7003      	strb	r3, [r0, #0]
		if (started == 1) {
 800535c:	4b56      	ldr	r3, [pc, #344]	; (80054b8 <main+0x8cc>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	9304      	str	r3, [sp, #16]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d100      	bne.n	8005368 <main+0x77c>
 8005366:	e10e      	b.n	8005586 <main+0x99a>
		if (duty_cycle < 300) {
 8005368:	232c      	movs	r3, #44	; 0x2c
 800536a:	682a      	ldr	r2, [r5, #0]
 800536c:	33ff      	adds	r3, #255	; 0xff
 800536e:	429a      	cmp	r2, r3
 8005370:	dd00      	ble.n	8005374 <main+0x788>
 8005372:	e105      	b.n	8005580 <main+0x994>
			zc_timeout_threshold = 3500;
 8005374:	4a56      	ldr	r2, [pc, #344]	; (80054d0 <main+0x8e4>)
 8005376:	4b57      	ldr	r3, [pc, #348]	; (80054d4 <main+0x8e8>)
		zctimeout++;
 8005378:	4957      	ldr	r1, [pc, #348]	; (80054d8 <main+0x8ec>)
 800537a:	601a      	str	r2, [r3, #0]
 800537c:	4b56      	ldr	r3, [pc, #344]	; (80054d8 <main+0x8ec>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	9304      	str	r3, [sp, #16]
 8005382:	3301      	adds	r3, #1
 8005384:	600b      	str	r3, [r1, #0]
		if (zctimeout > zc_timeout_threshold) {
 8005386:	429a      	cmp	r2, r3
 8005388:	db00      	blt.n	800538c <main+0x7a0>
 800538a:	e6be      	b.n	800510a <main+0x51e>
			bad_commutation = 0;
 800538c:	4b53      	ldr	r3, [pc, #332]	; (80054dc <main+0x8f0>)
			HAL_COMP_Stop_IT(&hcomp1);
 800538e:	4854      	ldr	r0, [pc, #336]	; (80054e0 <main+0x8f4>)
			bad_commutation = 0;
 8005390:	701c      	strb	r4, [r3, #0]
			sensorless = 0;
 8005392:	4b54      	ldr	r3, [pc, #336]	; (80054e4 <main+0x8f8>)
 8005394:	601c      	str	r4, [r3, #0]
			HAL_COMP_Stop_IT(&hcomp1);
 8005396:	f7fb fba5 	bl	8000ae4 <HAL_COMP_Stop_IT>
			running = 0;
 800539a:	465b      	mov	r3, fp
 800539c:	601c      	str	r4, [r3, #0]
			zctimeout = zc_timeout_threshold + 1;
 800539e:	4b4d      	ldr	r3, [pc, #308]	; (80054d4 <main+0x8e8>)
 80053a0:	4a4d      	ldr	r2, [pc, #308]	; (80054d8 <main+0x8ec>)
 80053a2:	681b      	ldr	r3, [r3, #0]
			duty_cycle = 0;
 80053a4:	602c      	str	r4, [r5, #0]
			zctimeout = zc_timeout_threshold + 1;
 80053a6:	9304      	str	r3, [sp, #16]
 80053a8:	3301      	adds	r3, #1
 80053aa:	6013      	str	r3, [r2, #0]
 80053ac:	e6ad      	b.n	800510a <main+0x51e>
		if (bemf_counts < 100 || commutation_interval > 15000) {
 80053ae:	4b30      	ldr	r3, [pc, #192]	; (8005470 <main+0x884>)
 80053b0:	4a4d      	ldr	r2, [pc, #308]	; (80054e8 <main+0x8fc>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4293      	cmp	r3, r2
 80053b6:	dc04      	bgt.n	80053c2 <main+0x7d6>
			filter_level = 3;
 80053b8:	2103      	movs	r1, #3
			filter_delay = 8;
 80053ba:	2208      	movs	r2, #8
 80053bc:	e7c1      	b.n	8005342 <main+0x756>
			duty_cycle = 0;
 80053be:	602c      	str	r4, [r5, #0]
 80053c0:	e79f      	b.n	8005302 <main+0x716>
			filter_level = 12;
 80053c2:	210c      	movs	r1, #12
			filter_delay = 15;
 80053c4:	220f      	movs	r2, #15
 80053c6:	e7bc      	b.n	8005342 <main+0x756>
				if ((inputSet == 1) && (input == 0)) {
 80053c8:	4b2d      	ldr	r3, [pc, #180]	; (8005480 <main+0x894>)
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	9304      	str	r3, [sp, #16]
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d100      	bne.n	80053d4 <main+0x7e8>
 80053d2:	e08b      	b.n	80054ec <main+0x900>
 80053d4:	683b      	ldr	r3, [r7, #0]
				if (input > 0) {
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	dc00      	bgt.n	80053dc <main+0x7f0>
 80053da:	e74b      	b.n	8005274 <main+0x688>
					armedcount = 0;
 80053dc:	4a2d      	ldr	r2, [pc, #180]	; (8005494 <main+0x8a8>)
 80053de:	6014      	str	r4, [r2, #0]
 80053e0:	e741      	b.n	8005266 <main+0x67a>
			prop_brake_active = 0;
 80053e2:	4936      	ldr	r1, [pc, #216]	; (80054bc <main+0x8d0>)
			duty_cycle = input  - 20;
 80053e4:	3b14      	subs	r3, #20
			prop_brake_active = 0;
 80053e6:	700c      	strb	r4, [r1, #0]
			started = 1;
 80053e8:	4933      	ldr	r1, [pc, #204]	; (80054b8 <main+0x8cc>)
			duty_cycle = input  - 20;
 80053ea:	602b      	str	r3, [r5, #0]
			started = 1;
 80053ec:	600a      	str	r2, [r1, #0]
			if (bemf_counts < 15) {
 80053ee:	4a1c      	ldr	r2, [pc, #112]	; (8005460 <main+0x874>)
 80053f0:	6812      	ldr	r2, [r2, #0]
 80053f2:	9204      	str	r2, [sp, #16]
 80053f4:	2a0e      	cmp	r2, #14
 80053f6:	dd00      	ble.n	80053fa <main+0x80e>
 80053f8:	e0a0      	b.n	800553c <main+0x950>
				if (duty_cycle < 55) {
 80053fa:	2b36      	cmp	r3, #54	; 0x36
 80053fc:	dd00      	ble.n	8005400 <main+0x814>
 80053fe:	e091      	b.n	8005524 <main+0x938>
					duty_cycle = 55;
 8005400:	2337      	movs	r3, #55	; 0x37
 8005402:	602b      	str	r3, [r5, #0]
			if (running) {
 8005404:	465b      	mov	r3, fp
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d100      	bne.n	800540e <main+0x822>
 800540c:	e732      	b.n	8005274 <main+0x688>
 800540e:	2337      	movs	r3, #55	; 0x37
				TIM1->CCR1 = duty_cycle;// set duty cycle to 50 out of 768 to start.
 8005410:	4a07      	ldr	r2, [pc, #28]	; (8005430 <main+0x844>)
 8005412:	6353      	str	r3, [r2, #52]	; 0x34
				TIM1->CCR2 = duty_cycle;
 8005414:	6393      	str	r3, [r2, #56]	; 0x38
				TIM1->CCR3 = duty_cycle;
 8005416:	63d3      	str	r3, [r2, #60]	; 0x3c
 8005418:	e72c      	b.n	8005274 <main+0x688>
 800541a:	46c0      	nop			; (mov r8, r8)
 800541c:	2000012c 	.word	0x2000012c
 8005420:	20000020 	.word	0x20000020
 8005424:	200000c4 	.word	0x200000c4
 8005428:	20000450 	.word	0x20000450
 800542c:	2000011c 	.word	0x2000011c
 8005430:	40012c00 	.word	0x40012c00
 8005434:	20000010 	.word	0x20000010
 8005438:	20000148 	.word	0x20000148
 800543c:	200000bc 	.word	0x200000bc
 8005440:	000186a0 	.word	0x000186a0
 8005444:	200000b8 	.word	0x200000b8
 8005448:	200001f4 	.word	0x200001f4
 800544c:	20000208 	.word	0x20000208
 8005450:	2000010c 	.word	0x2000010c
 8005454:	20000144 	.word	0x20000144
 8005458:	20000108 	.word	0x20000108
 800545c:	00000449 	.word	0x00000449
 8005460:	20000280 	.word	0x20000280
 8005464:	fffffbe6 	.word	0xfffffbe6
 8005468:	00000416 	.word	0x00000416
 800546c:	fffffbe8 	.word	0xfffffbe8
 8005470:	200000b4 	.word	0x200000b4
 8005474:	00002710 	.word	0x00002710
 8005478:	00002648 	.word	0x00002648
 800547c:	2000000a 	.word	0x2000000a
 8005480:	20000120 	.word	0x20000120
 8005484:	200000a0 	.word	0x200000a0
 8005488:	20000158 	.word	0x20000158
 800548c:	2000003c 	.word	0x2000003c
 8005490:	20000110 	.word	0x20000110
 8005494:	200000a4 	.word	0x200000a4
 8005498:	200004e4 	.word	0x200004e4
 800549c:	40014000 	.word	0x40014000
 80054a0:	40014400 	.word	0x40014400
 80054a4:	20000150 	.word	0x20000150
 80054a8:	20000000 	.word	0x20000000
 80054ac:	20000284 	.word	0x20000284
 80054b0:	200001b0 	.word	0x200001b0
 80054b4:	20000114 	.word	0x20000114
 80054b8:	20000160 	.word	0x20000160
 80054bc:	20000133 	.word	0x20000133
 80054c0:	20000168 	.word	0x20000168
 80054c4:	20000018 	.word	0x20000018
 80054c8:	20000014 	.word	0x20000014
 80054cc:	00000256 	.word	0x00000256
 80054d0:	00000dac 	.word	0x00000dac
 80054d4:	2000005c 	.word	0x2000005c
 80054d8:	20000180 	.word	0x20000180
 80054dc:	200000a8 	.word	0x200000a8
 80054e0:	20000210 	.word	0x20000210
 80054e4:	2000014c 	.word	0x2000014c
 80054e8:	00003a98 	.word	0x00003a98
				if ((inputSet == 1) && (input == 0)) {
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d000      	beq.n	80054f4 <main+0x908>
 80054f2:	e770      	b.n	80053d6 <main+0x7ea>
					armedcount++;
 80054f4:	4b81      	ldr	r3, [pc, #516]	; (80056fc <main+0xb10>)
 80054f6:	4a81      	ldr	r2, [pc, #516]	; (80056fc <main+0xb10>)
 80054f8:	681b      	ldr	r3, [r3, #0]
					HAL_Delay(1);
 80054fa:	2001      	movs	r0, #1
					armedcount++;
 80054fc:	9305      	str	r3, [sp, #20]
 80054fe:	3301      	adds	r3, #1
 8005500:	6013      	str	r3, [r2, #0]
					HAL_Delay(1);
 8005502:	f7fa ffa7 	bl	8000454 <HAL_Delay>
					if (armedcount > 2000) {
 8005506:	23fa      	movs	r3, #250	; 0xfa
 8005508:	4a7c      	ldr	r2, [pc, #496]	; (80056fc <main+0xb10>)
 800550a:	00db      	lsls	r3, r3, #3
 800550c:	6812      	ldr	r2, [r2, #0]
 800550e:	9205      	str	r2, [sp, #20]
 8005510:	429a      	cmp	r2, r3
 8005512:	dc00      	bgt.n	8005516 <main+0x92a>
 8005514:	e75e      	b.n	80053d4 <main+0x7e8>
						armed = 1;
 8005516:	466a      	mov	r2, sp
 8005518:	4b79      	ldr	r3, [pc, #484]	; (8005700 <main+0xb14>)
 800551a:	7c12      	ldrb	r2, [r2, #16]
 800551c:	701a      	strb	r2, [r3, #0]
						playInputTune();
 800551e:	f7fe ff55 	bl	80043cc <playInputTune>
 8005522:	e757      	b.n	80053d4 <main+0x7e8>
				if (duty_cycle > 400) {
 8005524:	22c8      	movs	r2, #200	; 0xc8
 8005526:	0052      	lsls	r2, r2, #1
 8005528:	4293      	cmp	r3, r2
 800552a:	dd12      	ble.n	8005552 <main+0x966>
			if (running) {
 800552c:	465b      	mov	r3, fp
 800552e:	681b      	ldr	r3, [r3, #0]
					duty_cycle = 400;
 8005530:	602a      	str	r2, [r5, #0]
			if (running) {
 8005532:	2b00      	cmp	r3, #0
 8005534:	d100      	bne.n	8005538 <main+0x94c>
 8005536:	e69d      	b.n	8005274 <main+0x688>
 8005538:	0013      	movs	r3, r2
 800553a:	e769      	b.n	8005410 <main+0x824>
 800553c:	465a      	mov	r2, fp
 800553e:	6812      	ldr	r2, [r2, #0]
 8005540:	2a00      	cmp	r2, #0
 8005542:	d100      	bne.n	8005546 <main+0x95a>
 8005544:	e696      	b.n	8005274 <main+0x688>
				if (duty_cycle > 1998) {                             // safety!!!
 8005546:	4a6f      	ldr	r2, [pc, #444]	; (8005704 <main+0xb18>)
 8005548:	4293      	cmp	r3, r2
 800554a:	dd07      	ble.n	800555c <main+0x970>
					duty_cycle = 1999;
 800554c:	4b6e      	ldr	r3, [pc, #440]	; (8005708 <main+0xb1c>)
 800554e:	602b      	str	r3, [r5, #0]
 8005550:	e75e      	b.n	8005410 <main+0x824>
			if (running) {
 8005552:	465a      	mov	r2, fp
 8005554:	6812      	ldr	r2, [r2, #0]
 8005556:	2a00      	cmp	r2, #0
 8005558:	d100      	bne.n	800555c <main+0x970>
 800555a:	e68b      	b.n	8005274 <main+0x688>
				if (duty_cycle < 45) {
 800555c:	2b2c      	cmp	r3, #44	; 0x2c
 800555e:	dd00      	ble.n	8005562 <main+0x976>
 8005560:	e756      	b.n	8005410 <main+0x824>
					duty_cycle = 45;
 8005562:	232d      	movs	r3, #45	; 0x2d
 8005564:	602b      	str	r3, [r5, #0]
 8005566:	e753      	b.n	8005410 <main+0x824>
				allOff();
 8005568:	f7fe f832 	bl	80035d0 <allOff>
 800556c:	9b00      	ldr	r3, [sp, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	9304      	str	r3, [sp, #16]
			duty_cycle = 0;
 8005572:	9b05      	ldr	r3, [sp, #20]
 8005574:	602b      	str	r3, [r5, #0]
			if (brake || tempbrake) {
 8005576:	9b04      	ldr	r3, [sp, #16]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d100      	bne.n	800557e <main+0x992>
 800557c:	e6bc      	b.n	80052f8 <main+0x70c>
 800557e:	e6c0      	b.n	8005302 <main+0x716>
			zc_timeout_threshold = 2000;
 8005580:	22fa      	movs	r2, #250	; 0xfa
 8005582:	00d2      	lsls	r2, r2, #3
 8005584:	e6f7      	b.n	8005376 <main+0x78a>
			if (running == 0) {
 8005586:	465b      	mov	r3, fp
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d000      	beq.n	8005590 <main+0x9a4>
 800558e:	e6eb      	b.n	8005368 <main+0x77c>
				upthreshold = 2;
 8005590:	2202      	movs	r2, #2
 8005592:	495e      	ldr	r1, [pc, #376]	; (800570c <main+0xb20>)
 8005594:	600a      	str	r2, [r1, #0]
				threshold = 2;
 8005596:	495e      	ldr	r1, [pc, #376]	; (8005710 <main+0xb24>)
 8005598:	600a      	str	r2, [r1, #0]
				zctimeout = 0;
 800559a:	4a5e      	ldr	r2, [pc, #376]	; (8005714 <main+0xb28>)
 800559c:	6013      	str	r3, [r2, #0]
				startMotor(); // safety on for input testing   ************************************************
 800559e:	f7fe fc21 	bl	8003de4 <startMotor>
 80055a2:	e6e1      	b.n	8005368 <main+0x77c>
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80055a4:	2bc8      	cmp	r3, #200	; 0xc8
 80055a6:	db00      	blt.n	80055aa <main+0x9be>
 80055a8:	e644      	b.n	8005234 <main+0x648>
 80055aa:	23c8      	movs	r3, #200	; 0xc8
 80055ac:	e642      	b.n	8005234 <main+0x648>
					dir_reversed = 0;
 80055ae:	4653      	mov	r3, sl
 80055b0:	601c      	str	r4, [r3, #0]
 80055b2:	e5e6      	b.n	8005182 <main+0x596>
					forward = 1 - dir_reversed;
 80055b4:	4652      	mov	r2, sl
 80055b6:	6812      	ldr	r2, [r2, #0]
 80055b8:	3b13      	subs	r3, #19
 80055ba:	1a9b      	subs	r3, r3, r2
 80055bc:	4642      	mov	r2, r8
 80055be:	6013      	str	r3, [r2, #0]
 80055c0:	e5df      	b.n	8005182 <main+0x596>
 80055c2:	464b      	mov	r3, r9
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	e5e0      	b.n	800518a <main+0x59e>
					forward = dir_reversed;
 80055c8:	4652      	mov	r2, sl
 80055ca:	4643      	mov	r3, r8
 80055cc:	6812      	ldr	r2, [r2, #0]
 80055ce:	601a      	str	r2, [r3, #0]
 80055d0:	e5d7      	b.n	8005182 <main+0x596>
					bi_direction = 0;
 80055d2:	464b      	mov	r3, r9
 80055d4:	601c      	str	r4, [r3, #0]
					armed = 0;
 80055d6:	4b4a      	ldr	r3, [pc, #296]	; (8005700 <main+0xb14>)
 80055d8:	701c      	strb	r4, [r3, #0]
				dshotcommand = 0;
 80055da:	4b4f      	ldr	r3, [pc, #316]	; (8005718 <main+0xb2c>)
 80055dc:	601c      	str	r4, [r3, #0]
			} else if ((proshot || dshot) && bi_direction) {
 80055de:	4b4f      	ldr	r3, [pc, #316]	; (800571c <main+0xb30>)
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d100      	bne.n	80055e8 <main+0x9fc>
 80055e6:	e5d7      	b.n	8005198 <main+0x5ac>
				adjusted_input = newinput;
 80055e8:	9b03      	ldr	r3, [sp, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	6033      	str	r3, [r6, #0]
 80055ee:	e60d      	b.n	800520c <main+0x620>
 80055f0:	e7fe      	b.n	80055f0 <main+0xa04>
		newinput = 1001;
 80055f2:	4b4b      	ldr	r3, [pc, #300]	; (8005720 <main+0xb34>)
 80055f4:	001a      	movs	r2, r3
 80055f6:	9303      	str	r3, [sp, #12]
 80055f8:	4b4a      	ldr	r3, [pc, #296]	; (8005724 <main+0xb38>)
 80055fa:	6013      	str	r3, [r2, #0]
 80055fc:	e56d      	b.n	80050da <main+0x4ee>
					storeEEpromConfig();
 80055fe:	f7fd fe0d 	bl	800321c <storeEEpromConfig>
 8005602:	e7fe      	b.n	8005602 <main+0xa16>
					bi_direction = 1;
 8005604:	464a      	mov	r2, r9
 8005606:	3b09      	subs	r3, #9
 8005608:	6013      	str	r3, [r2, #0]
					armed = 0;
 800560a:	4b3d      	ldr	r3, [pc, #244]	; (8005700 <main+0xb14>)
 800560c:	701c      	strb	r4, [r3, #0]
				dshotcommand = 0;
 800560e:	4b42      	ldr	r3, [pc, #264]	; (8005718 <main+0xb2c>)
 8005610:	601c      	str	r4, [r3, #0]
			if (bi_direction == 1 && (proshot == 0 && dshot == 0)) {
 8005612:	4b42      	ldr	r3, [pc, #264]	; (800571c <main+0xb30>)
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d000      	beq.n	800561c <main+0xa30>
 800561a:	e5c5      	b.n	80051a8 <main+0x5bc>
 800561c:	4b42      	ldr	r3, [pc, #264]	; (8005728 <main+0xb3c>)
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	9304      	str	r3, [sp, #16]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d000      	beq.n	8005628 <main+0xa3c>
 8005626:	e5bf      	b.n	80051a8 <main+0x5bc>
				if (newinput > 1100) {
 8005628:	9b03      	ldr	r3, [sp, #12]
 800562a:	4a40      	ldr	r2, [pc, #256]	; (800572c <main+0xb40>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4293      	cmp	r3, r2
 8005630:	dd38      	ble.n	80056a4 <main+0xab8>
					if (forward == dir_reversed) {
 8005632:	4642      	mov	r2, r8
 8005634:	6810      	ldr	r0, [r2, #0]
 8005636:	4652      	mov	r2, sl
 8005638:	6812      	ldr	r2, [r2, #0]
 800563a:	4290      	cmp	r0, r2
 800563c:	d029      	beq.n	8005692 <main+0xaa6>
					if (prop_brake_active == 0) {
 800563e:	4a3c      	ldr	r2, [pc, #240]	; (8005730 <main+0xb44>)
 8005640:	7812      	ldrb	r2, [r2, #0]
 8005642:	2a00      	cmp	r2, #0
 8005644:	d104      	bne.n	8005650 <main+0xa64>
						adjusted_input = (newinput - 1050) * 3;
 8005646:	4a3b      	ldr	r2, [pc, #236]	; (8005734 <main+0xb48>)
 8005648:	1899      	adds	r1, r3, r2
 800564a:	004a      	lsls	r2, r1, #1
 800564c:	1852      	adds	r2, r2, r1
 800564e:	6032      	str	r2, [r6, #0]
				if (zctimeout >= zc_timeout_threshold) {
 8005650:	4a30      	ldr	r2, [pc, #192]	; (8005714 <main+0xb28>)
 8005652:	6812      	ldr	r2, [r2, #0]
 8005654:	9204      	str	r2, [sp, #16]
 8005656:	4a38      	ldr	r2, [pc, #224]	; (8005738 <main+0xb4c>)
 8005658:	6812      	ldr	r2, [r2, #0]
 800565a:	9205      	str	r2, [sp, #20]
 800565c:	9905      	ldr	r1, [sp, #20]
 800565e:	9a04      	ldr	r2, [sp, #16]
 8005660:	428a      	cmp	r2, r1
 8005662:	db09      	blt.n	8005678 <main+0xa8c>
					if (vehicle_mode != 3) { // car mode requires throttle return to center before direction change
 8005664:	4a35      	ldr	r2, [pc, #212]	; (800573c <main+0xb50>)
 8005666:	7812      	ldrb	r2, [r2, #0]
 8005668:	2a03      	cmp	r2, #3
 800566a:	d001      	beq.n	8005670 <main+0xa84>
						prop_brake_active = 0;
 800566c:	4a30      	ldr	r2, [pc, #192]	; (8005730 <main+0xb44>)
 800566e:	7014      	strb	r4, [r2, #0]
					startupcountdown = 0;
 8005670:	4a33      	ldr	r2, [pc, #204]	; (8005740 <main+0xb54>)
 8005672:	6014      	str	r4, [r2, #0]
					bemf_counts = 0;
 8005674:	4a33      	ldr	r2, [pc, #204]	; (8005744 <main+0xb58>)
 8005676:	6014      	str	r4, [r2, #0]
				if (newinput > 800 && newinput < 1100) {
 8005678:	4a33      	ldr	r2, [pc, #204]	; (8005748 <main+0xb5c>)
 800567a:	4694      	mov	ip, r2
 800567c:	2295      	movs	r2, #149	; 0x95
 800567e:	4463      	add	r3, ip
 8005680:	0052      	lsls	r2, r2, #1
 8005682:	4293      	cmp	r3, r2
 8005684:	d900      	bls.n	8005688 <main+0xa9c>
 8005686:	e5c0      	b.n	800520a <main+0x61e>
					prop_brake_active = 0;
 8005688:	4b29      	ldr	r3, [pc, #164]	; (8005730 <main+0xb44>)
					adjusted_input = 0;
 800568a:	6034      	str	r4, [r6, #0]
					prop_brake_active = 0;
 800568c:	701c      	strb	r4, [r3, #0]
				adjusted_input = 2000;
 800568e:	2300      	movs	r3, #0
 8005690:	e5c2      	b.n	8005218 <main+0x62c>
						adjusted_input = 0;
 8005692:	9a04      	ldr	r2, [sp, #16]
						prop_brake_active = 1;
 8005694:	4926      	ldr	r1, [pc, #152]	; (8005730 <main+0xb44>)
						adjusted_input = 0;
 8005696:	6032      	str	r2, [r6, #0]
						prop_brake_active = 1;
 8005698:	2201      	movs	r2, #1
 800569a:	700a      	strb	r2, [r1, #0]
						forward = 1 - dir_reversed;
 800569c:	4641      	mov	r1, r8
 800569e:	1a12      	subs	r2, r2, r0
 80056a0:	600a      	str	r2, [r1, #0]
 80056a2:	e7d5      	b.n	8005650 <main+0xa64>
				if (newinput < 800) {
 80056a4:	4a29      	ldr	r2, [pc, #164]	; (800574c <main+0xb60>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	dcd2      	bgt.n	8005650 <main+0xa64>
					if (forward == (1 - dir_reversed)) {
 80056aa:	4652      	mov	r2, sl
 80056ac:	2001      	movs	r0, #1
 80056ae:	6812      	ldr	r2, [r2, #0]
 80056b0:	1a81      	subs	r1, r0, r2
 80056b2:	468c      	mov	ip, r1
 80056b4:	4641      	mov	r1, r8
 80056b6:	6809      	ldr	r1, [r1, #0]
 80056b8:	458c      	cmp	ip, r1
 80056ba:	d00c      	beq.n	80056d6 <main+0xaea>
					if (prop_brake_active == 0) {
 80056bc:	4a1c      	ldr	r2, [pc, #112]	; (8005730 <main+0xb44>)
 80056be:	7812      	ldrb	r2, [r2, #0]
 80056c0:	2a00      	cmp	r2, #0
 80056c2:	d1c5      	bne.n	8005650 <main+0xa64>
						adjusted_input = (800 - newinput) * 3;
 80056c4:	22c8      	movs	r2, #200	; 0xc8
 80056c6:	0092      	lsls	r2, r2, #2
 80056c8:	1ad2      	subs	r2, r2, r3
 80056ca:	0051      	lsls	r1, r2, #1
 80056cc:	188a      	adds	r2, r1, r2
 80056ce:	6032      	str	r2, [r6, #0]
 80056d0:	e7be      	b.n	8005650 <main+0xa64>
					adjusted_input = 0;
 80056d2:	6034      	str	r4, [r6, #0]
 80056d4:	e7db      	b.n	800568e <main+0xaa2>
						prop_brake_active = 1;
 80056d6:	4916      	ldr	r1, [pc, #88]	; (8005730 <main+0xb44>)
 80056d8:	7008      	strb	r0, [r1, #0]
						adjusted_input = 0;
 80056da:	9904      	ldr	r1, [sp, #16]
 80056dc:	6031      	str	r1, [r6, #0]
						forward = dir_reversed;
 80056de:	4641      	mov	r1, r8
 80056e0:	600a      	str	r2, [r1, #0]
 80056e2:	e7b5      	b.n	8005650 <main+0xa64>
					dir_reversed = 1;
 80056e4:	4652      	mov	r2, sl
 80056e6:	3b07      	subs	r3, #7
 80056e8:	6013      	str	r3, [r2, #0]
 80056ea:	e54a      	b.n	8005182 <main+0x596>
			} else if (input - adjusted_input > 25) {
 80056ec:	1ad1      	subs	r1, r2, r3
 80056ee:	2919      	cmp	r1, #25
 80056f0:	dd02      	ble.n	80056f8 <main+0xb0c>
				input = input - 10;
 80056f2:	3a0a      	subs	r2, #10
 80056f4:	603a      	str	r2, [r7, #0]
 80056f6:	e596      	b.n	8005226 <main+0x63a>
				input = adjusted_input;
 80056f8:	603b      	str	r3, [r7, #0]
 80056fa:	e594      	b.n	8005226 <main+0x63a>
 80056fc:	200000a4 	.word	0x200000a4
 8005700:	200000a0 	.word	0x200000a0
 8005704:	000007ce 	.word	0x000007ce
 8005708:	000007cf 	.word	0x000007cf
 800570c:	20000054 	.word	0x20000054
 8005710:	20000050 	.word	0x20000050
 8005714:	20000180 	.word	0x20000180
 8005718:	2000010c 	.word	0x2000010c
 800571c:	20000144 	.word	0x20000144
 8005720:	2000012c 	.word	0x2000012c
 8005724:	000003e9 	.word	0x000003e9
 8005728:	20000108 	.word	0x20000108
 800572c:	0000044c 	.word	0x0000044c
 8005730:	20000133 	.word	0x20000133
 8005734:	fffffbe6 	.word	0xfffffbe6
 8005738:	2000005c 	.word	0x2000005c
 800573c:	20000058 	.word	0x20000058
 8005740:	20000164 	.word	0x20000164
 8005744:	20000280 	.word	0x20000280
 8005748:	fffffcdf 	.word	0xfffffcdf
 800574c:	0000031f 	.word	0x0000031f

08005750 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8005750:	e7fe      	b.n	8005750 <_Error_Handler>
 8005752:	46c0      	nop			; (mov r8, r8)

08005754 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005754:	2301      	movs	r3, #1

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8005756:	2005      	movs	r0, #5
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005758:	4a0e      	ldr	r2, [pc, #56]	; (8005794 <HAL_MspInit+0x40>)
{
 800575a:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800575c:	6991      	ldr	r1, [r2, #24]
{
 800575e:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005760:	4319      	orrs	r1, r3
 8005762:	6191      	str	r1, [r2, #24]
 8005764:	6992      	ldr	r2, [r2, #24]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8005766:	2100      	movs	r1, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005768:	4013      	ands	r3, r2
 800576a:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 800576c:	2200      	movs	r2, #0
 800576e:	4240      	negs	r0, r0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005770:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8005772:	f7fb fa11 	bl	8000b98 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8005776:	2002      	movs	r0, #2
 8005778:	2200      	movs	r2, #0
 800577a:	2100      	movs	r1, #0
 800577c:	4240      	negs	r0, r0
 800577e:	f7fb fa0b 	bl	8000b98 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8005782:	2001      	movs	r0, #1
 8005784:	2200      	movs	r2, #0
 8005786:	2100      	movs	r1, #0
 8005788:	4240      	negs	r0, r0
 800578a:	f7fb fa05 	bl	8000b98 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800578e:	b003      	add	sp, #12
 8005790:	bd00      	pop	{pc}
 8005792:	46c0      	nop			; (mov r8, r8)
 8005794:	40021000 	.word	0x40021000

08005798 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005798:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 800579a:	4b20      	ldr	r3, [pc, #128]	; (800581c <HAL_ADC_MspInit+0x84>)
 800579c:	6802      	ldr	r2, [r0, #0]
{
 800579e:	b087      	sub	sp, #28
 80057a0:	0004      	movs	r4, r0
  if(hadc->Instance==ADC1)
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d001      	beq.n	80057aa <HAL_ADC_MspInit+0x12>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80057a6:	b007      	add	sp, #28
 80057a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 80057aa:	2780      	movs	r7, #128	; 0x80
 80057ac:	4b1c      	ldr	r3, [pc, #112]	; (8005820 <HAL_ADC_MspInit+0x88>)
 80057ae:	00bf      	lsls	r7, r7, #2
 80057b0:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057b2:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_ADC1_CLK_ENABLE();
 80057b4:	433a      	orrs	r2, r7
 80057b6:	619a      	str	r2, [r3, #24]
 80057b8:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057ba:	2600      	movs	r6, #0
    __HAL_RCC_ADC1_CLK_ENABLE();
 80057bc:	403b      	ands	r3, r7
 80057be:	9300      	str	r3, [sp, #0]
 80057c0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 80057c2:	2348      	movs	r3, #72	; 0x48
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057c4:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 80057c6:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057c8:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80057ca:	3b45      	subs	r3, #69	; 0x45
 80057cc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057ce:	9603      	str	r6, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057d0:	f7fb fcb6 	bl	8001140 <HAL_GPIO_Init>
    hdma_adc.Instance = DMA1_Channel1;
 80057d4:	4d13      	ldr	r5, [pc, #76]	; (8005824 <HAL_ADC_MspInit+0x8c>)
 80057d6:	4b14      	ldr	r3, [pc, #80]	; (8005828 <HAL_ADC_MspInit+0x90>)
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80057d8:	0028      	movs	r0, r5
    hdma_adc.Instance = DMA1_Channel1;
 80057da:	602b      	str	r3, [r5, #0]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80057dc:	2380      	movs	r3, #128	; 0x80
 80057de:	60eb      	str	r3, [r5, #12]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80057e0:	2380      	movs	r3, #128	; 0x80
 80057e2:	011b      	lsls	r3, r3, #4
 80057e4:	616b      	str	r3, [r5, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80057e6:	2320      	movs	r3, #32
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80057e8:	606e      	str	r6, [r5, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80057ea:	60ae      	str	r6, [r5, #8]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80057ec:	612f      	str	r7, [r5, #16]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80057ee:	61ab      	str	r3, [r5, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80057f0:	61ee      	str	r6, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80057f2:	f7fb fa3f 	bl	8000c74 <HAL_DMA_Init>
 80057f6:	2800      	cmp	r0, #0
 80057f8:	d10a      	bne.n	8005810 <HAL_ADC_MspInit+0x78>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80057fa:	63e5      	str	r5, [r4, #60]	; 0x3c
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 80057fc:	2200      	movs	r2, #0
 80057fe:	2100      	movs	r1, #0
 8005800:	200c      	movs	r0, #12
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8005802:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8005804:	f7fb f9c8 	bl	8000b98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8005808:	200c      	movs	r0, #12
 800580a:	f7fb f9f9 	bl	8000c00 <HAL_NVIC_EnableIRQ>
}
 800580e:	e7ca      	b.n	80057a6 <HAL_ADC_MspInit+0xe>
      _Error_Handler(__FILE__, __LINE__);
 8005810:	216b      	movs	r1, #107	; 0x6b
 8005812:	4806      	ldr	r0, [pc, #24]	; (800582c <HAL_ADC_MspInit+0x94>)
 8005814:	f7ff ff9c 	bl	8005750 <_Error_Handler>
 8005818:	e7ef      	b.n	80057fa <HAL_ADC_MspInit+0x62>
 800581a:	46c0      	nop			; (mov r8, r8)
 800581c:	40012400 	.word	0x40012400
 8005820:	40021000 	.word	0x40021000
 8005824:	20000454 	.word	0x20000454
 8005828:	40020008 	.word	0x40020008
 800582c:	08005b8c 	.word	0x08005b8c

08005830 <HAL_COMP_MspInit>:
  }

}

void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8005830:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcomp->Instance==COMP1)
 8005832:	4b0d      	ldr	r3, [pc, #52]	; (8005868 <HAL_COMP_MspInit+0x38>)
 8005834:	6802      	ldr	r2, [r0, #0]
{
 8005836:	b087      	sub	sp, #28
  if(hcomp->Instance==COMP1)
 8005838:	429a      	cmp	r2, r3
 800583a:	d001      	beq.n	8005840 <HAL_COMP_MspInit+0x10>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 800583c:	b007      	add	sp, #28
 800583e:	bd00      	pop	{pc}
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8005840:	2322      	movs	r3, #34	; 0x22
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005842:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8005844:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005846:	3b1f      	subs	r3, #31
 8005848:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800584a:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800584c:	a901      	add	r1, sp, #4
 800584e:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005850:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005852:	f7fb fc75 	bl	8001140 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8005856:	2200      	movs	r2, #0
 8005858:	2100      	movs	r1, #0
 800585a:	200c      	movs	r0, #12
 800585c:	f7fb f99c 	bl	8000b98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8005860:	200c      	movs	r0, #12
 8005862:	f7fb f9cd 	bl	8000c00 <HAL_NVIC_EnableIRQ>
}
 8005866:	e7e9      	b.n	800583c <HAL_COMP_MspInit+0xc>
 8005868:	4001001c 	.word	0x4001001c

0800586c <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800586c:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_base->Instance==TIM1)
 800586e:	6803      	ldr	r3, [r0, #0]
 8005870:	4a3e      	ldr	r2, [pc, #248]	; (800596c <HAL_TIM_Base_MspInit+0x100>)
{
 8005872:	b08a      	sub	sp, #40	; 0x28
 8005874:	0004      	movs	r4, r0
  if(htim_base->Instance==TIM1)
 8005876:	4293      	cmp	r3, r2
 8005878:	d00e      	beq.n	8005898 <HAL_TIM_Base_MspInit+0x2c>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 800587a:	2280      	movs	r2, #128	; 0x80
 800587c:	05d2      	lsls	r2, r2, #23
 800587e:	4293      	cmp	r3, r2
 8005880:	d015      	beq.n	80058ae <HAL_TIM_Base_MspInit+0x42>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8005882:	4a3b      	ldr	r2, [pc, #236]	; (8005970 <HAL_TIM_Base_MspInit+0x104>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d01c      	beq.n	80058c2 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM15)
 8005888:	4a3a      	ldr	r2, [pc, #232]	; (8005974 <HAL_TIM_Base_MspInit+0x108>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d036      	beq.n	80058fc <HAL_TIM_Base_MspInit+0x90>

  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
  else if(htim_base->Instance==TIM16)
 800588e:	4a3a      	ldr	r2, [pc, #232]	; (8005978 <HAL_TIM_Base_MspInit+0x10c>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d020      	beq.n	80058d6 <HAL_TIM_Base_MspInit+0x6a>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8005894:	b00a      	add	sp, #40	; 0x28
 8005896:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005898:	2080      	movs	r0, #128	; 0x80
 800589a:	4a38      	ldr	r2, [pc, #224]	; (800597c <HAL_TIM_Base_MspInit+0x110>)
 800589c:	0100      	lsls	r0, r0, #4
 800589e:	6991      	ldr	r1, [r2, #24]
 80058a0:	4301      	orrs	r1, r0
 80058a2:	6191      	str	r1, [r2, #24]
 80058a4:	6993      	ldr	r3, [r2, #24]
 80058a6:	4003      	ands	r3, r0
 80058a8:	9301      	str	r3, [sp, #4]
 80058aa:	9b01      	ldr	r3, [sp, #4]
 80058ac:	e7f2      	b.n	8005894 <HAL_TIM_Base_MspInit+0x28>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80058ae:	2301      	movs	r3, #1
 80058b0:	4a32      	ldr	r2, [pc, #200]	; (800597c <HAL_TIM_Base_MspInit+0x110>)
 80058b2:	69d1      	ldr	r1, [r2, #28]
 80058b4:	4319      	orrs	r1, r3
 80058b6:	61d1      	str	r1, [r2, #28]
 80058b8:	69d2      	ldr	r2, [r2, #28]
 80058ba:	4013      	ands	r3, r2
 80058bc:	9302      	str	r3, [sp, #8]
 80058be:	9b02      	ldr	r3, [sp, #8]
 80058c0:	e7e8      	b.n	8005894 <HAL_TIM_Base_MspInit+0x28>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80058c2:	2302      	movs	r3, #2
 80058c4:	4a2d      	ldr	r2, [pc, #180]	; (800597c <HAL_TIM_Base_MspInit+0x110>)
 80058c6:	69d1      	ldr	r1, [r2, #28]
 80058c8:	4319      	orrs	r1, r3
 80058ca:	61d1      	str	r1, [r2, #28]
 80058cc:	69d2      	ldr	r2, [r2, #28]
 80058ce:	4013      	ands	r3, r2
 80058d0:	9303      	str	r3, [sp, #12]
 80058d2:	9b03      	ldr	r3, [sp, #12]
 80058d4:	e7de      	b.n	8005894 <HAL_TIM_Base_MspInit+0x28>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80058d6:	2080      	movs	r0, #128	; 0x80
 80058d8:	4a28      	ldr	r2, [pc, #160]	; (800597c <HAL_TIM_Base_MspInit+0x110>)
 80058da:	0280      	lsls	r0, r0, #10
 80058dc:	6991      	ldr	r1, [r2, #24]
 80058de:	4301      	orrs	r1, r0
 80058e0:	6191      	str	r1, [r2, #24]
 80058e2:	6993      	ldr	r3, [r2, #24]
    HAL_NVIC_SetPriority(TIM16_IRQn, 1, 0);
 80058e4:	2101      	movs	r1, #1
    __HAL_RCC_TIM16_CLK_ENABLE();
 80058e6:	4003      	ands	r3, r0
 80058e8:	9305      	str	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM16_IRQn, 1, 0);
 80058ea:	2200      	movs	r2, #0
 80058ec:	2015      	movs	r0, #21
    __HAL_RCC_TIM16_CLK_ENABLE();
 80058ee:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM16_IRQn, 1, 0);
 80058f0:	f7fb f952 	bl	8000b98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80058f4:	2015      	movs	r0, #21
 80058f6:	f7fb f983 	bl	8000c00 <HAL_NVIC_EnableIRQ>
}
 80058fa:	e7cb      	b.n	8005894 <HAL_TIM_Base_MspInit+0x28>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80058fc:	2080      	movs	r0, #128	; 0x80
 80058fe:	4a1f      	ldr	r2, [pc, #124]	; (800597c <HAL_TIM_Base_MspInit+0x110>)
 8005900:	0240      	lsls	r0, r0, #9
 8005902:	6991      	ldr	r1, [r2, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005904:	2600      	movs	r6, #0
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005906:	4301      	orrs	r1, r0
 8005908:	6191      	str	r1, [r2, #24]
 800590a:	6993      	ldr	r3, [r2, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800590c:	a905      	add	r1, sp, #20
    __HAL_RCC_TIM15_CLK_ENABLE();
 800590e:	4003      	ands	r3, r0
 8005910:	9304      	str	r3, [sp, #16]
 8005912:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005914:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005916:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005918:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800591a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800591c:	3b02      	subs	r3, #2
 800591e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005920:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005922:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM15;
 8005924:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005926:	f7fb fc0b 	bl	8001140 <HAL_GPIO_Init>
    hdma_tim15_ch1_up_trig_com.Instance = DMA1_Channel5;
 800592a:	4d15      	ldr	r5, [pc, #84]	; (8005980 <HAL_TIM_Base_MspInit+0x114>)
 800592c:	4b15      	ldr	r3, [pc, #84]	; (8005984 <HAL_TIM_Base_MspInit+0x118>)
    if (HAL_DMA_Init(&hdma_tim15_ch1_up_trig_com) != HAL_OK)
 800592e:	0028      	movs	r0, r5
    hdma_tim15_ch1_up_trig_com.Instance = DMA1_Channel5;
 8005930:	602b      	str	r3, [r5, #0]
    hdma_tim15_ch1_up_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 8005932:	2380      	movs	r3, #128	; 0x80
 8005934:	60eb      	str	r3, [r5, #12]
    hdma_tim15_ch1_up_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005936:	3380      	adds	r3, #128	; 0x80
 8005938:	612b      	str	r3, [r5, #16]
    hdma_tim15_ch1_up_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800593a:	2380      	movs	r3, #128	; 0x80
 800593c:	011b      	lsls	r3, r3, #4
 800593e:	616b      	str	r3, [r5, #20]
    hdma_tim15_ch1_up_trig_com.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005940:	2380      	movs	r3, #128	; 0x80
 8005942:	015b      	lsls	r3, r3, #5
    hdma_tim15_ch1_up_trig_com.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005944:	606e      	str	r6, [r5, #4]
    hdma_tim15_ch1_up_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 8005946:	60ae      	str	r6, [r5, #8]
    hdma_tim15_ch1_up_trig_com.Init.Mode = DMA_NORMAL;
 8005948:	61ae      	str	r6, [r5, #24]
    hdma_tim15_ch1_up_trig_com.Init.Priority = DMA_PRIORITY_MEDIUM;
 800594a:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_tim15_ch1_up_trig_com) != HAL_OK)
 800594c:	f7fb f992 	bl	8000c74 <HAL_DMA_Init>
 8005950:	2800      	cmp	r0, #0
 8005952:	d004      	beq.n	800595e <HAL_TIM_Base_MspInit+0xf2>
      _Error_Handler(__FILE__, __LINE__);
 8005954:	211e      	movs	r1, #30
 8005956:	480c      	ldr	r0, [pc, #48]	; (8005988 <HAL_TIM_Base_MspInit+0x11c>)
 8005958:	31ff      	adds	r1, #255	; 0xff
 800595a:	f7ff fef9 	bl	8005750 <_Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim15_ch1_up_trig_com);
 800595e:	6265      	str	r5, [r4, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim15_ch1_up_trig_com);
 8005960:	6225      	str	r5, [r4, #32]
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim15_ch1_up_trig_com);
 8005962:	63a5      	str	r5, [r4, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim15_ch1_up_trig_com);
 8005964:	626c      	str	r4, [r5, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim15_ch1_up_trig_com);
 8005966:	6365      	str	r5, [r4, #52]	; 0x34
 8005968:	e794      	b.n	8005894 <HAL_TIM_Base_MspInit+0x28>
 800596a:	46c0      	nop			; (mov r8, r8)
 800596c:	40012c00 	.word	0x40012c00
 8005970:	40000400 	.word	0x40000400
 8005974:	40014000 	.word	0x40014000
 8005978:	40014400 	.word	0x40014400
 800597c:	40021000 	.word	0x40021000
 8005980:	20000388 	.word	0x20000388
 8005984:	40020058 	.word	0x40020058
 8005988:	08005b8c 	.word	0x08005b8c

0800598c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800598c:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 800598e:	4b10      	ldr	r3, [pc, #64]	; (80059d0 <HAL_TIM_MspPostInit+0x44>)
 8005990:	6802      	ldr	r2, [r0, #0]
{
 8005992:	b087      	sub	sp, #28
  if(htim->Instance==TIM1)
 8005994:	429a      	cmp	r2, r3
 8005996:	d001      	beq.n	800599c <HAL_TIM_MspPostInit+0x10>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005998:	b007      	add	sp, #28
 800599a:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 800599c:	23f8      	movs	r3, #248	; 0xf8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800599e:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059a0:	2402      	movs	r4, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059a2:	2500      	movs	r5, #0
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 80059a4:	011b      	lsls	r3, r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059a6:	a901      	add	r1, sp, #4
 80059a8:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 80059aa:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059ac:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059ae:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059b0:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80059b2:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059b4:	f7fb fbc4 	bl	8001140 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80059b8:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059ba:	a901      	add	r1, sp, #4
 80059bc:	4805      	ldr	r0, [pc, #20]	; (80059d4 <HAL_TIM_MspPostInit+0x48>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80059be:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059c0:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059c2:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059c4:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80059c6:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059c8:	f7fb fbba 	bl	8001140 <HAL_GPIO_Init>
}
 80059cc:	e7e4      	b.n	8005998 <HAL_TIM_MspPostInit+0xc>
 80059ce:	46c0      	nop			; (mov r8, r8)
 80059d0:	40012c00 	.word	0x40012c00
 80059d4:	48000400 	.word	0x48000400

080059d8 <NMI_Handler>:
 80059d8:	4770      	bx	lr
 80059da:	46c0      	nop			; (mov r8, r8)

080059dc <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80059dc:	e7fe      	b.n	80059dc <HardFault_Handler>
 80059de:	46c0      	nop			; (mov r8, r8)

080059e0 <SVC_Handler>:
 80059e0:	4770      	bx	lr
 80059e2:	46c0      	nop			; (mov r8, r8)

080059e4 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80059e4:	4770      	bx	lr
 80059e6:	46c0      	nop			; (mov r8, r8)

080059e8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80059e8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80059ea:	f7fa fd25 	bl	8000438 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80059ee:	f7fb f93d 	bl	8000c6c <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80059f2:	bd10      	pop	{r4, pc}

080059f4 <DMA1_Channel1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt.
*/
void DMA1_Channel1_IRQHandler(void)
{
 80059f4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80059f6:	4802      	ldr	r0, [pc, #8]	; (8005a00 <DMA1_Channel1_IRQHandler+0xc>)
 80059f8:	f7fb f9b0 	bl	8000d5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80059fc:	bd10      	pop	{r4, pc}
 80059fe:	46c0      	nop			; (mov r8, r8)
 8005a00:	20000454 	.word	0x20000454

08005a04 <DMA1_Channel4_5_IRQHandler>:

/**
* @brief This function handles DMA1 channel 4 and 5 interrupts.
*/
void DMA1_Channel4_5_IRQHandler(void)
{
 8005a04:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim15_ch1_up_trig_com);
 8005a06:	4804      	ldr	r0, [pc, #16]	; (8005a18 <DMA1_Channel4_5_IRQHandler+0x14>)
 8005a08:	f7fb f9a8 	bl	8000d5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */
  transferComplete();
 8005a0c:	f7fe ffe2 	bl	80049d4 <transferComplete>
  TIM16->CNT = 0;
 8005a10:	2200      	movs	r2, #0
 8005a12:	4b02      	ldr	r3, [pc, #8]	; (8005a1c <DMA1_Channel4_5_IRQHandler+0x18>)
 8005a14:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8005a16:	bd10      	pop	{r4, pc}
 8005a18:	20000388 	.word	0x20000388
 8005a1c:	40014400 	.word	0x40014400

08005a20 <ADC1_COMP_IRQHandler>:

/**
* @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
*/
void ADC1_COMP_IRQHandler(void)
{
 8005a20:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */
//	HAL_COMP_IRQHandler(&hcomp1);
  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8005a22:	4803      	ldr	r0, [pc, #12]	; (8005a30 <ADC1_COMP_IRQHandler+0x10>)
 8005a24:	f7fa fec0 	bl	80007a8 <HAL_ADC_IRQHandler>
  HAL_COMP_IRQHandler(&hcomp1);
 8005a28:	4802      	ldr	r0, [pc, #8]	; (8005a34 <ADC1_COMP_IRQHandler+0x14>)
 8005a2a:	f7fb f89f 	bl	8000b6c <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8005a2e:	bd10      	pop	{r4, pc}
 8005a30:	20000498 	.word	0x20000498
 8005a34:	20000210 	.word	0x20000210

08005a38 <TIM16_IRQHandler>:

/**
* @brief This function handles TIM16 global interrupt.
*/
void TIM16_IRQHandler(void)
{
 8005a38:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8005a3a:	4802      	ldr	r0, [pc, #8]	; (8005a44 <TIM16_IRQHandler+0xc>)
 8005a3c:	f7fc fdea 	bl	8002614 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8005a40:	bd10      	pop	{r4, pc}
 8005a42:	46c0      	nop			; (mov r8, r8)
 8005a44:	200004e4 	.word	0x200004e4

08005a48 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8005a48:	2101      	movs	r1, #1
 8005a4a:	4b11      	ldr	r3, [pc, #68]	; (8005a90 <SystemInit+0x48>)

#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 8005a4c:	4811      	ldr	r0, [pc, #68]	; (8005a94 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	430a      	orrs	r2, r1
 8005a52:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 8005a54:	685a      	ldr	r2, [r3, #4]
 8005a56:	4002      	ands	r2, r0
 8005a58:	605a      	str	r2, [r3, #4]
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	480e      	ldr	r0, [pc, #56]	; (8005a98 <SystemInit+0x50>)
 8005a5e:	4002      	ands	r2, r0
 8005a60:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	480d      	ldr	r0, [pc, #52]	; (8005a9c <SystemInit+0x54>)
 8005a66:	4002      	ands	r2, r0
 8005a68:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8005a6a:	685a      	ldr	r2, [r3, #4]
 8005a6c:	480c      	ldr	r0, [pc, #48]	; (8005aa0 <SystemInit+0x58>)
 8005a6e:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8005a70:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8005a72:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8005a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a76:	4382      	bics	r2, r0
 8005a78:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
#elif defined (STM32F051x8) || defined (STM32F058xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
 8005a7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a7c:	4809      	ldr	r0, [pc, #36]	; (8005aa4 <SystemInit+0x5c>)
 8005a7e:	4002      	ands	r2, r0
 8005a80:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8005a82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a84:	438a      	bics	r2, r1
 8005a86:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8005a88:	2200      	movs	r2, #0
 8005a8a:	609a      	str	r2, [r3, #8]

}
 8005a8c:	4770      	bx	lr
 8005a8e:	46c0      	nop			; (mov r8, r8)
 8005a90:	40021000 	.word	0x40021000
 8005a94:	f8ffb80c 	.word	0xf8ffb80c
 8005a98:	fef6ffff 	.word	0xfef6ffff
 8005a9c:	fffbffff 	.word	0xfffbffff
 8005aa0:	ffc0ffff 	.word	0xffc0ffff
 8005aa4:	fffffeac 	.word	0xfffffeac

08005aa8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005aa8:	480d      	ldr	r0, [pc, #52]	; (8005ae0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005aaa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005aac:	480d      	ldr	r0, [pc, #52]	; (8005ae4 <LoopForever+0x6>)
  ldr r1, =_edata
 8005aae:	490e      	ldr	r1, [pc, #56]	; (8005ae8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005ab0:	4a0e      	ldr	r2, [pc, #56]	; (8005aec <LoopForever+0xe>)
  movs r3, #0
 8005ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005ab4:	e002      	b.n	8005abc <LoopCopyDataInit>

08005ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005aba:	3304      	adds	r3, #4

08005abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005ac0:	d3f9      	bcc.n	8005ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005ac2:	4a0b      	ldr	r2, [pc, #44]	; (8005af0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005ac4:	4c0b      	ldr	r4, [pc, #44]	; (8005af4 <LoopForever+0x16>)
  movs r3, #0
 8005ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005ac8:	e001      	b.n	8005ace <LoopFillZerobss>

08005aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005acc:	3204      	adds	r2, #4

08005ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005ad0:	d3fb      	bcc.n	8005aca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005ad2:	f7ff ffb9 	bl	8005a48 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8005ad6:	f000 f811 	bl	8005afc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005ada:	f7ff f887 	bl	8004bec <main>

08005ade <LoopForever>:

LoopForever:
    b LoopForever
 8005ade:	e7fe      	b.n	8005ade <LoopForever>
  ldr   r0, =_estack
 8005ae0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8005ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005ae8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8005aec:	08005bc0 	.word	0x08005bc0
  ldr r2, =_sbss
 8005af0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8005af4:	20000524 	.word	0x20000524

08005af8 <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005af8:	e7fe      	b.n	8005af8 <CEC_CAN_IRQHandler>
	...

08005afc <__libc_init_array>:
 8005afc:	b570      	push	{r4, r5, r6, lr}
 8005afe:	2600      	movs	r6, #0
 8005b00:	4d0c      	ldr	r5, [pc, #48]	; (8005b34 <__libc_init_array+0x38>)
 8005b02:	4c0d      	ldr	r4, [pc, #52]	; (8005b38 <__libc_init_array+0x3c>)
 8005b04:	1b64      	subs	r4, r4, r5
 8005b06:	10a4      	asrs	r4, r4, #2
 8005b08:	42a6      	cmp	r6, r4
 8005b0a:	d109      	bne.n	8005b20 <__libc_init_array+0x24>
 8005b0c:	2600      	movs	r6, #0
 8005b0e:	f000 f821 	bl	8005b54 <_init>
 8005b12:	4d0a      	ldr	r5, [pc, #40]	; (8005b3c <__libc_init_array+0x40>)
 8005b14:	4c0a      	ldr	r4, [pc, #40]	; (8005b40 <__libc_init_array+0x44>)
 8005b16:	1b64      	subs	r4, r4, r5
 8005b18:	10a4      	asrs	r4, r4, #2
 8005b1a:	42a6      	cmp	r6, r4
 8005b1c:	d105      	bne.n	8005b2a <__libc_init_array+0x2e>
 8005b1e:	bd70      	pop	{r4, r5, r6, pc}
 8005b20:	00b3      	lsls	r3, r6, #2
 8005b22:	58eb      	ldr	r3, [r5, r3]
 8005b24:	4798      	blx	r3
 8005b26:	3601      	adds	r6, #1
 8005b28:	e7ee      	b.n	8005b08 <__libc_init_array+0xc>
 8005b2a:	00b3      	lsls	r3, r6, #2
 8005b2c:	58eb      	ldr	r3, [r5, r3]
 8005b2e:	4798      	blx	r3
 8005b30:	3601      	adds	r6, #1
 8005b32:	e7f2      	b.n	8005b1a <__libc_init_array+0x1e>
 8005b34:	08005bb8 	.word	0x08005bb8
 8005b38:	08005bb8 	.word	0x08005bb8
 8005b3c:	08005bb8 	.word	0x08005bb8
 8005b40:	08005bbc 	.word	0x08005bbc

08005b44 <memset>:
 8005b44:	0003      	movs	r3, r0
 8005b46:	1882      	adds	r2, r0, r2
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d100      	bne.n	8005b4e <memset+0xa>
 8005b4c:	4770      	bx	lr
 8005b4e:	7019      	strb	r1, [r3, #0]
 8005b50:	3301      	adds	r3, #1
 8005b52:	e7f9      	b.n	8005b48 <memset+0x4>

08005b54 <_init>:
 8005b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b56:	46c0      	nop			; (mov r8, r8)
 8005b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b5a:	bc08      	pop	{r3}
 8005b5c:	469e      	mov	lr, r3
 8005b5e:	4770      	bx	lr

08005b60 <_fini>:
 8005b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b62:	46c0      	nop			; (mov r8, r8)
 8005b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b66:	bc08      	pop	{r3}
 8005b68:	469e      	mov	lr, r3
 8005b6a:	4770      	bx	lr
