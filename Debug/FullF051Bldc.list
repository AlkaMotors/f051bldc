
FullF051Bldc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061ac  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ec  0800626c  0800626c  0001626c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006858  08006858  000200d8  2**0
                  CONTENTS
  4 .ARM          00000000  08006858  08006858  000200d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006858  08006858  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006858  08006858  00016858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800685c  0800685c  0001685c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  08006860  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000668  200000d8  08006938  000200d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000740  08006938  00020740  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013c35  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002cbd  00000000  00000000  00033d35  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000f713  00000000  00000000  000369f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000b00  00000000  00000000  00046108  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002ba0  00000000  00000000  00046c08  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00010217  00000000  00000000  000497a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000cfcb  00000000  00000000  000599bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0005c720  00000000  00000000  0006698a  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000c30aa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002084  00000000  00000000  000c3128  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000d8 	.word	0x200000d8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006254 	.word	0x08006254

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000dc 	.word	0x200000dc
 8000104:	08006254 	.word	0x08006254

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003f4:	b510      	push	{r4, lr}
 80003f6:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80003f8:	20fa      	movs	r0, #250	; 0xfa
 80003fa:	4b0e      	ldr	r3, [pc, #56]	; (8000434 <HAL_InitTick+0x40>)
 80003fc:	0080      	lsls	r0, r0, #2
 80003fe:	7819      	ldrb	r1, [r3, #0]
 8000400:	f7ff fe82 	bl	8000108 <__udivsi3>
 8000404:	4b0c      	ldr	r3, [pc, #48]	; (8000438 <HAL_InitTick+0x44>)
 8000406:	0001      	movs	r1, r0
 8000408:	6818      	ldr	r0, [r3, #0]
 800040a:	f7ff fe7d 	bl	8000108 <__udivsi3>
 800040e:	f000 fb51 	bl	8000ab4 <HAL_SYSTICK_Config>
  {
    return HAL_ERROR;
 8000412:	2301      	movs	r3, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000414:	2800      	cmp	r0, #0
 8000416:	d101      	bne.n	800041c <HAL_InitTick+0x28>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000418:	2c03      	cmp	r4, #3
 800041a:	d901      	bls.n	8000420 <HAL_InitTick+0x2c>
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 800041c:	0018      	movs	r0, r3
 800041e:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000420:	2200      	movs	r2, #0
 8000422:	0021      	movs	r1, r4
 8000424:	3801      	subs	r0, #1
 8000426:	f000 fb0d 	bl	8000a44 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800042a:	4b04      	ldr	r3, [pc, #16]	; (800043c <HAL_InitTick+0x48>)
 800042c:	601c      	str	r4, [r3, #0]
 800042e:	2300      	movs	r3, #0
 8000430:	e7f4      	b.n	800041c <HAL_InitTick+0x28>
 8000432:	46c0      	nop			; (mov r8, r8)
 8000434:	20000000 	.word	0x20000000
 8000438:	200000d4 	.word	0x200000d4
 800043c:	20000004 	.word	0x20000004

08000440 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000440:	2110      	movs	r1, #16
 8000442:	4a06      	ldr	r2, [pc, #24]	; (800045c <HAL_Init+0x1c>)
{
 8000444:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000446:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000448:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800044a:	430b      	orrs	r3, r1
 800044c:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800044e:	f7ff ffd1 	bl	80003f4 <HAL_InitTick>
  HAL_MspInit();
 8000452:	f005 fc57 	bl	8005d04 <HAL_MspInit>
}
 8000456:	2000      	movs	r0, #0
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	40022000 	.word	0x40022000

08000460 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000460:	4a03      	ldr	r2, [pc, #12]	; (8000470 <HAL_IncTick+0x10>)
 8000462:	4b04      	ldr	r3, [pc, #16]	; (8000474 <HAL_IncTick+0x14>)
 8000464:	6811      	ldr	r1, [r2, #0]
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	185b      	adds	r3, r3, r1
 800046a:	6013      	str	r3, [r2, #0]
}
 800046c:	4770      	bx	lr
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	20000270 	.word	0x20000270
 8000474:	20000000 	.word	0x20000000

08000478 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000478:	4b01      	ldr	r3, [pc, #4]	; (8000480 <HAL_GetTick+0x8>)
 800047a:	6818      	ldr	r0, [r3, #0]
}
 800047c:	4770      	bx	lr
 800047e:	46c0      	nop			; (mov r8, r8)
 8000480:	20000270 	.word	0x20000270

08000484 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000484:	b570      	push	{r4, r5, r6, lr}
 8000486:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000488:	f7ff fff6 	bl	8000478 <HAL_GetTick>
 800048c:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800048e:	1c63      	adds	r3, r4, #1
 8000490:	d002      	beq.n	8000498 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000492:	4b04      	ldr	r3, [pc, #16]	; (80004a4 <HAL_Delay+0x20>)
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000498:	f7ff ffee 	bl	8000478 <HAL_GetTick>
 800049c:	1b40      	subs	r0, r0, r5
 800049e:	42a0      	cmp	r0, r4
 80004a0:	d3fa      	bcc.n	8000498 <HAL_Delay+0x14>
  {
  }
}
 80004a2:	bd70      	pop	{r4, r5, r6, pc}
 80004a4:	20000000 	.word	0x20000000

080004a8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80004a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004aa:	1e04      	subs	r4, r0, #0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0U;

  /* Check ADC handle */
  if(hadc == NULL)
 80004ac:	d100      	bne.n	80004b0 <HAL_ADC_Init+0x8>
 80004ae:	e076      	b.n	800059e <HAL_ADC_Init+0xf6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80004b0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d069      	beq.n	800058a <HAL_ADC_Init+0xe2>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80004b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80004b8:	06db      	lsls	r3, r3, #27
 80004ba:	d505      	bpl.n	80004c8 <HAL_ADC_Init+0x20>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80004bc:	2210      	movs	r2, #16
        
    tmp_hal_status = HAL_ERROR;
 80004be:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80004c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80004c2:	4313      	orrs	r3, r2
 80004c4:	63a3      	str	r3, [r4, #56]	; 0x38
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 80004c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80004c8:	2004      	movs	r0, #4
 80004ca:	6823      	ldr	r3, [r4, #0]
 80004cc:	689a      	ldr	r2, [r3, #8]
 80004ce:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 80004d0:	d1f4      	bne.n	80004bc <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 80004d2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80004d4:	4947      	ldr	r1, [pc, #284]	; (80005f4 <HAL_ADC_Init+0x14c>)
 80004d6:	400a      	ands	r2, r1
 80004d8:	3106      	adds	r1, #6
 80004da:	31ff      	adds	r1, #255	; 0xff
 80004dc:	430a      	orrs	r2, r1
 80004de:	63a2      	str	r2, [r4, #56]	; 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 80004e0:	2203      	movs	r2, #3
 80004e2:	6899      	ldr	r1, [r3, #8]
 80004e4:	400a      	ands	r2, r1
 80004e6:	2a01      	cmp	r2, #1
 80004e8:	d074      	beq.n	80005d4 <HAL_ADC_Init+0x12c>
      MODIFY_REG(hadc->Instance->CFGR1,
 80004ea:	2118      	movs	r1, #24
 80004ec:	68da      	ldr	r2, [r3, #12]
 80004ee:	438a      	bics	r2, r1
 80004f0:	68a1      	ldr	r1, [r4, #8]
 80004f2:	430a      	orrs	r2, r1
 80004f4:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80004f6:	691a      	ldr	r2, [r3, #16]
 80004f8:	6861      	ldr	r1, [r4, #4]
 80004fa:	0092      	lsls	r2, r2, #2
 80004fc:	0892      	lsrs	r2, r2, #2
 80004fe:	430a      	orrs	r2, r1
 8000500:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000502:	68da      	ldr	r2, [r3, #12]
 8000504:	493c      	ldr	r1, [pc, #240]	; (80005f8 <HAL_ADC_Init+0x150>)
 8000506:	400a      	ands	r2, r1
 8000508:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800050a:	7e21      	ldrb	r1, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800050c:	7e62      	ldrb	r2, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800050e:	0389      	lsls	r1, r1, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000510:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000512:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000514:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000516:	7ea6      	ldrb	r6, [r4, #26]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000518:	3a01      	subs	r2, #1
 800051a:	1e55      	subs	r5, r2, #1
 800051c:	41aa      	sbcs	r2, r5
 800051e:	0315      	lsls	r5, r2, #12
 8000520:	68e2      	ldr	r2, [r4, #12]
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000522:	0377      	lsls	r7, r6, #13
 8000524:	4311      	orrs	r1, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000526:	6922      	ldr	r2, [r4, #16]
 8000528:	4339      	orrs	r1, r7
 800052a:	2a02      	cmp	r2, #2
 800052c:	d100      	bne.n	8000530 <HAL_ADC_Init+0x88>
 800052e:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000530:	2224      	movs	r2, #36	; 0x24
 8000532:	5ca2      	ldrb	r2, [r4, r2]
 8000534:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000536:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000538:	7ee1      	ldrb	r1, [r4, #27]
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800053a:	432a      	orrs	r2, r5
 800053c:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800053e:	2901      	cmp	r1, #1
 8000540:	d042      	beq.n	80005c8 <HAL_ADC_Init+0x120>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000542:	20c2      	movs	r0, #194	; 0xc2
 8000544:	69e1      	ldr	r1, [r4, #28]
 8000546:	30ff      	adds	r0, #255	; 0xff
 8000548:	4281      	cmp	r1, r0
 800054a:	d002      	beq.n	8000552 <HAL_ADC_Init+0xaa>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800054c:	6a20      	ldr	r0, [r4, #32]
 800054e:	4301      	orrs	r1, r0
 8000550:	430a      	orrs	r2, r1
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000552:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000554:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000556:	4311      	orrs	r1, r2
 8000558:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800055a:	2180      	movs	r1, #128	; 0x80
 800055c:	0549      	lsls	r1, r1, #21
 800055e:	428d      	cmp	r5, r1
 8000560:	d01f      	beq.n	80005a2 <HAL_ADC_Init+0xfa>
 8000562:	1e69      	subs	r1, r5, #1
 8000564:	2906      	cmp	r1, #6
 8000566:	d91c      	bls.n	80005a2 <HAL_ADC_Init+0xfa>
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000568:	68db      	ldr	r3, [r3, #12]
 800056a:	4924      	ldr	r1, [pc, #144]	; (80005fc <HAL_ADC_Init+0x154>)
 800056c:	400b      	ands	r3, r1
 800056e:	4293      	cmp	r3, r2
 8000570:	d020      	beq.n	80005b4 <HAL_ADC_Init+0x10c>
      ADC_STATE_CLR_SET(hadc->State,
 8000572:	2212      	movs	r2, #18
 8000574:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      tmp_hal_status = HAL_ERROR;
 8000576:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8000578:	4393      	bics	r3, r2
 800057a:	3a02      	subs	r2, #2
 800057c:	4313      	orrs	r3, r2
 800057e:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000580:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000582:	3a0f      	subs	r2, #15
 8000584:	4313      	orrs	r3, r2
 8000586:	63e3      	str	r3, [r4, #60]	; 0x3c
 8000588:	e79d      	b.n	80004c6 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 800058a:	2234      	movs	r2, #52	; 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 800058c:	63c3      	str	r3, [r0, #60]	; 0x3c
    hadc->Lock = HAL_UNLOCKED;
 800058e:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 8000590:	f005 fbd0 	bl	8005d34 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000594:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000596:	06db      	lsls	r3, r3, #27
 8000598:	d500      	bpl.n	800059c <HAL_ADC_Init+0xf4>
 800059a:	e78f      	b.n	80004bc <HAL_ADC_Init+0x14>
 800059c:	e794      	b.n	80004c8 <HAL_ADC_Init+0x20>
    return HAL_ERROR;
 800059e:	2001      	movs	r0, #1
 80005a0:	e791      	b.n	80004c6 <HAL_ADC_Init+0x1e>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80005a2:	2107      	movs	r1, #7
 80005a4:	6958      	ldr	r0, [r3, #20]
 80005a6:	4388      	bics	r0, r1
 80005a8:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80005aa:	6958      	ldr	r0, [r3, #20]
 80005ac:	4029      	ands	r1, r5
 80005ae:	4301      	orrs	r1, r0
 80005b0:	6159      	str	r1, [r3, #20]
 80005b2:	e7d9      	b.n	8000568 <HAL_ADC_Init+0xc0>
      ADC_CLEAR_ERRORCODE(hadc);
 80005b4:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 80005b6:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 80005b8:	63e3      	str	r3, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 80005ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80005bc:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 80005be:	4393      	bics	r3, r2
 80005c0:	3a02      	subs	r2, #2
 80005c2:	4313      	orrs	r3, r2
 80005c4:	63a3      	str	r3, [r4, #56]	; 0x38
 80005c6:	e77e      	b.n	80004c6 <HAL_ADC_Init+0x1e>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80005c8:	2e00      	cmp	r6, #0
 80005ca:	d10a      	bne.n	80005e2 <HAL_ADC_Init+0x13a>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80005cc:	2180      	movs	r1, #128	; 0x80
 80005ce:	0249      	lsls	r1, r1, #9
 80005d0:	430a      	orrs	r2, r1
 80005d2:	e7b6      	b.n	8000542 <HAL_ADC_Init+0x9a>
    if (ADC_IS_ENABLE(hadc) == RESET)
 80005d4:	6819      	ldr	r1, [r3, #0]
 80005d6:	420a      	tst	r2, r1
 80005d8:	d193      	bne.n	8000502 <HAL_ADC_Init+0x5a>
 80005da:	68da      	ldr	r2, [r3, #12]
 80005dc:	0412      	lsls	r2, r2, #16
 80005de:	d490      	bmi.n	8000502 <HAL_ADC_Init+0x5a>
 80005e0:	e783      	b.n	80004ea <HAL_ADC_Init+0x42>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80005e2:	2520      	movs	r5, #32
 80005e4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80005e6:	4328      	orrs	r0, r5
 80005e8:	63a0      	str	r0, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80005ea:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80005ec:	4301      	orrs	r1, r0
 80005ee:	63e1      	str	r1, [r4, #60]	; 0x3c
 80005f0:	e7a7      	b.n	8000542 <HAL_ADC_Init+0x9a>
 80005f2:	46c0      	nop			; (mov r8, r8)
 80005f4:	fffffefd 	.word	0xfffffefd
 80005f8:	fffe0219 	.word	0xfffe0219
 80005fc:	833fffe7 	.word	0x833fffe7

08000600 <HAL_ADC_LevelOutOfWindowCallback>:
 8000600:	4770      	bx	lr
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <HAL_ADC_ErrorCallback>:
 8000604:	4770      	bx	lr
 8000606:	46c0      	nop			; (mov r8, r8)

08000608 <HAL_ADC_IRQHandler>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000608:	2204      	movs	r2, #4
 800060a:	6803      	ldr	r3, [r0, #0]
{
 800060c:	b570      	push	{r4, r5, r6, lr}
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800060e:	6819      	ldr	r1, [r3, #0]
{
 8000610:	0004      	movs	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000612:	420a      	tst	r2, r1
 8000614:	d04a      	beq.n	80006ac <HAL_ADC_IRQHandler+0xa4>
 8000616:	6859      	ldr	r1, [r3, #4]
 8000618:	420a      	tst	r2, r1
 800061a:	d047      	beq.n	80006ac <HAL_ADC_IRQHandler+0xa4>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800061c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800061e:	06d2      	lsls	r2, r2, #27
 8000620:	d404      	bmi.n	800062c <HAL_ADC_IRQHandler+0x24>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000622:	2280      	movs	r2, #128	; 0x80
 8000624:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000626:	0092      	lsls	r2, r2, #2
 8000628:	430a      	orrs	r2, r1
 800062a:	63a2      	str	r2, [r4, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800062c:	22c0      	movs	r2, #192	; 0xc0
 800062e:	68d9      	ldr	r1, [r3, #12]
 8000630:	0112      	lsls	r2, r2, #4
 8000632:	4211      	tst	r1, r2
 8000634:	d113      	bne.n	800065e <HAL_ADC_IRQHandler+0x56>
 8000636:	7ea2      	ldrb	r2, [r4, #26]
 8000638:	2a00      	cmp	r2, #0
 800063a:	d110      	bne.n	800065e <HAL_ADC_IRQHandler+0x56>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	0712      	lsls	r2, r2, #28
 8000640:	d50d      	bpl.n	800065e <HAL_ADC_IRQHandler+0x56>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000642:	689a      	ldr	r2, [r3, #8]
 8000644:	0752      	lsls	r2, r2, #29
 8000646:	d444      	bmi.n	80006d2 <HAL_ADC_IRQHandler+0xca>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000648:	210c      	movs	r1, #12
 800064a:	685a      	ldr	r2, [r3, #4]
 800064c:	438a      	bics	r2, r1
 800064e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000650:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000652:	4a24      	ldr	r2, [pc, #144]	; (80006e4 <HAL_ADC_IRQHandler+0xdc>)
 8000654:	4013      	ands	r3, r2
 8000656:	3204      	adds	r2, #4
 8000658:	32ff      	adds	r2, #255	; 0xff
 800065a:	4313      	orrs	r3, r2
 800065c:	63a3      	str	r3, [r4, #56]	; 0x38
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800065e:	0020      	movs	r0, r4
 8000660:	f003 fa20 	bl	8003aa4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8000664:	220c      	movs	r2, #12
 8000666:	6823      	ldr	r3, [r4, #0]
 8000668:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800066a:	2580      	movs	r5, #128	; 0x80
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	4215      	tst	r5, r2
 8000670:	d002      	beq.n	8000678 <HAL_ADC_IRQHandler+0x70>
 8000672:	685a      	ldr	r2, [r3, #4]
 8000674:	4215      	tst	r5, r2
 8000676:	d121      	bne.n	80006bc <HAL_ADC_IRQHandler+0xb4>
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8000678:	2210      	movs	r2, #16
 800067a:	6819      	ldr	r1, [r3, #0]
 800067c:	420a      	tst	r2, r1
 800067e:	d014      	beq.n	80006aa <HAL_ADC_IRQHandler+0xa2>
 8000680:	6859      	ldr	r1, [r3, #4]
 8000682:	420a      	tst	r2, r1
 8000684:	d011      	beq.n	80006aa <HAL_ADC_IRQHandler+0xa2>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8000686:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000688:	2a01      	cmp	r2, #1
 800068a:	d002      	beq.n	8000692 <HAL_ADC_IRQHandler+0x8a>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 800068c:	68da      	ldr	r2, [r3, #12]
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800068e:	07d2      	lsls	r2, r2, #31
 8000690:	d509      	bpl.n	80006a6 <HAL_ADC_IRQHandler+0x9e>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000692:	2102      	movs	r1, #2
 8000694:	6be2      	ldr	r2, [r4, #60]	; 0x3c
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8000696:	0020      	movs	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000698:	430a      	orrs	r2, r1
 800069a:	63e2      	str	r2, [r4, #60]	; 0x3c
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800069c:	2210      	movs	r2, #16
 800069e:	601a      	str	r2, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 80006a0:	f7ff ffb0 	bl	8000604 <HAL_ADC_ErrorCallback>
 80006a4:	6823      	ldr	r3, [r4, #0]
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80006a6:	2210      	movs	r2, #16
 80006a8:	601a      	str	r2, [r3, #0]
  }

}
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80006ac:	2208      	movs	r2, #8
 80006ae:	6819      	ldr	r1, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80006b0:	420a      	tst	r2, r1
 80006b2:	d0da      	beq.n	800066a <HAL_ADC_IRQHandler+0x62>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80006b4:	6859      	ldr	r1, [r3, #4]
 80006b6:	420a      	tst	r2, r1
 80006b8:	d0d7      	beq.n	800066a <HAL_ADC_IRQHandler+0x62>
 80006ba:	e7af      	b.n	800061c <HAL_ADC_IRQHandler+0x14>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80006bc:	2380      	movs	r3, #128	; 0x80
 80006be:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80006c0:	025b      	lsls	r3, r3, #9
 80006c2:	4313      	orrs	r3, r2
 80006c4:	63a3      	str	r3, [r4, #56]	; 0x38
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80006c6:	0020      	movs	r0, r4
 80006c8:	f7ff ff9a 	bl	8000600 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80006cc:	6823      	ldr	r3, [r4, #0]
 80006ce:	601d      	str	r5, [r3, #0]
 80006d0:	e7d2      	b.n	8000678 <HAL_ADC_IRQHandler+0x70>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80006d2:	2220      	movs	r2, #32
 80006d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80006d6:	4313      	orrs	r3, r2
 80006d8:	63a3      	str	r3, [r4, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80006da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80006dc:	3a1f      	subs	r2, #31
 80006de:	4313      	orrs	r3, r2
 80006e0:	63e3      	str	r3, [r4, #60]	; 0x3c
 80006e2:	e7bc      	b.n	800065e <HAL_ADC_IRQHandler+0x56>
 80006e4:	fffffefe 	.word	0xfffffefe

080006e8 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80006e8:	2300      	movs	r3, #0
{
 80006ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ec:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 80006ee:	9301      	str	r3, [sp, #4]
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80006f0:	3334      	adds	r3, #52	; 0x34
 80006f2:	5cc2      	ldrb	r2, [r0, r3]
{
 80006f4:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80006f6:	2a01      	cmp	r2, #1
 80006f8:	d044      	beq.n	8000784 <HAL_ADC_ConfigChannel+0x9c>
 80006fa:	2201      	movs	r2, #1
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80006fc:	6826      	ldr	r6, [r4, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80006fe:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  __HAL_LOCK(hadc);
 8000700:	54e2      	strb	r2, [r4, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000702:	68b3      	ldr	r3, [r6, #8]
 8000704:	075b      	lsls	r3, r3, #29
 8000706:	d509      	bpl.n	800071c <HAL_ADC_ConfigChannel+0x34>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000708:	2220      	movs	r2, #32
    
    tmp_hal_status = HAL_ERROR;
 800070a:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800070c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800070e:	4313      	orrs	r3, r2
 8000710:	63a3      	str	r3, [r4, #56]	; 0x38
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000712:	2334      	movs	r3, #52	; 0x34
 8000714:	2200      	movs	r2, #0
 8000716:	54e2      	strb	r2, [r4, r3]
  
  /* Return function status */
  return tmp_hal_status;
}
 8000718:	b003      	add	sp, #12
 800071a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800071c:	680b      	ldr	r3, [r1, #0]
    if (sConfig->Rank != ADC_RANK_NONE)
 800071e:	4d33      	ldr	r5, [pc, #204]	; (80007ec <HAL_ADC_ConfigChannel+0x104>)
 8000720:	001f      	movs	r7, r3
 8000722:	46ac      	mov	ip, r5
 8000724:	684d      	ldr	r5, [r1, #4]
 8000726:	409a      	lsls	r2, r3
 8000728:	3f10      	subs	r7, #16
 800072a:	4565      	cmp	r5, ip
 800072c:	d02c      	beq.n	8000788 <HAL_ADC_ConfigChannel+0xa0>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800072e:	6ab5      	ldr	r5, [r6, #40]	; 0x28
 8000730:	432a      	orrs	r2, r5
 8000732:	62b2      	str	r2, [r6, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000734:	2280      	movs	r2, #128	; 0x80
 8000736:	0552      	lsls	r2, r2, #21
 8000738:	4290      	cmp	r0, r2
 800073a:	d00f      	beq.n	800075c <HAL_ADC_ConfigChannel+0x74>
 800073c:	3801      	subs	r0, #1
 800073e:	2806      	cmp	r0, #6
 8000740:	d90c      	bls.n	800075c <HAL_ADC_ConfigChannel+0x74>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000742:	2207      	movs	r2, #7
 8000744:	6888      	ldr	r0, [r1, #8]
 8000746:	6971      	ldr	r1, [r6, #20]
 8000748:	4011      	ands	r1, r2
 800074a:	4288      	cmp	r0, r1
 800074c:	d006      	beq.n	800075c <HAL_ADC_ConfigChannel+0x74>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800074e:	6971      	ldr	r1, [r6, #20]
 8000750:	4391      	bics	r1, r2
 8000752:	6171      	str	r1, [r6, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000754:	6971      	ldr	r1, [r6, #20]
 8000756:	4002      	ands	r2, r0
 8000758:	430a      	orrs	r2, r1
 800075a:	6172      	str	r2, [r6, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800075c:	2f02      	cmp	r7, #2
 800075e:	d80f      	bhi.n	8000780 <HAL_ADC_ConfigChannel+0x98>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000760:	4923      	ldr	r1, [pc, #140]	; (80007f0 <HAL_ADC_ConfigChannel+0x108>)
 8000762:	680a      	ldr	r2, [r1, #0]
 8000764:	2b10      	cmp	r3, #16
 8000766:	d029      	beq.n	80007bc <HAL_ADC_ConfigChannel+0xd4>
 8000768:	3b11      	subs	r3, #17
 800076a:	4258      	negs	r0, r3
 800076c:	4143      	adcs	r3, r0
 800076e:	4821      	ldr	r0, [pc, #132]	; (80007f4 <HAL_ADC_ConfigChannel+0x10c>)
 8000770:	425b      	negs	r3, r3
 8000772:	4003      	ands	r3, r0
 8000774:	2080      	movs	r0, #128	; 0x80
 8000776:	0440      	lsls	r0, r0, #17
 8000778:	4684      	mov	ip, r0
 800077a:	4463      	add	r3, ip
 800077c:	4313      	orrs	r3, r2
 800077e:	600b      	str	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000780:	2000      	movs	r0, #0
 8000782:	e7c6      	b.n	8000712 <HAL_ADC_ConfigChannel+0x2a>
  __HAL_LOCK(hadc);
 8000784:	2002      	movs	r0, #2
 8000786:	e7c7      	b.n	8000718 <HAL_ADC_ConfigChannel+0x30>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000788:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800078a:	4391      	bics	r1, r2
 800078c:	62b1      	str	r1, [r6, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800078e:	2f02      	cmp	r7, #2
 8000790:	d8f6      	bhi.n	8000780 <HAL_ADC_ConfigChannel+0x98>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000792:	4a17      	ldr	r2, [pc, #92]	; (80007f0 <HAL_ADC_ConfigChannel+0x108>)
 8000794:	6811      	ldr	r1, [r2, #0]
 8000796:	2b10      	cmp	r3, #16
 8000798:	d00e      	beq.n	80007b8 <HAL_ADC_ConfigChannel+0xd0>
 800079a:	3b11      	subs	r3, #17
 800079c:	001a      	movs	r2, r3
 800079e:	1e53      	subs	r3, r2, #1
 80007a0:	419a      	sbcs	r2, r3
 80007a2:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <HAL_ADC_ConfigChannel+0x10c>)
 80007a4:	4252      	negs	r2, r2
 80007a6:	4013      	ands	r3, r2
 80007a8:	4a13      	ldr	r2, [pc, #76]	; (80007f8 <HAL_ADC_ConfigChannel+0x110>)
 80007aa:	4694      	mov	ip, r2
 80007ac:	4463      	add	r3, ip
 80007ae:	4a10      	ldr	r2, [pc, #64]	; (80007f0 <HAL_ADC_ConfigChannel+0x108>)
 80007b0:	400b      	ands	r3, r1
 80007b2:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80007b4:	2000      	movs	r0, #0
 80007b6:	e7ac      	b.n	8000712 <HAL_ADC_ConfigChannel+0x2a>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80007b8:	4b10      	ldr	r3, [pc, #64]	; (80007fc <HAL_ADC_ConfigChannel+0x114>)
 80007ba:	e7f8      	b.n	80007ae <HAL_ADC_ConfigChannel+0xc6>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80007bc:	2380      	movs	r3, #128	; 0x80
 80007be:	041b      	lsls	r3, r3, #16
 80007c0:	431a      	orrs	r2, r3
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80007c2:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <HAL_ADC_ConfigChannel+0x118>)
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80007c4:	600a      	str	r2, [r1, #0]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80007c6:	6818      	ldr	r0, [r3, #0]
 80007c8:	490e      	ldr	r1, [pc, #56]	; (8000804 <HAL_ADC_ConfigChannel+0x11c>)
 80007ca:	f7ff fc9d 	bl	8000108 <__udivsi3>
 80007ce:	0083      	lsls	r3, r0, #2
 80007d0:	1818      	adds	r0, r3, r0
 80007d2:	0040      	lsls	r0, r0, #1
 80007d4:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 80007d6:	9b01      	ldr	r3, [sp, #4]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d0d1      	beq.n	8000780 <HAL_ADC_ConfigChannel+0x98>
            wait_loop_index--;
 80007dc:	9b01      	ldr	r3, [sp, #4]
 80007de:	3b01      	subs	r3, #1
 80007e0:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80007e2:	9b01      	ldr	r3, [sp, #4]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d1f9      	bne.n	80007dc <HAL_ADC_ConfigChannel+0xf4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80007e8:	2000      	movs	r0, #0
 80007ea:	e792      	b.n	8000712 <HAL_ADC_ConfigChannel+0x2a>
 80007ec:	00001001 	.word	0x00001001
 80007f0:	40012708 	.word	0x40012708
 80007f4:	ff400000 	.word	0xff400000
 80007f8:	ffbfffff 	.word	0xffbfffff
 80007fc:	ff7fffff 	.word	0xff7fffff
 8000800:	200000d4 	.word	0x200000d4
 8000804:	000f4240 	.word	0x000f4240

08000808 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8000808:	b570      	push	{r4, r5, r6, lr}
 800080a:	0004      	movs	r4, r0
 800080c:	b082      	sub	sp, #8
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t regshift = COMP_CSR_COMP1_SHIFT;
  
  /* Check the COMP handle allocation and lock status */
  if((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 800080e:	2800      	cmp	r0, #0
 8000810:	d03a      	beq.n	8000888 <HAL_COMP_Init+0x80>
 8000812:	6a83      	ldr	r3, [r0, #40]	; 0x28
  {
    status = HAL_ERROR;
 8000814:	2001      	movs	r0, #1
  if((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8000816:	06db      	lsls	r3, r3, #27
 8000818:	d501      	bpl.n	800081e <HAL_COMP_Init+0x16>
    /* Initialize the COMP state*/
    hcomp->State = HAL_COMP_STATE_READY;
  }
  
  return status;
}
 800081a:	b002      	add	sp, #8
 800081c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SYSCFG_CLK_ENABLE();  
 800081e:	4b1d      	ldr	r3, [pc, #116]	; (8000894 <HAL_COMP_Init+0x8c>)
 8000820:	699a      	ldr	r2, [r3, #24]
 8000822:	4302      	orrs	r2, r0
 8000824:	619a      	str	r2, [r3, #24]
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	4018      	ands	r0, r3
 800082a:	9001      	str	r0, [sp, #4]
    HAL_COMP_MspInit(hcomp);
 800082c:	0020      	movs	r0, r4
    __HAL_RCC_SYSCFG_CLK_ENABLE();  
 800082e:	9b01      	ldr	r3, [sp, #4]
    HAL_COMP_MspInit(hcomp);
 8000830:	f005 fab8 	bl	8005da4 <HAL_COMP_MspInit>
    if(hcomp->State == HAL_COMP_STATE_RESET)
 8000834:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000836:	2b00      	cmp	r3, #0
 8000838:	d101      	bne.n	800083e <HAL_COMP_Init+0x36>
      hcomp->Lock = HAL_UNLOCKED;
 800083a:	2224      	movs	r2, #36	; 0x24
 800083c:	54a3      	strb	r3, [r4, r2]
    hcomp->State = HAL_COMP_STATE_BUSY;
 800083e:	2302      	movs	r3, #2
    if(hcomp->Instance == COMP2)
 8000840:	6822      	ldr	r2, [r4, #0]
    hcomp->State = HAL_COMP_STATE_BUSY;
 8000842:	62a3      	str	r3, [r4, #40]	; 0x28
    if(hcomp->Instance == COMP2)
 8000844:	4b14      	ldr	r3, [pc, #80]	; (8000898 <HAL_COMP_Init+0x90>)
 8000846:	429a      	cmp	r2, r3
 8000848:	d020      	beq.n	800088c <HAL_COMP_Init+0x84>
  uint32_t regshift = COMP_CSR_COMP1_SHIFT;
 800084a:	2500      	movs	r5, #0
    if(hcomp->Instance == COMP2)
 800084c:	4913      	ldr	r1, [pc, #76]	; (800089c <HAL_COMP_Init+0x94>)
    MODIFY_REG(COMP->CSR, 
 800084e:	68a6      	ldr	r6, [r4, #8]
 8000850:	6863      	ldr	r3, [r4, #4]
 8000852:	4a13      	ldr	r2, [pc, #76]	; (80008a0 <HAL_COMP_Init+0x98>)
 8000854:	4333      	orrs	r3, r6
 8000856:	68e6      	ldr	r6, [r4, #12]
 8000858:	6810      	ldr	r0, [r2, #0]
 800085a:	4333      	orrs	r3, r6
 800085c:	6926      	ldr	r6, [r4, #16]
 800085e:	4001      	ands	r1, r0
 8000860:	4333      	orrs	r3, r6
 8000862:	6966      	ldr	r6, [r4, #20]
 8000864:	4333      	orrs	r3, r6
 8000866:	69a6      	ldr	r6, [r4, #24]
 8000868:	4333      	orrs	r3, r6
 800086a:	40ab      	lsls	r3, r5
 800086c:	430b      	orrs	r3, r1
 800086e:	6013      	str	r3, [r2, #0]
    if(hcomp->Init.WindowMode != COMP_WINDOWMODE_DISABLE)
 8000870:	69e3      	ldr	r3, [r4, #28]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d004      	beq.n	8000880 <HAL_COMP_Init+0x78>
      COMP->CSR |= COMP_CSR_WNDWEN;
 8000876:	2380      	movs	r3, #128	; 0x80
 8000878:	6811      	ldr	r1, [r2, #0]
 800087a:	041b      	lsls	r3, r3, #16
 800087c:	430b      	orrs	r3, r1
 800087e:	6013      	str	r3, [r2, #0]
    hcomp->State = HAL_COMP_STATE_READY;
 8000880:	2301      	movs	r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8000882:	2000      	movs	r0, #0
    hcomp->State = HAL_COMP_STATE_READY;
 8000884:	62a3      	str	r3, [r4, #40]	; 0x28
 8000886:	e7c8      	b.n	800081a <HAL_COMP_Init+0x12>
    status = HAL_ERROR;
 8000888:	2001      	movs	r0, #1
 800088a:	e7c6      	b.n	800081a <HAL_COMP_Init+0x12>
 800088c:	4905      	ldr	r1, [pc, #20]	; (80008a4 <HAL_COMP_Init+0x9c>)
      regshift = COMP_CSR_COMP2_SHIFT;
 800088e:	2510      	movs	r5, #16
 8000890:	e7dd      	b.n	800084e <HAL_COMP_Init+0x46>
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	40021000 	.word	0x40021000
 8000898:	4001001e 	.word	0x4001001e
 800089c:	ffffc081 	.word	0xffffc081
 80008a0:	4001001c 	.word	0x4001001c
 80008a4:	c081ffff 	.word	0xc081ffff

080008a8 <HAL_COMP_Start>:
  * @brief  Start the comparator 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{ 
 80008a8:	1e03      	subs	r3, r0, #0
  uint32_t wait_loop_index = 0U;
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t regshift = COMP_CSR_COMP1_SHIFT;
  
  /* Check the COMP handle allocation and lock status */
  if((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 80008aa:	d007      	beq.n	80008bc <HAL_COMP_Start+0x14>
 80008ac:	6a82      	ldr	r2, [r0, #40]	; 0x28
  {
    status = HAL_ERROR;
 80008ae:	2001      	movs	r0, #1
  if((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 80008b0:	06d2      	lsls	r2, r2, #27
 80008b2:	d402      	bmi.n	80008ba <HAL_COMP_Start+0x12>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 80008b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80008b6:	2a01      	cmp	r2, #1
 80008b8:	d002      	beq.n	80008c0 <HAL_COMP_Start+0x18>
      status = HAL_ERROR;
    }
  }

  return status;
}
 80008ba:	4770      	bx	lr
    status = HAL_ERROR;
 80008bc:	2001      	movs	r0, #1
 80008be:	e7fc      	b.n	80008ba <HAL_COMP_Start+0x12>
      if(hcomp->Instance == COMP2)
 80008c0:	4908      	ldr	r1, [pc, #32]	; (80008e4 <HAL_COMP_Start+0x3c>)
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	468c      	mov	ip, r1
 80008c6:	4462      	add	r2, ip
 80008c8:	4251      	negs	r1, r2
 80008ca:	414a      	adcs	r2, r1
      SET_BIT(COMP->CSR, COMP_CSR_COMPxEN << regshift);
 80008cc:	4806      	ldr	r0, [pc, #24]	; (80008e8 <HAL_COMP_Start+0x40>)
      if(hcomp->Instance == COMP2)
 80008ce:	4252      	negs	r2, r2
 80008d0:	0412      	lsls	r2, r2, #16
      SET_BIT(COMP->CSR, COMP_CSR_COMPxEN << regshift);
 80008d2:	6801      	ldr	r1, [r0, #0]
      if(hcomp->Instance == COMP2)
 80008d4:	0c12      	lsrs	r2, r2, #16
 80008d6:	3201      	adds	r2, #1
      SET_BIT(COMP->CSR, COMP_CSR_COMPxEN << regshift);
 80008d8:	430a      	orrs	r2, r1
 80008da:	6002      	str	r2, [r0, #0]
      hcomp->State = HAL_COMP_STATE_BUSY;
 80008dc:	2202      	movs	r2, #2
 80008de:	2000      	movs	r0, #0
 80008e0:	629a      	str	r2, [r3, #40]	; 0x28
 80008e2:	e7ea      	b.n	80008ba <HAL_COMP_Start+0x12>
 80008e4:	bffeffe2 	.word	0xbffeffe2
 80008e8:	4001001c 	.word	0x4001001c

080008ec <HAL_COMP_Stop>:
  * @brief  Stop the comparator 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Stop(COMP_HandleTypeDef *hcomp)
{ 
 80008ec:	b510      	push	{r4, lr}
 80008ee:	1e03      	subs	r3, r0, #0
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t regshift = COMP_CSR_COMP1_SHIFT;
  
  /* Check the COMP handle allocation and lock status */
  if((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 80008f0:	d007      	beq.n	8000902 <HAL_COMP_Stop+0x16>
 80008f2:	6a82      	ldr	r2, [r0, #40]	; 0x28
  {
    status = HAL_ERROR;
 80008f4:	2001      	movs	r0, #1
  if((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 80008f6:	06d2      	lsls	r2, r2, #27
 80008f8:	d402      	bmi.n	8000900 <HAL_COMP_Stop+0x14>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_BUSY)
 80008fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80008fc:	2a02      	cmp	r2, #2
 80008fe:	d002      	beq.n	8000906 <HAL_COMP_Stop+0x1a>
      status = HAL_ERROR;
    }
  }
  
  return status;
}
 8000900:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000902:	2001      	movs	r0, #1
 8000904:	e7fc      	b.n	8000900 <HAL_COMP_Stop+0x14>
      if(hcomp->Instance == COMP2)
 8000906:	4908      	ldr	r1, [pc, #32]	; (8000928 <HAL_COMP_Stop+0x3c>)
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	468c      	mov	ip, r1
 800090c:	4462      	add	r2, ip
 800090e:	4251      	negs	r1, r2
 8000910:	414a      	adcs	r2, r1
      CLEAR_BIT(COMP->CSR, COMP_CSR_COMPxEN << regshift);
 8000912:	4c06      	ldr	r4, [pc, #24]	; (800092c <HAL_COMP_Stop+0x40>)
      if(hcomp->Instance == COMP2)
 8000914:	4906      	ldr	r1, [pc, #24]	; (8000930 <HAL_COMP_Stop+0x44>)
 8000916:	4252      	negs	r2, r2
 8000918:	400a      	ands	r2, r1
      CLEAR_BIT(COMP->CSR, COMP_CSR_COMPxEN << regshift);
 800091a:	6821      	ldr	r1, [r4, #0]
      if(hcomp->Instance == COMP2)
 800091c:	3a02      	subs	r2, #2
      CLEAR_BIT(COMP->CSR, COMP_CSR_COMPxEN << regshift);
 800091e:	400a      	ands	r2, r1
 8000920:	6022      	str	r2, [r4, #0]
      hcomp->State = HAL_COMP_STATE_READY;
 8000922:	6298      	str	r0, [r3, #40]	; 0x28
 8000924:	2000      	movs	r0, #0
 8000926:	e7eb      	b.n	8000900 <HAL_COMP_Stop+0x14>
 8000928:	bffeffe2 	.word	0xbffeffe2
 800092c:	4001001c 	.word	0x4001001c
 8000930:	ffff0001 	.word	0xffff0001

08000934 <HAL_COMP_Start_IT>:
  * @brief  Enables the interrupt and starts the comparator
  * @param  hcomp COMP handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_COMP_Start_IT(COMP_HandleTypeDef *hcomp)
{
 8000934:	b510      	push	{r4, lr}
 8000936:	1e03      	subs	r3, r0, #0
  if((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8000938:	d007      	beq.n	800094a <HAL_COMP_Start_IT+0x16>
 800093a:	6a82      	ldr	r2, [r0, #40]	; 0x28
    status = HAL_ERROR;
 800093c:	2001      	movs	r0, #1
  if((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 800093e:	06d2      	lsls	r2, r2, #27
 8000940:	d402      	bmi.n	8000948 <HAL_COMP_Start_IT+0x14>
    if(hcomp->State == HAL_COMP_STATE_READY)
 8000942:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8000944:	2c01      	cmp	r4, #1
 8000946:	d002      	beq.n	800094e <HAL_COMP_Start_IT+0x1a>
    /* Enable Exti interrupt mode */
    SET_BIT(EXTI->IMR, extiline);
  }

  return status;
}
 8000948:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800094a:	2001      	movs	r0, #1
 800094c:	e7fc      	b.n	8000948 <HAL_COMP_Start_IT+0x14>
      if(hcomp->Instance == COMP2)
 800094e:	6818      	ldr	r0, [r3, #0]
 8000950:	4a1d      	ldr	r2, [pc, #116]	; (80009c8 <HAL_COMP_Start_IT+0x94>)
 8000952:	4290      	cmp	r0, r2
 8000954:	d02c      	beq.n	80009b0 <HAL_COMP_Start_IT+0x7c>
      SET_BIT(COMP->CSR, COMP_CSR_COMPxEN << regshift);
 8000956:	4a1d      	ldr	r2, [pc, #116]	; (80009cc <HAL_COMP_Start_IT+0x98>)
 8000958:	6811      	ldr	r1, [r2, #0]
 800095a:	4321      	orrs	r1, r4
 800095c:	6011      	str	r1, [r2, #0]
      hcomp->State = HAL_COMP_STATE_BUSY;
 800095e:	2102      	movs	r1, #2
 8000960:	6299      	str	r1, [r3, #40]	; 0x28
    extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 8000962:	4290      	cmp	r0, r2
 8000964:	d020      	beq.n	80009a8 <HAL_COMP_Start_IT+0x74>
 8000966:	2180      	movs	r1, #128	; 0x80
 8000968:	4a19      	ldr	r2, [pc, #100]	; (80009d0 <HAL_COMP_Start_IT+0x9c>)
 800096a:	03c9      	lsls	r1, r1, #15
    if((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_IT_RISING) != RESET)
 800096c:	6a1b      	ldr	r3, [r3, #32]
      SET_BIT(EXTI->RTSR, extiline);
 800096e:	4c19      	ldr	r4, [pc, #100]	; (80009d4 <HAL_COMP_Start_IT+0xa0>)
    if((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_IT_RISING) != RESET)
 8000970:	07d8      	lsls	r0, r3, #31
 8000972:	d50f      	bpl.n	8000994 <HAL_COMP_Start_IT+0x60>
      SET_BIT(EXTI->RTSR, extiline);
 8000974:	68a0      	ldr	r0, [r4, #8]
 8000976:	4308      	orrs	r0, r1
 8000978:	60a0      	str	r0, [r4, #8]
    if((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_IT_FALLING) != RESET)
 800097a:	079b      	lsls	r3, r3, #30
 800097c:	d50f      	bpl.n	800099e <HAL_COMP_Start_IT+0x6a>
      SET_BIT(EXTI->FTSR, extiline);
 800097e:	4a15      	ldr	r2, [pc, #84]	; (80009d4 <HAL_COMP_Start_IT+0xa0>)
 8000980:	68d3      	ldr	r3, [r2, #12]
 8000982:	430b      	orrs	r3, r1
 8000984:	60d3      	str	r3, [r2, #12]
    WRITE_REG(EXTI->PR, extiline);
 8000986:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <HAL_COMP_Start_IT+0xa0>)
    SET_BIT(EXTI->IMR, extiline);
 8000988:	2000      	movs	r0, #0
    WRITE_REG(EXTI->PR, extiline);
 800098a:	6159      	str	r1, [r3, #20]
    SET_BIT(EXTI->IMR, extiline);
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	430a      	orrs	r2, r1
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	e7d9      	b.n	8000948 <HAL_COMP_Start_IT+0x14>
      CLEAR_BIT(EXTI->RTSR, extiline);
 8000994:	68a0      	ldr	r0, [r4, #8]
 8000996:	4010      	ands	r0, r2
 8000998:	60a0      	str	r0, [r4, #8]
    if((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_IT_FALLING) != RESET)
 800099a:	079b      	lsls	r3, r3, #30
 800099c:	d4ef      	bmi.n	800097e <HAL_COMP_Start_IT+0x4a>
      CLEAR_BIT(EXTI->FTSR, extiline);
 800099e:	4b0d      	ldr	r3, [pc, #52]	; (80009d4 <HAL_COMP_Start_IT+0xa0>)
 80009a0:	68d8      	ldr	r0, [r3, #12]
 80009a2:	4002      	ands	r2, r0
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	e7ee      	b.n	8000986 <HAL_COMP_Start_IT+0x52>
    extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 80009a8:	2180      	movs	r1, #128	; 0x80
 80009aa:	4a0b      	ldr	r2, [pc, #44]	; (80009d8 <HAL_COMP_Start_IT+0xa4>)
 80009ac:	0389      	lsls	r1, r1, #14
 80009ae:	e7dd      	b.n	800096c <HAL_COMP_Start_IT+0x38>
      SET_BIT(COMP->CSR, COMP_CSR_COMPxEN << regshift);
 80009b0:	2280      	movs	r2, #128	; 0x80
 80009b2:	4906      	ldr	r1, [pc, #24]	; (80009cc <HAL_COMP_Start_IT+0x98>)
 80009b4:	0252      	lsls	r2, r2, #9
 80009b6:	6808      	ldr	r0, [r1, #0]
 80009b8:	4302      	orrs	r2, r0
 80009ba:	600a      	str	r2, [r1, #0]
      hcomp->State = HAL_COMP_STATE_BUSY;
 80009bc:	2202      	movs	r2, #2
    extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 80009be:	2180      	movs	r1, #128	; 0x80
      hcomp->State = HAL_COMP_STATE_BUSY;
 80009c0:	629a      	str	r2, [r3, #40]	; 0x28
    extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 80009c2:	03c9      	lsls	r1, r1, #15
      hcomp->State = HAL_COMP_STATE_BUSY;
 80009c4:	4a02      	ldr	r2, [pc, #8]	; (80009d0 <HAL_COMP_Start_IT+0x9c>)
 80009c6:	e7d1      	b.n	800096c <HAL_COMP_Start_IT+0x38>
 80009c8:	4001001e 	.word	0x4001001e
 80009cc:	4001001c 	.word	0x4001001c
 80009d0:	ffbfffff 	.word	0xffbfffff
 80009d4:	40010400 	.word	0x40010400
 80009d8:	ffdfffff 	.word	0xffdfffff

080009dc <HAL_COMP_GetOutputLevel>:
  uint32_t regshift = COMP_CSR_COMP1_SHIFT;
  
  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));
  
  if(hcomp->Instance == COMP2)
 80009dc:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <HAL_COMP_GetOutputLevel+0x28>)
 80009de:	6800      	ldr	r0, [r0, #0]
 80009e0:	469c      	mov	ip, r3
 80009e2:	4460      	add	r0, ip
 80009e4:	4243      	negs	r3, r0
 80009e6:	4158      	adcs	r0, r3
 80009e8:	4b07      	ldr	r3, [pc, #28]	; (8000a08 <HAL_COMP_GetOutputLevel+0x2c>)
 80009ea:	4240      	negs	r0, r0
 80009ec:	4018      	ands	r0, r3
 80009ee:	2380      	movs	r3, #128	; 0x80
 80009f0:	01db      	lsls	r3, r3, #7
 80009f2:	469c      	mov	ip, r3
  {
    regshift = COMP_CSR_COMP2_SHIFT;
  }
  level = READ_BIT(COMP->CSR, COMP_CSR_COMPxOUT << regshift);
 80009f4:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <HAL_COMP_GetOutputLevel+0x30>)
  if(hcomp->Instance == COMP2)
 80009f6:	4460      	add	r0, ip
  level = READ_BIT(COMP->CSR, COMP_CSR_COMPxOUT << regshift);
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4018      	ands	r0, r3
  
  if(level != 0U)
 80009fc:	d100      	bne.n	8000a00 <HAL_COMP_GetOutputLevel+0x24>
  {
    return(COMP_OUTPUTLEVEL_HIGH);
  }
  return(COMP_OUTPUTLEVEL_LOW);
}
 80009fe:	4770      	bx	lr
    return(COMP_OUTPUTLEVEL_HIGH);
 8000a00:	4660      	mov	r0, ip
 8000a02:	e7fc      	b.n	80009fe <HAL_COMP_GetOutputLevel+0x22>
 8000a04:	bffeffe2 	.word	0xbffeffe2
 8000a08:	3fffc000 	.word	0x3fffc000
 8000a0c:	4001001c 	.word	0x4001001c

08000a10 <HAL_COMP_IRQHandler>:
  uint32_t extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 8000a10:	4a0a      	ldr	r2, [pc, #40]	; (8000a3c <HAL_COMP_IRQHandler+0x2c>)
 8000a12:	6803      	ldr	r3, [r0, #0]
 8000a14:	4694      	mov	ip, r2
 8000a16:	4463      	add	r3, ip
 8000a18:	425a      	negs	r2, r3
 8000a1a:	4153      	adcs	r3, r2
 8000a1c:	2280      	movs	r2, #128	; 0x80
 8000a1e:	03d2      	lsls	r2, r2, #15
 8000a20:	4694      	mov	ip, r2
  if(READ_BIT(EXTI->PR, extiline) != RESET)
 8000a22:	4a07      	ldr	r2, [pc, #28]	; (8000a40 <HAL_COMP_IRQHandler+0x30>)
  uint32_t extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 8000a24:	425b      	negs	r3, r3
 8000a26:	055b      	lsls	r3, r3, #21
  if(READ_BIT(EXTI->PR, extiline) != RESET)
 8000a28:	6951      	ldr	r1, [r2, #20]
  uint32_t extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 8000a2a:	4463      	add	r3, ip
{
 8000a2c:	b510      	push	{r4, lr}
  if(READ_BIT(EXTI->PR, extiline) != RESET)
 8000a2e:	420b      	tst	r3, r1
 8000a30:	d002      	beq.n	8000a38 <HAL_COMP_IRQHandler+0x28>
    WRITE_REG(EXTI->PR, extiline);
 8000a32:	6153      	str	r3, [r2, #20]
    HAL_COMP_TriggerCallback(hcomp);
 8000a34:	f002 ff0c 	bl	8003850 <HAL_COMP_TriggerCallback>
}
 8000a38:	bd10      	pop	{r4, pc}
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	bffeffe4 	.word	0xbffeffe4
 8000a40:	40010400 	.word	0x40010400

08000a44 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a44:	22ff      	movs	r2, #255	; 0xff
 8000a46:	2303      	movs	r3, #3
 8000a48:	b530      	push	{r4, r5, lr}
 8000a4a:	0014      	movs	r4, r2
 8000a4c:	b2c5      	uxtb	r5, r0
 8000a4e:	402b      	ands	r3, r5
 8000a50:	00db      	lsls	r3, r3, #3
 8000a52:	409c      	lsls	r4, r3
 8000a54:	0189      	lsls	r1, r1, #6
 8000a56:	400a      	ands	r2, r1
 8000a58:	43e4      	mvns	r4, r4
 8000a5a:	409a      	lsls	r2, r3
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000a5c:	2800      	cmp	r0, #0
 8000a5e:	db0b      	blt.n	8000a78 <HAL_NVIC_SetPriority+0x34>
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <HAL_NVIC_SetPriority+0x50>)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a62:	0880      	lsrs	r0, r0, #2
 8000a64:	469c      	mov	ip, r3
 8000a66:	23c0      	movs	r3, #192	; 0xc0
 8000a68:	0080      	lsls	r0, r0, #2
 8000a6a:	4460      	add	r0, ip
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	58c1      	ldr	r1, [r0, r3]
 8000a70:	400c      	ands	r4, r1
 8000a72:	4322      	orrs	r2, r4
 8000a74:	50c2      	str	r2, [r0, r3]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000a76:	bd30      	pop	{r4, r5, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a78:	230f      	movs	r3, #15
 8000a7a:	4907      	ldr	r1, [pc, #28]	; (8000a98 <HAL_NVIC_SetPriority+0x54>)
 8000a7c:	402b      	ands	r3, r5
 8000a7e:	468c      	mov	ip, r1
 8000a80:	3b08      	subs	r3, #8
 8000a82:	089b      	lsrs	r3, r3, #2
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	4463      	add	r3, ip
 8000a88:	69d9      	ldr	r1, [r3, #28]
 8000a8a:	400c      	ands	r4, r1
 8000a8c:	4322      	orrs	r2, r4
 8000a8e:	61da      	str	r2, [r3, #28]
 8000a90:	e7f1      	b.n	8000a76 <HAL_NVIC_SetPriority+0x32>
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	e000e100 	.word	0xe000e100
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000a9c:	2800      	cmp	r0, #0
 8000a9e:	db05      	blt.n	8000aac <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aa0:	231f      	movs	r3, #31
 8000aa2:	4018      	ands	r0, r3
 8000aa4:	3b1e      	subs	r3, #30
 8000aa6:	4083      	lsls	r3, r0
 8000aa8:	4a01      	ldr	r2, [pc, #4]	; (8000ab0 <HAL_NVIC_EnableIRQ+0x14>)
 8000aaa:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000aac:	4770      	bx	lr
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	e000e100 	.word	0xe000e100

08000ab4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ab4:	4a0a      	ldr	r2, [pc, #40]	; (8000ae0 <HAL_SYSTICK_Config+0x2c>)
 8000ab6:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ab8:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d80e      	bhi.n	8000adc <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000abe:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ac0:	4a08      	ldr	r2, [pc, #32]	; (8000ae4 <HAL_SYSTICK_Config+0x30>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ac2:	4809      	ldr	r0, [pc, #36]	; (8000ae8 <HAL_SYSTICK_Config+0x34>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ac4:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ac6:	6a03      	ldr	r3, [r0, #32]
 8000ac8:	0609      	lsls	r1, r1, #24
 8000aca:	021b      	lsls	r3, r3, #8
 8000acc:	0a1b      	lsrs	r3, r3, #8
 8000ace:	430b      	orrs	r3, r1
 8000ad0:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ad2:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ad4:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ad6:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ad8:	3307      	adds	r3, #7
 8000ada:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000adc:	4770      	bx	lr
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	00ffffff 	.word	0x00ffffff
 8000ae4:	e000e010 	.word	0xe000e010
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000aec:	b570      	push	{r4, r5, r6, lr}
 8000aee:	1e04      	subs	r4, r0, #0
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000af0:	d027      	beq.n	8000b42 <HAL_DMA_Init+0x56>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000af2:	2521      	movs	r5, #33	; 0x21
 8000af4:	2302      	movs	r3, #2
 8000af6:	5543      	strb	r3, [r0, r5]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000af8:	6800      	ldr	r0, [r0, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000afa:	4a13      	ldr	r2, [pc, #76]	; (8000b48 <HAL_DMA_Init+0x5c>)
  tmp = hdma->Instance->CCR;
 8000afc:	6803      	ldr	r3, [r0, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000afe:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000b00:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8000b02:	6863      	ldr	r3, [r4, #4]
 8000b04:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b06:	68e1      	ldr	r1, [r4, #12]
 8000b08:	430b      	orrs	r3, r1
 8000b0a:	6921      	ldr	r1, [r4, #16]
 8000b0c:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b0e:	6961      	ldr	r1, [r4, #20]
 8000b10:	430b      	orrs	r3, r1
 8000b12:	69a1      	ldr	r1, [r4, #24]
 8000b14:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b16:	69e1      	ldr	r1, [r4, #28]
 8000b18:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8000b1a:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000b1c:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <HAL_DMA_Init+0x60>)
 8000b20:	2114      	movs	r1, #20
 8000b22:	469c      	mov	ip, r3
 8000b24:	4460      	add	r0, ip
 8000b26:	f7ff faef 	bl	8000108 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <HAL_DMA_Init+0x64>)
  hdma->State = HAL_DMA_STATE_READY;
 8000b2c:	2201      	movs	r2, #1
  hdma->DmaBaseAddress = DMA1;
 8000b2e:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b30:	2300      	movs	r3, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000b32:	0080      	lsls	r0, r0, #2
 8000b34:	6420      	str	r0, [r4, #64]	; 0x40
  return HAL_OK;
 8000b36:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b38:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8000b3a:	5562      	strb	r2, [r4, r5]
  hdma->Lock = HAL_UNLOCKED;
 8000b3c:	321f      	adds	r2, #31
 8000b3e:	54a3      	strb	r3, [r4, r2]
}  
 8000b40:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000b42:	2001      	movs	r0, #1
 8000b44:	e7fc      	b.n	8000b40 <HAL_DMA_Init+0x54>
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	ffffc00f 	.word	0xffffc00f
 8000b4c:	bffdfff8 	.word	0xbffdfff8
 8000b50:	40020000 	.word	0x40020000

08000b54 <HAL_DMA_Start_IT>:
{
 8000b54:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8000b56:	2520      	movs	r5, #32
 8000b58:	5d44      	ldrb	r4, [r0, r5]
 8000b5a:	2c01      	cmp	r4, #1
 8000b5c:	d029      	beq.n	8000bb2 <HAL_DMA_Start_IT+0x5e>
 8000b5e:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8000b60:	2621      	movs	r6, #33	; 0x21
  __HAL_LOCK(hdma);
 8000b62:	5544      	strb	r4, [r0, r5]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000b64:	5d84      	ldrb	r4, [r0, r6]
 8000b66:	b2e4      	uxtb	r4, r4
 8000b68:	2c01      	cmp	r4, #1
 8000b6a:	d11e      	bne.n	8000baa <HAL_DMA_Start_IT+0x56>
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000b6c:	3d1e      	subs	r5, #30
 8000b6e:	5585      	strb	r5, [r0, r6]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b70:	2500      	movs	r5, #0
 8000b72:	6385      	str	r5, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b74:	6805      	ldr	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000b76:	6c07      	ldr	r7, [r0, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b78:	682e      	ldr	r6, [r5, #0]
 8000b7a:	43a6      	bics	r6, r4
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000b7c:	40bc      	lsls	r4, r7
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b7e:	602e      	str	r6, [r5, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000b80:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8000b82:	6074      	str	r4, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8000b84:	606b      	str	r3, [r5, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000b86:	6843      	ldr	r3, [r0, #4]
 8000b88:	2b10      	cmp	r3, #16
 8000b8a:	d014      	beq.n	8000bb6 <HAL_DMA_Start_IT+0x62>
    if(NULL != hdma->XferHalfCpltCallback )
 8000b8c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = SrcAddress;
 8000b8e:	60a9      	str	r1, [r5, #8]
    hdma->Instance->CMAR = DstAddress;
 8000b90:	60ea      	str	r2, [r5, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d014      	beq.n	8000bc0 <HAL_DMA_Start_IT+0x6c>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b96:	220e      	movs	r2, #14
 8000b98:	682b      	ldr	r3, [r5, #0]
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	602b      	str	r3, [r5, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000b9e:	2201      	movs	r2, #1
	HAL_StatusTypeDef status = HAL_OK;
 8000ba0:	2000      	movs	r0, #0
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000ba2:	682b      	ldr	r3, [r5, #0]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	602b      	str	r3, [r5, #0]
} 
 8000ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_UNLOCK(hdma); 
 8000baa:	2300      	movs	r3, #0
 8000bac:	5543      	strb	r3, [r0, r5]
    status = HAL_BUSY;
 8000bae:	2002      	movs	r0, #2
 8000bb0:	e7fa      	b.n	8000ba8 <HAL_DMA_Start_IT+0x54>
  __HAL_LOCK(hdma);
 8000bb2:	2002      	movs	r0, #2
 8000bb4:	e7f8      	b.n	8000ba8 <HAL_DMA_Start_IT+0x54>
    if(NULL != hdma->XferHalfCpltCallback )
 8000bb6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = DstAddress;
 8000bb8:	60aa      	str	r2, [r5, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000bba:	60e9      	str	r1, [r5, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d1ea      	bne.n	8000b96 <HAL_DMA_Start_IT+0x42>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000bc0:	220a      	movs	r2, #10
 8000bc2:	682b      	ldr	r3, [r5, #0]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	602b      	str	r3, [r5, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000bc8:	682b      	ldr	r3, [r5, #0]
 8000bca:	3a06      	subs	r2, #6
 8000bcc:	4393      	bics	r3, r2
 8000bce:	602b      	str	r3, [r5, #0]
 8000bd0:	e7e5      	b.n	8000b9e <HAL_DMA_Start_IT+0x4a>
 8000bd2:	46c0      	nop			; (mov r8, r8)

08000bd4 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000bd4:	2321      	movs	r3, #33	; 0x21
{  
 8000bd6:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000bd8:	5cc2      	ldrb	r2, [r0, r3]
 8000bda:	2a02      	cmp	r2, #2
 8000bdc:	d003      	beq.n	8000be6 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bde:	3b1d      	subs	r3, #29
 8000be0:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8000be2:	2001      	movs	r0, #1
}
 8000be4:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000be6:	240e      	movs	r4, #14
 8000be8:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000bea:	6c05      	ldr	r5, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000bec:	6811      	ldr	r1, [r2, #0]
 8000bee:	43a1      	bics	r1, r4
 8000bf0:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000bf2:	2101      	movs	r1, #1
 8000bf4:	6814      	ldr	r4, [r2, #0]
 8000bf6:	438c      	bics	r4, r1
 8000bf8:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000bfa:	000c      	movs	r4, r1
 8000bfc:	40ac      	lsls	r4, r5
 8000bfe:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8000c00:	6054      	str	r4, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000c02:	54c1      	strb	r1, [r0, r3]
    __HAL_UNLOCK(hdma);
 8000c04:	2200      	movs	r2, #0
 8000c06:	2320      	movs	r3, #32
 8000c08:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferAbortCallback != NULL)
 8000c0a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d002      	beq.n	8000c16 <HAL_DMA_Abort_IT+0x42>
      hdma->XferAbortCallback(hdma);
 8000c10:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000c12:	2000      	movs	r0, #0
 8000c14:	e7e6      	b.n	8000be4 <HAL_DMA_Abort_IT+0x10>
 8000c16:	2000      	movs	r0, #0
 8000c18:	e7e4      	b.n	8000be4 <HAL_DMA_Abort_IT+0x10>
 8000c1a:	46c0      	nop			; (mov r8, r8)

08000c1c <HAL_DMA_IRQHandler>:
{
 8000c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000c1e:	2404      	movs	r4, #4
 8000c20:	0026      	movs	r6, r4
 8000c22:	6c03      	ldr	r3, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000c24:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000c26:	409e      	lsls	r6, r3
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000c28:	682a      	ldr	r2, [r5, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000c2a:	6801      	ldr	r1, [r0, #0]
 8000c2c:	680f      	ldr	r7, [r1, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000c2e:	4232      	tst	r2, r6
 8000c30:	d00d      	beq.n	8000c4e <HAL_DMA_IRQHandler+0x32>
 8000c32:	423c      	tst	r4, r7
 8000c34:	d00b      	beq.n	8000c4e <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c36:	680b      	ldr	r3, [r1, #0]
 8000c38:	069b      	lsls	r3, r3, #26
 8000c3a:	d402      	bmi.n	8000c42 <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000c3c:	680b      	ldr	r3, [r1, #0]
 8000c3e:	43a3      	bics	r3, r4
 8000c40:	600b      	str	r3, [r1, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000c42:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000c44:	606e      	str	r6, [r5, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d000      	beq.n	8000c4c <HAL_DMA_IRQHandler+0x30>
    	hdma->XferErrorCallback(hdma);
 8000c4a:	4798      	blx	r3
}  
 8000c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000c4e:	2402      	movs	r4, #2
 8000c50:	0026      	movs	r6, r4
 8000c52:	409e      	lsls	r6, r3
 8000c54:	4232      	tst	r2, r6
 8000c56:	d014      	beq.n	8000c82 <HAL_DMA_IRQHandler+0x66>
 8000c58:	423c      	tst	r4, r7
 8000c5a:	d012      	beq.n	8000c82 <HAL_DMA_IRQHandler+0x66>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c5c:	680b      	ldr	r3, [r1, #0]
 8000c5e:	069b      	lsls	r3, r3, #26
 8000c60:	d406      	bmi.n	8000c70 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000c62:	220a      	movs	r2, #10
 8000c64:	680b      	ldr	r3, [r1, #0]
 8000c66:	4393      	bics	r3, r2
 8000c68:	600b      	str	r3, [r1, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8000c6a:	2321      	movs	r3, #33	; 0x21
 8000c6c:	3a09      	subs	r2, #9
 8000c6e:	54c2      	strb	r2, [r0, r3]
  	__HAL_UNLOCK(hdma);
 8000c70:	2320      	movs	r3, #32
 8000c72:	2200      	movs	r2, #0
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000c74:	606e      	str	r6, [r5, #4]
  	__HAL_UNLOCK(hdma);
 8000c76:	54c2      	strb	r2, [r0, r3]
  	if(hdma->XferCpltCallback != NULL)
 8000c78:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d0e6      	beq.n	8000c4c <HAL_DMA_IRQHandler+0x30>
    	hdma->XferErrorCallback(hdma);
 8000c7e:	4798      	blx	r3
 8000c80:	e7e4      	b.n	8000c4c <HAL_DMA_IRQHandler+0x30>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000c82:	2408      	movs	r4, #8
 8000c84:	0026      	movs	r6, r4
 8000c86:	409e      	lsls	r6, r3
 8000c88:	4232      	tst	r2, r6
 8000c8a:	d0df      	beq.n	8000c4c <HAL_DMA_IRQHandler+0x30>
 8000c8c:	423c      	tst	r4, r7
 8000c8e:	d0dd      	beq.n	8000c4c <HAL_DMA_IRQHandler+0x30>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c90:	680a      	ldr	r2, [r1, #0]
 8000c92:	3406      	adds	r4, #6
 8000c94:	43a2      	bics	r2, r4
 8000c96:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000c98:	2201      	movs	r2, #1
 8000c9a:	0011      	movs	r1, r2
 8000c9c:	4099      	lsls	r1, r3
    hdma->State = HAL_DMA_STATE_READY;    
 8000c9e:	2321      	movs	r3, #33	; 0x21
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000ca0:	6069      	str	r1, [r5, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000ca2:	6382      	str	r2, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8000ca4:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma); 
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	3b01      	subs	r3, #1
 8000caa:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferErrorCallback != NULL)
 8000cac:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d0cc      	beq.n	8000c4c <HAL_DMA_IRQHandler+0x30>
    	hdma->XferErrorCallback(hdma);
 8000cb2:	4798      	blx	r3
 8000cb4:	e7ca      	b.n	8000c4c <HAL_DMA_IRQHandler+0x30>
 8000cb6:	46c0      	nop			; (mov r8, r8)

08000cb8 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cba:	46de      	mov	lr, fp
 8000cbc:	4657      	mov	r7, sl
 8000cbe:	464e      	mov	r6, r9
 8000cc0:	4645      	mov	r5, r8
 8000cc2:	b5e0      	push	{r5, r6, r7, lr}
 8000cc4:	469b      	mov	fp, r3
 8000cc6:	b083      	sub	sp, #12
  HAL_StatusTypeDef status = HAL_ERROR;
  uint8_t index = 0U;
  uint8_t nbiterations = 0U;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000cc8:	4b68      	ldr	r3, [pc, #416]	; (8000e6c <HAL_FLASH_Program+0x1b4>)
{
 8000cca:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(&pFlash);
 8000ccc:	4699      	mov	r9, r3
 8000cce:	7e1b      	ldrb	r3, [r3, #24]
{
 8000cd0:	4680      	mov	r8, r0
 8000cd2:	468a      	mov	sl, r1
  __HAL_LOCK(&pFlash);
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d100      	bne.n	8000cda <HAL_FLASH_Program+0x22>
 8000cd8:	e0b7      	b.n	8000e4a <HAL_FLASH_Program+0x192>
 8000cda:	2301      	movs	r3, #1
 8000cdc:	464a      	mov	r2, r9
 8000cde:	7613      	strb	r3, [r2, #24]
{
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000ce0:	f7ff fbca 	bl	8000478 <HAL_GetTick>
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000ce4:	4c62      	ldr	r4, [pc, #392]	; (8000e70 <HAL_FLASH_Program+0x1b8>)
  uint32_t tickstart = HAL_GetTick();
 8000ce6:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000ce8:	2501      	movs	r5, #1
  { 
    if (Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000cea:	4e62      	ldr	r6, [pc, #392]	; (8000e74 <HAL_FLASH_Program+0x1bc>)
 8000cec:	e005      	b.n	8000cfa <HAL_FLASH_Program+0x42>
 8000cee:	f7ff fbc3 	bl	8000478 <HAL_GetTick>
 8000cf2:	1bc0      	subs	r0, r0, r7
 8000cf4:	42b0      	cmp	r0, r6
 8000cf6:	d900      	bls.n	8000cfa <HAL_FLASH_Program+0x42>
 8000cf8:	e0a9      	b.n	8000e4e <HAL_FLASH_Program+0x196>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000cfa:	68e3      	ldr	r3, [r4, #12]
 8000cfc:	421d      	tst	r5, r3
 8000cfe:	d1f6      	bne.n	8000cee <HAL_FLASH_Program+0x36>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000d00:	2320      	movs	r3, #32
 8000d02:	68e2      	ldr	r2, [r4, #12]
 8000d04:	4213      	tst	r3, r2
 8000d06:	d000      	beq.n	8000d0a <HAL_FLASH_Program+0x52>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000d08:	60e3      	str	r3, [r4, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000d0a:	4b59      	ldr	r3, [pc, #356]	; (8000e70 <HAL_FLASH_Program+0x1b8>)
 8000d0c:	68da      	ldr	r2, [r3, #12]
 8000d0e:	06d2      	lsls	r2, r2, #27
 8000d10:	d402      	bmi.n	8000d18 <HAL_FLASH_Program+0x60>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000d12:	68db      	ldr	r3, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000d14:	075b      	lsls	r3, r3, #29
 8000d16:	d515      	bpl.n	8000d44 <HAL_FLASH_Program+0x8c>
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000d18:	4b55      	ldr	r3, [pc, #340]	; (8000e70 <HAL_FLASH_Program+0x1b8>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	06db      	lsls	r3, r3, #27
 8000d1e:	d500      	bpl.n	8000d22 <HAL_FLASH_Program+0x6a>
 8000d20:	e097      	b.n	8000e52 <HAL_FLASH_Program+0x19a>
 8000d22:	2104      	movs	r1, #4
  uint32_t flags = 0U;
 8000d24:	2300      	movs	r3, #0
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
    flags |= FLASH_FLAG_WRPERR;
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000d26:	4a52      	ldr	r2, [pc, #328]	; (8000e70 <HAL_FLASH_Program+0x1b8>)
 8000d28:	68d2      	ldr	r2, [r2, #12]
 8000d2a:	0752      	lsls	r2, r2, #29
 8000d2c:	d506      	bpl.n	8000d3c <HAL_FLASH_Program+0x84>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000d2e:	464b      	mov	r3, r9
 8000d30:	2201      	movs	r2, #1
 8000d32:	69db      	ldr	r3, [r3, #28]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	464a      	mov	r2, r9
 8000d38:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8000d3a:	000b      	movs	r3, r1
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000d3c:	4a4c      	ldr	r2, [pc, #304]	; (8000e70 <HAL_FLASH_Program+0x1b8>)
    return HAL_ERROR;
 8000d3e:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000d40:	60d3      	str	r3, [r2, #12]
 8000d42:	e056      	b.n	8000df2 <HAL_FLASH_Program+0x13a>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000d44:	4643      	mov	r3, r8
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d100      	bne.n	8000d4c <HAL_FLASH_Program+0x94>
 8000d4a:	e08b      	b.n	8000e64 <HAL_FLASH_Program+0x1ac>
      nbiterations = 2U;
 8000d4c:	3b02      	subs	r3, #2
 8000d4e:	1e5a      	subs	r2, r3, #1
 8000d50:	4193      	sbcs	r3, r2
 8000d52:	2202      	movs	r2, #2
 8000d54:	425b      	negs	r3, r3
 8000d56:	401a      	ands	r2, r3
 8000d58:	1c93      	adds	r3, r2, #2
 8000d5a:	9300      	str	r3, [sp, #0]
      nbiterations = 4U;
 8000d5c:	2300      	movs	r3, #0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000d5e:	2501      	movs	r5, #1
      nbiterations = 4U;
 8000d60:	4698      	mov	r8, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000d62:	4c43      	ldr	r4, [pc, #268]	; (8000e70 <HAL_FLASH_Program+0x1b8>)
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000d64:	4643      	mov	r3, r8
 8000d66:	2220      	movs	r2, #32
 8000d68:	011b      	lsls	r3, r3, #4
 8000d6a:	4252      	negs	r2, r2
 8000d6c:	189a      	adds	r2, r3, r2
 8000d6e:	d45f      	bmi.n	8000e30 <HAL_FLASH_Program+0x178>
 8000d70:	465b      	mov	r3, fp
 8000d72:	40d3      	lsrs	r3, r2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000d74:	2200      	movs	r2, #0
 8000d76:	4649      	mov	r1, r9
 8000d78:	61ca      	str	r2, [r1, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000d7a:	6922      	ldr	r2, [r4, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000d7c:	b29b      	uxth	r3, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000d7e:	432a      	orrs	r2, r5
 8000d80:	6122      	str	r2, [r4, #16]
  *(__IO uint16_t*)Address = Data;
 8000d82:	4652      	mov	r2, sl
 8000d84:	8013      	strh	r3, [r2, #0]
  uint32_t tickstart = HAL_GetTick();
 8000d86:	f7ff fb77 	bl	8000478 <HAL_GetTick>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000d8a:	4e3a      	ldr	r6, [pc, #232]	; (8000e74 <HAL_FLASH_Program+0x1bc>)
  uint32_t tickstart = HAL_GetTick();
 8000d8c:	0007      	movs	r7, r0
 8000d8e:	e004      	b.n	8000d9a <HAL_FLASH_Program+0xe2>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000d90:	f7ff fb72 	bl	8000478 <HAL_GetTick>
 8000d94:	1bc0      	subs	r0, r0, r7
 8000d96:	42b0      	cmp	r0, r6
 8000d98:	d845      	bhi.n	8000e26 <HAL_FLASH_Program+0x16e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000d9a:	68e3      	ldr	r3, [r4, #12]
 8000d9c:	421d      	tst	r5, r3
 8000d9e:	d1f7      	bne.n	8000d90 <HAL_FLASH_Program+0xd8>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000da0:	2220      	movs	r2, #32
 8000da2:	68e3      	ldr	r3, [r4, #12]
 8000da4:	421a      	tst	r2, r3
 8000da6:	d000      	beq.n	8000daa <HAL_FLASH_Program+0xf2>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000da8:	60e2      	str	r2, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000daa:	68e3      	ldr	r3, [r4, #12]
 8000dac:	06db      	lsls	r3, r3, #27
 8000dae:	d402      	bmi.n	8000db6 <HAL_FLASH_Program+0xfe>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000db0:	68e3      	ldr	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000db2:	075b      	lsls	r3, r3, #29
 8000db4:	d527      	bpl.n	8000e06 <HAL_FLASH_Program+0x14e>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000db6:	4b2e      	ldr	r3, [pc, #184]	; (8000e70 <HAL_FLASH_Program+0x1b8>)
 8000db8:	68db      	ldr	r3, [r3, #12]
 8000dba:	06db      	lsls	r3, r3, #27
 8000dbc:	d542      	bpl.n	8000e44 <HAL_FLASH_Program+0x18c>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000dbe:	464b      	mov	r3, r9
 8000dc0:	2202      	movs	r2, #2
 8000dc2:	69db      	ldr	r3, [r3, #28]
 8000dc4:	2114      	movs	r1, #20
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	464a      	mov	r2, r9
 8000dca:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8000dcc:	2210      	movs	r2, #16
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000dce:	4b28      	ldr	r3, [pc, #160]	; (8000e70 <HAL_FLASH_Program+0x1b8>)
 8000dd0:	68db      	ldr	r3, [r3, #12]
 8000dd2:	075b      	lsls	r3, r3, #29
 8000dd4:	d506      	bpl.n	8000de4 <HAL_FLASH_Program+0x12c>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000dd6:	464b      	mov	r3, r9
 8000dd8:	2201      	movs	r2, #1
 8000dda:	69db      	ldr	r3, [r3, #28]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	464a      	mov	r2, r9
 8000de0:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8000de2:	000a      	movs	r2, r1
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000de4:	2101      	movs	r1, #1
    return HAL_ERROR;
 8000de6:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000de8:	4b21      	ldr	r3, [pc, #132]	; (8000e70 <HAL_FLASH_Program+0x1b8>)
 8000dea:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000dec:	691a      	ldr	r2, [r3, #16]
 8000dee:	438a      	bics	r2, r1
 8000df0:	611a      	str	r2, [r3, #16]
  __HAL_UNLOCK(&pFlash);
 8000df2:	2300      	movs	r3, #0
 8000df4:	464a      	mov	r2, r9
 8000df6:	7613      	strb	r3, [r2, #24]
}
 8000df8:	b003      	add	sp, #12
 8000dfa:	bc3c      	pop	{r2, r3, r4, r5}
 8000dfc:	4690      	mov	r8, r2
 8000dfe:	4699      	mov	r9, r3
 8000e00:	46a2      	mov	sl, r4
 8000e02:	46ab      	mov	fp, r5
 8000e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000e06:	6923      	ldr	r3, [r4, #16]
    for (index = 0U; index < nbiterations; index++)
 8000e08:	9a00      	ldr	r2, [sp, #0]
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000e0a:	43ab      	bics	r3, r5
 8000e0c:	6123      	str	r3, [r4, #16]
 8000e0e:	2301      	movs	r3, #1
 8000e10:	469c      	mov	ip, r3
 8000e12:	3301      	adds	r3, #1
 8000e14:	44e0      	add	r8, ip
 8000e16:	469c      	mov	ip, r3
    for (index = 0U; index < nbiterations; index++)
 8000e18:	4643      	mov	r3, r8
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	44e2      	add	sl, ip
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d8a0      	bhi.n	8000d64 <HAL_FLASH_Program+0xac>
 8000e22:	2000      	movs	r0, #0
 8000e24:	e7e5      	b.n	8000df2 <HAL_FLASH_Program+0x13a>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000e26:	6923      	ldr	r3, [r4, #16]
 8000e28:	2003      	movs	r0, #3
 8000e2a:	43ab      	bics	r3, r5
 8000e2c:	6123      	str	r3, [r4, #16]
 8000e2e:	e7e0      	b.n	8000df2 <HAL_FLASH_Program+0x13a>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000e30:	2220      	movs	r2, #32
 8000e32:	4659      	mov	r1, fp
 8000e34:	1ad2      	subs	r2, r2, r3
 8000e36:	4091      	lsls	r1, r2
 8000e38:	000a      	movs	r2, r1
 8000e3a:	9901      	ldr	r1, [sp, #4]
 8000e3c:	40d9      	lsrs	r1, r3
 8000e3e:	000b      	movs	r3, r1
 8000e40:	4313      	orrs	r3, r2
 8000e42:	e797      	b.n	8000d74 <HAL_FLASH_Program+0xbc>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000e44:	2104      	movs	r1, #4
  uint32_t flags = 0U;
 8000e46:	2200      	movs	r2, #0
 8000e48:	e7c1      	b.n	8000dce <HAL_FLASH_Program+0x116>
  __HAL_LOCK(&pFlash);
 8000e4a:	2002      	movs	r0, #2
 8000e4c:	e7d4      	b.n	8000df8 <HAL_FLASH_Program+0x140>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000e4e:	2003      	movs	r0, #3
 8000e50:	e7cf      	b.n	8000df2 <HAL_FLASH_Program+0x13a>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000e52:	464b      	mov	r3, r9
 8000e54:	2202      	movs	r2, #2
 8000e56:	69db      	ldr	r3, [r3, #28]
 8000e58:	2114      	movs	r1, #20
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	464a      	mov	r2, r9
 8000e5e:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8000e60:	2310      	movs	r3, #16
 8000e62:	e760      	b.n	8000d26 <HAL_FLASH_Program+0x6e>
      nbiterations = 1U;
 8000e64:	2301      	movs	r3, #1
 8000e66:	9300      	str	r3, [sp, #0]
 8000e68:	e778      	b.n	8000d5c <HAL_FLASH_Program+0xa4>
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	20000278 	.word	0x20000278
 8000e70:	40022000 	.word	0x40022000
 8000e74:	0000c350 	.word	0x0000c350

08000e78 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000e78:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <HAL_FLASH_Unlock+0x1c>)
  HAL_StatusTypeDef status = HAL_OK;
 8000e7a:	2000      	movs	r0, #0
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000e7c:	691a      	ldr	r2, [r3, #16]
 8000e7e:	0612      	lsls	r2, r2, #24
 8000e80:	d506      	bpl.n	8000e90 <HAL_FLASH_Unlock+0x18>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000e82:	4a05      	ldr	r2, [pc, #20]	; (8000e98 <HAL_FLASH_Unlock+0x20>)
 8000e84:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000e86:	4a05      	ldr	r2, [pc, #20]	; (8000e9c <HAL_FLASH_Unlock+0x24>)
 8000e88:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000e8a:	6918      	ldr	r0, [r3, #16]
 8000e8c:	0600      	lsls	r0, r0, #24
  HAL_StatusTypeDef status = HAL_OK;
 8000e8e:	0fc0      	lsrs	r0, r0, #31
}
 8000e90:	4770      	bx	lr
 8000e92:	46c0      	nop			; (mov r8, r8)
 8000e94:	40022000 	.word	0x40022000
 8000e98:	45670123 	.word	0x45670123
 8000e9c:	cdef89ab 	.word	0xcdef89ab

08000ea0 <FLASH_WaitForLastOperation>:
{
 8000ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ea2:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000ea4:	f7ff fae8 	bl	8000478 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000ea8:	2501      	movs	r5, #1
  uint32_t tickstart = HAL_GetTick();
 8000eaa:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000eac:	4e1f      	ldr	r6, [pc, #124]	; (8000f2c <FLASH_WaitForLastOperation+0x8c>)
 8000eae:	1c63      	adds	r3, r4, #1
 8000eb0:	d125      	bne.n	8000efe <FLASH_WaitForLastOperation+0x5e>
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	491d      	ldr	r1, [pc, #116]	; (8000f2c <FLASH_WaitForLastOperation+0x8c>)
 8000eb6:	68cb      	ldr	r3, [r1, #12]
 8000eb8:	421a      	tst	r2, r3
 8000eba:	d1fc      	bne.n	8000eb6 <FLASH_WaitForLastOperation+0x16>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000ebc:	2220      	movs	r2, #32
 8000ebe:	4b1b      	ldr	r3, [pc, #108]	; (8000f2c <FLASH_WaitForLastOperation+0x8c>)
 8000ec0:	68d9      	ldr	r1, [r3, #12]
 8000ec2:	420a      	tst	r2, r1
 8000ec4:	d127      	bne.n	8000f16 <FLASH_WaitForLastOperation+0x76>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000ec6:	4b19      	ldr	r3, [pc, #100]	; (8000f2c <FLASH_WaitForLastOperation+0x8c>)
 8000ec8:	68da      	ldr	r2, [r3, #12]
 8000eca:	06d2      	lsls	r2, r2, #27
 8000ecc:	d403      	bmi.n	8000ed6 <FLASH_WaitForLastOperation+0x36>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000ece:	68db      	ldr	r3, [r3, #12]
  return HAL_OK;
 8000ed0:	2000      	movs	r0, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000ed2:	075b      	lsls	r3, r3, #29
 8000ed4:	d512      	bpl.n	8000efc <FLASH_WaitForLastOperation+0x5c>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000ed6:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <FLASH_WaitForLastOperation+0x8c>)
 8000ed8:	68db      	ldr	r3, [r3, #12]
 8000eda:	06db      	lsls	r3, r3, #27
 8000edc:	d41d      	bmi.n	8000f1a <FLASH_WaitForLastOperation+0x7a>
 8000ede:	2104      	movs	r1, #4
  uint32_t flags = 0U;
 8000ee0:	2300      	movs	r3, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000ee2:	4a12      	ldr	r2, [pc, #72]	; (8000f2c <FLASH_WaitForLastOperation+0x8c>)
 8000ee4:	68d2      	ldr	r2, [r2, #12]
 8000ee6:	0752      	lsls	r2, r2, #29
 8000ee8:	d505      	bpl.n	8000ef6 <FLASH_WaitForLastOperation+0x56>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000eea:	2001      	movs	r0, #1
 8000eec:	4a10      	ldr	r2, [pc, #64]	; (8000f30 <FLASH_WaitForLastOperation+0x90>)
 8000eee:	69d3      	ldr	r3, [r2, #28]
 8000ef0:	4303      	orrs	r3, r0
 8000ef2:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8000ef4:	000b      	movs	r3, r1
    return HAL_ERROR;
 8000ef6:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000ef8:	4a0c      	ldr	r2, [pc, #48]	; (8000f2c <FLASH_WaitForLastOperation+0x8c>)
 8000efa:	60d3      	str	r3, [r2, #12]
}
 8000efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000efe:	68f3      	ldr	r3, [r6, #12]
 8000f00:	421d      	tst	r5, r3
 8000f02:	d0db      	beq.n	8000ebc <FLASH_WaitForLastOperation+0x1c>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000f04:	2c00      	cmp	r4, #0
 8000f06:	d004      	beq.n	8000f12 <FLASH_WaitForLastOperation+0x72>
 8000f08:	f7ff fab6 	bl	8000478 <HAL_GetTick>
 8000f0c:	1bc0      	subs	r0, r0, r7
 8000f0e:	42a0      	cmp	r0, r4
 8000f10:	d9cd      	bls.n	8000eae <FLASH_WaitForLastOperation+0xe>
        return HAL_TIMEOUT;
 8000f12:	2003      	movs	r0, #3
 8000f14:	e7f2      	b.n	8000efc <FLASH_WaitForLastOperation+0x5c>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000f16:	60da      	str	r2, [r3, #12]
 8000f18:	e7d5      	b.n	8000ec6 <FLASH_WaitForLastOperation+0x26>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000f1a:	2102      	movs	r1, #2
 8000f1c:	4a04      	ldr	r2, [pc, #16]	; (8000f30 <FLASH_WaitForLastOperation+0x90>)
 8000f1e:	69d3      	ldr	r3, [r2, #28]
 8000f20:	430b      	orrs	r3, r1
 8000f22:	61d3      	str	r3, [r2, #28]
 8000f24:	3112      	adds	r1, #18
    flags |= FLASH_FLAG_WRPERR;
 8000f26:	2310      	movs	r3, #16
 8000f28:	e7db      	b.n	8000ee2 <FLASH_WaitForLastOperation+0x42>
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	40022000 	.word	0x40022000
 8000f30:	20000278 	.word	0x20000278

08000f34 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f36:	464f      	mov	r7, r9
 8000f38:	4646      	mov	r6, r8
 8000f3a:	46d6      	mov	lr, sl
 8000f3c:	b5c0      	push	{r6, r7, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t address = 0U;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000f3e:	4f30      	ldr	r7, [pc, #192]	; (8001000 <HAL_FLASHEx_Erase+0xcc>)
{
 8000f40:	0006      	movs	r6, r0
  __HAL_LOCK(&pFlash);
 8000f42:	7e3b      	ldrb	r3, [r7, #24]
{
 8000f44:	4689      	mov	r9, r1
  __HAL_LOCK(&pFlash);
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d057      	beq.n	8000ffa <HAL_FLASHEx_Erase+0xc6>
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	763b      	strb	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000f4e:	6803      	ldr	r3, [r0, #0]
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000f50:	482c      	ldr	r0, [pc, #176]	; (8001004 <HAL_FLASHEx_Erase+0xd0>)
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d034      	beq.n	8000fc0 <HAL_FLASHEx_Erase+0x8c>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000f56:	f7ff ffa3 	bl	8000ea0 <FLASH_WaitForLastOperation>
 8000f5a:	2800      	cmp	r0, #0
 8000f5c:	d134      	bne.n	8000fc8 <HAL_FLASHEx_Erase+0x94>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	464a      	mov	r2, r9
 8000f62:	425b      	negs	r3, r3
 8000f64:	6013      	str	r3, [r2, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000f66:	68b3      	ldr	r3, [r6, #8]
        for(address = pEraseInit->PageAddress;
 8000f68:	6875      	ldr	r5, [r6, #4]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000f6a:	029b      	lsls	r3, r3, #10
 8000f6c:	195b      	adds	r3, r3, r5
        for(address = pEraseInit->PageAddress;
 8000f6e:	429d      	cmp	r5, r3
 8000f70:	d22a      	bcs.n	8000fc8 <HAL_FLASHEx_Erase+0x94>
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000f72:	2300      	movs	r3, #0

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000f74:	4c24      	ldr	r4, [pc, #144]	; (8001008 <HAL_FLASHEx_Erase+0xd4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000f76:	4698      	mov	r8, r3
 8000f78:	e00a      	b.n	8000f90 <HAL_FLASHEx_Erase+0x5c>
            address += FLASH_PAGE_SIZE)
 8000f7a:	2380      	movs	r3, #128	; 0x80
 8000f7c:	00db      	lsls	r3, r3, #3
 8000f7e:	469c      	mov	ip, r3
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000f80:	6872      	ldr	r2, [r6, #4]
            address += FLASH_PAGE_SIZE)
 8000f82:	4465      	add	r5, ip
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000f84:	4694      	mov	ip, r2
 8000f86:	68b3      	ldr	r3, [r6, #8]
 8000f88:	029b      	lsls	r3, r3, #10
 8000f8a:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 8000f8c:	42ab      	cmp	r3, r5
 8000f8e:	d91c      	bls.n	8000fca <HAL_FLASHEx_Erase+0x96>
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000f90:	2202      	movs	r2, #2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000f92:	4643      	mov	r3, r8
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000f94:	4692      	mov	sl, r2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000f96:	61fb      	str	r3, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000f98:	6923      	ldr	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f9a:	481a      	ldr	r0, [pc, #104]	; (8001004 <HAL_FLASHEx_Erase+0xd0>)
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	6123      	str	r3, [r4, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000fa0:	6165      	str	r5, [r4, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000fa2:	6923      	ldr	r3, [r4, #16]
 8000fa4:	323e      	adds	r2, #62	; 0x3e
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	6123      	str	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000faa:	f7ff ff79 	bl	8000ea0 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000fae:	4652      	mov	r2, sl
 8000fb0:	6923      	ldr	r3, [r4, #16]
 8000fb2:	4393      	bics	r3, r2
 8000fb4:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8000fb6:	2800      	cmp	r0, #0
 8000fb8:	d0df      	beq.n	8000f7a <HAL_FLASHEx_Erase+0x46>
            *PageError = address;
 8000fba:	464b      	mov	r3, r9
 8000fbc:	601d      	str	r5, [r3, #0]
            break;
 8000fbe:	e004      	b.n	8000fca <HAL_FLASHEx_Erase+0x96>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000fc0:	f7ff ff6e 	bl	8000ea0 <FLASH_WaitForLastOperation>
 8000fc4:	2800      	cmp	r0, #0
 8000fc6:	d007      	beq.n	8000fd8 <HAL_FLASHEx_Erase+0xa4>
  HAL_StatusTypeDef status = HAL_ERROR;
 8000fc8:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8000fca:	2300      	movs	r3, #0
 8000fcc:	763b      	strb	r3, [r7, #24]
}
 8000fce:	bc1c      	pop	{r2, r3, r4}
 8000fd0:	4690      	mov	r8, r2
 8000fd2:	4699      	mov	r9, r3
 8000fd4:	46a2      	mov	sl, r4
 8000fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000fd8:	2504      	movs	r5, #4
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000fda:	2240      	movs	r2, #64	; 0x40
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000fdc:	4c0a      	ldr	r4, [pc, #40]	; (8001008 <HAL_FLASHEx_Erase+0xd4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000fde:	61f8      	str	r0, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000fe0:	6923      	ldr	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000fe2:	4808      	ldr	r0, [pc, #32]	; (8001004 <HAL_FLASHEx_Erase+0xd0>)
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000fe4:	432b      	orrs	r3, r5
 8000fe6:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000fe8:	6923      	ldr	r3, [r4, #16]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000fee:	f7ff ff57 	bl	8000ea0 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000ff2:	6923      	ldr	r3, [r4, #16]
 8000ff4:	43ab      	bics	r3, r5
 8000ff6:	6123      	str	r3, [r4, #16]
 8000ff8:	e7e7      	b.n	8000fca <HAL_FLASHEx_Erase+0x96>
  __HAL_LOCK(&pFlash);
 8000ffa:	2002      	movs	r0, #2
 8000ffc:	e7e7      	b.n	8000fce <HAL_FLASHEx_Erase+0x9a>
 8000ffe:	46c0      	nop			; (mov r8, r8)
 8001000:	20000278 	.word	0x20000278
 8001004:	0000c350 	.word	0x0000c350
 8001008:	40022000 	.word	0x40022000

0800100c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800100c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800100e:	464e      	mov	r6, r9
 8001010:	46de      	mov	lr, fp
 8001012:	4657      	mov	r7, sl
 8001014:	4645      	mov	r5, r8
 8001016:	b5e0      	push	{r5, r6, r7, lr}
 8001018:	4689      	mov	r9, r1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800101a:	6809      	ldr	r1, [r1, #0]
{ 
 800101c:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800101e:	2900      	cmp	r1, #0
 8001020:	d100      	bne.n	8001024 <HAL_GPIO_Init+0x18>
 8001022:	e07e      	b.n	8001122 <HAL_GPIO_Init+0x116>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001024:	4b6c      	ldr	r3, [pc, #432]	; (80011d8 <HAL_GPIO_Init+0x1cc>)
  uint32_t position = 0x00u;
 8001026:	2200      	movs	r2, #0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001028:	469b      	mov	fp, r3
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800102a:	4b6c      	ldr	r3, [pc, #432]	; (80011dc <HAL_GPIO_Init+0x1d0>)
 800102c:	468a      	mov	sl, r1
 800102e:	4698      	mov	r8, r3
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001030:	2501      	movs	r5, #1
 8001032:	4654      	mov	r4, sl
 8001034:	4095      	lsls	r5, r2
 8001036:	402c      	ands	r4, r5
 8001038:	9400      	str	r4, [sp, #0]
    if (iocurrent != 0x00u)
 800103a:	d06e      	beq.n	800111a <HAL_GPIO_Init+0x10e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800103c:	464b      	mov	r3, r9
 800103e:	6859      	ldr	r1, [r3, #4]
 8001040:	2310      	movs	r3, #16
 8001042:	000f      	movs	r7, r1
 8001044:	439f      	bics	r7, r3
 8001046:	9701      	str	r7, [sp, #4]
 8001048:	2f02      	cmp	r7, #2
 800104a:	d100      	bne.n	800104e <HAL_GPIO_Init+0x42>
 800104c:	e070      	b.n	8001130 <HAL_GPIO_Init+0x124>
      temp = GPIOx->MODER;
 800104e:	6803      	ldr	r3, [r0, #0]
 8001050:	0056      	lsls	r6, r2, #1
 8001052:	469c      	mov	ip, r3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001054:	2303      	movs	r3, #3
 8001056:	40b3      	lsls	r3, r6
 8001058:	4664      	mov	r4, ip
 800105a:	43db      	mvns	r3, r3
 800105c:	401c      	ands	r4, r3
 800105e:	0027      	movs	r7, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001060:	2403      	movs	r4, #3
 8001062:	400c      	ands	r4, r1
 8001064:	40b4      	lsls	r4, r6
 8001066:	46a4      	mov	ip, r4
 8001068:	003c      	movs	r4, r7
 800106a:	4667      	mov	r7, ip
 800106c:	433c      	orrs	r4, r7
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800106e:	9f01      	ldr	r7, [sp, #4]
      GPIOx->MODER = temp;
 8001070:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001072:	3f01      	subs	r7, #1
 8001074:	2f01      	cmp	r7, #1
 8001076:	d800      	bhi.n	800107a <HAL_GPIO_Init+0x6e>
 8001078:	e077      	b.n	800116a <HAL_GPIO_Init+0x15e>
      temp = GPIOx->PUPDR;
 800107a:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800107c:	402b      	ands	r3, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800107e:	464d      	mov	r5, r9
 8001080:	68ad      	ldr	r5, [r5, #8]
 8001082:	40b5      	lsls	r5, r6
 8001084:	432b      	orrs	r3, r5
      GPIOx->PUPDR = temp;
 8001086:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001088:	2380      	movs	r3, #128	; 0x80
 800108a:	055b      	lsls	r3, r3, #21
 800108c:	4219      	tst	r1, r3
 800108e:	d044      	beq.n	800111a <HAL_GPIO_Init+0x10e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001090:	465b      	mov	r3, fp
 8001092:	2401      	movs	r4, #1
 8001094:	465d      	mov	r5, fp
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001096:	2603      	movs	r6, #3
 8001098:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109a:	699b      	ldr	r3, [r3, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800109c:	4016      	ands	r6, r2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109e:	4323      	orrs	r3, r4
 80010a0:	61ab      	str	r3, [r5, #24]
 80010a2:	69ab      	ldr	r3, [r5, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010a4:	00b6      	lsls	r6, r6, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a6:	4023      	ands	r3, r4
 80010a8:	4c4d      	ldr	r4, [pc, #308]	; (80011e0 <HAL_GPIO_Init+0x1d4>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010aa:	40b7      	lsls	r7, r6
 80010ac:	46a4      	mov	ip, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010ae:	2490      	movs	r4, #144	; 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b0:	9303      	str	r3, [sp, #12]
 80010b2:	9b03      	ldr	r3, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 80010b4:	0893      	lsrs	r3, r2, #2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	4463      	add	r3, ip
 80010ba:	689d      	ldr	r5, [r3, #8]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010bc:	05e4      	lsls	r4, r4, #23
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010be:	43bd      	bics	r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010c0:	42a0      	cmp	r0, r4
 80010c2:	d00e      	beq.n	80010e2 <HAL_GPIO_Init+0xd6>
 80010c4:	4f47      	ldr	r7, [pc, #284]	; (80011e4 <HAL_GPIO_Init+0x1d8>)
 80010c6:	42b8      	cmp	r0, r7
 80010c8:	d100      	bne.n	80010cc <HAL_GPIO_Init+0xc0>
 80010ca:	e07c      	b.n	80011c6 <HAL_GPIO_Init+0x1ba>
 80010cc:	4f46      	ldr	r7, [pc, #280]	; (80011e8 <HAL_GPIO_Init+0x1dc>)
 80010ce:	42b8      	cmp	r0, r7
 80010d0:	d100      	bne.n	80010d4 <HAL_GPIO_Init+0xc8>
 80010d2:	e074      	b.n	80011be <HAL_GPIO_Init+0x1b2>
 80010d4:	4f45      	ldr	r7, [pc, #276]	; (80011ec <HAL_GPIO_Init+0x1e0>)
 80010d6:	42b8      	cmp	r0, r7
 80010d8:	d100      	bne.n	80010dc <HAL_GPIO_Init+0xd0>
 80010da:	e078      	b.n	80011ce <HAL_GPIO_Init+0x1c2>
 80010dc:	2705      	movs	r7, #5
 80010de:	40b7      	lsls	r7, r6
 80010e0:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010e2:	609d      	str	r5, [r3, #8]
        temp = EXTI->IMR;
 80010e4:	4643      	mov	r3, r8
        temp &= ~(iocurrent);
 80010e6:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->IMR;
 80010e8:	681b      	ldr	r3, [r3, #0]
        temp &= ~(iocurrent);
 80010ea:	43e5      	mvns	r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010ec:	03cc      	lsls	r4, r1, #15
 80010ee:	d44e      	bmi.n	800118e <HAL_GPIO_Init+0x182>
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 80010f0:	4644      	mov	r4, r8
        temp &= ~(iocurrent);
 80010f2:	402b      	ands	r3, r5
        EXTI->IMR = temp;
 80010f4:	6023      	str	r3, [r4, #0]

        temp = EXTI->EMR;
 80010f6:	6863      	ldr	r3, [r4, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010f8:	038c      	lsls	r4, r1, #14
 80010fa:	d44f      	bmi.n	800119c <HAL_GPIO_Init+0x190>
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 80010fc:	4644      	mov	r4, r8
        temp &= ~(iocurrent);
 80010fe:	402b      	ands	r3, r5
        EXTI->EMR = temp;
 8001100:	6063      	str	r3, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001102:	68a3      	ldr	r3, [r4, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001104:	02cc      	lsls	r4, r1, #11
 8001106:	d450      	bmi.n	80011aa <HAL_GPIO_Init+0x19e>
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8001108:	4644      	mov	r4, r8
        temp &= ~(iocurrent);
 800110a:	402b      	ands	r3, r5
        EXTI->RTSR = temp;
 800110c:	60a3      	str	r3, [r4, #8]

        temp = EXTI->FTSR;
 800110e:	68e3      	ldr	r3, [r4, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001110:	0289      	lsls	r1, r1, #10
 8001112:	d451      	bmi.n	80011b8 <HAL_GPIO_Init+0x1ac>
        temp &= ~(iocurrent);
 8001114:	402b      	ands	r3, r5
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8001116:	4641      	mov	r1, r8
 8001118:	60cb      	str	r3, [r1, #12]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800111a:	4653      	mov	r3, sl
      }
    }

    position++;
 800111c:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800111e:	40d3      	lsrs	r3, r2
 8001120:	d186      	bne.n	8001030 <HAL_GPIO_Init+0x24>
  } 
}
 8001122:	b005      	add	sp, #20
 8001124:	bc3c      	pop	{r2, r3, r4, r5}
 8001126:	4690      	mov	r8, r2
 8001128:	4699      	mov	r9, r3
 800112a:	46a2      	mov	sl, r4
 800112c:	46ab      	mov	fp, r5
 800112e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001130:	2607      	movs	r6, #7
 8001132:	240f      	movs	r4, #15
 8001134:	4016      	ands	r6, r2
 8001136:	00b6      	lsls	r6, r6, #2
 8001138:	40b4      	lsls	r4, r6
        temp = GPIOx->AFR[position >> 3u];
 800113a:	08d3      	lsrs	r3, r2, #3
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	18c3      	adds	r3, r0, r3
 8001140:	6a1f      	ldr	r7, [r3, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001142:	43a7      	bics	r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001144:	464c      	mov	r4, r9
 8001146:	6924      	ldr	r4, [r4, #16]
 8001148:	40b4      	lsls	r4, r6
 800114a:	0026      	movs	r6, r4
 800114c:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3u] = temp;
 800114e:	621e      	str	r6, [r3, #32]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001150:	2303      	movs	r3, #3
 8001152:	0056      	lsls	r6, r2, #1
 8001154:	40b3      	lsls	r3, r6
 8001156:	43db      	mvns	r3, r3
      temp = GPIOx->MODER;
 8001158:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800115a:	401f      	ands	r7, r3
 800115c:	46bc      	mov	ip, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800115e:	2703      	movs	r7, #3
 8001160:	400f      	ands	r7, r1
 8001162:	40b7      	lsls	r7, r6
 8001164:	4664      	mov	r4, ip
 8001166:	4327      	orrs	r7, r4
      GPIOx->MODER = temp;
 8001168:	6007      	str	r7, [r0, #0]
        temp = GPIOx->OSPEEDR;
 800116a:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800116c:	464c      	mov	r4, r9
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800116e:	401f      	ands	r7, r3
 8001170:	46bc      	mov	ip, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001172:	68e7      	ldr	r7, [r4, #12]
 8001174:	4664      	mov	r4, ip
 8001176:	40b7      	lsls	r7, r6
 8001178:	4327      	orrs	r7, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800117a:	2401      	movs	r4, #1
        GPIOx->OSPEEDR = temp;
 800117c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800117e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001180:	43af      	bics	r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001182:	090d      	lsrs	r5, r1, #4
 8001184:	4025      	ands	r5, r4
 8001186:	4095      	lsls	r5, r2
 8001188:	433d      	orrs	r5, r7
        GPIOx->OTYPER = temp;
 800118a:	6045      	str	r5, [r0, #4]
 800118c:	e775      	b.n	800107a <HAL_GPIO_Init+0x6e>
          temp |= iocurrent;
 800118e:	9c00      	ldr	r4, [sp, #0]
 8001190:	4323      	orrs	r3, r4
        EXTI->IMR = temp;
 8001192:	4644      	mov	r4, r8
 8001194:	6023      	str	r3, [r4, #0]
        temp = EXTI->EMR;
 8001196:	6863      	ldr	r3, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001198:	038c      	lsls	r4, r1, #14
 800119a:	d5af      	bpl.n	80010fc <HAL_GPIO_Init+0xf0>
          temp |= iocurrent;
 800119c:	9c00      	ldr	r4, [sp, #0]
 800119e:	4323      	orrs	r3, r4
        EXTI->EMR = temp;
 80011a0:	4644      	mov	r4, r8
 80011a2:	6063      	str	r3, [r4, #4]
        temp = EXTI->RTSR;
 80011a4:	68a3      	ldr	r3, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011a6:	02cc      	lsls	r4, r1, #11
 80011a8:	d5ae      	bpl.n	8001108 <HAL_GPIO_Init+0xfc>
          temp |= iocurrent;
 80011aa:	9c00      	ldr	r4, [sp, #0]
 80011ac:	4323      	orrs	r3, r4
        EXTI->RTSR = temp;
 80011ae:	4644      	mov	r4, r8
 80011b0:	60a3      	str	r3, [r4, #8]
        temp = EXTI->FTSR;
 80011b2:	68e3      	ldr	r3, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011b4:	0289      	lsls	r1, r1, #10
 80011b6:	d5ad      	bpl.n	8001114 <HAL_GPIO_Init+0x108>
          temp |= iocurrent;
 80011b8:	9900      	ldr	r1, [sp, #0]
 80011ba:	430b      	orrs	r3, r1
 80011bc:	e7ab      	b.n	8001116 <HAL_GPIO_Init+0x10a>
 80011be:	2702      	movs	r7, #2
 80011c0:	40b7      	lsls	r7, r6
 80011c2:	433d      	orrs	r5, r7
 80011c4:	e78d      	b.n	80010e2 <HAL_GPIO_Init+0xd6>
 80011c6:	2401      	movs	r4, #1
 80011c8:	40b4      	lsls	r4, r6
 80011ca:	4325      	orrs	r5, r4
 80011cc:	e789      	b.n	80010e2 <HAL_GPIO_Init+0xd6>
 80011ce:	2403      	movs	r4, #3
 80011d0:	40b4      	lsls	r4, r6
 80011d2:	4325      	orrs	r5, r4
 80011d4:	e785      	b.n	80010e2 <HAL_GPIO_Init+0xd6>
 80011d6:	46c0      	nop			; (mov r8, r8)
 80011d8:	40021000 	.word	0x40021000
 80011dc:	40010400 	.word	0x40010400
 80011e0:	40010000 	.word	0x40010000
 80011e4:	48000400 	.word	0x48000400
 80011e8:	48000800 	.word	0x48000800
 80011ec:	48000c00 	.word	0x48000c00

080011f0 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80011f0:	b570      	push	{r4, r5, r6, lr}
 80011f2:	0004      	movs	r4, r0
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
  {
    return HAL_ERROR;
 80011f4:	2001      	movs	r0, #1
  if (hiwdg == NULL)
 80011f6:	2c00      	cmp	r4, #0
 80011f8:	d01b      	beq.n	8001232 <HAL_IWDG_Init+0x42>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80011fa:	6823      	ldr	r3, [r4, #0]
 80011fc:	4a10      	ldr	r2, [pc, #64]	; (8001240 <HAL_IWDG_Init+0x50>)
 80011fe:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001200:	4a10      	ldr	r2, [pc, #64]	; (8001244 <HAL_IWDG_Init+0x54>)
 8001202:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001204:	6862      	ldr	r2, [r4, #4]
 8001206:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001208:	68a2      	ldr	r2, [r4, #8]
 800120a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800120c:	f7ff f934 	bl	8000478 <HAL_GetTick>
 8001210:	0005      	movs	r5, r0

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8001212:	e004      	b.n	800121e <HAL_IWDG_Init+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001214:	f7ff f930 	bl	8000478 <HAL_GetTick>
 8001218:	1b40      	subs	r0, r0, r5
 800121a:	2830      	cmp	r0, #48	; 0x30
 800121c:	d80a      	bhi.n	8001234 <HAL_IWDG_Init+0x44>
  while (hiwdg->Instance->SR != 0x00u)
 800121e:	6823      	ldr	r3, [r4, #0]
 8001220:	68da      	ldr	r2, [r3, #12]
 8001222:	2a00      	cmp	r2, #0
 8001224:	d1f6      	bne.n	8001214 <HAL_IWDG_Init+0x24>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8001226:	6919      	ldr	r1, [r3, #16]
 8001228:	68e2      	ldr	r2, [r4, #12]
 800122a:	4291      	cmp	r1, r2
 800122c:	d004      	beq.n	8001238 <HAL_IWDG_Init+0x48>
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
  }

  /* Return function status */
  return HAL_OK;
 800122e:	2000      	movs	r0, #0
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8001230:	611a      	str	r2, [r3, #16]
}
 8001232:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 8001234:	2003      	movs	r0, #3
 8001236:	e7fc      	b.n	8001232 <HAL_IWDG_Init+0x42>
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001238:	4a03      	ldr	r2, [pc, #12]	; (8001248 <HAL_IWDG_Init+0x58>)
  return HAL_OK;
 800123a:	2000      	movs	r0, #0
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	e7f8      	b.n	8001232 <HAL_IWDG_Init+0x42>
 8001240:	0000cccc 	.word	0x0000cccc
 8001244:	00005555 	.word	0x00005555
 8001248:	0000aaaa 	.word	0x0000aaaa

0800124c <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800124c:	6803      	ldr	r3, [r0, #0]
 800124e:	4a02      	ldr	r2, [pc, #8]	; (8001258 <HAL_IWDG_Refresh+0xc>)

  /* Return function status */
  return HAL_OK;
}
 8001250:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001252:	601a      	str	r2, [r3, #0]
}
 8001254:	4770      	bx	lr
 8001256:	46c0      	nop			; (mov r8, r8)
 8001258:	0000aaaa 	.word	0x0000aaaa

0800125c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800125c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800125e:	46ce      	mov	lr, r9
 8001260:	4647      	mov	r7, r8
 8001262:	b580      	push	{r7, lr}
 8001264:	0004      	movs	r4, r0
 8001266:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001268:	2800      	cmp	r0, #0
 800126a:	d100      	bne.n	800126e <HAL_RCC_OscConfig+0x12>
 800126c:	e0b5      	b.n	80013da <HAL_RCC_OscConfig+0x17e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800126e:	6803      	ldr	r3, [r0, #0]
 8001270:	07da      	lsls	r2, r3, #31
 8001272:	d535      	bpl.n	80012e0 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001274:	210c      	movs	r1, #12
 8001276:	48c1      	ldr	r0, [pc, #772]	; (800157c <HAL_RCC_OscConfig+0x320>)
 8001278:	6842      	ldr	r2, [r0, #4]
 800127a:	400a      	ands	r2, r1
 800127c:	2a04      	cmp	r2, #4
 800127e:	d100      	bne.n	8001282 <HAL_RCC_OscConfig+0x26>
 8001280:	e11b      	b.n	80014ba <HAL_RCC_OscConfig+0x25e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001282:	6842      	ldr	r2, [r0, #4]
 8001284:	4011      	ands	r1, r2
 8001286:	2908      	cmp	r1, #8
 8001288:	d100      	bne.n	800128c <HAL_RCC_OscConfig+0x30>
 800128a:	e112      	b.n	80014b2 <HAL_RCC_OscConfig+0x256>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800128c:	6863      	ldr	r3, [r4, #4]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d00f      	beq.n	80012b2 <HAL_RCC_OscConfig+0x56>
 8001292:	2b00      	cmp	r3, #0
 8001294:	d100      	bne.n	8001298 <HAL_RCC_OscConfig+0x3c>
 8001296:	e135      	b.n	8001504 <HAL_RCC_OscConfig+0x2a8>
 8001298:	2b05      	cmp	r3, #5
 800129a:	d100      	bne.n	800129e <HAL_RCC_OscConfig+0x42>
 800129c:	e19d      	b.n	80015da <HAL_RCC_OscConfig+0x37e>
 800129e:	4bb7      	ldr	r3, [pc, #732]	; (800157c <HAL_RCC_OscConfig+0x320>)
 80012a0:	49b7      	ldr	r1, [pc, #732]	; (8001580 <HAL_RCC_OscConfig+0x324>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	400a      	ands	r2, r1
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	49b6      	ldr	r1, [pc, #728]	; (8001584 <HAL_RCC_OscConfig+0x328>)
 80012ac:	400a      	ands	r2, r1
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	e005      	b.n	80012be <HAL_RCC_OscConfig+0x62>
 80012b2:	2380      	movs	r3, #128	; 0x80
 80012b4:	4ab1      	ldr	r2, [pc, #708]	; (800157c <HAL_RCC_OscConfig+0x320>)
 80012b6:	025b      	lsls	r3, r3, #9
 80012b8:	6811      	ldr	r1, [r2, #0]
 80012ba:	430b      	orrs	r3, r1
 80012bc:	6013      	str	r3, [r2, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012be:	f7ff f8db 	bl	8000478 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c2:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 80012c4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c6:	4ead      	ldr	r6, [pc, #692]	; (800157c <HAL_RCC_OscConfig+0x320>)
 80012c8:	02ad      	lsls	r5, r5, #10
 80012ca:	e005      	b.n	80012d8 <HAL_RCC_OscConfig+0x7c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012cc:	f7ff f8d4 	bl	8000478 <HAL_GetTick>
 80012d0:	1bc0      	subs	r0, r0, r7
 80012d2:	2864      	cmp	r0, #100	; 0x64
 80012d4:	d900      	bls.n	80012d8 <HAL_RCC_OscConfig+0x7c>
 80012d6:	e113      	b.n	8001500 <HAL_RCC_OscConfig+0x2a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012d8:	6833      	ldr	r3, [r6, #0]
 80012da:	422b      	tst	r3, r5
 80012dc:	d0f6      	beq.n	80012cc <HAL_RCC_OscConfig+0x70>
 80012de:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012e0:	079a      	lsls	r2, r3, #30
 80012e2:	d445      	bmi.n	8001370 <HAL_RCC_OscConfig+0x114>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012e4:	071a      	lsls	r2, r3, #28
 80012e6:	d517      	bpl.n	8001318 <HAL_RCC_OscConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012e8:	69e3      	ldr	r3, [r4, #28]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012ea:	4da4      	ldr	r5, [pc, #656]	; (800157c <HAL_RCC_OscConfig+0x320>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d100      	bne.n	80012f2 <HAL_RCC_OscConfig+0x96>
 80012f0:	e0cc      	b.n	800148c <HAL_RCC_OscConfig+0x230>
      __HAL_RCC_LSI_ENABLE();
 80012f2:	2201      	movs	r2, #1
 80012f4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012f6:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 80012f8:	4313      	orrs	r3, r2
 80012fa:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80012fc:	f7ff f8bc 	bl	8000478 <HAL_GetTick>
 8001300:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001302:	e005      	b.n	8001310 <HAL_RCC_OscConfig+0xb4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001304:	f7ff f8b8 	bl	8000478 <HAL_GetTick>
 8001308:	1bc0      	subs	r0, r0, r7
 800130a:	2802      	cmp	r0, #2
 800130c:	d900      	bls.n	8001310 <HAL_RCC_OscConfig+0xb4>
 800130e:	e0f7      	b.n	8001500 <HAL_RCC_OscConfig+0x2a4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001310:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001312:	421e      	tst	r6, r3
 8001314:	d0f6      	beq.n	8001304 <HAL_RCC_OscConfig+0xa8>
 8001316:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001318:	075a      	lsls	r2, r3, #29
 800131a:	d400      	bmi.n	800131e <HAL_RCC_OscConfig+0xc2>
 800131c:	e080      	b.n	8001420 <HAL_RCC_OscConfig+0x1c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800131e:	2280      	movs	r2, #128	; 0x80
 8001320:	4b96      	ldr	r3, [pc, #600]	; (800157c <HAL_RCC_OscConfig+0x320>)
 8001322:	0552      	lsls	r2, r2, #21
 8001324:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001326:	2500      	movs	r5, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001328:	4211      	tst	r1, r2
 800132a:	d107      	bne.n	800133c <HAL_RCC_OscConfig+0xe0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800132c:	69d9      	ldr	r1, [r3, #28]
      pwrclkchanged = SET;
 800132e:	3501      	adds	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001330:	4311      	orrs	r1, r2
 8001332:	61d9      	str	r1, [r3, #28]
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	401a      	ands	r2, r3
 8001338:	9201      	str	r2, [sp, #4]
 800133a:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800133c:	2680      	movs	r6, #128	; 0x80
 800133e:	4f92      	ldr	r7, [pc, #584]	; (8001588 <HAL_RCC_OscConfig+0x32c>)
 8001340:	0076      	lsls	r6, r6, #1
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	4233      	tst	r3, r6
 8001346:	d100      	bne.n	800134a <HAL_RCC_OscConfig+0xee>
 8001348:	e0ca      	b.n	80014e0 <HAL_RCC_OscConfig+0x284>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800134a:	68a3      	ldr	r3, [r4, #8]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d04a      	beq.n	80013e6 <HAL_RCC_OscConfig+0x18a>
 8001350:	2b00      	cmp	r3, #0
 8001352:	d100      	bne.n	8001356 <HAL_RCC_OscConfig+0xfa>
 8001354:	e0ef      	b.n	8001536 <HAL_RCC_OscConfig+0x2da>
 8001356:	2b05      	cmp	r3, #5
 8001358:	d100      	bne.n	800135c <HAL_RCC_OscConfig+0x100>
 800135a:	e14a      	b.n	80015f2 <HAL_RCC_OscConfig+0x396>
 800135c:	2101      	movs	r1, #1
 800135e:	4b87      	ldr	r3, [pc, #540]	; (800157c <HAL_RCC_OscConfig+0x320>)
 8001360:	6a1a      	ldr	r2, [r3, #32]
 8001362:	438a      	bics	r2, r1
 8001364:	621a      	str	r2, [r3, #32]
 8001366:	6a1a      	ldr	r2, [r3, #32]
 8001368:	3103      	adds	r1, #3
 800136a:	438a      	bics	r2, r1
 800136c:	621a      	str	r2, [r3, #32]
 800136e:	e03e      	b.n	80013ee <HAL_RCC_OscConfig+0x192>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001370:	220c      	movs	r2, #12
 8001372:	4982      	ldr	r1, [pc, #520]	; (800157c <HAL_RCC_OscConfig+0x320>)
 8001374:	6848      	ldr	r0, [r1, #4]
 8001376:	4202      	tst	r2, r0
 8001378:	d026      	beq.n	80013c8 <HAL_RCC_OscConfig+0x16c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800137a:	6848      	ldr	r0, [r1, #4]
 800137c:	4002      	ands	r2, r0
 800137e:	2a08      	cmp	r2, #8
 8001380:	d01f      	beq.n	80013c2 <HAL_RCC_OscConfig+0x166>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001382:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8001384:	4d7d      	ldr	r5, [pc, #500]	; (800157c <HAL_RCC_OscConfig+0x320>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001386:	2b00      	cmp	r3, #0
 8001388:	d100      	bne.n	800138c <HAL_RCC_OscConfig+0x130>
 800138a:	e0ee      	b.n	800156a <HAL_RCC_OscConfig+0x30e>
        __HAL_RCC_HSI_ENABLE();
 800138c:	2201      	movs	r2, #1
 800138e:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001390:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8001392:	4313      	orrs	r3, r2
 8001394:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001396:	f7ff f86f 	bl	8000478 <HAL_GetTick>
 800139a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800139c:	e005      	b.n	80013aa <HAL_RCC_OscConfig+0x14e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800139e:	f7ff f86b 	bl	8000478 <HAL_GetTick>
 80013a2:	1bc0      	subs	r0, r0, r7
 80013a4:	2802      	cmp	r0, #2
 80013a6:	d900      	bls.n	80013aa <HAL_RCC_OscConfig+0x14e>
 80013a8:	e0aa      	b.n	8001500 <HAL_RCC_OscConfig+0x2a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013aa:	682b      	ldr	r3, [r5, #0]
 80013ac:	421e      	tst	r6, r3
 80013ae:	d0f6      	beq.n	800139e <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b0:	21f8      	movs	r1, #248	; 0xf8
 80013b2:	682a      	ldr	r2, [r5, #0]
 80013b4:	6923      	ldr	r3, [r4, #16]
 80013b6:	438a      	bics	r2, r1
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	4313      	orrs	r3, r2
 80013bc:	602b      	str	r3, [r5, #0]
 80013be:	6823      	ldr	r3, [r4, #0]
 80013c0:	e790      	b.n	80012e4 <HAL_RCC_OscConfig+0x88>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80013c2:	684a      	ldr	r2, [r1, #4]
 80013c4:	03d2      	lsls	r2, r2, #15
 80013c6:	d4dc      	bmi.n	8001382 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013c8:	4a6c      	ldr	r2, [pc, #432]	; (800157c <HAL_RCC_OscConfig+0x320>)
 80013ca:	6812      	ldr	r2, [r2, #0]
 80013cc:	0792      	lsls	r2, r2, #30
 80013ce:	d400      	bmi.n	80013d2 <HAL_RCC_OscConfig+0x176>
 80013d0:	e07d      	b.n	80014ce <HAL_RCC_OscConfig+0x272>
 80013d2:	68e2      	ldr	r2, [r4, #12]
 80013d4:	2a01      	cmp	r2, #1
 80013d6:	d100      	bne.n	80013da <HAL_RCC_OscConfig+0x17e>
 80013d8:	e079      	b.n	80014ce <HAL_RCC_OscConfig+0x272>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80013da:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 80013dc:	b003      	add	sp, #12
 80013de:	bc0c      	pop	{r2, r3}
 80013e0:	4690      	mov	r8, r2
 80013e2:	4699      	mov	r9, r3
 80013e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013e6:	4965      	ldr	r1, [pc, #404]	; (800157c <HAL_RCC_OscConfig+0x320>)
 80013e8:	6a0a      	ldr	r2, [r1, #32]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 80013ee:	f7ff f843 	bl	8000478 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013f2:	4b66      	ldr	r3, [pc, #408]	; (800158c <HAL_RCC_OscConfig+0x330>)
      tickstart = HAL_GetTick();
 80013f4:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013f6:	4f61      	ldr	r7, [pc, #388]	; (800157c <HAL_RCC_OscConfig+0x320>)
 80013f8:	2602      	movs	r6, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013fa:	4698      	mov	r8, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013fc:	e005      	b.n	800140a <HAL_RCC_OscConfig+0x1ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013fe:	f7ff f83b 	bl	8000478 <HAL_GetTick>
 8001402:	464b      	mov	r3, r9
 8001404:	1ac0      	subs	r0, r0, r3
 8001406:	4540      	cmp	r0, r8
 8001408:	d87a      	bhi.n	8001500 <HAL_RCC_OscConfig+0x2a4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800140a:	6a3b      	ldr	r3, [r7, #32]
 800140c:	421e      	tst	r6, r3
 800140e:	d0f6      	beq.n	80013fe <HAL_RCC_OscConfig+0x1a2>
    if(pwrclkchanged == SET)
 8001410:	2d01      	cmp	r5, #1
 8001412:	d104      	bne.n	800141e <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001414:	4a59      	ldr	r2, [pc, #356]	; (800157c <HAL_RCC_OscConfig+0x320>)
 8001416:	495e      	ldr	r1, [pc, #376]	; (8001590 <HAL_RCC_OscConfig+0x334>)
 8001418:	69d3      	ldr	r3, [r2, #28]
 800141a:	400b      	ands	r3, r1
 800141c:	61d3      	str	r3, [r2, #28]
 800141e:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001420:	06db      	lsls	r3, r3, #27
 8001422:	d512      	bpl.n	800144a <HAL_RCC_OscConfig+0x1ee>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001424:	6963      	ldr	r3, [r4, #20]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d100      	bne.n	800142c <HAL_RCC_OscConfig+0x1d0>
 800142a:	e140      	b.n	80016ae <HAL_RCC_OscConfig+0x452>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800142c:	3305      	adds	r3, #5
 800142e:	d000      	beq.n	8001432 <HAL_RCC_OscConfig+0x1d6>
 8001430:	e0bc      	b.n	80015ac <HAL_RCC_OscConfig+0x350>
      __HAL_RCC_HSI14ADC_ENABLE();
 8001432:	2104      	movs	r1, #4
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001434:	20f8      	movs	r0, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 8001436:	4a51      	ldr	r2, [pc, #324]	; (800157c <HAL_RCC_OscConfig+0x320>)
 8001438:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800143a:	438b      	bics	r3, r1
 800143c:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800143e:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8001440:	69a3      	ldr	r3, [r4, #24]
 8001442:	4381      	bics	r1, r0
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	430b      	orrs	r3, r1
 8001448:	6353      	str	r3, [r2, #52]	; 0x34
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800144a:	6a23      	ldr	r3, [r4, #32]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d01b      	beq.n	8001488 <HAL_RCC_OscConfig+0x22c>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001450:	220c      	movs	r2, #12
 8001452:	4d4a      	ldr	r5, [pc, #296]	; (800157c <HAL_RCC_OscConfig+0x320>)
 8001454:	6869      	ldr	r1, [r5, #4]
 8001456:	400a      	ands	r2, r1
 8001458:	2a08      	cmp	r2, #8
 800145a:	d100      	bne.n	800145e <HAL_RCC_OscConfig+0x202>
 800145c:	e0d3      	b.n	8001606 <HAL_RCC_OscConfig+0x3aa>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800145e:	2b02      	cmp	r3, #2
 8001460:	d100      	bne.n	8001464 <HAL_RCC_OscConfig+0x208>
 8001462:	e0ec      	b.n	800163e <HAL_RCC_OscConfig+0x3e2>
        __HAL_RCC_PLL_DISABLE();
 8001464:	682b      	ldr	r3, [r5, #0]
 8001466:	4a4b      	ldr	r2, [pc, #300]	; (8001594 <HAL_RCC_OscConfig+0x338>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001468:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800146a:	4013      	ands	r3, r2
 800146c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800146e:	f7ff f803 	bl	8000478 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001472:	04a4      	lsls	r4, r4, #18
        tickstart = HAL_GetTick();
 8001474:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001476:	e004      	b.n	8001482 <HAL_RCC_OscConfig+0x226>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001478:	f7fe fffe 	bl	8000478 <HAL_GetTick>
 800147c:	1b80      	subs	r0, r0, r6
 800147e:	2802      	cmp	r0, #2
 8001480:	d83e      	bhi.n	8001500 <HAL_RCC_OscConfig+0x2a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001482:	682b      	ldr	r3, [r5, #0]
 8001484:	4223      	tst	r3, r4
 8001486:	d1f7      	bne.n	8001478 <HAL_RCC_OscConfig+0x21c>
  return HAL_OK;
 8001488:	2000      	movs	r0, #0
 800148a:	e7a7      	b.n	80013dc <HAL_RCC_OscConfig+0x180>
      __HAL_RCC_LSI_DISABLE();
 800148c:	2201      	movs	r2, #1
 800148e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001490:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8001492:	4393      	bics	r3, r2
 8001494:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8001496:	f7fe ffef 	bl	8000478 <HAL_GetTick>
 800149a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800149c:	e004      	b.n	80014a8 <HAL_RCC_OscConfig+0x24c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800149e:	f7fe ffeb 	bl	8000478 <HAL_GetTick>
 80014a2:	1bc0      	subs	r0, r0, r7
 80014a4:	2802      	cmp	r0, #2
 80014a6:	d82b      	bhi.n	8001500 <HAL_RCC_OscConfig+0x2a4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014a8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80014aa:	421e      	tst	r6, r3
 80014ac:	d1f7      	bne.n	800149e <HAL_RCC_OscConfig+0x242>
 80014ae:	6823      	ldr	r3, [r4, #0]
 80014b0:	e732      	b.n	8001318 <HAL_RCC_OscConfig+0xbc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014b2:	6842      	ldr	r2, [r0, #4]
 80014b4:	03d2      	lsls	r2, r2, #15
 80014b6:	d400      	bmi.n	80014ba <HAL_RCC_OscConfig+0x25e>
 80014b8:	e6e8      	b.n	800128c <HAL_RCC_OscConfig+0x30>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ba:	4a30      	ldr	r2, [pc, #192]	; (800157c <HAL_RCC_OscConfig+0x320>)
 80014bc:	6812      	ldr	r2, [r2, #0]
 80014be:	0392      	lsls	r2, r2, #14
 80014c0:	d400      	bmi.n	80014c4 <HAL_RCC_OscConfig+0x268>
 80014c2:	e70d      	b.n	80012e0 <HAL_RCC_OscConfig+0x84>
 80014c4:	6862      	ldr	r2, [r4, #4]
 80014c6:	2a00      	cmp	r2, #0
 80014c8:	d000      	beq.n	80014cc <HAL_RCC_OscConfig+0x270>
 80014ca:	e709      	b.n	80012e0 <HAL_RCC_OscConfig+0x84>
 80014cc:	e785      	b.n	80013da <HAL_RCC_OscConfig+0x17e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ce:	25f8      	movs	r5, #248	; 0xf8
 80014d0:	482a      	ldr	r0, [pc, #168]	; (800157c <HAL_RCC_OscConfig+0x320>)
 80014d2:	6922      	ldr	r2, [r4, #16]
 80014d4:	6801      	ldr	r1, [r0, #0]
 80014d6:	00d2      	lsls	r2, r2, #3
 80014d8:	43a9      	bics	r1, r5
 80014da:	430a      	orrs	r2, r1
 80014dc:	6002      	str	r2, [r0, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014de:	e701      	b.n	80012e4 <HAL_RCC_OscConfig+0x88>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	4333      	orrs	r3, r6
 80014e4:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80014e6:	f7fe ffc7 	bl	8000478 <HAL_GetTick>
 80014ea:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	4233      	tst	r3, r6
 80014f0:	d000      	beq.n	80014f4 <HAL_RCC_OscConfig+0x298>
 80014f2:	e72a      	b.n	800134a <HAL_RCC_OscConfig+0xee>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014f4:	f7fe ffc0 	bl	8000478 <HAL_GetTick>
 80014f8:	4643      	mov	r3, r8
 80014fa:	1ac0      	subs	r0, r0, r3
 80014fc:	2864      	cmp	r0, #100	; 0x64
 80014fe:	d9f5      	bls.n	80014ec <HAL_RCC_OscConfig+0x290>
            return HAL_TIMEOUT;
 8001500:	2003      	movs	r0, #3
 8001502:	e76b      	b.n	80013dc <HAL_RCC_OscConfig+0x180>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001504:	4d1d      	ldr	r5, [pc, #116]	; (800157c <HAL_RCC_OscConfig+0x320>)
 8001506:	4a1e      	ldr	r2, [pc, #120]	; (8001580 <HAL_RCC_OscConfig+0x324>)
 8001508:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800150a:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800150c:	4013      	ands	r3, r2
 800150e:	602b      	str	r3, [r5, #0]
 8001510:	682b      	ldr	r3, [r5, #0]
 8001512:	4a1c      	ldr	r2, [pc, #112]	; (8001584 <HAL_RCC_OscConfig+0x328>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001514:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001516:	4013      	ands	r3, r2
 8001518:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800151a:	f7fe ffad 	bl	8000478 <HAL_GetTick>
 800151e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001520:	e004      	b.n	800152c <HAL_RCC_OscConfig+0x2d0>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001522:	f7fe ffa9 	bl	8000478 <HAL_GetTick>
 8001526:	1bc0      	subs	r0, r0, r7
 8001528:	2864      	cmp	r0, #100	; 0x64
 800152a:	d8e9      	bhi.n	8001500 <HAL_RCC_OscConfig+0x2a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800152c:	682b      	ldr	r3, [r5, #0]
 800152e:	4233      	tst	r3, r6
 8001530:	d1f7      	bne.n	8001522 <HAL_RCC_OscConfig+0x2c6>
 8001532:	6823      	ldr	r3, [r4, #0]
 8001534:	e6d4      	b.n	80012e0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001536:	2201      	movs	r2, #1
 8001538:	4e10      	ldr	r6, [pc, #64]	; (800157c <HAL_RCC_OscConfig+0x320>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800153a:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800153c:	6a33      	ldr	r3, [r6, #32]
 800153e:	4393      	bics	r3, r2
 8001540:	6233      	str	r3, [r6, #32]
 8001542:	6a33      	ldr	r3, [r6, #32]
 8001544:	3203      	adds	r2, #3
 8001546:	4393      	bics	r3, r2
 8001548:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 800154a:	f7fe ff95 	bl	8000478 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800154e:	4b0f      	ldr	r3, [pc, #60]	; (800158c <HAL_RCC_OscConfig+0x330>)
      tickstart = HAL_GetTick();
 8001550:	4681      	mov	r9, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001552:	4698      	mov	r8, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001554:	e005      	b.n	8001562 <HAL_RCC_OscConfig+0x306>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001556:	f7fe ff8f 	bl	8000478 <HAL_GetTick>
 800155a:	464b      	mov	r3, r9
 800155c:	1ac0      	subs	r0, r0, r3
 800155e:	4540      	cmp	r0, r8
 8001560:	d8ce      	bhi.n	8001500 <HAL_RCC_OscConfig+0x2a4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001562:	6a33      	ldr	r3, [r6, #32]
 8001564:	421f      	tst	r7, r3
 8001566:	d1f6      	bne.n	8001556 <HAL_RCC_OscConfig+0x2fa>
 8001568:	e752      	b.n	8001410 <HAL_RCC_OscConfig+0x1b4>
        __HAL_RCC_HSI_DISABLE();
 800156a:	2201      	movs	r2, #1
 800156c:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800156e:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8001570:	4393      	bics	r3, r2
 8001572:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001574:	f7fe ff80 	bl	8000478 <HAL_GetTick>
 8001578:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800157a:	e012      	b.n	80015a2 <HAL_RCC_OscConfig+0x346>
 800157c:	40021000 	.word	0x40021000
 8001580:	fffeffff 	.word	0xfffeffff
 8001584:	fffbffff 	.word	0xfffbffff
 8001588:	40007000 	.word	0x40007000
 800158c:	00001388 	.word	0x00001388
 8001590:	efffffff 	.word	0xefffffff
 8001594:	feffffff 	.word	0xfeffffff
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001598:	f7fe ff6e 	bl	8000478 <HAL_GetTick>
 800159c:	1bc0      	subs	r0, r0, r7
 800159e:	2802      	cmp	r0, #2
 80015a0:	d8ae      	bhi.n	8001500 <HAL_RCC_OscConfig+0x2a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015a2:	682b      	ldr	r3, [r5, #0]
 80015a4:	421e      	tst	r6, r3
 80015a6:	d1f7      	bne.n	8001598 <HAL_RCC_OscConfig+0x33c>
 80015a8:	6823      	ldr	r3, [r4, #0]
 80015aa:	e69b      	b.n	80012e4 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSI14ADC_DISABLE();
 80015ac:	2204      	movs	r2, #4
 80015ae:	4d4f      	ldr	r5, [pc, #316]	; (80016ec <HAL_RCC_OscConfig+0x490>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80015b0:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80015b2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80015b4:	4313      	orrs	r3, r2
 80015b6:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80015b8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80015ba:	3a03      	subs	r2, #3
 80015bc:	4393      	bics	r3, r2
 80015be:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80015c0:	f7fe ff5a 	bl	8000478 <HAL_GetTick>
 80015c4:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80015c6:	e004      	b.n	80015d2 <HAL_RCC_OscConfig+0x376>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80015c8:	f7fe ff56 	bl	8000478 <HAL_GetTick>
 80015cc:	1bc0      	subs	r0, r0, r7
 80015ce:	2802      	cmp	r0, #2
 80015d0:	d896      	bhi.n	8001500 <HAL_RCC_OscConfig+0x2a4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80015d2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80015d4:	421e      	tst	r6, r3
 80015d6:	d1f7      	bne.n	80015c8 <HAL_RCC_OscConfig+0x36c>
 80015d8:	e737      	b.n	800144a <HAL_RCC_OscConfig+0x1ee>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015da:	2280      	movs	r2, #128	; 0x80
 80015dc:	4b43      	ldr	r3, [pc, #268]	; (80016ec <HAL_RCC_OscConfig+0x490>)
 80015de:	02d2      	lsls	r2, r2, #11
 80015e0:	6819      	ldr	r1, [r3, #0]
 80015e2:	430a      	orrs	r2, r1
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	2280      	movs	r2, #128	; 0x80
 80015e8:	6819      	ldr	r1, [r3, #0]
 80015ea:	0252      	lsls	r2, r2, #9
 80015ec:	430a      	orrs	r2, r1
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	e665      	b.n	80012be <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015f2:	2104      	movs	r1, #4
 80015f4:	4b3d      	ldr	r3, [pc, #244]	; (80016ec <HAL_RCC_OscConfig+0x490>)
 80015f6:	6a1a      	ldr	r2, [r3, #32]
 80015f8:	430a      	orrs	r2, r1
 80015fa:	621a      	str	r2, [r3, #32]
 80015fc:	6a1a      	ldr	r2, [r3, #32]
 80015fe:	3903      	subs	r1, #3
 8001600:	430a      	orrs	r2, r1
 8001602:	621a      	str	r2, [r3, #32]
 8001604:	e6f3      	b.n	80013ee <HAL_RCC_OscConfig+0x192>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001606:	2b01      	cmp	r3, #1
 8001608:	d100      	bne.n	800160c <HAL_RCC_OscConfig+0x3b0>
 800160a:	e6e6      	b.n	80013da <HAL_RCC_OscConfig+0x17e>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800160c:	2380      	movs	r3, #128	; 0x80
        pll_config  = RCC->CFGR;
 800160e:	686a      	ldr	r2, [r5, #4]
        pll_config2 = RCC->CFGR2;
 8001610:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001612:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001614:	025b      	lsls	r3, r3, #9
 8001616:	4013      	ands	r3, r2
        return HAL_ERROR;
 8001618:	2001      	movs	r0, #1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800161a:	42ab      	cmp	r3, r5
 800161c:	d000      	beq.n	8001620 <HAL_RCC_OscConfig+0x3c4>
 800161e:	e6dd      	b.n	80013dc <HAL_RCC_OscConfig+0x180>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001620:	230f      	movs	r3, #15
 8001622:	400b      	ands	r3, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001624:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001626:	428b      	cmp	r3, r1
 8001628:	d000      	beq.n	800162c <HAL_RCC_OscConfig+0x3d0>
 800162a:	e6d7      	b.n	80013dc <HAL_RCC_OscConfig+0x180>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800162c:	20f0      	movs	r0, #240	; 0xf0
 800162e:	0380      	lsls	r0, r0, #14
 8001630:	4002      	ands	r2, r0
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001632:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001634:	1a10      	subs	r0, r2, r0
 8001636:	1e42      	subs	r2, r0, #1
 8001638:	4190      	sbcs	r0, r2
    return HAL_ERROR;
 800163a:	b2c0      	uxtb	r0, r0
 800163c:	e6ce      	b.n	80013dc <HAL_RCC_OscConfig+0x180>
        __HAL_RCC_PLL_DISABLE();
 800163e:	682b      	ldr	r3, [r5, #0]
 8001640:	4a2b      	ldr	r2, [pc, #172]	; (80016f0 <HAL_RCC_OscConfig+0x494>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001642:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001644:	4013      	ands	r3, r2
 8001646:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001648:	f7fe ff16 	bl	8000478 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800164c:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 800164e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001650:	e005      	b.n	800165e <HAL_RCC_OscConfig+0x402>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001652:	f7fe ff11 	bl	8000478 <HAL_GetTick>
 8001656:	1bc0      	subs	r0, r0, r7
 8001658:	2802      	cmp	r0, #2
 800165a:	d900      	bls.n	800165e <HAL_RCC_OscConfig+0x402>
 800165c:	e750      	b.n	8001500 <HAL_RCC_OscConfig+0x2a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800165e:	682b      	ldr	r3, [r5, #0]
 8001660:	4233      	tst	r3, r6
 8001662:	d1f6      	bne.n	8001652 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001664:	220f      	movs	r2, #15
 8001666:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001668:	4393      	bics	r3, r2
 800166a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800166c:	4313      	orrs	r3, r2
 800166e:	62eb      	str	r3, [r5, #44]	; 0x2c
 8001670:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001672:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001674:	686a      	ldr	r2, [r5, #4]
 8001676:	430b      	orrs	r3, r1
 8001678:	491e      	ldr	r1, [pc, #120]	; (80016f4 <HAL_RCC_OscConfig+0x498>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800167a:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800167c:	400a      	ands	r2, r1
 800167e:	4313      	orrs	r3, r2
 8001680:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001682:	2380      	movs	r3, #128	; 0x80
 8001684:	682a      	ldr	r2, [r5, #0]
 8001686:	045b      	lsls	r3, r3, #17
 8001688:	4313      	orrs	r3, r2
 800168a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800168c:	f7fe fef4 	bl	8000478 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001690:	4d16      	ldr	r5, [pc, #88]	; (80016ec <HAL_RCC_OscConfig+0x490>)
        tickstart = HAL_GetTick();
 8001692:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001694:	04a4      	lsls	r4, r4, #18
 8001696:	e005      	b.n	80016a4 <HAL_RCC_OscConfig+0x448>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001698:	f7fe feee 	bl	8000478 <HAL_GetTick>
 800169c:	1b80      	subs	r0, r0, r6
 800169e:	2802      	cmp	r0, #2
 80016a0:	d900      	bls.n	80016a4 <HAL_RCC_OscConfig+0x448>
 80016a2:	e72d      	b.n	8001500 <HAL_RCC_OscConfig+0x2a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016a4:	682b      	ldr	r3, [r5, #0]
 80016a6:	4223      	tst	r3, r4
 80016a8:	d0f6      	beq.n	8001698 <HAL_RCC_OscConfig+0x43c>
  return HAL_OK;
 80016aa:	2000      	movs	r0, #0
 80016ac:	e696      	b.n	80013dc <HAL_RCC_OscConfig+0x180>
      __HAL_RCC_HSI14ADC_DISABLE();
 80016ae:	2104      	movs	r1, #4
 80016b0:	4d0e      	ldr	r5, [pc, #56]	; (80016ec <HAL_RCC_OscConfig+0x490>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80016b2:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80016b4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80016b6:	430a      	orrs	r2, r1
 80016b8:	636a      	str	r2, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80016ba:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80016bc:	4313      	orrs	r3, r2
 80016be:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80016c0:	f7fe feda 	bl	8000478 <HAL_GetTick>
 80016c4:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80016c6:	e005      	b.n	80016d4 <HAL_RCC_OscConfig+0x478>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80016c8:	f7fe fed6 	bl	8000478 <HAL_GetTick>
 80016cc:	1bc0      	subs	r0, r0, r7
 80016ce:	2802      	cmp	r0, #2
 80016d0:	d900      	bls.n	80016d4 <HAL_RCC_OscConfig+0x478>
 80016d2:	e715      	b.n	8001500 <HAL_RCC_OscConfig+0x2a4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80016d4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80016d6:	421e      	tst	r6, r3
 80016d8:	d0f6      	beq.n	80016c8 <HAL_RCC_OscConfig+0x46c>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80016da:	21f8      	movs	r1, #248	; 0xf8
 80016dc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80016de:	69a3      	ldr	r3, [r4, #24]
 80016e0:	438a      	bics	r2, r1
 80016e2:	00db      	lsls	r3, r3, #3
 80016e4:	4313      	orrs	r3, r2
 80016e6:	636b      	str	r3, [r5, #52]	; 0x34
 80016e8:	e6af      	b.n	800144a <HAL_RCC_OscConfig+0x1ee>
 80016ea:	46c0      	nop			; (mov r8, r8)
 80016ec:	40021000 	.word	0x40021000
 80016f0:	feffffff 	.word	0xfeffffff
 80016f4:	ffc2ffff 	.word	0xffc2ffff

080016f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016fa:	46ce      	mov	lr, r9
 80016fc:	4647      	mov	r7, r8
 80016fe:	b580      	push	{r7, lr}
 8001700:	0004      	movs	r4, r0
 8001702:	b089      	sub	sp, #36	; 0x24
 8001704:	000d      	movs	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001706:	2800      	cmp	r0, #0
 8001708:	d00d      	beq.n	8001726 <HAL_RCC_ClockConfig+0x2e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800170a:	2301      	movs	r3, #1
 800170c:	4950      	ldr	r1, [pc, #320]	; (8001850 <HAL_RCC_ClockConfig+0x158>)
 800170e:	680a      	ldr	r2, [r1, #0]
 8001710:	401a      	ands	r2, r3
 8001712:	42aa      	cmp	r2, r5
 8001714:	d20d      	bcs.n	8001732 <HAL_RCC_ClockConfig+0x3a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001716:	680a      	ldr	r2, [r1, #0]
 8001718:	439a      	bics	r2, r3
 800171a:	432a      	orrs	r2, r5
 800171c:	600a      	str	r2, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800171e:	680a      	ldr	r2, [r1, #0]
 8001720:	4013      	ands	r3, r2
 8001722:	42ab      	cmp	r3, r5
 8001724:	d005      	beq.n	8001732 <HAL_RCC_ClockConfig+0x3a>
    return HAL_ERROR;
 8001726:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8001728:	b009      	add	sp, #36	; 0x24
 800172a:	bc0c      	pop	{r2, r3}
 800172c:	4690      	mov	r8, r2
 800172e:	4699      	mov	r9, r3
 8001730:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001732:	6823      	ldr	r3, [r4, #0]
 8001734:	079a      	lsls	r2, r3, #30
 8001736:	d50e      	bpl.n	8001756 <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001738:	075a      	lsls	r2, r3, #29
 800173a:	d505      	bpl.n	8001748 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800173c:	22e0      	movs	r2, #224	; 0xe0
 800173e:	4945      	ldr	r1, [pc, #276]	; (8001854 <HAL_RCC_ClockConfig+0x15c>)
 8001740:	00d2      	lsls	r2, r2, #3
 8001742:	6848      	ldr	r0, [r1, #4]
 8001744:	4302      	orrs	r2, r0
 8001746:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001748:	20f0      	movs	r0, #240	; 0xf0
 800174a:	4942      	ldr	r1, [pc, #264]	; (8001854 <HAL_RCC_ClockConfig+0x15c>)
 800174c:	684a      	ldr	r2, [r1, #4]
 800174e:	4382      	bics	r2, r0
 8001750:	68a0      	ldr	r0, [r4, #8]
 8001752:	4302      	orrs	r2, r0
 8001754:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001756:	07db      	lsls	r3, r3, #31
 8001758:	d521      	bpl.n	800179e <HAL_RCC_ClockConfig+0xa6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800175a:	4b3e      	ldr	r3, [pc, #248]	; (8001854 <HAL_RCC_ClockConfig+0x15c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800175c:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800175e:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001760:	2a01      	cmp	r2, #1
 8001762:	d067      	beq.n	8001834 <HAL_RCC_ClockConfig+0x13c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001764:	2a02      	cmp	r2, #2
 8001766:	d06f      	beq.n	8001848 <HAL_RCC_ClockConfig+0x150>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001768:	079b      	lsls	r3, r3, #30
 800176a:	d5dc      	bpl.n	8001726 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800176c:	2103      	movs	r1, #3
 800176e:	4e39      	ldr	r6, [pc, #228]	; (8001854 <HAL_RCC_ClockConfig+0x15c>)
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001770:	270c      	movs	r7, #12
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001772:	6873      	ldr	r3, [r6, #4]
 8001774:	438b      	bics	r3, r1
 8001776:	4313      	orrs	r3, r2
 8001778:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800177a:	f7fe fe7d 	bl	8000478 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800177e:	4b36      	ldr	r3, [pc, #216]	; (8001858 <HAL_RCC_ClockConfig+0x160>)
    tickstart = HAL_GetTick();
 8001780:	4681      	mov	r9, r0
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001782:	4698      	mov	r8, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001784:	e005      	b.n	8001792 <HAL_RCC_ClockConfig+0x9a>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001786:	f7fe fe77 	bl	8000478 <HAL_GetTick>
 800178a:	464b      	mov	r3, r9
 800178c:	1ac0      	subs	r0, r0, r3
 800178e:	4540      	cmp	r0, r8
 8001790:	d858      	bhi.n	8001844 <HAL_RCC_ClockConfig+0x14c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001792:	6872      	ldr	r2, [r6, #4]
 8001794:	6863      	ldr	r3, [r4, #4]
 8001796:	403a      	ands	r2, r7
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	429a      	cmp	r2, r3
 800179c:	d1f3      	bne.n	8001786 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800179e:	2101      	movs	r1, #1
 80017a0:	4a2b      	ldr	r2, [pc, #172]	; (8001850 <HAL_RCC_ClockConfig+0x158>)
 80017a2:	6813      	ldr	r3, [r2, #0]
 80017a4:	400b      	ands	r3, r1
 80017a6:	42ab      	cmp	r3, r5
 80017a8:	d905      	bls.n	80017b6 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017aa:	6813      	ldr	r3, [r2, #0]
 80017ac:	438b      	bics	r3, r1
 80017ae:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b0:	6813      	ldr	r3, [r2, #0]
 80017b2:	4219      	tst	r1, r3
 80017b4:	d1b7      	bne.n	8001726 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b6:	6823      	ldr	r3, [r4, #0]
 80017b8:	075b      	lsls	r3, r3, #29
 80017ba:	d506      	bpl.n	80017ca <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80017bc:	4a25      	ldr	r2, [pc, #148]	; (8001854 <HAL_RCC_ClockConfig+0x15c>)
 80017be:	4927      	ldr	r1, [pc, #156]	; (800185c <HAL_RCC_ClockConfig+0x164>)
 80017c0:	6853      	ldr	r3, [r2, #4]
 80017c2:	400b      	ands	r3, r1
 80017c4:	68e1      	ldr	r1, [r4, #12]
 80017c6:	430b      	orrs	r3, r1
 80017c8:	6053      	str	r3, [r2, #4]
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80017ca:	4669      	mov	r1, sp
 80017cc:	4b24      	ldr	r3, [pc, #144]	; (8001860 <HAL_RCC_ClockConfig+0x168>)
 80017ce:	000a      	movs	r2, r1
 80017d0:	0018      	movs	r0, r3
 80017d2:	c870      	ldmia	r0!, {r4, r5, r6}
 80017d4:	c270      	stmia	r2!, {r4, r5, r6}
 80017d6:	6800      	ldr	r0, [r0, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80017d8:	3310      	adds	r3, #16
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80017da:	6010      	str	r0, [r2, #0]
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80017dc:	aa04      	add	r2, sp, #16
 80017de:	0010      	movs	r0, r2
 80017e0:	cb70      	ldmia	r3!, {r4, r5, r6}
 80017e2:	c070      	stmia	r0!, {r4, r5, r6}
 80017e4:	681b      	ldr	r3, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80017e6:	4d1b      	ldr	r5, [pc, #108]	; (8001854 <HAL_RCC_ClockConfig+0x15c>)
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80017e8:	6003      	str	r3, [r0, #0]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017ea:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 80017ec:	6868      	ldr	r0, [r5, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80017ee:	4003      	ands	r3, r0
 80017f0:	2b08      	cmp	r3, #8
 80017f2:	d11d      	bne.n	8001830 <HAL_RCC_ClockConfig+0x138>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80017f4:	3307      	adds	r3, #7
 80017f6:	0c84      	lsrs	r4, r0, #18
 80017f8:	401c      	ands	r4, r3
 80017fa:	5d0c      	ldrb	r4, [r1, r4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80017fc:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80017fe:	400b      	ands	r3, r1
 8001800:	5cd1      	ldrb	r1, [r2, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001802:	03c3      	lsls	r3, r0, #15
 8001804:	d419      	bmi.n	800183a <HAL_RCC_ClockConfig+0x142>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001806:	0163      	lsls	r3, r4, #5
 8001808:	1b1b      	subs	r3, r3, r4
 800180a:	0198      	lsls	r0, r3, #6
 800180c:	1ac0      	subs	r0, r0, r3
 800180e:	00c0      	lsls	r0, r0, #3
 8001810:	1900      	adds	r0, r0, r4
 8001812:	0200      	lsls	r0, r0, #8
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001814:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <HAL_RCC_ClockConfig+0x15c>)
 8001816:	4a13      	ldr	r2, [pc, #76]	; (8001864 <HAL_RCC_ClockConfig+0x16c>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	061b      	lsls	r3, r3, #24
 800181c:	0f1b      	lsrs	r3, r3, #28
 800181e:	5cd3      	ldrb	r3, [r2, r3]
 8001820:	40d8      	lsrs	r0, r3
 8001822:	4b11      	ldr	r3, [pc, #68]	; (8001868 <HAL_RCC_ClockConfig+0x170>)
 8001824:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001826:	2000      	movs	r0, #0
 8001828:	f7fe fde4 	bl	80003f4 <HAL_InitTick>
  return HAL_OK;
 800182c:	2000      	movs	r0, #0
 800182e:	e77b      	b.n	8001728 <HAL_RCC_ClockConfig+0x30>
      sysclockfreq = HSE_VALUE;
 8001830:	480e      	ldr	r0, [pc, #56]	; (800186c <HAL_RCC_ClockConfig+0x174>)
 8001832:	e7ef      	b.n	8001814 <HAL_RCC_ClockConfig+0x11c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001834:	039b      	lsls	r3, r3, #14
 8001836:	d499      	bmi.n	800176c <HAL_RCC_ClockConfig+0x74>
 8001838:	e775      	b.n	8001726 <HAL_RCC_ClockConfig+0x2e>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800183a:	480c      	ldr	r0, [pc, #48]	; (800186c <HAL_RCC_ClockConfig+0x174>)
 800183c:	f7fe fc64 	bl	8000108 <__udivsi3>
 8001840:	4360      	muls	r0, r4
 8001842:	e7e7      	b.n	8001814 <HAL_RCC_ClockConfig+0x11c>
        return HAL_TIMEOUT;
 8001844:	2003      	movs	r0, #3
 8001846:	e76f      	b.n	8001728 <HAL_RCC_ClockConfig+0x30>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001848:	019b      	lsls	r3, r3, #6
 800184a:	d48f      	bmi.n	800176c <HAL_RCC_ClockConfig+0x74>
 800184c:	e76b      	b.n	8001726 <HAL_RCC_ClockConfig+0x2e>
 800184e:	46c0      	nop			; (mov r8, r8)
 8001850:	40022000 	.word	0x40022000
 8001854:	40021000 	.word	0x40021000
 8001858:	00001388 	.word	0x00001388
 800185c:	fffff8ff 	.word	0xfffff8ff
 8001860:	0800626c 	.word	0x0800626c
 8001864:	08006848 	.word	0x08006848
 8001868:	200000d4 	.word	0x200000d4
 800186c:	007a1200 	.word	0x007a1200

08001870 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001870:	b570      	push	{r4, r5, r6, lr}
 8001872:	1e04      	subs	r4, r0, #0
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001874:	d04a      	beq.n	800190c <HAL_TIM_Base_Init+0x9c>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001876:	233d      	movs	r3, #61	; 0x3d
 8001878:	5cc3      	ldrb	r3, [r0, r3]
 800187a:	b2db      	uxtb	r3, r3
 800187c:	2b00      	cmp	r3, #0
 800187e:	d024      	beq.n	80018ca <HAL_TIM_Base_Init+0x5a>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001880:	233d      	movs	r3, #61	; 0x3d
 8001882:	2202      	movs	r2, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001884:	4e2c      	ldr	r6, [pc, #176]	; (8001938 <HAL_TIM_Base_Init+0xc8>)
  htim->State = HAL_TIM_STATE_BUSY;
 8001886:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001888:	6822      	ldr	r2, [r4, #0]
 800188a:	69a5      	ldr	r5, [r4, #24]
  tmpcr1 = TIMx->CR1;
 800188c:	6813      	ldr	r3, [r2, #0]
 800188e:	68e0      	ldr	r0, [r4, #12]
 8001890:	6861      	ldr	r1, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001892:	42b2      	cmp	r2, r6
 8001894:	d03c      	beq.n	8001910 <HAL_TIM_Base_Init+0xa0>
 8001896:	2680      	movs	r6, #128	; 0x80
 8001898:	05f6      	lsls	r6, r6, #23
 800189a:	42b2      	cmp	r2, r6
 800189c:	d01a      	beq.n	80018d4 <HAL_TIM_Base_Init+0x64>
 800189e:	4e27      	ldr	r6, [pc, #156]	; (800193c <HAL_TIM_Base_Init+0xcc>)
 80018a0:	42b2      	cmp	r2, r6
 80018a2:	d017      	beq.n	80018d4 <HAL_TIM_Base_Init+0x64>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80018a4:	4e26      	ldr	r6, [pc, #152]	; (8001940 <HAL_TIM_Base_Init+0xd0>)
 80018a6:	42b2      	cmp	r2, r6
 80018a8:	d041      	beq.n	800192e <HAL_TIM_Base_Init+0xbe>
 80018aa:	4e26      	ldr	r6, [pc, #152]	; (8001944 <HAL_TIM_Base_Init+0xd4>)
 80018ac:	42b2      	cmp	r2, r6
 80018ae:	d033      	beq.n	8001918 <HAL_TIM_Base_Init+0xa8>
 80018b0:	4e25      	ldr	r6, [pc, #148]	; (8001948 <HAL_TIM_Base_Init+0xd8>)
 80018b2:	42b2      	cmp	r2, r6
 80018b4:	d030      	beq.n	8001918 <HAL_TIM_Base_Init+0xa8>
 80018b6:	4e25      	ldr	r6, [pc, #148]	; (800194c <HAL_TIM_Base_Init+0xdc>)
 80018b8:	42b2      	cmp	r2, r6
 80018ba:	d02d      	beq.n	8001918 <HAL_TIM_Base_Init+0xa8>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80018bc:	2680      	movs	r6, #128	; 0x80
 80018be:	43b3      	bics	r3, r6
 80018c0:	432b      	orrs	r3, r5

  TIMx->CR1 = tmpcr1;
 80018c2:	6013      	str	r3, [r2, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80018c4:	62d0      	str	r0, [r2, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80018c6:	6291      	str	r1, [r2, #40]	; 0x28
 80018c8:	e01a      	b.n	8001900 <HAL_TIM_Base_Init+0x90>
    htim->Lock = HAL_UNLOCKED;
 80018ca:	223c      	movs	r2, #60	; 0x3c
 80018cc:	5483      	strb	r3, [r0, r2]
    HAL_TIM_Base_MspInit(htim);
 80018ce:	f004 fa97 	bl	8005e00 <HAL_TIM_Base_MspInit>
 80018d2:	e7d5      	b.n	8001880 <HAL_TIM_Base_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018d4:	2670      	movs	r6, #112	; 0x70
 80018d6:	43b3      	bics	r3, r6
    tmpcr1 |= Structure->CounterMode;
 80018d8:	68a6      	ldr	r6, [r4, #8]
 80018da:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 80018dc:	4e1c      	ldr	r6, [pc, #112]	; (8001950 <HAL_TIM_Base_Init+0xe0>)
 80018de:	4033      	ands	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80018e0:	6926      	ldr	r6, [r4, #16]
 80018e2:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80018e4:	2680      	movs	r6, #128	; 0x80
 80018e6:	43b3      	bics	r3, r6
 80018e8:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80018ea:	6013      	str	r3, [r2, #0]

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80018ec:	4b16      	ldr	r3, [pc, #88]	; (8001948 <HAL_TIM_Base_Init+0xd8>)
  TIMx->ARR = (uint32_t)Structure->Period ;
 80018ee:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80018f0:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d002      	beq.n	80018fc <HAL_TIM_Base_Init+0x8c>
 80018f6:	4b15      	ldr	r3, [pc, #84]	; (800194c <HAL_TIM_Base_Init+0xdc>)
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d101      	bne.n	8001900 <HAL_TIM_Base_Init+0x90>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80018fc:	6963      	ldr	r3, [r4, #20]
 80018fe:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001900:	2301      	movs	r3, #1
 8001902:	6153      	str	r3, [r2, #20]
  htim->State = HAL_TIM_STATE_READY;
 8001904:	223d      	movs	r2, #61	; 0x3d
  return HAL_OK;
 8001906:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001908:	54a3      	strb	r3, [r4, r2]
}
 800190a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800190c:	2001      	movs	r0, #1
 800190e:	e7fc      	b.n	800190a <HAL_TIM_Base_Init+0x9a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001910:	2670      	movs	r6, #112	; 0x70
 8001912:	43b3      	bics	r3, r6
    tmpcr1 |= Structure->CounterMode;
 8001914:	68a6      	ldr	r6, [r4, #8]
 8001916:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8001918:	4e0d      	ldr	r6, [pc, #52]	; (8001950 <HAL_TIM_Base_Init+0xe0>)
 800191a:	4033      	ands	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800191c:	6926      	ldr	r6, [r4, #16]
 800191e:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001920:	2680      	movs	r6, #128	; 0x80
 8001922:	43b3      	bics	r3, r6
 8001924:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8001926:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001928:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800192a:	6291      	str	r1, [r2, #40]	; 0x28
 800192c:	e7e6      	b.n	80018fc <HAL_TIM_Base_Init+0x8c>
    tmpcr1 &= ~TIM_CR1_CKD;
 800192e:	4e08      	ldr	r6, [pc, #32]	; (8001950 <HAL_TIM_Base_Init+0xe0>)
 8001930:	4033      	ands	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001932:	6926      	ldr	r6, [r4, #16]
 8001934:	4333      	orrs	r3, r6
 8001936:	e7c1      	b.n	80018bc <HAL_TIM_Base_Init+0x4c>
 8001938:	40012c00 	.word	0x40012c00
 800193c:	40000400 	.word	0x40000400
 8001940:	40002000 	.word	0x40002000
 8001944:	40014000 	.word	0x40014000
 8001948:	40014400 	.word	0x40014400
 800194c:	40014800 	.word	0x40014800
 8001950:	fffffcff 	.word	0xfffffcff

08001954 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8001954:	233d      	movs	r3, #61	; 0x3d
 8001956:	2202      	movs	r2, #2
 8001958:	54c2      	strb	r2, [r0, r3]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800195a:	6802      	ldr	r2, [r0, #0]
 800195c:	3b36      	subs	r3, #54	; 0x36
 800195e:	6891      	ldr	r1, [r2, #8]
 8001960:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001962:	2b06      	cmp	r3, #6
 8001964:	d003      	beq.n	800196e <HAL_TIM_Base_Start+0x1a>
    __HAL_TIM_ENABLE(htim);
 8001966:	2101      	movs	r1, #1
 8001968:	6813      	ldr	r3, [r2, #0]
 800196a:	430b      	orrs	r3, r1
 800196c:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 800196e:	233d      	movs	r3, #61	; 0x3d
 8001970:	2201      	movs	r2, #1
 8001972:	54c2      	strb	r2, [r0, r3]
}
 8001974:	2000      	movs	r0, #0
 8001976:	4770      	bx	lr

08001978 <HAL_TIM_Base_Stop>:
  htim->State = HAL_TIM_STATE_BUSY;
 8001978:	233d      	movs	r3, #61	; 0x3d
 800197a:	2202      	movs	r2, #2
 800197c:	54c2      	strb	r2, [r0, r3]
  __HAL_TIM_DISABLE(htim);
 800197e:	6803      	ldr	r3, [r0, #0]
 8001980:	4a08      	ldr	r2, [pc, #32]	; (80019a4 <HAL_TIM_Base_Stop+0x2c>)
 8001982:	6a19      	ldr	r1, [r3, #32]
 8001984:	4211      	tst	r1, r2
 8001986:	d107      	bne.n	8001998 <HAL_TIM_Base_Stop+0x20>
 8001988:	6a19      	ldr	r1, [r3, #32]
 800198a:	4a07      	ldr	r2, [pc, #28]	; (80019a8 <HAL_TIM_Base_Stop+0x30>)
 800198c:	4211      	tst	r1, r2
 800198e:	d103      	bne.n	8001998 <HAL_TIM_Base_Stop+0x20>
 8001990:	2101      	movs	r1, #1
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	438a      	bics	r2, r1
 8001996:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8001998:	233d      	movs	r3, #61	; 0x3d
 800199a:	2201      	movs	r2, #1
 800199c:	54c2      	strb	r2, [r0, r3]
}
 800199e:	2000      	movs	r0, #0
 80019a0:	4770      	bx	lr
 80019a2:	46c0      	nop			; (mov r8, r8)
 80019a4:	00001111 	.word	0x00001111
 80019a8:	00000444 	.word	0x00000444

080019ac <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019ac:	2101      	movs	r1, #1
 80019ae:	6803      	ldr	r3, [r0, #0]
 80019b0:	68da      	ldr	r2, [r3, #12]
 80019b2:	430a      	orrs	r2, r1
 80019b4:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019b6:	2207      	movs	r2, #7
 80019b8:	6898      	ldr	r0, [r3, #8]
 80019ba:	4002      	ands	r2, r0
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019bc:	2a06      	cmp	r2, #6
 80019be:	d002      	beq.n	80019c6 <HAL_TIM_Base_Start_IT+0x1a>
    __HAL_TIM_ENABLE(htim);
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	430a      	orrs	r2, r1
 80019c4:	601a      	str	r2, [r3, #0]
}
 80019c6:	2000      	movs	r0, #0
 80019c8:	4770      	bx	lr
 80019ca:	46c0      	nop			; (mov r8, r8)

080019cc <HAL_TIM_PWM_Init>:
{
 80019cc:	b570      	push	{r4, r5, r6, lr}
 80019ce:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 80019d0:	d04a      	beq.n	8001a68 <HAL_TIM_PWM_Init+0x9c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80019d2:	233d      	movs	r3, #61	; 0x3d
 80019d4:	5cc3      	ldrb	r3, [r0, r3]
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d024      	beq.n	8001a26 <HAL_TIM_PWM_Init+0x5a>
  htim->State = HAL_TIM_STATE_BUSY;
 80019dc:	233d      	movs	r3, #61	; 0x3d
 80019de:	2202      	movs	r2, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019e0:	4e2c      	ldr	r6, [pc, #176]	; (8001a94 <HAL_TIM_PWM_Init+0xc8>)
  htim->State = HAL_TIM_STATE_BUSY;
 80019e2:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019e4:	6822      	ldr	r2, [r4, #0]
 80019e6:	69a5      	ldr	r5, [r4, #24]
  tmpcr1 = TIMx->CR1;
 80019e8:	6813      	ldr	r3, [r2, #0]
 80019ea:	68e0      	ldr	r0, [r4, #12]
 80019ec:	6861      	ldr	r1, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019ee:	42b2      	cmp	r2, r6
 80019f0:	d03c      	beq.n	8001a6c <HAL_TIM_PWM_Init+0xa0>
 80019f2:	2680      	movs	r6, #128	; 0x80
 80019f4:	05f6      	lsls	r6, r6, #23
 80019f6:	42b2      	cmp	r2, r6
 80019f8:	d01a      	beq.n	8001a30 <HAL_TIM_PWM_Init+0x64>
 80019fa:	4e27      	ldr	r6, [pc, #156]	; (8001a98 <HAL_TIM_PWM_Init+0xcc>)
 80019fc:	42b2      	cmp	r2, r6
 80019fe:	d017      	beq.n	8001a30 <HAL_TIM_PWM_Init+0x64>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a00:	4e26      	ldr	r6, [pc, #152]	; (8001a9c <HAL_TIM_PWM_Init+0xd0>)
 8001a02:	42b2      	cmp	r2, r6
 8001a04:	d041      	beq.n	8001a8a <HAL_TIM_PWM_Init+0xbe>
 8001a06:	4e26      	ldr	r6, [pc, #152]	; (8001aa0 <HAL_TIM_PWM_Init+0xd4>)
 8001a08:	42b2      	cmp	r2, r6
 8001a0a:	d033      	beq.n	8001a74 <HAL_TIM_PWM_Init+0xa8>
 8001a0c:	4e25      	ldr	r6, [pc, #148]	; (8001aa4 <HAL_TIM_PWM_Init+0xd8>)
 8001a0e:	42b2      	cmp	r2, r6
 8001a10:	d030      	beq.n	8001a74 <HAL_TIM_PWM_Init+0xa8>
 8001a12:	4e25      	ldr	r6, [pc, #148]	; (8001aa8 <HAL_TIM_PWM_Init+0xdc>)
 8001a14:	42b2      	cmp	r2, r6
 8001a16:	d02d      	beq.n	8001a74 <HAL_TIM_PWM_Init+0xa8>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a18:	2680      	movs	r6, #128	; 0x80
 8001a1a:	43b3      	bics	r3, r6
 8001a1c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8001a1e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a20:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001a22:	6291      	str	r1, [r2, #40]	; 0x28
 8001a24:	e01a      	b.n	8001a5c <HAL_TIM_PWM_Init+0x90>
    htim->Lock = HAL_UNLOCKED;
 8001a26:	223c      	movs	r2, #60	; 0x3c
 8001a28:	5483      	strb	r3, [r0, r2]
    HAL_TIM_PWM_MspInit(htim);
 8001a2a:	f004 f929 	bl	8005c80 <HAL_TIM_PWM_MspInit>
 8001a2e:	e7d5      	b.n	80019dc <HAL_TIM_PWM_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a30:	2670      	movs	r6, #112	; 0x70
 8001a32:	43b3      	bics	r3, r6
    tmpcr1 |= Structure->CounterMode;
 8001a34:	68a6      	ldr	r6, [r4, #8]
 8001a36:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a38:	4e1c      	ldr	r6, [pc, #112]	; (8001aac <HAL_TIM_PWM_Init+0xe0>)
 8001a3a:	4033      	ands	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a3c:	6926      	ldr	r6, [r4, #16]
 8001a3e:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a40:	2680      	movs	r6, #128	; 0x80
 8001a42:	43b3      	bics	r3, r6
 8001a44:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8001a46:	6013      	str	r3, [r2, #0]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a48:	4b16      	ldr	r3, [pc, #88]	; (8001aa4 <HAL_TIM_PWM_Init+0xd8>)
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a4a:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001a4c:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d002      	beq.n	8001a58 <HAL_TIM_PWM_Init+0x8c>
 8001a52:	4b15      	ldr	r3, [pc, #84]	; (8001aa8 <HAL_TIM_PWM_Init+0xdc>)
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d101      	bne.n	8001a5c <HAL_TIM_PWM_Init+0x90>
    TIMx->RCR = Structure->RepetitionCounter;
 8001a58:	6963      	ldr	r3, [r4, #20]
 8001a5a:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	6153      	str	r3, [r2, #20]
  htim->State = HAL_TIM_STATE_READY;
 8001a60:	223d      	movs	r2, #61	; 0x3d
  return HAL_OK;
 8001a62:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001a64:	54a3      	strb	r3, [r4, r2]
}
 8001a66:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001a68:	2001      	movs	r0, #1
 8001a6a:	e7fc      	b.n	8001a66 <HAL_TIM_PWM_Init+0x9a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a6c:	2670      	movs	r6, #112	; 0x70
 8001a6e:	43b3      	bics	r3, r6
    tmpcr1 |= Structure->CounterMode;
 8001a70:	68a6      	ldr	r6, [r4, #8]
 8001a72:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a74:	4e0d      	ldr	r6, [pc, #52]	; (8001aac <HAL_TIM_PWM_Init+0xe0>)
 8001a76:	4033      	ands	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a78:	6926      	ldr	r6, [r4, #16]
 8001a7a:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a7c:	2680      	movs	r6, #128	; 0x80
 8001a7e:	43b3      	bics	r3, r6
 8001a80:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8001a82:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a84:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001a86:	6291      	str	r1, [r2, #40]	; 0x28
 8001a88:	e7e6      	b.n	8001a58 <HAL_TIM_PWM_Init+0x8c>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a8a:	4e08      	ldr	r6, [pc, #32]	; (8001aac <HAL_TIM_PWM_Init+0xe0>)
 8001a8c:	4033      	ands	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a8e:	6926      	ldr	r6, [r4, #16]
 8001a90:	4333      	orrs	r3, r6
 8001a92:	e7c1      	b.n	8001a18 <HAL_TIM_PWM_Init+0x4c>
 8001a94:	40012c00 	.word	0x40012c00
 8001a98:	40000400 	.word	0x40000400
 8001a9c:	40002000 	.word	0x40002000
 8001aa0:	40014000 	.word	0x40014000
 8001aa4:	40014400 	.word	0x40014400
 8001aa8:	40014800 	.word	0x40014800
 8001aac:	fffffcff 	.word	0xfffffcff

08001ab0 <HAL_TIM_PWM_Start>:
 8001ab0:	221f      	movs	r2, #31
 8001ab2:	4011      	ands	r1, r2
 8001ab4:	3a1e      	subs	r2, #30
 8001ab6:	408a      	lsls	r2, r1
 8001ab8:	6803      	ldr	r3, [r0, #0]
 8001aba:	6a19      	ldr	r1, [r3, #32]
 8001abc:	4391      	bics	r1, r2
 8001abe:	6219      	str	r1, [r3, #32]
 8001ac0:	6a19      	ldr	r1, [r3, #32]
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	621a      	str	r2, [r3, #32]
 8001ac6:	4a0e      	ldr	r2, [pc, #56]	; (8001b00 <HAL_TIM_PWM_Start+0x50>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d008      	beq.n	8001ade <HAL_TIM_PWM_Start+0x2e>
 8001acc:	4a0d      	ldr	r2, [pc, #52]	; (8001b04 <HAL_TIM_PWM_Start+0x54>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d005      	beq.n	8001ade <HAL_TIM_PWM_Start+0x2e>
 8001ad2:	4a0d      	ldr	r2, [pc, #52]	; (8001b08 <HAL_TIM_PWM_Start+0x58>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d002      	beq.n	8001ade <HAL_TIM_PWM_Start+0x2e>
 8001ad8:	4a0c      	ldr	r2, [pc, #48]	; (8001b0c <HAL_TIM_PWM_Start+0x5c>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d104      	bne.n	8001ae8 <HAL_TIM_PWM_Start+0x38>
 8001ade:	2280      	movs	r2, #128	; 0x80
 8001ae0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001ae2:	0212      	lsls	r2, r2, #8
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	645a      	str	r2, [r3, #68]	; 0x44
 8001ae8:	2207      	movs	r2, #7
 8001aea:	6899      	ldr	r1, [r3, #8]
 8001aec:	400a      	ands	r2, r1
 8001aee:	2a06      	cmp	r2, #6
 8001af0:	d003      	beq.n	8001afa <HAL_TIM_PWM_Start+0x4a>
 8001af2:	2101      	movs	r1, #1
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	430a      	orrs	r2, r1
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	2000      	movs	r0, #0
 8001afc:	4770      	bx	lr
 8001afe:	46c0      	nop			; (mov r8, r8)
 8001b00:	40012c00 	.word	0x40012c00
 8001b04:	40014000 	.word	0x40014000
 8001b08:	40014400 	.word	0x40014400
 8001b0c:	40014800 	.word	0x40014800

08001b10 <HAL_TIM_PWM_Start_DMA>:
 8001b10:	b570      	push	{r4, r5, r6, lr}
 8001b12:	000d      	movs	r5, r1
 8001b14:	0011      	movs	r1, r2
 8001b16:	223d      	movs	r2, #61	; 0x3d
 8001b18:	0004      	movs	r4, r0
 8001b1a:	5c80      	ldrb	r0, [r0, r2]
 8001b1c:	2802      	cmp	r0, #2
 8001b1e:	d100      	bne.n	8001b22 <HAL_TIM_PWM_Start_DMA+0x12>
 8001b20:	e078      	b.n	8001c14 <HAL_TIM_PWM_Start_DMA+0x104>
 8001b22:	5ca2      	ldrb	r2, [r4, r2]
 8001b24:	2a01      	cmp	r2, #1
 8001b26:	d056      	beq.n	8001bd6 <HAL_TIM_PWM_Start_DMA+0xc6>
 8001b28:	6822      	ldr	r2, [r4, #0]
 8001b2a:	2d04      	cmp	r5, #4
 8001b2c:	d05b      	beq.n	8001be6 <HAL_TIM_PWM_Start_DMA+0xd6>
 8001b2e:	2d04      	cmp	r5, #4
 8001b30:	d93c      	bls.n	8001bac <HAL_TIM_PWM_Start_DMA+0x9c>
 8001b32:	2d08      	cmp	r5, #8
 8001b34:	d100      	bne.n	8001b38 <HAL_TIM_PWM_Start_DMA+0x28>
 8001b36:	e06f      	b.n	8001c18 <HAL_TIM_PWM_Start_DMA+0x108>
 8001b38:	2d0c      	cmp	r5, #12
 8001b3a:	d111      	bne.n	8001b60 <HAL_TIM_PWM_Start_DMA+0x50>
 8001b3c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001b3e:	4e41      	ldr	r6, [pc, #260]	; (8001c44 <HAL_TIM_PWM_Start_DMA+0x134>)
 8001b40:	3240      	adds	r2, #64	; 0x40
 8001b42:	6286      	str	r6, [r0, #40]	; 0x28
 8001b44:	4e40      	ldr	r6, [pc, #256]	; (8001c48 <HAL_TIM_PWM_Start_DMA+0x138>)
 8001b46:	62c6      	str	r6, [r0, #44]	; 0x2c
 8001b48:	4e40      	ldr	r6, [pc, #256]	; (8001c4c <HAL_TIM_PWM_Start_DMA+0x13c>)
 8001b4a:	6306      	str	r6, [r0, #48]	; 0x30
 8001b4c:	f7ff f802 	bl	8000b54 <HAL_DMA_Start_IT>
 8001b50:	2800      	cmp	r0, #0
 8001b52:	d15d      	bne.n	8001c10 <HAL_TIM_PWM_Start_DMA+0x100>
 8001b54:	2380      	movs	r3, #128	; 0x80
 8001b56:	6822      	ldr	r2, [r4, #0]
 8001b58:	015b      	lsls	r3, r3, #5
 8001b5a:	68d1      	ldr	r1, [r2, #12]
 8001b5c:	430b      	orrs	r3, r1
 8001b5e:	60d3      	str	r3, [r2, #12]
 8001b60:	231f      	movs	r3, #31
 8001b62:	401d      	ands	r5, r3
 8001b64:	3b1e      	subs	r3, #30
 8001b66:	40ab      	lsls	r3, r5
 8001b68:	6a11      	ldr	r1, [r2, #32]
 8001b6a:	4399      	bics	r1, r3
 8001b6c:	6211      	str	r1, [r2, #32]
 8001b6e:	6a11      	ldr	r1, [r2, #32]
 8001b70:	430b      	orrs	r3, r1
 8001b72:	6213      	str	r3, [r2, #32]
 8001b74:	4b36      	ldr	r3, [pc, #216]	; (8001c50 <HAL_TIM_PWM_Start_DMA+0x140>)
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d008      	beq.n	8001b8c <HAL_TIM_PWM_Start_DMA+0x7c>
 8001b7a:	4b36      	ldr	r3, [pc, #216]	; (8001c54 <HAL_TIM_PWM_Start_DMA+0x144>)
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d005      	beq.n	8001b8c <HAL_TIM_PWM_Start_DMA+0x7c>
 8001b80:	4b35      	ldr	r3, [pc, #212]	; (8001c58 <HAL_TIM_PWM_Start_DMA+0x148>)
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d002      	beq.n	8001b8c <HAL_TIM_PWM_Start_DMA+0x7c>
 8001b86:	4b35      	ldr	r3, [pc, #212]	; (8001c5c <HAL_TIM_PWM_Start_DMA+0x14c>)
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d104      	bne.n	8001b96 <HAL_TIM_PWM_Start_DMA+0x86>
 8001b8c:	2380      	movs	r3, #128	; 0x80
 8001b8e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001b90:	021b      	lsls	r3, r3, #8
 8001b92:	430b      	orrs	r3, r1
 8001b94:	6453      	str	r3, [r2, #68]	; 0x44
 8001b96:	2307      	movs	r3, #7
 8001b98:	6891      	ldr	r1, [r2, #8]
 8001b9a:	400b      	ands	r3, r1
 8001b9c:	2b06      	cmp	r3, #6
 8001b9e:	d04e      	beq.n	8001c3e <HAL_TIM_PWM_Start_DMA+0x12e>
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	6813      	ldr	r3, [r2, #0]
 8001ba6:	430b      	orrs	r3, r1
 8001ba8:	6013      	str	r3, [r2, #0]
 8001baa:	bd70      	pop	{r4, r5, r6, pc}
 8001bac:	2d00      	cmp	r5, #0
 8001bae:	d1d7      	bne.n	8001b60 <HAL_TIM_PWM_Start_DMA+0x50>
 8001bb0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001bb2:	4e24      	ldr	r6, [pc, #144]	; (8001c44 <HAL_TIM_PWM_Start_DMA+0x134>)
 8001bb4:	3234      	adds	r2, #52	; 0x34
 8001bb6:	6286      	str	r6, [r0, #40]	; 0x28
 8001bb8:	4e23      	ldr	r6, [pc, #140]	; (8001c48 <HAL_TIM_PWM_Start_DMA+0x138>)
 8001bba:	62c6      	str	r6, [r0, #44]	; 0x2c
 8001bbc:	4e23      	ldr	r6, [pc, #140]	; (8001c4c <HAL_TIM_PWM_Start_DMA+0x13c>)
 8001bbe:	6306      	str	r6, [r0, #48]	; 0x30
 8001bc0:	f7fe ffc8 	bl	8000b54 <HAL_DMA_Start_IT>
 8001bc4:	2800      	cmp	r0, #0
 8001bc6:	d123      	bne.n	8001c10 <HAL_TIM_PWM_Start_DMA+0x100>
 8001bc8:	2380      	movs	r3, #128	; 0x80
 8001bca:	6822      	ldr	r2, [r4, #0]
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	68d1      	ldr	r1, [r2, #12]
 8001bd0:	430b      	orrs	r3, r1
 8001bd2:	60d3      	str	r3, [r2, #12]
 8001bd4:	e7c4      	b.n	8001b60 <HAL_TIM_PWM_Start_DMA+0x50>
 8001bd6:	2900      	cmp	r1, #0
 8001bd8:	d018      	beq.n	8001c0c <HAL_TIM_PWM_Start_DMA+0xfc>
 8001bda:	223d      	movs	r2, #61	; 0x3d
 8001bdc:	2002      	movs	r0, #2
 8001bde:	54a0      	strb	r0, [r4, r2]
 8001be0:	6822      	ldr	r2, [r4, #0]
 8001be2:	2d04      	cmp	r5, #4
 8001be4:	d1a3      	bne.n	8001b2e <HAL_TIM_PWM_Start_DMA+0x1e>
 8001be6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001be8:	4e16      	ldr	r6, [pc, #88]	; (8001c44 <HAL_TIM_PWM_Start_DMA+0x134>)
 8001bea:	3238      	adds	r2, #56	; 0x38
 8001bec:	6286      	str	r6, [r0, #40]	; 0x28
 8001bee:	4e16      	ldr	r6, [pc, #88]	; (8001c48 <HAL_TIM_PWM_Start_DMA+0x138>)
 8001bf0:	62c6      	str	r6, [r0, #44]	; 0x2c
 8001bf2:	4e16      	ldr	r6, [pc, #88]	; (8001c4c <HAL_TIM_PWM_Start_DMA+0x13c>)
 8001bf4:	6306      	str	r6, [r0, #48]	; 0x30
 8001bf6:	f7fe ffad 	bl	8000b54 <HAL_DMA_Start_IT>
 8001bfa:	2800      	cmp	r0, #0
 8001bfc:	d108      	bne.n	8001c10 <HAL_TIM_PWM_Start_DMA+0x100>
 8001bfe:	2380      	movs	r3, #128	; 0x80
 8001c00:	6822      	ldr	r2, [r4, #0]
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	68d1      	ldr	r1, [r2, #12]
 8001c06:	430b      	orrs	r3, r1
 8001c08:	60d3      	str	r3, [r2, #12]
 8001c0a:	e7a9      	b.n	8001b60 <HAL_TIM_PWM_Start_DMA+0x50>
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d0e4      	beq.n	8001bda <HAL_TIM_PWM_Start_DMA+0xca>
 8001c10:	2001      	movs	r0, #1
 8001c12:	e7ca      	b.n	8001baa <HAL_TIM_PWM_Start_DMA+0x9a>
 8001c14:	2002      	movs	r0, #2
 8001c16:	e7c8      	b.n	8001baa <HAL_TIM_PWM_Start_DMA+0x9a>
 8001c18:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001c1a:	4e0a      	ldr	r6, [pc, #40]	; (8001c44 <HAL_TIM_PWM_Start_DMA+0x134>)
 8001c1c:	323c      	adds	r2, #60	; 0x3c
 8001c1e:	6286      	str	r6, [r0, #40]	; 0x28
 8001c20:	4e09      	ldr	r6, [pc, #36]	; (8001c48 <HAL_TIM_PWM_Start_DMA+0x138>)
 8001c22:	62c6      	str	r6, [r0, #44]	; 0x2c
 8001c24:	4e09      	ldr	r6, [pc, #36]	; (8001c4c <HAL_TIM_PWM_Start_DMA+0x13c>)
 8001c26:	6306      	str	r6, [r0, #48]	; 0x30
 8001c28:	f7fe ff94 	bl	8000b54 <HAL_DMA_Start_IT>
 8001c2c:	2800      	cmp	r0, #0
 8001c2e:	d1ef      	bne.n	8001c10 <HAL_TIM_PWM_Start_DMA+0x100>
 8001c30:	2380      	movs	r3, #128	; 0x80
 8001c32:	6822      	ldr	r2, [r4, #0]
 8001c34:	011b      	lsls	r3, r3, #4
 8001c36:	68d1      	ldr	r1, [r2, #12]
 8001c38:	430b      	orrs	r3, r1
 8001c3a:	60d3      	str	r3, [r2, #12]
 8001c3c:	e790      	b.n	8001b60 <HAL_TIM_PWM_Start_DMA+0x50>
 8001c3e:	2000      	movs	r0, #0
 8001c40:	e7b3      	b.n	8001baa <HAL_TIM_PWM_Start_DMA+0x9a>
 8001c42:	46c0      	nop			; (mov r8, r8)
 8001c44:	080025f5 	.word	0x080025f5
 8001c48:	08002639 	.word	0x08002639
 8001c4c:	080027d9 	.word	0x080027d9
 8001c50:	40012c00 	.word	0x40012c00
 8001c54:	40014000 	.word	0x40014000
 8001c58:	40014400 	.word	0x40014400
 8001c5c:	40014800 	.word	0x40014800

08001c60 <HAL_TIM_IC_MspInit>:
 8001c60:	4770      	bx	lr
 8001c62:	46c0      	nop			; (mov r8, r8)

08001c64 <HAL_TIM_IC_Init>:
{
 8001c64:	b570      	push	{r4, r5, r6, lr}
 8001c66:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8001c68:	d04a      	beq.n	8001d00 <HAL_TIM_IC_Init+0x9c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001c6a:	233d      	movs	r3, #61	; 0x3d
 8001c6c:	5cc3      	ldrb	r3, [r0, r3]
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d024      	beq.n	8001cbe <HAL_TIM_IC_Init+0x5a>
  htim->State = HAL_TIM_STATE_BUSY;
 8001c74:	233d      	movs	r3, #61	; 0x3d
 8001c76:	2202      	movs	r2, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c78:	4e2c      	ldr	r6, [pc, #176]	; (8001d2c <HAL_TIM_IC_Init+0xc8>)
  htim->State = HAL_TIM_STATE_BUSY;
 8001c7a:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c7c:	6822      	ldr	r2, [r4, #0]
 8001c7e:	69a5      	ldr	r5, [r4, #24]
  tmpcr1 = TIMx->CR1;
 8001c80:	6813      	ldr	r3, [r2, #0]
 8001c82:	68e0      	ldr	r0, [r4, #12]
 8001c84:	6861      	ldr	r1, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c86:	42b2      	cmp	r2, r6
 8001c88:	d03c      	beq.n	8001d04 <HAL_TIM_IC_Init+0xa0>
 8001c8a:	2680      	movs	r6, #128	; 0x80
 8001c8c:	05f6      	lsls	r6, r6, #23
 8001c8e:	42b2      	cmp	r2, r6
 8001c90:	d01a      	beq.n	8001cc8 <HAL_TIM_IC_Init+0x64>
 8001c92:	4e27      	ldr	r6, [pc, #156]	; (8001d30 <HAL_TIM_IC_Init+0xcc>)
 8001c94:	42b2      	cmp	r2, r6
 8001c96:	d017      	beq.n	8001cc8 <HAL_TIM_IC_Init+0x64>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c98:	4e26      	ldr	r6, [pc, #152]	; (8001d34 <HAL_TIM_IC_Init+0xd0>)
 8001c9a:	42b2      	cmp	r2, r6
 8001c9c:	d041      	beq.n	8001d22 <HAL_TIM_IC_Init+0xbe>
 8001c9e:	4e26      	ldr	r6, [pc, #152]	; (8001d38 <HAL_TIM_IC_Init+0xd4>)
 8001ca0:	42b2      	cmp	r2, r6
 8001ca2:	d033      	beq.n	8001d0c <HAL_TIM_IC_Init+0xa8>
 8001ca4:	4e25      	ldr	r6, [pc, #148]	; (8001d3c <HAL_TIM_IC_Init+0xd8>)
 8001ca6:	42b2      	cmp	r2, r6
 8001ca8:	d030      	beq.n	8001d0c <HAL_TIM_IC_Init+0xa8>
 8001caa:	4e25      	ldr	r6, [pc, #148]	; (8001d40 <HAL_TIM_IC_Init+0xdc>)
 8001cac:	42b2      	cmp	r2, r6
 8001cae:	d02d      	beq.n	8001d0c <HAL_TIM_IC_Init+0xa8>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001cb0:	2680      	movs	r6, #128	; 0x80
 8001cb2:	43b3      	bics	r3, r6
 8001cb4:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8001cb6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cb8:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001cba:	6291      	str	r1, [r2, #40]	; 0x28
 8001cbc:	e01a      	b.n	8001cf4 <HAL_TIM_IC_Init+0x90>
    htim->Lock = HAL_UNLOCKED;
 8001cbe:	223c      	movs	r2, #60	; 0x3c
 8001cc0:	5483      	strb	r3, [r0, r2]
    HAL_TIM_IC_MspInit(htim);
 8001cc2:	f7ff ffcd 	bl	8001c60 <HAL_TIM_IC_MspInit>
 8001cc6:	e7d5      	b.n	8001c74 <HAL_TIM_IC_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001cc8:	2670      	movs	r6, #112	; 0x70
 8001cca:	43b3      	bics	r3, r6
    tmpcr1 |= Structure->CounterMode;
 8001ccc:	68a6      	ldr	r6, [r4, #8]
 8001cce:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cd0:	4e1c      	ldr	r6, [pc, #112]	; (8001d44 <HAL_TIM_IC_Init+0xe0>)
 8001cd2:	4033      	ands	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cd4:	6926      	ldr	r6, [r4, #16]
 8001cd6:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001cd8:	2680      	movs	r6, #128	; 0x80
 8001cda:	43b3      	bics	r3, r6
 8001cdc:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8001cde:	6013      	str	r3, [r2, #0]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ce0:	4b16      	ldr	r3, [pc, #88]	; (8001d3c <HAL_TIM_IC_Init+0xd8>)
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ce2:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001ce4:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d002      	beq.n	8001cf0 <HAL_TIM_IC_Init+0x8c>
 8001cea:	4b15      	ldr	r3, [pc, #84]	; (8001d40 <HAL_TIM_IC_Init+0xdc>)
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d101      	bne.n	8001cf4 <HAL_TIM_IC_Init+0x90>
    TIMx->RCR = Structure->RepetitionCounter;
 8001cf0:	6963      	ldr	r3, [r4, #20]
 8001cf2:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	6153      	str	r3, [r2, #20]
  htim->State = HAL_TIM_STATE_READY;
 8001cf8:	223d      	movs	r2, #61	; 0x3d
  return HAL_OK;
 8001cfa:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001cfc:	54a3      	strb	r3, [r4, r2]
}
 8001cfe:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001d00:	2001      	movs	r0, #1
 8001d02:	e7fc      	b.n	8001cfe <HAL_TIM_IC_Init+0x9a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d04:	2670      	movs	r6, #112	; 0x70
 8001d06:	43b3      	bics	r3, r6
    tmpcr1 |= Structure->CounterMode;
 8001d08:	68a6      	ldr	r6, [r4, #8]
 8001d0a:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d0c:	4e0d      	ldr	r6, [pc, #52]	; (8001d44 <HAL_TIM_IC_Init+0xe0>)
 8001d0e:	4033      	ands	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d10:	6926      	ldr	r6, [r4, #16]
 8001d12:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d14:	2680      	movs	r6, #128	; 0x80
 8001d16:	43b3      	bics	r3, r6
 8001d18:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8001d1a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d1c:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001d1e:	6291      	str	r1, [r2, #40]	; 0x28
 8001d20:	e7e6      	b.n	8001cf0 <HAL_TIM_IC_Init+0x8c>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d22:	4e08      	ldr	r6, [pc, #32]	; (8001d44 <HAL_TIM_IC_Init+0xe0>)
 8001d24:	4033      	ands	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d26:	6926      	ldr	r6, [r4, #16]
 8001d28:	4333      	orrs	r3, r6
 8001d2a:	e7c1      	b.n	8001cb0 <HAL_TIM_IC_Init+0x4c>
 8001d2c:	40012c00 	.word	0x40012c00
 8001d30:	40000400 	.word	0x40000400
 8001d34:	40002000 	.word	0x40002000
 8001d38:	40014000 	.word	0x40014000
 8001d3c:	40014400 	.word	0x40014400
 8001d40:	40014800 	.word	0x40014800
 8001d44:	fffffcff 	.word	0xfffffcff

08001d48 <HAL_TIM_IC_Start_DMA>:
{
 8001d48:	b570      	push	{r4, r5, r6, lr}
 8001d4a:	000e      	movs	r6, r1
  if (htim->State == HAL_TIM_STATE_BUSY)
 8001d4c:	213d      	movs	r1, #61	; 0x3d
{
 8001d4e:	0005      	movs	r5, r0
  if (htim->State == HAL_TIM_STATE_BUSY)
 8001d50:	5c40      	ldrb	r0, [r0, r1]
 8001d52:	2802      	cmp	r0, #2
 8001d54:	d069      	beq.n	8001e2a <HAL_TIM_IC_Start_DMA+0xe2>
  else if (htim->State == HAL_TIM_STATE_READY)
 8001d56:	5c69      	ldrb	r1, [r5, r1]
 8001d58:	2901      	cmp	r1, #1
 8001d5a:	d046      	beq.n	8001dea <HAL_TIM_IC_Start_DMA+0xa2>
 8001d5c:	682c      	ldr	r4, [r5, #0]
  switch (Channel)
 8001d5e:	2e04      	cmp	r6, #4
 8001d60:	d04b      	beq.n	8001dfa <HAL_TIM_IC_Start_DMA+0xb2>
 8001d62:	2e04      	cmp	r6, #4
 8001d64:	d92b      	bls.n	8001dbe <HAL_TIM_IC_Start_DMA+0x76>
 8001d66:	2e08      	cmp	r6, #8
 8001d68:	d061      	beq.n	8001e2e <HAL_TIM_IC_Start_DMA+0xe6>
 8001d6a:	2e0c      	cmp	r6, #12
 8001d6c:	d112      	bne.n	8001d94 <HAL_TIM_IC_Start_DMA+0x4c>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8001d6e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001d70:	493a      	ldr	r1, [pc, #232]	; (8001e5c <HAL_TIM_IC_Start_DMA+0x114>)
 8001d72:	6281      	str	r1, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8001d74:	493a      	ldr	r1, [pc, #232]	; (8001e60 <HAL_TIM_IC_Start_DMA+0x118>)
 8001d76:	62c1      	str	r1, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8001d78:	493a      	ldr	r1, [pc, #232]	; (8001e64 <HAL_TIM_IC_Start_DMA+0x11c>)
 8001d7a:	6301      	str	r1, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 8001d7c:	0021      	movs	r1, r4
 8001d7e:	3140      	adds	r1, #64	; 0x40
 8001d80:	f7fe fee8 	bl	8000b54 <HAL_DMA_Start_IT>
 8001d84:	2800      	cmp	r0, #0
 8001d86:	d14e      	bne.n	8001e26 <HAL_TIM_IC_Start_DMA+0xde>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8001d88:	2380      	movs	r3, #128	; 0x80
 8001d8a:	682c      	ldr	r4, [r5, #0]
 8001d8c:	015b      	lsls	r3, r3, #5
 8001d8e:	68e2      	ldr	r2, [r4, #12]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	60e3      	str	r3, [r4, #12]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001d94:	231f      	movs	r3, #31
 8001d96:	2101      	movs	r1, #1
 8001d98:	401e      	ands	r6, r3
 8001d9a:	000b      	movs	r3, r1
 8001d9c:	40b3      	lsls	r3, r6

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001d9e:	6a22      	ldr	r2, [r4, #32]
 8001da0:	439a      	bics	r2, r3
 8001da2:	6222      	str	r2, [r4, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001da4:	6a22      	ldr	r2, [r4, #32]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	6223      	str	r3, [r4, #32]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001daa:	2307      	movs	r3, #7
 8001dac:	68a2      	ldr	r2, [r4, #8]
 8001dae:	4013      	ands	r3, r2
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001db0:	2b06      	cmp	r3, #6
 8001db2:	d050      	beq.n	8001e56 <HAL_TIM_IC_Start_DMA+0x10e>
  return HAL_OK;
 8001db4:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8001db6:	6823      	ldr	r3, [r4, #0]
 8001db8:	430b      	orrs	r3, r1
 8001dba:	6023      	str	r3, [r4, #0]
}
 8001dbc:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 8001dbe:	2e00      	cmp	r6, #0
 8001dc0:	d1e8      	bne.n	8001d94 <HAL_TIM_IC_Start_DMA+0x4c>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8001dc2:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8001dc4:	4925      	ldr	r1, [pc, #148]	; (8001e5c <HAL_TIM_IC_Start_DMA+0x114>)
 8001dc6:	6281      	str	r1, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8001dc8:	4925      	ldr	r1, [pc, #148]	; (8001e60 <HAL_TIM_IC_Start_DMA+0x118>)
 8001dca:	62c1      	str	r1, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8001dcc:	4925      	ldr	r1, [pc, #148]	; (8001e64 <HAL_TIM_IC_Start_DMA+0x11c>)
 8001dce:	6301      	str	r1, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 8001dd0:	0021      	movs	r1, r4
 8001dd2:	3134      	adds	r1, #52	; 0x34
 8001dd4:	f7fe febe 	bl	8000b54 <HAL_DMA_Start_IT>
 8001dd8:	2800      	cmp	r0, #0
 8001dda:	d124      	bne.n	8001e26 <HAL_TIM_IC_Start_DMA+0xde>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8001ddc:	2380      	movs	r3, #128	; 0x80
 8001dde:	682c      	ldr	r4, [r5, #0]
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	68e2      	ldr	r2, [r4, #12]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	60e3      	str	r3, [r4, #12]
      break;
 8001de8:	e7d4      	b.n	8001d94 <HAL_TIM_IC_Start_DMA+0x4c>
    if ((pData == NULL) && (Length > 0U))
 8001dea:	2a00      	cmp	r2, #0
 8001dec:	d019      	beq.n	8001e22 <HAL_TIM_IC_Start_DMA+0xda>
      htim->State = HAL_TIM_STATE_BUSY;
 8001dee:	213d      	movs	r1, #61	; 0x3d
 8001df0:	2002      	movs	r0, #2
 8001df2:	682c      	ldr	r4, [r5, #0]
 8001df4:	5468      	strb	r0, [r5, r1]
  switch (Channel)
 8001df6:	2e04      	cmp	r6, #4
 8001df8:	d1b3      	bne.n	8001d62 <HAL_TIM_IC_Start_DMA+0x1a>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8001dfa:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8001dfc:	4917      	ldr	r1, [pc, #92]	; (8001e5c <HAL_TIM_IC_Start_DMA+0x114>)
 8001dfe:	6281      	str	r1, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8001e00:	4917      	ldr	r1, [pc, #92]	; (8001e60 <HAL_TIM_IC_Start_DMA+0x118>)
 8001e02:	62c1      	str	r1, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8001e04:	4917      	ldr	r1, [pc, #92]	; (8001e64 <HAL_TIM_IC_Start_DMA+0x11c>)
 8001e06:	6301      	str	r1, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 8001e08:	0021      	movs	r1, r4
 8001e0a:	3138      	adds	r1, #56	; 0x38
 8001e0c:	f7fe fea2 	bl	8000b54 <HAL_DMA_Start_IT>
 8001e10:	2800      	cmp	r0, #0
 8001e12:	d108      	bne.n	8001e26 <HAL_TIM_IC_Start_DMA+0xde>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8001e14:	2380      	movs	r3, #128	; 0x80
 8001e16:	682c      	ldr	r4, [r5, #0]
 8001e18:	00db      	lsls	r3, r3, #3
 8001e1a:	68e2      	ldr	r2, [r4, #12]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	60e3      	str	r3, [r4, #12]
      break;
 8001e20:	e7b8      	b.n	8001d94 <HAL_TIM_IC_Start_DMA+0x4c>
    if ((pData == NULL) && (Length > 0U))
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d0e3      	beq.n	8001dee <HAL_TIM_IC_Start_DMA+0xa6>
      return HAL_ERROR;
 8001e26:	2001      	movs	r0, #1
 8001e28:	e7c8      	b.n	8001dbc <HAL_TIM_IC_Start_DMA+0x74>
    return HAL_BUSY;
 8001e2a:	2002      	movs	r0, #2
 8001e2c:	e7c6      	b.n	8001dbc <HAL_TIM_IC_Start_DMA+0x74>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8001e2e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001e30:	490a      	ldr	r1, [pc, #40]	; (8001e5c <HAL_TIM_IC_Start_DMA+0x114>)
 8001e32:	6281      	str	r1, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8001e34:	490a      	ldr	r1, [pc, #40]	; (8001e60 <HAL_TIM_IC_Start_DMA+0x118>)
 8001e36:	62c1      	str	r1, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8001e38:	490a      	ldr	r1, [pc, #40]	; (8001e64 <HAL_TIM_IC_Start_DMA+0x11c>)
 8001e3a:	6301      	str	r1, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 8001e3c:	0021      	movs	r1, r4
 8001e3e:	313c      	adds	r1, #60	; 0x3c
 8001e40:	f7fe fe88 	bl	8000b54 <HAL_DMA_Start_IT>
 8001e44:	2800      	cmp	r0, #0
 8001e46:	d1ee      	bne.n	8001e26 <HAL_TIM_IC_Start_DMA+0xde>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8001e48:	2380      	movs	r3, #128	; 0x80
 8001e4a:	682c      	ldr	r4, [r5, #0]
 8001e4c:	011b      	lsls	r3, r3, #4
 8001e4e:	68e2      	ldr	r2, [r4, #12]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	60e3      	str	r3, [r4, #12]
      break;
 8001e54:	e79e      	b.n	8001d94 <HAL_TIM_IC_Start_DMA+0x4c>
  return HAL_OK;
 8001e56:	2000      	movs	r0, #0
 8001e58:	e7b0      	b.n	8001dbc <HAL_TIM_IC_Start_DMA+0x74>
 8001e5a:	46c0      	nop			; (mov r8, r8)
 8001e5c:	0800256d 	.word	0x0800256d
 8001e60:	080025b1 	.word	0x080025b1
 8001e64:	080027d9 	.word	0x080027d9

08001e68 <HAL_TIM_IC_Stop_DMA>:
{
 8001e68:	b570      	push	{r4, r5, r6, lr}
 8001e6a:	6803      	ldr	r3, [r0, #0]
 8001e6c:	0005      	movs	r5, r0
 8001e6e:	000c      	movs	r4, r1
  switch (Channel)
 8001e70:	2904      	cmp	r1, #4
 8001e72:	d03a      	beq.n	8001eea <HAL_TIM_IC_Stop_DMA+0x82>
 8001e74:	d92e      	bls.n	8001ed4 <HAL_TIM_IC_Stop_DMA+0x6c>
 8001e76:	2908      	cmp	r1, #8
 8001e78:	d023      	beq.n	8001ec2 <HAL_TIM_IC_Stop_DMA+0x5a>
 8001e7a:	290c      	cmp	r1, #12
 8001e7c:	d107      	bne.n	8001e8e <HAL_TIM_IC_Stop_DMA+0x26>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8001e7e:	68da      	ldr	r2, [r3, #12]
 8001e80:	491e      	ldr	r1, [pc, #120]	; (8001efc <HAL_TIM_IC_Stop_DMA+0x94>)
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8001e82:	6b00      	ldr	r0, [r0, #48]	; 0x30
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8001e84:	400a      	ands	r2, r1
 8001e86:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8001e88:	f7fe fea4 	bl	8000bd4 <HAL_DMA_Abort_IT>
 8001e8c:	682b      	ldr	r3, [r5, #0]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001e8e:	211f      	movs	r1, #31
 8001e90:	400c      	ands	r4, r1
 8001e92:	391e      	subs	r1, #30
 8001e94:	0008      	movs	r0, r1
 8001e96:	40a0      	lsls	r0, r4
  TIMx->CCER &= ~tmp;
 8001e98:	6a1a      	ldr	r2, [r3, #32]
 8001e9a:	4382      	bics	r2, r0
 8001e9c:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001e9e:	6a1a      	ldr	r2, [r3, #32]
 8001ea0:	621a      	str	r2, [r3, #32]
  __HAL_TIM_DISABLE(htim);
 8001ea2:	6a18      	ldr	r0, [r3, #32]
 8001ea4:	4a16      	ldr	r2, [pc, #88]	; (8001f00 <HAL_TIM_IC_Stop_DMA+0x98>)
 8001ea6:	4210      	tst	r0, r2
 8001ea8:	d106      	bne.n	8001eb8 <HAL_TIM_IC_Stop_DMA+0x50>
 8001eaa:	6a18      	ldr	r0, [r3, #32]
 8001eac:	4a15      	ldr	r2, [pc, #84]	; (8001f04 <HAL_TIM_IC_Stop_DMA+0x9c>)
 8001eae:	4210      	tst	r0, r2
 8001eb0:	d102      	bne.n	8001eb8 <HAL_TIM_IC_Stop_DMA+0x50>
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	438a      	bics	r2, r1
 8001eb6:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8001eb8:	233d      	movs	r3, #61	; 0x3d
 8001eba:	2201      	movs	r2, #1
}
 8001ebc:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001ebe:	54ea      	strb	r2, [r5, r3]
}
 8001ec0:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8001ec2:	68da      	ldr	r2, [r3, #12]
 8001ec4:	4910      	ldr	r1, [pc, #64]	; (8001f08 <HAL_TIM_IC_Stop_DMA+0xa0>)
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8001ec6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8001ec8:	400a      	ands	r2, r1
 8001eca:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8001ecc:	f7fe fe82 	bl	8000bd4 <HAL_DMA_Abort_IT>
 8001ed0:	682b      	ldr	r3, [r5, #0]
      break;
 8001ed2:	e7dc      	b.n	8001e8e <HAL_TIM_IC_Stop_DMA+0x26>
  switch (Channel)
 8001ed4:	2900      	cmp	r1, #0
 8001ed6:	d1da      	bne.n	8001e8e <HAL_TIM_IC_Stop_DMA+0x26>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8001ed8:	68da      	ldr	r2, [r3, #12]
 8001eda:	490c      	ldr	r1, [pc, #48]	; (8001f0c <HAL_TIM_IC_Stop_DMA+0xa4>)
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8001edc:	6a40      	ldr	r0, [r0, #36]	; 0x24
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8001ede:	400a      	ands	r2, r1
 8001ee0:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8001ee2:	f7fe fe77 	bl	8000bd4 <HAL_DMA_Abort_IT>
 8001ee6:	682b      	ldr	r3, [r5, #0]
      break;
 8001ee8:	e7d1      	b.n	8001e8e <HAL_TIM_IC_Stop_DMA+0x26>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8001eea:	68da      	ldr	r2, [r3, #12]
 8001eec:	4908      	ldr	r1, [pc, #32]	; (8001f10 <HAL_TIM_IC_Stop_DMA+0xa8>)
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8001eee:	6a80      	ldr	r0, [r0, #40]	; 0x28
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8001ef0:	400a      	ands	r2, r1
 8001ef2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8001ef4:	f7fe fe6e 	bl	8000bd4 <HAL_DMA_Abort_IT>
 8001ef8:	682b      	ldr	r3, [r5, #0]
      break;
 8001efa:	e7c8      	b.n	8001e8e <HAL_TIM_IC_Stop_DMA+0x26>
 8001efc:	ffffefff 	.word	0xffffefff
 8001f00:	00001111 	.word	0x00001111
 8001f04:	00000444 	.word	0x00000444
 8001f08:	fffff7ff 	.word	0xfffff7ff
 8001f0c:	fffffdff 	.word	0xfffffdff
 8001f10:	fffffbff 	.word	0xfffffbff

08001f14 <HAL_TIM_IC_ConfigChannel>:
{
 8001f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f16:	46ce      	mov	lr, r9
 8001f18:	4647      	mov	r7, r8
  __HAL_LOCK(htim);
 8001f1a:	233c      	movs	r3, #60	; 0x3c
{
 8001f1c:	b580      	push	{r7, lr}
  __HAL_LOCK(htim);
 8001f1e:	5cc4      	ldrb	r4, [r0, r3]
 8001f20:	2c01      	cmp	r4, #1
 8001f22:	d100      	bne.n	8001f26 <HAL_TIM_IC_ConfigChannel+0x12>
 8001f24:	e08e      	b.n	8002044 <HAL_TIM_IC_ConfigChannel+0x130>
 8001f26:	2701      	movs	r7, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001f28:	2402      	movs	r4, #2
  __HAL_LOCK(htim);
 8001f2a:	54c7      	strb	r7, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	54c4      	strb	r4, [r0, r3]
 8001f30:	684c      	ldr	r4, [r1, #4]
 8001f32:	680e      	ldr	r6, [r1, #0]
 8001f34:	46a1      	mov	r9, r4
 8001f36:	6803      	ldr	r3, [r0, #0]
 8001f38:	68cc      	ldr	r4, [r1, #12]
 8001f3a:	6889      	ldr	r1, [r1, #8]
  if (Channel == TIM_CHANNEL_1)
 8001f3c:	2a00      	cmp	r2, #0
 8001f3e:	d030      	beq.n	8001fa2 <HAL_TIM_IC_ConfigChannel+0x8e>
  else if (Channel == TIM_CHANNEL_2)
 8001f40:	2a04      	cmp	r2, #4
 8001f42:	d05f      	beq.n	8002004 <HAL_TIM_IC_ConfigChannel+0xf0>
  else if (Channel == TIM_CHANNEL_3)
 8001f44:	2a08      	cmp	r2, #8
 8001f46:	d100      	bne.n	8001f4a <HAL_TIM_IC_ConfigChannel+0x36>
 8001f48:	e07e      	b.n	8002048 <HAL_TIM_IC_ConfigChannel+0x134>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001f4a:	6a1a      	ldr	r2, [r3, #32]
 8001f4c:	4f4f      	ldr	r7, [pc, #316]	; (800208c <HAL_TIM_IC_ConfigChannel+0x178>)
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8001f4e:	4d50      	ldr	r5, [pc, #320]	; (8002090 <HAL_TIM_IC_ConfigChannel+0x17c>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001f50:	403a      	ands	r2, r7
 8001f52:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001f54:	69df      	ldr	r7, [r3, #28]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001f56:	0724      	lsls	r4, r4, #28
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8001f58:	402f      	ands	r7, r5
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8001f5a:	464d      	mov	r5, r9
 8001f5c:	022d      	lsls	r5, r5, #8
 8001f5e:	433d      	orrs	r5, r7
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8001f60:	4f4c      	ldr	r7, [pc, #304]	; (8002094 <HAL_TIM_IC_ConfigChannel+0x180>)
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001f62:	0c24      	lsrs	r4, r4, #16
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8001f64:	403d      	ands	r5, r7
  tmpccer = TIMx->CCER;
 8001f66:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001f68:	432c      	orrs	r4, r5
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8001f6a:	4d4b      	ldr	r5, [pc, #300]	; (8002098 <HAL_TIM_IC_ConfigChannel+0x184>)
  TIMx->CCMR2 = tmpccmr2;
 8001f6c:	61dc      	str	r4, [r3, #28]
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8001f6e:	4015      	ands	r5, r2
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001f70:	0332      	lsls	r2, r6, #12
 8001f72:	26a0      	movs	r6, #160	; 0xa0
 8001f74:	0236      	lsls	r6, r6, #8
 8001f76:	4032      	ands	r2, r6
 8001f78:	432a      	orrs	r2, r5
  TIMx->CCER = tmpccer ;
 8001f7a:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001f7c:	69da      	ldr	r2, [r3, #28]
 8001f7e:	4c47      	ldr	r4, [pc, #284]	; (800209c <HAL_TIM_IC_ConfigChannel+0x188>)
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001f80:	0209      	lsls	r1, r1, #8
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001f82:	4022      	ands	r2, r4
 8001f84:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001f86:	69da      	ldr	r2, [r3, #28]
 8001f88:	4311      	orrs	r1, r2
 8001f8a:	61d9      	str	r1, [r3, #28]
  htim->State = HAL_TIM_STATE_READY;
 8001f8c:	233d      	movs	r3, #61	; 0x3d
 8001f8e:	2201      	movs	r2, #1
 8001f90:	54c2      	strb	r2, [r0, r3]
  __HAL_UNLOCK(htim);
 8001f92:	2200      	movs	r2, #0
 8001f94:	3b01      	subs	r3, #1
 8001f96:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8001f98:	2000      	movs	r0, #0
}
 8001f9a:	bc0c      	pop	{r2, r3}
 8001f9c:	4690      	mov	r8, r2
 8001f9e:	4699      	mov	r9, r3
 8001fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fa2:	6a1a      	ldr	r2, [r3, #32]
 8001fa4:	43ba      	bics	r2, r7
 8001fa6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fa8:	699a      	ldr	r2, [r3, #24]
 8001faa:	4694      	mov	ip, r2
  tmpccer = TIMx->CCER;
 8001fac:	6a1a      	ldr	r2, [r3, #32]
 8001fae:	4690      	mov	r8, r2
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001fb0:	4a3b      	ldr	r2, [pc, #236]	; (80020a0 <HAL_TIM_IC_ConfigChannel+0x18c>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d00c      	beq.n	8001fd0 <HAL_TIM_IC_ConfigChannel+0xbc>
 8001fb6:	2280      	movs	r2, #128	; 0x80
 8001fb8:	05d2      	lsls	r2, r2, #23
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d008      	beq.n	8001fd0 <HAL_TIM_IC_ConfigChannel+0xbc>
 8001fbe:	4a39      	ldr	r2, [pc, #228]	; (80020a4 <HAL_TIM_IC_ConfigChannel+0x190>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d005      	beq.n	8001fd0 <HAL_TIM_IC_ConfigChannel+0xbc>
 8001fc4:	4a38      	ldr	r2, [pc, #224]	; (80020a8 <HAL_TIM_IC_ConfigChannel+0x194>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d002      	beq.n	8001fd0 <HAL_TIM_IC_ConfigChannel+0xbc>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8001fca:	4665      	mov	r5, ip
 8001fcc:	433d      	orrs	r5, r7
 8001fce:	e004      	b.n	8001fda <HAL_TIM_IC_ConfigChannel+0xc6>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8001fd0:	2203      	movs	r2, #3
 8001fd2:	4667      	mov	r7, ip
    tmpccmr1 |= TIM_ICSelection;
 8001fd4:	464d      	mov	r5, r9
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8001fd6:	4397      	bics	r7, r2
    tmpccmr1 |= TIM_ICSelection;
 8001fd8:	433d      	orrs	r5, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001fda:	22f0      	movs	r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001fdc:	0124      	lsls	r4, r4, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001fde:	4395      	bics	r5, r2
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001fe0:	320f      	adds	r2, #15
 8001fe2:	4014      	ands	r4, r2
 8001fe4:	4325      	orrs	r5, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001fe6:	4644      	mov	r4, r8
 8001fe8:	3af5      	subs	r2, #245	; 0xf5
 8001fea:	4394      	bics	r4, r2
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001fec:	4032      	ands	r2, r6
 8001fee:	4322      	orrs	r2, r4
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001ff0:	240c      	movs	r4, #12
  TIMx->CCMR1 = tmpccmr1;
 8001ff2:	619d      	str	r5, [r3, #24]
  TIMx->CCER = tmpccer;
 8001ff4:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001ff6:	699a      	ldr	r2, [r3, #24]
 8001ff8:	43a2      	bics	r2, r4
 8001ffa:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001ffc:	699a      	ldr	r2, [r3, #24]
 8001ffe:	4311      	orrs	r1, r2
 8002000:	6199      	str	r1, [r3, #24]
 8002002:	e7c3      	b.n	8001f8c <HAL_TIM_IC_ConfigChannel+0x78>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002004:	2710      	movs	r7, #16
 8002006:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002008:	4d21      	ldr	r5, [pc, #132]	; (8002090 <HAL_TIM_IC_ConfigChannel+0x17c>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800200a:	43ba      	bics	r2, r7
 800200c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800200e:	699f      	ldr	r7, [r3, #24]
  tmpccer = TIMx->CCER;
 8002010:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002012:	402f      	ands	r7, r5
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002014:	464d      	mov	r5, r9
 8002016:	022d      	lsls	r5, r5, #8
 8002018:	433d      	orrs	r5, r7
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800201a:	4f1e      	ldr	r7, [pc, #120]	; (8002094 <HAL_TIM_IC_ConfigChannel+0x180>)
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800201c:	0724      	lsls	r4, r4, #28
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800201e:	403d      	ands	r5, r7
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002020:	27a0      	movs	r7, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002022:	0136      	lsls	r6, r6, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002024:	43ba      	bics	r2, r7
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002026:	0c24      	lsrs	r4, r4, #16
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002028:	4037      	ands	r7, r6
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800202a:	432c      	orrs	r4, r5
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800202c:	4317      	orrs	r7, r2
  TIMx->CCMR1 = tmpccmr1 ;
 800202e:	619c      	str	r4, [r3, #24]
  TIMx->CCER = tmpccer;
 8002030:	621f      	str	r7, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002032:	699a      	ldr	r2, [r3, #24]
 8002034:	4c19      	ldr	r4, [pc, #100]	; (800209c <HAL_TIM_IC_ConfigChannel+0x188>)
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002036:	0209      	lsls	r1, r1, #8
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002038:	4022      	ands	r2, r4
 800203a:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800203c:	699a      	ldr	r2, [r3, #24]
 800203e:	4311      	orrs	r1, r2
 8002040:	6199      	str	r1, [r3, #24]
 8002042:	e7a3      	b.n	8001f8c <HAL_TIM_IC_ConfigChannel+0x78>
  __HAL_LOCK(htim);
 8002044:	2002      	movs	r0, #2
 8002046:	e7a8      	b.n	8001f9a <HAL_TIM_IC_ConfigChannel+0x86>
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002048:	2503      	movs	r5, #3
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800204a:	6a1a      	ldr	r2, [r3, #32]
 800204c:	4f17      	ldr	r7, [pc, #92]	; (80020ac <HAL_TIM_IC_ConfigChannel+0x198>)
 800204e:	403a      	ands	r2, r7
 8002050:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002052:	69df      	ldr	r7, [r3, #28]
  tmpccer = TIMx->CCER;
 8002054:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002056:	43af      	bics	r7, r5
  tmpccmr2 |= TIM_ICSelection;
 8002058:	464d      	mov	r5, r9
 800205a:	433d      	orrs	r5, r7
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800205c:	27f0      	movs	r7, #240	; 0xf0
 800205e:	43bd      	bics	r5, r7
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002060:	0127      	lsls	r7, r4, #4
 8002062:	24ff      	movs	r4, #255	; 0xff
 8002064:	403c      	ands	r4, r7
 8002066:	4325      	orrs	r5, r4
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002068:	4c11      	ldr	r4, [pc, #68]	; (80020b0 <HAL_TIM_IC_ConfigChannel+0x19c>)
  TIMx->CCMR2 = tmpccmr2;
 800206a:	61dd      	str	r5, [r3, #28]
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800206c:	4014      	ands	r4, r2
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800206e:	0232      	lsls	r2, r6, #8
 8002070:	26a0      	movs	r6, #160	; 0xa0
 8002072:	0136      	lsls	r6, r6, #4
 8002074:	4032      	ands	r2, r6
 8002076:	4322      	orrs	r2, r4
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002078:	240c      	movs	r4, #12
  TIMx->CCER = tmpccer;
 800207a:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800207c:	69da      	ldr	r2, [r3, #28]
 800207e:	43a2      	bics	r2, r4
 8002080:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002082:	69da      	ldr	r2, [r3, #28]
 8002084:	4311      	orrs	r1, r2
 8002086:	61d9      	str	r1, [r3, #28]
 8002088:	e780      	b.n	8001f8c <HAL_TIM_IC_ConfigChannel+0x78>
 800208a:	46c0      	nop			; (mov r8, r8)
 800208c:	ffffefff 	.word	0xffffefff
 8002090:	fffffcff 	.word	0xfffffcff
 8002094:	ffff0fff 	.word	0xffff0fff
 8002098:	ffff5fff 	.word	0xffff5fff
 800209c:	fffff3ff 	.word	0xfffff3ff
 80020a0:	40012c00 	.word	0x40012c00
 80020a4:	40000400 	.word	0x40000400
 80020a8:	40014000 	.word	0x40014000
 80020ac:	fffffeff 	.word	0xfffffeff
 80020b0:	fffff5ff 	.word	0xfffff5ff

080020b4 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 80020b4:	233c      	movs	r3, #60	; 0x3c
{
 80020b6:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80020b8:	5cc4      	ldrb	r4, [r0, r3]
 80020ba:	2c01      	cmp	r4, #1
 80020bc:	d100      	bne.n	80020c0 <HAL_TIM_PWM_ConfigChannel+0xc>
 80020be:	e087      	b.n	80021d0 <HAL_TIM_PWM_ConfigChannel+0x11c>
 80020c0:	2501      	movs	r5, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80020c2:	2402      	movs	r4, #2
  __HAL_LOCK(htim);
 80020c4:	54c5      	strb	r5, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 80020c6:	3301      	adds	r3, #1
 80020c8:	54c4      	strb	r4, [r0, r3]
  switch (Channel)
 80020ca:	2a04      	cmp	r2, #4
 80020cc:	d100      	bne.n	80020d0 <HAL_TIM_PWM_ConfigChannel+0x1c>
 80020ce:	e0bf      	b.n	8002250 <HAL_TIM_PWM_ConfigChannel+0x19c>
 80020d0:	d93d      	bls.n	800214e <HAL_TIM_PWM_ConfigChannel+0x9a>
 80020d2:	2a08      	cmp	r2, #8
 80020d4:	d100      	bne.n	80020d8 <HAL_TIM_PWM_ConfigChannel+0x24>
 80020d6:	e07d      	b.n	80021d4 <HAL_TIM_PWM_ConfigChannel+0x120>
 80020d8:	2a0c      	cmp	r2, #12
 80020da:	d130      	bne.n	800213e <HAL_TIM_PWM_ConfigChannel+0x8a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80020dc:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80020de:	4c7d      	ldr	r4, [pc, #500]	; (80022d4 <HAL_TIM_PWM_ConfigChannel+0x220>)
 80020e0:	6a1a      	ldr	r2, [r3, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80020e2:	4d7d      	ldr	r5, [pc, #500]	; (80022d8 <HAL_TIM_PWM_ConfigChannel+0x224>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80020e4:	4022      	ands	r2, r4
 80020e6:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80020e8:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80020ea:	685f      	ldr	r7, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80020ec:	69dc      	ldr	r4, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80020ee:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020f0:	680d      	ldr	r5, [r1, #0]
 80020f2:	022d      	lsls	r5, r5, #8
 80020f4:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC4P;
 80020f6:	4c79      	ldr	r4, [pc, #484]	; (80022dc <HAL_TIM_PWM_ConfigChannel+0x228>)
 80020f8:	4014      	ands	r4, r2
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80020fa:	688a      	ldr	r2, [r1, #8]
 80020fc:	0312      	lsls	r2, r2, #12
 80020fe:	4322      	orrs	r2, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002100:	4c77      	ldr	r4, [pc, #476]	; (80022e0 <HAL_TIM_PWM_ConfigChannel+0x22c>)
 8002102:	42a3      	cmp	r3, r4
 8002104:	d051      	beq.n	80021aa <HAL_TIM_PWM_ConfigChannel+0xf6>
 8002106:	4c77      	ldr	r4, [pc, #476]	; (80022e4 <HAL_TIM_PWM_ConfigChannel+0x230>)
 8002108:	42a3      	cmp	r3, r4
 800210a:	d04e      	beq.n	80021aa <HAL_TIM_PWM_ConfigChannel+0xf6>
 800210c:	4c76      	ldr	r4, [pc, #472]	; (80022e8 <HAL_TIM_PWM_ConfigChannel+0x234>)
 800210e:	42a3      	cmp	r3, r4
 8002110:	d04b      	beq.n	80021aa <HAL_TIM_PWM_ConfigChannel+0xf6>
 8002112:	4c76      	ldr	r4, [pc, #472]	; (80022ec <HAL_TIM_PWM_ConfigChannel+0x238>)
 8002114:	42a3      	cmp	r3, r4
 8002116:	d048      	beq.n	80021aa <HAL_TIM_PWM_ConfigChannel+0xf6>
  TIMx->CCR4 = OC_Config->Pulse;
 8002118:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800211a:	605f      	str	r7, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 800211c:	61dd      	str	r5, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800211e:	641c      	str	r4, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8002120:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002122:	2280      	movs	r2, #128	; 0x80
 8002124:	69dc      	ldr	r4, [r3, #28]
 8002126:	0112      	lsls	r2, r2, #4
 8002128:	4322      	orrs	r2, r4
 800212a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800212c:	69da      	ldr	r2, [r3, #28]
 800212e:	4c70      	ldr	r4, [pc, #448]	; (80022f0 <HAL_TIM_PWM_ConfigChannel+0x23c>)
 8002130:	4022      	ands	r2, r4
 8002132:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002134:	690a      	ldr	r2, [r1, #16]
 8002136:	69dc      	ldr	r4, [r3, #28]
 8002138:	0212      	lsls	r2, r2, #8
 800213a:	4322      	orrs	r2, r4
 800213c:	61da      	str	r2, [r3, #28]
  htim->State = HAL_TIM_STATE_READY;
 800213e:	233d      	movs	r3, #61	; 0x3d
 8002140:	2201      	movs	r2, #1
 8002142:	54c2      	strb	r2, [r0, r3]
  __HAL_UNLOCK(htim);
 8002144:	2200      	movs	r2, #0
 8002146:	3b01      	subs	r3, #1
 8002148:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 800214a:	2000      	movs	r0, #0
}
 800214c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (Channel)
 800214e:	2a00      	cmp	r2, #0
 8002150:	d1f5      	bne.n	800213e <HAL_TIM_PWM_ConfigChannel+0x8a>
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002152:	2773      	movs	r7, #115	; 0x73
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002154:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002156:	6a1a      	ldr	r2, [r3, #32]
 8002158:	43aa      	bics	r2, r5
 800215a:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800215c:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800215e:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8002160:	699d      	ldr	r5, [r3, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8002162:	43a2      	bics	r2, r4
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002164:	43bd      	bics	r5, r7
  tmpccmrx |= OC_Config->OCMode;
 8002166:	680f      	ldr	r7, [r1, #0]
  tmpccer |= OC_Config->OCPolarity;
 8002168:	688c      	ldr	r4, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 800216a:	433d      	orrs	r5, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800216c:	4f5c      	ldr	r7, [pc, #368]	; (80022e0 <HAL_TIM_PWM_ConfigChannel+0x22c>)
  tmpccer |= OC_Config->OCPolarity;
 800216e:	4322      	orrs	r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002170:	42bb      	cmp	r3, r7
 8002172:	d020      	beq.n	80021b6 <HAL_TIM_PWM_ConfigChannel+0x102>
 8002174:	4c5b      	ldr	r4, [pc, #364]	; (80022e4 <HAL_TIM_PWM_ConfigChannel+0x230>)
 8002176:	42a3      	cmp	r3, r4
 8002178:	d01d      	beq.n	80021b6 <HAL_TIM_PWM_ConfigChannel+0x102>
 800217a:	4c5b      	ldr	r4, [pc, #364]	; (80022e8 <HAL_TIM_PWM_ConfigChannel+0x234>)
 800217c:	42a3      	cmp	r3, r4
 800217e:	d01a      	beq.n	80021b6 <HAL_TIM_PWM_ConfigChannel+0x102>
 8002180:	4c5a      	ldr	r4, [pc, #360]	; (80022ec <HAL_TIM_PWM_ConfigChannel+0x238>)
 8002182:	42a3      	cmp	r3, r4
 8002184:	d017      	beq.n	80021b6 <HAL_TIM_PWM_ConfigChannel+0x102>
  TIMx->CCR1 = OC_Config->Pulse;
 8002186:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002188:	605e      	str	r6, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 800218a:	619d      	str	r5, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800218c:	635c      	str	r4, [r3, #52]	; 0x34
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800218e:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 8002190:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002192:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002194:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002196:	4322      	orrs	r2, r4
 8002198:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800219a:	699a      	ldr	r2, [r3, #24]
 800219c:	3c04      	subs	r4, #4
 800219e:	43a2      	bics	r2, r4
 80021a0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80021a2:	699a      	ldr	r2, [r3, #24]
 80021a4:	430a      	orrs	r2, r1
 80021a6:	619a      	str	r2, [r3, #24]
      break;
 80021a8:	e7c9      	b.n	800213e <HAL_TIM_PWM_ConfigChannel+0x8a>
    tmpcr2 &= ~TIM_CR2_OIS4;
 80021aa:	4e52      	ldr	r6, [pc, #328]	; (80022f4 <HAL_TIM_PWM_ConfigChannel+0x240>)
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80021ac:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80021ae:	403e      	ands	r6, r7
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80021b0:	01a7      	lsls	r7, r4, #6
 80021b2:	4337      	orrs	r7, r6
 80021b4:	e7b0      	b.n	8002118 <HAL_TIM_PWM_ConfigChannel+0x64>
    tmpccer &= ~TIM_CCER_CC1NP;
 80021b6:	2408      	movs	r4, #8
 80021b8:	43a2      	bics	r2, r4
    tmpccer |= OC_Config->OCNPolarity;
 80021ba:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 80021bc:	698f      	ldr	r7, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 80021be:	4322      	orrs	r2, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 80021c0:	2404      	movs	r4, #4
 80021c2:	43a2      	bics	r2, r4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80021c4:	4c4c      	ldr	r4, [pc, #304]	; (80022f8 <HAL_TIM_PWM_ConfigChannel+0x244>)
 80021c6:	4034      	ands	r4, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 80021c8:	694e      	ldr	r6, [r1, #20]
 80021ca:	433e      	orrs	r6, r7
 80021cc:	4326      	orrs	r6, r4
 80021ce:	e7da      	b.n	8002186 <HAL_TIM_PWM_ConfigChannel+0xd2>
  __HAL_LOCK(htim);
 80021d0:	2002      	movs	r0, #2
 80021d2:	e7bb      	b.n	800214c <HAL_TIM_PWM_ConfigChannel+0x98>
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80021d4:	2673      	movs	r6, #115	; 0x73
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80021d6:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80021d8:	4c48      	ldr	r4, [pc, #288]	; (80022fc <HAL_TIM_PWM_ConfigChannel+0x248>)
 80021da:	6a1a      	ldr	r2, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 80021dc:	680f      	ldr	r7, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80021de:	4022      	ands	r2, r4
 80021e0:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80021e2:	6a1c      	ldr	r4, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80021e4:	685a      	ldr	r2, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80021e6:	69dd      	ldr	r5, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80021e8:	43b5      	bics	r5, r6
  tmpccmrx |= OC_Config->OCMode;
 80021ea:	432f      	orrs	r7, r5
  tmpccer &= ~TIM_CCER_CC3P;
 80021ec:	4d44      	ldr	r5, [pc, #272]	; (8002300 <HAL_TIM_PWM_ConfigChannel+0x24c>)
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80021ee:	4e3c      	ldr	r6, [pc, #240]	; (80022e0 <HAL_TIM_PWM_ConfigChannel+0x22c>)
  tmpccer &= ~TIM_CCER_CC3P;
 80021f0:	402c      	ands	r4, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80021f2:	688d      	ldr	r5, [r1, #8]
 80021f4:	022d      	lsls	r5, r5, #8
 80021f6:	432c      	orrs	r4, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80021f8:	42b3      	cmp	r3, r6
 80021fa:	d01a      	beq.n	8002232 <HAL_TIM_PWM_ConfigChannel+0x17e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021fc:	4e39      	ldr	r6, [pc, #228]	; (80022e4 <HAL_TIM_PWM_ConfigChannel+0x230>)
 80021fe:	42b3      	cmp	r3, r6
 8002200:	d01e      	beq.n	8002240 <HAL_TIM_PWM_ConfigChannel+0x18c>
 8002202:	4d39      	ldr	r5, [pc, #228]	; (80022e8 <HAL_TIM_PWM_ConfigChannel+0x234>)
 8002204:	42ab      	cmp	r3, r5
 8002206:	d01b      	beq.n	8002240 <HAL_TIM_PWM_ConfigChannel+0x18c>
 8002208:	4d38      	ldr	r5, [pc, #224]	; (80022ec <HAL_TIM_PWM_ConfigChannel+0x238>)
 800220a:	42ab      	cmp	r3, r5
 800220c:	d018      	beq.n	8002240 <HAL_TIM_PWM_ConfigChannel+0x18c>
  TIMx->CR2 = tmpcr2;
 800220e:	605a      	str	r2, [r3, #4]
  TIMx->CCR3 = OC_Config->Pulse;
 8002210:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002212:	61df      	str	r7, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8002214:	63da      	str	r2, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8002216:	621c      	str	r4, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002218:	2408      	movs	r4, #8
 800221a:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800221c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800221e:	4322      	orrs	r2, r4
 8002220:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002222:	69da      	ldr	r2, [r3, #28]
 8002224:	3c04      	subs	r4, #4
 8002226:	43a2      	bics	r2, r4
 8002228:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800222a:	69da      	ldr	r2, [r3, #28]
 800222c:	430a      	orrs	r2, r1
 800222e:	61da      	str	r2, [r3, #28]
      break;
 8002230:	e785      	b.n	800213e <HAL_TIM_PWM_ConfigChannel+0x8a>
    tmpccer &= ~TIM_CCER_CC3NP;
 8002232:	4d34      	ldr	r5, [pc, #208]	; (8002304 <HAL_TIM_PWM_ConfigChannel+0x250>)
 8002234:	4025      	ands	r5, r4
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002236:	68cc      	ldr	r4, [r1, #12]
 8002238:	0224      	lsls	r4, r4, #8
 800223a:	432c      	orrs	r4, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 800223c:	4d2c      	ldr	r5, [pc, #176]	; (80022f0 <HAL_TIM_PWM_ConfigChannel+0x23c>)
 800223e:	402c      	ands	r4, r5
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002240:	4e31      	ldr	r6, [pc, #196]	; (8002308 <HAL_TIM_PWM_ConfigChannel+0x254>)
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002242:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002244:	4016      	ands	r6, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002246:	698a      	ldr	r2, [r1, #24]
 8002248:	432a      	orrs	r2, r5
 800224a:	0112      	lsls	r2, r2, #4
 800224c:	4332      	orrs	r2, r6
 800224e:	e7de      	b.n	800220e <HAL_TIM_PWM_ConfigChannel+0x15a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002250:	2410      	movs	r4, #16
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002252:	6803      	ldr	r3, [r0, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002254:	4e20      	ldr	r6, [pc, #128]	; (80022d8 <HAL_TIM_PWM_ConfigChannel+0x224>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002256:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002258:	4f21      	ldr	r7, [pc, #132]	; (80022e0 <HAL_TIM_PWM_ConfigChannel+0x22c>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800225a:	43a2      	bics	r2, r4
 800225c:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800225e:	6a1c      	ldr	r4, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8002260:	685a      	ldr	r2, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8002262:	699d      	ldr	r5, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002264:	4035      	ands	r5, r6
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002266:	680e      	ldr	r6, [r1, #0]
 8002268:	0236      	lsls	r6, r6, #8
 800226a:	432e      	orrs	r6, r5
  tmpccer &= ~TIM_CCER_CC2P;
 800226c:	2520      	movs	r5, #32
 800226e:	43ac      	bics	r4, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002270:	688d      	ldr	r5, [r1, #8]
 8002272:	012d      	lsls	r5, r5, #4
 8002274:	432c      	orrs	r4, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002276:	42bb      	cmp	r3, r7
 8002278:	d01c      	beq.n	80022b4 <HAL_TIM_PWM_ConfigChannel+0x200>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800227a:	4f1a      	ldr	r7, [pc, #104]	; (80022e4 <HAL_TIM_PWM_ConfigChannel+0x230>)
 800227c:	42bb      	cmp	r3, r7
 800227e:	d021      	beq.n	80022c4 <HAL_TIM_PWM_ConfigChannel+0x210>
 8002280:	4f19      	ldr	r7, [pc, #100]	; (80022e8 <HAL_TIM_PWM_ConfigChannel+0x234>)
 8002282:	42bb      	cmp	r3, r7
 8002284:	d01e      	beq.n	80022c4 <HAL_TIM_PWM_ConfigChannel+0x210>
 8002286:	4d19      	ldr	r5, [pc, #100]	; (80022ec <HAL_TIM_PWM_ConfigChannel+0x238>)
 8002288:	42ab      	cmp	r3, r5
 800228a:	d01b      	beq.n	80022c4 <HAL_TIM_PWM_ConfigChannel+0x210>
  TIMx->CR2 = tmpcr2;
 800228c:	605a      	str	r2, [r3, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 800228e:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002290:	619e      	str	r6, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002292:	639a      	str	r2, [r3, #56]	; 0x38
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002294:	2280      	movs	r2, #128	; 0x80
  TIMx->CCER = tmpccer;
 8002296:	621c      	str	r4, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002298:	699c      	ldr	r4, [r3, #24]
 800229a:	0112      	lsls	r2, r2, #4
 800229c:	4322      	orrs	r2, r4
 800229e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80022a0:	699a      	ldr	r2, [r3, #24]
 80022a2:	4c13      	ldr	r4, [pc, #76]	; (80022f0 <HAL_TIM_PWM_ConfigChannel+0x23c>)
 80022a4:	4022      	ands	r2, r4
 80022a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80022a8:	690a      	ldr	r2, [r1, #16]
 80022aa:	699c      	ldr	r4, [r3, #24]
 80022ac:	0212      	lsls	r2, r2, #8
 80022ae:	4322      	orrs	r2, r4
 80022b0:	619a      	str	r2, [r3, #24]
      break;
 80022b2:	e744      	b.n	800213e <HAL_TIM_PWM_ConfigChannel+0x8a>
    tmpccer &= ~TIM_CCER_CC2NP;
 80022b4:	2580      	movs	r5, #128	; 0x80
 80022b6:	43ac      	bics	r4, r5
 80022b8:	0025      	movs	r5, r4
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80022ba:	68cc      	ldr	r4, [r1, #12]
 80022bc:	0124      	lsls	r4, r4, #4
 80022be:	432c      	orrs	r4, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 80022c0:	2540      	movs	r5, #64	; 0x40
 80022c2:	43ac      	bics	r4, r5
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80022c4:	4f11      	ldr	r7, [pc, #68]	; (800230c <HAL_TIM_PWM_ConfigChannel+0x258>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80022c6:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80022c8:	4017      	ands	r7, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80022ca:	698a      	ldr	r2, [r1, #24]
 80022cc:	432a      	orrs	r2, r5
 80022ce:	0092      	lsls	r2, r2, #2
 80022d0:	433a      	orrs	r2, r7
 80022d2:	e7db      	b.n	800228c <HAL_TIM_PWM_ConfigChannel+0x1d8>
 80022d4:	ffffefff 	.word	0xffffefff
 80022d8:	ffff8cff 	.word	0xffff8cff
 80022dc:	ffffdfff 	.word	0xffffdfff
 80022e0:	40012c00 	.word	0x40012c00
 80022e4:	40014000 	.word	0x40014000
 80022e8:	40014400 	.word	0x40014400
 80022ec:	40014800 	.word	0x40014800
 80022f0:	fffffbff 	.word	0xfffffbff
 80022f4:	ffffbfff 	.word	0xffffbfff
 80022f8:	fffffcff 	.word	0xfffffcff
 80022fc:	fffffeff 	.word	0xfffffeff
 8002300:	fffffdff 	.word	0xfffffdff
 8002304:	fffff7ff 	.word	0xfffff7ff
 8002308:	ffffcfff 	.word	0xffffcfff
 800230c:	fffff3ff 	.word	0xfffff3ff

08002310 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002310:	233c      	movs	r3, #60	; 0x3c
{
 8002312:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8002314:	5cc2      	ldrb	r2, [r0, r3]
 8002316:	2a01      	cmp	r2, #1
 8002318:	d058      	beq.n	80023cc <HAL_TIM_ConfigClockSource+0xbc>
 800231a:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800231c:	2202      	movs	r2, #2
  __HAL_LOCK(htim);
 800231e:	54c4      	strb	r4, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8002320:	3301      	adds	r3, #1
 8002322:	54c2      	strb	r2, [r0, r3]
  tmpsmcr = htim->Instance->SMCR;
 8002324:	6803      	ldr	r3, [r0, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002326:	4d4b      	ldr	r5, [pc, #300]	; (8002454 <HAL_TIM_ConfigClockSource+0x144>)
  tmpsmcr = htim->Instance->SMCR;
 8002328:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800232a:	402a      	ands	r2, r5
  htim->Instance->SMCR = tmpsmcr;
 800232c:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 800232e:	680a      	ldr	r2, [r1, #0]
 8002330:	2a40      	cmp	r2, #64	; 0x40
 8002332:	d100      	bne.n	8002336 <HAL_TIM_ConfigClockSource+0x26>
 8002334:	e074      	b.n	8002420 <HAL_TIM_ConfigClockSource+0x110>
 8002336:	d94b      	bls.n	80023d0 <HAL_TIM_ConfigClockSource+0xc0>
 8002338:	2a60      	cmp	r2, #96	; 0x60
 800233a:	d02e      	beq.n	800239a <HAL_TIM_ConfigClockSource+0x8a>
 800233c:	d957      	bls.n	80023ee <HAL_TIM_ConfigClockSource+0xde>
 800233e:	2a70      	cmp	r2, #112	; 0x70
 8002340:	d01b      	beq.n	800237a <HAL_TIM_ConfigClockSource+0x6a>
 8002342:	2480      	movs	r4, #128	; 0x80
 8002344:	01a4      	lsls	r4, r4, #6
 8002346:	42a2      	cmp	r2, r4
 8002348:	d10f      	bne.n	800236a <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr = TIMx->SMCR;
 800234a:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800234c:	4c42      	ldr	r4, [pc, #264]	; (8002458 <HAL_TIM_ConfigClockSource+0x148>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800234e:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002350:	4014      	ands	r4, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002352:	688a      	ldr	r2, [r1, #8]
 8002354:	68c9      	ldr	r1, [r1, #12]
 8002356:	432a      	orrs	r2, r5
 8002358:	0209      	lsls	r1, r1, #8
 800235a:	430a      	orrs	r2, r1
 800235c:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 800235e:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002360:	2280      	movs	r2, #128	; 0x80
 8002362:	6899      	ldr	r1, [r3, #8]
 8002364:	01d2      	lsls	r2, r2, #7
 8002366:	430a      	orrs	r2, r1
 8002368:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 800236a:	233d      	movs	r3, #61	; 0x3d
 800236c:	2201      	movs	r2, #1
 800236e:	54c2      	strb	r2, [r0, r3]
  __HAL_UNLOCK(htim);
 8002370:	2200      	movs	r2, #0
 8002372:	3b01      	subs	r3, #1
 8002374:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8002376:	2000      	movs	r0, #0
}
 8002378:	bd70      	pop	{r4, r5, r6, pc}
  tmpsmcr = TIMx->SMCR;
 800237a:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800237c:	4c36      	ldr	r4, [pc, #216]	; (8002458 <HAL_TIM_ConfigClockSource+0x148>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800237e:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002380:	4014      	ands	r4, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002382:	688a      	ldr	r2, [r1, #8]
 8002384:	68c9      	ldr	r1, [r1, #12]
 8002386:	432a      	orrs	r2, r5
 8002388:	0209      	lsls	r1, r1, #8
 800238a:	430a      	orrs	r2, r1
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800238c:	2177      	movs	r1, #119	; 0x77
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800238e:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8002390:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002392:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002394:	430a      	orrs	r2, r1
      htim->Instance->SMCR = tmpsmcr;
 8002396:	609a      	str	r2, [r3, #8]
      break;
 8002398:	e7e7      	b.n	800236a <HAL_TIM_ConfigClockSource+0x5a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800239a:	2510      	movs	r5, #16
 800239c:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800239e:	684a      	ldr	r2, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023a0:	43ac      	bics	r4, r5
      TIM_TI2_ConfigInputStage(htim->Instance,
 80023a2:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023a4:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023a6:	699d      	ldr	r5, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023a8:	4e2c      	ldr	r6, [pc, #176]	; (800245c <HAL_TIM_ConfigClockSource+0x14c>)
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80023aa:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023ac:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80023ae:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80023b0:	25a0      	movs	r5, #160	; 0xa0
  tmpccer = TIMx->CCER;
 80023b2:	6a1c      	ldr	r4, [r3, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 80023b4:	6199      	str	r1, [r3, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 80023b6:	2170      	movs	r1, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80023b8:	43ac      	bics	r4, r5
  tmpccer |= (TIM_ICPolarity << 4U);
 80023ba:	0112      	lsls	r2, r2, #4
 80023bc:	4322      	orrs	r2, r4
  TIMx->CCER = tmpccer;
 80023be:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 80023c0:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80023c2:	438a      	bics	r2, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023c4:	3909      	subs	r1, #9
 80023c6:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 80023c8:	609a      	str	r2, [r3, #8]
 80023ca:	e7ce      	b.n	800236a <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 80023cc:	2002      	movs	r0, #2
 80023ce:	e7d3      	b.n	8002378 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 80023d0:	2a10      	cmp	r2, #16
 80023d2:	d004      	beq.n	80023de <HAL_TIM_ConfigClockSource+0xce>
 80023d4:	d93b      	bls.n	800244e <HAL_TIM_ConfigClockSource+0x13e>
 80023d6:	2a20      	cmp	r2, #32
 80023d8:	d001      	beq.n	80023de <HAL_TIM_ConfigClockSource+0xce>
 80023da:	2a30      	cmp	r2, #48	; 0x30
 80023dc:	d1c5      	bne.n	800236a <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr &= ~TIM_SMCR_TS;
 80023de:	2470      	movs	r4, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 80023e0:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80023e2:	43a1      	bics	r1, r4
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023e4:	3c69      	subs	r4, #105	; 0x69
 80023e6:	4322      	orrs	r2, r4
 80023e8:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 80023ea:	609a      	str	r2, [r3, #8]
 80023ec:	e7bd      	b.n	800236a <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80023ee:	2a50      	cmp	r2, #80	; 0x50
 80023f0:	d1bb      	bne.n	800236a <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023f2:	684d      	ldr	r5, [r1, #4]
 80023f4:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 80023f6:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023f8:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023fa:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023fc:	43a6      	bics	r6, r4
 80023fe:	621e      	str	r6, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002400:	26f0      	movs	r6, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8002402:	699c      	ldr	r4, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002404:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002406:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002408:	240a      	movs	r4, #10
 800240a:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 800240c:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 800240e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002410:	6219      	str	r1, [r3, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002412:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8002414:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002416:	438a      	bics	r2, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002418:	3919      	subs	r1, #25
 800241a:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 800241c:	609a      	str	r2, [r3, #8]
 800241e:	e7a4      	b.n	800236a <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002420:	684d      	ldr	r5, [r1, #4]
 8002422:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 8002424:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002426:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002428:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800242a:	43a6      	bics	r6, r4
 800242c:	621e      	str	r6, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800242e:	26f0      	movs	r6, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8002430:	699c      	ldr	r4, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002432:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002434:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002436:	240a      	movs	r4, #10
 8002438:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 800243a:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 800243c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800243e:	6219      	str	r1, [r3, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002440:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8002442:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002444:	438a      	bics	r2, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002446:	3929      	subs	r1, #41	; 0x29
 8002448:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 800244a:	609a      	str	r2, [r3, #8]
 800244c:	e78d      	b.n	800236a <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 800244e:	2a00      	cmp	r2, #0
 8002450:	d0c5      	beq.n	80023de <HAL_TIM_ConfigClockSource+0xce>
 8002452:	e78a      	b.n	800236a <HAL_TIM_ConfigClockSource+0x5a>
 8002454:	ffff0088 	.word	0xffff0088
 8002458:	ffff00ff 	.word	0xffff00ff
 800245c:	ffff0fff 	.word	0xffff0fff

08002460 <HAL_TIM_SlaveConfigSynchro>:
{
 8002460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002462:	46c6      	mov	lr, r8
  __HAL_LOCK(htim);
 8002464:	253c      	movs	r5, #60	; 0x3c
{
 8002466:	b500      	push	{lr}
  __HAL_LOCK(htim);
 8002468:	5d43      	ldrb	r3, [r0, r5]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d047      	beq.n	80024fe <HAL_TIM_SlaveConfigSynchro+0x9e>
  htim->State = HAL_TIM_STATE_BUSY;
 800246e:	233d      	movs	r3, #61	; 0x3d
 8002470:	4698      	mov	r8, r3
  __HAL_LOCK(htim);
 8002472:	2601      	movs	r6, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002474:	4642      	mov	r2, r8
  tmpsmcr &= ~TIM_SMCR_TS;
 8002476:	2470      	movs	r4, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002478:	2707      	movs	r7, #7
  htim->State = HAL_TIM_STATE_BUSY;
 800247a:	3b3b      	subs	r3, #59	; 0x3b
  __HAL_LOCK(htim);
 800247c:	5546      	strb	r6, [r0, r5]
  htim->State = HAL_TIM_STATE_BUSY;
 800247e:	5483      	strb	r3, [r0, r2]
  tmpsmcr = htim->Instance->SMCR;
 8002480:	6802      	ldr	r2, [r0, #0]
 8002482:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002484:	43a3      	bics	r3, r4
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002486:	684c      	ldr	r4, [r1, #4]
 8002488:	4323      	orrs	r3, r4
  tmpsmcr &= ~TIM_SMCR_SMS;
 800248a:	43bb      	bics	r3, r7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800248c:	680f      	ldr	r7, [r1, #0]
 800248e:	433b      	orrs	r3, r7
  htim->Instance->SMCR = tmpsmcr;
 8002490:	6093      	str	r3, [r2, #8]
  switch (sSlaveConfig->InputTrigger)
 8002492:	2c50      	cmp	r4, #80	; 0x50
 8002494:	d04e      	beq.n	8002534 <HAL_TIM_SlaveConfigSynchro+0xd4>
 8002496:	d920      	bls.n	80024da <HAL_TIM_SlaveConfigSynchro+0x7a>
 8002498:	2c60      	cmp	r4, #96	; 0x60
 800249a:	d038      	beq.n	800250e <HAL_TIM_SlaveConfigSynchro+0xae>
 800249c:	2c70      	cmp	r4, #112	; 0x70
 800249e:	d10a      	bne.n	80024b6 <HAL_TIM_SlaveConfigSynchro+0x56>
  tmpsmcr = TIMx->SMCR;
 80024a0:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024a2:	4c2d      	ldr	r4, [pc, #180]	; (8002558 <HAL_TIM_SlaveConfigSynchro+0xf8>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024a4:	688d      	ldr	r5, [r1, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024a6:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024a8:	68cb      	ldr	r3, [r1, #12]
 80024aa:	6909      	ldr	r1, [r1, #16]
 80024ac:	432b      	orrs	r3, r5
 80024ae:	0209      	lsls	r1, r1, #8
 80024b0:	430b      	orrs	r3, r1
 80024b2:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 80024b4:	6093      	str	r3, [r2, #8]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80024b6:	2140      	movs	r1, #64	; 0x40
 80024b8:	68d3      	ldr	r3, [r2, #12]
 80024ba:	438b      	bics	r3, r1
 80024bc:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80024be:	68d3      	ldr	r3, [r2, #12]
 80024c0:	4926      	ldr	r1, [pc, #152]	; (800255c <HAL_TIM_SlaveConfigSynchro+0xfc>)
 80024c2:	400b      	ands	r3, r1
 80024c4:	60d3      	str	r3, [r2, #12]
  htim->State = HAL_TIM_STATE_READY;
 80024c6:	233d      	movs	r3, #61	; 0x3d
 80024c8:	2201      	movs	r2, #1
 80024ca:	54c2      	strb	r2, [r0, r3]
  __HAL_UNLOCK(htim);
 80024cc:	2200      	movs	r2, #0
 80024ce:	3b01      	subs	r3, #1
 80024d0:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 80024d2:	2000      	movs	r0, #0
}
 80024d4:	bc04      	pop	{r2}
 80024d6:	4690      	mov	r8, r2
 80024d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (sSlaveConfig->InputTrigger)
 80024da:	2c40      	cmp	r4, #64	; 0x40
 80024dc:	d1eb      	bne.n	80024b6 <HAL_TIM_SlaveConfigSynchro+0x56>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80024de:	2f05      	cmp	r7, #5
 80024e0:	d00f      	beq.n	8002502 <HAL_TIM_SlaveConfigSynchro+0xa2>
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024e2:	24f0      	movs	r4, #240	; 0xf0
      tmpccer = htim->Instance->CCER;
 80024e4:	6a15      	ldr	r5, [r2, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80024e6:	6a13      	ldr	r3, [r2, #32]
 80024e8:	43b3      	bics	r3, r6
 80024ea:	6213      	str	r3, [r2, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80024ec:	6993      	ldr	r3, [r2, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024ee:	43a3      	bics	r3, r4
 80024f0:	001c      	movs	r4, r3
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80024f2:	690b      	ldr	r3, [r1, #16]
 80024f4:	011b      	lsls	r3, r3, #4
 80024f6:	4323      	orrs	r3, r4
      htim->Instance->CCMR1 = tmpccmr1;
 80024f8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCER = tmpccer;
 80024fa:	6215      	str	r5, [r2, #32]
 80024fc:	e7db      	b.n	80024b6 <HAL_TIM_SlaveConfigSynchro+0x56>
  __HAL_LOCK(htim);
 80024fe:	2002      	movs	r0, #2
 8002500:	e7e8      	b.n	80024d4 <HAL_TIM_SlaveConfigSynchro+0x74>
    htim->State = HAL_TIM_STATE_READY;
 8002502:	4643      	mov	r3, r8
 8002504:	54c6      	strb	r6, [r0, r3]
    __HAL_UNLOCK(htim);
 8002506:	2300      	movs	r3, #0
 8002508:	5543      	strb	r3, [r0, r5]
    return HAL_ERROR;
 800250a:	2001      	movs	r0, #1
 800250c:	e7e2      	b.n	80024d4 <HAL_TIM_SlaveConfigSynchro+0x74>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800250e:	2510      	movs	r5, #16
 8002510:	6a14      	ldr	r4, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002512:	688b      	ldr	r3, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002514:	43ac      	bics	r4, r5
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002516:	6909      	ldr	r1, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002518:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800251a:	6995      	ldr	r5, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800251c:	4e10      	ldr	r6, [pc, #64]	; (8002560 <HAL_TIM_SlaveConfigSynchro+0x100>)
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800251e:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002520:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002522:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002524:	25a0      	movs	r5, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8002526:	6a14      	ldr	r4, [r2, #32]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002528:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800252a:	43ac      	bics	r4, r5
  tmpccer |= (TIM_ICPolarity << 4U);
 800252c:	4323      	orrs	r3, r4
  TIMx->CCMR1 = tmpccmr1 ;
 800252e:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8002530:	6213      	str	r3, [r2, #32]
 8002532:	e7c0      	b.n	80024b6 <HAL_TIM_SlaveConfigSynchro+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002534:	688c      	ldr	r4, [r1, #8]
 8002536:	690b      	ldr	r3, [r1, #16]
  tmpccer = TIMx->CCER;
 8002538:	6a11      	ldr	r1, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800253a:	6a15      	ldr	r5, [r2, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800253c:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800253e:	43b5      	bics	r5, r6
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002540:	26f0      	movs	r6, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002542:	6215      	str	r5, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002544:	6995      	ldr	r5, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002546:	43b5      	bics	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002548:	432b      	orrs	r3, r5
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800254a:	250a      	movs	r5, #10
 800254c:	43a9      	bics	r1, r5
  tmpccer |= TIM_ICPolarity;
 800254e:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8002550:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8002552:	6211      	str	r1, [r2, #32]
 8002554:	e7af      	b.n	80024b6 <HAL_TIM_SlaveConfigSynchro+0x56>
 8002556:	46c0      	nop			; (mov r8, r8)
 8002558:	ffff00ff 	.word	0xffff00ff
 800255c:	ffffbfff 	.word	0xffffbfff
 8002560:	ffff0fff 	.word	0xffff0fff

08002564 <HAL_TIM_OC_DelayElapsedCallback>:
 8002564:	4770      	bx	lr
 8002566:	46c0      	nop			; (mov r8, r8)

08002568 <HAL_TIM_IC_CaptureCallback>:
 8002568:	4770      	bx	lr
 800256a:	46c0      	nop			; (mov r8, r8)

0800256c <TIM_DMACaptureCplt>:
  htim->State = HAL_TIM_STATE_READY;
 800256c:	223d      	movs	r2, #61	; 0x3d
 800256e:	2301      	movs	r3, #1
{
 8002570:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002572:	6a44      	ldr	r4, [r0, #36]	; 0x24
  htim->State = HAL_TIM_STATE_READY;
 8002574:	54a3      	strb	r3, [r4, r2]
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002576:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002578:	4282      	cmp	r2, r0
 800257a:	d00f      	beq.n	800259c <TIM_DMACaptureCplt+0x30>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800257c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800257e:	4283      	cmp	r3, r0
 8002580:	d011      	beq.n	80025a6 <TIM_DMACaptureCplt+0x3a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002582:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002584:	4283      	cmp	r3, r0
 8002586:	d00b      	beq.n	80025a0 <TIM_DMACaptureCplt+0x34>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002588:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800258a:	4283      	cmp	r3, r0
 800258c:	d005      	beq.n	800259a <TIM_DMACaptureCplt+0x2e>
  HAL_TIM_IC_CaptureCallback(htim);
 800258e:	0020      	movs	r0, r4
 8002590:	f7ff ffea 	bl	8002568 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002594:	2300      	movs	r3, #0
 8002596:	7723      	strb	r3, [r4, #28]
}
 8002598:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800259a:	2308      	movs	r3, #8
 800259c:	7723      	strb	r3, [r4, #28]
 800259e:	e7f6      	b.n	800258e <TIM_DMACaptureCplt+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025a0:	2304      	movs	r3, #4
 80025a2:	7723      	strb	r3, [r4, #28]
 80025a4:	e7f3      	b.n	800258e <TIM_DMACaptureCplt+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025a6:	2302      	movs	r3, #2
 80025a8:	7723      	strb	r3, [r4, #28]
 80025aa:	e7f0      	b.n	800258e <TIM_DMACaptureCplt+0x22>

080025ac <HAL_TIM_IC_CaptureHalfCpltCallback>:
 80025ac:	4770      	bx	lr
 80025ae:	46c0      	nop			; (mov r8, r8)

080025b0 <TIM_DMACaptureHalfCplt>:
  htim->State = HAL_TIM_STATE_READY;
 80025b0:	223d      	movs	r2, #61	; 0x3d
 80025b2:	2301      	movs	r3, #1
{
 80025b4:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025b6:	6a44      	ldr	r4, [r0, #36]	; 0x24
  htim->State = HAL_TIM_STATE_READY;
 80025b8:	54a3      	strb	r3, [r4, r2]
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80025ba:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80025bc:	4282      	cmp	r2, r0
 80025be:	d00f      	beq.n	80025e0 <TIM_DMACaptureHalfCplt+0x30>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80025c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80025c2:	4283      	cmp	r3, r0
 80025c4:	d011      	beq.n	80025ea <TIM_DMACaptureHalfCplt+0x3a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80025c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80025c8:	4283      	cmp	r3, r0
 80025ca:	d00b      	beq.n	80025e4 <TIM_DMACaptureHalfCplt+0x34>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80025cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80025ce:	4283      	cmp	r3, r0
 80025d0:	d005      	beq.n	80025de <TIM_DMACaptureHalfCplt+0x2e>
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 80025d2:	0020      	movs	r0, r4
 80025d4:	f7ff ffea 	bl	80025ac <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025d8:	2300      	movs	r3, #0
 80025da:	7723      	strb	r3, [r4, #28]
}
 80025dc:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025de:	2308      	movs	r3, #8
 80025e0:	7723      	strb	r3, [r4, #28]
 80025e2:	e7f6      	b.n	80025d2 <TIM_DMACaptureHalfCplt+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025e4:	2304      	movs	r3, #4
 80025e6:	7723      	strb	r3, [r4, #28]
 80025e8:	e7f3      	b.n	80025d2 <TIM_DMACaptureHalfCplt+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025ea:	2302      	movs	r3, #2
 80025ec:	7723      	strb	r3, [r4, #28]
 80025ee:	e7f0      	b.n	80025d2 <TIM_DMACaptureHalfCplt+0x22>

080025f0 <HAL_TIM_PWM_PulseFinishedCallback>:
 80025f0:	4770      	bx	lr
 80025f2:	46c0      	nop			; (mov r8, r8)

080025f4 <TIM_DMADelayPulseCplt>:
  htim->State = HAL_TIM_STATE_READY;
 80025f4:	223d      	movs	r2, #61	; 0x3d
 80025f6:	2301      	movs	r3, #1
{
 80025f8:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025fa:	6a44      	ldr	r4, [r0, #36]	; 0x24
  htim->State = HAL_TIM_STATE_READY;
 80025fc:	54a3      	strb	r3, [r4, r2]
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80025fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002600:	4282      	cmp	r2, r0
 8002602:	d00f      	beq.n	8002624 <TIM_DMADelayPulseCplt+0x30>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002604:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002606:	4283      	cmp	r3, r0
 8002608:	d011      	beq.n	800262e <TIM_DMADelayPulseCplt+0x3a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800260a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800260c:	4283      	cmp	r3, r0
 800260e:	d00b      	beq.n	8002628 <TIM_DMADelayPulseCplt+0x34>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002610:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002612:	4283      	cmp	r3, r0
 8002614:	d005      	beq.n	8002622 <TIM_DMADelayPulseCplt+0x2e>
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002616:	0020      	movs	r0, r4
 8002618:	f7ff ffea 	bl	80025f0 <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800261c:	2300      	movs	r3, #0
 800261e:	7723      	strb	r3, [r4, #28]
}
 8002620:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002622:	2308      	movs	r3, #8
 8002624:	7723      	strb	r3, [r4, #28]
 8002626:	e7f6      	b.n	8002616 <TIM_DMADelayPulseCplt+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002628:	2304      	movs	r3, #4
 800262a:	7723      	strb	r3, [r4, #28]
 800262c:	e7f3      	b.n	8002616 <TIM_DMADelayPulseCplt+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800262e:	2302      	movs	r3, #2
 8002630:	7723      	strb	r3, [r4, #28]
 8002632:	e7f0      	b.n	8002616 <TIM_DMADelayPulseCplt+0x22>

08002634 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
 8002634:	4770      	bx	lr
 8002636:	46c0      	nop			; (mov r8, r8)

08002638 <TIM_DMADelayPulseHalfCplt>:
  htim->State = HAL_TIM_STATE_READY;
 8002638:	223d      	movs	r2, #61	; 0x3d
 800263a:	2301      	movs	r3, #1
{
 800263c:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800263e:	6a44      	ldr	r4, [r0, #36]	; 0x24
  htim->State = HAL_TIM_STATE_READY;
 8002640:	54a3      	strb	r3, [r4, r2]
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002642:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002644:	4282      	cmp	r2, r0
 8002646:	d00f      	beq.n	8002668 <TIM_DMADelayPulseHalfCplt+0x30>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002648:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800264a:	4283      	cmp	r3, r0
 800264c:	d011      	beq.n	8002672 <TIM_DMADelayPulseHalfCplt+0x3a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800264e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002650:	4283      	cmp	r3, r0
 8002652:	d00b      	beq.n	800266c <TIM_DMADelayPulseHalfCplt+0x34>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002654:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002656:	4283      	cmp	r3, r0
 8002658:	d005      	beq.n	8002666 <TIM_DMADelayPulseHalfCplt+0x2e>
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800265a:	0020      	movs	r0, r4
 800265c:	f7ff ffea 	bl	8002634 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002660:	2300      	movs	r3, #0
 8002662:	7723      	strb	r3, [r4, #28]
}
 8002664:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002666:	2308      	movs	r3, #8
 8002668:	7723      	strb	r3, [r4, #28]
 800266a:	e7f6      	b.n	800265a <TIM_DMADelayPulseHalfCplt+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800266c:	2304      	movs	r3, #4
 800266e:	7723      	strb	r3, [r4, #28]
 8002670:	e7f3      	b.n	800265a <TIM_DMADelayPulseHalfCplt+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002672:	2302      	movs	r3, #2
 8002674:	7723      	strb	r3, [r4, #28]
 8002676:	e7f0      	b.n	800265a <TIM_DMADelayPulseHalfCplt+0x22>

08002678 <HAL_TIM_TriggerCallback>:
 8002678:	4770      	bx	lr
 800267a:	46c0      	nop			; (mov r8, r8)

0800267c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800267c:	2202      	movs	r2, #2
 800267e:	6803      	ldr	r3, [r0, #0]
{
 8002680:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002682:	6919      	ldr	r1, [r3, #16]
{
 8002684:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002686:	420a      	tst	r2, r1
 8002688:	d002      	beq.n	8002690 <HAL_TIM_IRQHandler+0x14>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800268a:	68d9      	ldr	r1, [r3, #12]
 800268c:	420a      	tst	r2, r1
 800268e:	d165      	bne.n	800275c <HAL_TIM_IRQHandler+0xe0>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002690:	2204      	movs	r2, #4
 8002692:	6919      	ldr	r1, [r3, #16]
 8002694:	420a      	tst	r2, r1
 8002696:	d002      	beq.n	800269e <HAL_TIM_IRQHandler+0x22>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002698:	68d9      	ldr	r1, [r3, #12]
 800269a:	420a      	tst	r2, r1
 800269c:	d14b      	bne.n	8002736 <HAL_TIM_IRQHandler+0xba>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800269e:	2208      	movs	r2, #8
 80026a0:	6919      	ldr	r1, [r3, #16]
 80026a2:	420a      	tst	r2, r1
 80026a4:	d002      	beq.n	80026ac <HAL_TIM_IRQHandler+0x30>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026a6:	68d9      	ldr	r1, [r3, #12]
 80026a8:	420a      	tst	r2, r1
 80026aa:	d133      	bne.n	8002714 <HAL_TIM_IRQHandler+0x98>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026ac:	2210      	movs	r2, #16
 80026ae:	6919      	ldr	r1, [r3, #16]
 80026b0:	420a      	tst	r2, r1
 80026b2:	d002      	beq.n	80026ba <HAL_TIM_IRQHandler+0x3e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026b4:	68d9      	ldr	r1, [r3, #12]
 80026b6:	420a      	tst	r2, r1
 80026b8:	d11c      	bne.n	80026f4 <HAL_TIM_IRQHandler+0x78>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026ba:	2201      	movs	r2, #1
 80026bc:	6919      	ldr	r1, [r3, #16]
 80026be:	420a      	tst	r2, r1
 80026c0:	d002      	beq.n	80026c8 <HAL_TIM_IRQHandler+0x4c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026c2:	68d9      	ldr	r1, [r3, #12]
 80026c4:	420a      	tst	r2, r1
 80026c6:	d15c      	bne.n	8002782 <HAL_TIM_IRQHandler+0x106>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026c8:	2280      	movs	r2, #128	; 0x80
 80026ca:	6919      	ldr	r1, [r3, #16]
 80026cc:	420a      	tst	r2, r1
 80026ce:	d002      	beq.n	80026d6 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026d0:	68d9      	ldr	r1, [r3, #12]
 80026d2:	420a      	tst	r2, r1
 80026d4:	d15c      	bne.n	8002790 <HAL_TIM_IRQHandler+0x114>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026d6:	2240      	movs	r2, #64	; 0x40
 80026d8:	6919      	ldr	r1, [r3, #16]
 80026da:	420a      	tst	r2, r1
 80026dc:	d002      	beq.n	80026e4 <HAL_TIM_IRQHandler+0x68>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80026de:	68d9      	ldr	r1, [r3, #12]
 80026e0:	420a      	tst	r2, r1
 80026e2:	d15d      	bne.n	80027a0 <HAL_TIM_IRQHandler+0x124>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026e4:	2220      	movs	r2, #32
 80026e6:	6919      	ldr	r1, [r3, #16]
 80026e8:	420a      	tst	r2, r1
 80026ea:	d002      	beq.n	80026f2 <HAL_TIM_IRQHandler+0x76>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026ec:	68d9      	ldr	r1, [r3, #12]
 80026ee:	420a      	tst	r2, r1
 80026f0:	d141      	bne.n	8002776 <HAL_TIM_IRQHandler+0xfa>
}
 80026f2:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026f4:	3a21      	subs	r2, #33	; 0x21
 80026f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026f8:	3219      	adds	r2, #25
 80026fa:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026fc:	69da      	ldr	r2, [r3, #28]
 80026fe:	23c0      	movs	r3, #192	; 0xc0
 8002700:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8002702:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002704:	421a      	tst	r2, r3
 8002706:	d05e      	beq.n	80027c6 <HAL_TIM_IRQHandler+0x14a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002708:	f7ff ff2e 	bl	8002568 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800270c:	2300      	movs	r3, #0
 800270e:	7723      	strb	r3, [r4, #28]
 8002710:	6823      	ldr	r3, [r4, #0]
 8002712:	e7d2      	b.n	80026ba <HAL_TIM_IRQHandler+0x3e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002714:	3a11      	subs	r2, #17
 8002716:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002718:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800271a:	320d      	adds	r2, #13
 800271c:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800271e:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002720:	079b      	lsls	r3, r3, #30
 8002722:	d14d      	bne.n	80027c0 <HAL_TIM_IRQHandler+0x144>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002724:	f7ff ff1e 	bl	8002564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002728:	0020      	movs	r0, r4
 800272a:	f7ff ff61 	bl	80025f0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800272e:	2300      	movs	r3, #0
 8002730:	7723      	strb	r3, [r4, #28]
 8002732:	6823      	ldr	r3, [r4, #0]
 8002734:	e7ba      	b.n	80026ac <HAL_TIM_IRQHandler+0x30>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002736:	3a09      	subs	r2, #9
 8002738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800273a:	3207      	adds	r2, #7
 800273c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800273e:	699a      	ldr	r2, [r3, #24]
 8002740:	23c0      	movs	r3, #192	; 0xc0
 8002742:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8002744:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002746:	421a      	tst	r2, r3
 8002748:	d137      	bne.n	80027ba <HAL_TIM_IRQHandler+0x13e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800274a:	f7ff ff0b 	bl	8002564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800274e:	0020      	movs	r0, r4
 8002750:	f7ff ff4e 	bl	80025f0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002754:	2300      	movs	r3, #0
 8002756:	7723      	strb	r3, [r4, #28]
 8002758:	6823      	ldr	r3, [r4, #0]
 800275a:	e7a0      	b.n	800269e <HAL_TIM_IRQHandler+0x22>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800275c:	3a05      	subs	r2, #5
 800275e:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002760:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002762:	3204      	adds	r2, #4
 8002764:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002766:	079b      	lsls	r3, r3, #30
 8002768:	d021      	beq.n	80027ae <HAL_TIM_IRQHandler+0x132>
          HAL_TIM_IC_CaptureCallback(htim);
 800276a:	f7ff fefd 	bl	8002568 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800276e:	2300      	movs	r3, #0
 8002770:	7723      	strb	r3, [r4, #28]
 8002772:	6823      	ldr	r3, [r4, #0]
 8002774:	e78c      	b.n	8002690 <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002776:	3a41      	subs	r2, #65	; 0x41
 8002778:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800277a:	0020      	movs	r0, r4
 800277c:	f000 f8b6 	bl	80028ec <HAL_TIMEx_CommutCallback>
}
 8002780:	e7b7      	b.n	80026f2 <HAL_TIM_IRQHandler+0x76>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002782:	3a03      	subs	r2, #3
 8002784:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002786:	0020      	movs	r0, r4
 8002788:	f001 fcc8 	bl	800411c <HAL_TIM_PeriodElapsedCallback>
 800278c:	6823      	ldr	r3, [r4, #0]
 800278e:	e79b      	b.n	80026c8 <HAL_TIM_IRQHandler+0x4c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002790:	3a02      	subs	r2, #2
 8002792:	3aff      	subs	r2, #255	; 0xff
 8002794:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002796:	0020      	movs	r0, r4
 8002798:	f000 f8aa 	bl	80028f0 <HAL_TIMEx_BreakCallback>
 800279c:	6823      	ldr	r3, [r4, #0]
 800279e:	e79a      	b.n	80026d6 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027a0:	3a81      	subs	r2, #129	; 0x81
 80027a2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80027a4:	0020      	movs	r0, r4
 80027a6:	f7ff ff67 	bl	8002678 <HAL_TIM_TriggerCallback>
 80027aa:	6823      	ldr	r3, [r4, #0]
 80027ac:	e79a      	b.n	80026e4 <HAL_TIM_IRQHandler+0x68>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ae:	f7ff fed9 	bl	8002564 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027b2:	0020      	movs	r0, r4
 80027b4:	f7ff ff1c 	bl	80025f0 <HAL_TIM_PWM_PulseFinishedCallback>
 80027b8:	e7d9      	b.n	800276e <HAL_TIM_IRQHandler+0xf2>
        HAL_TIM_IC_CaptureCallback(htim);
 80027ba:	f7ff fed5 	bl	8002568 <HAL_TIM_IC_CaptureCallback>
 80027be:	e7c9      	b.n	8002754 <HAL_TIM_IRQHandler+0xd8>
        HAL_TIM_IC_CaptureCallback(htim);
 80027c0:	f7ff fed2 	bl	8002568 <HAL_TIM_IC_CaptureCallback>
 80027c4:	e7b3      	b.n	800272e <HAL_TIM_IRQHandler+0xb2>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027c6:	f7ff fecd 	bl	8002564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027ca:	0020      	movs	r0, r4
 80027cc:	f7ff ff10 	bl	80025f0 <HAL_TIM_PWM_PulseFinishedCallback>
 80027d0:	e79c      	b.n	800270c <HAL_TIM_IRQHandler+0x90>
 80027d2:	46c0      	nop			; (mov r8, r8)

080027d4 <HAL_TIM_ErrorCallback>:
 80027d4:	4770      	bx	lr
 80027d6:	46c0      	nop			; (mov r8, r8)

080027d8 <TIM_DMAError>:
  htim->State = HAL_TIM_STATE_READY;
 80027d8:	233d      	movs	r3, #61	; 0x3d
 80027da:	2201      	movs	r2, #1
{
 80027dc:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027de:	6a40      	ldr	r0, [r0, #36]	; 0x24
  htim->State = HAL_TIM_STATE_READY;
 80027e0:	54c2      	strb	r2, [r0, r3]
  HAL_TIM_ErrorCallback(htim);
 80027e2:	f7ff fff7 	bl	80027d4 <HAL_TIM_ErrorCallback>
}
 80027e6:	bd10      	pop	{r4, pc}

080027e8 <HAL_TIMEx_PWMN_Start>:
 80027e8:	221f      	movs	r2, #31
 80027ea:	4011      	ands	r1, r2
 80027ec:	3a1b      	subs	r2, #27
 80027ee:	408a      	lsls	r2, r1
 80027f0:	6803      	ldr	r3, [r0, #0]
 80027f2:	6a19      	ldr	r1, [r3, #32]
 80027f4:	4391      	bics	r1, r2
 80027f6:	6219      	str	r1, [r3, #32]
 80027f8:	6a19      	ldr	r1, [r3, #32]
 80027fa:	430a      	orrs	r2, r1
 80027fc:	621a      	str	r2, [r3, #32]
 80027fe:	2280      	movs	r2, #128	; 0x80
 8002800:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002802:	0212      	lsls	r2, r2, #8
 8002804:	430a      	orrs	r2, r1
 8002806:	645a      	str	r2, [r3, #68]	; 0x44
 8002808:	2207      	movs	r2, #7
 800280a:	6899      	ldr	r1, [r3, #8]
 800280c:	400a      	ands	r2, r1
 800280e:	2a06      	cmp	r2, #6
 8002810:	d003      	beq.n	800281a <HAL_TIMEx_PWMN_Start+0x32>
 8002812:	2101      	movs	r1, #1
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	2000      	movs	r0, #0
 800281c:	4770      	bx	lr
 800281e:	46c0      	nop			; (mov r8, r8)

08002820 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002820:	233c      	movs	r3, #60	; 0x3c
{
 8002822:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8002824:	5cc2      	ldrb	r2, [r0, r3]
 8002826:	2a01      	cmp	r2, #1
 8002828:	d026      	beq.n	8002878 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 800282a:	2201      	movs	r2, #1

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800282c:	2570      	movs	r5, #112	; 0x70
  __HAL_LOCK(htim);
 800282e:	54c2      	strb	r2, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8002830:	3301      	adds	r3, #1
 8002832:	3201      	adds	r2, #1
 8002834:	54c2      	strb	r2, [r0, r3]
  tmpcr2 = htim->Instance->CR2;
 8002836:	6803      	ldr	r3, [r0, #0]
 8002838:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800283a:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 800283c:	43aa      	bics	r2, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800283e:	680d      	ldr	r5, [r1, #0]
 8002840:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002842:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002844:	4a0d      	ldr	r2, [pc, #52]	; (800287c <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d009      	beq.n	800285e <HAL_TIMEx_MasterConfigSynchronization+0x3e>
 800284a:	2280      	movs	r2, #128	; 0x80
 800284c:	05d2      	lsls	r2, r2, #23
 800284e:	4293      	cmp	r3, r2
 8002850:	d005      	beq.n	800285e <HAL_TIMEx_MasterConfigSynchronization+0x3e>
 8002852:	4a0b      	ldr	r2, [pc, #44]	; (8002880 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d002      	beq.n	800285e <HAL_TIMEx_MasterConfigSynchronization+0x3e>
 8002858:	4a0a      	ldr	r2, [pc, #40]	; (8002884 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d104      	bne.n	8002868 <HAL_TIMEx_MasterConfigSynchronization+0x48>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800285e:	2280      	movs	r2, #128	; 0x80
 8002860:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002862:	684a      	ldr	r2, [r1, #4]
 8002864:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002866:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002868:	233d      	movs	r3, #61	; 0x3d
 800286a:	2201      	movs	r2, #1
 800286c:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 800286e:	2200      	movs	r2, #0
 8002870:	3b01      	subs	r3, #1
 8002872:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8002874:	2000      	movs	r0, #0
}
 8002876:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8002878:	2002      	movs	r0, #2
 800287a:	e7fc      	b.n	8002876 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800287c:	40012c00 	.word	0x40012c00
 8002880:	40000400 	.word	0x40000400
 8002884:	40014000 	.word	0x40014000

08002888 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002888:	223c      	movs	r2, #60	; 0x3c
{
 800288a:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 800288c:	5c83      	ldrb	r3, [r0, r2]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d01e      	beq.n	80028d0 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002892:	68cc      	ldr	r4, [r1, #12]
 8002894:	4b0f      	ldr	r3, [pc, #60]	; (80028d4 <HAL_TIMEx_ConfigBreakDeadTime+0x4c>)
 8002896:	4023      	ands	r3, r4
 8002898:	688c      	ldr	r4, [r1, #8]
 800289a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800289c:	4c0e      	ldr	r4, [pc, #56]	; (80028d8 <HAL_TIMEx_ConfigBreakDeadTime+0x50>)
 800289e:	4023      	ands	r3, r4
 80028a0:	684c      	ldr	r4, [r1, #4]
 80028a2:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80028a4:	4c0d      	ldr	r4, [pc, #52]	; (80028dc <HAL_TIMEx_ConfigBreakDeadTime+0x54>)
 80028a6:	4023      	ands	r3, r4
 80028a8:	680c      	ldr	r4, [r1, #0]
 80028aa:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80028ac:	4c0c      	ldr	r4, [pc, #48]	; (80028e0 <HAL_TIMEx_ConfigBreakDeadTime+0x58>)
 80028ae:	4023      	ands	r3, r4
 80028b0:	690c      	ldr	r4, [r1, #16]
 80028b2:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80028b4:	4c0b      	ldr	r4, [pc, #44]	; (80028e4 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>)
 80028b6:	4023      	ands	r3, r4
 80028b8:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80028ba:	69c9      	ldr	r1, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80028bc:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80028be:	4c0a      	ldr	r4, [pc, #40]	; (80028e8 <HAL_TIMEx_ConfigBreakDeadTime+0x60>)
 80028c0:	4023      	ands	r3, r4
 80028c2:	430b      	orrs	r3, r1


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80028c4:	6801      	ldr	r1, [r0, #0]
 80028c6:	644b      	str	r3, [r1, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80028c8:	2300      	movs	r3, #0
 80028ca:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 80028cc:	2000      	movs	r0, #0
}
 80028ce:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 80028d0:	2002      	movs	r0, #2
 80028d2:	e7fc      	b.n	80028ce <HAL_TIMEx_ConfigBreakDeadTime+0x46>
 80028d4:	fffffcff 	.word	0xfffffcff
 80028d8:	fffffbff 	.word	0xfffffbff
 80028dc:	fffff7ff 	.word	0xfffff7ff
 80028e0:	ffffefff 	.word	0xffffefff
 80028e4:	ffffdfff 	.word	0xffffdfff
 80028e8:	ffffbfff 	.word	0xffffbfff

080028ec <HAL_TIMEx_CommutCallback>:
 80028ec:	4770      	bx	lr
 80028ee:	46c0      	nop			; (mov r8, r8)

080028f0 <HAL_TIMEx_BreakCallback>:
 80028f0:	4770      	bx	lr
 80028f2:	46c0      	nop			; (mov r8, r8)

080028f4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80028f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028f6:	464e      	mov	r6, r9
 80028f8:	4645      	mov	r5, r8
 80028fa:	46de      	mov	lr, fp
 80028fc:	4657      	mov	r7, sl
 80028fe:	684b      	ldr	r3, [r1, #4]
 8002900:	b5e0      	push	{r5, r6, r7, lr}
 8002902:	469c      	mov	ip, r3
 8002904:	2301      	movs	r3, #1
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002906:	680e      	ldr	r6, [r1, #0]
 8002908:	425b      	negs	r3, r3
{
 800290a:	b083      	sub	sp, #12
 800290c:	4463      	add	r3, ip
 800290e:	9101      	str	r1, [sp, #4]
 8002910:	4698      	mov	r8, r3
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002912:	2e00      	cmp	r6, #0
 8002914:	d04a      	beq.n	80029ac <LL_GPIO_Init+0xb8>
  pinpos = 0;
 8002916:	2200      	movs	r2, #0
 8002918:	e007      	b.n	800292a <LL_GPIO_Init+0x36>
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 800291a:	68c3      	ldr	r3, [r0, #12]
 800291c:	401c      	ands	r4, r3
 800291e:	433c      	orrs	r4, r7
 8002920:	60c4      	str	r4, [r0, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002922:	0033      	movs	r3, r6
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
      }
    }
    pinpos++;
 8002924:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002926:	40d3      	lsrs	r3, r2
 8002928:	d040      	beq.n	80029ac <LL_GPIO_Init+0xb8>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800292a:	2301      	movs	r3, #1
 800292c:	4093      	lsls	r3, r2
 800292e:	4033      	ands	r3, r6
    if (currentpin != 0x00u)
 8002930:	d0f7      	beq.n	8002922 <LL_GPIO_Init+0x2e>
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8002932:	001d      	movs	r5, r3
 8002934:	6804      	ldr	r4, [r0, #0]
 8002936:	435d      	muls	r5, r3
 8002938:	46a1      	mov	r9, r4
 800293a:	006c      	lsls	r4, r5, #1
 800293c:	1964      	adds	r4, r4, r5
 800293e:	464f      	mov	r7, r9
 8002940:	43e4      	mvns	r4, r4
 8002942:	4027      	ands	r7, r4
 8002944:	46b9      	mov	r9, r7
 8002946:	4667      	mov	r7, ip
 8002948:	436f      	muls	r7, r5
 800294a:	46ba      	mov	sl, r7
 800294c:	464f      	mov	r7, r9
 800294e:	4651      	mov	r1, sl
 8002950:	430f      	orrs	r7, r1
 8002952:	9901      	ldr	r1, [sp, #4]
 8002954:	6007      	str	r7, [r0, #0]
 8002956:	690f      	ldr	r7, [r1, #16]
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002958:	4641      	mov	r1, r8
 800295a:	436f      	muls	r7, r5
 800295c:	46b9      	mov	r9, r7
 800295e:	2901      	cmp	r1, #1
 8002960:	d8db      	bhi.n	800291a <LL_GPIO_Init+0x26>
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 8002962:	6881      	ldr	r1, [r0, #8]
 8002964:	468b      	mov	fp, r1
 8002966:	9901      	ldr	r1, [sp, #4]
 8002968:	6889      	ldr	r1, [r1, #8]
 800296a:	4369      	muls	r1, r5
 800296c:	468a      	mov	sl, r1
 800296e:	4659      	mov	r1, fp
 8002970:	4021      	ands	r1, r4
 8002972:	468b      	mov	fp, r1
 8002974:	4651      	mov	r1, sl
 8002976:	465f      	mov	r7, fp
 8002978:	4339      	orrs	r1, r7
 800297a:	6081      	str	r1, [r0, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 800297c:	68c1      	ldr	r1, [r0, #12]
 800297e:	400c      	ands	r4, r1
 8002980:	4649      	mov	r1, r9
 8002982:	430c      	orrs	r4, r1
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002984:	4661      	mov	r1, ip
 8002986:	60c4      	str	r4, [r0, #12]
 8002988:	2902      	cmp	r1, #2
 800298a:	d1ca      	bne.n	8002922 <LL_GPIO_Init+0x2e>
 800298c:	9901      	ldr	r1, [sp, #4]
 800298e:	694c      	ldr	r4, [r1, #20]
        if (currentpin < LL_GPIO_PIN_8)
 8002990:	2bff      	cmp	r3, #255	; 0xff
 8002992:	d81d      	bhi.n	80029d0 <LL_GPIO_Init+0xdc>
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8002994:	436d      	muls	r5, r5
 8002996:	0129      	lsls	r1, r5, #4
 8002998:	1b49      	subs	r1, r1, r5
 800299a:	4365      	muls	r5, r4
 800299c:	6a03      	ldr	r3, [r0, #32]
    pinpos++;
 800299e:	3201      	adds	r2, #1
 80029a0:	438b      	bics	r3, r1
 80029a2:	431d      	orrs	r5, r3
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80029a4:	0033      	movs	r3, r6
 80029a6:	6205      	str	r5, [r0, #32]
 80029a8:	40d3      	lsrs	r3, r2
 80029aa:	d1be      	bne.n	800292a <LL_GPIO_Init+0x36>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80029ac:	4643      	mov	r3, r8
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d806      	bhi.n	80029c0 <LL_GPIO_Init+0xcc>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80029b2:	9a01      	ldr	r2, [sp, #4]
 80029b4:	6843      	ldr	r3, [r0, #4]
 80029b6:	68d2      	ldr	r2, [r2, #12]
 80029b8:	43b3      	bics	r3, r6
 80029ba:	4356      	muls	r6, r2
 80029bc:	431e      	orrs	r6, r3
 80029be:	6046      	str	r6, [r0, #4]
    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);

  }
  return (SUCCESS);
}
 80029c0:	2000      	movs	r0, #0
 80029c2:	b003      	add	sp, #12
 80029c4:	bc3c      	pop	{r2, r3, r4, r5}
 80029c6:	4690      	mov	r8, r2
 80029c8:	4699      	mov	r9, r3
 80029ca:	46a2      	mov	sl, r4
 80029cc:	46ab      	mov	fp, r5
 80029ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80029d0:	0a1b      	lsrs	r3, r3, #8
 80029d2:	435b      	muls	r3, r3
 80029d4:	435b      	muls	r3, r3
 80029d6:	435c      	muls	r4, r3
 80029d8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80029da:	0119      	lsls	r1, r3, #4
 80029dc:	1ac9      	subs	r1, r1, r3
 80029de:	438d      	bics	r5, r1
 80029e0:	432c      	orrs	r4, r5
 80029e2:	6244      	str	r4, [r0, #36]	; 0x24
 80029e4:	e79d      	b.n	8002922 <LL_GPIO_Init+0x2e>
 80029e6:	46c0      	nop			; (mov r8, r8)

080029e8 <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 80029e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ea:	46ce      	mov	lr, r9
 80029ec:	4647      	mov	r7, r8
  uint16_t pagestatus0 = 6, pagestatus1 = 6;
  uint16_t varidx = 0;
  uint16_t eepromstatus = 0, readstatus = 0;
  int16_t x = -1;
  HAL_StatusTypeDef  flashstatus;
  uint32_t page_error = 0;
 80029ee:	2400      	movs	r4, #0
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);

  /* Fill EraseInit structure*/
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
  s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
  s_eraseinit.NbPages     = 1;
 80029f0:	2601      	movs	r6, #1
{
 80029f2:	b580      	push	{r7, lr}
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80029f4:	49a6      	ldr	r1, [pc, #664]	; (8002c90 <EE_Init+0x2a8>)
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80029f6:	4aa7      	ldr	r2, [pc, #668]	; (8002c94 <EE_Init+0x2ac>)
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80029f8:	880b      	ldrh	r3, [r1, #0]
  
  /* Check for invalid header states and repair if necessary */
  switch (pagestatus0)
 80029fa:	48a7      	ldr	r0, [pc, #668]	; (8002c98 <EE_Init+0x2b0>)
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80029fc:	8815      	ldrh	r5, [r2, #0]
{
 80029fe:	b089      	sub	sp, #36	; 0x24
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002a00:	b29b      	uxth	r3, r3
  uint32_t page_error = 0;
 8002a02:	9400      	str	r4, [sp, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002a04:	b2ad      	uxth	r5, r5
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8002a06:	9402      	str	r4, [sp, #8]
  s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 8002a08:	9103      	str	r1, [sp, #12]
  s_eraseinit.NbPages     = 1;
 8002a0a:	9604      	str	r6, [sp, #16]
  switch (pagestatus0)
 8002a0c:	4283      	cmp	r3, r0
 8002a0e:	d100      	bne.n	8002a12 <EE_Init+0x2a>
 8002a10:	e098      	b.n	8002b44 <EE_Init+0x15c>
 8002a12:	4aa2      	ldr	r2, [pc, #648]	; (8002c9c <EE_Init+0x2b4>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d023      	beq.n	8002a60 <EE_Init+0x78>
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d03f      	beq.n	8002a9c <EE_Init+0xb4>
{
  HAL_StatusTypeDef flashstatus = HAL_OK;
  uint32_t page_error = 0;
  FLASH_EraseInitTypeDef s_eraseinit;

  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8002a1c:	a805      	add	r0, sp, #20
  uint32_t page_error = 0;
 8002a1e:	9401      	str	r4, [sp, #4]
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8002a20:	9405      	str	r4, [sp, #20]
  s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 8002a22:	6041      	str	r1, [r0, #4]
  s_eraseinit.NbPages     = 1;
 8002a24:	6086      	str	r6, [r0, #8]
    if (addressvalue != ERASED)
 8002a26:	0013      	movs	r3, r2
  while (Address <= PAGE0_END_ADDRESS)
 8002a28:	4c9d      	ldr	r4, [pc, #628]	; (8002ca0 <EE_Init+0x2b8>)
 8002a2a:	e002      	b.n	8002a32 <EE_Init+0x4a>
    Address = Address + 4;
 8002a2c:	3104      	adds	r1, #4
  while (Address <= PAGE0_END_ADDRESS)
 8002a2e:	42a1      	cmp	r1, r4
 8002a30:	d007      	beq.n	8002a42 <EE_Init+0x5a>
    addressvalue = (*(__IO uint16_t*)Address);
 8002a32:	880a      	ldrh	r2, [r1, #0]
    if (addressvalue != ERASED)
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d0f9      	beq.n	8002a2c <EE_Init+0x44>
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
  {
    flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error); 
 8002a38:	a901      	add	r1, sp, #4
 8002a3a:	f7fe fa7b 	bl	8000f34 <HAL_FLASHEx_Erase>
    /* If erase operation was failed, a Flash error code is returned */
    if (flashstatus != HAL_OK)
 8002a3e:	2800      	cmp	r0, #0
 8002a40:	d12a      	bne.n	8002a98 <EE_Init+0xb0>
    {
      return flashstatus;
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 8002a42:	2200      	movs	r2, #0
 8002a44:	2300      	movs	r3, #0
 8002a46:	4992      	ldr	r1, [pc, #584]	; (8002c90 <EE_Init+0x2a8>)
 8002a48:	2001      	movs	r0, #1
 8002a4a:	f7fe f935 	bl	8000cb8 <HAL_FLASH_Program>
  /* If program operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 8002a4e:	2800      	cmp	r0, #0
 8002a50:	d122      	bne.n	8002a98 <EE_Init+0xb0>
  return HAL_OK;
 8002a52:	2500      	movs	r5, #0
}
 8002a54:	0028      	movs	r0, r5
 8002a56:	b009      	add	sp, #36	; 0x24
 8002a58:	bc0c      	pop	{r2, r3}
 8002a5a:	4690      	mov	r8, r2
 8002a5c:	4699      	mov	r9, r3
 8002a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pagestatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8002a60:	2d00      	cmp	r5, #0
 8002a62:	d100      	bne.n	8002a66 <EE_Init+0x7e>
 8002a64:	e0a7      	b.n	8002bb6 <EE_Init+0x1ce>
      else if (pagestatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8002a66:	4285      	cmp	r5, r0
 8002a68:	d000      	beq.n	8002a6c <EE_Init+0x84>
 8002a6a:	e151      	b.n	8002d10 <EE_Init+0x328>
  while (Address <= PAGE0_END_ADDRESS)
 8002a6c:	488c      	ldr	r0, [pc, #560]	; (8002ca0 <EE_Init+0x2b8>)
 8002a6e:	e002      	b.n	8002a76 <EE_Init+0x8e>
    Address = Address + 4;
 8002a70:	3104      	adds	r1, #4
  while (Address <= PAGE0_END_ADDRESS)
 8002a72:	4281      	cmp	r1, r0
 8002a74:	d008      	beq.n	8002a88 <EE_Init+0xa0>
    addressvalue = (*(__IO uint16_t*)Address);
 8002a76:	880a      	ldrh	r2, [r1, #0]
    if (addressvalue != ERASED)
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d0f9      	beq.n	8002a70 <EE_Init+0x88>
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8002a7c:	4669      	mov	r1, sp
 8002a7e:	a802      	add	r0, sp, #8
 8002a80:	f7fe fa58 	bl	8000f34 <HAL_FLASHEx_Erase>
          if (flashstatus != HAL_OK)
 8002a84:	2800      	cmp	r0, #0
 8002a86:	d107      	bne.n	8002a98 <EE_Init+0xb0>
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 8002a88:	2200      	movs	r2, #0
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	4981      	ldr	r1, [pc, #516]	; (8002c94 <EE_Init+0x2ac>)
 8002a8e:	2001      	movs	r0, #1
 8002a90:	f7fe f912 	bl	8000cb8 <HAL_FLASH_Program>
        if (flashstatus != HAL_OK)
 8002a94:	2800      	cmp	r0, #0
 8002a96:	d0dc      	beq.n	8002a52 <EE_Init+0x6a>
        return flashstatus;
 8002a98:	b285      	uxth	r5, r0
 8002a9a:	e7db      	b.n	8002a54 <EE_Init+0x6c>
      if (pagestatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 8002a9c:	2d00      	cmp	r5, #0
 8002a9e:	d100      	bne.n	8002aa2 <EE_Init+0xba>
 8002aa0:	e0ad      	b.n	8002bfe <EE_Init+0x216>
      else if (pagestatus1 == ERASED) /* Page0 valid, Page1 erased */
 8002aa2:	4295      	cmp	r5, r2
 8002aa4:	d0d5      	beq.n	8002a52 <EE_Init+0x6a>
  int16_t x = -1;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	425b      	negs	r3, r3
 8002aaa:	4698      	mov	r8, r3
      *Data = (*(__IO uint16_t*)(address - 2));
 8002aac:	4b7d      	ldr	r3, [pc, #500]	; (8002ca4 <EE_Init+0x2bc>)
 8002aae:	2400      	movs	r4, #0
 8002ab0:	4699      	mov	r9, r3
 8002ab2:	4f7d      	ldr	r7, [pc, #500]	; (8002ca8 <EE_Init+0x2c0>)
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 8002ab4:	4b7d      	ldr	r3, [pc, #500]	; (8002cac <EE_Init+0x2c4>)
 8002ab6:	0062      	lsls	r2, r4, #1
 8002ab8:	881b      	ldrh	r3, [r3, #0]
 8002aba:	5abd      	ldrh	r5, [r7, r2]
 8002abc:	42ab      	cmp	r3, r5
 8002abe:	d101      	bne.n	8002ac4 <EE_Init+0xdc>
            x = varidx;
 8002ac0:	b223      	sxth	r3, r4
 8002ac2:	4698      	mov	r8, r3
          if (varidx != x)
 8002ac4:	4544      	cmp	r4, r8
 8002ac6:	d01a      	beq.n	8002afe <EE_Init+0x116>
static uint16_t EE_FindValidPage(uint8_t Operation)
{
  uint16_t pagestatus0 = 6, pagestatus1 = 6;

  /* Get Page0 actual status */
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002ac8:	4b71      	ldr	r3, [pc, #452]	; (8002c90 <EE_Init+0x2a8>)
 8002aca:	881a      	ldrh	r2, [r3, #0]

  /* Get Page1 actual status */
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002acc:	4b71      	ldr	r3, [pc, #452]	; (8002c94 <EE_Init+0x2ac>)
 8002ace:	881b      	ldrh	r3, [r3, #0]
 8002ad0:	b29b      	uxth	r3, r3
      {
        return NO_VALID_PAGE;   /* No valid Page */
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (pagestatus0 == VALID_PAGE)
 8002ad2:	2a00      	cmp	r2, #0
 8002ad4:	d100      	bne.n	8002ad8 <EE_Init+0xf0>
 8002ad6:	e0b5      	b.n	8002c44 <EE_Init+0x25c>
      {
        return PAGE0;           /* Page0 valid */
      }
      else if (pagestatus1 == VALID_PAGE)
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d000      	beq.n	8002ade <EE_Init+0xf6>
 8002adc:	e16b      	b.n	8002db6 <EE_Init+0x3ce>
 8002ade:	4b74      	ldr	r3, [pc, #464]	; (8002cb0 <EE_Init+0x2c8>)
 8002ae0:	4974      	ldr	r1, [pc, #464]	; (8002cb4 <EE_Init+0x2cc>)
 8002ae2:	001a      	movs	r2, r3
 8002ae4:	4874      	ldr	r0, [pc, #464]	; (8002cb8 <EE_Init+0x2d0>)
    addressvalue = (*(__IO uint16_t*)address);
 8002ae6:	881b      	ldrh	r3, [r3, #0]
    if (addressvalue == VirtAddress)
 8002ae8:	429d      	cmp	r5, r3
 8002aea:	d105      	bne.n	8002af8 <EE_Init+0x110>
 8002aec:	e0f1      	b.n	8002cd2 <EE_Init+0x2ea>
    addressvalue = (*(__IO uint16_t*)address);
 8002aee:	8819      	ldrh	r1, [r3, #0]
    if (addressvalue == VirtAddress)
 8002af0:	428d      	cmp	r5, r1
 8002af2:	d100      	bne.n	8002af6 <EE_Init+0x10e>
 8002af4:	e0ec      	b.n	8002cd0 <EE_Init+0x2e8>
 8002af6:	001a      	movs	r2, r3
      address = address - 4;
 8002af8:	1f13      	subs	r3, r2, #4
  while (address > (PageStartAddress + 2))
 8002afa:	4298      	cmp	r0, r3
 8002afc:	d3f7      	bcc.n	8002aee <EE_Init+0x106>
 8002afe:	3401      	adds	r4, #1
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8002b00:	2c03      	cmp	r4, #3
 8002b02:	d1d7      	bne.n	8002ab4 <EE_Init+0xcc>
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 8002b04:	2200      	movs	r2, #0
 8002b06:	2300      	movs	r3, #0
 8002b08:	4962      	ldr	r1, [pc, #392]	; (8002c94 <EE_Init+0x2ac>)
 8002b0a:	2001      	movs	r0, #1
 8002b0c:	f7fe f8d4 	bl	8000cb8 <HAL_FLASH_Program>
        if (flashstatus != HAL_OK)
 8002b10:	2800      	cmp	r0, #0
 8002b12:	d1c1      	bne.n	8002a98 <EE_Init+0xb0>
        s_eraseinit.NbPages     = 1;
 8002b14:	2201      	movs	r2, #1
        s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 8002b16:	4b5e      	ldr	r3, [pc, #376]	; (8002c90 <EE_Init+0x2a8>)
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8002b18:	9002      	str	r0, [sp, #8]
        s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 8002b1a:	9303      	str	r3, [sp, #12]
        s_eraseinit.NbPages     = 1;
 8002b1c:	9204      	str	r2, [sp, #16]
    if (addressvalue != ERASED)
 8002b1e:	495f      	ldr	r1, [pc, #380]	; (8002c9c <EE_Init+0x2b4>)
  while (Address <= PAGE0_END_ADDRESS)
 8002b20:	485f      	ldr	r0, [pc, #380]	; (8002ca0 <EE_Init+0x2b8>)
 8002b22:	e003      	b.n	8002b2c <EE_Init+0x144>
    Address = Address + 4;
 8002b24:	3304      	adds	r3, #4
  while (Address <= PAGE0_END_ADDRESS)
 8002b26:	4283      	cmp	r3, r0
 8002b28:	d100      	bne.n	8002b2c <EE_Init+0x144>
 8002b2a:	e792      	b.n	8002a52 <EE_Init+0x6a>
    addressvalue = (*(__IO uint16_t*)Address);
 8002b2c:	881a      	ldrh	r2, [r3, #0]
    if (addressvalue != ERASED)
 8002b2e:	428a      	cmp	r2, r1
 8002b30:	d0f8      	beq.n	8002b24 <EE_Init+0x13c>
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8002b32:	4669      	mov	r1, sp
 8002b34:	a802      	add	r0, sp, #8
 8002b36:	f7fe f9fd 	bl	8000f34 <HAL_FLASHEx_Erase>
          if (flashstatus != HAL_OK)
 8002b3a:	2800      	cmp	r0, #0
 8002b3c:	d100      	bne.n	8002b40 <EE_Init+0x158>
 8002b3e:	e788      	b.n	8002a52 <EE_Init+0x6a>
        return flashstatus;
 8002b40:	b285      	uxth	r5, r0
 8002b42:	e787      	b.n	8002a54 <EE_Init+0x6c>
      if (pagestatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8002b44:	2d00      	cmp	r5, #0
 8002b46:	d146      	bne.n	8002bd6 <EE_Init+0x1ee>
  int16_t x = -1;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	425b      	negs	r3, r3
 8002b4c:	4698      	mov	r8, r3
      *Data = (*(__IO uint16_t*)(address - 2));
 8002b4e:	4b55      	ldr	r3, [pc, #340]	; (8002ca4 <EE_Init+0x2bc>)
 8002b50:	2400      	movs	r4, #0
 8002b52:	4699      	mov	r9, r3
 8002b54:	4f54      	ldr	r7, [pc, #336]	; (8002ca8 <EE_Init+0x2c0>)
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 8002b56:	4b59      	ldr	r3, [pc, #356]	; (8002cbc <EE_Init+0x2d4>)
 8002b58:	0062      	lsls	r2, r4, #1
 8002b5a:	881b      	ldrh	r3, [r3, #0]
 8002b5c:	5abd      	ldrh	r5, [r7, r2]
 8002b5e:	42ab      	cmp	r3, r5
 8002b60:	d101      	bne.n	8002b66 <EE_Init+0x17e>
            x = varidx;
 8002b62:	b223      	sxth	r3, r4
 8002b64:	4698      	mov	r8, r3
          if (varidx != x)
 8002b66:	4544      	cmp	r4, r8
 8002b68:	d018      	beq.n	8002b9c <EE_Init+0x1b4>
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002b6a:	4b49      	ldr	r3, [pc, #292]	; (8002c90 <EE_Init+0x2a8>)
 8002b6c:	881a      	ldrh	r2, [r3, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002b6e:	4b49      	ldr	r3, [pc, #292]	; (8002c94 <EE_Init+0x2ac>)
 8002b70:	881b      	ldrh	r3, [r3, #0]
 8002b72:	b29b      	uxth	r3, r3
      if (pagestatus0 == VALID_PAGE)
 8002b74:	2a00      	cmp	r2, #0
 8002b76:	d060      	beq.n	8002c3a <EE_Init+0x252>
      else if (pagestatus1 == VALID_PAGE)
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d000      	beq.n	8002b7e <EE_Init+0x196>
 8002b7c:	e116      	b.n	8002dac <EE_Init+0x3c4>
 8002b7e:	4a4c      	ldr	r2, [pc, #304]	; (8002cb0 <EE_Init+0x2c8>)
 8002b80:	494c      	ldr	r1, [pc, #304]	; (8002cb4 <EE_Init+0x2cc>)
 8002b82:	0013      	movs	r3, r2
 8002b84:	484c      	ldr	r0, [pc, #304]	; (8002cb8 <EE_Init+0x2d0>)
    addressvalue = (*(__IO uint16_t*)address);
 8002b86:	881b      	ldrh	r3, [r3, #0]
    if (addressvalue == VirtAddress)
 8002b88:	429d      	cmp	r5, r3
 8002b8a:	d104      	bne.n	8002b96 <EE_Init+0x1ae>
 8002b8c:	e060      	b.n	8002c50 <EE_Init+0x268>
    addressvalue = (*(__IO uint16_t*)address);
 8002b8e:	8819      	ldrh	r1, [r3, #0]
    if (addressvalue == VirtAddress)
 8002b90:	428d      	cmp	r5, r1
 8002b92:	d05c      	beq.n	8002c4e <EE_Init+0x266>
 8002b94:	001a      	movs	r2, r3
      address = address - 4;
 8002b96:	1f13      	subs	r3, r2, #4
  while (address > (PageStartAddress + 2))
 8002b98:	4283      	cmp	r3, r0
 8002b9a:	d8f8      	bhi.n	8002b8e <EE_Init+0x1a6>
 8002b9c:	3401      	adds	r4, #1
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8002b9e:	2c03      	cmp	r4, #3
 8002ba0:	d1d9      	bne.n	8002b56 <EE_Init+0x16e>
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	493a      	ldr	r1, [pc, #232]	; (8002c90 <EE_Init+0x2a8>)
 8002ba8:	2001      	movs	r0, #1
 8002baa:	f7fe f885 	bl	8000cb8 <HAL_FLASH_Program>
  if (flashstatus != HAL_OK)
 8002bae:	2800      	cmp	r0, #0
 8002bb0:	d100      	bne.n	8002bb4 <EE_Init+0x1cc>
 8002bb2:	e74e      	b.n	8002a52 <EE_Init+0x6a>
 8002bb4:	e770      	b.n	8002a98 <EE_Init+0xb0>
  while (Address <= PAGE0_END_ADDRESS)
 8002bb6:	483a      	ldr	r0, [pc, #232]	; (8002ca0 <EE_Init+0x2b8>)
 8002bb8:	e003      	b.n	8002bc2 <EE_Init+0x1da>
    Address = Address + 4;
 8002bba:	3104      	adds	r1, #4
  while (Address <= PAGE0_END_ADDRESS)
 8002bbc:	4281      	cmp	r1, r0
 8002bbe:	d100      	bne.n	8002bc2 <EE_Init+0x1da>
 8002bc0:	e747      	b.n	8002a52 <EE_Init+0x6a>
    addressvalue = (*(__IO uint16_t*)Address);
 8002bc2:	880a      	ldrh	r2, [r1, #0]
    if (addressvalue != ERASED)
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d0f8      	beq.n	8002bba <EE_Init+0x1d2>
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8002bc8:	4669      	mov	r1, sp
 8002bca:	a802      	add	r0, sp, #8
 8002bcc:	f7fe f9b2 	bl	8000f34 <HAL_FLASHEx_Erase>
          if (flashstatus != HAL_OK)
 8002bd0:	2800      	cmp	r0, #0
 8002bd2:	d1b5      	bne.n	8002b40 <EE_Init+0x158>
 8002bd4:	e73d      	b.n	8002a52 <EE_Init+0x6a>
      else if (pagestatus1 == ERASED) /* Page0 receive, Page1 erased */
 8002bd6:	4b31      	ldr	r3, [pc, #196]	; (8002c9c <EE_Init+0x2b4>)
 8002bd8:	429d      	cmp	r5, r3
 8002bda:	d100      	bne.n	8002bde <EE_Init+0x1f6>
 8002bdc:	e0b5      	b.n	8002d4a <EE_Init+0x362>
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8002bde:	a805      	add	r0, sp, #20
  uint32_t page_error = 0;
 8002be0:	9401      	str	r4, [sp, #4]
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8002be2:	9405      	str	r4, [sp, #20]
  s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 8002be4:	6041      	str	r1, [r0, #4]
  s_eraseinit.NbPages     = 1;
 8002be6:	6086      	str	r6, [r0, #8]
    if (addressvalue != ERASED)
 8002be8:	001a      	movs	r2, r3
  while (Address <= PAGE0_END_ADDRESS)
 8002bea:	4c2d      	ldr	r4, [pc, #180]	; (8002ca0 <EE_Init+0x2b8>)
 8002bec:	e003      	b.n	8002bf6 <EE_Init+0x20e>
    Address = Address + 4;
 8002bee:	3104      	adds	r1, #4
  while (Address <= PAGE0_END_ADDRESS)
 8002bf0:	42a1      	cmp	r1, r4
 8002bf2:	d100      	bne.n	8002bf6 <EE_Init+0x20e>
 8002bf4:	e725      	b.n	8002a42 <EE_Init+0x5a>
    addressvalue = (*(__IO uint16_t*)Address);
 8002bf6:	880b      	ldrh	r3, [r1, #0]
    if (addressvalue != ERASED)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d0f8      	beq.n	8002bee <EE_Init+0x206>
 8002bfc:	e71c      	b.n	8002a38 <EE_Init+0x50>
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8002bfe:	a805      	add	r0, sp, #20
  uint32_t page_error = 0;
 8002c00:	9501      	str	r5, [sp, #4]
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8002c02:	9505      	str	r5, [sp, #20]
  s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 8002c04:	6041      	str	r1, [r0, #4]
  s_eraseinit.NbPages     = 1;
 8002c06:	6086      	str	r6, [r0, #8]
    if (addressvalue != ERASED)
 8002c08:	0013      	movs	r3, r2
  while (Address <= PAGE0_END_ADDRESS)
 8002c0a:	4c25      	ldr	r4, [pc, #148]	; (8002ca0 <EE_Init+0x2b8>)
 8002c0c:	e002      	b.n	8002c14 <EE_Init+0x22c>
    Address = Address + 4;
 8002c0e:	3104      	adds	r1, #4
  while (Address <= PAGE0_END_ADDRESS)
 8002c10:	42a1      	cmp	r1, r4
 8002c12:	d008      	beq.n	8002c26 <EE_Init+0x23e>
    addressvalue = (*(__IO uint16_t*)Address);
 8002c14:	880a      	ldrh	r2, [r1, #0]
    if (addressvalue != ERASED)
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d0f9      	beq.n	8002c0e <EE_Init+0x226>
    flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error); 
 8002c1a:	a901      	add	r1, sp, #4
 8002c1c:	f7fe f98a 	bl	8000f34 <HAL_FLASHEx_Erase>
    if (flashstatus != HAL_OK)
 8002c20:	2800      	cmp	r0, #0
 8002c22:	d000      	beq.n	8002c26 <EE_Init+0x23e>
 8002c24:	e738      	b.n	8002a98 <EE_Init+0xb0>
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 8002c26:	2200      	movs	r2, #0
 8002c28:	2300      	movs	r3, #0
 8002c2a:	4919      	ldr	r1, [pc, #100]	; (8002c90 <EE_Init+0x2a8>)
 8002c2c:	2001      	movs	r0, #1
 8002c2e:	f7fe f843 	bl	8000cb8 <HAL_FLASH_Program>
  if (flashstatus != HAL_OK)
 8002c32:	2800      	cmp	r0, #0
 8002c34:	d100      	bne.n	8002c38 <EE_Init+0x250>
 8002c36:	e70d      	b.n	8002a54 <EE_Init+0x6c>
 8002c38:	e72e      	b.n	8002a98 <EE_Init+0xb0>
      if (pagestatus0 == VALID_PAGE)
 8002c3a:	4a21      	ldr	r2, [pc, #132]	; (8002cc0 <EE_Init+0x2d8>)
 8002c3c:	4921      	ldr	r1, [pc, #132]	; (8002cc4 <EE_Init+0x2dc>)
 8002c3e:	0013      	movs	r3, r2
 8002c40:	4821      	ldr	r0, [pc, #132]	; (8002cc8 <EE_Init+0x2e0>)
 8002c42:	e7a0      	b.n	8002b86 <EE_Init+0x19e>
 8002c44:	4b1e      	ldr	r3, [pc, #120]	; (8002cc0 <EE_Init+0x2d8>)
 8002c46:	491f      	ldr	r1, [pc, #124]	; (8002cc4 <EE_Init+0x2dc>)
 8002c48:	001a      	movs	r2, r3
 8002c4a:	481f      	ldr	r0, [pc, #124]	; (8002cc8 <EE_Init+0x2e0>)
 8002c4c:	e74b      	b.n	8002ae6 <EE_Init+0xfe>
 8002c4e:	1f91      	subs	r1, r2, #6
      *Data = (*(__IO uint16_t*)(address - 2));
 8002c50:	464b      	mov	r3, r9
 8002c52:	880a      	ldrh	r2, [r1, #0]
 8002c54:	b292      	uxth	r2, r2
 8002c56:	801a      	strh	r2, [r3, #0]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002c58:	4b0d      	ldr	r3, [pc, #52]	; (8002c90 <EE_Init+0x2a8>)
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002c5a:	490e      	ldr	r1, [pc, #56]	; (8002c94 <EE_Init+0x2ac>)
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002c5c:	8818      	ldrh	r0, [r3, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002c5e:	8809      	ldrh	r1, [r1, #0]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002c60:	b280      	uxth	r0, r0
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002c62:	b289      	uxth	r1, r1
      if (pagestatus1 == VALID_PAGE)
 8002c64:	2900      	cmp	r1, #0
 8002c66:	d062      	beq.n	8002d2e <EE_Init+0x346>
      else if (pagestatus0 == VALID_PAGE)
 8002c68:	2800      	cmp	r0, #0
 8002c6a:	d000      	beq.n	8002c6e <EE_Init+0x286>
 8002c6c:	e0a1      	b.n	8002db2 <EE_Init+0x3ca>
        if (pagestatus1 == RECEIVE_DATA)
 8002c6e:	480a      	ldr	r0, [pc, #40]	; (8002c98 <EE_Init+0x2b0>)
 8002c70:	4281      	cmp	r1, r0
 8002c72:	d05f      	beq.n	8002d34 <EE_Init+0x34c>
 8002c74:	001e      	movs	r6, r3
 8002c76:	4915      	ldr	r1, [pc, #84]	; (8002ccc <EE_Init+0x2e4>)

  /* Check each active page address starting from begining */
  while (address < pageendaddress)
  {
    /* Verify if address and address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	d103      	bne.n	8002c86 <EE_Init+0x29e>
 8002c7e:	e06f      	b.n	8002d60 <EE_Init+0x378>
 8002c80:	6833      	ldr	r3, [r6, #0]
 8002c82:	3301      	adds	r3, #1
 8002c84:	d06c      	beq.n	8002d60 <EE_Init+0x378>
      return flashstatus;
    }
    else
    {
      /* Next address location */
      address = address + 4;
 8002c86:	3604      	adds	r6, #4
  while (address < pageendaddress)
 8002c88:	428e      	cmp	r6, r1
 8002c8a:	d3f9      	bcc.n	8002c80 <EE_Init+0x298>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8002c8c:	2580      	movs	r5, #128	; 0x80
 8002c8e:	e6e1      	b.n	8002a54 <EE_Init+0x6c>
 8002c90:	08007000 	.word	0x08007000
 8002c94:	08007800 	.word	0x08007800
 8002c98:	0000eeee 	.word	0x0000eeee
 8002c9c:	0000ffff 	.word	0x0000ffff
 8002ca0:	08007400 	.word	0x08007400
 8002ca4:	200000f4 	.word	0x200000f4
 8002ca8:	2000000c 	.word	0x2000000c
 8002cac:	08007806 	.word	0x08007806
 8002cb0:	0800f3fe 	.word	0x0800f3fe
 8002cb4:	0800f3fc 	.word	0x0800f3fc
 8002cb8:	0800f002 	.word	0x0800f002
 8002cbc:	08007006 	.word	0x08007006
 8002cc0:	080073fe 	.word	0x080073fe
 8002cc4:	080073fc 	.word	0x080073fc
 8002cc8:	08007002 	.word	0x08007002
 8002ccc:	080073ff 	.word	0x080073ff
 8002cd0:	1f91      	subs	r1, r2, #6
      *Data = (*(__IO uint16_t*)(address - 2));
 8002cd2:	464b      	mov	r3, r9
 8002cd4:	880a      	ldrh	r2, [r1, #0]
 8002cd6:	b292      	uxth	r2, r2
 8002cd8:	801a      	strh	r2, [r3, #0]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002cda:	4b38      	ldr	r3, [pc, #224]	; (8002dbc <EE_Init+0x3d4>)
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002cdc:	4938      	ldr	r1, [pc, #224]	; (8002dc0 <EE_Init+0x3d8>)
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002cde:	8818      	ldrh	r0, [r3, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002ce0:	8809      	ldrh	r1, [r1, #0]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002ce2:	b280      	uxth	r0, r0
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002ce4:	b289      	uxth	r1, r1
      if (pagestatus1 == VALID_PAGE)
 8002ce6:	2900      	cmp	r1, #0
 8002ce8:	d028      	beq.n	8002d3c <EE_Init+0x354>
      else if (pagestatus0 == VALID_PAGE)
 8002cea:	2800      	cmp	r0, #0
 8002cec:	d161      	bne.n	8002db2 <EE_Init+0x3ca>
        if (pagestatus1 == RECEIVE_DATA)
 8002cee:	4835      	ldr	r0, [pc, #212]	; (8002dc4 <EE_Init+0x3dc>)
 8002cf0:	4281      	cmp	r1, r0
 8002cf2:	d026      	beq.n	8002d42 <EE_Init+0x35a>
 8002cf4:	001e      	movs	r6, r3
 8002cf6:	4934      	ldr	r1, [pc, #208]	; (8002dc8 <EE_Init+0x3e0>)
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	d103      	bne.n	8002d06 <EE_Init+0x31e>
 8002cfe:	e042      	b.n	8002d86 <EE_Init+0x39e>
 8002d00:	6833      	ldr	r3, [r6, #0]
 8002d02:	3301      	adds	r3, #1
 8002d04:	d03f      	beq.n	8002d86 <EE_Init+0x39e>
      address = address + 4;
 8002d06:	3604      	adds	r6, #4
  while (address < pageendaddress)
 8002d08:	42b1      	cmp	r1, r6
 8002d0a:	d8f9      	bhi.n	8002d00 <EE_Init+0x318>
  return PAGE_FULL;
 8002d0c:	2580      	movs	r5, #128	; 0x80
 8002d0e:	e6a1      	b.n	8002a54 <EE_Init+0x6c>
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8002d10:	a805      	add	r0, sp, #20
  uint32_t page_error = 0;
 8002d12:	9401      	str	r4, [sp, #4]
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8002d14:	9405      	str	r4, [sp, #20]
  s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 8002d16:	6041      	str	r1, [r0, #4]
  s_eraseinit.NbPages     = 1;
 8002d18:	6086      	str	r6, [r0, #8]
  while (Address <= PAGE0_END_ADDRESS)
 8002d1a:	4c2c      	ldr	r4, [pc, #176]	; (8002dcc <EE_Init+0x3e4>)
 8002d1c:	e003      	b.n	8002d26 <EE_Init+0x33e>
    Address = Address + 4;
 8002d1e:	3104      	adds	r1, #4
  while (Address <= PAGE0_END_ADDRESS)
 8002d20:	42a1      	cmp	r1, r4
 8002d22:	d100      	bne.n	8002d26 <EE_Init+0x33e>
 8002d24:	e68d      	b.n	8002a42 <EE_Init+0x5a>
    addressvalue = (*(__IO uint16_t*)Address);
 8002d26:	880a      	ldrh	r2, [r1, #0]
    if (addressvalue != ERASED)
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d0f8      	beq.n	8002d1e <EE_Init+0x336>
 8002d2c:	e684      	b.n	8002a38 <EE_Init+0x50>
        if (pagestatus0 == RECEIVE_DATA)
 8002d2e:	4925      	ldr	r1, [pc, #148]	; (8002dc4 <EE_Init+0x3dc>)
 8002d30:	4288      	cmp	r0, r1
 8002d32:	d09f      	beq.n	8002c74 <EE_Init+0x28c>
 8002d34:	4b26      	ldr	r3, [pc, #152]	; (8002dd0 <EE_Init+0x3e8>)
 8002d36:	4927      	ldr	r1, [pc, #156]	; (8002dd4 <EE_Init+0x3ec>)
 8002d38:	001e      	movs	r6, r3
 8002d3a:	e79d      	b.n	8002c78 <EE_Init+0x290>
 8002d3c:	4921      	ldr	r1, [pc, #132]	; (8002dc4 <EE_Init+0x3dc>)
 8002d3e:	4288      	cmp	r0, r1
 8002d40:	d0d8      	beq.n	8002cf4 <EE_Init+0x30c>
 8002d42:	4b23      	ldr	r3, [pc, #140]	; (8002dd0 <EE_Init+0x3e8>)
 8002d44:	4923      	ldr	r1, [pc, #140]	; (8002dd4 <EE_Init+0x3ec>)
 8002d46:	001e      	movs	r6, r3
 8002d48:	e7d6      	b.n	8002cf8 <EE_Init+0x310>
        s_eraseinit.PageAddress = PAGE1_BASE_ADDRESS;
 8002d4a:	9203      	str	r2, [sp, #12]
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	2200      	movs	r2, #0
 8002d50:	2001      	movs	r0, #1
 8002d52:	f7fd ffb1 	bl	8000cb8 <HAL_FLASH_Program>
        if (flashstatus != HAL_OK)
 8002d56:	2800      	cmp	r0, #0
 8002d58:	d100      	bne.n	8002d5c <EE_Init+0x374>
 8002d5a:	e67a      	b.n	8002a52 <EE_Init+0x6a>
        return flashstatus;
 8002d5c:	b285      	uxth	r5, r0
 8002d5e:	e679      	b.n	8002a54 <EE_Init+0x6c>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, Data);       
 8002d60:	2300      	movs	r3, #0
 8002d62:	0031      	movs	r1, r6
 8002d64:	2001      	movs	r0, #1
 8002d66:	f7fd ffa7 	bl	8000cb8 <HAL_FLASH_Program>
      if (flashstatus != HAL_OK)
 8002d6a:	2800      	cmp	r0, #0
 8002d6c:	d000      	beq.n	8002d70 <EE_Init+0x388>
 8002d6e:	e693      	b.n	8002a98 <EE_Init+0xb0>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, VirtAddress);       
 8002d70:	002a      	movs	r2, r5
 8002d72:	1cb1      	adds	r1, r6, #2
 8002d74:	2300      	movs	r3, #0
 8002d76:	2001      	movs	r0, #1
 8002d78:	f7fd ff9e 	bl	8000cb8 <HAL_FLASH_Program>
      return flashstatus;
 8002d7c:	b285      	uxth	r5, r0
              if (eepromstatus != HAL_OK)
 8002d7e:	2d00      	cmp	r5, #0
 8002d80:	d100      	bne.n	8002d84 <EE_Init+0x39c>
 8002d82:	e70b      	b.n	8002b9c <EE_Init+0x1b4>
 8002d84:	e666      	b.n	8002a54 <EE_Init+0x6c>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, Data);       
 8002d86:	2300      	movs	r3, #0
 8002d88:	0031      	movs	r1, r6
 8002d8a:	2001      	movs	r0, #1
 8002d8c:	f7fd ff94 	bl	8000cb8 <HAL_FLASH_Program>
      if (flashstatus != HAL_OK)
 8002d90:	2800      	cmp	r0, #0
 8002d92:	d000      	beq.n	8002d96 <EE_Init+0x3ae>
 8002d94:	e680      	b.n	8002a98 <EE_Init+0xb0>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, VirtAddress);       
 8002d96:	002a      	movs	r2, r5
 8002d98:	1cb1      	adds	r1, r6, #2
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	2001      	movs	r0, #1
 8002d9e:	f7fd ff8b 	bl	8000cb8 <HAL_FLASH_Program>
      return flashstatus;
 8002da2:	b285      	uxth	r5, r0
              if (eepromstatus != HAL_OK)
 8002da4:	2d00      	cmp	r5, #0
 8002da6:	d100      	bne.n	8002daa <EE_Init+0x3c2>
 8002da8:	e6a9      	b.n	8002afe <EE_Init+0x116>
 8002daa:	e653      	b.n	8002a54 <EE_Init+0x6c>
 8002dac:	4b0a      	ldr	r3, [pc, #40]	; (8002dd8 <EE_Init+0x3f0>)
 8002dae:	881a      	ldrh	r2, [r3, #0]
 8002db0:	e752      	b.n	8002c58 <EE_Init+0x270>
    return  NO_VALID_PAGE;
 8002db2:	25ab      	movs	r5, #171	; 0xab
 8002db4:	e64e      	b.n	8002a54 <EE_Init+0x6c>
 8002db6:	4b08      	ldr	r3, [pc, #32]	; (8002dd8 <EE_Init+0x3f0>)
 8002db8:	881a      	ldrh	r2, [r3, #0]
 8002dba:	e78e      	b.n	8002cda <EE_Init+0x2f2>
 8002dbc:	08007000 	.word	0x08007000
 8002dc0:	08007800 	.word	0x08007800
 8002dc4:	0000eeee 	.word	0x0000eeee
 8002dc8:	080073ff 	.word	0x080073ff
 8002dcc:	08007400 	.word	0x08007400
 8002dd0:	0800f000 	.word	0x0800f000
 8002dd4:	0800f3ff 	.word	0x0800f3ff
 8002dd8:	200000f4 	.word	0x200000f4

08002ddc <EE_ReadVariable>:
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002ddc:	4b13      	ldr	r3, [pc, #76]	; (8002e2c <EE_ReadVariable+0x50>)
{
 8002dde:	b530      	push	{r4, r5, lr}
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002de0:	881a      	ldrh	r2, [r3, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002de2:	4b13      	ldr	r3, [pc, #76]	; (8002e30 <EE_ReadVariable+0x54>)
 8002de4:	881b      	ldrh	r3, [r3, #0]
 8002de6:	b29b      	uxth	r3, r3
      if (pagestatus0 == VALID_PAGE)
 8002de8:	2a00      	cmp	r2, #0
 8002dea:	d006      	beq.n	8002dfa <EE_ReadVariable+0x1e>
      else if (pagestatus1 == VALID_PAGE)
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d11a      	bne.n	8002e26 <EE_ReadVariable+0x4a>
 8002df0:	4a10      	ldr	r2, [pc, #64]	; (8002e34 <EE_ReadVariable+0x58>)
 8002df2:	4c11      	ldr	r4, [pc, #68]	; (8002e38 <EE_ReadVariable+0x5c>)
 8002df4:	4d11      	ldr	r5, [pc, #68]	; (8002e3c <EE_ReadVariable+0x60>)
 8002df6:	0013      	movs	r3, r2
 8002df8:	e003      	b.n	8002e02 <EE_ReadVariable+0x26>
      if (pagestatus0 == VALID_PAGE)
 8002dfa:	4a11      	ldr	r2, [pc, #68]	; (8002e40 <EE_ReadVariable+0x64>)
 8002dfc:	4c11      	ldr	r4, [pc, #68]	; (8002e44 <EE_ReadVariable+0x68>)
 8002dfe:	0013      	movs	r3, r2
 8002e00:	4d11      	ldr	r5, [pc, #68]	; (8002e48 <EE_ReadVariable+0x6c>)
    addressvalue = (*(__IO uint16_t*)address);
 8002e02:	881b      	ldrh	r3, [r3, #0]
    if (addressvalue == VirtAddress)
 8002e04:	4298      	cmp	r0, r3
 8002e06:	d104      	bne.n	8002e12 <EE_ReadVariable+0x36>
 8002e08:	e009      	b.n	8002e1e <EE_ReadVariable+0x42>
    addressvalue = (*(__IO uint16_t*)address);
 8002e0a:	881c      	ldrh	r4, [r3, #0]
    if (addressvalue == VirtAddress)
 8002e0c:	4284      	cmp	r4, r0
 8002e0e:	d005      	beq.n	8002e1c <EE_ReadVariable+0x40>
 8002e10:	001a      	movs	r2, r3
      address = address - 4;
 8002e12:	1f13      	subs	r3, r2, #4
  while (address > (PageStartAddress + 2))
 8002e14:	42ab      	cmp	r3, r5
 8002e16:	d8f8      	bhi.n	8002e0a <EE_ReadVariable+0x2e>
  uint16_t addressvalue = 0x5555, readstatus = 1;
 8002e18:	2001      	movs	r0, #1
}
 8002e1a:	bd30      	pop	{r4, r5, pc}
 8002e1c:	1f94      	subs	r4, r2, #6
      *Data = (*(__IO uint16_t*)(address - 2));
 8002e1e:	8823      	ldrh	r3, [r4, #0]
      readstatus = 0;
 8002e20:	2000      	movs	r0, #0
      *Data = (*(__IO uint16_t*)(address - 2));
 8002e22:	800b      	strh	r3, [r1, #0]
      break;
 8002e24:	e7f9      	b.n	8002e1a <EE_ReadVariable+0x3e>
    return  NO_VALID_PAGE;
 8002e26:	20ab      	movs	r0, #171	; 0xab
 8002e28:	e7f7      	b.n	8002e1a <EE_ReadVariable+0x3e>
 8002e2a:	46c0      	nop			; (mov r8, r8)
 8002e2c:	08007000 	.word	0x08007000
 8002e30:	08007800 	.word	0x08007800
 8002e34:	0800f3fe 	.word	0x0800f3fe
 8002e38:	0800f3fc 	.word	0x0800f3fc
 8002e3c:	0800f002 	.word	0x0800f002
 8002e40:	080073fe 	.word	0x080073fe
 8002e44:	080073fc 	.word	0x080073fc
 8002e48:	08007002 	.word	0x08007002

08002e4c <EE_WriteVariable>:
{
 8002e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e4e:	4657      	mov	r7, sl
 8002e50:	464e      	mov	r6, r9
 8002e52:	4645      	mov	r5, r8
 8002e54:	46de      	mov	lr, fp
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002e56:	4b88      	ldr	r3, [pc, #544]	; (8003078 <EE_WriteVariable+0x22c>)
{
 8002e58:	b5e0      	push	{r5, r6, r7, lr}
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002e5a:	4d88      	ldr	r5, [pc, #544]	; (800307c <EE_WriteVariable+0x230>)
{
 8002e5c:	b085      	sub	sp, #20
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002e5e:	882a      	ldrh	r2, [r5, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002e60:	881b      	ldrh	r3, [r3, #0]
{
 8002e62:	0006      	movs	r6, r0
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002e64:	b29b      	uxth	r3, r3
{
 8002e66:	000f      	movs	r7, r1
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002e68:	b292      	uxth	r2, r2
      if (pagestatus1 == VALID_PAGE)
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d106      	bne.n	8002e7c <EE_WriteVariable+0x30>
        if (pagestatus0 == RECEIVE_DATA)
 8002e6e:	4b84      	ldr	r3, [pc, #528]	; (8003080 <EE_WriteVariable+0x234>)
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d008      	beq.n	8002e86 <EE_WriteVariable+0x3a>
 8002e74:	4d83      	ldr	r5, [pc, #524]	; (8003084 <EE_WriteVariable+0x238>)
 8002e76:	4a84      	ldr	r2, [pc, #528]	; (8003088 <EE_WriteVariable+0x23c>)
 8002e78:	002b      	movs	r3, r5
 8002e7a:	e006      	b.n	8002e8a <EE_WriteVariable+0x3e>
      else if (pagestatus0 == VALID_PAGE)
 8002e7c:	2a00      	cmp	r2, #0
 8002e7e:	d122      	bne.n	8002ec6 <EE_WriteVariable+0x7a>
        if (pagestatus1 == RECEIVE_DATA)
 8002e80:	4a7f      	ldr	r2, [pc, #508]	; (8003080 <EE_WriteVariable+0x234>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d0f6      	beq.n	8002e74 <EE_WriteVariable+0x28>
 8002e86:	002b      	movs	r3, r5
 8002e88:	4a80      	ldr	r2, [pc, #512]	; (800308c <EE_WriteVariable+0x240>)
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	d103      	bne.n	8002e98 <EE_WriteVariable+0x4c>
 8002e90:	e022      	b.n	8002ed8 <EE_WriteVariable+0x8c>
 8002e92:	682b      	ldr	r3, [r5, #0]
 8002e94:	3301      	adds	r3, #1
 8002e96:	d01f      	beq.n	8002ed8 <EE_WriteVariable+0x8c>
      address = address + 4;
 8002e98:	3504      	adds	r5, #4
  while (address < pageendaddress)
 8002e9a:	4295      	cmp	r5, r2
 8002e9c:	d3f9      	bcc.n	8002e92 <EE_WriteVariable+0x46>
  HAL_StatusTypeDef flashstatus = HAL_OK;
  uint32_t newpageaddress = EEPROM_START_ADDRESS;
  uint32_t oldpageid = 0;
  uint16_t validpage = PAGE0, varidx = 0;
  uint16_t eepromstatus = 0, readstatus = 0;
  uint32_t page_error = 0;
 8002e9e:	2300      	movs	r3, #0
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002ea0:	4a76      	ldr	r2, [pc, #472]	; (800307c <EE_WriteVariable+0x230>)
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002ea2:	4d75      	ldr	r5, [pc, #468]	; (8003078 <EE_WriteVariable+0x22c>)
  uint32_t page_error = 0;
 8002ea4:	9300      	str	r3, [sp, #0]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002ea6:	8811      	ldrh	r1, [r2, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002ea8:	882b      	ldrh	r3, [r5, #0]
 8002eaa:	b29b      	uxth	r3, r3
      if (pagestatus0 == VALID_PAGE)
 8002eac:	2900      	cmp	r1, #0
 8002eae:	d11f      	bne.n	8002ef0 <EE_WriteVariable+0xa4>
  {
    /* New page address  where variable will be moved to */
    newpageaddress = PAGE1_BASE_ADDRESS;

    /* Old page ID where variable will be taken from */
    oldpageid = PAGE0_BASE_ADDRESS;
 8002eb0:	4692      	mov	sl, r2
  {
    return NO_VALID_PAGE;       /* No valid Page */
  }

  /* Set the new Page status to RECEIVE_DATA status */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, newpageaddress, RECEIVE_DATA);  
 8002eb2:	4a73      	ldr	r2, [pc, #460]	; (8003080 <EE_WriteVariable+0x234>)
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	0029      	movs	r1, r5
 8002eb8:	2001      	movs	r0, #1
 8002eba:	f7fd fefd 	bl	8000cb8 <HAL_FLASH_Program>
  /* If program operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 8002ebe:	2800      	cmp	r0, #0
 8002ec0:	d01b      	beq.n	8002efa <EE_WriteVariable+0xae>
  /* Set new Page status to VALID_PAGE status */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, newpageaddress, VALID_PAGE);   
  /* If program operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
  {
    return flashstatus;
 8002ec2:	b284      	uxth	r4, r0
 8002ec4:	e000      	b.n	8002ec8 <EE_WriteVariable+0x7c>
    return  NO_VALID_PAGE;
 8002ec6:	24ab      	movs	r4, #171	; 0xab
}
 8002ec8:	0020      	movs	r0, r4
 8002eca:	b005      	add	sp, #20
 8002ecc:	bc3c      	pop	{r2, r3, r4, r5}
 8002ece:	4690      	mov	r8, r2
 8002ed0:	4699      	mov	r9, r3
 8002ed2:	46a2      	mov	sl, r4
 8002ed4:	46ab      	mov	fp, r5
 8002ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, Data);       
 8002ed8:	003a      	movs	r2, r7
 8002eda:	2300      	movs	r3, #0
 8002edc:	0029      	movs	r1, r5
 8002ede:	2001      	movs	r0, #1
 8002ee0:	f7fd feea 	bl	8000cb8 <HAL_FLASH_Program>
      if (flashstatus != HAL_OK)
 8002ee4:	2800      	cmp	r0, #0
 8002ee6:	d023      	beq.n	8002f30 <EE_WriteVariable+0xe4>
      return flashstatus;
 8002ee8:	b284      	uxth	r4, r0
  if (Status == PAGE_FULL)
 8002eea:	2c80      	cmp	r4, #128	; 0x80
 8002eec:	d1ec      	bne.n	8002ec8 <EE_WriteVariable+0x7c>
 8002eee:	e7d6      	b.n	8002e9e <EE_WriteVariable+0x52>
      else if (pagestatus1 == VALID_PAGE)
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1e8      	bne.n	8002ec6 <EE_WriteVariable+0x7a>
    oldpageid = PAGE1_BASE_ADDRESS;
 8002ef4:	46aa      	mov	sl, r5
    newpageaddress = PAGE0_BASE_ADDRESS;
 8002ef6:	0015      	movs	r5, r2
 8002ef8:	e7db      	b.n	8002eb2 <EE_WriteVariable+0x66>
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002efa:	4c60      	ldr	r4, [pc, #384]	; (800307c <EE_WriteVariable+0x230>)
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002efc:	4b5e      	ldr	r3, [pc, #376]	; (8003078 <EE_WriteVariable+0x22c>)
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002efe:	8822      	ldrh	r2, [r4, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002f00:	881b      	ldrh	r3, [r3, #0]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002f02:	b292      	uxth	r2, r2
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002f04:	b29b      	uxth	r3, r3
      if (pagestatus1 == VALID_PAGE)
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d019      	beq.n	8002f3e <EE_WriteVariable+0xf2>
      else if (pagestatus0 == VALID_PAGE)
 8002f0a:	2a00      	cmp	r2, #0
 8002f0c:	d1db      	bne.n	8002ec6 <EE_WriteVariable+0x7a>
        if (pagestatus1 == RECEIVE_DATA)
 8002f0e:	4a5c      	ldr	r2, [pc, #368]	; (8003080 <EE_WriteVariable+0x234>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d017      	beq.n	8002f44 <EE_WriteVariable+0xf8>
 8002f14:	0023      	movs	r3, r4
 8002f16:	4a5d      	ldr	r2, [pc, #372]	; (800308c <EE_WriteVariable+0x240>)
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	d103      	bne.n	8002f26 <EE_WriteVariable+0xda>
 8002f1e:	e015      	b.n	8002f4c <EE_WriteVariable+0x100>
 8002f20:	6823      	ldr	r3, [r4, #0]
 8002f22:	3301      	adds	r3, #1
 8002f24:	d012      	beq.n	8002f4c <EE_WriteVariable+0x100>
      address = address + 4;
 8002f26:	3404      	adds	r4, #4
  while (address < pageendaddress)
 8002f28:	4294      	cmp	r4, r2
 8002f2a:	d3f9      	bcc.n	8002f20 <EE_WriteVariable+0xd4>
  return PAGE_FULL;
 8002f2c:	2480      	movs	r4, #128	; 0x80
 8002f2e:	e7cb      	b.n	8002ec8 <EE_WriteVariable+0x7c>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, VirtAddress);       
 8002f30:	1ca9      	adds	r1, r5, #2
 8002f32:	0032      	movs	r2, r6
 8002f34:	2300      	movs	r3, #0
 8002f36:	2001      	movs	r0, #1
 8002f38:	f7fd febe 	bl	8000cb8 <HAL_FLASH_Program>
 8002f3c:	e7d4      	b.n	8002ee8 <EE_WriteVariable+0x9c>
        if (pagestatus0 == RECEIVE_DATA)
 8002f3e:	4b50      	ldr	r3, [pc, #320]	; (8003080 <EE_WriteVariable+0x234>)
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d0e7      	beq.n	8002f14 <EE_WriteVariable+0xc8>
 8002f44:	4c4f      	ldr	r4, [pc, #316]	; (8003084 <EE_WriteVariable+0x238>)
 8002f46:	4a50      	ldr	r2, [pc, #320]	; (8003088 <EE_WriteVariable+0x23c>)
 8002f48:	0023      	movs	r3, r4
 8002f4a:	e7e5      	b.n	8002f18 <EE_WriteVariable+0xcc>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, Data);       
 8002f4c:	003a      	movs	r2, r7
 8002f4e:	2300      	movs	r3, #0
 8002f50:	0021      	movs	r1, r4
 8002f52:	2001      	movs	r0, #1
 8002f54:	f7fd feb0 	bl	8000cb8 <HAL_FLASH_Program>
      if (flashstatus != HAL_OK)
 8002f58:	2800      	cmp	r0, #0
 8002f5a:	d1b2      	bne.n	8002ec2 <EE_WriteVariable+0x76>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, VirtAddress);       
 8002f5c:	1ca1      	adds	r1, r4, #2
 8002f5e:	0032      	movs	r2, r6
 8002f60:	2300      	movs	r3, #0
 8002f62:	2001      	movs	r0, #1
 8002f64:	f7fd fea8 	bl	8000cb8 <HAL_FLASH_Program>
      return flashstatus;
 8002f68:	b284      	uxth	r4, r0
  if (eepromstatus != HAL_OK)
 8002f6a:	2c00      	cmp	r4, #0
 8002f6c:	d1ac      	bne.n	8002ec8 <EE_WriteVariable+0x7c>
 8002f6e:	2300      	movs	r3, #0
 8002f70:	4699      	mov	r9, r3
 8002f72:	4b47      	ldr	r3, [pc, #284]	; (8003090 <EE_WriteVariable+0x244>)
 8002f74:	46a0      	mov	r8, r4
 8002f76:	469b      	mov	fp, r3
 8002f78:	0034      	movs	r4, r6
 8002f7a:	464e      	mov	r6, r9
 8002f7c:	46a9      	mov	r9, r5
    if (VirtAddVarTab[varidx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8002f7e:	465a      	mov	r2, fp
 8002f80:	0073      	lsls	r3, r6, #1
 8002f82:	5ad7      	ldrh	r7, [r2, r3]
 8002f84:	42bc      	cmp	r4, r7
 8002f86:	d017      	beq.n	8002fb8 <EE_WriteVariable+0x16c>
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002f88:	4b3c      	ldr	r3, [pc, #240]	; (800307c <EE_WriteVariable+0x230>)
 8002f8a:	881a      	ldrh	r2, [r3, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002f8c:	4b3a      	ldr	r3, [pc, #232]	; (8003078 <EE_WriteVariable+0x22c>)
 8002f8e:	881b      	ldrh	r3, [r3, #0]
 8002f90:	b29b      	uxth	r3, r3
      if (pagestatus0 == VALID_PAGE)
 8002f92:	2a00      	cmp	r2, #0
 8002f94:	d02c      	beq.n	8002ff0 <EE_WriteVariable+0x1a4>
      else if (pagestatus1 == VALID_PAGE)
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d16a      	bne.n	8003070 <EE_WriteVariable+0x224>
 8002f9a:	4a3e      	ldr	r2, [pc, #248]	; (8003094 <EE_WriteVariable+0x248>)
 8002f9c:	493e      	ldr	r1, [pc, #248]	; (8003098 <EE_WriteVariable+0x24c>)
 8002f9e:	0013      	movs	r3, r2
 8002fa0:	483e      	ldr	r0, [pc, #248]	; (800309c <EE_WriteVariable+0x250>)
    addressvalue = (*(__IO uint16_t*)address);
 8002fa2:	881b      	ldrh	r3, [r3, #0]
    if (addressvalue == VirtAddress)
 8002fa4:	429f      	cmp	r7, r3
 8002fa6:	d104      	bne.n	8002fb2 <EE_WriteVariable+0x166>
 8002fa8:	e028      	b.n	8002ffc <EE_WriteVariable+0x1b0>
    addressvalue = (*(__IO uint16_t*)address);
 8002faa:	8819      	ldrh	r1, [r3, #0]
    if (addressvalue == VirtAddress)
 8002fac:	428f      	cmp	r7, r1
 8002fae:	d024      	beq.n	8002ffa <EE_WriteVariable+0x1ae>
 8002fb0:	001a      	movs	r2, r3
      address = address - 4;
 8002fb2:	1f13      	subs	r3, r2, #4
  while (address > (PageStartAddress + 2))
 8002fb4:	4298      	cmp	r0, r3
 8002fb6:	d3f8      	bcc.n	8002faa <EE_WriteVariable+0x15e>
 8002fb8:	3601      	adds	r6, #1
  for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8002fba:	2e03      	cmp	r6, #3
 8002fbc:	d1df      	bne.n	8002f7e <EE_WriteVariable+0x132>
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	9301      	str	r3, [sp, #4]
  s_eraseinit.PageAddress = oldpageid;
 8002fc2:	4653      	mov	r3, sl
 8002fc4:	9302      	str	r3, [sp, #8]
  s_eraseinit.NbPages     = 1;
 8002fc6:	2301      	movs	r3, #1
  flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);  
 8002fc8:	4669      	mov	r1, sp
 8002fca:	a801      	add	r0, sp, #4
 8002fcc:	4644      	mov	r4, r8
  s_eraseinit.NbPages     = 1;
 8002fce:	9303      	str	r3, [sp, #12]
  flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);  
 8002fd0:	f7fd ffb0 	bl	8000f34 <HAL_FLASHEx_Erase>
  if (flashstatus != HAL_OK)
 8002fd4:	2800      	cmp	r0, #0
 8002fd6:	d000      	beq.n	8002fda <EE_WriteVariable+0x18e>
 8002fd8:	e773      	b.n	8002ec2 <EE_WriteVariable+0x76>
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, newpageaddress, VALID_PAGE);   
 8002fda:	2200      	movs	r2, #0
 8002fdc:	2300      	movs	r3, #0
 8002fde:	4649      	mov	r1, r9
 8002fe0:	2001      	movs	r0, #1
 8002fe2:	f7fd fe69 	bl	8000cb8 <HAL_FLASH_Program>
  if (flashstatus != HAL_OK)
 8002fe6:	2800      	cmp	r0, #0
 8002fe8:	d100      	bne.n	8002fec <EE_WriteVariable+0x1a0>
 8002fea:	e76d      	b.n	8002ec8 <EE_WriteVariable+0x7c>
    return flashstatus;
 8002fec:	b284      	uxth	r4, r0
 8002fee:	e76b      	b.n	8002ec8 <EE_WriteVariable+0x7c>
      if (pagestatus0 == VALID_PAGE)
 8002ff0:	4a2b      	ldr	r2, [pc, #172]	; (80030a0 <EE_WriteVariable+0x254>)
 8002ff2:	492c      	ldr	r1, [pc, #176]	; (80030a4 <EE_WriteVariable+0x258>)
 8002ff4:	482c      	ldr	r0, [pc, #176]	; (80030a8 <EE_WriteVariable+0x25c>)
 8002ff6:	0013      	movs	r3, r2
 8002ff8:	e7d3      	b.n	8002fa2 <EE_WriteVariable+0x156>
 8002ffa:	1f91      	subs	r1, r2, #6
      *Data = (*(__IO uint16_t*)(address - 2));
 8002ffc:	880a      	ldrh	r2, [r1, #0]
 8002ffe:	4b2b      	ldr	r3, [pc, #172]	; (80030ac <EE_WriteVariable+0x260>)
 8003000:	b292      	uxth	r2, r2
 8003002:	801a      	strh	r2, [r3, #0]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8003004:	4b1d      	ldr	r3, [pc, #116]	; (800307c <EE_WriteVariable+0x230>)
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8003006:	491c      	ldr	r1, [pc, #112]	; (8003078 <EE_WriteVariable+0x22c>)
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8003008:	8818      	ldrh	r0, [r3, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800300a:	8809      	ldrh	r1, [r1, #0]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800300c:	b280      	uxth	r0, r0
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800300e:	b289      	uxth	r1, r1
      if (pagestatus1 == VALID_PAGE)
 8003010:	2900      	cmp	r1, #0
 8003012:	d111      	bne.n	8003038 <EE_WriteVariable+0x1ec>
        if (pagestatus0 == RECEIVE_DATA)
 8003014:	491a      	ldr	r1, [pc, #104]	; (8003080 <EE_WriteVariable+0x234>)
 8003016:	4288      	cmp	r0, r1
 8003018:	d014      	beq.n	8003044 <EE_WriteVariable+0x1f8>
 800301a:	4b1a      	ldr	r3, [pc, #104]	; (8003084 <EE_WriteVariable+0x238>)
 800301c:	491a      	ldr	r1, [pc, #104]	; (8003088 <EE_WriteVariable+0x23c>)
 800301e:	001d      	movs	r5, r3
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	3301      	adds	r3, #1
 8003024:	d103      	bne.n	800302e <EE_WriteVariable+0x1e2>
 8003026:	e010      	b.n	800304a <EE_WriteVariable+0x1fe>
 8003028:	682b      	ldr	r3, [r5, #0]
 800302a:	3301      	adds	r3, #1
 800302c:	d00d      	beq.n	800304a <EE_WriteVariable+0x1fe>
      address = address + 4;
 800302e:	3504      	adds	r5, #4
  while (address < pageendaddress)
 8003030:	428d      	cmp	r5, r1
 8003032:	d3f9      	bcc.n	8003028 <EE_WriteVariable+0x1dc>
  return PAGE_FULL;
 8003034:	2480      	movs	r4, #128	; 0x80
 8003036:	e747      	b.n	8002ec8 <EE_WriteVariable+0x7c>
      else if (pagestatus0 == VALID_PAGE)
 8003038:	2800      	cmp	r0, #0
 800303a:	d000      	beq.n	800303e <EE_WriteVariable+0x1f2>
 800303c:	e743      	b.n	8002ec6 <EE_WriteVariable+0x7a>
        if (pagestatus1 == RECEIVE_DATA)
 800303e:	4810      	ldr	r0, [pc, #64]	; (8003080 <EE_WriteVariable+0x234>)
 8003040:	4281      	cmp	r1, r0
 8003042:	d0ea      	beq.n	800301a <EE_WriteVariable+0x1ce>
 8003044:	4911      	ldr	r1, [pc, #68]	; (800308c <EE_WriteVariable+0x240>)
 8003046:	001d      	movs	r5, r3
 8003048:	e7ea      	b.n	8003020 <EE_WriteVariable+0x1d4>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, Data);       
 800304a:	2300      	movs	r3, #0
 800304c:	0029      	movs	r1, r5
 800304e:	2001      	movs	r0, #1
 8003050:	f7fd fe32 	bl	8000cb8 <HAL_FLASH_Program>
      if (flashstatus != HAL_OK)
 8003054:	2800      	cmp	r0, #0
 8003056:	d000      	beq.n	800305a <EE_WriteVariable+0x20e>
 8003058:	e733      	b.n	8002ec2 <EE_WriteVariable+0x76>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, VirtAddress);       
 800305a:	1ca9      	adds	r1, r5, #2
 800305c:	003a      	movs	r2, r7
 800305e:	2300      	movs	r3, #0
 8003060:	2001      	movs	r0, #1
 8003062:	f7fd fe29 	bl	8000cb8 <HAL_FLASH_Program>
      return flashstatus;
 8003066:	b280      	uxth	r0, r0
        if (eepromstatus != HAL_OK)
 8003068:	2800      	cmp	r0, #0
 800306a:	d0a5      	beq.n	8002fb8 <EE_WriteVariable+0x16c>
 800306c:	0004      	movs	r4, r0
 800306e:	e72b      	b.n	8002ec8 <EE_WriteVariable+0x7c>
 8003070:	4b0e      	ldr	r3, [pc, #56]	; (80030ac <EE_WriteVariable+0x260>)
 8003072:	881a      	ldrh	r2, [r3, #0]
 8003074:	e7c6      	b.n	8003004 <EE_WriteVariable+0x1b8>
 8003076:	46c0      	nop			; (mov r8, r8)
 8003078:	08007800 	.word	0x08007800
 800307c:	08007000 	.word	0x08007000
 8003080:	0000eeee 	.word	0x0000eeee
 8003084:	0800f000 	.word	0x0800f000
 8003088:	0800f3ff 	.word	0x0800f3ff
 800308c:	080073ff 	.word	0x080073ff
 8003090:	2000000c 	.word	0x2000000c
 8003094:	0800f3fe 	.word	0x0800f3fe
 8003098:	0800f3fc 	.word	0x0800f3fc
 800309c:	0800f002 	.word	0x0800f002
 80030a0:	080073fe 	.word	0x080073fe
 80030a4:	080073fc 	.word	0x080073fc
 80030a8:	08007002 	.word	0x08007002
 80030ac:	200000f4 	.word	0x200000f4

080030b0 <storeEEpromConfig>:
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;

}


void storeEEpromConfig(){
 80030b0:	b510      	push	{r4, lr}

	 EE_WriteVariable(VirtAddVarTab[EEvehiclemode], vehicle_mode);
 80030b2:	4b08      	ldr	r3, [pc, #32]	; (80030d4 <storeEEpromConfig+0x24>)
 80030b4:	4c08      	ldr	r4, [pc, #32]	; (80030d8 <storeEEpromConfig+0x28>)
 80030b6:	7819      	ldrb	r1, [r3, #0]
 80030b8:	8820      	ldrh	r0, [r4, #0]
 80030ba:	f7ff fec7 	bl	8002e4c <EE_WriteVariable>
	 EE_WriteVariable(VirtAddVarTab[EEdirection], dir_reversed);
 80030be:	4b07      	ldr	r3, [pc, #28]	; (80030dc <storeEEpromConfig+0x2c>)
 80030c0:	8860      	ldrh	r0, [r4, #2]
 80030c2:	8819      	ldrh	r1, [r3, #0]
 80030c4:	f7ff fec2 	bl	8002e4c <EE_WriteVariable>
	 EE_WriteVariable(VirtAddVarTab[EEbidirection], bi_direction);
 80030c8:	4b05      	ldr	r3, [pc, #20]	; (80030e0 <storeEEpromConfig+0x30>)
 80030ca:	88a0      	ldrh	r0, [r4, #4]
 80030cc:	8819      	ldrh	r1, [r3, #0]
 80030ce:	f7ff febd 	bl	8002e4c <EE_WriteVariable>
	// EE_WriteVariable(VirtAddVarTab[EEbrake_on_stop], EEbrake_on_stop);

	// playEEpromSavedTune();
}
 80030d2:	bd10      	pop	{r4, pc}
 80030d4:	200000c4 	.word	0x200000c4
 80030d8:	2000000c 	.word	0x2000000c
 80030dc:	20000144 	.word	0x20000144
 80030e0:	20000120 	.word	0x20000120

080030e4 <loadEEpromConfig>:


void loadEEpromConfig(){
 80030e4:	b570      	push	{r4, r5, r6, lr}
	 EE_ReadVariable(VirtAddVarTab[EEvehiclemode], &VarDataTab[EEvehiclemode]);
 80030e6:	4c15      	ldr	r4, [pc, #84]	; (800313c <loadEEpromConfig+0x58>)
 80030e8:	4d15      	ldr	r5, [pc, #84]	; (8003140 <loadEEpromConfig+0x5c>)
 80030ea:	0021      	movs	r1, r4
 80030ec:	8828      	ldrh	r0, [r5, #0]
 80030ee:	f7ff fe75 	bl	8002ddc <EE_ReadVariable>
	 EE_ReadVariable(VirtAddVarTab[EEdirection], &VarDataTab[EEdirection]);
 80030f2:	1ca1      	adds	r1, r4, #2
 80030f4:	8868      	ldrh	r0, [r5, #2]
 80030f6:	f7ff fe71 	bl	8002ddc <EE_ReadVariable>
	 EE_ReadVariable(VirtAddVarTab[EEbidirection], &VarDataTab[EEbidirection]);
 80030fa:	1d21      	adds	r1, r4, #4
 80030fc:	88a8      	ldrh	r0, [r5, #4]
 80030fe:	f7ff fe6d 	bl	8002ddc <EE_ReadVariable>
//	 EE_ReadVariable(VirtAddVarTab[EEbrake_on_stop], &VarDataTab[EEbrake_on_stop]);

	 if (VarDataTab[EEvehiclemode] == 0){             // nothing in the eeprom
 8003102:	8823      	ldrh	r3, [r4, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d008      	beq.n	800311a <loadEEpromConfig+0x36>
     storeEEpromConfig();            // store default values
	 }else{
	 vehicle_mode = VarDataTab[EEvehiclemode];
 8003108:	4a0e      	ldr	r2, [pc, #56]	; (8003144 <loadEEpromConfig+0x60>)
 800310a:	7013      	strb	r3, [r2, #0]
	 dir_reversed = VarDataTab[EEdirection];
 800310c:	8862      	ldrh	r2, [r4, #2]
 800310e:	4b0e      	ldr	r3, [pc, #56]	; (8003148 <loadEEpromConfig+0x64>)
 8003110:	601a      	str	r2, [r3, #0]
	 bi_direction = VarDataTab[EEbidirection];
 8003112:	88a2      	ldrh	r2, [r4, #4]
 8003114:	4b0d      	ldr	r3, [pc, #52]	; (800314c <loadEEpromConfig+0x68>)
 8003116:	601a      	str	r2, [r3, #0]
//	 brake = VarDataTab[EEbrake_on_stop];
	 }
}
 8003118:	bd70      	pop	{r4, r5, r6, pc}
	 EE_WriteVariable(VirtAddVarTab[EEvehiclemode], vehicle_mode);
 800311a:	4b0a      	ldr	r3, [pc, #40]	; (8003144 <loadEEpromConfig+0x60>)
 800311c:	8828      	ldrh	r0, [r5, #0]
 800311e:	7819      	ldrb	r1, [r3, #0]
 8003120:	f7ff fe94 	bl	8002e4c <EE_WriteVariable>
	 EE_WriteVariable(VirtAddVarTab[EEdirection], dir_reversed);
 8003124:	4b08      	ldr	r3, [pc, #32]	; (8003148 <loadEEpromConfig+0x64>)
 8003126:	8868      	ldrh	r0, [r5, #2]
 8003128:	8819      	ldrh	r1, [r3, #0]
 800312a:	f7ff fe8f 	bl	8002e4c <EE_WriteVariable>
	 EE_WriteVariable(VirtAddVarTab[EEbidirection], bi_direction);
 800312e:	4b07      	ldr	r3, [pc, #28]	; (800314c <loadEEpromConfig+0x68>)
 8003130:	88a8      	ldrh	r0, [r5, #4]
 8003132:	8819      	ldrh	r1, [r3, #0]
 8003134:	f7ff fe8a 	bl	8002e4c <EE_WriteVariable>
 8003138:	e7ee      	b.n	8003118 <loadEEpromConfig+0x34>
 800313a:	46c0      	nop			; (mov r8, r8)
 800313c:	20000100 	.word	0x20000100
 8003140:	2000000c 	.word	0x2000000c
 8003144:	200000c4 	.word	0x200000c4
 8003148:	20000144 	.word	0x20000144
 800314c:	20000120 	.word	0x20000120

08003150 <phaseAPWM>:
#ifdef FD6288
void phaseBPWM() {
#endif


		if(!comp_pwm  || prop_brake_active){            // for future
 8003150:	4b10      	ldr	r3, [pc, #64]	; (8003194 <phaseAPWM+0x44>)
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8003152:	4a11      	ldr	r2, [pc, #68]	; (8003198 <phaseAPWM+0x48>)
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00a      	beq.n	8003170 <phaseAPWM+0x20>
 800315a:	4b10      	ldr	r3, [pc, #64]	; (800319c <phaseAPWM+0x4c>)
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d106      	bne.n	8003170 <phaseAPWM+0x20>
 8003162:	2103      	movs	r1, #3
 8003164:	6813      	ldr	r3, [r2, #0]
 8003166:	438b      	bics	r3, r1
 8003168:	3901      	subs	r1, #1
 800316a:	430b      	orrs	r3, r1
 800316c:	6013      	str	r3, [r2, #0]
 800316e:	e006      	b.n	800317e <phaseAPWM+0x2e>
 8003170:	2103      	movs	r1, #3
 8003172:	6813      	ldr	r3, [r2, #0]
 8003174:	438b      	bics	r3, r1
 8003176:	3902      	subs	r1, #2
 8003178:	430b      	orrs	r3, r1
 800317a:	6013      	str	r3, [r2, #0]
		LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_0, LL_GPIO_MODE_OUTPUT);
		GPIOB->BRR = GPIO_PIN_0;
 800317c:	6291      	str	r1, [r2, #40]	; 0x28
 800317e:	2190      	movs	r1, #144	; 0x90
 8003180:	05c9      	lsls	r1, r1, #23
 8003182:	680b      	ldr	r3, [r1, #0]
 8003184:	4a06      	ldr	r2, [pc, #24]	; (80031a0 <phaseAPWM+0x50>)
 8003186:	401a      	ands	r2, r3
 8003188:	2380      	movs	r3, #128	; 0x80
 800318a:	031b      	lsls	r3, r3, #12
 800318c:	4313      	orrs	r3, r2
 800318e:	600b      	str	r3, [r1, #0]
		}else{
		LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_0, LL_GPIO_MODE_ALTERNATE); // low
		}
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_9, LL_GPIO_MODE_ALTERNATE);  // high

	}
 8003190:	4770      	bx	lr
 8003192:	46c0      	nop			; (mov r8, r8)
 8003194:	2000001c 	.word	0x2000001c
 8003198:	48000400 	.word	0x48000400
 800319c:	2000020c 	.word	0x2000020c
 80031a0:	fff3ffff 	.word	0xfff3ffff

080031a4 <phaseBPWM>:
#endif
#ifdef FD6288
void phaseCPWM() {
#endif

		if (!comp_pwm || prop_brake_active){
 80031a4:	4b13      	ldr	r3, [pc, #76]	; (80031f4 <phaseBPWM+0x50>)
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00d      	beq.n	80031c8 <phaseBPWM+0x24>
 80031ac:	4b12      	ldr	r3, [pc, #72]	; (80031f8 <phaseBPWM+0x54>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d109      	bne.n	80031c8 <phaseBPWM+0x24>
 80031b4:	2190      	movs	r1, #144	; 0x90
 80031b6:	05c9      	lsls	r1, r1, #23
 80031b8:	680b      	ldr	r3, [r1, #0]
 80031ba:	4a10      	ldr	r2, [pc, #64]	; (80031fc <phaseBPWM+0x58>)
 80031bc:	401a      	ands	r2, r3
 80031be:	2380      	movs	r3, #128	; 0x80
 80031c0:	021b      	lsls	r3, r3, #8
 80031c2:	4313      	orrs	r3, r2
 80031c4:	600b      	str	r3, [r1, #0]
 80031c6:	e00a      	b.n	80031de <phaseBPWM+0x3a>
 80031c8:	2390      	movs	r3, #144	; 0x90
 80031ca:	05db      	lsls	r3, r3, #23
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	490b      	ldr	r1, [pc, #44]	; (80031fc <phaseBPWM+0x58>)
 80031d0:	4011      	ands	r1, r2
 80031d2:	2280      	movs	r2, #128	; 0x80
 80031d4:	01d2      	lsls	r2, r2, #7
 80031d6:	430a      	orrs	r2, r1
 80031d8:	601a      	str	r2, [r3, #0]
			LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_7, LL_GPIO_MODE_OUTPUT);
			GPIOA->BRR = GPIO_PIN_7;
 80031da:	2280      	movs	r2, #128	; 0x80
 80031dc:	629a      	str	r2, [r3, #40]	; 0x28
 80031de:	2190      	movs	r1, #144	; 0x90
 80031e0:	05c9      	lsls	r1, r1, #23
 80031e2:	680b      	ldr	r3, [r1, #0]
 80031e4:	4a06      	ldr	r2, [pc, #24]	; (8003200 <phaseBPWM+0x5c>)
 80031e6:	401a      	ands	r2, r3
 80031e8:	2380      	movs	r3, #128	; 0x80
 80031ea:	029b      	lsls	r3, r3, #10
 80031ec:	4313      	orrs	r3, r2
 80031ee:	600b      	str	r3, [r1, #0]
		}else{
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_7, LL_GPIO_MODE_ALTERNATE);
		}
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_8, LL_GPIO_MODE_ALTERNATE);

	}
 80031f0:	4770      	bx	lr
 80031f2:	46c0      	nop			; (mov r8, r8)
 80031f4:	2000001c 	.word	0x2000001c
 80031f8:	2000020c 	.word	0x2000020c
 80031fc:	ffff3fff 	.word	0xffff3fff
 8003200:	fffcffff 	.word	0xfffcffff

08003204 <phaseCPWM>:
#endif
#ifdef FD6288
void phaseAPWM() {
#endif

		if (!comp_pwm || prop_brake_active){
 8003204:	4b10      	ldr	r3, [pc, #64]	; (8003248 <phaseCPWM+0x44>)
 8003206:	4a11      	ldr	r2, [pc, #68]	; (800324c <phaseCPWM+0x48>)
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00a      	beq.n	8003224 <phaseCPWM+0x20>
 800320e:	4b10      	ldr	r3, [pc, #64]	; (8003250 <phaseCPWM+0x4c>)
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d106      	bne.n	8003224 <phaseCPWM+0x20>
 8003216:	210c      	movs	r1, #12
 8003218:	6813      	ldr	r3, [r2, #0]
 800321a:	438b      	bics	r3, r1
 800321c:	3904      	subs	r1, #4
 800321e:	430b      	orrs	r3, r1
 8003220:	6013      	str	r3, [r2, #0]
 8003222:	e007      	b.n	8003234 <phaseCPWM+0x30>
 8003224:	210c      	movs	r1, #12
 8003226:	6813      	ldr	r3, [r2, #0]
 8003228:	438b      	bics	r3, r1
 800322a:	3908      	subs	r1, #8
 800322c:	430b      	orrs	r3, r1
 800322e:	6013      	str	r3, [r2, #0]
			LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_1, LL_GPIO_MODE_OUTPUT);
			GPIOB->BRR = GPIO_PIN_1;
 8003230:	2302      	movs	r3, #2
 8003232:	6293      	str	r3, [r2, #40]	; 0x28
 8003234:	2190      	movs	r1, #144	; 0x90
 8003236:	05c9      	lsls	r1, r1, #23
 8003238:	680b      	ldr	r3, [r1, #0]
 800323a:	4a06      	ldr	r2, [pc, #24]	; (8003254 <phaseCPWM+0x50>)
 800323c:	401a      	ands	r2, r3
 800323e:	2380      	movs	r3, #128	; 0x80
 8003240:	039b      	lsls	r3, r3, #14
 8003242:	4313      	orrs	r3, r2
 8003244:	600b      	str	r3, [r1, #0]
			}else{
		LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_1, LL_GPIO_MODE_ALTERNATE);
			}
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_10, LL_GPIO_MODE_ALTERNATE);

	}
 8003246:	4770      	bx	lr
 8003248:	2000001c 	.word	0x2000001c
 800324c:	48000400 	.word	0x48000400
 8003250:	2000020c 	.word	0x2000020c
 8003254:	ffcfffff 	.word	0xffcfffff

08003258 <comStep>:
		GPIOA->BRR = GPIO_PIN_10;
	}



void  comStep (int newStep){
 8003258:	b500      	push	{lr}
//TIM14->CNT = 0;
switch(newStep)
 800325a:	2806      	cmp	r0, #6
 800325c:	d843      	bhi.n	80032e6 <comStep+0x8e>
 800325e:	4bb4      	ldr	r3, [pc, #720]	; (8003530 <comStep+0x2d8>)
 8003260:	0080      	lsls	r0, r0, #2
 8003262:	581b      	ldr	r3, [r3, r0]
 8003264:	469f      	mov	pc, r3
 8003266:	2103      	movs	r1, #3
 8003268:	4ab2      	ldr	r2, [pc, #712]	; (8003534 <comStep+0x2dc>)
 800326a:	48b3      	ldr	r0, [pc, #716]	; (8003538 <comStep+0x2e0>)
 800326c:	6813      	ldr	r3, [r2, #0]
 800326e:	438b      	bics	r3, r1
 8003270:	3902      	subs	r1, #2
 8003272:	430b      	orrs	r3, r1
 8003274:	6013      	str	r3, [r2, #0]
 8003276:	2390      	movs	r3, #144	; 0x90
		GPIOB->BRR = GPIO_PIN_0;
 8003278:	6291      	str	r1, [r2, #40]	; 0x28
 800327a:	05db      	lsls	r3, r3, #23
 800327c:	6819      	ldr	r1, [r3, #0]
 800327e:	4008      	ands	r0, r1
 8003280:	2180      	movs	r1, #128	; 0x80
 8003282:	02c9      	lsls	r1, r1, #11
 8003284:	4301      	orrs	r1, r0
 8003286:	6019      	str	r1, [r3, #0]
		GPIOA->BRR = GPIO_PIN_9;
 8003288:	2180      	movs	r1, #128	; 0x80
 800328a:	0089      	lsls	r1, r1, #2
 800328c:	6299      	str	r1, [r3, #40]	; 0x28
 800328e:	6819      	ldr	r1, [r3, #0]
 8003290:	48aa      	ldr	r0, [pc, #680]	; (800353c <comStep+0x2e4>)
 8003292:	4008      	ands	r0, r1
 8003294:	2180      	movs	r1, #128	; 0x80
 8003296:	01c9      	lsls	r1, r1, #7
 8003298:	4301      	orrs	r1, r0
 800329a:	6019      	str	r1, [r3, #0]
		GPIOA->BSRR = GPIO_PIN_7;
 800329c:	2180      	movs	r1, #128	; 0x80
 800329e:	6199      	str	r1, [r3, #24]
 80032a0:	6819      	ldr	r1, [r3, #0]
 80032a2:	48a7      	ldr	r0, [pc, #668]	; (8003540 <comStep+0x2e8>)
 80032a4:	4008      	ands	r0, r1
 80032a6:	2180      	movs	r1, #128	; 0x80
 80032a8:	0249      	lsls	r1, r1, #9
 80032aa:	4301      	orrs	r1, r0
 80032ac:	6019      	str	r1, [r3, #0]
		GPIOA->BRR = GPIO_PIN_8;
 80032ae:	2180      	movs	r1, #128	; 0x80
 80032b0:	0049      	lsls	r1, r1, #1
 80032b2:	6299      	str	r1, [r3, #40]	; 0x28
		if (!comp_pwm || prop_brake_active){
 80032b4:	4ba3      	ldr	r3, [pc, #652]	; (8003544 <comStep+0x2ec>)
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d100      	bne.n	80032be <comStep+0x66>
 80032bc:	e12e      	b.n	800351c <comStep+0x2c4>
 80032be:	4ba2      	ldr	r3, [pc, #648]	; (8003548 <comStep+0x2f0>)
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d000      	beq.n	80032c8 <comStep+0x70>
 80032c6:	e129      	b.n	800351c <comStep+0x2c4>
 80032c8:	210c      	movs	r1, #12
 80032ca:	6813      	ldr	r3, [r2, #0]
 80032cc:	438b      	bics	r3, r1
 80032ce:	3904      	subs	r1, #4
 80032d0:	430b      	orrs	r3, r1
 80032d2:	6013      	str	r3, [r2, #0]
 80032d4:	2190      	movs	r1, #144	; 0x90
 80032d6:	05c9      	lsls	r1, r1, #23
 80032d8:	680b      	ldr	r3, [r1, #0]
 80032da:	4a9c      	ldr	r2, [pc, #624]	; (800354c <comStep+0x2f4>)
 80032dc:	401a      	ands	r2, r3
 80032de:	2380      	movs	r3, #128	; 0x80
 80032e0:	039b      	lsls	r3, r3, #14
 80032e2:	4313      	orrs	r3, r2
 80032e4:	600b      	str	r3, [r1, #0]
        	break;
	}

//stop_time = TIM14->CNT;

}
 80032e6:	bd00      	pop	{pc}
		if(!comp_pwm  || prop_brake_active){            // for future
 80032e8:	4b96      	ldr	r3, [pc, #600]	; (8003544 <comStep+0x2ec>)
 80032ea:	4a92      	ldr	r2, [pc, #584]	; (8003534 <comStep+0x2dc>)
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d100      	bne.n	80032f4 <comStep+0x9c>
 80032f2:	e0ad      	b.n	8003450 <comStep+0x1f8>
 80032f4:	4b94      	ldr	r3, [pc, #592]	; (8003548 <comStep+0x2f0>)
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d000      	beq.n	80032fe <comStep+0xa6>
 80032fc:	e0a8      	b.n	8003450 <comStep+0x1f8>
 80032fe:	2103      	movs	r1, #3
 8003300:	6813      	ldr	r3, [r2, #0]
 8003302:	438b      	bics	r3, r1
 8003304:	3901      	subs	r1, #1
 8003306:	430b      	orrs	r3, r1
 8003308:	6013      	str	r3, [r2, #0]
 800330a:	e0a8      	b.n	800345e <comStep+0x206>
 800330c:	4b8d      	ldr	r3, [pc, #564]	; (8003544 <comStep+0x2ec>)
 800330e:	4a89      	ldr	r2, [pc, #548]	; (8003534 <comStep+0x2dc>)
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d100      	bne.n	8003318 <comStep+0xc0>
 8003316:	e0bf      	b.n	8003498 <comStep+0x240>
 8003318:	4b8b      	ldr	r3, [pc, #556]	; (8003548 <comStep+0x2f0>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d000      	beq.n	8003322 <comStep+0xca>
 8003320:	e0ba      	b.n	8003498 <comStep+0x240>
 8003322:	2103      	movs	r1, #3
 8003324:	6813      	ldr	r3, [r2, #0]
 8003326:	438b      	bics	r3, r1
 8003328:	3901      	subs	r1, #1
 800332a:	430b      	orrs	r3, r1
 800332c:	6013      	str	r3, [r2, #0]
 800332e:	e0ba      	b.n	80034a6 <comStep+0x24e>
 8003330:	2103      	movs	r1, #3
 8003332:	4a80      	ldr	r2, [pc, #512]	; (8003534 <comStep+0x2dc>)
 8003334:	6813      	ldr	r3, [r2, #0]
 8003336:	438b      	bics	r3, r1
 8003338:	3902      	subs	r1, #2
 800333a:	430b      	orrs	r3, r1
 800333c:	6013      	str	r3, [r2, #0]
 800333e:	2390      	movs	r3, #144	; 0x90
		GPIOB->BSRR = GPIO_PIN_0;
 8003340:	6191      	str	r1, [r2, #24]
 8003342:	05db      	lsls	r3, r3, #23
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	497c      	ldr	r1, [pc, #496]	; (8003538 <comStep+0x2e0>)
 8003348:	4011      	ands	r1, r2
 800334a:	2280      	movs	r2, #128	; 0x80
 800334c:	02d2      	lsls	r2, r2, #11
 800334e:	430a      	orrs	r2, r1
 8003350:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_9;
 8003352:	2280      	movs	r2, #128	; 0x80
 8003354:	0092      	lsls	r2, r2, #2
 8003356:	629a      	str	r2, [r3, #40]	; 0x28
		if (!comp_pwm || prop_brake_active){
 8003358:	4a7a      	ldr	r2, [pc, #488]	; (8003544 <comStep+0x2ec>)
 800335a:	7812      	ldrb	r2, [r2, #0]
 800335c:	2a00      	cmp	r2, #0
 800335e:	d100      	bne.n	8003362 <comStep+0x10a>
 8003360:	e0c7      	b.n	80034f2 <comStep+0x29a>
 8003362:	4a79      	ldr	r2, [pc, #484]	; (8003548 <comStep+0x2f0>)
 8003364:	7812      	ldrb	r2, [r2, #0]
 8003366:	2a00      	cmp	r2, #0
 8003368:	d000      	beq.n	800336c <comStep+0x114>
 800336a:	e0c2      	b.n	80034f2 <comStep+0x29a>
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	4973      	ldr	r1, [pc, #460]	; (800353c <comStep+0x2e4>)
 8003370:	4011      	ands	r1, r2
 8003372:	2280      	movs	r2, #128	; 0x80
 8003374:	0212      	lsls	r2, r2, #8
 8003376:	430a      	orrs	r2, r1
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	e0c5      	b.n	8003508 <comStep+0x2b0>
 800337c:	2103      	movs	r1, #3
 800337e:	4a6d      	ldr	r2, [pc, #436]	; (8003534 <comStep+0x2dc>)
 8003380:	486d      	ldr	r0, [pc, #436]	; (8003538 <comStep+0x2e0>)
 8003382:	6813      	ldr	r3, [r2, #0]
 8003384:	438b      	bics	r3, r1
 8003386:	3902      	subs	r1, #2
 8003388:	430b      	orrs	r3, r1
 800338a:	6013      	str	r3, [r2, #0]
 800338c:	2390      	movs	r3, #144	; 0x90
		GPIOB->BSRR = GPIO_PIN_0;
 800338e:	6191      	str	r1, [r2, #24]
 8003390:	05db      	lsls	r3, r3, #23
 8003392:	6819      	ldr	r1, [r3, #0]
 8003394:	4008      	ands	r0, r1
 8003396:	2180      	movs	r1, #128	; 0x80
 8003398:	02c9      	lsls	r1, r1, #11
 800339a:	4301      	orrs	r1, r0
 800339c:	6019      	str	r1, [r3, #0]
		GPIOA->BRR = GPIO_PIN_9;
 800339e:	2180      	movs	r1, #128	; 0x80
 80033a0:	0089      	lsls	r1, r1, #2
 80033a2:	6299      	str	r1, [r3, #40]	; 0x28
 80033a4:	6819      	ldr	r1, [r3, #0]
 80033a6:	4865      	ldr	r0, [pc, #404]	; (800353c <comStep+0x2e4>)
 80033a8:	4008      	ands	r0, r1
 80033aa:	2180      	movs	r1, #128	; 0x80
 80033ac:	01c9      	lsls	r1, r1, #7
 80033ae:	4301      	orrs	r1, r0
 80033b0:	6019      	str	r1, [r3, #0]
		GPIOA->BRR = GPIO_PIN_7;
 80033b2:	2180      	movs	r1, #128	; 0x80
 80033b4:	6299      	str	r1, [r3, #40]	; 0x28
 80033b6:	e773      	b.n	80032a0 <comStep+0x48>
 80033b8:	2103      	movs	r1, #3
 80033ba:	4a5e      	ldr	r2, [pc, #376]	; (8003534 <comStep+0x2dc>)
 80033bc:	6813      	ldr	r3, [r2, #0]
 80033be:	438b      	bics	r3, r1
 80033c0:	3902      	subs	r1, #2
 80033c2:	430b      	orrs	r3, r1
 80033c4:	6013      	str	r3, [r2, #0]
 80033c6:	2390      	movs	r3, #144	; 0x90
		GPIOB->BRR = GPIO_PIN_0;
 80033c8:	6291      	str	r1, [r2, #40]	; 0x28
 80033ca:	05db      	lsls	r3, r3, #23
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	495a      	ldr	r1, [pc, #360]	; (8003538 <comStep+0x2e0>)
 80033d0:	4011      	ands	r1, r2
 80033d2:	2280      	movs	r2, #128	; 0x80
 80033d4:	02d2      	lsls	r2, r2, #11
 80033d6:	430a      	orrs	r2, r1
 80033d8:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_9;
 80033da:	2280      	movs	r2, #128	; 0x80
 80033dc:	0092      	lsls	r2, r2, #2
 80033de:	629a      	str	r2, [r3, #40]	; 0x28
		if (!comp_pwm || prop_brake_active){
 80033e0:	4a58      	ldr	r2, [pc, #352]	; (8003544 <comStep+0x2ec>)
 80033e2:	7812      	ldrb	r2, [r2, #0]
 80033e4:	2a00      	cmp	r2, #0
 80033e6:	d00b      	beq.n	8003400 <comStep+0x1a8>
 80033e8:	4a57      	ldr	r2, [pc, #348]	; (8003548 <comStep+0x2f0>)
 80033ea:	7812      	ldrb	r2, [r2, #0]
 80033ec:	2a00      	cmp	r2, #0
 80033ee:	d107      	bne.n	8003400 <comStep+0x1a8>
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	4952      	ldr	r1, [pc, #328]	; (800353c <comStep+0x2e4>)
 80033f4:	4011      	ands	r1, r2
 80033f6:	2280      	movs	r2, #128	; 0x80
 80033f8:	0212      	lsls	r2, r2, #8
 80033fa:	430a      	orrs	r2, r1
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	e00a      	b.n	8003416 <comStep+0x1be>
 8003400:	2390      	movs	r3, #144	; 0x90
 8003402:	05db      	lsls	r3, r3, #23
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	494d      	ldr	r1, [pc, #308]	; (800353c <comStep+0x2e4>)
 8003408:	4011      	ands	r1, r2
 800340a:	2280      	movs	r2, #128	; 0x80
 800340c:	01d2      	lsls	r2, r2, #7
 800340e:	430a      	orrs	r2, r1
 8003410:	601a      	str	r2, [r3, #0]
			GPIOA->BRR = GPIO_PIN_7;
 8003412:	2280      	movs	r2, #128	; 0x80
 8003414:	629a      	str	r2, [r3, #40]	; 0x28
 8003416:	2390      	movs	r3, #144	; 0x90
 8003418:	05db      	lsls	r3, r3, #23
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	4948      	ldr	r1, [pc, #288]	; (8003540 <comStep+0x2e8>)
 800341e:	4011      	ands	r1, r2
 8003420:	2280      	movs	r2, #128	; 0x80
 8003422:	0292      	lsls	r2, r2, #10
 8003424:	430a      	orrs	r2, r1
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	200c      	movs	r0, #12
 800342a:	4942      	ldr	r1, [pc, #264]	; (8003534 <comStep+0x2dc>)
 800342c:	680a      	ldr	r2, [r1, #0]
 800342e:	4382      	bics	r2, r0
 8003430:	3808      	subs	r0, #8
 8003432:	4302      	orrs	r2, r0
 8003434:	600a      	str	r2, [r1, #0]
		GPIOB->BSRR = GPIO_PIN_1;
 8003436:	2202      	movs	r2, #2
 8003438:	618a      	str	r2, [r1, #24]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	4943      	ldr	r1, [pc, #268]	; (800354c <comStep+0x2f4>)
 800343e:	4011      	ands	r1, r2
 8003440:	2280      	movs	r2, #128	; 0x80
 8003442:	0352      	lsls	r2, r2, #13
 8003444:	430a      	orrs	r2, r1
 8003446:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_10;
 8003448:	2280      	movs	r2, #128	; 0x80
 800344a:	00d2      	lsls	r2, r2, #3
 800344c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800344e:	e74a      	b.n	80032e6 <comStep+0x8e>
 8003450:	2103      	movs	r1, #3
 8003452:	6813      	ldr	r3, [r2, #0]
 8003454:	438b      	bics	r3, r1
 8003456:	3902      	subs	r1, #2
 8003458:	430b      	orrs	r3, r1
 800345a:	6013      	str	r3, [r2, #0]
		GPIOB->BRR = GPIO_PIN_0;
 800345c:	6291      	str	r1, [r2, #40]	; 0x28
 800345e:	2390      	movs	r3, #144	; 0x90
 8003460:	05db      	lsls	r3, r3, #23
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	4934      	ldr	r1, [pc, #208]	; (8003538 <comStep+0x2e0>)
 8003466:	4011      	ands	r1, r2
 8003468:	2280      	movs	r2, #128	; 0x80
 800346a:	0312      	lsls	r2, r2, #12
 800346c:	430a      	orrs	r2, r1
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	4932      	ldr	r1, [pc, #200]	; (800353c <comStep+0x2e4>)
 8003474:	4011      	ands	r1, r2
 8003476:	2280      	movs	r2, #128	; 0x80
 8003478:	01d2      	lsls	r2, r2, #7
 800347a:	430a      	orrs	r2, r1
 800347c:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_7;
 800347e:	2280      	movs	r2, #128	; 0x80
 8003480:	629a      	str	r2, [r3, #40]	; 0x28
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	492e      	ldr	r1, [pc, #184]	; (8003540 <comStep+0x2e8>)
 8003486:	4011      	ands	r1, r2
 8003488:	2280      	movs	r2, #128	; 0x80
 800348a:	0252      	lsls	r2, r2, #9
 800348c:	430a      	orrs	r2, r1
 800348e:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_8;
 8003490:	2280      	movs	r2, #128	; 0x80
 8003492:	0052      	lsls	r2, r2, #1
 8003494:	629a      	str	r2, [r3, #40]	; 0x28
 8003496:	e7c7      	b.n	8003428 <comStep+0x1d0>
 8003498:	2103      	movs	r1, #3
 800349a:	6813      	ldr	r3, [r2, #0]
 800349c:	438b      	bics	r3, r1
 800349e:	3902      	subs	r1, #2
 80034a0:	430b      	orrs	r3, r1
 80034a2:	6013      	str	r3, [r2, #0]
		GPIOB->BRR = GPIO_PIN_0;
 80034a4:	6291      	str	r1, [r2, #40]	; 0x28
 80034a6:	2390      	movs	r3, #144	; 0x90
 80034a8:	05db      	lsls	r3, r3, #23
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	4922      	ldr	r1, [pc, #136]	; (8003538 <comStep+0x2e0>)
 80034ae:	4011      	ands	r1, r2
 80034b0:	2280      	movs	r2, #128	; 0x80
 80034b2:	0312      	lsls	r2, r2, #12
 80034b4:	430a      	orrs	r2, r1
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	4920      	ldr	r1, [pc, #128]	; (800353c <comStep+0x2e4>)
 80034bc:	4011      	ands	r1, r2
 80034be:	2280      	movs	r2, #128	; 0x80
 80034c0:	01d2      	lsls	r2, r2, #7
 80034c2:	430a      	orrs	r2, r1
 80034c4:	601a      	str	r2, [r3, #0]
		GPIOA->BSRR = GPIO_PIN_7;
 80034c6:	2280      	movs	r2, #128	; 0x80
 80034c8:	619a      	str	r2, [r3, #24]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	491c      	ldr	r1, [pc, #112]	; (8003540 <comStep+0x2e8>)
 80034ce:	4011      	ands	r1, r2
 80034d0:	2280      	movs	r2, #128	; 0x80
 80034d2:	0252      	lsls	r2, r2, #9
 80034d4:	430a      	orrs	r2, r1
 80034d6:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_8;
 80034d8:	2280      	movs	r2, #128	; 0x80
 80034da:	0052      	lsls	r2, r2, #1
 80034dc:	629a      	str	r2, [r3, #40]	; 0x28
 80034de:	200c      	movs	r0, #12
 80034e0:	4914      	ldr	r1, [pc, #80]	; (8003534 <comStep+0x2dc>)
 80034e2:	680a      	ldr	r2, [r1, #0]
 80034e4:	4382      	bics	r2, r0
 80034e6:	3808      	subs	r0, #8
 80034e8:	4302      	orrs	r2, r0
 80034ea:	600a      	str	r2, [r1, #0]
		GPIOB->BRR = GPIO_PIN_1;
 80034ec:	2202      	movs	r2, #2
 80034ee:	628a      	str	r2, [r1, #40]	; 0x28
 80034f0:	e7a3      	b.n	800343a <comStep+0x1e2>
 80034f2:	2390      	movs	r3, #144	; 0x90
 80034f4:	05db      	lsls	r3, r3, #23
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	4910      	ldr	r1, [pc, #64]	; (800353c <comStep+0x2e4>)
 80034fa:	4011      	ands	r1, r2
 80034fc:	2280      	movs	r2, #128	; 0x80
 80034fe:	01d2      	lsls	r2, r2, #7
 8003500:	430a      	orrs	r2, r1
 8003502:	601a      	str	r2, [r3, #0]
			GPIOA->BRR = GPIO_PIN_7;
 8003504:	2280      	movs	r2, #128	; 0x80
 8003506:	629a      	str	r2, [r3, #40]	; 0x28
 8003508:	2390      	movs	r3, #144	; 0x90
 800350a:	05db      	lsls	r3, r3, #23
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	490c      	ldr	r1, [pc, #48]	; (8003540 <comStep+0x2e8>)
 8003510:	4011      	ands	r1, r2
 8003512:	2280      	movs	r2, #128	; 0x80
 8003514:	0292      	lsls	r2, r2, #10
 8003516:	430a      	orrs	r2, r1
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	e7e0      	b.n	80034de <comStep+0x286>
 800351c:	210c      	movs	r1, #12
 800351e:	4a05      	ldr	r2, [pc, #20]	; (8003534 <comStep+0x2dc>)
 8003520:	6813      	ldr	r3, [r2, #0]
 8003522:	438b      	bics	r3, r1
 8003524:	3908      	subs	r1, #8
 8003526:	430b      	orrs	r3, r1
 8003528:	6013      	str	r3, [r2, #0]
			GPIOB->BRR = GPIO_PIN_1;
 800352a:	2302      	movs	r3, #2
 800352c:	6293      	str	r3, [r2, #40]	; 0x28
 800352e:	e6d1      	b.n	80032d4 <comStep+0x7c>
 8003530:	0800628c 	.word	0x0800628c
 8003534:	48000400 	.word	0x48000400
 8003538:	fff3ffff 	.word	0xfff3ffff
 800353c:	ffff3fff 	.word	0xffff3fff
 8003540:	fffcffff 	.word	0xfffcffff
 8003544:	2000001c 	.word	0x2000001c
 8003548:	2000020c 	.word	0x2000020c
 800354c:	ffcfffff 	.word	0xffcfffff

08003550 <commutate>:
		Error_Handler();
	}

}

void commutate() {
 8003550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
//	TIM2->CNT = 0;
	if (forward == 1){
 8003552:	4b7d      	ldr	r3, [pc, #500]	; (8003748 <commutate+0x1f8>)
		step++;
 8003554:	4e7d      	ldr	r6, [pc, #500]	; (800374c <commutate+0x1fc>)
	if (forward == 1){
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d100      	bne.n	800355e <commutate+0xe>
 800355c:	e0a9      	b.n	80036b2 <commutate+0x162>
		}
		if (step == 2 || step == 4 || step == 6) {
			rising = 0;
		}
	}
	if (forward == 0){
 800355e:	2b00      	cmp	r3, #0
 8003560:	d119      	bne.n	8003596 <commutate+0x46>
		step--;
 8003562:	6833      	ldr	r3, [r6, #0]
 8003564:	3b01      	subs	r3, #1
 8003566:	6033      	str	r3, [r6, #0]
		if (step < 1) {
 8003568:	2b00      	cmp	r3, #0
 800356a:	dc00      	bgt.n	800356e <commutate+0x1e>
 800356c:	e0d4      	b.n	8003718 <commutate+0x1c8>
 800356e:	2204      	movs	r2, #4
 8003570:	0018      	movs	r0, r3
			step = 6;
		}
		if (step == 1 || step == 3 || step == 5) {
 8003572:	0019      	movs	r1, r3
 8003574:	4390      	bics	r0, r2
 8003576:	3a02      	subs	r2, #2
 8003578:	4391      	bics	r1, r2
 800357a:	2901      	cmp	r1, #1
 800357c:	d001      	beq.n	8003582 <commutate+0x32>
 800357e:	2b05      	cmp	r3, #5
 8003580:	d102      	bne.n	8003588 <commutate+0x38>
			rising = 0;
 8003582:	2100      	movs	r1, #0
 8003584:	4a72      	ldr	r2, [pc, #456]	; (8003750 <commutate+0x200>)
 8003586:	6011      	str	r1, [r2, #0]
		}
		if (step == 2 || step == 4 || step == 6) {
 8003588:	2802      	cmp	r0, #2
 800358a:	d001      	beq.n	8003590 <commutate+0x40>
 800358c:	2b04      	cmp	r3, #4
 800358e:	d102      	bne.n	8003596 <commutate+0x46>
			rising = 1;
 8003590:	2201      	movs	r2, #1
 8003592:	4b6f      	ldr	r3, [pc, #444]	; (8003750 <commutate+0x200>)
 8003594:	601a      	str	r2, [r3, #0]
		}
	}

	//TIM2->CNT = 0;
	if (input > 47){
 8003596:	4b6f      	ldr	r3, [pc, #444]	; (8003754 <commutate+0x204>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2b2f      	cmp	r3, #47	; 0x2f
 800359c:	dd00      	ble.n	80035a0 <commutate+0x50>
 800359e:	e0a1      	b.n	80036e4 <commutate+0x194>

//	TIM1->CNT = 0;
comStep(step);
	}

	if((bemf_counts > 50 && duty_cycle > 180)){
 80035a0:	4d6d      	ldr	r5, [pc, #436]	; (8003758 <commutate+0x208>)
 80035a2:	4b6e      	ldr	r3, [pc, #440]	; (800375c <commutate+0x20c>)
 80035a4:	682c      	ldr	r4, [r5, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	4b6d      	ldr	r3, [pc, #436]	; (8003760 <commutate+0x210>)
 80035aa:	2c32      	cmp	r4, #50	; 0x32
 80035ac:	dc3d      	bgt.n	800362a <commutate+0xda>
 80035ae:	2101      	movs	r1, #1
 80035b0:	4f6c      	ldr	r7, [pc, #432]	; (8003764 <commutate+0x214>)
 80035b2:	7019      	strb	r1, [r3, #0]
		polling_mode = 0;

	}else{
		polling_mode = 1;
	}
	if (duty_cycle < 180 || commutation_interval > 5000){
 80035b4:	2ab3      	cmp	r2, #179	; 0xb3
 80035b6:	dc63      	bgt.n	8003680 <commutate+0x130>
		polling_mode = 1;
 80035b8:	2201      	movs	r2, #1
	HAL_COMP_Stop(&hcomp1);
 80035ba:	4c6b      	ldr	r4, [pc, #428]	; (8003768 <commutate+0x218>)
		polling_mode = 1;
 80035bc:	701a      	strb	r2, [r3, #0]
	HAL_COMP_Stop(&hcomp1);
 80035be:	0020      	movs	r0, r4
 80035c0:	f7fd f994 	bl	80008ec <HAL_COMP_Stop>
	if (step == 1 || step == 4) {   // c floating
 80035c4:	6833      	ldr	r3, [r6, #0]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d065      	beq.n	8003696 <commutate+0x146>
 80035ca:	2b04      	cmp	r3, #4
 80035cc:	d063      	beq.n	8003696 <commutate+0x146>
	if (step == 2 || step == 5) {     // a floating
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d065      	beq.n	800369e <commutate+0x14e>
 80035d2:	2b05      	cmp	r3, #5
 80035d4:	d063      	beq.n	800369e <commutate+0x14e>
	if (step == 3 || step == 6) {      // b floating
 80035d6:	2b03      	cmp	r3, #3
 80035d8:	d065      	beq.n	80036a6 <commutate+0x156>
 80035da:	2b06      	cmp	r3, #6
 80035dc:	d063      	beq.n	80036a6 <commutate+0x156>
	if (HAL_COMP_Init(&hcomp1) != HAL_OK) {
 80035de:	0020      	movs	r0, r4
 80035e0:	f7fd f912 	bl	8000808 <HAL_COMP_Init>
	if (HAL_COMP_Start(&hcomp1) != HAL_OK) {
 80035e4:	0020      	movs	r0, r4
 80035e6:	f7fd f95f 	bl	80008a8 <HAL_COMP_Start>
 80035ea:	6838      	ldr	r0, [r7, #0]
 80035ec:	682c      	ldr	r4, [r5, #0]
	//	TIM6->ARR = blanktime;           // exit and set timer for blanktime interrupt
		EXTI->IMR |= (1 << 21);
	}else{
		pollingChangeCompInput();
	}
	zcfound = 0;
 80035ee:	2600      	movs	r6, #0
 80035f0:	4b5e      	ldr	r3, [pc, #376]	; (800376c <commutate+0x21c>)
    //	TIM6->CNT = 0;
    	commutation_interval = ((2*commutation_interval) + thiszctime) /3;
 80035f2:	0040      	lsls	r0, r0, #1
	zcfound = 0;
 80035f4:	601e      	str	r6, [r3, #0]
    	commutation_interval = ((2*commutation_interval) + thiszctime) /3;
 80035f6:	4b5e      	ldr	r3, [pc, #376]	; (8003770 <commutate+0x220>)
 80035f8:	2103      	movs	r1, #3
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	18c0      	adds	r0, r0, r3
 80035fe:	f7fc fe0d 	bl	800021c <__divsi3>
    		degree_time = commutation_interval >> 5;                          // about 1.85 degrees per unit divided by 32
 8003602:	4b5c      	ldr	r3, [pc, #368]	; (8003774 <commutate+0x224>)
 8003604:	1142      	asrs	r2, r0, #5
 8003606:	601a      	str	r2, [r3, #0]
    			advance = degree_time * advance_multiplier;                     //  * 16 would be about 30 degrees
 8003608:	4b5b      	ldr	r3, [pc, #364]	; (8003778 <commutate+0x228>)
    	commutation_interval = ((2*commutation_interval) + thiszctime) /3;
 800360a:	6038      	str	r0, [r7, #0]
    			advance = degree_time * advance_multiplier;                     //  * 16 would be about 30 degrees
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4353      	muls	r3, r2
 8003610:	4a5a      	ldr	r2, [pc, #360]	; (800377c <commutate+0x22c>)
 8003612:	6013      	str	r3, [r2, #0]
    //	advance = commutation_interval>>2 ;
    	waitTime = (commutation_interval >> 1) - advance;
 8003614:	1042      	asrs	r2, r0, #1
 8003616:	1ad3      	subs	r3, r2, r3
    	if (waitTime < 0){
 8003618:	d448      	bmi.n	80036ac <commutate+0x15c>
    	waitTime = (commutation_interval >> 1) - advance;
 800361a:	4a59      	ldr	r2, [pc, #356]	; (8003780 <commutate+0x230>)
 800361c:	6013      	str	r3, [r2, #0]
    			waitTime = 0;
    		}
    			blanktime = commutation_interval >>4 ;                               // divided by 8
 800361e:	4b59      	ldr	r3, [pc, #356]	; (8003784 <commutate+0x234>)
 8003620:	1100      	asrs	r0, r0, #4
    			bemf_counts++;
 8003622:	3401      	adds	r4, #1
 8003624:	602c      	str	r4, [r5, #0]
    			blanktime = commutation_interval >>4 ;                               // divided by 8
 8003626:	6018      	str	r0, [r3, #0]
}
 8003628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if((bemf_counts > 50 && duty_cycle > 180)){
 800362a:	2ab4      	cmp	r2, #180	; 0xb4
 800362c:	dd23      	ble.n	8003676 <commutate+0x126>
 800362e:	2200      	movs	r2, #0
	if (duty_cycle < 180 || commutation_interval > 5000){
 8003630:	4f4c      	ldr	r7, [pc, #304]	; (8003764 <commutate+0x214>)
 8003632:	701a      	strb	r2, [r3, #0]
 8003634:	6838      	ldr	r0, [r7, #0]
 8003636:	4a54      	ldr	r2, [pc, #336]	; (8003788 <commutate+0x238>)
 8003638:	4290      	cmp	r0, r2
 800363a:	dcbd      	bgt.n	80035b8 <commutate+0x68>
	if (step == 1 || step == 4) {   // c floating
 800363c:	6833      	ldr	r3, [r6, #0]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d066      	beq.n	8003710 <commutate+0x1c0>
 8003642:	2b04      	cmp	r3, #4
 8003644:	d064      	beq.n	8003710 <commutate+0x1c0>
	if (step == 2 || step == 5) {     // a floating
 8003646:	2b02      	cmp	r3, #2
 8003648:	d05e      	beq.n	8003708 <commutate+0x1b8>
 800364a:	2b05      	cmp	r3, #5
 800364c:	d05c      	beq.n	8003708 <commutate+0x1b8>
	if (step == 3 || step == 6) {      // b floating
 800364e:	2b03      	cmp	r3, #3
 8003650:	d04c      	beq.n	80036ec <commutate+0x19c>
 8003652:	2b06      	cmp	r3, #6
 8003654:	d04a      	beq.n	80036ec <commutate+0x19c>
	if (rising){
 8003656:	4b3e      	ldr	r3, [pc, #248]	; (8003750 <commutate+0x200>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d14d      	bne.n	80036fa <commutate+0x1aa>
	EXTI->FTSR = 0x0;
 800365e:	4a4b      	ldr	r2, [pc, #300]	; (800378c <commutate+0x23c>)
 8003660:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR = 0x200000;
 8003662:	2380      	movs	r3, #128	; 0x80
 8003664:	039b      	lsls	r3, r3, #14
 8003666:	6093      	str	r3, [r2, #8]
		EXTI->IMR |= (1 << 21);
 8003668:	2380      	movs	r3, #128	; 0x80
 800366a:	4a48      	ldr	r2, [pc, #288]	; (800378c <commutate+0x23c>)
 800366c:	039b      	lsls	r3, r3, #14
 800366e:	6811      	ldr	r1, [r2, #0]
 8003670:	430b      	orrs	r3, r1
 8003672:	6013      	str	r3, [r2, #0]
 8003674:	e7bb      	b.n	80035ee <commutate+0x9e>
 8003676:	2101      	movs	r1, #1
 8003678:	4f3a      	ldr	r7, [pc, #232]	; (8003764 <commutate+0x214>)
 800367a:	7019      	strb	r1, [r3, #0]
	if (duty_cycle < 180 || commutation_interval > 5000){
 800367c:	2ab4      	cmp	r2, #180	; 0xb4
 800367e:	d19b      	bne.n	80035b8 <commutate+0x68>
 8003680:	4a41      	ldr	r2, [pc, #260]	; (8003788 <commutate+0x238>)
 8003682:	6839      	ldr	r1, [r7, #0]
 8003684:	4291      	cmp	r1, r2
 8003686:	dc97      	bgt.n	80035b8 <commutate+0x68>
	HAL_COMP_Stop(&hcomp1);
 8003688:	4c37      	ldr	r4, [pc, #220]	; (8003768 <commutate+0x218>)
 800368a:	0020      	movs	r0, r4
 800368c:	f7fd f92e 	bl	80008ec <HAL_COMP_Stop>
	if (step == 1 || step == 4) {   // c floating
 8003690:	6833      	ldr	r3, [r6, #0]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d199      	bne.n	80035ca <commutate+0x7a>
		hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_IO1;
 8003696:	2260      	movs	r2, #96	; 0x60
 8003698:	6062      	str	r2, [r4, #4]
	if (step == 2 || step == 5) {     // a floating
 800369a:	2b02      	cmp	r3, #2
 800369c:	d199      	bne.n	80035d2 <commutate+0x82>
			hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1;  /// if f051k6  step 2 , 5 is dac 1 ( swap comp input)
 800369e:	2240      	movs	r2, #64	; 0x40
 80036a0:	6062      	str	r2, [r4, #4]
	if (step == 3 || step == 6) {      // b floating
 80036a2:	2b03      	cmp	r3, #3
 80036a4:	d199      	bne.n	80035da <commutate+0x8a>
			hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_DAC2;  /// if f051k6  step 2 , 5 is dac 1 ( swap comp input)
 80036a6:	2350      	movs	r3, #80	; 0x50
 80036a8:	6063      	str	r3, [r4, #4]
 80036aa:	e798      	b.n	80035de <commutate+0x8e>
    			waitTime = 0;
 80036ac:	4b34      	ldr	r3, [pc, #208]	; (8003780 <commutate+0x230>)
 80036ae:	601e      	str	r6, [r3, #0]
 80036b0:	e7b5      	b.n	800361e <commutate+0xce>
		step++;
 80036b2:	6832      	ldr	r2, [r6, #0]
 80036b4:	3201      	adds	r2, #1
 80036b6:	6032      	str	r2, [r6, #0]
		if (step > 6) {
 80036b8:	2a06      	cmp	r2, #6
 80036ba:	dc33      	bgt.n	8003724 <commutate+0x1d4>
 80036bc:	2104      	movs	r1, #4
 80036be:	0010      	movs	r0, r2
		if (step == 1 || step == 3 || step == 5) {
 80036c0:	0014      	movs	r4, r2
 80036c2:	4388      	bics	r0, r1
 80036c4:	3902      	subs	r1, #2
 80036c6:	438c      	bics	r4, r1
 80036c8:	2c01      	cmp	r4, #1
 80036ca:	d037      	beq.n	800373c <commutate+0x1ec>
 80036cc:	2a05      	cmp	r2, #5
 80036ce:	d02d      	beq.n	800372c <commutate+0x1dc>
		if (step == 2 || step == 4 || step == 6) {
 80036d0:	2802      	cmp	r0, #2
 80036d2:	d130      	bne.n	8003736 <commutate+0x1e6>
 80036d4:	4a1e      	ldr	r2, [pc, #120]	; (8003750 <commutate+0x200>)
			rising = 0;
 80036d6:	2300      	movs	r3, #0
 80036d8:	6013      	str	r3, [r2, #0]
	if (input > 47){
 80036da:	4b1e      	ldr	r3, [pc, #120]	; (8003754 <commutate+0x204>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2b2f      	cmp	r3, #47	; 0x2f
 80036e0:	dc00      	bgt.n	80036e4 <commutate+0x194>
 80036e2:	e75d      	b.n	80035a0 <commutate+0x50>
comStep(step);
 80036e4:	6830      	ldr	r0, [r6, #0]
 80036e6:	f7ff fdb7 	bl	8003258 <comStep>
 80036ea:	e759      	b.n	80035a0 <commutate+0x50>
		COMP->CSR = 0b1010001;
 80036ec:	2251      	movs	r2, #81	; 0x51
 80036ee:	4b28      	ldr	r3, [pc, #160]	; (8003790 <commutate+0x240>)
 80036f0:	601a      	str	r2, [r3, #0]
	if (rising){
 80036f2:	4b17      	ldr	r3, [pc, #92]	; (8003750 <commutate+0x200>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d0b1      	beq.n	800365e <commutate+0x10e>
		EXTI->RTSR = 0x0;
 80036fa:	2200      	movs	r2, #0
 80036fc:	4b23      	ldr	r3, [pc, #140]	; (800378c <commutate+0x23c>)
 80036fe:	609a      	str	r2, [r3, #8]
	EXTI->FTSR = 0x200000;
 8003700:	2280      	movs	r2, #128	; 0x80
 8003702:	0392      	lsls	r2, r2, #14
 8003704:	60da      	str	r2, [r3, #12]
 8003706:	e7af      	b.n	8003668 <commutate+0x118>
		COMP->CSR = 0b1000001;                        /// if f051k6  step 2 , 5 is dac 1 ( swap comp input)
 8003708:	2141      	movs	r1, #65	; 0x41
 800370a:	4a21      	ldr	r2, [pc, #132]	; (8003790 <commutate+0x240>)
 800370c:	6011      	str	r1, [r2, #0]
 800370e:	e79e      	b.n	800364e <commutate+0xfe>
		COMP->CSR = 0b1100001;
 8003710:	2161      	movs	r1, #97	; 0x61
 8003712:	4a1f      	ldr	r2, [pc, #124]	; (8003790 <commutate+0x240>)
 8003714:	6011      	str	r1, [r2, #0]
 8003716:	e796      	b.n	8003646 <commutate+0xf6>
			step = 6;
 8003718:	2306      	movs	r3, #6
			rising = 1;
 800371a:	2201      	movs	r2, #1
			step = 6;
 800371c:	6033      	str	r3, [r6, #0]
			rising = 1;
 800371e:	4b0c      	ldr	r3, [pc, #48]	; (8003750 <commutate+0x200>)
 8003720:	601a      	str	r2, [r3, #0]
 8003722:	e738      	b.n	8003596 <commutate+0x46>
			rising = 1;                                // is back emf rising or falling
 8003724:	4a0a      	ldr	r2, [pc, #40]	; (8003750 <commutate+0x200>)
			step = 1;
 8003726:	6033      	str	r3, [r6, #0]
			rising = 1;                                // is back emf rising or falling
 8003728:	6013      	str	r3, [r2, #0]
 800372a:	e734      	b.n	8003596 <commutate+0x46>
 800372c:	4a08      	ldr	r2, [pc, #32]	; (8003750 <commutate+0x200>)
 800372e:	6013      	str	r3, [r2, #0]
		if (step == 2 || step == 4 || step == 6) {
 8003730:	2802      	cmp	r0, #2
 8003732:	d0d0      	beq.n	80036d6 <commutate+0x186>
 8003734:	e72f      	b.n	8003596 <commutate+0x46>
 8003736:	2a04      	cmp	r2, #4
 8003738:	d0cc      	beq.n	80036d4 <commutate+0x184>
 800373a:	e72c      	b.n	8003596 <commutate+0x46>
			rising = 1;                                // is back emf rising or falling
 800373c:	4a04      	ldr	r2, [pc, #16]	; (8003750 <commutate+0x200>)
 800373e:	6014      	str	r4, [r2, #0]
		if (step == 2 || step == 4 || step == 6) {
 8003740:	2802      	cmp	r0, #2
 8003742:	d0c8      	beq.n	80036d6 <commutate+0x186>
 8003744:	e727      	b.n	8003596 <commutate+0x46>
 8003746:	46c0      	nop			; (mov r8, r8)
 8003748:	20000038 	.word	0x20000038
 800374c:	200000ac 	.word	0x200000ac
 8003750:	20000094 	.word	0x20000094
 8003754:	200001fc 	.word	0x200001fc
 8003758:	2000040c 	.word	0x2000040c
 800375c:	20000024 	.word	0x20000024
 8003760:	2000020a 	.word	0x2000020a
 8003764:	2000012c 	.word	0x2000012c
 8003768:	20000398 	.word	0x20000398
 800376c:	200000d0 	.word	0x200000d0
 8003770:	20000254 	.word	0x20000254
 8003774:	20000298 	.word	0x20000298
 8003778:	20000110 	.word	0x20000110
 800377c:	2000010c 	.word	0x2000010c
 8003780:	20000268 	.word	0x20000268
 8003784:	20000554 	.word	0x20000554
 8003788:	00001388 	.word	0x00001388
 800378c:	40010400 	.word	0x40010400
 8003790:	4001001c 	.word	0x4001001c

08003794 <startMotor>:




void startMotor() {
 8003794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003796:	464f      	mov	r7, r9
 8003798:	4646      	mov	r6, r8
 800379a:	46d6      	mov	lr, sl

 startcount++;
 800379c:	4a1f      	ldr	r2, [pc, #124]	; (800381c <startMotor+0x88>)
void startMotor() {
 800379e:	b5c0      	push	{r6, r7, lr}
 startcount++;
 80037a0:	6813      	ldr	r3, [r2, #0]

    char decaystate = comp_pwm;
 80037a2:	4c1f      	ldr	r4, [pc, #124]	; (8003820 <startMotor+0x8c>)
 startcount++;
 80037a4:	3301      	adds	r3, #1
 80037a6:	6013      	str	r3, [r2, #0]
    char decaystate = comp_pwm;
 80037a8:	7823      	ldrb	r3, [r4, #0]
    sensorless = 0;
 80037aa:	4d1e      	ldr	r5, [pc, #120]	; (8003824 <startMotor+0x90>)
    char decaystate = comp_pwm;
 80037ac:	4699      	mov	r9, r3
    sensorless = 0;
 80037ae:	2300      	movs	r3, #0
	if (running == 0){
 80037b0:	4f1d      	ldr	r7, [pc, #116]	; (8003828 <startMotor+0x94>)
    sensorless = 0;
 80037b2:	602b      	str	r3, [r5, #0]
	if (running == 0){
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	4698      	mov	r8, r3
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d12b      	bne.n	8003814 <startMotor+0x80>
		EXTI->IMR &= ~(1 << 21);
 80037bc:	4e1b      	ldr	r6, [pc, #108]	; (800382c <startMotor+0x98>)
 80037be:	491c      	ldr	r1, [pc, #112]	; (8003830 <startMotor+0x9c>)
 80037c0:	6832      	ldr	r2, [r6, #0]
 80037c2:	400a      	ands	r2, r1
 80037c4:	6032      	str	r2, [r6, #0]
		EXTI->PR &=~(1 << 21);
 80037c6:	6973      	ldr	r3, [r6, #20]
 80037c8:	400b      	ands	r3, r1
 80037ca:	6173      	str	r3, [r6, #20]
		comp_pwm = 1;
 80037cc:	2301      	movs	r3, #1
 80037ce:	469a      	mov	sl, r3
 80037d0:	7023      	strb	r3, [r4, #0]
	commutate();
 80037d2:	f7ff febd 	bl	8003550 <commutate>
	commutation_interval = 10000;
 80037d6:	4b17      	ldr	r3, [pc, #92]	; (8003834 <startMotor+0xa0>)
 80037d8:	4a17      	ldr	r2, [pc, #92]	; (8003838 <startMotor+0xa4>)
 80037da:	601a      	str	r2, [r3, #0]
	TIM3->CNT = 0;
 80037dc:	4642      	mov	r2, r8
 80037de:	4b17      	ldr	r3, [pc, #92]	; (800383c <startMotor+0xa8>)
 80037e0:	625a      	str	r2, [r3, #36]	; 0x24
	running = 1;
 80037e2:	4653      	mov	r3, sl
 80037e4:	603b      	str	r3, [r7, #0]
	if(!polling_mode){
 80037e6:	4b16      	ldr	r3, [pc, #88]	; (8003840 <startMotor+0xac>)
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d104      	bne.n	80037f8 <startMotor+0x64>
	EXTI->IMR |= (1 << 21);
 80037ee:	2380      	movs	r3, #128	; 0x80
 80037f0:	6832      	ldr	r2, [r6, #0]
 80037f2:	039b      	lsls	r3, r3, #14
 80037f4:	4313      	orrs	r3, r2
 80037f6:	6033      	str	r3, [r6, #0]
		if (HAL_COMP_Start(&hcomp1) != HAL_OK) {
			/* Initialization Error */
			Error_Handler();
		}
	}
	comp_pwm = decaystate;    // return to normal
 80037f8:	464b      	mov	r3, r9
 80037fa:	7023      	strb	r3, [r4, #0]
	sensorless = 1;
 80037fc:	2301      	movs	r3, #1
 80037fe:	602b      	str	r3, [r5, #0]
	startupcountdown =0;
 8003800:	2300      	movs	r3, #0
 8003802:	4a10      	ldr	r2, [pc, #64]	; (8003844 <startMotor+0xb0>)
 8003804:	6013      	str	r3, [r2, #0]
	bemf_counts = 0;
 8003806:	4a10      	ldr	r2, [pc, #64]	; (8003848 <startMotor+0xb4>)
 8003808:	6013      	str	r3, [r2, #0]

}
 800380a:	bc1c      	pop	{r2, r3, r4}
 800380c:	4690      	mov	r8, r2
 800380e:	4699      	mov	r9, r3
 8003810:	46a2      	mov	sl, r4
 8003812:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (HAL_COMP_Start(&hcomp1) != HAL_OK) {
 8003814:	480d      	ldr	r0, [pc, #52]	; (800384c <startMotor+0xb8>)
 8003816:	f7fd f847 	bl	80008a8 <HAL_COMP_Start>
 800381a:	e7ed      	b.n	80037f8 <startMotor+0x64>
 800381c:	20000240 	.word	0x20000240
 8003820:	2000001c 	.word	0x2000001c
 8003824:	20000228 	.word	0x20000228
 8003828:	20000224 	.word	0x20000224
 800382c:	40010400 	.word	0x40010400
 8003830:	ffdfffff 	.word	0xffdfffff
 8003834:	2000012c 	.word	0x2000012c
 8003838:	00002710 	.word	0x00002710
 800383c:	40000400 	.word	0x40000400
 8003840:	2000020a 	.word	0x2000020a
 8003844:	20000248 	.word	0x20000248
 8003848:	2000040c 	.word	0x2000040c
 800384c:	20000398 	.word	0x20000398

08003850 <HAL_COMP_TriggerCallback>:

void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp) {
// TIM17->CNT = 0;
//	EXTI->IMR &= (0 << 21);
//		EXTI->PR &=(0 << 21);
	if ((TIM3->CNT < commutation_interval >> 1)&& bemf_counts > 3 ){
 8003850:	4b2f      	ldr	r3, [pc, #188]	; (8003910 <HAL_COMP_TriggerCallback+0xc0>)
void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp) {
 8003852:	b530      	push	{r4, r5, lr}
	if ((TIM3->CNT < commutation_interval >> 1)&& bemf_counts > 3 ){
 8003854:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003856:	4b2f      	ldr	r3, [pc, #188]	; (8003914 <HAL_COMP_TriggerCallback+0xc4>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	105a      	asrs	r2, r3, #1
 800385c:	4291      	cmp	r1, r2
 800385e:	d203      	bcs.n	8003868 <HAL_COMP_TriggerCallback+0x18>
 8003860:	4a2d      	ldr	r2, [pc, #180]	; (8003918 <HAL_COMP_TriggerCallback+0xc8>)
 8003862:	6812      	ldr	r2, [r2, #0]
 8003864:	2a03      	cmp	r2, #3
 8003866:	dc45      	bgt.n	80038f4 <HAL_COMP_TriggerCallback+0xa4>
//	EXTI->IMR |= (1 << 21);
	return;
}

if(commutation_interval > 500){
 8003868:	22fa      	movs	r2, #250	; 0xfa
 800386a:	0052      	lsls	r2, r2, #1
 800386c:	4293      	cmp	r3, r2
 800386e:	dd08      	ble.n	8003882 <HAL_COMP_TriggerCallback+0x32>
while (TIM3->CNT - thiszctime < filter_delay){
 8003870:	4b2a      	ldr	r3, [pc, #168]	; (800391c <HAL_COMP_TriggerCallback+0xcc>)
 8003872:	4a27      	ldr	r2, [pc, #156]	; (8003910 <HAL_COMP_TriggerCallback+0xc0>)
 8003874:	6818      	ldr	r0, [r3, #0]
 8003876:	4b2a      	ldr	r3, [pc, #168]	; (8003920 <HAL_COMP_TriggerCallback+0xd0>)
 8003878:	6819      	ldr	r1, [r3, #0]
 800387a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800387c:	1a1b      	subs	r3, r3, r0
 800387e:	428b      	cmp	r3, r1
 8003880:	d3fb      	bcc.n	800387a <HAL_COMP_TriggerCallback+0x2a>
}
}

compit +=1;
 8003882:	4a28      	ldr	r2, [pc, #160]	; (8003924 <HAL_COMP_TriggerCallback+0xd4>)
 8003884:	7813      	ldrb	r3, [r2, #0]
 8003886:	3301      	adds	r3, #1
 8003888:	b2db      	uxtb	r3, r3
 800388a:	7013      	strb	r3, [r2, #0]
if (compit > 100){
 800388c:	2b64      	cmp	r3, #100	; 0x64
 800388e:	d832      	bhi.n	80038f6 <HAL_COMP_TriggerCallback+0xa6>
//		input = 0;
	error = 1;
	return;
}

for (int i = 0; i < filter_level; i++){
 8003890:	4b25      	ldr	r3, [pc, #148]	; (8003928 <HAL_COMP_TriggerCallback+0xd8>)
 8003892:	7818      	ldrb	r0, [r3, #0]
 8003894:	2800      	cmp	r0, #0
 8003896:	d012      	beq.n	80038be <HAL_COMP_TriggerCallback+0x6e>
if (rising == (COMP1->CSR &  1<<14) >> 14){     // if the comparator output is not what is expected
 8003898:	4924      	ldr	r1, [pc, #144]	; (800392c <HAL_COMP_TriggerCallback+0xdc>)
 800389a:	4a25      	ldr	r2, [pc, #148]	; (8003930 <HAL_COMP_TriggerCallback+0xe0>)
 800389c:	880b      	ldrh	r3, [r1, #0]
 800389e:	6814      	ldr	r4, [r2, #0]
 80038a0:	045b      	lsls	r3, r3, #17
 80038a2:	0fdb      	lsrs	r3, r3, #31
 80038a4:	42a3      	cmp	r3, r4
 80038a6:	d025      	beq.n	80038f4 <HAL_COMP_TriggerCallback+0xa4>
for (int i = 0; i < filter_level; i++){
 80038a8:	2200      	movs	r2, #0
if (rising == (COMP1->CSR &  1<<14) >> 14){     // if the comparator output is not what is expected
 80038aa:	2501      	movs	r5, #1
 80038ac:	e004      	b.n	80038b8 <HAL_COMP_TriggerCallback+0x68>
 80038ae:	880b      	ldrh	r3, [r1, #0]
 80038b0:	0b9b      	lsrs	r3, r3, #14
 80038b2:	402b      	ands	r3, r5
 80038b4:	42a3      	cmp	r3, r4
 80038b6:	d01d      	beq.n	80038f4 <HAL_COMP_TriggerCallback+0xa4>
for (int i = 0; i < filter_level; i++){
 80038b8:	3201      	adds	r2, #1
 80038ba:	4282      	cmp	r2, r0
 80038bc:	dbf7      	blt.n	80038ae <HAL_COMP_TriggerCallback+0x5e>
//	EXTI->IMR |= (1 << 21);
	return;
//	EXTI->IMR |= (1 << 21);
}
}
		EXTI->IMR &= ~(1 << 21);               // turn off interrupts and pending requests.
 80038be:	4b1d      	ldr	r3, [pc, #116]	; (8003934 <HAL_COMP_TriggerCallback+0xe4>)
 80038c0:	481d      	ldr	r0, [pc, #116]	; (8003938 <HAL_COMP_TriggerCallback+0xe8>)
 80038c2:	6819      	ldr	r1, [r3, #0]
 80038c4:	4001      	ands	r1, r0
 80038c6:	6019      	str	r1, [r3, #0]
		EXTI->PR &=~(1 << 21);
 80038c8:	695a      	ldr	r2, [r3, #20]
 80038ca:	4002      	ands	r2, r0
 80038cc:	615a      	str	r2, [r3, #20]
		thiszctime = TIM3->CNT;
 80038ce:	4a10      	ldr	r2, [pc, #64]	; (8003910 <HAL_COMP_TriggerCallback+0xc0>)
 80038d0:	4b12      	ldr	r3, [pc, #72]	; (800391c <HAL_COMP_TriggerCallback+0xcc>)
 80038d2:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80038d4:	6019      	str	r1, [r3, #0]
		TIM3->CNT = 0;
 80038d6:	2300      	movs	r3, #0
		zctimeout = 0;
		TIM6->CNT = 0;
		TIM6->ARR = waitTime;
		__HAL_TIM_ENABLE_IT(&htim6, TIM_IT_UPDATE);
 80038d8:	2101      	movs	r1, #1
		TIM3->CNT = 0;
 80038da:	6253      	str	r3, [r2, #36]	; 0x24
		zctimeout = 0;
 80038dc:	4a17      	ldr	r2, [pc, #92]	; (800393c <HAL_COMP_TriggerCallback+0xec>)
 80038de:	6013      	str	r3, [r2, #0]
		TIM6->CNT = 0;
 80038e0:	4a17      	ldr	r2, [pc, #92]	; (8003940 <HAL_COMP_TriggerCallback+0xf0>)
 80038e2:	6253      	str	r3, [r2, #36]	; 0x24
		TIM6->ARR = waitTime;
 80038e4:	4b17      	ldr	r3, [pc, #92]	; (8003944 <HAL_COMP_TriggerCallback+0xf4>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	62d3      	str	r3, [r2, #44]	; 0x2c
		__HAL_TIM_ENABLE_IT(&htim6, TIM_IT_UPDATE);
 80038ea:	4b17      	ldr	r3, [pc, #92]	; (8003948 <HAL_COMP_TriggerCallback+0xf8>)
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	68d3      	ldr	r3, [r2, #12]
 80038f0:	430b      	orrs	r3, r1
 80038f2:	60d3      	str	r3, [r2, #12]

}
 80038f4:	bd30      	pop	{r4, r5, pc}
	EXTI->IMR &= ~(1 << 21);
 80038f6:	4b0f      	ldr	r3, [pc, #60]	; (8003934 <HAL_COMP_TriggerCallback+0xe4>)
 80038f8:	480f      	ldr	r0, [pc, #60]	; (8003938 <HAL_COMP_TriggerCallback+0xe8>)
 80038fa:	6819      	ldr	r1, [r3, #0]
 80038fc:	4001      	ands	r1, r0
 80038fe:	6019      	str	r1, [r3, #0]
	EXTI->PR &=~(1 << 21);
 8003900:	695a      	ldr	r2, [r3, #20]
 8003902:	4002      	ands	r2, r0
 8003904:	615a      	str	r2, [r3, #20]
	error = 1;
 8003906:	2201      	movs	r2, #1
 8003908:	4b10      	ldr	r3, [pc, #64]	; (800394c <HAL_COMP_TriggerCallback+0xfc>)
 800390a:	601a      	str	r2, [r3, #0]
	return;
 800390c:	e7f2      	b.n	80038f4 <HAL_COMP_TriggerCallback+0xa4>
 800390e:	46c0      	nop			; (mov r8, r8)
 8003910:	40000400 	.word	0x40000400
 8003914:	2000012c 	.word	0x2000012c
 8003918:	2000040c 	.word	0x2000040c
 800391c:	20000254 	.word	0x20000254
 8003920:	20000030 	.word	0x20000030
 8003924:	20000134 	.word	0x20000134
 8003928:	20000034 	.word	0x20000034
 800392c:	4001001c 	.word	0x4001001c
 8003930:	20000094 	.word	0x20000094
 8003934:	40010400 	.word	0x40010400
 8003938:	ffdfffff 	.word	0xffdfffff
 800393c:	2000026c 	.word	0x2000026c
 8003940:	40001000 	.word	0x40001000
 8003944:	20000268 	.word	0x20000268
 8003948:	20000514 	.word	0x20000514
 800394c:	20000190 	.word	0x20000190

08003950 <playInputTune>:
	HAL_Delay(100);
	allOff();
	TIM1->PSC = 0;
}

void playInputTune(){
 8003950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003952:	46de      	mov	lr, fp
 8003954:	4657      	mov	r7, sl
 8003956:	464e      	mov	r6, r9
 8003958:	4645      	mov	r5, r8
	TIM1->PSC = 100;
 800395a:	2264      	movs	r2, #100	; 0x64
void playInputTune(){
 800395c:	b5e0      	push	{r5, r6, r7, lr}
	TIM1->PSC = 100;
 800395e:	4b49      	ldr	r3, [pc, #292]	; (8003a84 <playInputTune+0x134>)
 8003960:	629a      	str	r2, [r3, #40]	; 0x28
	TIM1->CCR1 = 5;
 8003962:	3a5f      	subs	r2, #95	; 0x5f
 8003964:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 5;
 8003966:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 5;
 8003968:	63da      	str	r2, [r3, #60]	; 0x3c
		if(!comp_pwm  || prop_brake_active){            // for future
 800396a:	4b47      	ldr	r3, [pc, #284]	; (8003a88 <playInputTune+0x138>)
 800396c:	4a47      	ldr	r2, [pc, #284]	; (8003a8c <playInputTune+0x13c>)
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00a      	beq.n	800398a <playInputTune+0x3a>
 8003974:	4b46      	ldr	r3, [pc, #280]	; (8003a90 <playInputTune+0x140>)
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d106      	bne.n	800398a <playInputTune+0x3a>
 800397c:	2103      	movs	r1, #3
 800397e:	6813      	ldr	r3, [r2, #0]
 8003980:	438b      	bics	r3, r1
 8003982:	3901      	subs	r1, #1
 8003984:	430b      	orrs	r3, r1
 8003986:	6013      	str	r3, [r2, #0]
 8003988:	e006      	b.n	8003998 <playInputTune+0x48>
 800398a:	2103      	movs	r1, #3
 800398c:	6813      	ldr	r3, [r2, #0]
 800398e:	438b      	bics	r3, r1
 8003990:	3902      	subs	r1, #2
 8003992:	430b      	orrs	r3, r1
 8003994:	6013      	str	r3, [r2, #0]
		GPIOB->BRR = GPIO_PIN_0;
 8003996:	6291      	str	r1, [r2, #40]	; 0x28
 8003998:	2490      	movs	r4, #144	; 0x90
 800399a:	05e4      	lsls	r4, r4, #23
 800399c:	6822      	ldr	r2, [r4, #0]
 800399e:	4b3d      	ldr	r3, [pc, #244]	; (8003a94 <playInputTune+0x144>)
 80039a0:	2780      	movs	r7, #128	; 0x80
 80039a2:	469b      	mov	fp, r3
 80039a4:	401a      	ands	r2, r3
 80039a6:	2380      	movs	r3, #128	; 0x80
 80039a8:	031b      	lsls	r3, r3, #12
 80039aa:	4313      	orrs	r3, r2
 80039ac:	6023      	str	r3, [r4, #0]
 80039ae:	6823      	ldr	r3, [r4, #0]
 80039b0:	4a39      	ldr	r2, [pc, #228]	; (8003a98 <playInputTune+0x148>)
 80039b2:	01ff      	lsls	r7, r7, #7
 80039b4:	4013      	ands	r3, r2
 80039b6:	433b      	orrs	r3, r7
 80039b8:	6023      	str	r3, [r4, #0]
		GPIOA->BRR = GPIO_PIN_7;
 80039ba:	2380      	movs	r3, #128	; 0x80
 80039bc:	2180      	movs	r1, #128	; 0x80
		GPIOA->BRR = GPIO_PIN_8;
 80039be:	2080      	movs	r0, #128	; 0x80
 80039c0:	260c      	movs	r6, #12
		GPIOA->BRR = GPIO_PIN_7;
 80039c2:	62a3      	str	r3, [r4, #40]	; 0x28
 80039c4:	6823      	ldr	r3, [r4, #0]
 80039c6:	4692      	mov	sl, r2
 80039c8:	4a34      	ldr	r2, [pc, #208]	; (8003a9c <playInputTune+0x14c>)
 80039ca:	0249      	lsls	r1, r1, #9
 80039cc:	4013      	ands	r3, r2
 80039ce:	4d2f      	ldr	r5, [pc, #188]	; (8003a8c <playInputTune+0x13c>)
 80039d0:	430b      	orrs	r3, r1
		GPIOA->BRR = GPIO_PIN_8;
 80039d2:	0040      	lsls	r0, r0, #1
 80039d4:	6023      	str	r3, [r4, #0]
 80039d6:	62a0      	str	r0, [r4, #40]	; 0x28
 80039d8:	682b      	ldr	r3, [r5, #0]
		GPIOA->BRR = GPIO_PIN_10;
 80039da:	2080      	movs	r0, #128	; 0x80
 80039dc:	43b3      	bics	r3, r6
 80039de:	3e08      	subs	r6, #8
 80039e0:	4333      	orrs	r3, r6
 80039e2:	602b      	str	r3, [r5, #0]
		GPIOB->BSRR = GPIO_PIN_1;
 80039e4:	2302      	movs	r3, #2
 80039e6:	2680      	movs	r6, #128	; 0x80
 80039e8:	61ab      	str	r3, [r5, #24]
 80039ea:	6823      	ldr	r3, [r4, #0]
 80039ec:	492c      	ldr	r1, [pc, #176]	; (8003aa0 <playInputTune+0x150>)
 80039ee:	0376      	lsls	r6, r6, #13
 80039f0:	400b      	ands	r3, r1
 80039f2:	4333      	orrs	r3, r6
		GPIOA->BRR = GPIO_PIN_10;
 80039f4:	00c0      	lsls	r0, r0, #3
 80039f6:	6023      	str	r3, [r4, #0]
 80039f8:	4681      	mov	r9, r0
 80039fa:	62a0      	str	r0, [r4, #40]	; 0x28
	comStep(6);
	HAL_Delay(100);
 80039fc:	2064      	movs	r0, #100	; 0x64
 80039fe:	f7fc fd41 	bl	8000484 <HAL_Delay>
	TIM1->PSC = 50;
 8003a02:	2332      	movs	r3, #50	; 0x32
 8003a04:	481f      	ldr	r0, [pc, #124]	; (8003a84 <playInputTune+0x134>)
 8003a06:	4680      	mov	r8, r0
 8003a08:	6283      	str	r3, [r0, #40]	; 0x28
	HAL_Delay(100);
 8003a0a:	2064      	movs	r0, #100	; 0x64
 8003a0c:	f7fc fd3a 	bl	8000484 <HAL_Delay>
 8003a10:	2203      	movs	r2, #3
 8003a12:	682b      	ldr	r3, [r5, #0]
 8003a14:	4658      	mov	r0, fp
 8003a16:	4393      	bics	r3, r2
 8003a18:	3a02      	subs	r2, #2
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	602b      	str	r3, [r5, #0]
 8003a1e:	2380      	movs	r3, #128	; 0x80
		GPIOB->BRR = GPIO_PIN_0;
 8003a20:	62aa      	str	r2, [r5, #40]	; 0x28
 8003a22:	6822      	ldr	r2, [r4, #0]
 8003a24:	02db      	lsls	r3, r3, #11
 8003a26:	4002      	ands	r2, r0
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	6023      	str	r3, [r4, #0]
		GPIOA->BRR = GPIO_PIN_9;
 8003a2c:	2380      	movs	r3, #128	; 0x80
 8003a2e:	4650      	mov	r0, sl
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	62a3      	str	r3, [r4, #40]	; 0x28
 8003a34:	6823      	ldr	r3, [r4, #0]
 8003a36:	2180      	movs	r1, #128	; 0x80
 8003a38:	4003      	ands	r3, r0
 8003a3a:	431f      	orrs	r7, r3
		GPIOA->BRR = GPIO_PIN_7;
 8003a3c:	2380      	movs	r3, #128	; 0x80
		GPIOA->BRR = GPIO_PIN_8;
 8003a3e:	2080      	movs	r0, #128	; 0x80
 8003a40:	6027      	str	r7, [r4, #0]
		GPIOA->BRR = GPIO_PIN_7;
 8003a42:	62a3      	str	r3, [r4, #40]	; 0x28
 8003a44:	6823      	ldr	r3, [r4, #0]
 8003a46:	4a15      	ldr	r2, [pc, #84]	; (8003a9c <playInputTune+0x14c>)
 8003a48:	0249      	lsls	r1, r1, #9
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	220c      	movs	r2, #12
 8003a4e:	430b      	orrs	r3, r1
		GPIOA->BRR = GPIO_PIN_8;
 8003a50:	0040      	lsls	r0, r0, #1
 8003a52:	6023      	str	r3, [r4, #0]
 8003a54:	62a0      	str	r0, [r4, #40]	; 0x28
 8003a56:	682b      	ldr	r3, [r5, #0]
 8003a58:	4911      	ldr	r1, [pc, #68]	; (8003aa0 <playInputTune+0x150>)
 8003a5a:	4393      	bics	r3, r2
 8003a5c:	3a08      	subs	r2, #8
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	602b      	str	r3, [r5, #0]
		GPIOB->BRR = GPIO_PIN_1;
 8003a62:	2302      	movs	r3, #2
 8003a64:	62ab      	str	r3, [r5, #40]	; 0x28
 8003a66:	6823      	ldr	r3, [r4, #0]
	allOff();
	TIM1->PSC = 0;
 8003a68:	4642      	mov	r2, r8
 8003a6a:	400b      	ands	r3, r1
 8003a6c:	431e      	orrs	r6, r3
		GPIOA->BRR = GPIO_PIN_10;
 8003a6e:	464b      	mov	r3, r9
 8003a70:	6026      	str	r6, [r4, #0]
 8003a72:	62a3      	str	r3, [r4, #40]	; 0x28
	TIM1->PSC = 0;
 8003a74:	2300      	movs	r3, #0
 8003a76:	6293      	str	r3, [r2, #40]	; 0x28
}
 8003a78:	bc3c      	pop	{r2, r3, r4, r5}
 8003a7a:	4690      	mov	r8, r2
 8003a7c:	4699      	mov	r9, r3
 8003a7e:	46a2      	mov	sl, r4
 8003a80:	46ab      	mov	fp, r5
 8003a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a84:	40012c00 	.word	0x40012c00
 8003a88:	2000001c 	.word	0x2000001c
 8003a8c:	48000400 	.word	0x48000400
 8003a90:	2000020c 	.word	0x2000020c
 8003a94:	fff3ffff 	.word	0xfff3ffff
 8003a98:	ffff3fff 	.word	0xffff3fff
 8003a9c:	fffcffff 	.word	0xfffcffff
 8003aa0:	ffcfffff 	.word	0xffcfffff

08003aa4 <HAL_ADC_ConvCpltCallback>:

void getADCs(){
	//voltageraw = ADC1ConvertedValues[0];
	currentraw = ADC1ConvertedValues[0];
 8003aa4:	4b03      	ldr	r3, [pc, #12]	; (8003ab4 <HAL_ADC_ConvCpltCallback+0x10>)
 8003aa6:	4a04      	ldr	r2, [pc, #16]	; (8003ab8 <HAL_ADC_ConvCpltCallback+0x14>)
 8003aa8:	6819      	ldr	r1, [r3, #0]
 8003aaa:	6011      	str	r1, [r2, #0]
	tempraw = ADC1ConvertedValues[1];
 8003aac:	685a      	ldr	r2, [r3, #4]
 8003aae:	4b03      	ldr	r3, [pc, #12]	; (8003abc <HAL_ADC_ConvCpltCallback+0x18>)
 8003ab0:	601a      	str	r2, [r3, #0]


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
	getADCs();
}
 8003ab2:	4770      	bx	lr
 8003ab4:	200000f8 	.word	0x200000f8
 8003ab8:	2000013c 	.word	0x2000013c
 8003abc:	20000250 	.word	0x20000250

08003ac0 <detectInput>:


void detectInput(){
 8003ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	smallestnumber = 20000;
	dshot = 0;
 8003ac2:	2300      	movs	r3, #0
	proshot = 0;
 8003ac4:	4a3f      	ldr	r2, [pc, #252]	; (8003bc4 <detectInput+0x104>)
	dshot = 0;
 8003ac6:	4e40      	ldr	r6, [pc, #256]	; (8003bc8 <detectInput+0x108>)
	proshot = 0;
 8003ac8:	7013      	strb	r3, [r2, #0]
	multishot = 0;
 8003aca:	4a40      	ldr	r2, [pc, #256]	; (8003bcc <detectInput+0x10c>)
	oneshot42 = 0;
	oneshot125 = 0;
	servoPwm = 0;
 8003acc:	4f40      	ldr	r7, [pc, #256]	; (8003bd0 <detectInput+0x110>)
	multishot = 0;
 8003ace:	7013      	strb	r3, [r2, #0]
	oneshot42 = 0;
 8003ad0:	4a40      	ldr	r2, [pc, #256]	; (8003bd4 <detectInput+0x114>)
	dshot = 0;
 8003ad2:	7033      	strb	r3, [r6, #0]
	oneshot42 = 0;
 8003ad4:	7013      	strb	r3, [r2, #0]
	oneshot125 = 0;
 8003ad6:	4a40      	ldr	r2, [pc, #256]	; (8003bd8 <detectInput+0x118>)
	servoPwm = 0;
 8003ad8:	703b      	strb	r3, [r7, #0]
	oneshot125 = 0;
 8003ada:	7013      	strb	r3, [r2, #0]
//	int lastnumber = dma_buffer[0];
	for ( int j = 1 ; j < input_buffer_size; j++){
 8003adc:	4b3f      	ldr	r3, [pc, #252]	; (8003bdc <detectInput+0x11c>)
	smallestnumber = 20000;
 8003ade:	4c40      	ldr	r4, [pc, #256]	; (8003be0 <detectInput+0x120>)
 8003ae0:	4840      	ldr	r0, [pc, #256]	; (8003be4 <detectInput+0x124>)
	for ( int j = 1 ; j < input_buffer_size; j++){
 8003ae2:	6819      	ldr	r1, [r3, #0]
	smallestnumber = 20000;
 8003ae4:	6020      	str	r0, [r4, #0]
	for ( int j = 1 ; j < input_buffer_size; j++){
 8003ae6:	2901      	cmp	r1, #1
 8003ae8:	dd0e      	ble.n	8003b08 <detectInput+0x48>
 8003aea:	2500      	movs	r5, #0
 8003aec:	4b3e      	ldr	r3, [pc, #248]	; (8003be8 <detectInput+0x128>)
 8003aee:	0089      	lsls	r1, r1, #2
 8003af0:	1f1a      	subs	r2, r3, #4
 8003af2:	1889      	adds	r1, r1, r2

		if(dma_buffer[j]  < smallestnumber){ // blank space
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	4290      	cmp	r0, r2
 8003af8:	d901      	bls.n	8003afe <detectInput+0x3e>
			smallestnumber = dma_buffer[j];
 8003afa:	0010      	movs	r0, r2
 8003afc:	2501      	movs	r5, #1
 8003afe:	3304      	adds	r3, #4
	for ( int j = 1 ; j < input_buffer_size; j++){
 8003b00:	4299      	cmp	r1, r3
 8003b02:	d1f7      	bne.n	8003af4 <detectInput+0x34>
 8003b04:	2d00      	cmp	r5, #0
 8003b06:	d11d      	bne.n	8003b44 <detectInput+0x84>
 8003b08:	4d38      	ldr	r5, [pc, #224]	; (8003bec <detectInput+0x12c>)
//	}
//	if ((smallestnumber > 3000 )&&(smallestnumber < 7000)){
//		oneshot125 = 1;
//	}
	if (smallestnumber > 100){
		servoPwm = 1;
 8003b0a:	2301      	movs	r3, #1
		TIM15->PSC = 47;
 8003b0c:	222f      	movs	r2, #47	; 0x2f
		servoPwm = 1;
 8003b0e:	703b      	strb	r3, [r7, #0]
		TIM15->PSC = 47;
 8003b10:	4b37      	ldr	r3, [pc, #220]	; (8003bf0 <detectInput+0x130>)
//		TIM16->PSC = 47;
//		TIM16->ARR = 10000;
		HAL_TIM_Base_Stop(&htim16);
 8003b12:	4838      	ldr	r0, [pc, #224]	; (8003bf4 <detectInput+0x134>)
		TIM15->PSC = 47;
 8003b14:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_TIM_Base_Stop(&htim16);
 8003b16:	f7fd ff2f 	bl	8001978 <HAL_TIM_Base_Stop>
		IC_buffer_size = 6;
 8003b1a:	2306      	movs	r3, #6
 8003b1c:	602b      	str	r3, [r5, #0]

	}

	if (smallestnumber == 0){
 8003b1e:	6823      	ldr	r3, [r4, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d108      	bne.n	8003b36 <detectInput+0x76>
		inputSet = 0;
 8003b24:	4a34      	ldr	r2, [pc, #208]	; (8003bf8 <detectInput+0x138>)
 8003b26:	7013      	strb	r3, [r2, #0]
		inputSet = 1;

		HAL_Delay(50);
		//	playInputTune();
	}
	HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , IC_buffer_size);
 8003b28:	882b      	ldrh	r3, [r5, #0]
 8003b2a:	4a34      	ldr	r2, [pc, #208]	; (8003bfc <detectInput+0x13c>)
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	4834      	ldr	r0, [pc, #208]	; (8003c00 <detectInput+0x140>)
 8003b30:	f7fe f90a 	bl	8001d48 <HAL_TIM_IC_Start_DMA>
}
 8003b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		inputSet = 1;
 8003b36:	2201      	movs	r2, #1
 8003b38:	4b2f      	ldr	r3, [pc, #188]	; (8003bf8 <detectInput+0x138>)
		HAL_Delay(50);
 8003b3a:	2032      	movs	r0, #50	; 0x32
		inputSet = 1;
 8003b3c:	701a      	strb	r2, [r3, #0]
		HAL_Delay(50);
 8003b3e:	f7fc fca1 	bl	8000484 <HAL_Delay>
 8003b42:	e7f1      	b.n	8003b28 <detectInput+0x68>
 8003b44:	2329      	movs	r3, #41	; 0x29
 8003b46:	425b      	negs	r3, r3
 8003b48:	469c      	mov	ip, r3
 8003b4a:	0001      	movs	r1, r0
	if ((smallestnumber > 3)&&(smallestnumber < 20)){
 8003b4c:	1f03      	subs	r3, r0, #4
 8003b4e:	6020      	str	r0, [r4, #0]
 8003b50:	3915      	subs	r1, #21
 8003b52:	4484      	add	ip, r0
 8003b54:	4d25      	ldr	r5, [pc, #148]	; (8003bec <detectInput+0x12c>)
 8003b56:	2b0f      	cmp	r3, #15
 8003b58:	d80c      	bhi.n	8003b74 <detectInput+0xb4>
		dshot = 1;
 8003b5a:	2301      	movs	r3, #1
		timer_15_prescaler = 24;
 8003b5c:	4a29      	ldr	r2, [pc, #164]	; (8003c04 <detectInput+0x144>)
		dshot = 1;
 8003b5e:	7033      	strb	r3, [r6, #0]
		timer_15_prescaler = 24;
 8003b60:	3317      	adds	r3, #23
 8003b62:	6013      	str	r3, [r2, #0]
		TIM15->PSC = timer_15_prescaler;
 8003b64:	4a22      	ldr	r2, [pc, #136]	; (8003bf0 <detectInput+0x130>)
 8003b66:	6293      	str	r3, [r2, #40]	; 0x28
		TIM16->ARR = 8000;
 8003b68:	22fa      	movs	r2, #250	; 0xfa
		IC_buffer_size = 32;
 8003b6a:	3308      	adds	r3, #8
 8003b6c:	602b      	str	r3, [r5, #0]
		TIM16->ARR = 8000;
 8003b6e:	4b26      	ldr	r3, [pc, #152]	; (8003c08 <detectInput+0x148>)
 8003b70:	0152      	lsls	r2, r2, #5
 8003b72:	62da      	str	r2, [r3, #44]	; 0x2c
	if ((smallestnumber > 20)&&(smallestnumber < 40)){
 8003b74:	2912      	cmp	r1, #18
 8003b76:	d80d      	bhi.n	8003b94 <detectInput+0xd4>
			timer_15_prescaler = 36;
 8003b78:	2324      	movs	r3, #36	; 0x24
			dshot = 1;
 8003b7a:	2201      	movs	r2, #1
			timer_15_prescaler = 36;
 8003b7c:	4921      	ldr	r1, [pc, #132]	; (8003c04 <detectInput+0x144>)
			dshot = 1;
 8003b7e:	7032      	strb	r2, [r6, #0]
			timer_15_prescaler = 36;
 8003b80:	600b      	str	r3, [r1, #0]
			TIM15->PSC = timer_15_prescaler;
 8003b82:	491b      	ldr	r1, [pc, #108]	; (8003bf0 <detectInput+0x130>)
 8003b84:	628b      	str	r3, [r1, #40]	; 0x28
			TIM16->PSC = 1;
 8003b86:	4b20      	ldr	r3, [pc, #128]	; (8003c08 <detectInput+0x148>)
 8003b88:	629a      	str	r2, [r3, #40]	; 0x28
			TIM16->ARR = 8000;
 8003b8a:	22fa      	movs	r2, #250	; 0xfa
 8003b8c:	0152      	lsls	r2, r2, #5
 8003b8e:	62da      	str	r2, [r3, #44]	; 0x2c
			IC_buffer_size = 32;
 8003b90:	2320      	movs	r3, #32
 8003b92:	602b      	str	r3, [r5, #0]
	if ((smallestnumber > 40)&&(smallestnumber < 55)){
 8003b94:	4663      	mov	r3, ip
 8003b96:	2b0d      	cmp	r3, #13
 8003b98:	d811      	bhi.n	8003bbe <detectInput+0xfe>
			timer_15_prescaler = 64;
 8003b9a:	2240      	movs	r2, #64	; 0x40
 8003b9c:	4919      	ldr	r1, [pc, #100]	; (8003c04 <detectInput+0x144>)
			dshot = 1;
 8003b9e:	2301      	movs	r3, #1
			timer_15_prescaler = 64;
 8003ba0:	600a      	str	r2, [r1, #0]
			TIM2->PSC = 1;
 8003ba2:	2180      	movs	r1, #128	; 0x80
 8003ba4:	05c9      	lsls	r1, r1, #23
			dshot = 1;
 8003ba6:	7033      	strb	r3, [r6, #0]
			TIM2->PSC = 1;
 8003ba8:	628b      	str	r3, [r1, #40]	; 0x28
			TIM15->PSC = timer_15_prescaler;
 8003baa:	4911      	ldr	r1, [pc, #68]	; (8003bf0 <detectInput+0x130>)
 8003bac:	628a      	str	r2, [r1, #40]	; 0x28
			TIM16->PSC = 1;
 8003bae:	4a16      	ldr	r2, [pc, #88]	; (8003c08 <detectInput+0x148>)
 8003bb0:	6293      	str	r3, [r2, #40]	; 0x28
			TIM16->ARR = 8000;
 8003bb2:	23fa      	movs	r3, #250	; 0xfa
 8003bb4:	015b      	lsls	r3, r3, #5
 8003bb6:	62d3      	str	r3, [r2, #44]	; 0x2c
			IC_buffer_size = 32;
 8003bb8:	2320      	movs	r3, #32
 8003bba:	602b      	str	r3, [r5, #0]
 8003bbc:	e7af      	b.n	8003b1e <detectInput+0x5e>
	if (smallestnumber > 100){
 8003bbe:	2864      	cmp	r0, #100	; 0x64
 8003bc0:	ddad      	ble.n	8003b1e <detectInput+0x5e>
 8003bc2:	e7a2      	b.n	8003b0a <detectInput+0x4a>
 8003bc4:	20000220 	.word	0x20000220
 8003bc8:	20000188 	.word	0x20000188
 8003bcc:	20000202 	.word	0x20000202
 8003bd0:	2000022c 	.word	0x2000022c
 8003bd4:	20000209 	.word	0x20000209
 8003bd8:	20000208 	.word	0x20000208
 8003bdc:	20000080 	.word	0x20000080
 8003be0:	200000a0 	.word	0x200000a0
 8003be4:	00004e20 	.word	0x00004e20
 8003be8:	20000418 	.word	0x20000418
 8003bec:	20000008 	.word	0x20000008
 8003bf0:	40014000 	.word	0x40014000
 8003bf4:	200006fc 	.word	0x200006fc
 8003bf8:	20000200 	.word	0x20000200
 8003bfc:	20000414 	.word	0x20000414
 8003c00:	200002ac 	.word	0x200002ac
 8003c04:	2000025c 	.word	0x2000025c
 8003c08:	40014400 	.word	0x40014400

08003c0c <computeProshotDMA>:

void computeProshotDMA(){

total = dma_buffer[1]+ dma_buffer[2] + dma_buffer[3] + dma_buffer[4]+ dma_buffer[5] + dma_buffer[6] + dma_buffer[7];
 8003c0c:	4a31      	ldr	r2, [pc, #196]	; (8003cd4 <computeProshotDMA+0xc8>)
void computeProshotDMA(){
 8003c0e:	b570      	push	{r4, r5, r6, lr}
total = dma_buffer[1]+ dma_buffer[2] + dma_buffer[3] + dma_buffer[4]+ dma_buffer[5] + dma_buffer[6] + dma_buffer[7];
 8003c10:	6916      	ldr	r6, [r2, #16]
 8003c12:	6850      	ldr	r0, [r2, #4]
 8003c14:	46b4      	mov	ip, r6
 8003c16:	6893      	ldr	r3, [r2, #8]
 8003c18:	68d5      	ldr	r5, [r2, #12]
 8003c1a:	6996      	ldr	r6, [r2, #24]
 8003c1c:	18c3      	adds	r3, r0, r3
 8003c1e:	195b      	adds	r3, r3, r5
 8003c20:	4463      	add	r3, ip
 8003c22:	46b4      	mov	ip, r6
 8003c24:	6954      	ldr	r4, [r2, #20]
 8003c26:	69d1      	ldr	r1, [r2, #28]
 8003c28:	191b      	adds	r3, r3, r4
 8003c2a:	4463      	add	r3, ip
 8003c2c:	4e2a      	ldr	r6, [pc, #168]	; (8003cd8 <computeProshotDMA+0xcc>)
 8003c2e:	185b      	adds	r3, r3, r1
 8003c30:	6033      	str	r3, [r6, #0]

   if (( total < 118 && total > 98)&& (dma_buffer[0]> 100)){
 8003c32:	3b63      	subs	r3, #99	; 0x63
 8003c34:	2b12      	cmp	r3, #18
 8003c36:	d83a      	bhi.n	8003cae <computeProshotDMA+0xa2>
 8003c38:	6813      	ldr	r3, [r2, #0]
 8003c3a:	2b64      	cmp	r3, #100	; 0x64
 8003c3c:	d937      	bls.n	8003cae <computeProshotDMA+0xa2>
   for (int i = 1; i < 8; i +=2){
    propulse[(i-1) / 2] = (dma_buffer[i] - 7);
 8003c3e:	4a27      	ldr	r2, [pc, #156]	; (8003cdc <computeProshotDMA+0xd0>)
 8003c40:	1fcb      	subs	r3, r1, #7
 8003c42:	3807      	subs	r0, #7
 8003c44:	3d07      	subs	r5, #7
 8003c46:	3c07      	subs	r4, #7
 8003c48:	6010      	str	r0, [r2, #0]
 8003c4a:	60d3      	str	r3, [r2, #12]
 8003c4c:	6055      	str	r5, [r2, #4]
 8003c4e:	6094      	str	r4, [r2, #8]
					}
   }else{

	   return;
   }
	calcCRC = ((propulse[0]^propulse[1]^propulse[2])<<3
 8003c50:	0002      	movs	r2, r0
 8003c52:	406a      	eors	r2, r5
 8003c54:	4062      	eors	r2, r4
							|(propulse[0]^propulse[1]^propulse[2])<<2
 8003c56:	0096      	lsls	r6, r2, #2
	calcCRC = ((propulse[0]^propulse[1]^propulse[2])<<3
 8003c58:	00d1      	lsls	r1, r2, #3
							|(propulse[0]^propulse[1]^propulse[2])<<2
 8003c5a:	4331      	orrs	r1, r6
							|(propulse[0]^propulse[1]^propulse[2])<<1
							|(propulse[0]^propulse[1]^propulse[2]));
 8003c5c:	4311      	orrs	r1, r2
							|(propulse[0]^propulse[1]^propulse[2])<<1
 8003c5e:	0052      	lsls	r2, r2, #1
							|(propulse[0]^propulse[1]^propulse[2]));
 8003c60:	4311      	orrs	r1, r2
	calcCRC = ((propulse[0]^propulse[1]^propulse[2])<<3
 8003c62:	4a1f      	ldr	r2, [pc, #124]	; (8003ce0 <computeProshotDMA+0xd4>)
							|(propulse[0]^propulse[1]^propulse[2]));
 8003c64:	b2c9      	uxtb	r1, r1
	calcCRC = ((propulse[0]^propulse[1]^propulse[2])<<3
 8003c66:	7011      	strb	r1, [r2, #0]

	checkCRC = (propulse[3]<<3 | propulse[3]<<2 | propulse[3]<<1 | propulse[3]);
 8003c68:	009e      	lsls	r6, r3, #2
 8003c6a:	00da      	lsls	r2, r3, #3
 8003c6c:	4332      	orrs	r2, r6
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	4313      	orrs	r3, r2
 8003c74:	4a1b      	ldr	r2, [pc, #108]	; (8003ce4 <computeProshotDMA+0xd8>)
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	7013      	strb	r3, [r2, #0]
    if ( checkCRC == calcCRC){
 8003c7a:	4299      	cmp	r1, r3
 8003c7c:	d018      	beq.n	8003cb0 <computeProshotDMA+0xa4>
 8003c7e:	4b1a      	ldr	r3, [pc, #104]	; (8003ce8 <computeProshotDMA+0xdc>)
 8003c80:	681b      	ldr	r3, [r3, #0]
    	tocheck = ((propulse[0]<<7 | propulse[1]<<3 | propulse[2]>>1));
    }else{
 //   	error++;
    }
    if (tocheck > 47 && tocheck < 2048){
 8003c82:	001a      	movs	r2, r3
 8003c84:	4919      	ldr	r1, [pc, #100]	; (8003cec <computeProshotDMA+0xe0>)
 8003c86:	3a30      	subs	r2, #48	; 0x30
 8003c88:	428a      	cmp	r2, r1
 8003c8a:	d919      	bls.n	8003cc0 <computeProshotDMA+0xb4>
    	newinput = tocheck ;
    				commandcount = 0;



    			}else if (tocheck > 1 && tocheck < 48 && input == 0){
 8003c8c:	1e9a      	subs	r2, r3, #2
 8003c8e:	2a2d      	cmp	r2, #45	; 0x2d
 8003c90:	d803      	bhi.n	8003c9a <computeProshotDMA+0x8e>
 8003c92:	4a17      	ldr	r2, [pc, #92]	; (8003cf0 <computeProshotDMA+0xe4>)
 8003c94:	6812      	ldr	r2, [r2, #0]
 8003c96:	2a00      	cmp	r2, #0
 8003c98:	d018      	beq.n	8003ccc <computeProshotDMA+0xc0>

    					dshotcommand = tocheck ;
    			}else{
    				commandcount++;
 8003c9a:	4916      	ldr	r1, [pc, #88]	; (8003cf4 <computeProshotDMA+0xe8>)
 8003c9c:	680a      	ldr	r2, [r1, #0]
 8003c9e:	3201      	adds	r2, #1
 8003ca0:	600a      	str	r2, [r1, #0]
    				if (commandcount > 1){
 8003ca2:	2a01      	cmp	r2, #1
 8003ca4:	dd03      	ble.n	8003cae <computeProshotDMA+0xa2>
    				newinput = tocheck ;
 8003ca6:	4a14      	ldr	r2, [pc, #80]	; (8003cf8 <computeProshotDMA+0xec>)
 8003ca8:	6013      	str	r3, [r2, #0]
    			    commandcount = 0;
 8003caa:	2300      	movs	r3, #0
 8003cac:	600b      	str	r3, [r1, #0]
    			}
    			}

}
 8003cae:	bd70      	pop	{r4, r5, r6, pc}
    	tocheck = ((propulse[0]<<7 | propulse[1]<<3 | propulse[2]>>1));
 8003cb0:	01c3      	lsls	r3, r0, #7
 8003cb2:	00ed      	lsls	r5, r5, #3
 8003cb4:	432b      	orrs	r3, r5
 8003cb6:	1064      	asrs	r4, r4, #1
 8003cb8:	4a0b      	ldr	r2, [pc, #44]	; (8003ce8 <computeProshotDMA+0xdc>)
 8003cba:	4323      	orrs	r3, r4
 8003cbc:	6013      	str	r3, [r2, #0]
 8003cbe:	e7e0      	b.n	8003c82 <computeProshotDMA+0x76>
    	newinput = tocheck ;
 8003cc0:	4a0d      	ldr	r2, [pc, #52]	; (8003cf8 <computeProshotDMA+0xec>)
 8003cc2:	6013      	str	r3, [r2, #0]
    				commandcount = 0;
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	4b0b      	ldr	r3, [pc, #44]	; (8003cf4 <computeProshotDMA+0xe8>)
 8003cc8:	601a      	str	r2, [r3, #0]
 8003cca:	e7f0      	b.n	8003cae <computeProshotDMA+0xa2>
    					dshotcommand = tocheck ;
 8003ccc:	4a0b      	ldr	r2, [pc, #44]	; (8003cfc <computeProshotDMA+0xf0>)
 8003cce:	6013      	str	r3, [r2, #0]
 8003cd0:	e7ed      	b.n	8003cae <computeProshotDMA+0xa2>
 8003cd2:	46c0      	nop			; (mov r8, r8)
 8003cd4:	20000414 	.word	0x20000414
 8003cd8:	20000674 	.word	0x20000674
 8003cdc:	20000210 	.word	0x20000210
 8003ce0:	200002ec 	.word	0x200002ec
 8003ce4:	20000344 	.word	0x20000344
 8003ce8:	20000260 	.word	0x20000260
 8003cec:	000007cf 	.word	0x000007cf
 8003cf0:	200001fc 	.word	0x200001fc
 8003cf4:	20000128 	.word	0x20000128
 8003cf8:	20000204 	.word	0x20000204
 8003cfc:	2000018c 	.word	0x2000018c

08003d00 <computeDshotDMA>:

void computeDshotDMA(){
 8003d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d02:	46de      	mov	lr, fp
 8003d04:	4657      	mov	r7, sl
 8003d06:	464e      	mov	r6, r9
 8003d08:	4645      	mov	r5, r8
 8003d0a:	b5e0      	push	{r5, r6, r7, lr}
	if (dma_buffer[0] > 10){
 8003d0c:	4b80      	ldr	r3, [pc, #512]	; (8003f10 <computeDshotDMA+0x210>)
void computeDshotDMA(){
 8003d0e:	b087      	sub	sp, #28
	if (dma_buffer[0] > 10){
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	2a0a      	cmp	r2, #10
 8003d14:	d900      	bls.n	8003d18 <computeDshotDMA+0x18>
 8003d16:	e099      	b.n	8003e4c <computeDshotDMA+0x14c>
 8003d18:	4a7e      	ldr	r2, [pc, #504]	; (8003f14 <computeDshotDMA+0x214>)
		for (int i = 1; i < 32; i+=2){
		dpulse[(i-1)>>1] = dma_buffer[i];
	}
	}
	if (dma_buffer[1] > 10){
 8003d1a:	6859      	ldr	r1, [r3, #4]
 8003d1c:	290a      	cmp	r1, #10
 8003d1e:	d920      	bls.n	8003d62 <computeDshotDMA+0x62>
		for (int i = 2; i <= 32; i+=2){
				dpulse[(i-1)>>1] = dma_buffer[i];
 8003d20:	6899      	ldr	r1, [r3, #8]
 8003d22:	6011      	str	r1, [r2, #0]
 8003d24:	6919      	ldr	r1, [r3, #16]
 8003d26:	6051      	str	r1, [r2, #4]
 8003d28:	6999      	ldr	r1, [r3, #24]
 8003d2a:	6091      	str	r1, [r2, #8]
 8003d2c:	6a19      	ldr	r1, [r3, #32]
 8003d2e:	60d1      	str	r1, [r2, #12]
 8003d30:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003d32:	6111      	str	r1, [r2, #16]
 8003d34:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d36:	6151      	str	r1, [r2, #20]
 8003d38:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003d3a:	6191      	str	r1, [r2, #24]
 8003d3c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003d3e:	61d1      	str	r1, [r2, #28]
 8003d40:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8003d42:	6211      	str	r1, [r2, #32]
 8003d44:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003d46:	6251      	str	r1, [r2, #36]	; 0x24
 8003d48:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8003d4a:	6291      	str	r1, [r2, #40]	; 0x28
 8003d4c:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8003d4e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003d50:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8003d52:	6311      	str	r1, [r2, #48]	; 0x30
 8003d54:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003d56:	6351      	str	r1, [r2, #52]	; 0x34
 8003d58:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8003d5a:	6391      	str	r1, [r2, #56]	; 0x38
 8003d5c:	2180      	movs	r1, #128	; 0x80
 8003d5e:	585b      	ldr	r3, [r3, r1]
 8003d60:	63d3      	str	r3, [r2, #60]	; 0x3c
			}
	}

	calcCRC = ((dpulse[0]^dpulse[4]^dpulse[8])<<3
 8003d62:	6813      	ldr	r3, [r2, #0]
 8003d64:	6a11      	ldr	r1, [r2, #32]
 8003d66:	469b      	mov	fp, r3
 8003d68:	9102      	str	r1, [sp, #8]
				          |(dpulse[1]^dpulse[5]^dpulse[9])<<2
 8003d6a:	6a51      	ldr	r1, [r2, #36]	; 0x24
	calcCRC = ((dpulse[0]^dpulse[4]^dpulse[8])<<3
 8003d6c:	6913      	ldr	r3, [r2, #16]
				          |(dpulse[1]^dpulse[5]^dpulse[9])<<2
 8003d6e:	9104      	str	r1, [sp, #16]
	calcCRC = ((dpulse[0]^dpulse[4]^dpulse[8])<<3
 8003d70:	4659      	mov	r1, fp
 8003d72:	9301      	str	r3, [sp, #4]
				          |(dpulse[1]^dpulse[5]^dpulse[9])<<2
 8003d74:	6853      	ldr	r3, [r2, #4]
						|(dpulse[2]^dpulse[6]^dpulse[10])<<1
 8003d76:	6a96      	ldr	r6, [r2, #40]	; 0x28
				          |(dpulse[1]^dpulse[5]^dpulse[9])<<2
 8003d78:	0018      	movs	r0, r3
 8003d7a:	9305      	str	r3, [sp, #20]
 8003d7c:	6953      	ldr	r3, [r2, #20]
						|(dpulse[2]^dpulse[6]^dpulse[10])<<1
 8003d7e:	46b0      	mov	r8, r6
				          |(dpulse[1]^dpulse[5]^dpulse[9])<<2
 8003d80:	9303      	str	r3, [sp, #12]
	calcCRC = ((dpulse[0]^dpulse[4]^dpulse[8])<<3
 8003d82:	9b01      	ldr	r3, [sp, #4]
						|(dpulse[3]^dpulse[7]^dpulse[11])
 8003d84:	68d6      	ldr	r6, [r2, #12]
	calcCRC = ((dpulse[0]^dpulse[4]^dpulse[8])<<3
 8003d86:	4059      	eors	r1, r3
 8003d88:	000b      	movs	r3, r1
 8003d8a:	9902      	ldr	r1, [sp, #8]
						|(dpulse[3]^dpulse[7]^dpulse[11])
 8003d8c:	69d7      	ldr	r7, [r2, #28]
	calcCRC = ((dpulse[0]^dpulse[4]^dpulse[8])<<3
 8003d8e:	404b      	eors	r3, r1
 8003d90:	00d9      	lsls	r1, r3, #3
				          |(dpulse[1]^dpulse[5]^dpulse[9])<<2
 8003d92:	0003      	movs	r3, r0
	calcCRC = ((dpulse[0]^dpulse[4]^dpulse[8])<<3
 8003d94:	468c      	mov	ip, r1
				          |(dpulse[1]^dpulse[5]^dpulse[9])<<2
 8003d96:	9803      	ldr	r0, [sp, #12]
 8003d98:	9904      	ldr	r1, [sp, #16]
 8003d9a:	4043      	eors	r3, r0
 8003d9c:	404b      	eors	r3, r1
 8003d9e:	4661      	mov	r1, ip
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	430b      	orrs	r3, r1
						|(dpulse[3]^dpulse[7]^dpulse[11])
 8003da4:	0031      	movs	r1, r6
 8003da6:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
						|(dpulse[2]^dpulse[6]^dpulse[10])<<1
 8003da8:	6894      	ldr	r4, [r2, #8]
						|(dpulse[3]^dpulse[7]^dpulse[11])
 8003daa:	4079      	eors	r1, r7
 8003dac:	4041      	eors	r1, r0
 8003dae:	430b      	orrs	r3, r1
						|(dpulse[2]^dpulse[6]^dpulse[10])<<1
 8003db0:	0021      	movs	r1, r4
 8003db2:	4640      	mov	r0, r8
 8003db4:	6995      	ldr	r5, [r2, #24]
 8003db6:	4069      	eors	r1, r5
 8003db8:	4041      	eors	r1, r0
 8003dba:	0049      	lsls	r1, r1, #1
						|(dpulse[3]^dpulse[7]^dpulse[11])
 8003dbc:	430b      	orrs	r3, r1
	calcCRC = ((dpulse[0]^dpulse[4]^dpulse[8])<<3
 8003dbe:	4956      	ldr	r1, [pc, #344]	; (8003f18 <computeDshotDMA+0x218>)
						|(dpulse[3]^dpulse[7]^dpulse[11])
 8003dc0:	b2db      	uxtb	r3, r3
	calcCRC = ((dpulse[0]^dpulse[4]^dpulse[8])<<3
 8003dc2:	700b      	strb	r3, [r1, #0]
					);
		 checkCRC = (dpulse[12]<<3 | dpulse[13]<<2 | dpulse[14]<<1 | dpulse[15]);
 8003dc4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003dc6:	00c9      	lsls	r1, r1, #3
 8003dc8:	468c      	mov	ip, r1
 8003dca:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8003dcc:	0089      	lsls	r1, r1, #2
 8003dce:	4689      	mov	r9, r1
 8003dd0:	4661      	mov	r1, ip
 8003dd2:	4648      	mov	r0, r9
 8003dd4:	4301      	orrs	r1, r0
 8003dd6:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
 8003dd8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003dda:	4301      	orrs	r1, r0
 8003ddc:	0052      	lsls	r2, r2, #1
 8003dde:	430a      	orrs	r2, r1
 8003de0:	494e      	ldr	r1, [pc, #312]	; (8003f1c <computeDshotDMA+0x21c>)
 8003de2:	b2d2      	uxtb	r2, r2
 8003de4:	700a      	strb	r2, [r1, #0]
 8003de6:	468c      	mov	ip, r1
if(!armed){
 8003de8:	484d      	ldr	r0, [pc, #308]	; (8003f20 <computeDshotDMA+0x220>)
 8003dea:	494e      	ldr	r1, [pc, #312]	; (8003f24 <computeDshotDMA+0x224>)
 8003dec:	4689      	mov	r9, r1
 8003dee:	7809      	ldrb	r1, [r1, #0]
 8003df0:	7800      	ldrb	r0, [r0, #0]
 8003df2:	2800      	cmp	r0, #0
 8003df4:	d14c      	bne.n	8003e90 <computeDshotDMA+0x190>
	if (dshot_telemetry == 0){
 8003df6:	2900      	cmp	r1, #0
 8003df8:	d100      	bne.n	8003dfc <computeDshotDMA+0xfc>
 8003dfa:	e07c      	b.n	8003ef6 <computeDshotDMA+0x1f6>
			 is_output = 1;        // so that setupinput() is called on next timer16 timeout
		 }
	}
}
if(dshot_telemetry){
	checkCRC= ~checkCRC+16;
 8003dfc:	210f      	movs	r1, #15
 8003dfe:	4689      	mov	r9, r1
 8003e00:	4649      	mov	r1, r9
 8003e02:	1a8a      	subs	r2, r1, r2
 8003e04:	4661      	mov	r1, ip
 8003e06:	b2d2      	uxtb	r2, r2
 8003e08:	700a      	strb	r2, [r1, #0]
}
				if(calcCRC == checkCRC){
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d044      	beq.n	8003e98 <computeDshotDMA+0x198>
						dpulse[0]<<10 | dpulse[1]<<9 | dpulse[2]<<8 | dpulse[3]<<7
						| dpulse[4]<<6 | dpulse[5]<<5 | dpulse[6]<<4 | dpulse[7]<<3
						| dpulse[8]<<2 | dpulse[9]<<1 | dpulse[10]);
	//				success++;
					}else{
						error++;
 8003e0e:	4a46      	ldr	r2, [pc, #280]	; (8003f28 <computeDshotDMA+0x228>)
 8003e10:	6813      	ldr	r3, [r2, #0]
 8003e12:	3301      	adds	r3, #1
 8003e14:	6013      	str	r3, [r2, #0]
 8003e16:	4b45      	ldr	r3, [pc, #276]	; (8003f2c <computeDshotDMA+0x22c>)
////				success++;
//				}else{
//					error++;
//				}

			if (tocheck > 47 && tocheck < 2048){
 8003e18:	4a45      	ldr	r2, [pc, #276]	; (8003f30 <computeDshotDMA+0x230>)
 8003e1a:	6818      	ldr	r0, [r3, #0]
 8003e1c:	0003      	movs	r3, r0
 8003e1e:	3b30      	subs	r3, #48	; 0x30
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d95b      	bls.n	8003edc <computeDshotDMA+0x1dc>
				newinput = tocheck;
				commandcount = 0;
			}else if (tocheck > 1 && tocheck < 48 && input == 0){
 8003e24:	1e83      	subs	r3, r0, #2
 8003e26:	2b2d      	cmp	r3, #45	; 0x2d
 8003e28:	d95e      	bls.n	8003ee8 <computeDshotDMA+0x1e8>

					dshotcommand = tocheck ;


			}else{
				commandcount++;
 8003e2a:	4a42      	ldr	r2, [pc, #264]	; (8003f34 <computeDshotDMA+0x234>)
 8003e2c:	6813      	ldr	r3, [r2, #0]
 8003e2e:	3301      	adds	r3, #1
 8003e30:	6013      	str	r3, [r2, #0]
				if (commandcount > 1){
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	dd03      	ble.n	8003e3e <computeDshotDMA+0x13e>
				newinput = tocheck ;
 8003e36:	4b40      	ldr	r3, [pc, #256]	; (8003f38 <computeDshotDMA+0x238>)
 8003e38:	6018      	str	r0, [r3, #0]
			    commandcount = 0;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	6013      	str	r3, [r2, #0]
			}
			}

}
 8003e3e:	b007      	add	sp, #28
 8003e40:	bc3c      	pop	{r2, r3, r4, r5}
 8003e42:	4690      	mov	r8, r2
 8003e44:	4699      	mov	r9, r3
 8003e46:	46a2      	mov	sl, r4
 8003e48:	46ab      	mov	fp, r5
 8003e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		dpulse[(i-1)>>1] = dma_buffer[i];
 8003e4c:	4a31      	ldr	r2, [pc, #196]	; (8003f14 <computeDshotDMA+0x214>)
 8003e4e:	6859      	ldr	r1, [r3, #4]
 8003e50:	6011      	str	r1, [r2, #0]
 8003e52:	68d9      	ldr	r1, [r3, #12]
 8003e54:	6051      	str	r1, [r2, #4]
 8003e56:	6959      	ldr	r1, [r3, #20]
 8003e58:	6091      	str	r1, [r2, #8]
 8003e5a:	69d9      	ldr	r1, [r3, #28]
 8003e5c:	60d1      	str	r1, [r2, #12]
 8003e5e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003e60:	6111      	str	r1, [r2, #16]
 8003e62:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e64:	6151      	str	r1, [r2, #20]
 8003e66:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e68:	6191      	str	r1, [r2, #24]
 8003e6a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003e6c:	61d1      	str	r1, [r2, #28]
 8003e6e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003e70:	6211      	str	r1, [r2, #32]
 8003e72:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003e74:	6251      	str	r1, [r2, #36]	; 0x24
 8003e76:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e78:	6291      	str	r1, [r2, #40]	; 0x28
 8003e7a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003e7c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003e7e:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8003e80:	6311      	str	r1, [r2, #48]	; 0x30
 8003e82:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8003e84:	6351      	str	r1, [r2, #52]	; 0x34
 8003e86:	6f59      	ldr	r1, [r3, #116]	; 0x74
 8003e88:	6391      	str	r1, [r2, #56]	; 0x38
 8003e8a:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8003e8c:	63d1      	str	r1, [r2, #60]	; 0x3c
 8003e8e:	e744      	b.n	8003d1a <computeDshotDMA+0x1a>
if(dshot_telemetry){
 8003e90:	2900      	cmp	r1, #0
 8003e92:	d1b3      	bne.n	8003dfc <computeDshotDMA+0xfc>
				if(calcCRC == checkCRC){
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d1ba      	bne.n	8003e0e <computeDshotDMA+0x10e>
						dpulse[0]<<10 | dpulse[1]<<9 | dpulse[2]<<8 | dpulse[3]<<7
 8003e98:	465b      	mov	r3, fp
 8003e9a:	9a05      	ldr	r2, [sp, #20]
 8003e9c:	029b      	lsls	r3, r3, #10
 8003e9e:	0252      	lsls	r2, r2, #9
 8003ea0:	4313      	orrs	r3, r2
						| dpulse[8]<<2 | dpulse[9]<<1 | dpulse[10]);
 8003ea2:	4642      	mov	r2, r8
						dpulse[0]<<10 | dpulse[1]<<9 | dpulse[2]<<8 | dpulse[3]<<7
 8003ea4:	0224      	lsls	r4, r4, #8
						| dpulse[8]<<2 | dpulse[9]<<1 | dpulse[10]);
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	431c      	orrs	r4, r3
						| dpulse[4]<<6 | dpulse[5]<<5 | dpulse[6]<<4 | dpulse[7]<<3
 8003eaa:	9b01      	ldr	r3, [sp, #4]
						dpulse[0]<<10 | dpulse[1]<<9 | dpulse[2]<<8 | dpulse[3]<<7
 8003eac:	01f6      	lsls	r6, r6, #7
						| dpulse[8]<<2 | dpulse[9]<<1 | dpulse[10]);
 8003eae:	4326      	orrs	r6, r4
						| dpulse[4]<<6 | dpulse[5]<<5 | dpulse[6]<<4 | dpulse[7]<<3
 8003eb0:	019c      	lsls	r4, r3, #6
 8003eb2:	9b03      	ldr	r3, [sp, #12]
						| dpulse[8]<<2 | dpulse[9]<<1 | dpulse[10]);
 8003eb4:	4326      	orrs	r6, r4
						| dpulse[4]<<6 | dpulse[5]<<5 | dpulse[6]<<4 | dpulse[7]<<3
 8003eb6:	0159      	lsls	r1, r3, #5
						| dpulse[8]<<2 | dpulse[9]<<1 | dpulse[10]);
 8003eb8:	4331      	orrs	r1, r6
 8003eba:	9b02      	ldr	r3, [sp, #8]
						| dpulse[4]<<6 | dpulse[5]<<5 | dpulse[6]<<4 | dpulse[7]<<3
 8003ebc:	012d      	lsls	r5, r5, #4
						| dpulse[8]<<2 | dpulse[9]<<1 | dpulse[10]);
 8003ebe:	430d      	orrs	r5, r1
						| dpulse[4]<<6 | dpulse[5]<<5 | dpulse[6]<<4 | dpulse[7]<<3
 8003ec0:	00ff      	lsls	r7, r7, #3
						| dpulse[8]<<2 | dpulse[9]<<1 | dpulse[10]);
 8003ec2:	432f      	orrs	r7, r5
 8003ec4:	009d      	lsls	r5, r3, #2
 8003ec6:	9b04      	ldr	r3, [sp, #16]
 8003ec8:	432f      	orrs	r7, r5
 8003eca:	0058      	lsls	r0, r3, #1
					tocheck = (
 8003ecc:	4b17      	ldr	r3, [pc, #92]	; (8003f2c <computeDshotDMA+0x22c>)
						| dpulse[8]<<2 | dpulse[9]<<1 | dpulse[10]);
 8003ece:	4338      	orrs	r0, r7
					tocheck = (
 8003ed0:	6018      	str	r0, [r3, #0]
			if (tocheck > 47 && tocheck < 2048){
 8003ed2:	0003      	movs	r3, r0
 8003ed4:	4a16      	ldr	r2, [pc, #88]	; (8003f30 <computeDshotDMA+0x230>)
 8003ed6:	3b30      	subs	r3, #48	; 0x30
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d8a3      	bhi.n	8003e24 <computeDshotDMA+0x124>
				commandcount = 0;
 8003edc:	2200      	movs	r2, #0
				newinput = tocheck;
 8003ede:	4b16      	ldr	r3, [pc, #88]	; (8003f38 <computeDshotDMA+0x238>)
 8003ee0:	6018      	str	r0, [r3, #0]
				commandcount = 0;
 8003ee2:	4b14      	ldr	r3, [pc, #80]	; (8003f34 <computeDshotDMA+0x234>)
 8003ee4:	601a      	str	r2, [r3, #0]
 8003ee6:	e7aa      	b.n	8003e3e <computeDshotDMA+0x13e>
			}else if (tocheck > 1 && tocheck < 48 && input == 0){
 8003ee8:	4b14      	ldr	r3, [pc, #80]	; (8003f3c <computeDshotDMA+0x23c>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d19c      	bne.n	8003e2a <computeDshotDMA+0x12a>
					dshotcommand = tocheck ;
 8003ef0:	4b13      	ldr	r3, [pc, #76]	; (8003f40 <computeDshotDMA+0x240>)
 8003ef2:	6018      	str	r0, [r3, #0]
 8003ef4:	e7a3      	b.n	8003e3e <computeDshotDMA+0x13e>
		 if(calcCRC == ~checkCRC+16){
 8003ef6:	310f      	adds	r1, #15
 8003ef8:	1a89      	subs	r1, r1, r2
 8003efa:	428b      	cmp	r3, r1
 8003efc:	d000      	beq.n	8003f00 <computeDshotDMA+0x200>
 8003efe:	e784      	b.n	8003e0a <computeDshotDMA+0x10a>
			 dshot_telemetry = 1;
 8003f00:	2101      	movs	r1, #1
 8003f02:	468a      	mov	sl, r1
 8003f04:	4649      	mov	r1, r9
 8003f06:	4650      	mov	r0, sl
 8003f08:	7008      	strb	r0, [r1, #0]
			 is_output = 1;        // so that setupinput() is called on next timer16 timeout
 8003f0a:	490e      	ldr	r1, [pc, #56]	; (8003f44 <computeDshotDMA+0x244>)
 8003f0c:	7008      	strb	r0, [r1, #0]
 8003f0e:	e775      	b.n	8003dfc <computeDshotDMA+0xfc>
 8003f10:	20000414 	.word	0x20000414
 8003f14:	20000148 	.word	0x20000148
 8003f18:	200002ec 	.word	0x200002ec
 8003f1c:	20000344 	.word	0x20000344
 8003f20:	20000114 	.word	0x20000114
 8003f24:	20000189 	.word	0x20000189
 8003f28:	20000190 	.word	0x20000190
 8003f2c:	20000260 	.word	0x20000260
 8003f30:	000007cf 	.word	0x000007cf
 8003f34:	20000128 	.word	0x20000128
 8003f38:	20000204 	.word	0x20000204
 8003f3c:	200001fc 	.word	0x200001fc
 8003f40:	2000018c 	.word	0x2000018c
 8003f44:	20000201 	.word	0x20000201

08003f48 <computeServoInput>:



void computeServoInput(){

	if ( dma_buffer[1] < 2000 && dma_buffer[1] > 1000){
 8003f48:	4b28      	ldr	r3, [pc, #160]	; (8003fec <computeServoInput+0xa4>)
 8003f4a:	4a29      	ldr	r2, [pc, #164]	; (8003ff0 <computeServoInput+0xa8>)
 8003f4c:	6858      	ldr	r0, [r3, #4]
void computeServoInput(){
 8003f4e:	b510      	push	{r4, lr}
	if ( dma_buffer[1] < 2000 && dma_buffer[1] > 1000){
 8003f50:	1881      	adds	r1, r0, r2
 8003f52:	4a28      	ldr	r2, [pc, #160]	; (8003ff4 <computeServoInput+0xac>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	4291      	cmp	r1, r2
 8003f58:	d813      	bhi.n	8003f82 <computeServoInput+0x3a>
		if(dma_buffer[2]< 1000 || dma_buffer[2] > 2500){
 8003f5a:	4a27      	ldr	r2, [pc, #156]	; (8003ff8 <computeServoInput+0xb0>)
 8003f5c:	4694      	mov	ip, r2
 8003f5e:	4a27      	ldr	r2, [pc, #156]	; (8003ffc <computeServoInput+0xb4>)
 8003f60:	4463      	add	r3, ip
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d822      	bhi.n	8003fac <computeServoInput+0x64>
 8003f66:	4b26      	ldr	r3, [pc, #152]	; (8004000 <computeServoInput+0xb8>)
		servorawinput = map(dma_buffer[2], 1100,2000,0,2000);
		}
	}


	if (servorawinput - newinput > max_servo_deviation){
 8003f68:	4926      	ldr	r1, [pc, #152]	; (8004004 <computeServoInput+0xbc>)
 8003f6a:	4a27      	ldr	r2, [pc, #156]	; (8004008 <computeServoInput+0xc0>)
 8003f6c:	6818      	ldr	r0, [r3, #0]
 8003f6e:	6812      	ldr	r2, [r2, #0]
 8003f70:	680b      	ldr	r3, [r1, #0]
 8003f72:	1ac4      	subs	r4, r0, r3
 8003f74:	4294      	cmp	r4, r2
 8003f76:	dc31      	bgt.n	8003fdc <computeServoInput+0x94>
		newinput += max_servo_deviation;
	}else if(newinput - servorawinput > max_servo_deviation){
 8003f78:	1a1c      	subs	r4, r3, r0
 8003f7a:	42a2      	cmp	r2, r4
 8003f7c:	db31      	blt.n	8003fe2 <computeServoInput+0x9a>
		newinput -= max_servo_deviation;
	}else{
		newinput = servorawinput;
 8003f7e:	6008      	str	r0, [r1, #0]
	}


}
 8003f80:	bd10      	pop	{r4, pc}
	}else if( dma_buffer[2] < 2000 && dma_buffer[2] > 1000) {
 8003f82:	491b      	ldr	r1, [pc, #108]	; (8003ff0 <computeServoInput+0xa8>)
 8003f84:	1859      	adds	r1, r3, r1
 8003f86:	4291      	cmp	r1, r2
 8003f88:	d8ed      	bhi.n	8003f66 <computeServoInput+0x1e>
		if(dma_buffer[1]< 1000 || dma_buffer[1] > 2500){
 8003f8a:	4a1b      	ldr	r2, [pc, #108]	; (8003ff8 <computeServoInput+0xb0>)
 8003f8c:	4694      	mov	ip, r2
 8003f8e:	4a1b      	ldr	r2, [pc, #108]	; (8003ffc <computeServoInput+0xb4>)
 8003f90:	4460      	add	r0, ip
 8003f92:	4290      	cmp	r0, r2
 8003f94:	d9e7      	bls.n	8003f66 <computeServoInput+0x1e>
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003f96:	4a1d      	ldr	r2, [pc, #116]	; (800400c <computeServoInput+0xc4>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d200      	bcs.n	8003f9e <computeServoInput+0x56>
 8003f9c:	0013      	movs	r3, r2
 8003f9e:	4a1c      	ldr	r2, [pc, #112]	; (8004010 <computeServoInput+0xc8>)
 8003fa0:	4694      	mov	ip, r2
 8003fa2:	4463      	add	r3, ip
 8003fa4:	0158      	lsls	r0, r3, #5
 8003fa6:	1ac0      	subs	r0, r0, r3
 8003fa8:	0080      	lsls	r0, r0, #2
 8003faa:	e008      	b.n	8003fbe <computeServoInput+0x76>
 8003fac:	4b17      	ldr	r3, [pc, #92]	; (800400c <computeServoInput+0xc4>)
 8003fae:	4298      	cmp	r0, r3
 8003fb0:	d31a      	bcc.n	8003fe8 <computeServoInput+0xa0>
 8003fb2:	4b17      	ldr	r3, [pc, #92]	; (8004010 <computeServoInput+0xc8>)
 8003fb4:	469c      	mov	ip, r3
 8003fb6:	4460      	add	r0, ip
 8003fb8:	0143      	lsls	r3, r0, #5
 8003fba:	1a1b      	subs	r3, r3, r0
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	21e1      	movs	r1, #225	; 0xe1
 8003fc0:	18c0      	adds	r0, r0, r3
 8003fc2:	0089      	lsls	r1, r1, #2
 8003fc4:	0100      	lsls	r0, r0, #4
 8003fc6:	f7fc f929 	bl	800021c <__divsi3>
		servorawinput = map(dma_buffer[2], 1100,2000,0,2000);
 8003fca:	4b0d      	ldr	r3, [pc, #52]	; (8004000 <computeServoInput+0xb8>)
	if (servorawinput - newinput > max_servo_deviation){
 8003fcc:	490d      	ldr	r1, [pc, #52]	; (8004004 <computeServoInput+0xbc>)
 8003fce:	4a0e      	ldr	r2, [pc, #56]	; (8004008 <computeServoInput+0xc0>)
		servorawinput = map(dma_buffer[2], 1100,2000,0,2000);
 8003fd0:	6018      	str	r0, [r3, #0]
	if (servorawinput - newinput > max_servo_deviation){
 8003fd2:	6812      	ldr	r2, [r2, #0]
 8003fd4:	680b      	ldr	r3, [r1, #0]
 8003fd6:	1ac4      	subs	r4, r0, r3
 8003fd8:	4294      	cmp	r4, r2
 8003fda:	ddcd      	ble.n	8003f78 <computeServoInput+0x30>
		newinput += max_servo_deviation;
 8003fdc:	189b      	adds	r3, r3, r2
 8003fde:	600b      	str	r3, [r1, #0]
 8003fe0:	e7ce      	b.n	8003f80 <computeServoInput+0x38>
		newinput -= max_servo_deviation;
 8003fe2:	1a9b      	subs	r3, r3, r2
 8003fe4:	600b      	str	r3, [r1, #0]
 8003fe6:	e7cb      	b.n	8003f80 <computeServoInput+0x38>
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003fe8:	0018      	movs	r0, r3
 8003fea:	e7e2      	b.n	8003fb2 <computeServoInput+0x6a>
 8003fec:	20000414 	.word	0x20000414
 8003ff0:	fffffc17 	.word	0xfffffc17
 8003ff4:	000003e6 	.word	0x000003e6
 8003ff8:	fffffc18 	.word	0xfffffc18
 8003ffc:	000005dc 	.word	0x000005dc
 8004000:	20000230 	.word	0x20000230
 8004004:	20000204 	.word	0x20000204
 8004008:	20000088 	.word	0x20000088
 800400c:	0000044c 	.word	0x0000044c
 8004010:	fffffbb4 	.word	0xfffffbb4

08004014 <make_dshot_package>:

void make_dshot_package(){
//	TIM8->CNT = 0;

	  e_com_time = commutation_interval * 6 / 2 ;
 8004014:	4b38      	ldr	r3, [pc, #224]	; (80040f8 <make_dshot_package+0xe4>)
 8004016:	4939      	ldr	r1, [pc, #228]	; (80040fc <make_dshot_package+0xe8>)
 8004018:	681b      	ldr	r3, [r3, #0]
void make_dshot_package(){
 800401a:	b570      	push	{r4, r5, r6, lr}
	  e_com_time = commutation_interval * 6 / 2 ;
 800401c:	005a      	lsls	r2, r3, #1
 800401e:	18d2      	adds	r2, r2, r3
      if(!running){
 8004020:	4b37      	ldr	r3, [pc, #220]	; (8004100 <make_dshot_package+0xec>)
	  e_com_time = commutation_interval * 6 / 2 ;
 8004022:	600a      	str	r2, [r1, #0]
      if(!running){
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d103      	bne.n	8004032 <make_dshot_package+0x1e>
    	  e_com_time = 65535;
 800402a:	4a36      	ldr	r2, [pc, #216]	; (8004104 <make_dshot_package+0xf0>)
 800402c:	600a      	str	r2, [r1, #0]
      }
//	calculate shift amount for data in format eee mmm mmm mmm, first 1 found in first seven bits of data determines shift amount
// this allows for a range of up to 65408 microseconds which would be shifted 0b111 (eee) or 7 times.
for (int i = 15; i >= 9 ; i--){
 800402e:	210f      	movs	r1, #15
 8004030:	e054      	b.n	80040dc <make_dshot_package+0xc8>
	if(e_com_time >> i == 1){
 8004032:	13d3      	asrs	r3, r2, #15
 8004034:	2b01      	cmp	r3, #1
 8004036:	d0fa      	beq.n	800402e <make_dshot_package+0x1a>
 8004038:	1393      	asrs	r3, r2, #14
 800403a:	2b01      	cmp	r3, #1
 800403c:	d04d      	beq.n	80040da <make_dshot_package+0xc6>
 800403e:	1353      	asrs	r3, r2, #13
 8004040:	2b01      	cmp	r3, #1
 8004042:	d04f      	beq.n	80040e4 <make_dshot_package+0xd0>
 8004044:	1313      	asrs	r3, r2, #12
 8004046:	2b01      	cmp	r3, #1
 8004048:	d04e      	beq.n	80040e8 <make_dshot_package+0xd4>
 800404a:	12d3      	asrs	r3, r2, #11
 800404c:	2b01      	cmp	r3, #1
 800404e:	d04d      	beq.n	80040ec <make_dshot_package+0xd8>
 8004050:	1293      	asrs	r3, r2, #10
 8004052:	2b01      	cmp	r3, #1
 8004054:	d04c      	beq.n	80040f0 <make_dshot_package+0xdc>
 8004056:	1253      	asrs	r3, r2, #9
 8004058:	2b01      	cmp	r3, #1
 800405a:	d04b      	beq.n	80040f4 <make_dshot_package+0xe0>
 800405c:	2100      	movs	r1, #0
 800405e:	4b2a      	ldr	r3, [pc, #168]	; (8004108 <make_dshot_package+0xf4>)
 8004060:	6019      	str	r1, [r3, #0]
	}else{
		shift_amount = 0;
	}
}
// shift the commutation time to allow for expanded range and put shift amount in first three bits
	dshot_full_number = ((shift_amount << 9) | (e_com_time >> shift_amount));
 8004062:	410a      	asrs	r2, r1
 8004064:	024b      	lsls	r3, r1, #9
 8004066:	431a      	orrs	r2, r3
//calculate checksum
	uint16_t  csum = 0;
	uint16_t csum_data = dshot_full_number;
 8004068:	b293      	uxth	r3, r2
		  for (int i = 0; i < 3; i++) {
		      csum ^=  csum_data;   // xor data by nibbles
		      csum_data >>= 4;
 800406a:	0a18      	lsrs	r0, r3, #8
 800406c:	0919      	lsrs	r1, r3, #4
		      csum ^=  csum_data;   // xor data by nibbles
 800406e:	4041      	eors	r1, r0
 8004070:	404b      	eors	r3, r1
		  }
		  csum = ~csum;       // invert it
		  csum &= 0xf;
 8004072:	210f      	movs	r1, #15

		  dshot_full_number = (dshot_full_number << 4)  | csum; // put checksum at the end of 12 bit dshot number
 8004074:	0008      	movs	r0, r1
 8004076:	4398      	bics	r0, r3
 8004078:	0003      	movs	r3, r0
 800407a:	0112      	lsls	r2, r2, #4
 800407c:	4313      	orrs	r3, r2
 800407e:	4a23      	ldr	r2, [pc, #140]	; (800410c <make_dshot_package+0xf8>)

// GCR RLL encode 16 to 20 bit

		  gcrnumber = gcr_encode_table[(dshot_full_number >> 12)] << 15  // first set of four digits
 8004080:	4823      	ldr	r0, [pc, #140]	; (8004110 <make_dshot_package+0xfc>)
		  dshot_full_number = (dshot_full_number << 4)  | csum; // put checksum at the end of 12 bit dshot number
 8004082:	6013      	str	r3, [r2, #0]
		  gcrnumber = gcr_encode_table[(dshot_full_number >> 12)] << 15  // first set of four digits
 8004084:	131a      	asrs	r2, r3, #12
 8004086:	0092      	lsls	r2, r2, #2
 8004088:	5814      	ldr	r4, [r2, r0]
		  | gcr_encode_table[(((1 << 4) - 1) & (dshot_full_number >> 8))] << 10  // 2nd set of 4 digits
		  | gcr_encode_table[(((1 << 4) - 1) & (dshot_full_number >> 4))] << 5  //3rd set of four digits
		  | gcr_encode_table[(((1 << 4) - 1) & (dshot_full_number >> 0))];  //last four digits
 800408a:	000a      	movs	r2, r1
 800408c:	401a      	ands	r2, r3
 800408e:	0092      	lsls	r2, r2, #2
 8004090:	5812      	ldr	r2, [r2, r0]
		  gcrnumber = gcr_encode_table[(dshot_full_number >> 12)] << 15  // first set of four digits
 8004092:	03e4      	lsls	r4, r4, #15
		  | gcr_encode_table[(((1 << 4) - 1) & (dshot_full_number >> 0))];  //last four digits
 8004094:	4314      	orrs	r4, r2
		  | gcr_encode_table[(((1 << 4) - 1) & (dshot_full_number >> 8))] << 10  // 2nd set of 4 digits
 8004096:	121a      	asrs	r2, r3, #8
 8004098:	400a      	ands	r2, r1
		  | gcr_encode_table[(((1 << 4) - 1) & (dshot_full_number >> 4))] << 5  //3rd set of four digits
 800409a:	111b      	asrs	r3, r3, #4
 800409c:	400b      	ands	r3, r1
		  | gcr_encode_table[(((1 << 4) - 1) & (dshot_full_number >> 8))] << 10  // 2nd set of 4 digits
 800409e:	0092      	lsls	r2, r2, #2
 80040a0:	5812      	ldr	r2, [r2, r0]
		  | gcr_encode_table[(((1 << 4) - 1) & (dshot_full_number >> 4))] << 5  //3rd set of four digits
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	581b      	ldr	r3, [r3, r0]
		  | gcr_encode_table[(((1 << 4) - 1) & (dshot_full_number >> 8))] << 10  // 2nd set of 4 digits
 80040a6:	0292      	lsls	r2, r2, #10
		  | gcr_encode_table[(((1 << 4) - 1) & (dshot_full_number >> 4))] << 5  //3rd set of four digits
 80040a8:	015b      	lsls	r3, r3, #5
		  | gcr_encode_table[(((1 << 4) - 1) & (dshot_full_number >> 0))];  //last four digits
 80040aa:	4314      	orrs	r4, r2
 80040ac:	431c      	orrs	r4, r3
//						}
//		  }
//		  gcr[1] = high_bit_length;        //  since pwm is inverted
//          gcr[22] = 0;

		  gcr[1] = 64;
 80040ae:	4e19      	ldr	r6, [pc, #100]	; (8004114 <make_dshot_package+0x100>)
		  gcrnumber = gcr_encode_table[(dshot_full_number >> 12)] << 15  // first set of four digits
 80040b0:	4b19      	ldr	r3, [pc, #100]	; (8004118 <make_dshot_package+0x104>)
 80040b2:	0030      	movs	r0, r6
 80040b4:	601c      	str	r4, [r3, #0]
		  gcr[1] = 64;
 80040b6:	2340      	movs	r3, #64	; 0x40
		  for( int i= 19; i >= 0; i--){              // each digit in gcrnumber
			  gcr[20-i+1] = ((((gcrnumber &  1 << i )) >> i) ^ (gcr[20-i]>>6)) << 6;        // exclusive ored with number before it multiplied by 64 to match output timer.
 80040b8:	2501      	movs	r5, #1
		  gcr[1] = 64;
 80040ba:	6073      	str	r3, [r6, #4]
 80040bc:	3008      	adds	r0, #8
		  for( int i= 19; i >= 0; i--){              // each digit in gcrnumber
 80040be:	3104      	adds	r1, #4
			  gcr[20-i+1] = ((((gcrnumber &  1 << i )) >> i) ^ (gcr[20-i]>>6)) << 6;        // exclusive ored with number before it multiplied by 64 to match output timer.
 80040c0:	002a      	movs	r2, r5
 80040c2:	408a      	lsls	r2, r1
 80040c4:	4022      	ands	r2, r4
 80040c6:	40ca      	lsrs	r2, r1
 80040c8:	099b      	lsrs	r3, r3, #6
 80040ca:	4053      	eors	r3, r2
 80040cc:	019b      	lsls	r3, r3, #6
 80040ce:	c008      	stmia	r0!, {r3}
		  for( int i= 19; i >= 0; i--){              // each digit in gcrnumber
 80040d0:	3901      	subs	r1, #1
 80040d2:	d2f5      	bcs.n	80040c0 <make_dshot_package+0xac>
		  }
          gcr[0] = 0;
 80040d4:	2300      	movs	r3, #0
 80040d6:	6033      	str	r3, [r6, #0]


}
 80040d8:	bd70      	pop	{r4, r5, r6, pc}
for (int i = 15; i >= 9 ; i--){
 80040da:	210e      	movs	r1, #14
		shift_amount = i+1 - 9;
 80040dc:	4b0a      	ldr	r3, [pc, #40]	; (8004108 <make_dshot_package+0xf4>)
 80040de:	3908      	subs	r1, #8
 80040e0:	6019      	str	r1, [r3, #0]
		break;
 80040e2:	e7be      	b.n	8004062 <make_dshot_package+0x4e>
for (int i = 15; i >= 9 ; i--){
 80040e4:	210d      	movs	r1, #13
 80040e6:	e7f9      	b.n	80040dc <make_dshot_package+0xc8>
 80040e8:	210c      	movs	r1, #12
 80040ea:	e7f7      	b.n	80040dc <make_dshot_package+0xc8>
 80040ec:	210b      	movs	r1, #11
 80040ee:	e7f5      	b.n	80040dc <make_dshot_package+0xc8>
 80040f0:	210a      	movs	r1, #10
 80040f2:	e7f3      	b.n	80040dc <make_dshot_package+0xc8>
 80040f4:	2109      	movs	r1, #9
 80040f6:	e7f1      	b.n	80040dc <make_dshot_package+0xc8>
 80040f8:	2000012c 	.word	0x2000012c
 80040fc:	20000028 	.word	0x20000028
 8004100:	20000224 	.word	0x20000224
 8004104:	0000ffff 	.word	0x0000ffff
 8004108:	20000234 	.word	0x20000234
 800410c:	20000410 	.word	0x20000410
 8004110:	20000040 	.word	0x20000040
 8004114:	200001a0 	.word	0x200001a0
 8004118:	200005e0 	.word	0x200005e0

0800411c <HAL_TIM_PeriodElapsedCallback>:
	 GPIOA->AFR[0] = 0x200;
	 is_output = 1;
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800411c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (htim->Instance==TIM6)  // commutation timer
 800411e:	6804      	ldr	r4, [r0, #0]
 8004120:	4b5a      	ldr	r3, [pc, #360]	; (800428c <HAL_TIM_PeriodElapsedCallback+0x170>)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8004122:	0005      	movs	r5, r0
	if (htim->Instance==TIM6)  // commutation timer
 8004124:	429c      	cmp	r4, r3
 8004126:	d100      	bne.n	800412a <HAL_TIM_PeriodElapsedCallback+0xe>
 8004128:	e072      	b.n	8004210 <HAL_TIM_PeriodElapsedCallback+0xf4>
        duration_in_microseconds = TIM17->CNT;
		 return;
			}


			if (htim->Instance==TIM16)  // input timeout reset timer
 800412a:	4b59      	ldr	r3, [pc, #356]	; (8004290 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800412c:	429c      	cmp	r4, r3
 800412e:	d02b      	beq.n	8004188 <HAL_TIM_PeriodElapsedCallback+0x6c>
					}
		}
			}


			if (htim->Instance==TIM14) /// sinusoidal interval timer
 8004130:	4b58      	ldr	r3, [pc, #352]	; (8004294 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8004132:	429c      	cmp	r4, r3
 8004134:	d000      	beq.n	8004138 <HAL_TIM_PeriodElapsedCallback+0x1c>
						{
advanceincrement();
						}

}
 8004136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  if (sine_mode){
 8004138:	4b57      	ldr	r3, [pc, #348]	; (8004298 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d0fa      	beq.n	8004136 <HAL_TIM_PeriodElapsedCallback+0x1a>
if (!forward){
 8004140:	4b56      	ldr	r3, [pc, #344]	; (800429c <HAL_TIM_PeriodElapsedCallback+0x180>)
 8004142:	4957      	ldr	r1, [pc, #348]	; (80042a0 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	680b      	ldr	r3, [r1, #0]
 8004148:	2a00      	cmp	r2, #0
 800414a:	d170      	bne.n	800422e <HAL_TIM_PeriodElapsedCallback+0x112>
    if (phase_A_position > 359){
 800414c:	2068      	movs	r0, #104	; 0x68
	phase_A_position ++;
 800414e:	3301      	adds	r3, #1
    if (phase_A_position > 359){
 8004150:	30ff      	adds	r0, #255	; 0xff
 8004152:	4283      	cmp	r3, r0
 8004154:	dd00      	ble.n	8004158 <HAL_TIM_PeriodElapsedCallback+0x3c>
 8004156:	e08a      	b.n	800426e <HAL_TIM_PeriodElapsedCallback+0x152>
	phase_A_position ++;
 8004158:	600b      	str	r3, [r1, #0]
	     if (phase_B_position > 359){
 800415a:	2268      	movs	r2, #104	; 0x68
	    phase_B_position ++;
 800415c:	4851      	ldr	r0, [pc, #324]	; (80042a4 <HAL_TIM_PeriodElapsedCallback+0x188>)
	     if (phase_B_position > 359){
 800415e:	32ff      	adds	r2, #255	; 0xff
	    phase_B_position ++;
 8004160:	6803      	ldr	r3, [r0, #0]
 8004162:	3301      	adds	r3, #1
	     if (phase_B_position > 359){
 8004164:	4293      	cmp	r3, r2
 8004166:	dd00      	ble.n	800416a <HAL_TIM_PeriodElapsedCallback+0x4e>
		phase_B_position = 0 ;
 8004168:	2300      	movs	r3, #0
	     if (phase_C_position > 359){
 800416a:	2568      	movs	r5, #104	; 0x68
	    phase_C_position ++;
 800416c:	4c4e      	ldr	r4, [pc, #312]	; (80042a8 <HAL_TIM_PeriodElapsedCallback+0x18c>)
	     if (phase_C_position > 359){
 800416e:	35ff      	adds	r5, #255	; 0xff
	    phase_C_position ++;
 8004170:	6822      	ldr	r2, [r4, #0]
		phase_B_position = 0 ;
 8004172:	6003      	str	r3, [r0, #0]
	    phase_C_position ++;
 8004174:	3201      	adds	r2, #1
 8004176:	6022      	str	r2, [r4, #0]
	     if (phase_C_position > 359){
 8004178:	42aa      	cmp	r2, r5
 800417a:	dd66      	ble.n	800424a <HAL_TIM_PeriodElapsedCallback+0x12e>
		phase_C_position = 0 ;
 800417c:	2300      	movs	r3, #0
 800417e:	2580      	movs	r5, #128	; 0x80
 8004180:	6023      	str	r3, [r4, #0]
 8004182:	6803      	ldr	r3, [r0, #0]
 8004184:	4c49      	ldr	r4, [pc, #292]	; (80042ac <HAL_TIM_PeriodElapsedCallback+0x190>)
 8004186:	e063      	b.n	8004250 <HAL_TIM_PeriodElapsedCallback+0x134>
			if(!is_output){
 8004188:	4b49      	ldr	r3, [pc, #292]	; (80042b0 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800418a:	781e      	ldrb	r6, [r3, #0]
 800418c:	2e00      	cmp	r6, #0
 800418e:	d113      	bne.n	80041b8 <HAL_TIM_PeriodElapsedCallback+0x9c>
			if(inputSet == 1){
 8004190:	4b48      	ldr	r3, [pc, #288]	; (80042b4 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d1ce      	bne.n	8004136 <HAL_TIM_PeriodElapsedCallback+0x1a>
		     HAL_TIM_IC_Stop_DMA(&htim15,TIM_CHANNEL_1);
 8004198:	4c47      	ldr	r4, [pc, #284]	; (80042b8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800419a:	2100      	movs	r1, #0
 800419c:	0020      	movs	r0, r4
 800419e:	f7fd fe63 	bl	8001e68 <HAL_TIM_IC_Stop_DMA>
			 TIM15->CNT = 0;
 80041a2:	4b46      	ldr	r3, [pc, #280]	; (80042bc <HAL_TIM_PeriodElapsedCallback+0x1a0>)
				 HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , IC_buffer_size);
 80041a4:	0020      	movs	r0, r4
			 TIM15->CNT = 0;
 80041a6:	625e      	str	r6, [r3, #36]	; 0x24
				 HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , IC_buffer_size);
 80041a8:	4b45      	ldr	r3, [pc, #276]	; (80042c0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80041aa:	4a46      	ldr	r2, [pc, #280]	; (80042c4 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80041ac:	881b      	ldrh	r3, [r3, #0]
 80041ae:	2100      	movs	r1, #0
 80041b0:	f7fd fdca 	bl	8001d48 <HAL_TIM_IC_Start_DMA>
 80041b4:	682c      	ldr	r4, [r5, #0]
 80041b6:	e7bb      	b.n	8004130 <HAL_TIM_PeriodElapsedCallback+0x14>
			if(delay_before_output == 1){
 80041b8:	4e43      	ldr	r6, [pc, #268]	; (80042c8 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80041ba:	7832      	ldrb	r2, [r6, #0]
 80041bc:	2a01      	cmp	r2, #1
 80041be:	d1ba      	bne.n	8004136 <HAL_TIM_PeriodElapsedCallback+0x1a>
	TIM16->ARR = 65535;
 80041c0:	4942      	ldr	r1, [pc, #264]	; (80042cc <HAL_TIM_PeriodElapsedCallback+0x1b0>)
	__HAL_TIM_DISABLE_DMA(&htim15, TIM_DMA_CC1);
 80041c2:	4f43      	ldr	r7, [pc, #268]	; (80042d0 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
	TIM16->ARR = 65535;
 80041c4:	62e1      	str	r1, [r4, #44]	; 0x2c
	__HAL_TIM_DISABLE_DMA(&htim15, TIM_DMA_CC1);
 80041c6:	493c      	ldr	r1, [pc, #240]	; (80042b8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80041c8:	6809      	ldr	r1, [r1, #0]
 80041ca:	68c8      	ldr	r0, [r1, #12]
 80041cc:	4038      	ands	r0, r7
 80041ce:	60c8      	str	r0, [r1, #12]
	__HAL_TIM_DISABLE_DMA(&htim15, TIM_DMA_UPDATE);
 80041d0:	68c8      	ldr	r0, [r1, #12]
 80041d2:	4f40      	ldr	r7, [pc, #256]	; (80042d4 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80041d4:	4038      	ands	r0, r7
 80041d6:	60c8      	str	r0, [r1, #12]
	 GPIOA->AFR[0] = 0x200;
 80041d8:	2190      	movs	r1, #144	; 0x90
 80041da:	2080      	movs	r0, #128	; 0x80
 80041dc:	05c9      	lsls	r1, r1, #23
 80041de:	0080      	lsls	r0, r0, #2
 80041e0:	6208      	str	r0, [r1, #32]
	 is_output = 1;
 80041e2:	701a      	strb	r2, [r3, #0]
				make_dshot_package();
 80041e4:	f7ff ff16 	bl	8004014 <make_dshot_package>
	if (HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, gcr, 23) != HAL_OK)
 80041e8:	2317      	movs	r3, #23
 80041ea:	4a3b      	ldr	r2, [pc, #236]	; (80042d8 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80041ec:	2108      	movs	r1, #8
 80041ee:	483b      	ldr	r0, [pc, #236]	; (80042dc <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80041f0:	f7fd fc8e 	bl	8001b10 <HAL_TIM_PWM_Start_DMA>
	DMA1_Channel1->CCR = 0xa93;         // turn off half transfer interrupt.
 80041f4:	4b3a      	ldr	r3, [pc, #232]	; (80042e0 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80041f6:	4a3b      	ldr	r2, [pc, #236]	; (80042e4 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80041f8:	601a      	str	r2, [r3, #0]
	count++;
 80041fa:	4a3b      	ldr	r2, [pc, #236]	; (80042e8 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80041fc:	6813      	ldr	r3, [r2, #0]
 80041fe:	3301      	adds	r3, #1
 8004200:	6013      	str	r3, [r2, #0]
				TIM16->ARR = timer_16_period;
 8004202:	4b3a      	ldr	r3, [pc, #232]	; (80042ec <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	62e3      	str	r3, [r4, #44]	; 0x2c
				delay_before_output = 0;
 8004208:	2300      	movs	r3, #0
 800420a:	7033      	strb	r3, [r6, #0]
 800420c:	682c      	ldr	r4, [r5, #0]
 800420e:	e78f      	b.n	8004130 <HAL_TIM_PeriodElapsedCallback+0x14>
		__HAL_TIM_DISABLE_IT(&htim6, TIM_IT_UPDATE);  // disable update interrupt
 8004210:	2101      	movs	r1, #1
 8004212:	4b37      	ldr	r3, [pc, #220]	; (80042f0 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
		TIM17->CNT = 0;
 8004214:	4c37      	ldr	r4, [pc, #220]	; (80042f4 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
		__HAL_TIM_DISABLE_IT(&htim6, TIM_IT_UPDATE);  // disable update interrupt
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	68d3      	ldr	r3, [r2, #12]
 800421a:	438b      	bics	r3, r1
 800421c:	60d3      	str	r3, [r2, #12]
		TIM17->CNT = 0;
 800421e:	2300      	movs	r3, #0
 8004220:	6263      	str	r3, [r4, #36]	; 0x24
		 commutate();
 8004222:	f7ff f995 	bl	8003550 <commutate>
        duration_in_microseconds = TIM17->CNT;
 8004226:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004228:	4b33      	ldr	r3, [pc, #204]	; (80042f8 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800422a:	601a      	str	r2, [r3, #0]
		 return;
 800422c:	e783      	b.n	8004136 <HAL_TIM_PeriodElapsedCallback+0x1a>
	    if (phase_A_position < 0){
 800422e:	3b01      	subs	r3, #1
 8004230:	d429      	bmi.n	8004286 <HAL_TIM_PeriodElapsedCallback+0x16a>
		    phase_B_position --;
 8004232:	481c      	ldr	r0, [pc, #112]	; (80042a4 <HAL_TIM_PeriodElapsedCallback+0x188>)
		   phase_A_position = 359 ;
 8004234:	600b      	str	r3, [r1, #0]
		     if (phase_B_position < 0){
 8004236:	6803      	ldr	r3, [r0, #0]
 8004238:	3b01      	subs	r3, #1
 800423a:	d421      	bmi.n	8004280 <HAL_TIM_PeriodElapsedCallback+0x164>
		    phase_C_position --;
 800423c:	4c1a      	ldr	r4, [pc, #104]	; (80042a8 <HAL_TIM_PeriodElapsedCallback+0x18c>)
			phase_B_position = 359;
 800423e:	6003      	str	r3, [r0, #0]
		    phase_C_position --;
 8004240:	6822      	ldr	r2, [r4, #0]
 8004242:	3a01      	subs	r2, #1
 8004244:	6022      	str	r2, [r4, #0]
		     if (phase_C_position < 0){
 8004246:	2a00      	cmp	r2, #0
 8004248:	db13      	blt.n	8004272 <HAL_TIM_PeriodElapsedCallback+0x156>
 800424a:	4c18      	ldr	r4, [pc, #96]	; (80042ac <HAL_TIM_PeriodElapsedCallback+0x190>)
 800424c:	0092      	lsls	r2, r2, #2
 800424e:	58a5      	ldr	r5, [r4, r2]
		    TIM1->CCR1 = (pwmSin[phase_A_position])+gate_drive_offset;												// set duty cycle to 50 out of 768 to start.
 8004250:	6809      	ldr	r1, [r1, #0]
 8004252:	4a2a      	ldr	r2, [pc, #168]	; (80042fc <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8004254:	0089      	lsls	r1, r1, #2
		    TIM1->CCR2 = (pwmSin[phase_B_position])+gate_drive_offset;
 8004256:	009b      	lsls	r3, r3, #2
		    TIM1->CCR1 = (pwmSin[phase_A_position])+gate_drive_offset;												// set duty cycle to 50 out of 768 to start.
 8004258:	6812      	ldr	r2, [r2, #0]
 800425a:	5860      	ldr	r0, [r4, r1]
		    TIM1->CCR2 = (pwmSin[phase_B_position])+gate_drive_offset;
 800425c:	58e3      	ldr	r3, [r4, r3]
		    TIM1->CCR1 = (pwmSin[phase_A_position])+gate_drive_offset;												// set duty cycle to 50 out of 768 to start.
 800425e:	4928      	ldr	r1, [pc, #160]	; (8004300 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8004260:	1810      	adds	r0, r2, r0
		    TIM1->CCR2 = (pwmSin[phase_B_position])+gate_drive_offset;
 8004262:	18d3      	adds	r3, r2, r3
		    TIM1->CCR3 = (pwmSin[phase_C_position])+gate_drive_offset;
 8004264:	1952      	adds	r2, r2, r5
		    TIM1->CCR1 = (pwmSin[phase_A_position])+gate_drive_offset;												// set duty cycle to 50 out of 768 to start.
 8004266:	6348      	str	r0, [r1, #52]	; 0x34
		    TIM1->CCR2 = (pwmSin[phase_B_position])+gate_drive_offset;
 8004268:	638b      	str	r3, [r1, #56]	; 0x38
		    TIM1->CCR3 = (pwmSin[phase_C_position])+gate_drive_offset;
 800426a:	63ca      	str	r2, [r1, #60]	; 0x3c
 800426c:	e763      	b.n	8004136 <HAL_TIM_PeriodElapsedCallback+0x1a>
	   phase_A_position = 0 ;
 800426e:	600a      	str	r2, [r1, #0]
 8004270:	e773      	b.n	800415a <HAL_TIM_PeriodElapsedCallback+0x3e>
			phase_C_position = 359 ;
 8004272:	2368      	movs	r3, #104	; 0x68
 8004274:	33ff      	adds	r3, #255	; 0xff
 8004276:	6023      	str	r3, [r4, #0]
 8004278:	257d      	movs	r5, #125	; 0x7d
 800427a:	6803      	ldr	r3, [r0, #0]
 800427c:	4c0b      	ldr	r4, [pc, #44]	; (80042ac <HAL_TIM_PeriodElapsedCallback+0x190>)
 800427e:	e7e7      	b.n	8004250 <HAL_TIM_PeriodElapsedCallback+0x134>
			phase_B_position = 359;
 8004280:	2368      	movs	r3, #104	; 0x68
 8004282:	33ff      	adds	r3, #255	; 0xff
 8004284:	e7da      	b.n	800423c <HAL_TIM_PeriodElapsedCallback+0x120>
		   phase_A_position = 359 ;
 8004286:	2368      	movs	r3, #104	; 0x68
 8004288:	33ff      	adds	r3, #255	; 0xff
 800428a:	e7d2      	b.n	8004232 <HAL_TIM_PeriodElapsedCallback+0x116>
 800428c:	40001000 	.word	0x40001000
 8004290:	40014400 	.word	0x40014400
 8004294:	40002000 	.word	0x40002000
 8004298:	2000023c 	.word	0x2000023c
 800429c:	20000038 	.word	0x20000038
 80042a0:	20000348 	.word	0x20000348
 80042a4:	2000073c 	.word	0x2000073c
 80042a8:	20000670 	.word	0x20000670
 80042ac:	080062a8 	.word	0x080062a8
 80042b0:	20000201 	.word	0x20000201
 80042b4:	20000200 	.word	0x20000200
 80042b8:	200002ac 	.word	0x200002ac
 80042bc:	40014000 	.word	0x40014000
 80042c0:	20000008 	.word	0x20000008
 80042c4:	20000414 	.word	0x20000414
 80042c8:	20000140 	.word	0x20000140
 80042cc:	0000ffff 	.word	0x0000ffff
 80042d0:	fffffdff 	.word	0xfffffdff
 80042d4:	fffffeff 	.word	0xfffffeff
 80042d8:	200001a0 	.word	0x200001a0
 80042dc:	200005e8 	.word	0x200005e8
 80042e0:	40020008 	.word	0x40020008
 80042e4:	00000a93 	.word	0x00000a93
 80042e8:	20000138 	.word	0x20000138
 80042ec:	200000b8 	.word	0x200000b8
 80042f0:	20000514 	.word	0x20000514
 80042f4:	40014800 	.word	0x40014800
 80042f8:	200005e4 	.word	0x200005e4
 80042fc:	2000003c 	.word	0x2000003c
 8004300:	40012c00 	.word	0x40012c00

08004304 <transferComplete>:


void transferComplete(){
//	TIM3->CNT = 0;
//	compit = 0;
	signaltimeout = 0;
 8004304:	2100      	movs	r1, #0
void transferComplete(){
 8004306:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	count++;
 8004308:	4a2e      	ldr	r2, [pc, #184]	; (80043c4 <transferComplete+0xc0>)
	signaltimeout = 0;
 800430a:	4b2f      	ldr	r3, [pc, #188]	; (80043c8 <transferComplete+0xc4>)
 800430c:	6019      	str	r1, [r3, #0]
	count++;
 800430e:	6813      	ldr	r3, [r2, #0]
 8004310:	3301      	adds	r3, #1
 8004312:	6013      	str	r3, [r2, #0]
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
	if (is_output){        // if transfer complete happened on output the tansfer to dma is done and we can switch back lines and start input capture
 8004314:	4b2d      	ldr	r3, [pc, #180]	; (80043cc <transferComplete+0xc8>)
 8004316:	781a      	ldrb	r2, [r3, #0]
 8004318:	2a00      	cmp	r2, #0
 800431a:	d11d      	bne.n	8004358 <transferComplete+0x54>
		HAL_TIM_IC_Stop_DMA(&htim15,TIM_CHANNEL_1);
		HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , 33);
		return;
	}

	if (inputSet == 1){
 800431c:	4a2c      	ldr	r2, [pc, #176]	; (80043d0 <transferComplete+0xcc>)
 800431e:	7812      	ldrb	r2, [r2, #0]
 8004320:	2a01      	cmp	r2, #1
 8004322:	d000      	beq.n	8004326 <transferComplete+0x22>
//          }
		}

	}

}
 8004324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if((dshot_telemetry) && (!is_output) ){
 8004326:	4c2b      	ldr	r4, [pc, #172]	; (80043d4 <transferComplete+0xd0>)
 8004328:	7822      	ldrb	r2, [r4, #0]
 800432a:	2a00      	cmp	r2, #0
 800432c:	d128      	bne.n	8004380 <transferComplete+0x7c>
		if (dshot == 1){
 800432e:	4b2a      	ldr	r3, [pc, #168]	; (80043d8 <transferComplete+0xd4>)
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d03f      	beq.n	80043b6 <transferComplete+0xb2>
		if (proshot == 1){
 8004336:	4b29      	ldr	r3, [pc, #164]	; (80043dc <transferComplete+0xd8>)
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d03e      	beq.n	80043bc <transferComplete+0xb8>
		if  (servoPwm == 1){
 800433e:	4b28      	ldr	r3, [pc, #160]	; (80043e0 <transferComplete+0xdc>)
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d1ee      	bne.n	8004324 <transferComplete+0x20>
			computeServoInput();
 8004346:	f7ff fdff 	bl	8003f48 <computeServoInput>
				HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , 3);
 800434a:	2303      	movs	r3, #3
 800434c:	4a25      	ldr	r2, [pc, #148]	; (80043e4 <transferComplete+0xe0>)
 800434e:	2100      	movs	r1, #0
 8004350:	4825      	ldr	r0, [pc, #148]	; (80043e8 <transferComplete+0xe4>)
 8004352:	f7fd fcf9 	bl	8001d48 <HAL_TIM_IC_Start_DMA>
 8004356:	e7e5      	b.n	8004324 <transferComplete+0x20>
	TIM16->ARR = timer_16_period;
 8004358:	4824      	ldr	r0, [pc, #144]	; (80043ec <transferComplete+0xe8>)
	TIM16->CNT = 0;
 800435a:	4a25      	ldr	r2, [pc, #148]	; (80043f0 <transferComplete+0xec>)
	TIM16->ARR = timer_16_period;
 800435c:	6800      	ldr	r0, [r0, #0]
	TIM16->CNT = 0;
 800435e:	6251      	str	r1, [r2, #36]	; 0x24
	TIM16->ARR = timer_16_period;
 8004360:	62d0      	str	r0, [r2, #44]	; 0x2c
	GPIOA->AFR[0] = 0x00;                  // set alternate function to zero
 8004362:	2290      	movs	r2, #144	; 0x90
		HAL_TIM_IC_Stop_DMA(&htim15,TIM_CHANNEL_1);
 8004364:	4c20      	ldr	r4, [pc, #128]	; (80043e8 <transferComplete+0xe4>)
	GPIOA->AFR[0] = 0x00;                  // set alternate function to zero
 8004366:	05d2      	lsls	r2, r2, #23
 8004368:	6211      	str	r1, [r2, #32]
		HAL_TIM_IC_Stop_DMA(&htim15,TIM_CHANNEL_1);
 800436a:	0020      	movs	r0, r4
	is_output = 0;
 800436c:	7019      	strb	r1, [r3, #0]
		HAL_TIM_IC_Stop_DMA(&htim15,TIM_CHANNEL_1);
 800436e:	f7fd fd7b 	bl	8001e68 <HAL_TIM_IC_Stop_DMA>
		HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , 33);
 8004372:	2321      	movs	r3, #33	; 0x21
 8004374:	4a1b      	ldr	r2, [pc, #108]	; (80043e4 <transferComplete+0xe0>)
 8004376:	2100      	movs	r1, #0
 8004378:	0020      	movs	r0, r4
 800437a:	f7fd fce5 	bl	8001d48 <HAL_TIM_IC_Start_DMA>
		return;
 800437e:	e7d1      	b.n	8004324 <transferComplete+0x20>
			if ((dma_buffer[0] > 10)||(dma_buffer[1]> 10)){
 8004380:	4d18      	ldr	r5, [pc, #96]	; (80043e4 <transferComplete+0xe0>)
 8004382:	682a      	ldr	r2, [r5, #0]
 8004384:	2a0a      	cmp	r2, #10
 8004386:	d802      	bhi.n	800438e <transferComplete+0x8a>
 8004388:	686a      	ldr	r2, [r5, #4]
 800438a:	2a0a      	cmp	r2, #10
 800438c:	d9ca      	bls.n	8004324 <transferComplete+0x20>
			TIM16->CNT = 0;
 800438e:	2600      	movs	r6, #0
			is_output = 1;
 8004390:	2701      	movs	r7, #1
			TIM16->CNT = 0;
 8004392:	4a17      	ldr	r2, [pc, #92]	; (80043f0 <transferComplete+0xec>)
			TIM16->ARR = 65535;
 8004394:	4917      	ldr	r1, [pc, #92]	; (80043f4 <transferComplete+0xf0>)
			TIM16->CNT = 0;
 8004396:	6256      	str	r6, [r2, #36]	; 0x24
			TIM16->ARR = 65535;
 8004398:	62d1      	str	r1, [r2, #44]	; 0x2c
			is_output = 1;
 800439a:	701f      	strb	r7, [r3, #0]
			TIM16->ARR = wait_before;
 800439c:	4b16      	ldr	r3, [pc, #88]	; (80043f8 <transferComplete+0xf4>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	62d3      	str	r3, [r2, #44]	; 0x2c
			computeDshotDMA();
 80043a2:	f7ff fcad 	bl	8003d00 <computeDshotDMA>
            delay_before_output = 1;
 80043a6:	4b15      	ldr	r3, [pc, #84]	; (80043fc <transferComplete+0xf8>)
			dma_buffer[0] =0;
 80043a8:	602e      	str	r6, [r5, #0]
            delay_before_output = 1;
 80043aa:	701f      	strb	r7, [r3, #0]
if(!dshot_telemetry){
 80043ac:	7823      	ldrb	r3, [r4, #0]
			dma_buffer[1]= 0;
 80043ae:	606e      	str	r6, [r5, #4]
if(!dshot_telemetry){
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1b7      	bne.n	8004324 <transferComplete+0x20>
 80043b4:	e7bb      	b.n	800432e <transferComplete+0x2a>
			computeDshotDMA();
 80043b6:	f7ff fca3 	bl	8003d00 <computeDshotDMA>
			return;
 80043ba:	e7b3      	b.n	8004324 <transferComplete+0x20>
			computeProshotDMA();
 80043bc:	f7ff fc26 	bl	8003c0c <computeProshotDMA>
			return;
 80043c0:	e7b0      	b.n	8004324 <transferComplete+0x20>
 80043c2:	46c0      	nop			; (mov r8, r8)
 80043c4:	20000138 	.word	0x20000138
 80043c8:	20000238 	.word	0x20000238
 80043cc:	20000201 	.word	0x20000201
 80043d0:	20000200 	.word	0x20000200
 80043d4:	20000189 	.word	0x20000189
 80043d8:	20000188 	.word	0x20000188
 80043dc:	20000220 	.word	0x20000220
 80043e0:	2000022c 	.word	0x2000022c
 80043e4:	20000414 	.word	0x20000414
 80043e8:	200002ac 	.word	0x200002ac
 80043ec:	200000b8 	.word	0x200000b8
 80043f0:	40014400 	.word	0x40014400
 80043f4:	0000ffff 	.word	0x0000ffff
 80043f8:	200000c8 	.word	0x200000c8
 80043fc:	20000140 	.word	0x20000140

08004400 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004400:	b510      	push	{r4, lr}
 8004402:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004404:	222c      	movs	r2, #44	; 0x2c
 8004406:	2100      	movs	r1, #0
 8004408:	a805      	add	r0, sp, #20
 800440a:	f001 ff1b 	bl	8006244 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800440e:	2210      	movs	r2, #16
 8004410:	2100      	movs	r1, #0
 8004412:	4668      	mov	r0, sp
 8004414:	f001 ff16 	bl	8006244 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8004418:	231a      	movs	r3, #26
 800441a:	9304      	str	r3, [sp, #16]
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800441c:	3b19      	subs	r3, #25
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800441e:	2410      	movs	r4, #16
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004420:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8004422:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004424:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8004426:	23a0      	movs	r3, #160	; 0xa0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004428:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800442a:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800442c:	039b      	lsls	r3, r3, #14
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800442e:	3c0e      	subs	r4, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004430:	a804      	add	r0, sp, #16
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8004432:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004434:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004436:	f7fc ff11 	bl	800125c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800443a:	2307      	movs	r3, #7
 800443c:	9300      	str	r3, [sp, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800443e:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004440:	2101      	movs	r1, #1
 8004442:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004444:	9401      	str	r4, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004446:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004448:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800444a:	f7fd f955 	bl	80016f8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800444e:	b010      	add	sp, #64	; 0x40
 8004450:	bd10      	pop	{r4, pc}
 8004452:	46c0      	nop			; (mov r8, r8)

08004454 <main>:
{
 8004454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004456:	46de      	mov	lr, fp
 8004458:	4657      	mov	r7, sl
 800445a:	464e      	mov	r6, r9
 800445c:	4645      	mov	r5, r8
 800445e:	b5e0      	push	{r5, r6, r7, lr}
 8004460:	b0a3      	sub	sp, #140	; 0x8c
  HAL_Init();
 8004462:	f7fb ffed 	bl	8000440 <HAL_Init>
  SystemClock_Config();
 8004466:	f7ff ffcb 	bl	8004400 <SystemClock_Config>
  HAL_FLASH_Unlock();
 800446a:	f7fc fd05 	bl	8000e78 <HAL_FLASH_Unlock>
  EE_Init();
 800446e:	f7fe fabb 	bl	80029e8 <EE_Init>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004472:	2210      	movs	r2, #16
 8004474:	2100      	movs	r1, #0
 8004476:	a81c      	add	r0, sp, #112	; 0x70
 8004478:	f001 fee4 	bl	8006244 <memset>
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 800447c:	2180      	movs	r1, #128	; 0x80
 800447e:	4cfe      	ldr	r4, [pc, #1016]	; (8004878 <main+0x424>)
 8004480:	0289      	lsls	r1, r1, #10
 8004482:	6962      	ldr	r2, [r4, #20]
  sConfig.Channel = ADC_CHANNEL_3;
 8004484:	2503      	movs	r5, #3
 8004486:	430a      	orrs	r2, r1
 8004488:	6162      	str	r2, [r4, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800448a:	6963      	ldr	r3, [r4, #20]
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800448c:	2760      	movs	r7, #96	; 0x60
 800448e:	400b      	ands	r3, r1
  SET_BIT(RCC->AHBENR, Periphs);
 8004490:	2180      	movs	r1, #128	; 0x80
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8004492:	930b      	str	r3, [sp, #44]	; 0x2c
  (void)tmpreg;
 8004494:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  SET_BIT(RCC->AHBENR, Periphs);
 8004496:	6962      	ldr	r2, [r4, #20]
 8004498:	02c9      	lsls	r1, r1, #11
 800449a:	430a      	orrs	r2, r1
 800449c:	6162      	str	r2, [r4, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800449e:	6963      	ldr	r3, [r4, #20]
 80044a0:	400b      	ands	r3, r1
 80044a2:	930c      	str	r3, [sp, #48]	; 0x30
  (void)tmpreg;
 80044a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 80044a6:	2390      	movs	r3, #144	; 0x90
 80044a8:	05db      	lsls	r3, r3, #23
 80044aa:	469b      	mov	fp, r3
 80044ac:	2380      	movs	r3, #128	; 0x80
 80044ae:	465a      	mov	r2, fp
 80044b0:	021b      	lsls	r3, r3, #8
 80044b2:	6293      	str	r3, [r2, #40]	; 0x28

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_15);

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80044b4:	931a      	str	r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80044b6:	2301      	movs	r3, #1
 80044b8:	4699      	mov	r9, r3
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044ba:	a91a      	add	r1, sp, #104	; 0x68
 80044bc:	4658      	mov	r0, fp
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80044be:	931b      	str	r3, [sp, #108]	; 0x6c
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044c0:	f7fe fa18 	bl	80028f4 <LL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80044c4:	464a      	mov	r2, r9
 80044c6:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80044c8:	2101      	movs	r1, #1
  __HAL_RCC_DMA1_CLK_ENABLE();
 80044ca:	4313      	orrs	r3, r2
 80044cc:	6163      	str	r3, [r4, #20]
 80044ce:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80044d0:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 80044d2:	4013      	ands	r3, r2
 80044d4:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80044d6:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80044d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80044da:	f7fc fab3 	bl	8000a44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80044de:	2009      	movs	r0, #9
 80044e0:	f7fc fadc 	bl	8000a9c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 1, 0);
 80044e4:	2200      	movs	r2, #0
 80044e6:	2101      	movs	r1, #1
 80044e8:	200a      	movs	r0, #10
 80044ea:	f7fc faab 	bl	8000a44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80044ee:	200a      	movs	r0, #10
 80044f0:	f7fc fad4 	bl	8000a9c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 1, 0);
 80044f4:	2200      	movs	r2, #0
 80044f6:	2101      	movs	r1, #1
 80044f8:	200b      	movs	r0, #11
 80044fa:	f7fc faa3 	bl	8000a44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 80044fe:	200b      	movs	r0, #11
 8004500:	f7fc facc 	bl	8000a9c <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 8004504:	220c      	movs	r2, #12
 8004506:	2100      	movs	r1, #0
 8004508:	a81a      	add	r0, sp, #104	; 0x68
 800450a:	f001 fe9b 	bl	8006244 <memset>
  hadc.Instance = ADC1;
 800450e:	4edb      	ldr	r6, [pc, #876]	; (800487c <main+0x428>)
 8004510:	4bdb      	ldr	r3, [pc, #876]	; (8004880 <main+0x42c>)
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8004512:	2400      	movs	r4, #0
  hadc.Instance = ADC1;
 8004514:	6033      	str	r3, [r6, #0]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8004516:	464b      	mov	r3, r9
 8004518:	6133      	str	r3, [r6, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800451a:	3307      	adds	r3, #7
 800451c:	469a      	mov	sl, r3
 800451e:	6173      	str	r3, [r6, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8004520:	2380      	movs	r3, #128	; 0x80
 8004522:	045b      	lsls	r3, r3, #17
 8004524:	61b3      	str	r3, [r6, #24]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004526:	23c2      	movs	r3, #194	; 0xc2
 8004528:	33ff      	adds	r3, #255	; 0xff
 800452a:	61f3      	str	r3, [r6, #28]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800452c:	3b9e      	subs	r3, #158	; 0x9e
 800452e:	3bff      	subs	r3, #255	; 0xff
 8004530:	54f4      	strb	r4, [r6, r3]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004532:	464b      	mov	r3, r9
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8004534:	0030      	movs	r0, r6
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004536:	62b3      	str	r3, [r6, #40]	; 0x28
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8004538:	6074      	str	r4, [r6, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800453a:	60b4      	str	r4, [r6, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800453c:	60f4      	str	r4, [r6, #12]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800453e:	6234      	str	r4, [r6, #32]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8004540:	f7fb ffb2 	bl	80004a8 <HAL_ADC_Init>
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8004544:	2380      	movs	r3, #128	; 0x80
 8004546:	015b      	lsls	r3, r3, #5
 8004548:	4698      	mov	r8, r3
 800454a:	931b      	str	r3, [sp, #108]	; 0x6c
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800454c:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800454e:	a91a      	add	r1, sp, #104	; 0x68
 8004550:	0030      	movs	r0, r6
  sConfig.Channel = ADC_CHANNEL_3;
 8004552:	951a      	str	r5, [sp, #104]	; 0x68
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8004554:	931c      	str	r3, [sp, #112]	; 0x70
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004556:	f7fc f8c7 	bl	80006e8 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_6;
 800455a:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800455c:	a91a      	add	r1, sp, #104	; 0x68
 800455e:	0030      	movs	r0, r6
  sConfig.Channel = ADC_CHANNEL_6;
 8004560:	931a      	str	r3, [sp, #104]	; 0x68
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004562:	f7fc f8c1 	bl	80006e8 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8004566:	2310      	movs	r3, #16
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004568:	a91a      	add	r1, sp, #104	; 0x68
 800456a:	0030      	movs	r0, r6
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800456c:	931a      	str	r3, [sp, #104]	; 0x68
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800456e:	f7fc f8bb 	bl	80006e8 <HAL_ADC_ConfigChannel>
  hcomp1.Instance = COMP1;
 8004572:	4ac4      	ldr	r2, [pc, #784]	; (8004884 <main+0x430>)
 8004574:	4bc4      	ldr	r3, [pc, #784]	; (8004888 <main+0x434>)
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8004576:	0010      	movs	r0, r2
  hcomp1.Instance = COMP1;
 8004578:	6013      	str	r3, [r2, #0]
  hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_DAC2;
 800457a:	2350      	movs	r3, #80	; 0x50
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 800457c:	6215      	str	r5, [r2, #32]
  hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_DAC2;
 800457e:	6053      	str	r3, [r2, #4]
  hcomp1.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8004580:	6094      	str	r4, [r2, #8]
  hcomp1.Init.Output = COMP_OUTPUT_NONE;
 8004582:	60d4      	str	r4, [r2, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8004584:	6114      	str	r4, [r2, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8004586:	6154      	str	r4, [r2, #20]
  hcomp1.Init.Mode = COMP_MODE_HIGHSPEED;
 8004588:	6194      	str	r4, [r2, #24]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 800458a:	61d4      	str	r4, [r2, #28]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 800458c:	f7fc f93c 	bl	8000808 <HAL_COMP_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004590:	2210      	movs	r2, #16
 8004592:	2100      	movs	r1, #0
 8004594:	a80f      	add	r0, sp, #60	; 0x3c
 8004596:	f001 fe55 	bl	8006244 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800459a:	2208      	movs	r2, #8
 800459c:	2100      	movs	r1, #0
 800459e:	a80d      	add	r0, sp, #52	; 0x34
 80045a0:	f001 fe50 	bl	8006244 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80045a4:	221c      	movs	r2, #28
 80045a6:	2100      	movs	r1, #0
 80045a8:	a813      	add	r0, sp, #76	; 0x4c
 80045aa:	f001 fe4b 	bl	8006244 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80045ae:	2100      	movs	r1, #0
 80045b0:	2220      	movs	r2, #32
 80045b2:	a81a      	add	r0, sp, #104	; 0x68
 80045b4:	f001 fe46 	bl	8006244 <memset>
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80045b8:	2380      	movs	r3, #128	; 0x80
  htim1.Instance = TIM1;
 80045ba:	4db4      	ldr	r5, [pc, #720]	; (800488c <main+0x438>)
 80045bc:	4ab4      	ldr	r2, [pc, #720]	; (8004890 <main+0x43c>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80045be:	0028      	movs	r0, r5
  htim1.Instance = TIM1;
 80045c0:	602a      	str	r2, [r5, #0]
  htim1.Init.Period = timer_one_period;
 80045c2:	4ab4      	ldr	r2, [pc, #720]	; (8004894 <main+0x440>)
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80045c4:	61ab      	str	r3, [r5, #24]
  htim1.Init.Period = timer_one_period;
 80045c6:	6812      	ldr	r2, [r2, #0]
  htim1.Init.Prescaler = 0;
 80045c8:	606c      	str	r4, [r5, #4]
  htim1.Init.Period = timer_one_period;
 80045ca:	9200      	str	r2, [sp, #0]
 80045cc:	60ea      	str	r2, [r5, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045ce:	60ac      	str	r4, [r5, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045d0:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 80045d2:	616c      	str	r4, [r5, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80045d4:	f7fd f94c 	bl	8001870 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045d8:	4642      	mov	r2, r8
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80045da:	a90f      	add	r1, sp, #60	; 0x3c
 80045dc:	0028      	movs	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045de:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80045e0:	f7fd fe96 	bl	8002310 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80045e4:	0028      	movs	r0, r5
 80045e6:	f7fd f9f1 	bl	80019cc <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80045ea:	a90d      	add	r1, sp, #52	; 0x34
 80045ec:	0028      	movs	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045ee:	940d      	str	r4, [sp, #52]	; 0x34
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045f0:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80045f2:	f7fe f915 	bl	8002820 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80045f6:	2200      	movs	r2, #0
 80045f8:	a913      	add	r1, sp, #76	; 0x4c
 80045fa:	0028      	movs	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80045fc:	9713      	str	r7, [sp, #76]	; 0x4c
  sConfigOC.Pulse = 0;
 80045fe:	9414      	str	r4, [sp, #80]	; 0x50
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004600:	9415      	str	r4, [sp, #84]	; 0x54
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004602:	9416      	str	r4, [sp, #88]	; 0x58
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004604:	9417      	str	r4, [sp, #92]	; 0x5c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004606:	9418      	str	r4, [sp, #96]	; 0x60
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004608:	9419      	str	r4, [sp, #100]	; 0x64
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800460a:	f7fd fd53 	bl	80020b4 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800460e:	2204      	movs	r2, #4
 8004610:	a913      	add	r1, sp, #76	; 0x4c
 8004612:	0028      	movs	r0, r5
 8004614:	f7fd fd4e 	bl	80020b4 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004618:	2208      	movs	r2, #8
 800461a:	a913      	add	r1, sp, #76	; 0x4c
 800461c:	0028      	movs	r0, r5
 800461e:	f7fd fd49 	bl	80020b4 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004622:	220c      	movs	r2, #12
 8004624:	a913      	add	r1, sp, #76	; 0x4c
 8004626:	0028      	movs	r0, r5
 8004628:	f7fd fd44 	bl	80020b4 <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.DeadTime = 40;
 800462c:	2328      	movs	r3, #40	; 0x28
 800462e:	931d      	str	r3, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004630:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004632:	a91a      	add	r1, sp, #104	; 0x68
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004634:	019b      	lsls	r3, r3, #6
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004636:	0028      	movs	r0, r5
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004638:	931f      	str	r3, [sp, #124]	; 0x7c
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800463a:	941a      	str	r4, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800463c:	941b      	str	r4, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800463e:	941c      	str	r4, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004640:	941e      	str	r4, [sp, #120]	; 0x78
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004642:	9421      	str	r4, [sp, #132]	; 0x84
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004644:	f7fe f920 	bl	8002888 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 8004648:	0028      	movs	r0, r5
 800464a:	f001 fcef 	bl	800602c <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800464e:	2210      	movs	r2, #16
 8004650:	2100      	movs	r1, #0
 8004652:	a813      	add	r0, sp, #76	; 0x4c
 8004654:	f001 fdf6 	bl	8006244 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004658:	2208      	movs	r2, #8
 800465a:	2100      	movs	r1, #0
 800465c:	a80f      	add	r0, sp, #60	; 0x3c
 800465e:	f001 fdf1 	bl	8006244 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004662:	2100      	movs	r1, #0
 8004664:	221c      	movs	r2, #28
 8004666:	a81a      	add	r0, sp, #104	; 0x68
 8004668:	f001 fdec 	bl	8006244 <memset>
  htim2.Instance = TIM2;
 800466c:	2380      	movs	r3, #128	; 0x80
 800466e:	4e8a      	ldr	r6, [pc, #552]	; (8004898 <main+0x444>)
 8004670:	05db      	lsls	r3, r3, #23
  htim2.Init.Prescaler = 1;
 8004672:	464a      	mov	r2, r9
  htim2.Instance = TIM2;
 8004674:	6033      	str	r3, [r6, #0]
  htim2.Init.Period = 63;
 8004676:	233f      	movs	r3, #63	; 0x3f
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004678:	0030      	movs	r0, r6
  htim2.Init.Period = 63;
 800467a:	60f3      	str	r3, [r6, #12]
  htim2.Init.Prescaler = 1;
 800467c:	6072      	str	r2, [r6, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800467e:	60b4      	str	r4, [r6, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004680:	6134      	str	r4, [r6, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004682:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004684:	f7fd f8f4 	bl	8001870 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004688:	4642      	mov	r2, r8
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800468a:	a913      	add	r1, sp, #76	; 0x4c
 800468c:	0030      	movs	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800468e:	9213      	str	r2, [sp, #76]	; 0x4c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004690:	f7fd fe3e 	bl	8002310 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004694:	0030      	movs	r0, r6
 8004696:	f7fd f999 	bl	80019cc <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800469a:	a90f      	add	r1, sp, #60	; 0x3c
 800469c:	0030      	movs	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800469e:	940f      	str	r4, [sp, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046a0:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80046a2:	f7fe f8bd 	bl	8002820 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80046a6:	2204      	movs	r2, #4
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80046a8:	2302      	movs	r3, #2
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80046aa:	921e      	str	r2, [sp, #120]	; 0x78
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80046ac:	a91a      	add	r1, sp, #104	; 0x68
 80046ae:	3204      	adds	r2, #4
 80046b0:	0030      	movs	r0, r6
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80046b2:	971a      	str	r7, [sp, #104]	; 0x68
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80046b4:	931c      	str	r3, [sp, #112]	; 0x70
  sConfigOC.Pulse = 0;
 80046b6:	941b      	str	r4, [sp, #108]	; 0x6c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80046b8:	f7fd fcfc 	bl	80020b4 <HAL_TIM_PWM_ConfigChannel>
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_3);
 80046bc:	4651      	mov	r1, sl
 80046be:	6832      	ldr	r2, [r6, #0]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80046c0:	a81a      	add	r0, sp, #104	; 0x68
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_3);
 80046c2:	69d3      	ldr	r3, [r2, #28]
 80046c4:	438b      	bics	r3, r1
 80046c6:	61d3      	str	r3, [r2, #28]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80046c8:	2100      	movs	r1, #0
 80046ca:	2210      	movs	r2, #16
 80046cc:	f001 fdba 	bl	8006244 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046d0:	2208      	movs	r2, #8
 80046d2:	2100      	movs	r1, #0
 80046d4:	a813      	add	r0, sp, #76	; 0x4c
 80046d6:	f001 fdb5 	bl	8006244 <memset>
  htim3.Init.Prescaler = 23;
 80046da:	2117      	movs	r1, #23
  htim3.Instance = TIM3;
 80046dc:	4f6f      	ldr	r7, [pc, #444]	; (800489c <main+0x448>)
  htim3.Init.Period = 65535;
 80046de:	4870      	ldr	r0, [pc, #448]	; (80048a0 <main+0x44c>)
  htim3.Instance = TIM3;
 80046e0:	4b70      	ldr	r3, [pc, #448]	; (80048a4 <main+0x450>)
  htim3.Init.Period = 65535;
 80046e2:	4682      	mov	sl, r0
 80046e4:	60f8      	str	r0, [r7, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80046e6:	0038      	movs	r0, r7
  htim3.Instance = TIM3;
 80046e8:	603b      	str	r3, [r7, #0]
  htim3.Init.Prescaler = 23;
 80046ea:	6079      	str	r1, [r7, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046ec:	60bc      	str	r4, [r7, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046ee:	613c      	str	r4, [r7, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046f0:	61bc      	str	r4, [r7, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80046f2:	f7fd f8bd 	bl	8001870 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80046f6:	4640      	mov	r0, r8
 80046f8:	901a      	str	r0, [sp, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80046fa:	a81a      	add	r0, sp, #104	; 0x68
 80046fc:	0001      	movs	r1, r0
 80046fe:	0038      	movs	r0, r7
 8004700:	f7fd fe06 	bl	8002310 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004704:	a813      	add	r0, sp, #76	; 0x4c
 8004706:	0001      	movs	r1, r0
 8004708:	0038      	movs	r0, r7
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800470a:	9413      	str	r4, [sp, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800470c:	9414      	str	r4, [sp, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800470e:	f7fe f887 	bl	8002820 <HAL_TIMEx_MasterConfigSynchronization>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004712:	2214      	movs	r2, #20
 8004714:	2100      	movs	r1, #0
 8004716:	a81a      	add	r0, sp, #104	; 0x68
 8004718:	f001 fd94 	bl	8006244 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800471c:	2208      	movs	r2, #8
 800471e:	2100      	movs	r1, #0
 8004720:	a80f      	add	r0, sp, #60	; 0x3c
 8004722:	f001 fd8f 	bl	8006244 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004726:	2210      	movs	r2, #16
 8004728:	2100      	movs	r1, #0
 800472a:	a813      	add	r0, sp, #76	; 0x4c
 800472c:	f001 fd8a 	bl	8006244 <memset>
  htim15.Instance = TIM15;
 8004730:	485d      	ldr	r0, [pc, #372]	; (80048a8 <main+0x454>)
 8004732:	4b5e      	ldr	r3, [pc, #376]	; (80048ac <main+0x458>)
  htim15.Init.Prescaler = 0;
 8004734:	6044      	str	r4, [r0, #4]
  htim15.Instance = TIM15;
 8004736:	6003      	str	r3, [r0, #0]
  htim15.Init.Period = 0xffff;
 8004738:	4653      	mov	r3, sl
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800473a:	6084      	str	r4, [r0, #8]
  htim15.Init.Period = 0xffff;
 800473c:	60c3      	str	r3, [r0, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800473e:	6104      	str	r4, [r0, #16]
  htim15.Init.RepetitionCounter = 0;
 8004740:	6144      	str	r4, [r0, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004742:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8004744:	f7fd f894 	bl	8001870 <HAL_TIM_Base_Init>
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8004748:	4857      	ldr	r0, [pc, #348]	; (80048a8 <main+0x454>)
 800474a:	f7fd fa8b 	bl	8001c64 <HAL_TIM_IC_Init>
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800474e:	2350      	movs	r3, #80	; 0x50
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8004750:	2204      	movs	r2, #4
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8004752:	931b      	str	r3, [sp, #108]	; 0x6c
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8004754:	3b46      	subs	r3, #70	; 0x46
 8004756:	4698      	mov	r8, r3
 8004758:	931c      	str	r3, [sp, #112]	; 0x70
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 800475a:	ab1a      	add	r3, sp, #104	; 0x68
 800475c:	0019      	movs	r1, r3
 800475e:	4852      	ldr	r0, [pc, #328]	; (80048a8 <main+0x454>)
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8004760:	921a      	str	r2, [sp, #104]	; 0x68
  sSlaveConfig.TriggerFilter = 0;
 8004762:	941e      	str	r4, [sp, #120]	; 0x78
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 8004764:	f7fd fe7c 	bl	8002460 <HAL_TIM_SlaveConfigSynchro>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8004768:	ab0f      	add	r3, sp, #60	; 0x3c
 800476a:	0019      	movs	r1, r3
 800476c:	484e      	ldr	r0, [pc, #312]	; (80048a8 <main+0x454>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800476e:	940f      	str	r4, [sp, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004770:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8004772:	f7fe f855 	bl	8002820 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8004776:	4643      	mov	r3, r8
 8004778:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800477a:	464b      	mov	r3, r9
 800477c:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800477e:	ab13      	add	r3, sp, #76	; 0x4c
 8004780:	0019      	movs	r1, r3
 8004782:	2200      	movs	r2, #0
 8004784:	4848      	ldr	r0, [pc, #288]	; (80048a8 <main+0x454>)
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004786:	9415      	str	r4, [sp, #84]	; 0x54
  sConfigIC.ICFilter = 0;
 8004788:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800478a:	f7fd fbc3 	bl	8001f14 <HAL_TIM_IC_ConfigChannel>
  htim16.Instance = TIM16;
 800478e:	4a48      	ldr	r2, [pc, #288]	; (80048b0 <main+0x45c>)
 8004790:	4b48      	ldr	r3, [pc, #288]	; (80048b4 <main+0x460>)
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8004792:	0010      	movs	r0, r2
  htim16.Instance = TIM16;
 8004794:	6013      	str	r3, [r2, #0]
  htim16.Init.Period = 9000;
 8004796:	4b48      	ldr	r3, [pc, #288]	; (80048b8 <main+0x464>)
  htim16.Init.Prescaler = 0;
 8004798:	6054      	str	r4, [r2, #4]
  htim16.Init.Period = 9000;
 800479a:	60d3      	str	r3, [r2, #12]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800479c:	6094      	str	r4, [r2, #8]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800479e:	6114      	str	r4, [r2, #16]
  htim16.Init.RepetitionCounter = 0;
 80047a0:	6154      	str	r4, [r2, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80047a2:	6194      	str	r4, [r2, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80047a4:	f7fd f864 	bl	8001870 <HAL_TIM_Base_Init>
  htim14.Instance = TIM14;
 80047a8:	4844      	ldr	r0, [pc, #272]	; (80048bc <main+0x468>)
 80047aa:	4b45      	ldr	r3, [pc, #276]	; (80048c0 <main+0x46c>)
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047ac:	6084      	str	r4, [r0, #8]
  htim14.Instance = TIM14;
 80047ae:	6003      	str	r3, [r0, #0]
  htim14.Init.Prescaler = 10;
 80047b0:	4643      	mov	r3, r8
 80047b2:	6043      	str	r3, [r0, #4]
  htim14.Init.Period = 4000;
 80047b4:	23fa      	movs	r3, #250	; 0xfa
 80047b6:	011b      	lsls	r3, r3, #4
 80047b8:	60c3      	str	r3, [r0, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047ba:	6104      	str	r4, [r0, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80047bc:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80047be:	f7fd f857 	bl	8001870 <HAL_TIM_Base_Init>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047c2:	2208      	movs	r2, #8
 80047c4:	2100      	movs	r1, #0
 80047c6:	a81a      	add	r0, sp, #104	; 0x68
 80047c8:	f001 fd3c 	bl	8006244 <memset>
  htim6.Instance = TIM6;
 80047cc:	4b3d      	ldr	r3, [pc, #244]	; (80048c4 <main+0x470>)
  htim6.Init.Prescaler = 23;
 80047ce:	2117      	movs	r1, #23
  htim6.Instance = TIM6;
 80047d0:	4699      	mov	r9, r3
 80047d2:	464a      	mov	r2, r9
 80047d4:	4b3c      	ldr	r3, [pc, #240]	; (80048c8 <main+0x474>)
  htim6.Init.Prescaler = 23;
 80047d6:	6051      	str	r1, [r2, #4]
  htim6.Instance = TIM6;
 80047d8:	6013      	str	r3, [r2, #0]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047da:	6094      	str	r4, [r2, #8]
  htim6.Init.Prescaler = 23;
 80047dc:	464b      	mov	r3, r9
  htim6.Init.Period = 65535;
 80047de:	4652      	mov	r2, sl
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80047e0:	4648      	mov	r0, r9
  htim6.Init.Period = 65535;
 80047e2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80047e4:	619c      	str	r4, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80047e6:	f7fd f843 	bl	8001870 <HAL_TIM_Base_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80047ea:	a91a      	add	r1, sp, #104	; 0x68
 80047ec:	4648      	mov	r0, r9
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80047ee:	941a      	str	r4, [sp, #104]	; 0x68
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80047f0:	941b      	str	r4, [sp, #108]	; 0x6c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80047f2:	f7fe f815 	bl	8002820 <HAL_TIMEx_MasterConfigSynchronization>
  htim17.Instance = TIM17;
 80047f6:	4b35      	ldr	r3, [pc, #212]	; (80048cc <main+0x478>)
 80047f8:	4698      	mov	r8, r3
 80047fa:	4642      	mov	r2, r8
 80047fc:	4b34      	ldr	r3, [pc, #208]	; (80048d0 <main+0x47c>)
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047fe:	6094      	str	r4, [r2, #8]
  htim17.Instance = TIM17;
 8004800:	6013      	str	r3, [r2, #0]
  htim17.Init.Prescaler = 47;
 8004802:	232f      	movs	r3, #47	; 0x2f
 8004804:	6053      	str	r3, [r2, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004806:	4643      	mov	r3, r8
  htim17.Init.Period = 65535;
 8004808:	4652      	mov	r2, sl
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800480a:	4640      	mov	r0, r8
  htim17.Init.Period = 65535;
 800480c:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800480e:	611c      	str	r4, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8004810:	615c      	str	r4, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004812:	619c      	str	r4, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8004814:	f7fd f82c 	bl	8001870 <HAL_TIM_Base_Init>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8004818:	2100      	movs	r1, #0
 800481a:	0028      	movs	r0, r5
 800481c:	f7fd f948 	bl	8001ab0 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8004820:	2100      	movs	r1, #0
 8004822:	0028      	movs	r0, r5
 8004824:	f7fd ffe0 	bl	80027e8 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8004828:	2104      	movs	r1, #4
 800482a:	0028      	movs	r0, r5
 800482c:	f7fd f940 	bl	8001ab0 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8004830:	2104      	movs	r1, #4
 8004832:	0028      	movs	r0, r5
 8004834:	f7fd ffd8 	bl	80027e8 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8004838:	2108      	movs	r1, #8
 800483a:	0028      	movs	r0, r5
 800483c:	f7fd f938 	bl	8001ab0 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8004840:	2108      	movs	r1, #8
 8004842:	0028      	movs	r0, r5
 8004844:	f7fd ffd0 	bl	80027e8 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_Base_Start(&htim2);
 8004848:	0030      	movs	r0, r6
 800484a:	f7fd f883 	bl	8001954 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim6);           // commutation timer
 800484e:	4648      	mov	r0, r9
 8004850:	f7fd f880 	bl	8001954 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim17);
 8004854:	4640      	mov	r0, r8
 8004856:	f7fd f87d 	bl	8001954 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim3);
 800485a:	0038      	movs	r0, r7
 800485c:	f7fd f87a 	bl	8001954 <HAL_TIM_Base_Start>
	for ( int i = 0; i < vehicle_mode; i++){
 8004860:	4b1c      	ldr	r3, [pc, #112]	; (80048d4 <main+0x480>)
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d100      	bne.n	800486a <main+0x416>
 8004868:	e0ec      	b.n	8004a44 <main+0x5f0>
 800486a:	2300      	movs	r3, #0
 800486c:	4699      	mov	r9, r3
 800486e:	4b1a      	ldr	r3, [pc, #104]	; (80048d8 <main+0x484>)
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8004870:	465c      	mov	r4, fp
 8004872:	9302      	str	r3, [sp, #8]
 8004874:	e032      	b.n	80048dc <main+0x488>
 8004876:	46c0      	nop			; (mov r8, r8)
 8004878:	40021000 	.word	0x40021000
 800487c:	20000678 	.word	0x20000678
 8004880:	40012400 	.word	0x40012400
 8004884:	20000398 	.word	0x20000398
 8004888:	4001001c 	.word	0x4001001c
 800488c:	2000059c 	.word	0x2000059c
 8004890:	40012c00 	.word	0x40012c00
 8004894:	200000bc 	.word	0x200000bc
 8004898:	200005e8 	.word	0x200005e8
 800489c:	200003c8 	.word	0x200003c8
 80048a0:	0000ffff 	.word	0x0000ffff
 80048a4:	40000400 	.word	0x40000400
 80048a8:	200002ac 	.word	0x200002ac
 80048ac:	40014000 	.word	0x40014000
 80048b0:	200006fc 	.word	0x200006fc
 80048b4:	40014400 	.word	0x40014400
 80048b8:	00002328 	.word	0x00002328
 80048bc:	20000630 	.word	0x20000630
 80048c0:	40002000 	.word	0x40002000
 80048c4:	20000514 	.word	0x20000514
 80048c8:	40001000 	.word	0x40001000
 80048cc:	2000034c 	.word	0x2000034c
 80048d0:	40014800 	.word	0x40014800
 80048d4:	200000c4 	.word	0x200000c4
 80048d8:	2000001c 	.word	0x2000001c
 80048dc:	4b51      	ldr	r3, [pc, #324]	; (8004a24 <main+0x5d0>)
	TIM1->PSC = 75;
 80048de:	4f52      	ldr	r7, [pc, #328]	; (8004a28 <main+0x5d4>)
 80048e0:	9300      	str	r3, [sp, #0]
 80048e2:	2301      	movs	r3, #1
 80048e4:	469a      	mov	sl, r3
		GPIOA->BRR = GPIO_PIN_9;
 80048e6:	2380      	movs	r3, #128	; 0x80
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	4d50      	ldr	r5, [pc, #320]	; (8004a2c <main+0x5d8>)
 80048ec:	469b      	mov	fp, r3
 80048ee:	e060      	b.n	80049b2 <main+0x55e>
		if (!comp_pwm || prop_brake_active){
 80048f0:	9b00      	ldr	r3, [sp, #0]
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d000      	beq.n	80048fa <main+0x4a6>
 80048f8:	e08b      	b.n	8004a12 <main+0x5be>
 80048fa:	220c      	movs	r2, #12
 80048fc:	682b      	ldr	r3, [r5, #0]
 80048fe:	4393      	bics	r3, r2
 8004900:	3a04      	subs	r2, #4
 8004902:	4313      	orrs	r3, r2
 8004904:	602b      	str	r3, [r5, #0]
 8004906:	6822      	ldr	r2, [r4, #0]
 8004908:	4b49      	ldr	r3, [pc, #292]	; (8004a30 <main+0x5dc>)
	HAL_Delay(100);
 800490a:	2064      	movs	r0, #100	; 0x64
 800490c:	401a      	ands	r2, r3
 800490e:	4698      	mov	r8, r3
 8004910:	2380      	movs	r3, #128	; 0x80
 8004912:	039b      	lsls	r3, r3, #14
 8004914:	4313      	orrs	r3, r2
 8004916:	6023      	str	r3, [r4, #0]
 8004918:	f7fb fdb4 	bl	8000484 <HAL_Delay>
	TIM1->PSC = 50;
 800491c:	2332      	movs	r3, #50	; 0x32
	HAL_Delay(100);
 800491e:	2064      	movs	r0, #100	; 0x64
	TIM1->PSC = 50;
 8004920:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_Delay(100);
 8004922:	f7fb fdaf 	bl	8000484 <HAL_Delay>
	TIM1->PSC = 25;
 8004926:	2319      	movs	r3, #25
	HAL_Delay(100);
 8004928:	2064      	movs	r0, #100	; 0x64
	TIM1->PSC = 25;
 800492a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_Delay(100);
 800492c:	f7fb fdaa 	bl	8000484 <HAL_Delay>
 8004930:	2203      	movs	r2, #3
 8004932:	682b      	ldr	r3, [r5, #0]
	HAL_Delay(100);
 8004934:	2064      	movs	r0, #100	; 0x64
 8004936:	4393      	bics	r3, r2
 8004938:	4652      	mov	r2, sl
 800493a:	4313      	orrs	r3, r2
 800493c:	602b      	str	r3, [r5, #0]
		GPIOB->BRR = GPIO_PIN_0;
 800493e:	62aa      	str	r2, [r5, #40]	; 0x28
 8004940:	6823      	ldr	r3, [r4, #0]
 8004942:	4a3c      	ldr	r2, [pc, #240]	; (8004a34 <main+0x5e0>)
 8004944:	401a      	ands	r2, r3
 8004946:	2380      	movs	r3, #128	; 0x80
 8004948:	02db      	lsls	r3, r3, #11
 800494a:	4313      	orrs	r3, r2
 800494c:	6023      	str	r3, [r4, #0]
		GPIOA->BRR = GPIO_PIN_9;
 800494e:	465b      	mov	r3, fp
 8004950:	62a3      	str	r3, [r4, #40]	; 0x28
 8004952:	6823      	ldr	r3, [r4, #0]
 8004954:	4a38      	ldr	r2, [pc, #224]	; (8004a38 <main+0x5e4>)
 8004956:	401a      	ands	r2, r3
 8004958:	2380      	movs	r3, #128	; 0x80
 800495a:	01db      	lsls	r3, r3, #7
 800495c:	4313      	orrs	r3, r2
 800495e:	6023      	str	r3, [r4, #0]
		GPIOA->BRR = GPIO_PIN_7;
 8004960:	2380      	movs	r3, #128	; 0x80
 8004962:	62a3      	str	r3, [r4, #40]	; 0x28
 8004964:	6823      	ldr	r3, [r4, #0]
 8004966:	4a35      	ldr	r2, [pc, #212]	; (8004a3c <main+0x5e8>)
 8004968:	401a      	ands	r2, r3
 800496a:	2380      	movs	r3, #128	; 0x80
 800496c:	025b      	lsls	r3, r3, #9
 800496e:	4313      	orrs	r3, r2
 8004970:	6023      	str	r3, [r4, #0]
		GPIOA->BRR = GPIO_PIN_8;
 8004972:	2380      	movs	r3, #128	; 0x80
 8004974:	220c      	movs	r2, #12
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	62a3      	str	r3, [r4, #40]	; 0x28
 800497a:	682b      	ldr	r3, [r5, #0]
 800497c:	4393      	bics	r3, r2
 800497e:	3a08      	subs	r2, #8
 8004980:	4313      	orrs	r3, r2
 8004982:	602b      	str	r3, [r5, #0]
		GPIOB->BRR = GPIO_PIN_1;
 8004984:	2302      	movs	r3, #2
 8004986:	62ab      	str	r3, [r5, #40]	; 0x28
 8004988:	4643      	mov	r3, r8
 800498a:	6822      	ldr	r2, [r4, #0]
 800498c:	401a      	ands	r2, r3
 800498e:	2380      	movs	r3, #128	; 0x80
 8004990:	035b      	lsls	r3, r3, #13
 8004992:	4313      	orrs	r3, r2
 8004994:	6023      	str	r3, [r4, #0]
		GPIOA->BRR = GPIO_PIN_10;
 8004996:	2380      	movs	r3, #128	; 0x80
 8004998:	00db      	lsls	r3, r3, #3
 800499a:	62a3      	str	r3, [r4, #40]	; 0x28
	TIM1->PSC = 0;
 800499c:	2300      	movs	r3, #0
 800499e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_Delay(100);
 80049a0:	f7fb fd70 	bl	8000484 <HAL_Delay>
	for ( int i = 0; i < vehicle_mode; i++){
 80049a4:	2301      	movs	r3, #1
 80049a6:	469c      	mov	ip, r3
 80049a8:	4b25      	ldr	r3, [pc, #148]	; (8004a40 <main+0x5ec>)
 80049aa:	44e1      	add	r9, ip
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	454b      	cmp	r3, r9
 80049b0:	dd4c      	ble.n	8004a4c <main+0x5f8>
	TIM1->PSC = 75;
 80049b2:	234b      	movs	r3, #75	; 0x4b
 80049b4:	2203      	movs	r2, #3
 80049b6:	62bb      	str	r3, [r7, #40]	; 0x28
	TIM1->CCR1 = 5;
 80049b8:	3b46      	subs	r3, #70	; 0x46
 80049ba:	637b      	str	r3, [r7, #52]	; 0x34
	TIM1->CCR2 = 5;
 80049bc:	63bb      	str	r3, [r7, #56]	; 0x38
	TIM1->CCR3 = 5;
 80049be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049c0:	682b      	ldr	r3, [r5, #0]
 80049c2:	4393      	bics	r3, r2
 80049c4:	4652      	mov	r2, sl
 80049c6:	4313      	orrs	r3, r2
 80049c8:	602b      	str	r3, [r5, #0]
		GPIOB->BSRR = GPIO_PIN_0;
 80049ca:	2301      	movs	r3, #1
 80049cc:	61ab      	str	r3, [r5, #24]
 80049ce:	6823      	ldr	r3, [r4, #0]
 80049d0:	4a18      	ldr	r2, [pc, #96]	; (8004a34 <main+0x5e0>)
 80049d2:	401a      	ands	r2, r3
 80049d4:	2380      	movs	r3, #128	; 0x80
 80049d6:	02db      	lsls	r3, r3, #11
 80049d8:	4313      	orrs	r3, r2
 80049da:	6023      	str	r3, [r4, #0]
		GPIOA->BRR = GPIO_PIN_9;
 80049dc:	2380      	movs	r3, #128	; 0x80
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80049e2:	6823      	ldr	r3, [r4, #0]
 80049e4:	4a14      	ldr	r2, [pc, #80]	; (8004a38 <main+0x5e4>)
 80049e6:	401a      	ands	r2, r3
 80049e8:	2380      	movs	r3, #128	; 0x80
 80049ea:	01db      	lsls	r3, r3, #7
 80049ec:	4313      	orrs	r3, r2
 80049ee:	6023      	str	r3, [r4, #0]
		GPIOA->BRR = GPIO_PIN_7;
 80049f0:	2380      	movs	r3, #128	; 0x80
 80049f2:	62a3      	str	r3, [r4, #40]	; 0x28
 80049f4:	6823      	ldr	r3, [r4, #0]
 80049f6:	4a11      	ldr	r2, [pc, #68]	; (8004a3c <main+0x5e8>)
 80049f8:	401a      	ands	r2, r3
 80049fa:	2380      	movs	r3, #128	; 0x80
 80049fc:	025b      	lsls	r3, r3, #9
 80049fe:	4313      	orrs	r3, r2
 8004a00:	6023      	str	r3, [r4, #0]
		GPIOA->BRR = GPIO_PIN_8;
 8004a02:	2380      	movs	r3, #128	; 0x80
 8004a04:	005b      	lsls	r3, r3, #1
 8004a06:	62a3      	str	r3, [r4, #40]	; 0x28
		if (!comp_pwm || prop_brake_active){
 8004a08:	9b02      	ldr	r3, [sp, #8]
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d000      	beq.n	8004a12 <main+0x5be>
 8004a10:	e76e      	b.n	80048f0 <main+0x49c>
 8004a12:	220c      	movs	r2, #12
 8004a14:	682b      	ldr	r3, [r5, #0]
 8004a16:	4393      	bics	r3, r2
 8004a18:	3a08      	subs	r2, #8
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	602b      	str	r3, [r5, #0]
			GPIOB->BRR = GPIO_PIN_1;
 8004a1e:	2302      	movs	r3, #2
 8004a20:	62ab      	str	r3, [r5, #40]	; 0x28
 8004a22:	e770      	b.n	8004906 <main+0x4b2>
 8004a24:	2000020c 	.word	0x2000020c
 8004a28:	40012c00 	.word	0x40012c00
 8004a2c:	48000400 	.word	0x48000400
 8004a30:	ffcfffff 	.word	0xffcfffff
 8004a34:	fff3ffff 	.word	0xfff3ffff
 8004a38:	ffff3fff 	.word	0xffff3fff
 8004a3c:	fffcffff 	.word	0xfffcffff
 8004a40:	200000c4 	.word	0x200000c4
 8004a44:	4beb      	ldr	r3, [pc, #940]	; (8004df4 <main+0x9a0>)
 8004a46:	9302      	str	r3, [sp, #8]
 8004a48:	4beb      	ldr	r3, [pc, #940]	; (8004df8 <main+0x9a4>)
 8004a4a:	9300      	str	r3, [sp, #0]
  hiwdg.Instance = IWDG;
 8004a4c:	4aeb      	ldr	r2, [pc, #940]	; (8004dfc <main+0x9a8>)
 8004a4e:	4bec      	ldr	r3, [pc, #944]	; (8004e00 <main+0x9ac>)
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8004a50:	0010      	movs	r0, r2
  hiwdg.Instance = IWDG;
 8004a52:	6013      	str	r3, [r2, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_16;
 8004a54:	2302      	movs	r3, #2
 8004a56:	6053      	str	r3, [r2, #4]
  hiwdg.Init.Window = 4095;
 8004a58:	4bea      	ldr	r3, [pc, #936]	; (8004e04 <main+0x9b0>)
 8004a5a:	60d3      	str	r3, [r2, #12]
  hiwdg.Init.Reload = 4000;
 8004a5c:	3b5f      	subs	r3, #95	; 0x5f
 8004a5e:	6093      	str	r3, [r2, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8004a60:	f7fc fbc6 	bl	80011f0 <HAL_IWDG_Init>
	if (vehicle_mode == 1){                    // quad single direction
 8004a64:	4be8      	ldr	r3, [pc, #928]	; (8004e08 <main+0x9b4>)
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d101      	bne.n	8004a70 <main+0x61c>
 8004a6c:	f000 ffdd 	bl	8005a2a <main+0x15d6>
	if (vehicle_mode == 2){                   // crawler or thruster
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d101      	bne.n	8004a78 <main+0x624>
 8004a74:	f000 ffc9 	bl	8005a0a <main+0x15b6>
	if (vehicle_mode == 3){                 // rc car 50 percent brake on reverse.
 8004a78:	2b03      	cmp	r3, #3
 8004a7a:	d101      	bne.n	8004a80 <main+0x62c>
 8004a7c:	f000 ffaf 	bl	80059de <main+0x158a>
	if (vehicle_mode == 4){                 // rc car 50 percent brake on reverse.
 8004a80:	2b04      	cmp	r3, #4
 8004a82:	d101      	bne.n	8004a88 <main+0x634>
 8004a84:	f000 ff2b 	bl	80058de <main+0x148a>
 8004a88:	4be0      	ldr	r3, [pc, #896]	; (8004e0c <main+0x9b8>)
 8004a8a:	9301      	str	r3, [sp, #4]
 8004a8c:	4be0      	ldr	r3, [pc, #896]	; (8004e10 <main+0x9bc>)
 8004a8e:	9306      	str	r3, [sp, #24]
 8004a90:	4be0      	ldr	r3, [pc, #896]	; (8004e14 <main+0x9c0>)
 8004a92:	9304      	str	r3, [sp, #16]
 8004a94:	4be0      	ldr	r3, [pc, #896]	; (8004e18 <main+0x9c4>)
 8004a96:	9307      	str	r3, [sp, #28]
		if(HAL_COMP_Start_IT(&hcomp1) != HAL_OK)
 8004a98:	48e0      	ldr	r0, [pc, #896]	; (8004e1c <main+0x9c8>)
 8004a9a:	f7fb ff4b 	bl	8000934 <HAL_COMP_Start_IT>
	if(bi_direction){
 8004a9e:	9b01      	ldr	r3, [sp, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	9303      	str	r3, [sp, #12]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d101      	bne.n	8004aac <main+0x658>
 8004aa8:	f000 ff0c 	bl	80058c4 <main+0x1470>
		newinput = 1001;
 8004aac:	4bdc      	ldr	r3, [pc, #880]	; (8004e20 <main+0x9cc>)
 8004aae:	001a      	movs	r2, r3
 8004ab0:	9308      	str	r3, [sp, #32]
 8004ab2:	4bdc      	ldr	r3, [pc, #880]	; (8004e24 <main+0x9d0>)
 8004ab4:	6013      	str	r3, [r2, #0]
	if (dir_reversed == 1){
 8004ab6:	4bdc      	ldr	r3, [pc, #880]	; (8004e28 <main+0x9d4>)
 8004ab8:	4fdc      	ldr	r7, [pc, #880]	; (8004e2c <main+0x9d8>)
 8004aba:	469b      	mov	fp, r3
 8004abc:	681b      	ldr	r3, [r3, #0]
	TIM1->CCR4 = 800;
 8004abe:	21c8      	movs	r1, #200	; 0xc8
	if (dir_reversed == 1){
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	1e5a      	subs	r2, r3, #1
 8004ac4:	4193      	sbcs	r3, r2
 8004ac6:	603b      	str	r3, [r7, #0]
	TIM1->CCR1 = 1;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	4ad9      	ldr	r2, [pc, #868]	; (8004e30 <main+0x9dc>)
	TIM1->CCR4 = 800;
 8004acc:	0089      	lsls	r1, r1, #2
	TIM1->CCR1 = 1;
 8004ace:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2 = 1;
 8004ad0:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1->CCR3 = 1;
 8004ad2:	63d3      	str	r3, [r2, #60]	; 0x3c
	TIM1->CCR4 = 800;
 8004ad4:	6411      	str	r1, [r2, #64]	; 0x40
	if (!brushed_mode && bi_polar){          // sanity check, turn off bipolar pwm if brushed mode is not selected
 8004ad6:	49d7      	ldr	r1, [pc, #860]	; (8004e34 <main+0x9e0>)
 8004ad8:	4ad7      	ldr	r2, [pc, #860]	; (8004e38 <main+0x9e4>)
 8004ada:	7809      	ldrb	r1, [r1, #0]
 8004adc:	7812      	ldrb	r2, [r2, #0]
 8004ade:	2900      	cmp	r1, #0
 8004ae0:	d001      	beq.n	8004ae6 <main+0x692>
 8004ae2:	f000 fee7 	bl	80058b4 <main+0x1460>
 8004ae6:	2a00      	cmp	r2, #0
 8004ae8:	d001      	beq.n	8004aee <main+0x69a>
		bi_polar = 0;
 8004aea:	4bd3      	ldr	r3, [pc, #844]	; (8004e38 <main+0x9e4>)
 8004aec:	7019      	strb	r1, [r3, #0]
	 phase_A_position = 0;
 8004aee:	2200      	movs	r2, #0
 8004af0:	4bd2      	ldr	r3, [pc, #840]	; (8004e3c <main+0x9e8>)
 8004af2:	601a      	str	r2, [r3, #0]
	  phase_B_position = 119;
 8004af4:	4bd2      	ldr	r3, [pc, #840]	; (8004e40 <main+0x9ec>)
 8004af6:	3277      	adds	r2, #119	; 0x77
 8004af8:	601a      	str	r2, [r3, #0]
	  phase_C_position = 239;
 8004afa:	4bd2      	ldr	r3, [pc, #840]	; (8004e44 <main+0x9f0>)
 8004afc:	3278      	adds	r2, #120	; 0x78
 8004afe:	601a      	str	r2, [r3, #0]
	  if(vehicle_mode != 2){
 8004b00:	4bc1      	ldr	r3, [pc, #772]	; (8004e08 <main+0x9b4>)
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d101      	bne.n	8004b0c <main+0x6b8>
 8004b08:	f000 fee0 	bl	80058cc <main+0x1478>
 8004b0c:	4bce      	ldr	r3, [pc, #824]	; (8004e48 <main+0x9f4>)
 8004b0e:	9305      	str	r3, [sp, #20]
		  sine_mode_range = 0;
 8004b10:	2300      	movs	r3, #0
 8004b12:	9a05      	ldr	r2, [sp, #20]
 8004b14:	7013      	strb	r3, [r2, #0]
	  DMA1_Channel2->CCR = 0xa90; // for output compare
 8004b16:	22a9      	movs	r2, #169	; 0xa9
 8004b18:	4bcc      	ldr	r3, [pc, #816]	; (8004e4c <main+0x9f8>)
 8004b1a:	0112      	lsls	r2, r2, #4
 8004b1c:	601a      	str	r2, [r3, #0]
	   DMA1_Channel1->CCR = 0xa91;     // for output compare
 8004b1e:	4bcc      	ldr	r3, [pc, #816]	; (8004e50 <main+0x9fc>)
 8004b20:	4acc      	ldr	r2, [pc, #816]	; (8004e54 <main+0xa00>)
				count = 0;
 8004b22:	2500      	movs	r5, #0
	   DMA1_Channel1->CCR = 0xa91;     // for output compare
 8004b24:	601a      	str	r2, [r3, #0]
	   DMA1_Channel5->CCR = 0x981;    // for input capture
 8004b26:	4bcc      	ldr	r3, [pc, #816]	; (8004e58 <main+0xa04>)
 8004b28:	4acc      	ldr	r2, [pc, #816]	; (8004e5c <main+0xa08>)
 8004b2a:	601a      	str	r2, [r3, #0]
	   __HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_UPDATE);
 8004b2c:	2280      	movs	r2, #128	; 0x80
 8004b2e:	6833      	ldr	r3, [r6, #0]
 8004b30:	0052      	lsls	r2, r2, #1
 8004b32:	68d9      	ldr	r1, [r3, #12]
 8004b34:	4eca      	ldr	r6, [pc, #808]	; (8004e60 <main+0xa0c>)
 8004b36:	430a      	orrs	r2, r1
 8004b38:	60da      	str	r2, [r3, #12]
	   __HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC3);
 8004b3a:	2280      	movs	r2, #128	; 0x80
 8004b3c:	68d9      	ldr	r1, [r3, #12]
 8004b3e:	0112      	lsls	r2, r2, #4
 8004b40:	430a      	orrs	r2, r1
 8004b42:	60da      	str	r2, [r3, #12]
 8004b44:	4bc7      	ldr	r3, [pc, #796]	; (8004e64 <main+0xa10>)
 8004b46:	4699      	mov	r9, r3
 8004b48:	4bc7      	ldr	r3, [pc, #796]	; (8004e68 <main+0xa14>)
 8004b4a:	4698      	mov	r8, r3
 8004b4c:	4bc7      	ldr	r3, [pc, #796]	; (8004e6c <main+0xa18>)
 8004b4e:	469a      	mov	sl, r3
			if (count > 100000) {
 8004b50:	4ac7      	ldr	r2, [pc, #796]	; (8004e70 <main+0xa1c>)
 8004b52:	4bc8      	ldr	r3, [pc, #800]	; (8004e74 <main+0xa20>)
 8004b54:	6812      	ldr	r2, [r2, #0]
 8004b56:	9203      	str	r2, [sp, #12]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	dd01      	ble.n	8004b60 <main+0x70c>
				count = 0;
 8004b5c:	4bc4      	ldr	r3, [pc, #784]	; (8004e70 <main+0xa1c>)
 8004b5e:	601d      	str	r5, [r3, #0]
			compit = 0;
 8004b60:	4bc5      	ldr	r3, [pc, #788]	; (8004e78 <main+0xa24>)
			if (HAL_IWDG_Refresh(&hiwdg) != HAL_OK)              // watchdog refresh
 8004b62:	48a6      	ldr	r0, [pc, #664]	; (8004dfc <main+0x9a8>)
			compit = 0;
 8004b64:	701d      	strb	r5, [r3, #0]
			if (HAL_IWDG_Refresh(&hiwdg) != HAL_OK)              // watchdog refresh
 8004b66:	f7fc fb71 	bl	800124c <HAL_IWDG_Refresh>
			control_loop_count++;
 8004b6a:	4bc4      	ldr	r3, [pc, #784]	; (8004e7c <main+0xa28>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	9303      	str	r3, [sp, #12]
 8004b70:	3301      	adds	r3, #1
			if (control_loop_count > 2) {
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	dd00      	ble.n	8004b78 <main+0x724>
 8004b76:	e28b      	b.n	8005090 <main+0xc3c>
			control_loop_count++;
 8004b78:	4ac0      	ldr	r2, [pc, #768]	; (8004e7c <main+0xa28>)
 8004b7a:	6013      	str	r3, [r2, #0]
	if(brushed_mode){
 8004b7c:	4bad      	ldr	r3, [pc, #692]	; (8004e34 <main+0x9e0>)
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d063      	beq.n	8004c4c <main+0x7f8>
	dither_count++;
 8004b84:	4bbe      	ldr	r3, [pc, #760]	; (8004e80 <main+0xa2c>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	9303      	str	r3, [sp, #12]
 8004b8a:	3301      	adds	r3, #1
	if(dither_count > 2){
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	dd00      	ble.n	8004b92 <main+0x73e>
 8004b90:	e3d8      	b.n	8005344 <main+0xef0>
	dither_count++;
 8004b92:	4abb      	ldr	r2, [pc, #748]	; (8004e80 <main+0xa2c>)
 8004b94:	6013      	str	r3, [r2, #0]
	if(input > 1990){               // keep slightly below 100 percent duty cycle for some drivers
 8004b96:	4bbb      	ldr	r3, [pc, #748]	; (8004e84 <main+0xa30>)
 8004b98:	6832      	ldr	r2, [r6, #0]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	dd00      	ble.n	8004ba0 <main+0x74c>
		input = 1990;
 8004b9e:	6033      	str	r3, [r6, #0]
	bemf_counts = 200;
 8004ba0:	23c8      	movs	r3, #200	; 0xc8
 8004ba2:	4642      	mov	r2, r8
 8004ba4:	6013      	str	r3, [r2, #0]
	if(!brushed_direction_set && !prop_brake_active){
 8004ba6:	4bb8      	ldr	r3, [pc, #736]	; (8004e88 <main+0xa34>)
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d14e      	bne.n	8004c4c <main+0x7f8>
 8004bae:	9b00      	ldr	r3, [sp, #0]
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d14a      	bne.n	8004c4c <main+0x7f8>
	if (!bi_polar){
 8004bb6:	4ba0      	ldr	r3, [pc, #640]	; (8004e38 <main+0x9e4>)
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <main+0x76e>
 8004bbe:	f000 fe6b 	bl	8005898 <main+0x1444>
 8004bc2:	9b02      	ldr	r3, [sp, #8]
 8004bc4:	7819      	ldrb	r1, [r3, #0]
		if(forward){
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d101      	bne.n	8004bd0 <main+0x77c>
 8004bcc:	f000 fe29 	bl	8005822 <main+0x13ce>
		if(!comp_pwm  || prop_brake_active){            // for future
 8004bd0:	2900      	cmp	r1, #0
 8004bd2:	d101      	bne.n	8004bd8 <main+0x784>
 8004bd4:	f000 fe1b 	bl	800580e <main+0x13ba>
 8004bd8:	2203      	movs	r2, #3
 8004bda:	49ac      	ldr	r1, [pc, #688]	; (8004e8c <main+0xa38>)
 8004bdc:	680b      	ldr	r3, [r1, #0]
 8004bde:	4393      	bics	r3, r2
 8004be0:	001a      	movs	r2, r3
 8004be2:	2302      	movs	r3, #2
 8004be4:	4313      	orrs	r3, r2
 8004be6:	600b      	str	r3, [r1, #0]
 8004be8:	2390      	movs	r3, #144	; 0x90
 8004bea:	05db      	lsls	r3, r3, #23
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	49a8      	ldr	r1, [pc, #672]	; (8004e90 <main+0xa3c>)
 8004bf0:	200c      	movs	r0, #12
 8004bf2:	4011      	ands	r1, r2
 8004bf4:	2280      	movs	r2, #128	; 0x80
 8004bf6:	0312      	lsls	r2, r2, #12
 8004bf8:	430a      	orrs	r2, r1
 8004bfa:	601a      	str	r2, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	49a5      	ldr	r1, [pc, #660]	; (8004e94 <main+0xa40>)
 8004c00:	4011      	ands	r1, r2
 8004c02:	2280      	movs	r2, #128	; 0x80
 8004c04:	01d2      	lsls	r2, r2, #7
 8004c06:	430a      	orrs	r2, r1
 8004c08:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_7;
 8004c0a:	2280      	movs	r2, #128	; 0x80
 8004c0c:	629a      	str	r2, [r3, #40]	; 0x28
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	49a1      	ldr	r1, [pc, #644]	; (8004e98 <main+0xa44>)
 8004c12:	4011      	ands	r1, r2
 8004c14:	2280      	movs	r2, #128	; 0x80
 8004c16:	0252      	lsls	r2, r2, #9
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_8;
 8004c1c:	2280      	movs	r2, #128	; 0x80
 8004c1e:	499b      	ldr	r1, [pc, #620]	; (8004e8c <main+0xa38>)
 8004c20:	0052      	lsls	r2, r2, #1
 8004c22:	629a      	str	r2, [r3, #40]	; 0x28
 8004c24:	680a      	ldr	r2, [r1, #0]
 8004c26:	4382      	bics	r2, r0
 8004c28:	3808      	subs	r0, #8
 8004c2a:	4302      	orrs	r2, r0
 8004c2c:	600a      	str	r2, [r1, #0]
		GPIOB->BSRR = GPIO_PIN_1;
 8004c2e:	2202      	movs	r2, #2
 8004c30:	618a      	str	r2, [r1, #24]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	4999      	ldr	r1, [pc, #612]	; (8004e9c <main+0xa48>)
 8004c36:	4011      	ands	r1, r2
 8004c38:	2280      	movs	r2, #128	; 0x80
 8004c3a:	0352      	lsls	r2, r2, #13
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_10;
 8004c40:	2280      	movs	r2, #128	; 0x80
 8004c42:	00d2      	lsls	r2, r2, #3
 8004c44:	629a      	str	r2, [r3, #40]	; 0x28
			brushed_direction_set = 1;
 8004c46:	2301      	movs	r3, #1
 8004c48:	4a8f      	ldr	r2, [pc, #572]	; (8004e88 <main+0xa34>)
 8004c4a:	7013      	strb	r3, [r2, #0]
			advance_multiplier = map((commutation_interval), 150, 3000, max_advance_multiplier, min_advance_multiplier);
 8004c4c:	4b94      	ldr	r3, [pc, #592]	; (8004ea0 <main+0xa4c>)
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8004c4e:	4a95      	ldr	r2, [pc, #596]	; (8004ea4 <main+0xa50>)
			advance_multiplier = map((commutation_interval), 150, 3000, max_advance_multiplier, min_advance_multiplier);
 8004c50:	681c      	ldr	r4, [r3, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8004c52:	4b95      	ldr	r3, [pc, #596]	; (8004ea8 <main+0xa54>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4293      	cmp	r3, r2
 8004c58:	dc00      	bgt.n	8004c5c <main+0x808>
 8004c5a:	e214      	b.n	8005086 <main+0xc32>
 8004c5c:	0013      	movs	r3, r2
 8004c5e:	4a93      	ldr	r2, [pc, #588]	; (8004eac <main+0xa58>)
 8004c60:	3b96      	subs	r3, #150	; 0x96
 8004c62:	6812      	ldr	r2, [r2, #0]
 8004c64:	4992      	ldr	r1, [pc, #584]	; (8004eb0 <main+0xa5c>)
 8004c66:	1b10      	subs	r0, r2, r4
 8004c68:	4358      	muls	r0, r3
 8004c6a:	9203      	str	r2, [sp, #12]
 8004c6c:	f7fb fad6 	bl	800021c <__divsi3>
			advance_multiplier = map((commutation_interval), 150, 3000, max_advance_multiplier, min_advance_multiplier);
 8004c70:	4b90      	ldr	r3, [pc, #576]	; (8004eb4 <main+0xa60>)
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8004c72:	1904      	adds	r4, r0, r4
			advance_multiplier = map((commutation_interval), 150, 3000, max_advance_multiplier, min_advance_multiplier);
 8004c74:	601c      	str	r4, [r3, #0]
			if (inputSet == 0) {
 8004c76:	4b90      	ldr	r3, [pc, #576]	; (8004eb8 <main+0xa64>)
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d104      	bne.n	8004c88 <main+0x834>
				HAL_Delay(10);
 8004c7e:	200a      	movs	r0, #10
 8004c80:	f7fb fc00 	bl	8000484 <HAL_Delay>
				detectInput();
 8004c84:	f7fe ff1c 	bl	8003ac0 <detectInput>
			if (!armed) {
 8004c88:	4b8c      	ldr	r3, [pc, #560]	; (8004ebc <main+0xa68>)
 8004c8a:	6834      	ldr	r4, [r6, #0]
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d109      	bne.n	8004ca6 <main+0x852>
					if ((inputSet == 1) && (input == 0)) {
 8004c92:	4b89      	ldr	r3, [pc, #548]	; (8004eb8 <main+0xa64>)
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	9303      	str	r3, [sp, #12]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d100      	bne.n	8004c9e <main+0x84a>
 8004c9c:	e3f0      	b.n	8005480 <main+0x102c>
					if (input > 0) {
 8004c9e:	2c00      	cmp	r4, #0
 8004ca0:	dd01      	ble.n	8004ca6 <main+0x852>
						armedcount = 0;
 8004ca2:	4b87      	ldr	r3, [pc, #540]	; (8004ec0 <main+0xa6c>)
 8004ca4:	601d      	str	r5, [r3, #0]
			if ((input >= (100 - (52-sine_mode_range)-(10*running))) && (armed == 1)) {
 8004ca6:	4b87      	ldr	r3, [pc, #540]	; (8004ec4 <main+0xa70>)
 8004ca8:	6819      	ldr	r1, [r3, #0]
 8004caa:	9b05      	ldr	r3, [sp, #20]
 8004cac:	9103      	str	r1, [sp, #12]
 8004cae:	781a      	ldrb	r2, [r3, #0]
 8004cb0:	074b      	lsls	r3, r1, #29
 8004cb2:	1a5b      	subs	r3, r3, r1
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	1a5b      	subs	r3, r3, r1
 8004cb8:	3230      	adds	r2, #48	; 0x30
 8004cba:	005b      	lsls	r3, r3, #1
 8004cbc:	18d3      	adds	r3, r2, r3
 8004cbe:	42a3      	cmp	r3, r4
 8004cc0:	dc05      	bgt.n	8004cce <main+0x87a>
 8004cc2:	4b7e      	ldr	r3, [pc, #504]	; (8004ebc <main+0xa68>)
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d101      	bne.n	8004cce <main+0x87a>
 8004cca:	f000 fc57 	bl	800557c <main+0x1128>
			signaltimeout++;
 8004cce:	4b7e      	ldr	r3, [pc, #504]	; (8004ec8 <main+0xa74>)
 8004cd0:	4a7d      	ldr	r2, [pc, #500]	; (8004ec8 <main+0xa74>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	6013      	str	r3, [r2, #0]
			if (signaltimeout > signal_timeout_threshold) {
 8004cd8:	4a7c      	ldr	r2, [pc, #496]	; (8004ecc <main+0xa78>)
 8004cda:	6812      	ldr	r2, [r2, #0]
 8004cdc:	9203      	str	r2, [sp, #12]
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	dd00      	ble.n	8004ce4 <main+0x890>
 8004ce2:	e336      	b.n	8005352 <main+0xefe>
			if (input <= 47) {
 8004ce4:	6833      	ldr	r3, [r6, #0]
 8004ce6:	2b2f      	cmp	r3, #47	; 0x2f
 8004ce8:	dd00      	ble.n	8004cec <main+0x898>
 8004cea:	e11d      	b.n	8004f28 <main+0xad4>
				sine_mode = 0;
 8004cec:	4b78      	ldr	r3, [pc, #480]	; (8004ed0 <main+0xa7c>)
 8004cee:	601d      	str	r5, [r3, #0]
		        if((brushed_mode) && (brushed_direction_set)){
 8004cf0:	4b50      	ldr	r3, [pc, #320]	; (8004e34 <main+0x9e0>)
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d005      	beq.n	8004d04 <main+0x8b0>
 8004cf8:	4b63      	ldr	r3, [pc, #396]	; (8004e88 <main+0xa34>)
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d001      	beq.n	8004d04 <main+0x8b0>
		        	brushed_direction_set = 0;
 8004d00:	4b61      	ldr	r3, [pc, #388]	; (8004e88 <main+0xa34>)
 8004d02:	701d      	strb	r5, [r3, #0]
				if (brake == 1){
 8004d04:	9b06      	ldr	r3, [sp, #24]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d100      	bne.n	8004d0e <main+0x8ba>
 8004d0c:	e236      	b.n	800517c <main+0xd28>
				forcedcomcount = 0;
 8004d0e:	4a71      	ldr	r2, [pc, #452]	; (8004ed4 <main+0xa80>)
 8004d10:	6015      	str	r5, [r2, #0]
				started = 0;
 8004d12:	4a71      	ldr	r2, [pc, #452]	; (8004ed8 <main+0xa84>)
 8004d14:	6015      	str	r5, [r2, #0]
				if (!brake && !prop_brake_active) {
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d000      	beq.n	8004d1c <main+0x8c8>
 8004d1a:	e238      	b.n	800518e <main+0xd3a>
 8004d1c:	9b00      	ldr	r3, [sp, #0]
 8004d1e:	781c      	ldrb	r4, [r3, #0]
 8004d20:	2c00      	cmp	r4, #0
 8004d22:	d138      	bne.n	8004d96 <main+0x942>
 8004d24:	2103      	movs	r1, #3
 8004d26:	4a59      	ldr	r2, [pc, #356]	; (8004e8c <main+0xa38>)
 8004d28:	4859      	ldr	r0, [pc, #356]	; (8004e90 <main+0xa3c>)
 8004d2a:	6813      	ldr	r3, [r2, #0]
 8004d2c:	438b      	bics	r3, r1
 8004d2e:	3902      	subs	r1, #2
 8004d30:	430b      	orrs	r3, r1
 8004d32:	6013      	str	r3, [r2, #0]
 8004d34:	2390      	movs	r3, #144	; 0x90
		GPIOB->BRR = GPIO_PIN_0;
 8004d36:	6291      	str	r1, [r2, #40]	; 0x28
 8004d38:	05db      	lsls	r3, r3, #23
 8004d3a:	6819      	ldr	r1, [r3, #0]
 8004d3c:	4008      	ands	r0, r1
 8004d3e:	2180      	movs	r1, #128	; 0x80
 8004d40:	02c9      	lsls	r1, r1, #11
 8004d42:	4301      	orrs	r1, r0
 8004d44:	6019      	str	r1, [r3, #0]
		GPIOA->BRR = GPIO_PIN_9;
 8004d46:	2180      	movs	r1, #128	; 0x80
 8004d48:	0089      	lsls	r1, r1, #2
 8004d4a:	6299      	str	r1, [r3, #40]	; 0x28
 8004d4c:	6819      	ldr	r1, [r3, #0]
 8004d4e:	4851      	ldr	r0, [pc, #324]	; (8004e94 <main+0xa40>)
 8004d50:	4008      	ands	r0, r1
 8004d52:	2180      	movs	r1, #128	; 0x80
 8004d54:	01c9      	lsls	r1, r1, #7
 8004d56:	4301      	orrs	r1, r0
 8004d58:	6019      	str	r1, [r3, #0]
		GPIOA->BRR = GPIO_PIN_7;
 8004d5a:	2180      	movs	r1, #128	; 0x80
 8004d5c:	6299      	str	r1, [r3, #40]	; 0x28
 8004d5e:	6819      	ldr	r1, [r3, #0]
 8004d60:	484d      	ldr	r0, [pc, #308]	; (8004e98 <main+0xa44>)
 8004d62:	4008      	ands	r0, r1
 8004d64:	2180      	movs	r1, #128	; 0x80
 8004d66:	0249      	lsls	r1, r1, #9
 8004d68:	4301      	orrs	r1, r0
 8004d6a:	6019      	str	r1, [r3, #0]
		GPIOA->BRR = GPIO_PIN_8;
 8004d6c:	2180      	movs	r1, #128	; 0x80
 8004d6e:	200c      	movs	r0, #12
 8004d70:	0049      	lsls	r1, r1, #1
 8004d72:	6299      	str	r1, [r3, #40]	; 0x28
 8004d74:	6811      	ldr	r1, [r2, #0]
 8004d76:	4381      	bics	r1, r0
 8004d78:	3808      	subs	r0, #8
 8004d7a:	4301      	orrs	r1, r0
 8004d7c:	6011      	str	r1, [r2, #0]
		GPIOB->BRR = GPIO_PIN_1;
 8004d7e:	2102      	movs	r1, #2
 8004d80:	6291      	str	r1, [r2, #40]	; 0x28
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	4945      	ldr	r1, [pc, #276]	; (8004e9c <main+0xa48>)
 8004d86:	4011      	ands	r1, r2
 8004d88:	2280      	movs	r2, #128	; 0x80
 8004d8a:	0352      	lsls	r2, r2, #13
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_10;
 8004d90:	2280      	movs	r2, #128	; 0x80
 8004d92:	00d2      	lsls	r2, r2, #3
 8004d94:	629a      	str	r2, [r3, #40]	; 0x28
				duty_cycle = 0;
 8004d96:	4653      	mov	r3, sl
 8004d98:	601d      	str	r5, [r3, #0]
 8004d9a:	9b04      	ldr	r3, [sp, #16]
 8004d9c:	7818      	ldrb	r0, [r3, #0]
				if ((brake || tempbrake)&& (!bi_polar)) {
 8004d9e:	4b4f      	ldr	r3, [pc, #316]	; (8004edc <main+0xa88>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	9303      	str	r3, [sp, #12]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d000      	beq.n	8004daa <main+0x956>
 8004da8:	e1f5      	b.n	8005196 <main+0xd42>
				if (prop_brake && prop_brake_active) {
 8004daa:	2800      	cmp	r0, #0
 8004dac:	d100      	bne.n	8004db0 <main+0x95c>
 8004dae:	e0b0      	b.n	8004f12 <main+0xabe>
 8004db0:	2c00      	cmp	r4, #0
 8004db2:	d100      	bne.n	8004db6 <main+0x962>
 8004db4:	e0ad      	b.n	8004f12 <main+0xabe>
					duty_cycle = prop_brake_strength;
 8004db6:	9b07      	ldr	r3, [sp, #28]
 8004db8:	2103      	movs	r1, #3
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4834      	ldr	r0, [pc, #208]	; (8004e90 <main+0xa3c>)
 8004dbe:	9303      	str	r3, [sp, #12]
 8004dc0:	4653      	mov	r3, sl
 8004dc2:	9a03      	ldr	r2, [sp, #12]
 8004dc4:	601a      	str	r2, [r3, #0]
 8004dc6:	4a31      	ldr	r2, [pc, #196]	; (8004e8c <main+0xa38>)
 8004dc8:	6813      	ldr	r3, [r2, #0]
 8004dca:	438b      	bics	r3, r1
 8004dcc:	3902      	subs	r1, #2
 8004dce:	430b      	orrs	r3, r1
 8004dd0:	6013      	str	r3, [r2, #0]
 8004dd2:	2390      	movs	r3, #144	; 0x90
		GPIOB->BRR = GPIO_PIN_0;
 8004dd4:	6291      	str	r1, [r2, #40]	; 0x28
 8004dd6:	05db      	lsls	r3, r3, #23
 8004dd8:	6819      	ldr	r1, [r3, #0]
 8004dda:	4008      	ands	r0, r1
 8004ddc:	2180      	movs	r1, #128	; 0x80
 8004dde:	0309      	lsls	r1, r1, #12
 8004de0:	4301      	orrs	r1, r0
 8004de2:	6019      	str	r1, [r3, #0]
 8004de4:	6819      	ldr	r1, [r3, #0]
 8004de6:	482b      	ldr	r0, [pc, #172]	; (8004e94 <main+0xa40>)
 8004de8:	4008      	ands	r0, r1
 8004dea:	2180      	movs	r1, #128	; 0x80
 8004dec:	01c9      	lsls	r1, r1, #7
 8004dee:	4301      	orrs	r1, r0
 8004df0:	e076      	b.n	8004ee0 <main+0xa8c>
 8004df2:	46c0      	nop			; (mov r8, r8)
 8004df4:	2000001c 	.word	0x2000001c
 8004df8:	2000020c 	.word	0x2000020c
 8004dfc:	200002f0 	.word	0x200002f0
 8004e00:	40003000 	.word	0x40003000
 8004e04:	00000fff 	.word	0x00000fff
 8004e08:	200000c4 	.word	0x200000c4
 8004e0c:	20000120 	.word	0x20000120
 8004e10:	20000018 	.word	0x20000018
 8004e14:	2000020b 	.word	0x2000020b
 8004e18:	20000090 	.word	0x20000090
 8004e1c:	20000398 	.word	0x20000398
 8004e20:	20000204 	.word	0x20000204
 8004e24:	000003e9 	.word	0x000003e9
 8004e28:	20000144 	.word	0x20000144
 8004e2c:	20000038 	.word	0x20000038
 8004e30:	40012c00 	.word	0x40012c00
 8004e34:	20000126 	.word	0x20000126
 8004e38:	20000124 	.word	0x20000124
 8004e3c:	20000348 	.word	0x20000348
 8004e40:	2000073c 	.word	0x2000073c
 8004e44:	20000670 	.word	0x20000670
 8004e48:	2000009c 	.word	0x2000009c
 8004e4c:	4002001c 	.word	0x4002001c
 8004e50:	40020008 	.word	0x40020008
 8004e54:	00000a91 	.word	0x00000a91
 8004e58:	40020058 	.word	0x40020058
 8004e5c:	00000981 	.word	0x00000981
 8004e60:	200001fc 	.word	0x200001fc
 8004e64:	2000062c 	.word	0x2000062c
 8004e68:	2000040c 	.word	0x2000040c
 8004e6c:	20000024 	.word	0x20000024
 8004e70:	20000138 	.word	0x20000138
 8004e74:	000186a0 	.word	0x000186a0
 8004e78:	20000134 	.word	0x20000134
 8004e7c:	20000390 	.word	0x20000390
 8004e80:	200002a8 	.word	0x200002a8
 8004e84:	000007c6 	.word	0x000007c6
 8004e88:	20000125 	.word	0x20000125
 8004e8c:	48000400 	.word	0x48000400
 8004e90:	fff3ffff 	.word	0xfff3ffff
 8004e94:	ffff3fff 	.word	0xffff3fff
 8004e98:	fffcffff 	.word	0xfffcffff
 8004e9c:	ffcfffff 	.word	0xffcfffff
 8004ea0:	20000084 	.word	0x20000084
 8004ea4:	00000bb8 	.word	0x00000bb8
 8004ea8:	2000012c 	.word	0x2000012c
 8004eac:	2000008c 	.word	0x2000008c
 8004eb0:	00000b22 	.word	0x00000b22
 8004eb4:	20000110 	.word	0x20000110
 8004eb8:	20000200 	.word	0x20000200
 8004ebc:	20000114 	.word	0x20000114
 8004ec0:	20000118 	.word	0x20000118
 8004ec4:	20000224 	.word	0x20000224
 8004ec8:	20000238 	.word	0x20000238
 8004ecc:	20000098 	.word	0x20000098
 8004ed0:	2000023c 	.word	0x2000023c
 8004ed4:	2000019c 	.word	0x2000019c
 8004ed8:	20000244 	.word	0x20000244
 8004edc:	2000024c 	.word	0x2000024c
 8004ee0:	6019      	str	r1, [r3, #0]
			GPIOA->BRR = GPIO_PIN_7;
 8004ee2:	2180      	movs	r1, #128	; 0x80
 8004ee4:	6299      	str	r1, [r3, #40]	; 0x28
 8004ee6:	6819      	ldr	r1, [r3, #0]
 8004ee8:	4886      	ldr	r0, [pc, #536]	; (8005104 <main+0xcb0>)
 8004eea:	4008      	ands	r0, r1
 8004eec:	2180      	movs	r1, #128	; 0x80
 8004eee:	0289      	lsls	r1, r1, #10
 8004ef0:	4301      	orrs	r1, r0
 8004ef2:	200c      	movs	r0, #12
 8004ef4:	6019      	str	r1, [r3, #0]
 8004ef6:	6811      	ldr	r1, [r2, #0]
 8004ef8:	4381      	bics	r1, r0
 8004efa:	3808      	subs	r0, #8
 8004efc:	4301      	orrs	r1, r0
 8004efe:	6011      	str	r1, [r2, #0]
			GPIOB->BRR = GPIO_PIN_1;
 8004f00:	2102      	movs	r1, #2
 8004f02:	6291      	str	r1, [r2, #40]	; 0x28
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	4980      	ldr	r1, [pc, #512]	; (8005108 <main+0xcb4>)
 8004f08:	4011      	ands	r1, r2
 8004f0a:	2280      	movs	r2, #128	; 0x80
 8004f0c:	0392      	lsls	r2, r2, #14
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	601a      	str	r2, [r3, #0]
				if(bi_polar){
 8004f12:	4b7e      	ldr	r3, [pc, #504]	; (800510c <main+0xcb8>)
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d000      	beq.n	8004f1c <main+0xac8>
 8004f1a:	e145      	b.n	80051a8 <main+0xd54>
				TIM1->CCR1 = duty_cycle;// set duty cycle to 50 out of 768 to start.
 8004f1c:	4653      	mov	r3, sl
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	4b7b      	ldr	r3, [pc, #492]	; (8005110 <main+0xcbc>)
 8004f22:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = duty_cycle;
 8004f24:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = duty_cycle;
 8004f26:	63da      	str	r2, [r3, #60]	; 0x3c
			if (vehicle_mode == 1){
 8004f28:	4b7a      	ldr	r3, [pc, #488]	; (8005114 <main+0xcc0>)
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d100      	bne.n	8004f32 <main+0xade>
 8004f30:	e146      	b.n	80051c0 <main+0xd6c>
			if (vehicle_mode == 2|| vehicle_mode == 3 ) {    // crawler much fewer poles, much more filtering time needed
 8004f32:	1e9a      	subs	r2, r3, #2
 8004f34:	2a01      	cmp	r2, #1
 8004f36:	d800      	bhi.n	8004f3a <main+0xae6>
 8004f38:	e1e8      	b.n	800530c <main+0xeb8>
			if (vehicle_mode == 5 ){
 8004f3a:	2b05      	cmp	r3, #5
 8004f3c:	d119      	bne.n	8004f72 <main+0xb1e>
 8004f3e:	4b76      	ldr	r3, [pc, #472]	; (8005118 <main+0xcc4>)
 8004f40:	681a      	ldr	r2, [r3, #0]
			if(bemf_counts < 15 || commutation_interval > 12000){
 8004f42:	4643      	mov	r3, r8
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2b0e      	cmp	r3, #14
 8004f48:	dc00      	bgt.n	8004f4c <main+0xaf8>
 8004f4a:	e22b      	b.n	80053a4 <main+0xf50>
 8004f4c:	4b73      	ldr	r3, [pc, #460]	; (800511c <main+0xcc8>)
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	dd00      	ble.n	8004f54 <main+0xb00>
 8004f52:	e1fa      	b.n	800534a <main+0xef6>
				wait_before = 700;
 8004f54:	23af      	movs	r3, #175	; 0xaf
 8004f56:	4972      	ldr	r1, [pc, #456]	; (8005120 <main+0xccc>)
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	600b      	str	r3, [r1, #0]
				filter_level = 2;
 8004f5c:	2302      	movs	r3, #2
			if(commutation_interval < 100){
 8004f5e:	2a63      	cmp	r2, #99	; 0x63
 8004f60:	dd00      	ble.n	8004f64 <main+0xb10>
 8004f62:	e1f3      	b.n	800534c <main+0xef8>
				filter_level = 1;
 8004f64:	2301      	movs	r3, #1
 8004f66:	4a6f      	ldr	r2, [pc, #444]	; (8005124 <main+0xcd0>)
 8004f68:	7013      	strb	r3, [r2, #0]
				wait_before = 500;
 8004f6a:	33f4      	adds	r3, #244	; 0xf4
 8004f6c:	4a6c      	ldr	r2, [pc, #432]	; (8005120 <main+0xccc>)
 8004f6e:	33ff      	adds	r3, #255	; 0xff
 8004f70:	6013      	str	r3, [r2, #0]
			if (started == 1) {
 8004f72:	4b6d      	ldr	r3, [pc, #436]	; (8005128 <main+0xcd4>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d100      	bne.n	8004f7c <main+0xb28>
 8004f7a:	e150      	b.n	800521e <main+0xdca>
			if (polling_mode && running == 1){
 8004f7c:	4b6b      	ldr	r3, [pc, #428]	; (800512c <main+0xcd8>)
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d005      	beq.n	8004f90 <main+0xb3c>
 8004f84:	4b6a      	ldr	r3, [pc, #424]	; (8005130 <main+0xcdc>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	9303      	str	r3, [sp, #12]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d100      	bne.n	8004f90 <main+0xb3c>
 8004f8e:	e158      	b.n	8005242 <main+0xdee>
 8004f90:	4b68      	ldr	r3, [pc, #416]	; (8005134 <main+0xce0>)
 8004f92:	781b      	ldrb	r3, [r3, #0]
	if(!brushed_mode || !sine_mode){
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d004      	beq.n	8004fa2 <main+0xb4e>
 8004f98:	4b67      	ldr	r3, [pc, #412]	; (8005138 <main+0xce4>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	9303      	str	r3, [sp, #12]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d114      	bne.n	8004fcc <main+0xb78>
		zctimeout++;
 8004fa2:	4b66      	ldr	r3, [pc, #408]	; (800513c <main+0xce8>)
 8004fa4:	4a65      	ldr	r2, [pc, #404]	; (800513c <main+0xce8>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	6013      	str	r3, [r2, #0]
			if (zctimeout > zc_timeout_threshold) {
 8004fac:	4a64      	ldr	r2, [pc, #400]	; (8005140 <main+0xcec>)
 8004fae:	6812      	ldr	r2, [r2, #0]
 8004fb0:	9203      	str	r2, [sp, #12]
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	dd0a      	ble.n	8004fcc <main+0xb78>
				bemf_counts = 0;
 8004fb6:	4643      	mov	r3, r8
 8004fb8:	601d      	str	r5, [r3, #0]
				bad_commutation = 0;
 8004fba:	4b62      	ldr	r3, [pc, #392]	; (8005144 <main+0xcf0>)
 8004fbc:	701d      	strb	r5, [r3, #0]
				sensorless = 0;
 8004fbe:	4b62      	ldr	r3, [pc, #392]	; (8005148 <main+0xcf4>)
 8004fc0:	601d      	str	r5, [r3, #0]
				EXTI->IMR &= (0 << 21);
 8004fc2:	4b62      	ldr	r3, [pc, #392]	; (800514c <main+0xcf8>)
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	601d      	str	r5, [r3, #0]
				running = 0;
 8004fc8:	4b59      	ldr	r3, [pc, #356]	; (8005130 <main+0xcdc>)
 8004fca:	601d      	str	r5, [r3, #0]
	if(( input > 47 && input < (100-(52-sine_mode_range)-(10*running)))&&( armed)){
 8004fcc:	6833      	ldr	r3, [r6, #0]
 8004fce:	2b2f      	cmp	r3, #47	; 0x2f
 8004fd0:	dc00      	bgt.n	8004fd4 <main+0xb80>
 8004fd2:	e5bd      	b.n	8004b50 <main+0x6fc>
 8004fd4:	4a56      	ldr	r2, [pc, #344]	; (8005130 <main+0xcdc>)
 8004fd6:	6810      	ldr	r0, [r2, #0]
 8004fd8:	9a05      	ldr	r2, [sp, #20]
 8004fda:	7811      	ldrb	r1, [r2, #0]
 8004fdc:	0742      	lsls	r2, r0, #29
 8004fde:	1a12      	subs	r2, r2, r0
 8004fe0:	0092      	lsls	r2, r2, #2
 8004fe2:	1a12      	subs	r2, r2, r0
 8004fe4:	3130      	adds	r1, #48	; 0x30
 8004fe6:	0052      	lsls	r2, r2, #1
 8004fe8:	188a      	adds	r2, r1, r2
 8004fea:	4293      	cmp	r3, r2
 8004fec:	db00      	blt.n	8004ff0 <main+0xb9c>
 8004fee:	e5af      	b.n	8004b50 <main+0x6fc>
 8004ff0:	4a57      	ldr	r2, [pc, #348]	; (8005150 <main+0xcfc>)
 8004ff2:	7812      	ldrb	r2, [r2, #0]
 8004ff4:	2a00      	cmp	r2, #0
 8004ff6:	d100      	bne.n	8004ffa <main+0xba6>
 8004ff8:	e5aa      	b.n	8004b50 <main+0x6fc>
		if(running){
 8004ffa:	2800      	cmp	r0, #0
 8004ffc:	d008      	beq.n	8005010 <main+0xbbc>
			EXTI->IMR &= ~(1 << 21);
 8004ffe:	4953      	ldr	r1, [pc, #332]	; (800514c <main+0xcf8>)
 8005000:	4854      	ldr	r0, [pc, #336]	; (8005154 <main+0xd00>)
 8005002:	680a      	ldr	r2, [r1, #0]
 8005004:	4002      	ands	r2, r0
 8005006:	600a      	str	r2, [r1, #0]
			running = 0;
 8005008:	4a49      	ldr	r2, [pc, #292]	; (8005130 <main+0xcdc>)
 800500a:	6015      	str	r5, [r2, #0]
			started = 0;
 800500c:	4a46      	ldr	r2, [pc, #280]	; (8005128 <main+0xcd4>)
 800500e:	6015      	str	r5, [r2, #0]
		if (sine_mode == 0){
 8005010:	4a49      	ldr	r2, [pc, #292]	; (8005138 <main+0xce4>)
 8005012:	6812      	ldr	r2, [r2, #0]
 8005014:	9203      	str	r2, [sp, #12]
 8005016:	2a00      	cmp	r2, #0
 8005018:	d109      	bne.n	800502e <main+0xbda>
	phaseAPWM();
 800501a:	f7fe f899 	bl	8003150 <phaseAPWM>
	phaseBPWM();
 800501e:	f7fe f8c1 	bl	80031a4 <phaseBPWM>
	phaseCPWM();
 8005022:	f7fe f8ef 	bl	8003204 <phaseCPWM>
			sine_mode = 1;
 8005026:	2301      	movs	r3, #1
 8005028:	4a43      	ldr	r2, [pc, #268]	; (8005138 <main+0xce4>)
 800502a:	6013      	str	r3, [r2, #0]
 800502c:	6833      	ldr	r3, [r6, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800502e:	2b50      	cmp	r3, #80	; 0x50
 8005030:	dc00      	bgt.n	8005034 <main+0xbe0>
 8005032:	e31b      	b.n	800566c <main+0x1218>
 8005034:	2350      	movs	r3, #80	; 0x50
 8005036:	3b30      	subs	r3, #48	; 0x30
 8005038:	001a      	movs	r2, r3
 800503a:	055b      	lsls	r3, r3, #21
 800503c:	1a9b      	subs	r3, r3, r2
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	189b      	adds	r3, r3, r2
 8005042:	011b      	lsls	r3, r3, #4
 8005044:	189b      	adds	r3, r3, r2
 8005046:	00db      	lsls	r3, r3, #3
 8005048:	189b      	adds	r3, r3, r2
 800504a:	221f      	movs	r2, #31
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	17d9      	asrs	r1, r3, #31
 8005050:	400a      	ands	r2, r1
 8005052:	18d3      	adds	r3, r2, r3
 8005054:	22fa      	movs	r2, #250	; 0xfa
 8005056:	00d2      	lsls	r2, r2, #3
 8005058:	4694      	mov	ip, r2
 800505a:	115b      	asrs	r3, r3, #5
		step_delay = map(input,48,80,2000,500);
 800505c:	4a3e      	ldr	r2, [pc, #248]	; (8005158 <main+0xd04>)
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800505e:	4463      	add	r3, ip
		step_delay = map(input,48,80,2000,500);
 8005060:	6013      	str	r3, [r2, #0]
		TIM14->ARR = step_delay;
 8005062:	4a3e      	ldr	r2, [pc, #248]	; (800515c <main+0xd08>)
 8005064:	62d3      	str	r3, [r2, #44]	; 0x2c
		if (TIM14->CNT >= TIM14->ARR){
 8005066:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8005068:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800506a:	4299      	cmp	r1, r3
 800506c:	d200      	bcs.n	8005070 <main+0xc1c>
 800506e:	e56f      	b.n	8004b50 <main+0x6fc>
			TIM14->CNT = TIM14->ARR - 2;
 8005070:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005072:	3b02      	subs	r3, #2
 8005074:	6253      	str	r3, [r2, #36]	; 0x24
			if (count > 100000) {
 8005076:	4a3a      	ldr	r2, [pc, #232]	; (8005160 <main+0xd0c>)
 8005078:	4b3a      	ldr	r3, [pc, #232]	; (8005164 <main+0xd10>)
 800507a:	6812      	ldr	r2, [r2, #0]
 800507c:	9203      	str	r2, [sp, #12]
 800507e:	429a      	cmp	r2, r3
 8005080:	dc00      	bgt.n	8005084 <main+0xc30>
 8005082:	e56d      	b.n	8004b60 <main+0x70c>
 8005084:	e56a      	b.n	8004b5c <main+0x708>
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8005086:	2b96      	cmp	r3, #150	; 0x96
 8005088:	db00      	blt.n	800508c <main+0xc38>
 800508a:	e5e8      	b.n	8004c5e <main+0x80a>
 800508c:	2396      	movs	r3, #150	; 0x96
 800508e:	e5e6      	b.n	8004c5e <main+0x80a>
				control_loop_count = 0;
 8005090:	4b35      	ldr	r3, [pc, #212]	; (8005168 <main+0xd14>)
 8005092:	601d      	str	r5, [r3, #0]
				if (dshotcommand > 0) {
 8005094:	4b35      	ldr	r3, [pc, #212]	; (800516c <main+0xd18>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	dc00      	bgt.n	800509e <main+0xc4a>
 800509c:	e184      	b.n	80053a8 <main+0xf54>
					if (dshotcommand == 2) {
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d100      	bne.n	80050a4 <main+0xc50>
 80050a2:	e3af      	b.n	8005804 <main+0x13b0>
					if (dshotcommand == 21) {
 80050a4:	2b15      	cmp	r3, #21
 80050a6:	d100      	bne.n	80050aa <main+0xc56>
 80050a8:	e337      	b.n	800571a <main+0x12c6>
					if (dshotcommand == 20) {     // forward = 1 if dir_reversed = 0
 80050aa:	2b14      	cmp	r3, #20
 80050ac:	d100      	bne.n	80050b0 <main+0xc5c>
 80050ae:	e32e      	b.n	800570e <main+0x12ba>
					if (dshotcommand == 7) {
 80050b0:	2b07      	cmp	r3, #7
 80050b2:	d000      	beq.n	80050b6 <main+0xc62>
 80050b4:	e39f      	b.n	80057f6 <main+0x13a2>
						dir_reversed = 0;
 80050b6:	465b      	mov	r3, fp
 80050b8:	601d      	str	r5, [r3, #0]
 80050ba:	9b01      	ldr	r3, [sp, #4]
 80050bc:	6819      	ldr	r1, [r3, #0]
					dshotcommand = 0;
 80050be:	4b2b      	ldr	r3, [pc, #172]	; (800516c <main+0xd18>)
 80050c0:	601d      	str	r5, [r3, #0]
 80050c2:	4b2b      	ldr	r3, [pc, #172]	; (8005170 <main+0xd1c>)
 80050c4:	781a      	ldrb	r2, [r3, #0]
 80050c6:	9b08      	ldr	r3, [sp, #32]
 80050c8:	681b      	ldr	r3, [r3, #0]
				if (bi_direction == 1 && (proshot == 0 && dshot == 0)) {
 80050ca:	2901      	cmp	r1, #1
 80050cc:	d100      	bne.n	80050d0 <main+0xc7c>
 80050ce:	e174      	b.n	80053ba <main+0xf66>
				} else if ((proshot || dshot) && bi_direction) {
 80050d0:	2a00      	cmp	r2, #0
 80050d2:	d000      	beq.n	80050d6 <main+0xc82>
 80050d4:	e19d      	b.n	8005412 <main+0xfbe>
 80050d6:	4a27      	ldr	r2, [pc, #156]	; (8005174 <main+0xd20>)
 80050d8:	7812      	ldrb	r2, [r2, #0]
 80050da:	2a00      	cmp	r2, #0
 80050dc:	d000      	beq.n	80050e0 <main+0xc8c>
 80050de:	e198      	b.n	8005412 <main+0xfbe>
					adjusted_input = newinput;
 80050e0:	464a      	mov	r2, r9
 80050e2:	6013      	str	r3, [r2, #0]
				if (adjusted_input > 2000) {
 80050e4:	22fa      	movs	r2, #250	; 0xfa
 80050e6:	00d2      	lsls	r2, r2, #3
 80050e8:	4293      	cmp	r3, r2
 80050ea:	dd01      	ble.n	80050f0 <main+0xc9c>
					adjusted_input = 2000;
 80050ec:	464b      	mov	r3, r9
 80050ee:	601a      	str	r2, [r3, #0]
				if (input_override > 1){
 80050f0:	4b21      	ldr	r3, [pc, #132]	; (8005178 <main+0xd24>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	dd01      	ble.n	80050fc <main+0xca8>
					input = adjusted_input;
 80050f8:	6033      	str	r3, [r6, #0]
 80050fa:	e53f      	b.n	8004b7c <main+0x728>
 80050fc:	464b      	mov	r3, r9
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	6033      	str	r3, [r6, #0]
 8005102:	e53b      	b.n	8004b7c <main+0x728>
 8005104:	fffcffff 	.word	0xfffcffff
 8005108:	ffcfffff 	.word	0xffcfffff
 800510c:	20000124 	.word	0x20000124
 8005110:	40012c00 	.word	0x40012c00
 8005114:	200000c4 	.word	0x200000c4
 8005118:	2000012c 	.word	0x2000012c
 800511c:	00002ee0 	.word	0x00002ee0
 8005120:	200000c8 	.word	0x200000c8
 8005124:	20000034 	.word	0x20000034
 8005128:	20000244 	.word	0x20000244
 800512c:	2000020a 	.word	0x2000020a
 8005130:	20000224 	.word	0x20000224
 8005134:	20000126 	.word	0x20000126
 8005138:	2000023c 	.word	0x2000023c
 800513c:	2000026c 	.word	0x2000026c
 8005140:	200000cc 	.word	0x200000cc
 8005144:	2000011c 	.word	0x2000011c
 8005148:	20000228 	.word	0x20000228
 800514c:	40010400 	.word	0x40010400
 8005150:	20000114 	.word	0x20000114
 8005154:	ffdfffff 	.word	0xffdfffff
 8005158:	200000b0 	.word	0x200000b0
 800515c:	40002000 	.word	0x40002000
 8005160:	20000138 	.word	0x20000138
 8005164:	000186a0 	.word	0x000186a0
 8005168:	20000390 	.word	0x20000390
 800516c:	2000018c 	.word	0x2000018c
 8005170:	20000220 	.word	0x20000220
 8005174:	20000188 	.word	0x20000188
 8005178:	2000038c 	.word	0x2000038c
				EXTI->IMR &= ~(1 << 21);
 800517c:	4acc      	ldr	r2, [pc, #816]	; (80054b0 <main+0x105c>)
 800517e:	49cd      	ldr	r1, [pc, #820]	; (80054b4 <main+0x1060>)
 8005180:	6813      	ldr	r3, [r2, #0]
 8005182:	400b      	ands	r3, r1
 8005184:	6013      	str	r3, [r2, #0]
				forcedcomcount = 0;
 8005186:	4bcc      	ldr	r3, [pc, #816]	; (80054b8 <main+0x1064>)
 8005188:	601d      	str	r5, [r3, #0]
				started = 0;
 800518a:	4bcc      	ldr	r3, [pc, #816]	; (80054bc <main+0x1068>)
 800518c:	601d      	str	r5, [r3, #0]
				duty_cycle = 0;
 800518e:	4653      	mov	r3, sl
 8005190:	601d      	str	r5, [r3, #0]
 8005192:	9b04      	ldr	r3, [sp, #16]
 8005194:	7818      	ldrb	r0, [r3, #0]
				if ((brake || tempbrake)&& (!bi_polar)) {
 8005196:	4bca      	ldr	r3, [pc, #808]	; (80054c0 <main+0x106c>)
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	9303      	str	r3, [sp, #12]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d100      	bne.n	80051a2 <main+0xd4e>
 80051a0:	e26c      	b.n	800567c <main+0x1228>
				if (prop_brake && prop_brake_active) {
 80051a2:	2800      	cmp	r0, #0
 80051a4:	d000      	beq.n	80051a8 <main+0xd54>
 80051a6:	e2ae      	b.n	8005706 <main+0x12b2>
					TIM1->CCR2 = (TIM1->ARR) / 2;
 80051a8:	4bc6      	ldr	r3, [pc, #792]	; (80054c4 <main+0x1070>)
 80051aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ac:	0852      	lsrs	r2, r2, #1
 80051ae:	639a      	str	r2, [r3, #56]	; 0x38
					TIM1->CCR3 = (TIM1->ARR) / 2;
 80051b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051b2:	0852      	lsrs	r2, r2, #1
 80051b4:	63da      	str	r2, [r3, #60]	; 0x3c
			if (vehicle_mode == 1){
 80051b6:	4bc4      	ldr	r3, [pc, #784]	; (80054c8 <main+0x1074>)
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d000      	beq.n	80051c0 <main+0xd6c>
 80051be:	e6b8      	b.n	8004f32 <main+0xade>
 80051c0:	4ac2      	ldr	r2, [pc, #776]	; (80054cc <main+0x1078>)
			if (bemf_counts < 40 || commutation_interval > 1000 || duty_cycle < 200) {
 80051c2:	4643      	mov	r3, r8
 80051c4:	6812      	ldr	r2, [r2, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4694      	mov	ip, r2
 80051ca:	4652      	mov	r2, sl
 80051cc:	6814      	ldr	r4, [r2, #0]
 80051ce:	2b27      	cmp	r3, #39	; 0x27
 80051d0:	dc00      	bgt.n	80051d4 <main+0xd80>
 80051d2:	e0b4      	b.n	800533e <main+0xeea>
 80051d4:	22fa      	movs	r2, #250	; 0xfa
 80051d6:	0092      	lsls	r2, r2, #2
 80051d8:	4594      	cmp	ip, r2
 80051da:	dd00      	ble.n	80051de <main+0xd8a>
 80051dc:	e0af      	b.n	800533e <main+0xeea>
 80051de:	2cc7      	cmp	r4, #199	; 0xc7
 80051e0:	dc00      	bgt.n	80051e4 <main+0xd90>
 80051e2:	e2a3      	b.n	800572c <main+0x12d8>
				filter_level = 5;
 80051e4:	2105      	movs	r1, #5
				filter_delay = 0;
 80051e6:	2200      	movs	r2, #0
 80051e8:	48b9      	ldr	r0, [pc, #740]	; (80054d0 <main+0x107c>)
 80051ea:	7001      	strb	r1, [r0, #0]
 80051ec:	49b9      	ldr	r1, [pc, #740]	; (80054d4 <main+0x1080>)
 80051ee:	600a      	str	r2, [r1, #0]
			if (duty_cycle > 600 && bemf_counts > 75){
 80051f0:	2296      	movs	r2, #150	; 0x96
 80051f2:	0092      	lsls	r2, r2, #2
 80051f4:	4294      	cmp	r4, r2
 80051f6:	dd03      	ble.n	8005200 <main+0xdac>
 80051f8:	2b4b      	cmp	r3, #75	; 0x4b
 80051fa:	dd01      	ble.n	8005200 <main+0xdac>
				filter_level = 2;
 80051fc:	2202      	movs	r2, #2
 80051fe:	7002      	strb	r2, [r0, #0]
			if (commutation_interval < 100 && bemf_counts > 100){
 8005200:	4662      	mov	r2, ip
 8005202:	2a63      	cmp	r2, #99	; 0x63
 8005204:	dd00      	ble.n	8005208 <main+0xdb4>
 8005206:	e6b4      	b.n	8004f72 <main+0xb1e>
 8005208:	2b64      	cmp	r3, #100	; 0x64
 800520a:	dc00      	bgt.n	800520e <main+0xdba>
 800520c:	e6b1      	b.n	8004f72 <main+0xb1e>
				filter_level = 2;
 800520e:	2302      	movs	r3, #2
 8005210:	4aaf      	ldr	r2, [pc, #700]	; (80054d0 <main+0x107c>)
 8005212:	7013      	strb	r3, [r2, #0]
			if (started == 1) {
 8005214:	4ba9      	ldr	r3, [pc, #676]	; (80054bc <main+0x1068>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d000      	beq.n	800521e <main+0xdca>
 800521c:	e6ae      	b.n	8004f7c <main+0xb28>
				if (running == 0) {
 800521e:	4aae      	ldr	r2, [pc, #696]	; (80054d8 <main+0x1084>)
 8005220:	6812      	ldr	r2, [r2, #0]
 8005222:	9203      	str	r2, [sp, #12]
 8005224:	2a00      	cmp	r2, #0
 8005226:	d000      	beq.n	800522a <main+0xdd6>
 8005228:	e6a8      	b.n	8004f7c <main+0xb28>
					if(brushed_mode){
 800522a:	4aac      	ldr	r2, [pc, #688]	; (80054dc <main+0x1088>)
 800522c:	7812      	ldrb	r2, [r2, #0]
 800522e:	2a00      	cmp	r2, #0
 8005230:	d100      	bne.n	8005234 <main+0xde0>
 8005232:	e276      	b.n	8005722 <main+0x12ce>
						running = 1;
 8005234:	4aa8      	ldr	r2, [pc, #672]	; (80054d8 <main+0x1084>)
 8005236:	6013      	str	r3, [r2, #0]
			if (polling_mode && running == 1){
 8005238:	4ba9      	ldr	r3, [pc, #676]	; (80054e0 <main+0x108c>)
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d100      	bne.n	8005242 <main+0xdee>
 8005240:	e6aa      	b.n	8004f98 <main+0xb44>
	if(!zcfound){
 8005242:	4ba8      	ldr	r3, [pc, #672]	; (80054e4 <main+0x1090>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	9303      	str	r3, [sp, #12]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d000      	beq.n	800524e <main+0xdfa>
 800524c:	e6a0      	b.n	8004f90 <main+0xb3c>
			if (rising == 0){
 800524e:	4ba6      	ldr	r3, [pc, #664]	; (80054e8 <main+0x1094>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <main+0xe06>
 8005256:	f000 fc00 	bl	8005a5a <main+0x1606>
			if (rising == 1){
 800525a:	2b01      	cmp	r3, #1
 800525c:	d000      	beq.n	8005260 <main+0xe0c>
 800525e:	e697      	b.n	8004f90 <main+0xb3c>
				if (HAL_COMP_GetOutputLevel(&hcomp1) == COMP_OUTPUTLEVEL_HIGH){
 8005260:	48a2      	ldr	r0, [pc, #648]	; (80054ec <main+0x1098>)
 8005262:	f7fb fbbb 	bl	80009dc <HAL_COMP_GetOutputLevel>
 8005266:	2380      	movs	r3, #128	; 0x80
 8005268:	01db      	lsls	r3, r3, #7
 800526a:	4298      	cmp	r0, r3
 800526c:	d100      	bne.n	8005270 <main+0xe1c>
 800526e:	e3e2      	b.n	8005a36 <main+0x15e2>
				if (HAL_COMP_GetOutputLevel(&hcomp1) == COMP_OUTPUTLEVEL_LOW){
 8005270:	489e      	ldr	r0, [pc, #632]	; (80054ec <main+0x1098>)
 8005272:	f7fb fbb3 	bl	80009dc <HAL_COMP_GetOutputLevel>
 8005276:	2800      	cmp	r0, #0
 8005278:	d105      	bne.n	8005286 <main+0xe32>
					upcompcount++;
 800527a:	4b9d      	ldr	r3, [pc, #628]	; (80054f0 <main+0x109c>)
 800527c:	4a9c      	ldr	r2, [pc, #624]	; (80054f0 <main+0x109c>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	9303      	str	r3, [sp, #12]
 8005282:	3301      	adds	r3, #1
 8005284:	6013      	str	r3, [r2, #0]
					if (upcompcount > upthreshold){
 8005286:	4b9a      	ldr	r3, [pc, #616]	; (80054f0 <main+0x109c>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	9303      	str	r3, [sp, #12]
 800528c:	4b99      	ldr	r3, [pc, #612]	; (80054f4 <main+0x10a0>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	9309      	str	r3, [sp, #36]	; 0x24
 8005292:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005294:	9b03      	ldr	r3, [sp, #12]
 8005296:	4293      	cmp	r3, r2
 8005298:	dc00      	bgt.n	800529c <main+0xe48>
 800529a:	e679      	b.n	8004f90 <main+0xb3c>
							zcfound = 1;
 800529c:	2301      	movs	r3, #1
 800529e:	4a91      	ldr	r2, [pc, #580]	; (80054e4 <main+0x1090>)
								thiszctime = TIM3->CNT;
 80052a0:	4c95      	ldr	r4, [pc, #596]	; (80054f8 <main+0x10a4>)
							zcfound = 1;
 80052a2:	6013      	str	r3, [r2, #0]
							zctimeout = 0;
 80052a4:	4b95      	ldr	r3, [pc, #596]	; (80054fc <main+0x10a8>)
							bemf_counts++;
 80052a6:	4642      	mov	r2, r8
							zctimeout = 0;
 80052a8:	601d      	str	r5, [r3, #0]
							upcompcount = 0;
 80052aa:	4b91      	ldr	r3, [pc, #580]	; (80054f0 <main+0x109c>)
							    commutation_interval = ((2*commutation_interval) + thiszctime) / 3;
 80052ac:	2103      	movs	r1, #3
							upcompcount = 0;
 80052ae:	601d      	str	r5, [r3, #0]
							falsecount = 0;
 80052b0:	4b93      	ldr	r3, [pc, #588]	; (8005500 <main+0x10ac>)
 80052b2:	601d      	str	r5, [r3, #0]
							bemf_counts++;
 80052b4:	4643      	mov	r3, r8
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	3301      	adds	r3, #1
 80052ba:	6013      	str	r3, [r2, #0]
								thiszctime = TIM3->CNT;
 80052bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052be:	4a91      	ldr	r2, [pc, #580]	; (8005504 <main+0x10b0>)
 80052c0:	6013      	str	r3, [r2, #0]
								forced_com_done = 0;
 80052c2:	4a91      	ldr	r2, [pc, #580]	; (8005508 <main+0x10b4>)
								TIM3->CNT = 0;
 80052c4:	6265      	str	r5, [r4, #36]	; 0x24
								forced_com_done = 0;
 80052c6:	6015      	str	r5, [r2, #0]
							    commutation_interval = ((2*commutation_interval) + thiszctime) / 3;
 80052c8:	4a80      	ldr	r2, [pc, #512]	; (80054cc <main+0x1078>)
 80052ca:	6812      	ldr	r2, [r2, #0]
 80052cc:	0050      	lsls	r0, r2, #1
 80052ce:	18c0      	adds	r0, r0, r3
 80052d0:	9203      	str	r2, [sp, #12]
 80052d2:	f7fa ffa3 	bl	800021c <__divsi3>
 80052d6:	4b7d      	ldr	r3, [pc, #500]	; (80054cc <main+0x1078>)
								degree_time = commutation_interval >> 5;                          // about 1.85 degrees per unit
 80052d8:	4a8c      	ldr	r2, [pc, #560]	; (800550c <main+0x10b8>)
							    commutation_interval = ((2*commutation_interval) + thiszctime) / 3;
 80052da:	6018      	str	r0, [r3, #0]
								degree_time = commutation_interval >> 5;                          // about 1.85 degrees per unit
 80052dc:	1143      	asrs	r3, r0, #5
 80052de:	6013      	str	r3, [r2, #0]
								advance = degree_time * advance_multiplier;
 80052e0:	4a8b      	ldr	r2, [pc, #556]	; (8005510 <main+0x10bc>)
								waitTime = (commutation_interval >> 1) - advance;
 80052e2:	1040      	asrs	r0, r0, #1
								advance = degree_time * advance_multiplier;
 80052e4:	6812      	ldr	r2, [r2, #0]
 80052e6:	4353      	muls	r3, r2
 80052e8:	4a8a      	ldr	r2, [pc, #552]	; (8005514 <main+0x10c0>)
								waitTime = (commutation_interval >> 1) - advance;
 80052ea:	1ac0      	subs	r0, r0, r3
								advance = degree_time * advance_multiplier;
 80052ec:	6013      	str	r3, [r2, #0]
								waitTime = (commutation_interval >> 1) - advance;
 80052ee:	4b8a      	ldr	r3, [pc, #552]	; (8005518 <main+0x10c4>)
 80052f0:	6018      	str	r0, [r3, #0]
								if (sensorless){
 80052f2:	4b8a      	ldr	r3, [pc, #552]	; (800551c <main+0x10c8>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	9303      	str	r3, [sp, #12]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d004      	beq.n	8005306 <main+0xeb2>
									while (TIM3->CNT < waitTime){
 80052fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052fe:	4283      	cmp	r3, r0
 8005300:	d3fc      	bcc.n	80052fc <main+0xea8>
									commutate();
 8005302:	f7fe f925 	bl	8003550 <commutate>
								zcfound = 0;
 8005306:	4b77      	ldr	r3, [pc, #476]	; (80054e4 <main+0x1090>)
 8005308:	601d      	str	r5, [r3, #0]
 800530a:	e641      	b.n	8004f90 <main+0xb3c>
				if (bemf_counts < 25 || commutation_interval > 4000 || duty_cycle < 200) {
 800530c:	4643      	mov	r3, r8
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2b18      	cmp	r3, #24
 8005312:	dd11      	ble.n	8005338 <main+0xee4>
 8005314:	23fa      	movs	r3, #250	; 0xfa
 8005316:	4a6d      	ldr	r2, [pc, #436]	; (80054cc <main+0x1078>)
 8005318:	011b      	lsls	r3, r3, #4
 800531a:	6812      	ldr	r2, [r2, #0]
 800531c:	9203      	str	r2, [sp, #12]
 800531e:	429a      	cmp	r2, r3
 8005320:	dc0a      	bgt.n	8005338 <main+0xee4>
 8005322:	4653      	mov	r3, sl
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2bc7      	cmp	r3, #199	; 0xc7
 8005328:	dd06      	ble.n	8005338 <main+0xee4>
					filter_level = 8;
 800532a:	2208      	movs	r2, #8
					filter_delay = 0;
 800532c:	2300      	movs	r3, #0
 800532e:	4968      	ldr	r1, [pc, #416]	; (80054d0 <main+0x107c>)
 8005330:	700a      	strb	r2, [r1, #0]
 8005332:	4a68      	ldr	r2, [pc, #416]	; (80054d4 <main+0x1080>)
 8005334:	6013      	str	r3, [r2, #0]
 8005336:	e61c      	b.n	8004f72 <main+0xb1e>
					filter_level = 15;
 8005338:	220f      	movs	r2, #15
					filter_delay = 15;
 800533a:	230f      	movs	r3, #15
 800533c:	e7f7      	b.n	800532e <main+0xeda>
				filter_level = 10;
 800533e:	210a      	movs	r1, #10
				filter_delay = 15;
 8005340:	220f      	movs	r2, #15
 8005342:	e751      	b.n	80051e8 <main+0xd94>
		dither_count = 0;
 8005344:	4b76      	ldr	r3, [pc, #472]	; (8005520 <main+0x10cc>)
 8005346:	601d      	str	r5, [r3, #0]
 8005348:	e425      	b.n	8004b96 <main+0x742>
				filter_level = 10;
 800534a:	230a      	movs	r3, #10
 800534c:	4a60      	ldr	r2, [pc, #384]	; (80054d0 <main+0x107c>)
 800534e:	7013      	strb	r3, [r2, #0]
 8005350:	e60f      	b.n	8004f72 <main+0xb1e>
				armed = 0;
 8005352:	4b74      	ldr	r3, [pc, #464]	; (8005524 <main+0x10d0>)
				error = 1;
 8005354:	4a74      	ldr	r2, [pc, #464]	; (8005528 <main+0x10d4>)
				armed = 0;
 8005356:	701d      	strb	r5, [r3, #0]
				dshot_telemetry = 0;
 8005358:	4b74      	ldr	r3, [pc, #464]	; (800552c <main+0x10d8>)
				input = 0;
 800535a:	6035      	str	r5, [r6, #0]
				dshot_telemetry = 0;
 800535c:	701d      	strb	r5, [r3, #0]
				armedcount = 0;
 800535e:	4b74      	ldr	r3, [pc, #464]	; (8005530 <main+0x10dc>)
				HAL_TIM_Base_Start_IT(&htim16);
 8005360:	4874      	ldr	r0, [pc, #464]	; (8005534 <main+0x10e0>)
				armedcount = 0;
 8005362:	601d      	str	r5, [r3, #0]
				error = 1;
 8005364:	2301      	movs	r3, #1
 8005366:	6013      	str	r3, [r2, #0]
				inputSet = 0;
 8005368:	4b73      	ldr	r3, [pc, #460]	; (8005538 <main+0x10e4>)
 800536a:	701d      	strb	r5, [r3, #0]
				TIM15->PSC=0;
 800536c:	4b73      	ldr	r3, [pc, #460]	; (800553c <main+0x10e8>)
 800536e:	629d      	str	r5, [r3, #40]	; 0x28
				TIM16->PSC=0;
 8005370:	4b73      	ldr	r3, [pc, #460]	; (8005540 <main+0x10ec>)
 8005372:	629d      	str	r5, [r3, #40]	; 0x28
				dshot = 0;
 8005374:	4b73      	ldr	r3, [pc, #460]	; (8005544 <main+0x10f0>)
 8005376:	701d      	strb	r5, [r3, #0]
				proshot = 0;
 8005378:	4b73      	ldr	r3, [pc, #460]	; (8005548 <main+0x10f4>)
 800537a:	701d      	strb	r5, [r3, #0]
				servoPwm = 0;
 800537c:	4b73      	ldr	r3, [pc, #460]	; (800554c <main+0x10f8>)
 800537e:	701d      	strb	r5, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim16);
 8005380:	f7fc fb14 	bl	80019ac <HAL_TIM_Base_Start_IT>
				IC_buffer_size = 64;
 8005384:	2340      	movs	r3, #64	; 0x40
 8005386:	4a72      	ldr	r2, [pc, #456]	; (8005550 <main+0x10fc>)
 8005388:	2100      	movs	r1, #0
 800538a:	6013      	str	r3, [r2, #0]
 800538c:	2280      	movs	r2, #128	; 0x80
 800538e:	4871      	ldr	r0, [pc, #452]	; (8005554 <main+0x1100>)
 8005390:	0052      	lsls	r2, r2, #1
 8005392:	f000 ff57 	bl	8006244 <memset>
				HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , 64);
 8005396:	2340      	movs	r3, #64	; 0x40
 8005398:	4a6e      	ldr	r2, [pc, #440]	; (8005554 <main+0x1100>)
 800539a:	2100      	movs	r1, #0
 800539c:	486e      	ldr	r0, [pc, #440]	; (8005558 <main+0x1104>)
 800539e:	f7fc fcd3 	bl	8001d48 <HAL_TIM_IC_Start_DMA>
 80053a2:	e49f      	b.n	8004ce4 <main+0x890>
				filter_level = 10;
 80053a4:	230a      	movs	r3, #10
 80053a6:	e5da      	b.n	8004f5e <main+0xb0a>
 80053a8:	9b01      	ldr	r3, [sp, #4]
 80053aa:	6819      	ldr	r1, [r3, #0]
 80053ac:	4b66      	ldr	r3, [pc, #408]	; (8005548 <main+0x10f4>)
 80053ae:	781a      	ldrb	r2, [r3, #0]
 80053b0:	9b08      	ldr	r3, [sp, #32]
 80053b2:	681b      	ldr	r3, [r3, #0]
				if (bi_direction == 1 && (proshot == 0 && dshot == 0)) {
 80053b4:	2901      	cmp	r1, #1
 80053b6:	d000      	beq.n	80053ba <main+0xf66>
 80053b8:	e68a      	b.n	80050d0 <main+0xc7c>
 80053ba:	2a00      	cmp	r2, #0
 80053bc:	d12c      	bne.n	8005418 <main+0xfc4>
 80053be:	4961      	ldr	r1, [pc, #388]	; (8005544 <main+0x10f0>)
 80053c0:	7809      	ldrb	r1, [r1, #0]
 80053c2:	2900      	cmp	r1, #0
 80053c4:	d128      	bne.n	8005418 <main+0xfc4>
					if (newinput > 1100) {
 80053c6:	4965      	ldr	r1, [pc, #404]	; (800555c <main+0x1108>)
 80053c8:	428b      	cmp	r3, r1
 80053ca:	dc00      	bgt.n	80053ce <main+0xf7a>
 80053cc:	e1b5      	b.n	800573a <main+0x12e6>
						if (forward == dir_reversed) {
 80053ce:	4659      	mov	r1, fp
 80053d0:	6838      	ldr	r0, [r7, #0]
 80053d2:	6809      	ldr	r1, [r1, #0]
 80053d4:	4288      	cmp	r0, r1
 80053d6:	d100      	bne.n	80053da <main+0xf86>
 80053d8:	e3a7      	b.n	8005b2a <main+0x16d6>
						if (prop_brake_active == 0) {
 80053da:	9a00      	ldr	r2, [sp, #0]
 80053dc:	7812      	ldrb	r2, [r2, #0]
 80053de:	2a00      	cmp	r2, #0
 80053e0:	d105      	bne.n	80053ee <main+0xf9a>
							adjusted_input = (newinput - 1099) * 3;
 80053e2:	4a5f      	ldr	r2, [pc, #380]	; (8005560 <main+0x110c>)
 80053e4:	1899      	adds	r1, r3, r2
 80053e6:	2203      	movs	r2, #3
 80053e8:	434a      	muls	r2, r1
 80053ea:	4649      	mov	r1, r9
 80053ec:	600a      	str	r2, [r1, #0]
						if (vehicle_mode != 3) { // car mode requires throttle return to center before direction change
 80053ee:	4a36      	ldr	r2, [pc, #216]	; (80054c8 <main+0x1074>)
 80053f0:	7812      	ldrb	r2, [r2, #0]
 80053f2:	2a03      	cmp	r2, #3
 80053f4:	d001      	beq.n	80053fa <main+0xfa6>
							prop_brake_active = 0;
 80053f6:	9a00      	ldr	r2, [sp, #0]
 80053f8:	7015      	strb	r5, [r2, #0]
					if (newinput >= 760 && newinput < 1100) {
 80053fa:	4a5a      	ldr	r2, [pc, #360]	; (8005564 <main+0x1110>)
 80053fc:	4694      	mov	ip, r2
 80053fe:	2254      	movs	r2, #84	; 0x54
 8005400:	4463      	add	r3, ip
 8005402:	32ff      	adds	r2, #255	; 0xff
 8005404:	4293      	cmp	r3, r2
 8005406:	d838      	bhi.n	800547a <main+0x1026>
						adjusted_input = 0;
 8005408:	464b      	mov	r3, r9
 800540a:	601d      	str	r5, [r3, #0]
						prop_brake_active = 0;
 800540c:	9b00      	ldr	r3, [sp, #0]
 800540e:	701d      	strb	r5, [r3, #0]
 8005410:	e66e      	b.n	80050f0 <main+0xc9c>
				} else if ((proshot || dshot) && bi_direction) {
 8005412:	2900      	cmp	r1, #0
 8005414:	d100      	bne.n	8005418 <main+0xfc4>
 8005416:	e663      	b.n	80050e0 <main+0xc8c>
					if (newinput > 1097) {
 8005418:	4a53      	ldr	r2, [pc, #332]	; (8005568 <main+0x1114>)
 800541a:	4293      	cmp	r3, r2
 800541c:	dd10      	ble.n	8005440 <main+0xfec>
						if (forward == dir_reversed) {
 800541e:	465a      	mov	r2, fp
 8005420:	6839      	ldr	r1, [r7, #0]
 8005422:	6812      	ldr	r2, [r2, #0]
 8005424:	4291      	cmp	r1, r2
 8005426:	d106      	bne.n	8005436 <main+0xfe2>
							forward = 1 - dir_reversed;
 8005428:	2201      	movs	r2, #1
 800542a:	1a52      	subs	r2, r2, r1
 800542c:	603a      	str	r2, [r7, #0]
							bemf_counts = 0;
 800542e:	4642      	mov	r2, r8
 8005430:	6015      	str	r5, [r2, #0]
							brushed_direction_set = 0;
 8005432:	4a4e      	ldr	r2, [pc, #312]	; (800556c <main+0x1118>)
 8005434:	7015      	strb	r5, [r2, #0]
						adjusted_input = (newinput - 1100) * 2 + 100;
 8005436:	4649      	mov	r1, r9
 8005438:	4a4d      	ldr	r2, [pc, #308]	; (8005570 <main+0x111c>)
 800543a:	189a      	adds	r2, r3, r2
 800543c:	0052      	lsls	r2, r2, #1
 800543e:	600a      	str	r2, [r1, #0]
					if (newinput <= 1047 && newinput > 0) {
 8005440:	494c      	ldr	r1, [pc, #304]	; (8005574 <main+0x1120>)
 8005442:	1e5a      	subs	r2, r3, #1
 8005444:	428a      	cmp	r2, r1
 8005446:	d810      	bhi.n	800546a <main+0x1016>
						if (forward == (1 - dir_reversed)) {
 8005448:	465a      	mov	r2, fp
 800544a:	6811      	ldr	r1, [r2, #0]
 800544c:	2201      	movs	r2, #1
 800544e:	6838      	ldr	r0, [r7, #0]
 8005450:	1a52      	subs	r2, r2, r1
 8005452:	4282      	cmp	r2, r0
 8005454:	d104      	bne.n	8005460 <main+0x100c>
							bemf_counts = 0;
 8005456:	4642      	mov	r2, r8
 8005458:	6015      	str	r5, [r2, #0]
							brushed_direction_set = 0;
 800545a:	4a44      	ldr	r2, [pc, #272]	; (800556c <main+0x1118>)
							forward = dir_reversed;
 800545c:	6039      	str	r1, [r7, #0]
							brushed_direction_set = 0;
 800545e:	7015      	strb	r5, [r2, #0]
						adjusted_input = (newinput - 90) * 2;
 8005460:	001a      	movs	r2, r3
 8005462:	4649      	mov	r1, r9
 8005464:	3a5a      	subs	r2, #90	; 0x5a
 8005466:	0052      	lsls	r2, r2, #1
 8005468:	600a      	str	r2, [r1, #0]
					if ((newinput > 1047 && newinput < 1098) || newinput <= 120) {
 800546a:	4a43      	ldr	r2, [pc, #268]	; (8005578 <main+0x1124>)
 800546c:	189a      	adds	r2, r3, r2
 800546e:	2a31      	cmp	r2, #49	; 0x31
 8005470:	d800      	bhi.n	8005474 <main+0x1020>
 8005472:	e100      	b.n	8005676 <main+0x1222>
 8005474:	2b78      	cmp	r3, #120	; 0x78
 8005476:	dc00      	bgt.n	800547a <main+0x1026>
 8005478:	e0fd      	b.n	8005676 <main+0x1222>
 800547a:	464b      	mov	r3, r9
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	e631      	b.n	80050e4 <main+0xc90>
					if ((inputSet == 1) && (input == 0)) {
 8005480:	2c00      	cmp	r4, #0
 8005482:	d000      	beq.n	8005486 <main+0x1032>
 8005484:	e40b      	b.n	8004c9e <main+0x84a>
						armedcount++;
 8005486:	4b2a      	ldr	r3, [pc, #168]	; (8005530 <main+0x10dc>)
 8005488:	4a29      	ldr	r2, [pc, #164]	; (8005530 <main+0x10dc>)
 800548a:	681b      	ldr	r3, [r3, #0]
						HAL_Delay(1);
 800548c:	2001      	movs	r0, #1
						armedcount++;
 800548e:	9309      	str	r3, [sp, #36]	; 0x24
 8005490:	3301      	adds	r3, #1
 8005492:	6013      	str	r3, [r2, #0]
						HAL_Delay(1);
 8005494:	f7fa fff6 	bl	8000484 <HAL_Delay>
						if (armedcount > 2000) {
 8005498:	23fa      	movs	r3, #250	; 0xfa
 800549a:	4a25      	ldr	r2, [pc, #148]	; (8005530 <main+0x10dc>)
 800549c:	00db      	lsls	r3, r3, #3
 800549e:	6812      	ldr	r2, [r2, #0]
 80054a0:	9209      	str	r2, [sp, #36]	; 0x24
 80054a2:	429a      	cmp	r2, r3
 80054a4:	dd00      	ble.n	80054a8 <main+0x1054>
 80054a6:	e292      	b.n	80059ce <main+0x157a>
 80054a8:	6834      	ldr	r4, [r6, #0]
 80054aa:	f7ff fbf8 	bl	8004c9e <main+0x84a>
 80054ae:	46c0      	nop			; (mov r8, r8)
 80054b0:	40010400 	.word	0x40010400
 80054b4:	ffdfffff 	.word	0xffdfffff
 80054b8:	2000019c 	.word	0x2000019c
 80054bc:	20000244 	.word	0x20000244
 80054c0:	20000124 	.word	0x20000124
 80054c4:	40012c00 	.word	0x40012c00
 80054c8:	200000c4 	.word	0x200000c4
 80054cc:	2000012c 	.word	0x2000012c
 80054d0:	20000034 	.word	0x20000034
 80054d4:	20000030 	.word	0x20000030
 80054d8:	20000224 	.word	0x20000224
 80054dc:	20000126 	.word	0x20000126
 80054e0:	2000020a 	.word	0x2000020a
 80054e4:	200000d0 	.word	0x200000d0
 80054e8:	20000094 	.word	0x20000094
 80054ec:	20000398 	.word	0x20000398
 80054f0:	20000264 	.word	0x20000264
 80054f4:	200000c0 	.word	0x200000c0
 80054f8:	40000400 	.word	0x40000400
 80054fc:	2000026c 	.word	0x2000026c
 8005500:	20000194 	.word	0x20000194
 8005504:	20000254 	.word	0x20000254
 8005508:	20000198 	.word	0x20000198
 800550c:	20000298 	.word	0x20000298
 8005510:	20000110 	.word	0x20000110
 8005514:	2000010c 	.word	0x2000010c
 8005518:	20000268 	.word	0x20000268
 800551c:	20000228 	.word	0x20000228
 8005520:	200002a8 	.word	0x200002a8
 8005524:	20000114 	.word	0x20000114
 8005528:	20000190 	.word	0x20000190
 800552c:	20000189 	.word	0x20000189
 8005530:	20000118 	.word	0x20000118
 8005534:	200006fc 	.word	0x200006fc
 8005538:	20000200 	.word	0x20000200
 800553c:	40014000 	.word	0x40014000
 8005540:	40014400 	.word	0x40014400
 8005544:	20000188 	.word	0x20000188
 8005548:	20000220 	.word	0x20000220
 800554c:	2000022c 	.word	0x2000022c
 8005550:	20000008 	.word	0x20000008
 8005554:	20000414 	.word	0x20000414
 8005558:	200002ac 	.word	0x200002ac
 800555c:	0000044c 	.word	0x0000044c
 8005560:	fffffbb5 	.word	0xfffffbb5
 8005564:	fffffd08 	.word	0xfffffd08
 8005568:	00000449 	.word	0x00000449
 800556c:	20000125 	.word	0x20000125
 8005570:	fffffbe6 	.word	0xfffffbe6
 8005574:	00000416 	.word	0x00000416
 8005578:	fffffbe8 	.word	0xfffffbe8
if (sine_mode == 1){
 800557c:	4be3      	ldr	r3, [pc, #908]	; (800590c <main+0x14b8>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d110      	bne.n	80055a6 <main+0x1152>
			    sine_mode = 0;
 8005584:	4ae1      	ldr	r2, [pc, #900]	; (800590c <main+0x14b8>)
 8005586:	6015      	str	r5, [r2, #0]
			    TIM1->ARR = timer_one_period;
 8005588:	4ae1      	ldr	r2, [pc, #900]	; (8005910 <main+0x14bc>)
 800558a:	6812      	ldr	r2, [r2, #0]
 800558c:	9203      	str	r2, [sp, #12]
 800558e:	9903      	ldr	r1, [sp, #12]
 8005590:	4ae0      	ldr	r2, [pc, #896]	; (8005914 <main+0x14c0>)
 8005592:	62d1      	str	r1, [r2, #44]	; 0x2c
			    TIM1->CNT = 0;
 8005594:	6255      	str	r5, [r2, #36]	; 0x24
			    running = 1;
 8005596:	4ae0      	ldr	r2, [pc, #896]	; (8005918 <main+0x14c4>)
 8005598:	6013      	str	r3, [r2, #0]
			    commutate();
 800559a:	f7fd ffd9 	bl	8003550 <commutate>
 800559e:	4bde      	ldr	r3, [pc, #888]	; (8005918 <main+0x14c4>)
 80055a0:	6834      	ldr	r4, [r6, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	9303      	str	r3, [sp, #12]
				prop_brake_active = 0;
 80055a6:	9b00      	ldr	r3, [sp, #0]
				started = 1;
 80055a8:	4adc      	ldr	r2, [pc, #880]	; (800591c <main+0x14c8>)
				prop_brake_active = 0;
 80055aa:	701d      	strb	r5, [r3, #0]
				started = 1;
 80055ac:	2301      	movs	r3, #1
 80055ae:	6013      	str	r3, [r2, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80055b0:	4adb      	ldr	r2, [pc, #876]	; (8005920 <main+0x14cc>)
 80055b2:	0023      	movs	r3, r4
 80055b4:	4294      	cmp	r4, r2
 80055b6:	dd55      	ble.n	8005664 <main+0x1210>
 80055b8:	0013      	movs	r3, r2
 80055ba:	3b2f      	subs	r3, #47	; 0x2f
 80055bc:	0118      	lsls	r0, r3, #4
 80055be:	1ac3      	subs	r3, r0, r3
 80055c0:	0118      	lsls	r0, r3, #4
 80055c2:	1ac0      	subs	r0, r0, r3
 80055c4:	49d7      	ldr	r1, [pc, #860]	; (8005924 <main+0x14d0>)
 80055c6:	0040      	lsls	r0, r0, #1
 80055c8:	f7fa fe28 	bl	800021c <__divsi3>
				start_power = map((input), 47, 1998, 150, 600);
 80055cc:	4bd6      	ldr	r3, [pc, #856]	; (8005928 <main+0x14d4>)
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80055ce:	3096      	adds	r0, #150	; 0x96
				duty_cycle = (input  - 20);
 80055d0:	0021      	movs	r1, r4
				start_power = map((input), 47, 1998, 150, 600);
 80055d2:	6018      	str	r0, [r3, #0]
				duty_cycle = (input  - 20);
 80055d4:	4653      	mov	r3, sl
 80055d6:	3914      	subs	r1, #20
 80055d8:	6019      	str	r1, [r3, #0]
				if (bemf_counts < 20) {
 80055da:	4643      	mov	r3, r8
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2b13      	cmp	r3, #19
 80055e0:	dc09      	bgt.n	80055f6 <main+0x11a2>
					if (duty_cycle > 500) {
 80055e2:	22fa      	movs	r2, #250	; 0xfa
 80055e4:	0052      	lsls	r2, r2, #1
 80055e6:	4291      	cmp	r1, r2
 80055e8:	dd01      	ble.n	80055ee <main+0x119a>
						duty_cycle = 500;
 80055ea:	4651      	mov	r1, sl
 80055ec:	600a      	str	r2, [r1, #0]
				if (bemf_counts < 5 ){
 80055ee:	2b04      	cmp	r3, #4
 80055f0:	dc01      	bgt.n	80055f6 <main+0x11a2>
						duty_cycle = start_power;
 80055f2:	4653      	mov	r3, sl
 80055f4:	6018      	str	r0, [r3, #0]
				if (running) {
 80055f6:	9b03      	ldr	r3, [sp, #12]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d101      	bne.n	8005600 <main+0x11ac>
 80055fc:	f7ff fb67 	bl	8004cce <main+0x87a>
					if (duty_cycle > 1998) {                             // safety!!!
 8005600:	4653      	mov	r3, sl
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	001a      	movs	r2, r3
 8005606:	9303      	str	r3, [sp, #12]
 8005608:	4bc5      	ldr	r3, [pc, #788]	; (8005920 <main+0x14cc>)
 800560a:	429a      	cmp	r2, r3
 800560c:	dc02      	bgt.n	8005614 <main+0x11c0>
					if (duty_cycle < 60) {
 800560e:	2a3b      	cmp	r2, #59	; 0x3b
 8005610:	dc03      	bgt.n	800561a <main+0x11c6>
						duty_cycle = 60;
 8005612:	233c      	movs	r3, #60	; 0x3c
 8005614:	4652      	mov	r2, sl
 8005616:	9303      	str	r3, [sp, #12]
 8005618:	6013      	str	r3, [r2, #0]
					if (stall_protection && vehicle_mode == 2){
 800561a:	4bc4      	ldr	r3, [pc, #784]	; (800592c <main+0x14d8>)
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d004      	beq.n	800562c <main+0x11d8>
 8005622:	4bc3      	ldr	r3, [pc, #780]	; (8005930 <main+0x14dc>)
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	2b02      	cmp	r3, #2
 8005628:	d100      	bne.n	800562c <main+0x11d8>
 800562a:	e2b4      	b.n	8005b96 <main+0x1742>
					if(bi_polar){
 800562c:	4bc1      	ldr	r3, [pc, #772]	; (8005934 <main+0x14e0>)
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d100      	bne.n	8005636 <main+0x11e2>
 8005634:	e0b8      	b.n	80057a8 <main+0x1354>
	                 if (dither_count == 0){
 8005636:	4bc0      	ldr	r3, [pc, #768]	; (8005938 <main+0x14e4>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d000      	beq.n	8005640 <main+0x11ec>
 800563e:	e096      	b.n	800576e <main+0x131a>
 8005640:	0fe3      	lsrs	r3, r4, #31
 8005642:	191c      	adds	r4, r3, r4
					 if (forward){
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	1064      	asrs	r4, r4, #1
						TIM1->CCR2 = (TIM1->ARR /2) + (input / 2);
 8005648:	4ab2      	ldr	r2, [pc, #712]	; (8005914 <main+0x14c0>)
					 if (forward){
 800564a:	2b00      	cmp	r3, #0
 800564c:	d100      	bne.n	8005650 <main+0x11fc>
 800564e:	e2bf      	b.n	8005bd0 <main+0x177c>
						TIM1->CCR2 = (TIM1->ARR /2) + (input / 2);
 8005650:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005652:	085b      	lsrs	r3, r3, #1
 8005654:	191b      	adds	r3, r3, r4
 8005656:	6393      	str	r3, [r2, #56]	; 0x38
						TIM1->CCR3 = (TIM1->ARR /2) - (input / 2);
 8005658:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800565a:	085b      	lsrs	r3, r3, #1
 800565c:	1b1c      	subs	r4, r3, r4
 800565e:	63d4      	str	r4, [r2, #60]	; 0x3c
 8005660:	f7ff fb35 	bl	8004cce <main+0x87a>
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8005664:	2c2f      	cmp	r4, #47	; 0x2f
 8005666:	daa8      	bge.n	80055ba <main+0x1166>
 8005668:	232f      	movs	r3, #47	; 0x2f
 800566a:	e7a6      	b.n	80055ba <main+0x1166>
 800566c:	2b30      	cmp	r3, #48	; 0x30
 800566e:	db00      	blt.n	8005672 <main+0x121e>
 8005670:	e4e1      	b.n	8005036 <main+0xbe2>
 8005672:	2330      	movs	r3, #48	; 0x30
 8005674:	e4df      	b.n	8005036 <main+0xbe2>
						adjusted_input = 0;
 8005676:	464b      	mov	r3, r9
 8005678:	601d      	str	r5, [r3, #0]
 800567a:	e539      	b.n	80050f0 <main+0xc9c>
 800567c:	2103      	movs	r1, #3
 800567e:	4aaf      	ldr	r2, [pc, #700]	; (800593c <main+0x14e8>)
 8005680:	6813      	ldr	r3, [r2, #0]
 8005682:	438b      	bics	r3, r1
 8005684:	3902      	subs	r1, #2
 8005686:	430b      	orrs	r3, r1
 8005688:	6013      	str	r3, [r2, #0]
 800568a:	2390      	movs	r3, #144	; 0x90
		GPIOB->BSRR = GPIO_PIN_0;
 800568c:	6191      	str	r1, [r2, #24]
 800568e:	05db      	lsls	r3, r3, #23
 8005690:	6819      	ldr	r1, [r3, #0]
 8005692:	468c      	mov	ip, r1
 8005694:	4664      	mov	r4, ip
 8005696:	49aa      	ldr	r1, [pc, #680]	; (8005940 <main+0x14ec>)
 8005698:	400c      	ands	r4, r1
 800569a:	2180      	movs	r1, #128	; 0x80
 800569c:	02c9      	lsls	r1, r1, #11
 800569e:	4321      	orrs	r1, r4
 80056a0:	6019      	str	r1, [r3, #0]
		GPIOA->BRR = GPIO_PIN_9;
 80056a2:	2180      	movs	r1, #128	; 0x80
 80056a4:	0089      	lsls	r1, r1, #2
 80056a6:	6299      	str	r1, [r3, #40]	; 0x28
 80056a8:	6819      	ldr	r1, [r3, #0]
 80056aa:	468c      	mov	ip, r1
 80056ac:	4664      	mov	r4, ip
 80056ae:	49a5      	ldr	r1, [pc, #660]	; (8005944 <main+0x14f0>)
 80056b0:	400c      	ands	r4, r1
 80056b2:	2180      	movs	r1, #128	; 0x80
 80056b4:	01c9      	lsls	r1, r1, #7
 80056b6:	4321      	orrs	r1, r4
 80056b8:	6019      	str	r1, [r3, #0]
		GPIOA->BSRR = GPIO_PIN_7;
 80056ba:	2180      	movs	r1, #128	; 0x80
 80056bc:	6199      	str	r1, [r3, #24]
 80056be:	6819      	ldr	r1, [r3, #0]
 80056c0:	468c      	mov	ip, r1
 80056c2:	4664      	mov	r4, ip
 80056c4:	49a0      	ldr	r1, [pc, #640]	; (8005948 <main+0x14f4>)
 80056c6:	400c      	ands	r4, r1
 80056c8:	2180      	movs	r1, #128	; 0x80
 80056ca:	0249      	lsls	r1, r1, #9
 80056cc:	4321      	orrs	r1, r4
 80056ce:	6019      	str	r1, [r3, #0]
		GPIOA->BRR = GPIO_PIN_8;
 80056d0:	2180      	movs	r1, #128	; 0x80
 80056d2:	240c      	movs	r4, #12
 80056d4:	0049      	lsls	r1, r1, #1
 80056d6:	6299      	str	r1, [r3, #40]	; 0x28
 80056d8:	6811      	ldr	r1, [r2, #0]
 80056da:	43a1      	bics	r1, r4
 80056dc:	3c08      	subs	r4, #8
 80056de:	4321      	orrs	r1, r4
 80056e0:	6011      	str	r1, [r2, #0]
		GPIOB->BSRR = GPIO_PIN_1;
 80056e2:	2102      	movs	r1, #2
 80056e4:	6191      	str	r1, [r2, #24]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	4998      	ldr	r1, [pc, #608]	; (800594c <main+0x14f8>)
 80056ea:	4011      	ands	r1, r2
 80056ec:	2280      	movs	r2, #128	; 0x80
 80056ee:	0352      	lsls	r2, r2, #13
 80056f0:	430a      	orrs	r2, r1
 80056f2:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_10;
 80056f4:	2280      	movs	r2, #128	; 0x80
 80056f6:	00d2      	lsls	r2, r2, #3
 80056f8:	629a      	str	r2, [r3, #40]	; 0x28
					bemf_counts = 0;
 80056fa:	4643      	mov	r3, r8
 80056fc:	9a03      	ldr	r2, [sp, #12]
 80056fe:	601a      	str	r2, [r3, #0]
				if (prop_brake && prop_brake_active) {
 8005700:	2800      	cmp	r0, #0
 8005702:	d100      	bne.n	8005706 <main+0x12b2>
 8005704:	e40a      	b.n	8004f1c <main+0xac8>
 8005706:	9b00      	ldr	r3, [sp, #0]
 8005708:	781c      	ldrb	r4, [r3, #0]
 800570a:	f7ff fb51 	bl	8004db0 <main+0x95c>
						forward = 1 - dir_reversed;
 800570e:	465a      	mov	r2, fp
 8005710:	6812      	ldr	r2, [r2, #0]
 8005712:	3b13      	subs	r3, #19
 8005714:	1a9b      	subs	r3, r3, r2
 8005716:	603b      	str	r3, [r7, #0]
 8005718:	e4cf      	b.n	80050ba <main+0xc66>
						forward = dir_reversed;
 800571a:	465b      	mov	r3, fp
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	603b      	str	r3, [r7, #0]
 8005720:	e4cb      	b.n	80050ba <main+0xc66>
					zctimeout = 0;
 8005722:	4b8b      	ldr	r3, [pc, #556]	; (8005950 <main+0x14fc>)
 8005724:	601a      	str	r2, [r3, #0]
					startMotor(); // safety on for input testing   ************************************************
 8005726:	f7fe f835 	bl	8003794 <startMotor>
 800572a:	e427      	b.n	8004f7c <main+0xb28>
 800572c:	220a      	movs	r2, #10
 800572e:	4989      	ldr	r1, [pc, #548]	; (8005954 <main+0x1500>)
 8005730:	700a      	strb	r2, [r1, #0]
 8005732:	4989      	ldr	r1, [pc, #548]	; (8005958 <main+0x1504>)
 8005734:	3205      	adds	r2, #5
 8005736:	600a      	str	r2, [r1, #0]
 8005738:	e562      	b.n	8005200 <main+0xdac>
					if (newinput < 760) {
 800573a:	4988      	ldr	r1, [pc, #544]	; (800595c <main+0x1508>)
 800573c:	428b      	cmp	r3, r1
 800573e:	dd00      	ble.n	8005742 <main+0x12ee>
 8005740:	e655      	b.n	80053ee <main+0xf9a>
						if (forward == (1 - dir_reversed)) {
 8005742:	4659      	mov	r1, fp
 8005744:	2001      	movs	r0, #1
 8005746:	6809      	ldr	r1, [r1, #0]
 8005748:	4684      	mov	ip, r0
 800574a:	1a44      	subs	r4, r0, r1
 800574c:	6838      	ldr	r0, [r7, #0]
 800574e:	4284      	cmp	r4, r0
 8005750:	d100      	bne.n	8005754 <main+0x1300>
 8005752:	e247      	b.n	8005be4 <main+0x1790>
						if (prop_brake_active == 0) {
 8005754:	9a00      	ldr	r2, [sp, #0]
 8005756:	7812      	ldrb	r2, [r2, #0]
 8005758:	2a00      	cmp	r2, #0
 800575a:	d000      	beq.n	800575e <main+0x130a>
 800575c:	e647      	b.n	80053ee <main+0xf9a>
							adjusted_input = ((760 - newinput) * 3);
 800575e:	21be      	movs	r1, #190	; 0xbe
 8005760:	0089      	lsls	r1, r1, #2
 8005762:	1ac9      	subs	r1, r1, r3
 8005764:	3203      	adds	r2, #3
 8005766:	434a      	muls	r2, r1
 8005768:	4649      	mov	r1, r9
 800576a:	600a      	str	r2, [r1, #0]
 800576c:	e63f      	b.n	80053ee <main+0xf9a>
	                 if (dither_count == 1){
 800576e:	2b01      	cmp	r3, #1
 8005770:	d100      	bne.n	8005774 <main+0x1320>
 8005772:	e1e4      	b.n	8005b3e <main+0x16ea>
	                 if (dither_count == 2){
 8005774:	2b02      	cmp	r3, #2
 8005776:	d001      	beq.n	800577c <main+0x1328>
 8005778:	f7ff faa9 	bl	8004cce <main+0x87a>
 800577c:	0fe3      	lsrs	r3, r4, #31
 800577e:	191c      	adds	r4, r3, r4
 8005780:	4b77      	ldr	r3, [pc, #476]	; (8005960 <main+0x150c>)
 8005782:	1064      	asrs	r4, r4, #1
 8005784:	6818      	ldr	r0, [r3, #0]
	                 				 if (forward){
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	1a21      	subs	r1, r4, r0
	                 					TIM1->CCR2 = (TIM1->ARR /2) + (input / 2)- dither_amount;
 800578a:	4a62      	ldr	r2, [pc, #392]	; (8005914 <main+0x14c0>)
	                 				 if (forward){
 800578c:	2b00      	cmp	r3, #0
 800578e:	d100      	bne.n	8005792 <main+0x133e>
 8005790:	e1ea      	b.n	8005b68 <main+0x1714>
	                 					TIM1->CCR2 = (TIM1->ARR /2) + (input / 2)- dither_amount;
 8005792:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005794:	085b      	lsrs	r3, r3, #1
 8005796:	1859      	adds	r1, r3, r1
 8005798:	6391      	str	r1, [r2, #56]	; 0x38
	                 					TIM1->CCR3 = (TIM1->ARR /2) - (input / 2) + dither_amount;
 800579a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800579c:	085b      	lsrs	r3, r3, #1
 800579e:	181b      	adds	r3, r3, r0
 80057a0:	1b1b      	subs	r3, r3, r4
 80057a2:	63d3      	str	r3, [r2, #60]	; 0x3c
 80057a4:	f7ff fa93 	bl	8004cce <main+0x87a>
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80057a8:	4b6e      	ldr	r3, [pc, #440]	; (8005964 <main+0x1510>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2ba8      	cmp	r3, #168	; 0xa8
 80057ae:	dd1e      	ble.n	80057ee <main+0x139a>
 80057b0:	23a8      	movs	r3, #168	; 0xa8
 80057b2:	3b54      	subs	r3, #84	; 0x54
 80057b4:	0158      	lsls	r0, r3, #5
 80057b6:	1ac0      	subs	r0, r0, r3
 80057b8:	0080      	lsls	r0, r0, #2
 80057ba:	18c0      	adds	r0, r0, r3
 80057bc:	2154      	movs	r1, #84	; 0x54
 80057be:	00c0      	lsls	r0, r0, #3
 80057c0:	f7fa fd2c 	bl	800021c <__divsi3>
 80057c4:	23fa      	movs	r3, #250	; 0xfa
					adjusted_duty_cycle = (duty_cycle * tim1_arr)/2000 - 2;
 80057c6:	21fa      	movs	r1, #250	; 0xfa
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	18c4      	adds	r4, r0, r3
					adjusted_duty_cycle = (duty_cycle * tim1_arr)/2000 - 2;
 80057cc:	9803      	ldr	r0, [sp, #12]
					tim1_arr = map(commutation_interval, 84, 168, 1000, 2000);
 80057ce:	4b66      	ldr	r3, [pc, #408]	; (8005968 <main+0x1514>)
					adjusted_duty_cycle = (duty_cycle * tim1_arr)/2000 - 2;
 80057d0:	4360      	muls	r0, r4
					tim1_arr = map(commutation_interval, 84, 168, 1000, 2000);
 80057d2:	601c      	str	r4, [r3, #0]
					adjusted_duty_cycle = (duty_cycle * tim1_arr)/2000 - 2;
 80057d4:	00c9      	lsls	r1, r1, #3
 80057d6:	f7fa fd21 	bl	800021c <__divsi3>
 80057da:	4b64      	ldr	r3, [pc, #400]	; (800596c <main+0x1518>)
 80057dc:	3802      	subs	r0, #2
 80057de:	6018      	str	r0, [r3, #0]
					TIM1->ARR = tim1_arr;
 80057e0:	4b4c      	ldr	r3, [pc, #304]	; (8005914 <main+0x14c0>)
 80057e2:	62dc      	str	r4, [r3, #44]	; 0x2c
					TIM1->CCR1 = adjusted_duty_cycle;
 80057e4:	6358      	str	r0, [r3, #52]	; 0x34
					TIM1->CCR2 = adjusted_duty_cycle;
 80057e6:	6398      	str	r0, [r3, #56]	; 0x38
					TIM1->CCR3 = adjusted_duty_cycle;
 80057e8:	63d8      	str	r0, [r3, #60]	; 0x3c
 80057ea:	f7ff fa70 	bl	8004cce <main+0x87a>
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80057ee:	2b54      	cmp	r3, #84	; 0x54
 80057f0:	dadf      	bge.n	80057b2 <main+0x135e>
 80057f2:	2354      	movs	r3, #84	; 0x54
 80057f4:	e7dd      	b.n	80057b2 <main+0x135e>
					if (dshotcommand == 8) {
 80057f6:	2b08      	cmp	r3, #8
 80057f8:	d000      	beq.n	80057fc <main+0x13a8>
 80057fa:	e0c7      	b.n	800598c <main+0x1538>
						dir_reversed = 1;
 80057fc:	465a      	mov	r2, fp
 80057fe:	3b07      	subs	r3, #7
 8005800:	6013      	str	r3, [r2, #0]
 8005802:	e45a      	b.n	80050ba <main+0xc66>
						playInputTune();
 8005804:	f7fe f8a4 	bl	8003950 <playInputTune>
 8005808:	4b59      	ldr	r3, [pc, #356]	; (8005970 <main+0x151c>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	e44a      	b.n	80050a4 <main+0xc50>
 800580e:	4a4b      	ldr	r2, [pc, #300]	; (800593c <main+0x14e8>)
 8005810:	3103      	adds	r1, #3
 8005812:	6813      	ldr	r3, [r2, #0]
 8005814:	438b      	bics	r3, r1
 8005816:	3902      	subs	r1, #2
 8005818:	430b      	orrs	r3, r1
 800581a:	6013      	str	r3, [r2, #0]
		GPIOB->BRR = GPIO_PIN_0;
 800581c:	6291      	str	r1, [r2, #40]	; 0x28
 800581e:	f7ff f9e3 	bl	8004be8 <main+0x794>
 8005822:	2003      	movs	r0, #3
 8005824:	4a45      	ldr	r2, [pc, #276]	; (800593c <main+0x14e8>)
 8005826:	4c46      	ldr	r4, [pc, #280]	; (8005940 <main+0x14ec>)
 8005828:	6813      	ldr	r3, [r2, #0]
 800582a:	4383      	bics	r3, r0
 800582c:	3802      	subs	r0, #2
 800582e:	4303      	orrs	r3, r0
 8005830:	6013      	str	r3, [r2, #0]
 8005832:	2390      	movs	r3, #144	; 0x90
		GPIOB->BSRR = GPIO_PIN_0;
 8005834:	6190      	str	r0, [r2, #24]
 8005836:	05db      	lsls	r3, r3, #23
 8005838:	6818      	ldr	r0, [r3, #0]
 800583a:	4004      	ands	r4, r0
 800583c:	2080      	movs	r0, #128	; 0x80
 800583e:	02c0      	lsls	r0, r0, #11
 8005840:	4320      	orrs	r0, r4
 8005842:	6018      	str	r0, [r3, #0]
		GPIOA->BRR = GPIO_PIN_9;
 8005844:	2080      	movs	r0, #128	; 0x80
 8005846:	0080      	lsls	r0, r0, #2
 8005848:	6298      	str	r0, [r3, #40]	; 0x28
 800584a:	6818      	ldr	r0, [r3, #0]
 800584c:	4c3d      	ldr	r4, [pc, #244]	; (8005944 <main+0x14f0>)
 800584e:	4004      	ands	r4, r0
 8005850:	2080      	movs	r0, #128	; 0x80
 8005852:	01c0      	lsls	r0, r0, #7
 8005854:	4320      	orrs	r0, r4
 8005856:	6018      	str	r0, [r3, #0]
		GPIOA->BRR = GPIO_PIN_7;
 8005858:	2080      	movs	r0, #128	; 0x80
 800585a:	6298      	str	r0, [r3, #40]	; 0x28
 800585c:	6818      	ldr	r0, [r3, #0]
 800585e:	4c3a      	ldr	r4, [pc, #232]	; (8005948 <main+0x14f4>)
 8005860:	4004      	ands	r4, r0
 8005862:	2080      	movs	r0, #128	; 0x80
 8005864:	0240      	lsls	r0, r0, #9
 8005866:	4320      	orrs	r0, r4
 8005868:	6018      	str	r0, [r3, #0]
		GPIOA->BRR = GPIO_PIN_8;
 800586a:	2080      	movs	r0, #128	; 0x80
 800586c:	0040      	lsls	r0, r0, #1
 800586e:	6298      	str	r0, [r3, #40]	; 0x28
 8005870:	6813      	ldr	r3, [r2, #0]
		if (!comp_pwm || prop_brake_active){
 8005872:	2900      	cmp	r1, #0
 8005874:	d016      	beq.n	80058a4 <main+0x1450>
 8005876:	210c      	movs	r1, #12
 8005878:	438b      	bics	r3, r1
 800587a:	0019      	movs	r1, r3
 800587c:	2308      	movs	r3, #8
 800587e:	430b      	orrs	r3, r1
 8005880:	6013      	str	r3, [r2, #0]
 8005882:	2190      	movs	r1, #144	; 0x90
 8005884:	05c9      	lsls	r1, r1, #23
 8005886:	680b      	ldr	r3, [r1, #0]
 8005888:	4a30      	ldr	r2, [pc, #192]	; (800594c <main+0x14f8>)
 800588a:	401a      	ands	r2, r3
 800588c:	2380      	movs	r3, #128	; 0x80
 800588e:	039b      	lsls	r3, r3, #14
 8005890:	4313      	orrs	r3, r2
 8005892:	600b      	str	r3, [r1, #0]
 8005894:	f7ff f9d7 	bl	8004c46 <main+0x7f2>
		phaseAPWM();
 8005898:	f7fd fc5a 	bl	8003150 <phaseAPWM>
		phaseCPWM();
 800589c:	f7fd fcb2 	bl	8003204 <phaseCPWM>
 80058a0:	f7ff f9d1 	bl	8004c46 <main+0x7f2>
 80058a4:	310c      	adds	r1, #12
 80058a6:	438b      	bics	r3, r1
 80058a8:	3908      	subs	r1, #8
 80058aa:	430b      	orrs	r3, r1
 80058ac:	6013      	str	r3, [r2, #0]
			GPIOB->BRR = GPIO_PIN_1;
 80058ae:	2302      	movs	r3, #2
 80058b0:	6293      	str	r3, [r2, #40]	; 0x28
 80058b2:	e7e6      	b.n	8005882 <main+0x142e>
	if(bi_polar){
 80058b4:	2a00      	cmp	r2, #0
 80058b6:	d101      	bne.n	80058bc <main+0x1468>
 80058b8:	f7ff f919 	bl	8004aee <main+0x69a>
		comp_pwm = 1;
 80058bc:	9a02      	ldr	r2, [sp, #8]
 80058be:	7013      	strb	r3, [r2, #0]
 80058c0:	f7ff f915 	bl	8004aee <main+0x69a>
 80058c4:	4b2b      	ldr	r3, [pc, #172]	; (8005974 <main+0x1520>)
 80058c6:	9308      	str	r3, [sp, #32]
 80058c8:	f7ff f8f5 	bl	8004ab6 <main+0x662>
	  if (sine_mode_range > 52 || sine_mode_range < 0){
 80058cc:	4b2a      	ldr	r3, [pc, #168]	; (8005978 <main+0x1524>)
 80058ce:	9305      	str	r3, [sp, #20]
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	2b34      	cmp	r3, #52	; 0x34
 80058d4:	d901      	bls.n	80058da <main+0x1486>
 80058d6:	f7ff f91b 	bl	8004b10 <main+0x6bc>
 80058da:	f7ff f91c 	bl	8004b16 <main+0x6c2>
			 bi_direction = 1;
 80058de:	4b27      	ldr	r3, [pc, #156]	; (800597c <main+0x1528>)
			 comp_pwm = 0;                      // for complementary pwm , 0 for diode freewheeling
 80058e0:	9902      	ldr	r1, [sp, #8]
			 bi_direction = 1;
 80058e2:	001a      	movs	r2, r3
 80058e4:	9301      	str	r3, [sp, #4]
 80058e6:	2301      	movs	r3, #1
 80058e8:	6013      	str	r3, [r2, #0]
			 comp_pwm = 0;                      // for complementary pwm , 0 for diode freewheeling
 80058ea:	2200      	movs	r2, #0
 80058ec:	700a      	strb	r2, [r1, #0]
			 brake = 0;                          // apply full motor brake on stop
 80058ee:	4924      	ldr	r1, [pc, #144]	; (8005980 <main+0x152c>)
 80058f0:	600a      	str	r2, [r1, #0]
			 prop_brake = 1;
 80058f2:	4a24      	ldr	r2, [pc, #144]	; (8005984 <main+0x1530>)
			 brake = 0;                          // apply full motor brake on stop
 80058f4:	9106      	str	r1, [sp, #24]
			 prop_brake = 1;
 80058f6:	7013      	strb	r3, [r2, #0]
			 prop_brake_strength = 800;
 80058f8:	4b23      	ldr	r3, [pc, #140]	; (8005988 <main+0x1534>)
			 prop_brake = 1;
 80058fa:	9204      	str	r2, [sp, #16]
			 prop_brake_strength = 800;
 80058fc:	9307      	str	r3, [sp, #28]
 80058fe:	001a      	movs	r2, r3
 8005900:	23c8      	movs	r3, #200	; 0xc8
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	6013      	str	r3, [r2, #0]
 8005906:	f7ff f8c7 	bl	8004a98 <main+0x644>
 800590a:	46c0      	nop			; (mov r8, r8)
 800590c:	2000023c 	.word	0x2000023c
 8005910:	200000bc 	.word	0x200000bc
 8005914:	40012c00 	.word	0x40012c00
 8005918:	20000224 	.word	0x20000224
 800591c:	20000244 	.word	0x20000244
 8005920:	000007ce 	.word	0x000007ce
 8005924:	0000079f 	.word	0x0000079f
 8005928:	200000a8 	.word	0x200000a8
 800592c:	200000a4 	.word	0x200000a4
 8005930:	200000c4 	.word	0x200000c4
 8005934:	20000124 	.word	0x20000124
 8005938:	200002a8 	.word	0x200002a8
 800593c:	48000400 	.word	0x48000400
 8005940:	fff3ffff 	.word	0xfff3ffff
 8005944:	ffff3fff 	.word	0xffff3fff
 8005948:	fffcffff 	.word	0xfffcffff
 800594c:	ffcfffff 	.word	0xffcfffff
 8005950:	2000026c 	.word	0x2000026c
 8005954:	20000034 	.word	0x20000034
 8005958:	20000030 	.word	0x20000030
 800595c:	000002f7 	.word	0x000002f7
 8005960:	20000020 	.word	0x20000020
 8005964:	2000012c 	.word	0x2000012c
 8005968:	20000258 	.word	0x20000258
 800596c:	20000108 	.word	0x20000108
 8005970:	2000018c 	.word	0x2000018c
 8005974:	20000204 	.word	0x20000204
 8005978:	2000009c 	.word	0x2000009c
 800597c:	20000120 	.word	0x20000120
 8005980:	20000018 	.word	0x20000018
 8005984:	2000020b 	.word	0x2000020b
 8005988:	20000090 	.word	0x20000090
					if (dshotcommand == 9) {
 800598c:	2b09      	cmp	r3, #9
 800598e:	d109      	bne.n	80059a4 <main+0x1550>
						bi_direction = 0;
 8005990:	9b01      	ldr	r3, [sp, #4]
 8005992:	601d      	str	r5, [r3, #0]
						armed = 0;
 8005994:	4b98      	ldr	r3, [pc, #608]	; (8005bf8 <main+0x17a4>)
 8005996:	701d      	strb	r5, [r3, #0]
					dshotcommand = 0;
 8005998:	4b98      	ldr	r3, [pc, #608]	; (8005bfc <main+0x17a8>)
 800599a:	601d      	str	r5, [r3, #0]
 800599c:	9b08      	ldr	r3, [sp, #32]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f7ff fb9e 	bl	80050e0 <main+0xc8c>
					if (dshotcommand == 10) {
 80059a4:	2b0a      	cmp	r3, #10
 80059a6:	d10b      	bne.n	80059c0 <main+0x156c>
						bi_direction = 1;
 80059a8:	9a01      	ldr	r2, [sp, #4]
 80059aa:	3b09      	subs	r3, #9
 80059ac:	6013      	str	r3, [r2, #0]
						armed = 0;
 80059ae:	4b92      	ldr	r3, [pc, #584]	; (8005bf8 <main+0x17a4>)
 80059b0:	701d      	strb	r5, [r3, #0]
					dshotcommand = 0;
 80059b2:	4b92      	ldr	r3, [pc, #584]	; (8005bfc <main+0x17a8>)
 80059b4:	601d      	str	r5, [r3, #0]
 80059b6:	4b92      	ldr	r3, [pc, #584]	; (8005c00 <main+0x17ac>)
 80059b8:	781a      	ldrb	r2, [r3, #0]
 80059ba:	9b08      	ldr	r3, [sp, #32]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	e4fc      	b.n	80053ba <main+0xf66>
					if (dshotcommand == 12) {
 80059c0:	2b0c      	cmp	r3, #12
 80059c2:	d001      	beq.n	80059c8 <main+0x1574>
 80059c4:	f7ff fb79 	bl	80050ba <main+0xc66>
						storeEEpromConfig();
 80059c8:	f7fd fb72 	bl	80030b0 <storeEEpromConfig>
 80059cc:	e7fe      	b.n	80059cc <main+0x1578>
							armed = 1;
 80059ce:	4b8a      	ldr	r3, [pc, #552]	; (8005bf8 <main+0x17a4>)
 80059d0:	9a03      	ldr	r2, [sp, #12]
 80059d2:	701a      	strb	r2, [r3, #0]
							playInputTune();
 80059d4:	f7fd ffbc 	bl	8003950 <playInputTune>
 80059d8:	6834      	ldr	r4, [r6, #0]
 80059da:	f7ff f960 	bl	8004c9e <main+0x84a>
		 bi_direction = 1;
 80059de:	4b89      	ldr	r3, [pc, #548]	; (8005c04 <main+0x17b0>)
		 comp_pwm = 0;                      // for complementary pwm , 0 for diode freewheeling
 80059e0:	9902      	ldr	r1, [sp, #8]
		 bi_direction = 1;
 80059e2:	001a      	movs	r2, r3
 80059e4:	9301      	str	r3, [sp, #4]
 80059e6:	2301      	movs	r3, #1
 80059e8:	6013      	str	r3, [r2, #0]
		 comp_pwm = 0;                      // for complementary pwm , 0 for diode freewheeling
 80059ea:	2200      	movs	r2, #0
 80059ec:	700a      	strb	r2, [r1, #0]
		 brake = 0;                          // apply full motor brake on stop
 80059ee:	4986      	ldr	r1, [pc, #536]	; (8005c08 <main+0x17b4>)
 80059f0:	600a      	str	r2, [r1, #0]
		 prop_brake = 1;
 80059f2:	4a86      	ldr	r2, [pc, #536]	; (8005c0c <main+0x17b8>)
		 brake = 0;                          // apply full motor brake on stop
 80059f4:	9106      	str	r1, [sp, #24]
		 prop_brake = 1;
 80059f6:	7013      	strb	r3, [r2, #0]
		 prop_brake_strength = 900;
 80059f8:	4b85      	ldr	r3, [pc, #532]	; (8005c10 <main+0x17bc>)
		 prop_brake = 1;
 80059fa:	9204      	str	r2, [sp, #16]
		 prop_brake_strength = 900;
 80059fc:	9307      	str	r3, [sp, #28]
 80059fe:	001a      	movs	r2, r3
 8005a00:	23e1      	movs	r3, #225	; 0xe1
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	6013      	str	r3, [r2, #0]
 8005a06:	f7ff f847 	bl	8004a98 <main+0x644>
		 bi_direction = 1;
 8005a0a:	4b7e      	ldr	r3, [pc, #504]	; (8005c04 <main+0x17b0>)
 8005a0c:	001a      	movs	r2, r3
 8005a0e:	9301      	str	r3, [sp, #4]
 8005a10:	2301      	movs	r3, #1
 8005a12:	6013      	str	r3, [r2, #0]
		 comp_pwm = 1;                      // for complementary pwm , 0 for diode freewheeling
 8005a14:	9a02      	ldr	r2, [sp, #8]
 8005a16:	7013      	strb	r3, [r2, #0]
		 brake = 1;                          // apply full motor brake on stop
 8005a18:	4a7b      	ldr	r2, [pc, #492]	; (8005c08 <main+0x17b4>)
 8005a1a:	6013      	str	r3, [r2, #0]
 8005a1c:	4b7b      	ldr	r3, [pc, #492]	; (8005c0c <main+0x17b8>)
 8005a1e:	9206      	str	r2, [sp, #24]
 8005a20:	9304      	str	r3, [sp, #16]
 8005a22:	4b7b      	ldr	r3, [pc, #492]	; (8005c10 <main+0x17bc>)
 8005a24:	9307      	str	r3, [sp, #28]
 8005a26:	f7ff f837 	bl	8004a98 <main+0x644>
		loadEEpromConfig();
 8005a2a:	f7fd fb5b 	bl	80030e4 <loadEEpromConfig>
 8005a2e:	4b79      	ldr	r3, [pc, #484]	; (8005c14 <main+0x17c0>)
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	f7ff f81d 	bl	8004a70 <main+0x61c>
					falsecount++;
 8005a36:	4b78      	ldr	r3, [pc, #480]	; (8005c18 <main+0x17c4>)
 8005a38:	4a77      	ldr	r2, [pc, #476]	; (8005c18 <main+0x17c4>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	6013      	str	r3, [r2, #0]
					if (falsecount > falsethreshold){
 8005a40:	4a76      	ldr	r2, [pc, #472]	; (8005c1c <main+0x17c8>)
 8005a42:	6812      	ldr	r2, [r2, #0]
 8005a44:	9203      	str	r2, [sp, #12]
 8005a46:	4293      	cmp	r3, r2
 8005a48:	dc00      	bgt.n	8005a4c <main+0x15f8>
 8005a4a:	e411      	b.n	8005270 <main+0xe1c>
					upcompcount = 0;
 8005a4c:	4b74      	ldr	r3, [pc, #464]	; (8005c20 <main+0x17cc>)
 8005a4e:	601d      	str	r5, [r3, #0]
					zcfound = 0;
 8005a50:	4b74      	ldr	r3, [pc, #464]	; (8005c24 <main+0x17d0>)
 8005a52:	601d      	str	r5, [r3, #0]
					falsecount = 0;
 8005a54:	4b70      	ldr	r3, [pc, #448]	; (8005c18 <main+0x17c4>)
 8005a56:	601d      	str	r5, [r3, #0]
 8005a58:	e40a      	b.n	8005270 <main+0xe1c>
				if (HAL_COMP_GetOutputLevel(&hcomp1) == COMP_OUTPUTLEVEL_LOW){
 8005a5a:	4873      	ldr	r0, [pc, #460]	; (8005c28 <main+0x17d4>)
 8005a5c:	f7fa ffbe 	bl	80009dc <HAL_COMP_GetOutputLevel>
 8005a60:	2800      	cmp	r0, #0
 8005a62:	d10f      	bne.n	8005a84 <main+0x1630>
					falsecount++;
 8005a64:	4b6c      	ldr	r3, [pc, #432]	; (8005c18 <main+0x17c4>)
 8005a66:	4a6c      	ldr	r2, [pc, #432]	; (8005c18 <main+0x17c4>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	6013      	str	r3, [r2, #0]
					if (falsecount > falsethreshold){
 8005a6e:	4a6b      	ldr	r2, [pc, #428]	; (8005c1c <main+0x17c8>)
 8005a70:	6812      	ldr	r2, [r2, #0]
 8005a72:	9203      	str	r2, [sp, #12]
 8005a74:	4293      	cmp	r3, r2
 8005a76:	dd05      	ble.n	8005a84 <main+0x1630>
					compcount = 0;
 8005a78:	4b6c      	ldr	r3, [pc, #432]	; (8005c2c <main+0x17d8>)
 8005a7a:	6018      	str	r0, [r3, #0]
					zcfound = 0;
 8005a7c:	4b69      	ldr	r3, [pc, #420]	; (8005c24 <main+0x17d0>)
 8005a7e:	6018      	str	r0, [r3, #0]
					falsecount = 0;
 8005a80:	4b65      	ldr	r3, [pc, #404]	; (8005c18 <main+0x17c4>)
 8005a82:	6018      	str	r0, [r3, #0]
				if (HAL_COMP_GetOutputLevel(&hcomp1) == COMP_OUTPUTLEVEL_HIGH){
 8005a84:	4868      	ldr	r0, [pc, #416]	; (8005c28 <main+0x17d4>)
 8005a86:	f7fa ffa9 	bl	80009dc <HAL_COMP_GetOutputLevel>
 8005a8a:	2380      	movs	r3, #128	; 0x80
 8005a8c:	01db      	lsls	r3, r3, #7
 8005a8e:	4298      	cmp	r0, r3
 8005a90:	d105      	bne.n	8005a9e <main+0x164a>
					compcount++;
 8005a92:	4b66      	ldr	r3, [pc, #408]	; (8005c2c <main+0x17d8>)
 8005a94:	4a65      	ldr	r2, [pc, #404]	; (8005c2c <main+0x17d8>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	9303      	str	r3, [sp, #12]
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	6013      	str	r3, [r2, #0]
					if (compcount > threshold){
 8005a9e:	4b63      	ldr	r3, [pc, #396]	; (8005c2c <main+0x17d8>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	9303      	str	r3, [sp, #12]
 8005aa4:	4b62      	ldr	r3, [pc, #392]	; (8005c30 <main+0x17dc>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	9309      	str	r3, [sp, #36]	; 0x24
 8005aaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005aac:	9b03      	ldr	r3, [sp, #12]
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	dd31      	ble.n	8005b16 <main+0x16c2>
							zcfound = 1;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	4a5b      	ldr	r2, [pc, #364]	; (8005c24 <main+0x17d0>)
							thiszctime = TIM3->CNT;
 8005ab6:	4c5f      	ldr	r4, [pc, #380]	; (8005c34 <main+0x17e0>)
							zcfound = 1;
 8005ab8:	6013      	str	r3, [r2, #0]
							zctimeout = 0;
 8005aba:	4b5f      	ldr	r3, [pc, #380]	; (8005c38 <main+0x17e4>)
							bemf_counts++;
 8005abc:	4642      	mov	r2, r8
							zctimeout = 0;
 8005abe:	601d      	str	r5, [r3, #0]
							compcount = 0;
 8005ac0:	4b5a      	ldr	r3, [pc, #360]	; (8005c2c <main+0x17d8>)
						    commutation_interval = ((2*commutation_interval) + thiszctime) / 3;
 8005ac2:	2103      	movs	r1, #3
							compcount = 0;
 8005ac4:	601d      	str	r5, [r3, #0]
							bemf_counts++;
 8005ac6:	4643      	mov	r3, r8
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	3301      	adds	r3, #1
 8005acc:	6013      	str	r3, [r2, #0]
							falsecount = 0;
 8005ace:	4b52      	ldr	r3, [pc, #328]	; (8005c18 <main+0x17c4>)
							thiszctime = TIM3->CNT;
 8005ad0:	4a5a      	ldr	r2, [pc, #360]	; (8005c3c <main+0x17e8>)
							falsecount = 0;
 8005ad2:	601d      	str	r5, [r3, #0]
							thiszctime = TIM3->CNT;
 8005ad4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ad6:	6013      	str	r3, [r2, #0]
							forced_com_done = 0;
 8005ad8:	4a59      	ldr	r2, [pc, #356]	; (8005c40 <main+0x17ec>)
							TIM3->CNT = 0;
 8005ada:	6265      	str	r5, [r4, #36]	; 0x24
							forced_com_done = 0;
 8005adc:	6015      	str	r5, [r2, #0]
						    commutation_interval = ((2*commutation_interval) + thiszctime) / 3;
 8005ade:	4a59      	ldr	r2, [pc, #356]	; (8005c44 <main+0x17f0>)
 8005ae0:	6812      	ldr	r2, [r2, #0]
 8005ae2:	0050      	lsls	r0, r2, #1
 8005ae4:	18c0      	adds	r0, r0, r3
 8005ae6:	9203      	str	r2, [sp, #12]
 8005ae8:	f7fa fb98 	bl	800021c <__divsi3>
 8005aec:	4b55      	ldr	r3, [pc, #340]	; (8005c44 <main+0x17f0>)
							degree_time = commutation_interval >> 5;                          // about 1.85 degrees per unit
 8005aee:	4a56      	ldr	r2, [pc, #344]	; (8005c48 <main+0x17f4>)
						    commutation_interval = ((2*commutation_interval) + thiszctime) / 3;
 8005af0:	6018      	str	r0, [r3, #0]
							degree_time = commutation_interval >> 5;                          // about 1.85 degrees per unit
 8005af2:	1143      	asrs	r3, r0, #5
 8005af4:	6013      	str	r3, [r2, #0]
							advance = degree_time * advance_multiplier;                     //  * 16 would be about 30 degrees
 8005af6:	4a55      	ldr	r2, [pc, #340]	; (8005c4c <main+0x17f8>)
							waitTime = (commutation_interval >> 1) - advance;
 8005af8:	1040      	asrs	r0, r0, #1
							advance = degree_time * advance_multiplier;                     //  * 16 would be about 30 degrees
 8005afa:	6812      	ldr	r2, [r2, #0]
 8005afc:	4353      	muls	r3, r2
 8005afe:	4a54      	ldr	r2, [pc, #336]	; (8005c50 <main+0x17fc>)
							waitTime = (commutation_interval >> 1) - advance;
 8005b00:	1ac0      	subs	r0, r0, r3
							advance = degree_time * advance_multiplier;                     //  * 16 would be about 30 degrees
 8005b02:	6013      	str	r3, [r2, #0]
							waitTime = (commutation_interval >> 1) - advance;
 8005b04:	4b53      	ldr	r3, [pc, #332]	; (8005c54 <main+0x1800>)
 8005b06:	6018      	str	r0, [r3, #0]
							if (sensorless){
 8005b08:	4b53      	ldr	r3, [pc, #332]	; (8005c58 <main+0x1804>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	9303      	str	r3, [sp, #12]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d105      	bne.n	8005b1e <main+0x16ca>
							zcfound = 0;
 8005b12:	4b44      	ldr	r3, [pc, #272]	; (8005c24 <main+0x17d0>)
 8005b14:	601d      	str	r5, [r3, #0]
 8005b16:	4b51      	ldr	r3, [pc, #324]	; (8005c5c <main+0x1808>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f7ff fb9e 	bl	800525a <main+0xe06>
								while (TIM3->CNT  < waitTime){
 8005b1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b20:	4283      	cmp	r3, r0
 8005b22:	d3fc      	bcc.n	8005b1e <main+0x16ca>
								commutate();
 8005b24:	f7fd fd14 	bl	8003550 <commutate>
 8005b28:	e7f3      	b.n	8005b12 <main+0x16be>
							adjusted_input = 0;
 8005b2a:	4649      	mov	r1, r9
 8005b2c:	600a      	str	r2, [r1, #0]
							prop_brake_active = 1;
 8005b2e:	2101      	movs	r1, #1
 8005b30:	9c00      	ldr	r4, [sp, #0]
 8005b32:	7021      	strb	r1, [r4, #0]
							brushed_direction_set = 0;
 8005b34:	4c4a      	ldr	r4, [pc, #296]	; (8005c60 <main+0x180c>)
							forward = 1 - dir_reversed;
 8005b36:	1a09      	subs	r1, r1, r0
							brushed_direction_set = 0;
 8005b38:	7022      	strb	r2, [r4, #0]
							forward = 1 - dir_reversed;
 8005b3a:	6039      	str	r1, [r7, #0]
 8005b3c:	e457      	b.n	80053ee <main+0xf9a>
 8005b3e:	0fe3      	lsrs	r3, r4, #31
 8005b40:	191c      	adds	r4, r3, r4
 8005b42:	4b48      	ldr	r3, [pc, #288]	; (8005c64 <main+0x1810>)
 8005b44:	1064      	asrs	r4, r4, #1
 8005b46:	6819      	ldr	r1, [r3, #0]
	                 				 if (forward){
 8005b48:	683b      	ldr	r3, [r7, #0]
	                 					TIM1->CCR2 = (TIM1->ARR /2) + (input / 2) + dither_amount;
 8005b4a:	4a47      	ldr	r2, [pc, #284]	; (8005c68 <main+0x1814>)
	                 				 if (forward){
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d016      	beq.n	8005b7e <main+0x172a>
	                 					TIM1->CCR2 = (TIM1->ARR /2) + (input / 2) + dither_amount;
 8005b50:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005b52:	085b      	lsrs	r3, r3, #1
 8005b54:	185b      	adds	r3, r3, r1
 8005b56:	191b      	adds	r3, r3, r4
 8005b58:	6393      	str	r3, [r2, #56]	; 0x38
	                 					TIM1->CCR3 = (TIM1->ARR /2) - (input / 2) - dither_amount;
 8005b5a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005b5c:	085b      	lsrs	r3, r3, #1
 8005b5e:	1b1b      	subs	r3, r3, r4
 8005b60:	1a5b      	subs	r3, r3, r1
 8005b62:	63d3      	str	r3, [r2, #60]	; 0x3c
 8005b64:	f7ff f8b3 	bl	8004cce <main+0x87a>
	                 					 TIM1->CCR2 = (TIM1->ARR /2) - (input / 2) + dither_amount;
 8005b68:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005b6a:	085b      	lsrs	r3, r3, #1
 8005b6c:	181b      	adds	r3, r3, r0
 8005b6e:	1b1b      	subs	r3, r3, r4
 8005b70:	6393      	str	r3, [r2, #56]	; 0x38
	                 					 TIM1->CCR3 = (TIM1->ARR /2) + (input / 2) - dither_amount;
 8005b72:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005b74:	085b      	lsrs	r3, r3, #1
 8005b76:	1859      	adds	r1, r3, r1
 8005b78:	63d1      	str	r1, [r2, #60]	; 0x3c
 8005b7a:	f7ff f8a8 	bl	8004cce <main+0x87a>
	                 					 TIM1->CCR2 = (TIM1->ARR /2) - (input / 2)- dither_amount;
 8005b7e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005b80:	085b      	lsrs	r3, r3, #1
 8005b82:	1b1b      	subs	r3, r3, r4
 8005b84:	1a5b      	subs	r3, r3, r1
 8005b86:	6393      	str	r3, [r2, #56]	; 0x38
	                 					 TIM1->CCR3 = (TIM1->ARR /2) + (input / 2) + dither_amount;
 8005b88:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005b8a:	085b      	lsrs	r3, r3, #1
 8005b8c:	185b      	adds	r3, r3, r1
 8005b8e:	191c      	adds	r4, r3, r4
 8005b90:	63d4      	str	r4, [r2, #60]	; 0x3c
 8005b92:	f7ff f89c 	bl	8004cce <main+0x87a>
						if (commutation_interval > 10000){
 8005b96:	4b2b      	ldr	r3, [pc, #172]	; (8005c44 <main+0x17f0>)
 8005b98:	4a34      	ldr	r2, [pc, #208]	; (8005c6c <main+0x1818>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	dc00      	bgt.n	8005ba2 <main+0x174e>
 8005ba0:	e544      	b.n	800562c <main+0x11d8>
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8005ba2:	4a33      	ldr	r2, [pc, #204]	; (8005c70 <main+0x181c>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	dd00      	ble.n	8005baa <main+0x1756>
 8005ba8:	0013      	movs	r3, r2
 8005baa:	4a32      	ldr	r2, [pc, #200]	; (8005c74 <main+0x1820>)
 8005bac:	2046      	movs	r0, #70	; 0x46
 8005bae:	4694      	mov	ip, r2
 8005bb0:	4463      	add	r3, ip
 8005bb2:	4358      	muls	r0, r3
 8005bb4:	492d      	ldr	r1, [pc, #180]	; (8005c6c <main+0x1818>)
 8005bb6:	f7fa fb31 	bl	800021c <__divsi3>
boost_level = map(commutation_interval,10000,20000,10,80);
 8005bba:	4b2f      	ldr	r3, [pc, #188]	; (8005c78 <main+0x1824>)
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8005bbc:	300a      	adds	r0, #10
boost_level = map(commutation_interval,10000,20000,10,80);
 8005bbe:	6018      	str	r0, [r3, #0]
							duty_cycle = duty_cycle + boost_level;
 8005bc0:	9b03      	ldr	r3, [sp, #12]
 8005bc2:	4652      	mov	r2, sl
 8005bc4:	469c      	mov	ip, r3
 8005bc6:	4484      	add	ip, r0
 8005bc8:	4663      	mov	r3, ip
 8005bca:	9303      	str	r3, [sp, #12]
 8005bcc:	6013      	str	r3, [r2, #0]
 8005bce:	e52d      	b.n	800562c <main+0x11d8>
						 TIM1->CCR2 = (TIM1->ARR /2) - (input / 2);
 8005bd0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005bd2:	085b      	lsrs	r3, r3, #1
 8005bd4:	1b1b      	subs	r3, r3, r4
 8005bd6:	6393      	str	r3, [r2, #56]	; 0x38
						 TIM1->CCR3 = (TIM1->ARR /2) + (input / 2);
 8005bd8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005bda:	085b      	lsrs	r3, r3, #1
 8005bdc:	191c      	adds	r4, r3, r4
 8005bde:	63d4      	str	r4, [r2, #60]	; 0x3c
 8005be0:	f7ff f875 	bl	8004cce <main+0x87a>
							prop_brake_active = 1;
 8005be4:	4664      	mov	r4, ip
 8005be6:	9800      	ldr	r0, [sp, #0]
							forward = dir_reversed;
 8005be8:	6039      	str	r1, [r7, #0]
							prop_brake_active = 1;
 8005bea:	7004      	strb	r4, [r0, #0]
							adjusted_input = 0;
 8005bec:	4648      	mov	r0, r9
							brushed_direction_set = 0;
 8005bee:	491c      	ldr	r1, [pc, #112]	; (8005c60 <main+0x180c>)
							adjusted_input = 0;
 8005bf0:	6002      	str	r2, [r0, #0]
							brushed_direction_set = 0;
 8005bf2:	700a      	strb	r2, [r1, #0]
 8005bf4:	f7ff fbfb 	bl	80053ee <main+0xf9a>
 8005bf8:	20000114 	.word	0x20000114
 8005bfc:	2000018c 	.word	0x2000018c
 8005c00:	20000220 	.word	0x20000220
 8005c04:	20000120 	.word	0x20000120
 8005c08:	20000018 	.word	0x20000018
 8005c0c:	2000020b 	.word	0x2000020b
 8005c10:	20000090 	.word	0x20000090
 8005c14:	200000c4 	.word	0x200000c4
 8005c18:	20000194 	.word	0x20000194
 8005c1c:	2000002c 	.word	0x2000002c
 8005c20:	20000264 	.word	0x20000264
 8005c24:	200000d0 	.word	0x200000d0
 8005c28:	20000398 	.word	0x20000398
 8005c2c:	20000130 	.word	0x20000130
 8005c30:	200000b4 	.word	0x200000b4
 8005c34:	40000400 	.word	0x40000400
 8005c38:	2000026c 	.word	0x2000026c
 8005c3c:	20000254 	.word	0x20000254
 8005c40:	20000198 	.word	0x20000198
 8005c44:	2000012c 	.word	0x2000012c
 8005c48:	20000298 	.word	0x20000298
 8005c4c:	20000110 	.word	0x20000110
 8005c50:	2000010c 	.word	0x2000010c
 8005c54:	20000268 	.word	0x20000268
 8005c58:	20000228 	.word	0x20000228
 8005c5c:	20000094 	.word	0x20000094
 8005c60:	20000125 	.word	0x20000125
 8005c64:	20000020 	.word	0x20000020
 8005c68:	40012c00 	.word	0x40012c00
 8005c6c:	00002710 	.word	0x00002710
 8005c70:	00004e20 	.word	0x00004e20
 8005c74:	ffffd8f0 	.word	0xffffd8f0
 8005c78:	20000014 	.word	0x20000014

08005c7c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005c7c:	4770      	bx	lr
 8005c7e:	46c0      	nop			; (mov r8, r8)

08005c80 <HAL_TIM_PWM_MspInit>:
/* USER CODE END PFP */

/* External functions --------------------------------------------------------*/
/* USER CODE BEGIN ExternalFunctions */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005c80:	b530      	push	{r4, r5, lr}

  if(htim_pwm->Instance==TIM15)
 8005c82:	4b1c      	ldr	r3, [pc, #112]	; (8005cf4 <HAL_TIM_PWM_MspInit+0x74>)
 8005c84:	6802      	ldr	r2, [r0, #0]
{
 8005c86:	b083      	sub	sp, #12
 8005c88:	0004      	movs	r4, r0
  if(htim_pwm->Instance==TIM15)
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d001      	beq.n	8005c92 <HAL_TIM_PWM_MspInit+0x12>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8005c8e:	b003      	add	sp, #12
 8005c90:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005c92:	2080      	movs	r0, #128	; 0x80
 8005c94:	4a18      	ldr	r2, [pc, #96]	; (8005cf8 <HAL_TIM_PWM_MspInit+0x78>)
 8005c96:	0240      	lsls	r0, r0, #9
 8005c98:	6991      	ldr	r1, [r2, #24]
    hdma_tim15_ch1_up_trig_com.Instance = DMA1_Channel5;
 8005c9a:	4d18      	ldr	r5, [pc, #96]	; (8005cfc <HAL_TIM_PWM_MspInit+0x7c>)
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005c9c:	4301      	orrs	r1, r0
 8005c9e:	6191      	str	r1, [r2, #24]
 8005ca0:	6993      	ldr	r3, [r2, #24]
    hdma_tim15_ch1_up_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 8005ca2:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005ca4:	4003      	ands	r3, r0
 8005ca6:	9301      	str	r3, [sp, #4]
 8005ca8:	9b01      	ldr	r3, [sp, #4]
    hdma_tim15_ch1_up_trig_com.Instance = DMA1_Channel5;
 8005caa:	4b15      	ldr	r3, [pc, #84]	; (8005d00 <HAL_TIM_PWM_MspInit+0x80>)
    hdma_tim15_ch1_up_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 8005cac:	60ea      	str	r2, [r5, #12]
    hdma_tim15_ch1_up_trig_com.Instance = DMA1_Channel5;
 8005cae:	602b      	str	r3, [r5, #0]
    hdma_tim15_ch1_up_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005cb0:	2310      	movs	r3, #16
    hdma_tim15_ch1_up_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005cb2:	3280      	adds	r2, #128	; 0x80
 8005cb4:	612a      	str	r2, [r5, #16]
    hdma_tim15_ch1_up_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005cb6:	2280      	movs	r2, #128	; 0x80
    hdma_tim15_ch1_up_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005cb8:	606b      	str	r3, [r5, #4]
    hdma_tim15_ch1_up_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 8005cba:	2300      	movs	r3, #0
    hdma_tim15_ch1_up_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005cbc:	0112      	lsls	r2, r2, #4
    if (HAL_DMA_Init(&hdma_tim15_ch1_up_trig_com) != HAL_OK)
 8005cbe:	0028      	movs	r0, r5
    hdma_tim15_ch1_up_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 8005cc0:	60ab      	str	r3, [r5, #8]
    hdma_tim15_ch1_up_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005cc2:	616a      	str	r2, [r5, #20]
    hdma_tim15_ch1_up_trig_com.Init.Mode = DMA_NORMAL;
 8005cc4:	61ab      	str	r3, [r5, #24]
    hdma_tim15_ch1_up_trig_com.Init.Priority = DMA_PRIORITY_LOW;
 8005cc6:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_tim15_ch1_up_trig_com) != HAL_OK)
 8005cc8:	f7fa ff10 	bl	8000aec <HAL_DMA_Init>
 8005ccc:	2800      	cmp	r0, #0
 8005cce:	d10d      	bne.n	8005cec <HAL_TIM_PWM_MspInit+0x6c>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim15_ch1_up_trig_com);
 8005cd0:	6265      	str	r5, [r4, #36]	; 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim15_ch1_up_trig_com);
 8005cd2:	6225      	str	r5, [r4, #32]
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim15_ch1_up_trig_com);
 8005cd4:	63a5      	str	r5, [r4, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim15_ch1_up_trig_com);
 8005cd6:	6365      	str	r5, [r4, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM15_IRQn, 1, 0);
 8005cd8:	2200      	movs	r2, #0
 8005cda:	2101      	movs	r1, #1
 8005cdc:	2014      	movs	r0, #20
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim15_ch1_up_trig_com);
 8005cde:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM15_IRQn, 1, 0);
 8005ce0:	f7fa feb0 	bl	8000a44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8005ce4:	2014      	movs	r0, #20
 8005ce6:	f7fa fed9 	bl	8000a9c <HAL_NVIC_EnableIRQ>
}
 8005cea:	e7d0      	b.n	8005c8e <HAL_TIM_PWM_MspInit+0xe>
      Error_Handler();
 8005cec:	f7ff ffc6 	bl	8005c7c <Error_Handler>
 8005cf0:	e7ee      	b.n	8005cd0 <HAL_TIM_PWM_MspInit+0x50>
 8005cf2:	46c0      	nop			; (mov r8, r8)
 8005cf4:	40014000 	.word	0x40014000
 8005cf8:	40021000 	.word	0x40021000
 8005cfc:	20000558 	.word	0x20000558
 8005d00:	40020058 	.word	0x40020058

08005d04 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d04:	2201      	movs	r2, #1
 8005d06:	4b0a      	ldr	r3, [pc, #40]	; (8005d30 <HAL_MspInit+0x2c>)
{
 8005d08:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d0a:	6999      	ldr	r1, [r3, #24]
 8005d0c:	4311      	orrs	r1, r2
 8005d0e:	6199      	str	r1, [r3, #24]
 8005d10:	6999      	ldr	r1, [r3, #24]
 8005d12:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8005d14:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d16:	9200      	str	r2, [sp, #0]
 8005d18:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005d1a:	69da      	ldr	r2, [r3, #28]
 8005d1c:	0549      	lsls	r1, r1, #21
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	61da      	str	r2, [r3, #28]
 8005d22:	69db      	ldr	r3, [r3, #28]
 8005d24:	400b      	ands	r3, r1
 8005d26:	9301      	str	r3, [sp, #4]
 8005d28:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005d2a:	b002      	add	sp, #8
 8005d2c:	4770      	bx	lr
 8005d2e:	46c0      	nop			; (mov r8, r8)
 8005d30:	40021000 	.word	0x40021000

08005d34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005d34:	b510      	push	{r4, lr}
 8005d36:	0004      	movs	r4, r0
 8005d38:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d3a:	2214      	movs	r2, #20
 8005d3c:	2100      	movs	r1, #0
 8005d3e:	a803      	add	r0, sp, #12
 8005d40:	f000 fa80 	bl	8006244 <memset>
  if(hadc->Instance==ADC1)
 8005d44:	4b15      	ldr	r3, [pc, #84]	; (8005d9c <HAL_ADC_MspInit+0x68>)
 8005d46:	6822      	ldr	r2, [r4, #0]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d001      	beq.n	8005d50 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005d4c:	b008      	add	sp, #32
 8005d4e:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005d50:	2080      	movs	r0, #128	; 0x80
 8005d52:	4b13      	ldr	r3, [pc, #76]	; (8005da0 <HAL_ADC_MspInit+0x6c>)
 8005d54:	0080      	lsls	r0, r0, #2
 8005d56:	6999      	ldr	r1, [r3, #24]
 8005d58:	4301      	orrs	r1, r0
 8005d5a:	6199      	str	r1, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d5c:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005d5e:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d60:	0289      	lsls	r1, r1, #10
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005d62:	4002      	ands	r2, r0
 8005d64:	9201      	str	r2, [sp, #4]
 8005d66:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d68:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d6a:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d6c:	430a      	orrs	r2, r1
 8005d6e:	615a      	str	r2, [r3, #20]
 8005d70:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d72:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d74:	400b      	ands	r3, r1
 8005d76:	9302      	str	r3, [sp, #8]
 8005d78:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8005d7a:	2348      	movs	r3, #72	; 0x48
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d7c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8005d7e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005d80:	3b45      	subs	r3, #69	; 0x45
 8005d82:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d84:	f7fb f942 	bl	800100c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8005d88:	2200      	movs	r2, #0
 8005d8a:	2100      	movs	r1, #0
 8005d8c:	200c      	movs	r0, #12
 8005d8e:	f7fa fe59 	bl	8000a44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8005d92:	200c      	movs	r0, #12
 8005d94:	f7fa fe82 	bl	8000a9c <HAL_NVIC_EnableIRQ>
}
 8005d98:	e7d8      	b.n	8005d4c <HAL_ADC_MspInit+0x18>
 8005d9a:	46c0      	nop			; (mov r8, r8)
 8005d9c:	40012400 	.word	0x40012400
 8005da0:	40021000 	.word	0x40021000

08005da4 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8005da4:	b510      	push	{r4, lr}
 8005da6:	0004      	movs	r4, r0
 8005da8:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005daa:	2214      	movs	r2, #20
 8005dac:	2100      	movs	r1, #0
 8005dae:	a801      	add	r0, sp, #4
 8005db0:	f000 fa48 	bl	8006244 <memset>
  if(hcomp->Instance==COMP1)
 8005db4:	4b10      	ldr	r3, [pc, #64]	; (8005df8 <HAL_COMP_MspInit+0x54>)
 8005db6:	6822      	ldr	r2, [r4, #0]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d001      	beq.n	8005dc0 <HAL_COMP_MspInit+0x1c>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 8005dbc:	b006      	add	sp, #24
 8005dbe:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005dc0:	2080      	movs	r0, #128	; 0x80
 8005dc2:	4a0e      	ldr	r2, [pc, #56]	; (8005dfc <HAL_COMP_MspInit+0x58>)
 8005dc4:	0280      	lsls	r0, r0, #10
 8005dc6:	6951      	ldr	r1, [r2, #20]
 8005dc8:	4301      	orrs	r1, r0
 8005dca:	6151      	str	r1, [r2, #20]
 8005dcc:	6953      	ldr	r3, [r2, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005dce:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005dd0:	4003      	ands	r3, r0
 8005dd2:	9300      	str	r3, [sp, #0]
 8005dd4:	9b00      	ldr	r3, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005dd6:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8005dd8:	2322      	movs	r3, #34	; 0x22
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005dda:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8005ddc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005dde:	3b1f      	subs	r3, #31
 8005de0:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005de2:	f7fb f913 	bl	800100c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8005de6:	2200      	movs	r2, #0
 8005de8:	2100      	movs	r1, #0
 8005dea:	200c      	movs	r0, #12
 8005dec:	f7fa fe2a 	bl	8000a44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8005df0:	200c      	movs	r0, #12
 8005df2:	f7fa fe53 	bl	8000a9c <HAL_NVIC_EnableIRQ>
}
 8005df6:	e7e1      	b.n	8005dbc <HAL_COMP_MspInit+0x18>
 8005df8:	4001001c 	.word	0x4001001c
 8005dfc:	40021000 	.word	0x40021000

08005e00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005e00:	b530      	push	{r4, r5, lr}
 8005e02:	0004      	movs	r4, r0
 8005e04:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e06:	2214      	movs	r2, #20
 8005e08:	2100      	movs	r1, #0
 8005e0a:	a809      	add	r0, sp, #36	; 0x24
 8005e0c:	f000 fa1a 	bl	8006244 <memset>
  if(htim_base->Instance==TIM1)
 8005e10:	6823      	ldr	r3, [r4, #0]
 8005e12:	4a78      	ldr	r2, [pc, #480]	; (8005ff4 <HAL_TIM_Base_MspInit+0x1f4>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d01b      	beq.n	8005e50 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8005e18:	2280      	movs	r2, #128	; 0x80
 8005e1a:	05d2      	lsls	r2, r2, #23
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d037      	beq.n	8005e90 <HAL_TIM_Base_MspInit+0x90>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8005e20:	4a75      	ldr	r2, [pc, #468]	; (8005ff8 <HAL_TIM_Base_MspInit+0x1f8>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d01f      	beq.n	8005e66 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM6)
 8005e26:	4a75      	ldr	r2, [pc, #468]	; (8005ffc <HAL_TIM_Base_MspInit+0x1fc>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d100      	bne.n	8005e2e <HAL_TIM_Base_MspInit+0x2e>
 8005e2c:	e06c      	b.n	8005f08 <HAL_TIM_Base_MspInit+0x108>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(htim_base->Instance==TIM14)
 8005e2e:	4a74      	ldr	r2, [pc, #464]	; (8006000 <HAL_TIM_Base_MspInit+0x200>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d100      	bne.n	8005e36 <HAL_TIM_Base_MspInit+0x36>
 8005e34:	e07a      	b.n	8005f2c <HAL_TIM_Base_MspInit+0x12c>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
  else if(htim_base->Instance==TIM15)
 8005e36:	4a73      	ldr	r2, [pc, #460]	; (8006004 <HAL_TIM_Base_MspInit+0x204>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d100      	bne.n	8005e3e <HAL_TIM_Base_MspInit+0x3e>
 8005e3c:	e089      	b.n	8005f52 <HAL_TIM_Base_MspInit+0x152>

  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
  else if(htim_base->Instance==TIM16)
 8005e3e:	4a72      	ldr	r2, [pc, #456]	; (8006008 <HAL_TIM_Base_MspInit+0x208>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d100      	bne.n	8005e46 <HAL_TIM_Base_MspInit+0x46>
 8005e44:	e0c3      	b.n	8005fce <HAL_TIM_Base_MspInit+0x1ce>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
  else if(htim_base->Instance==TIM17)
 8005e46:	4a71      	ldr	r2, [pc, #452]	; (800600c <HAL_TIM_Base_MspInit+0x20c>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d016      	beq.n	8005e7a <HAL_TIM_Base_MspInit+0x7a>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8005e4c:	b00f      	add	sp, #60	; 0x3c
 8005e4e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005e50:	2080      	movs	r0, #128	; 0x80
 8005e52:	4a6f      	ldr	r2, [pc, #444]	; (8006010 <HAL_TIM_Base_MspInit+0x210>)
 8005e54:	0100      	lsls	r0, r0, #4
 8005e56:	6991      	ldr	r1, [r2, #24]
 8005e58:	4301      	orrs	r1, r0
 8005e5a:	6191      	str	r1, [r2, #24]
 8005e5c:	6993      	ldr	r3, [r2, #24]
 8005e5e:	4003      	ands	r3, r0
 8005e60:	9300      	str	r3, [sp, #0]
 8005e62:	9b00      	ldr	r3, [sp, #0]
 8005e64:	e7f2      	b.n	8005e4c <HAL_TIM_Base_MspInit+0x4c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005e66:	2302      	movs	r3, #2
 8005e68:	4a69      	ldr	r2, [pc, #420]	; (8006010 <HAL_TIM_Base_MspInit+0x210>)
 8005e6a:	69d1      	ldr	r1, [r2, #28]
 8005e6c:	4319      	orrs	r1, r3
 8005e6e:	61d1      	str	r1, [r2, #28]
 8005e70:	69d2      	ldr	r2, [r2, #28]
 8005e72:	4013      	ands	r3, r2
 8005e74:	9302      	str	r3, [sp, #8]
 8005e76:	9b02      	ldr	r3, [sp, #8]
 8005e78:	e7e8      	b.n	8005e4c <HAL_TIM_Base_MspInit+0x4c>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8005e7a:	2080      	movs	r0, #128	; 0x80
 8005e7c:	4a64      	ldr	r2, [pc, #400]	; (8006010 <HAL_TIM_Base_MspInit+0x210>)
 8005e7e:	02c0      	lsls	r0, r0, #11
 8005e80:	6991      	ldr	r1, [r2, #24]
 8005e82:	4301      	orrs	r1, r0
 8005e84:	6191      	str	r1, [r2, #24]
 8005e86:	6993      	ldr	r3, [r2, #24]
 8005e88:	4003      	ands	r3, r0
 8005e8a:	9308      	str	r3, [sp, #32]
 8005e8c:	9b08      	ldr	r3, [sp, #32]
}
 8005e8e:	e7dd      	b.n	8005e4c <HAL_TIM_Base_MspInit+0x4c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005e90:	2301      	movs	r3, #1
 8005e92:	4a5f      	ldr	r2, [pc, #380]	; (8006010 <HAL_TIM_Base_MspInit+0x210>)
    hdma_tim2_up.Instance = DMA1_Channel2;
 8005e94:	4d5f      	ldr	r5, [pc, #380]	; (8006014 <HAL_TIM_Base_MspInit+0x214>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005e96:	69d1      	ldr	r1, [r2, #28]
    if (HAL_DMA_Init(&hdma_tim2_up) != HAL_OK)
 8005e98:	0028      	movs	r0, r5
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005e9a:	4319      	orrs	r1, r3
 8005e9c:	61d1      	str	r1, [r2, #28]
 8005e9e:	69d2      	ldr	r2, [r2, #28]
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	9301      	str	r3, [sp, #4]
    hdma_tim2_up.Init.MemInc = DMA_MINC_ENABLE;
 8005ea4:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005ea6:	9b01      	ldr	r3, [sp, #4]
    hdma_tim2_up.Instance = DMA1_Channel2;
 8005ea8:	4b5b      	ldr	r3, [pc, #364]	; (8006018 <HAL_TIM_Base_MspInit+0x218>)
    hdma_tim2_up.Init.MemInc = DMA_MINC_ENABLE;
 8005eaa:	60ea      	str	r2, [r5, #12]
    hdma_tim2_up.Instance = DMA1_Channel2;
 8005eac:	602b      	str	r3, [r5, #0]
    hdma_tim2_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005eae:	2310      	movs	r3, #16
    hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005eb0:	3281      	adds	r2, #129	; 0x81
 8005eb2:	32ff      	adds	r2, #255	; 0xff
 8005eb4:	612a      	str	r2, [r5, #16]
    hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005eb6:	2280      	movs	r2, #128	; 0x80
    hdma_tim2_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005eb8:	606b      	str	r3, [r5, #4]
    hdma_tim2_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8005eba:	2300      	movs	r3, #0
    hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005ebc:	0112      	lsls	r2, r2, #4
    hdma_tim2_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ebe:	60ab      	str	r3, [r5, #8]
    hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005ec0:	616a      	str	r2, [r5, #20]
    hdma_tim2_up.Init.Mode = DMA_NORMAL;
 8005ec2:	61ab      	str	r3, [r5, #24]
    hdma_tim2_up.Init.Priority = DMA_PRIORITY_LOW;
 8005ec4:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_tim2_up) != HAL_OK)
 8005ec6:	f7fa fe11 	bl	8000aec <HAL_DMA_Init>
 8005eca:	2800      	cmp	r0, #0
 8005ecc:	d17c      	bne.n	8005fc8 <HAL_TIM_Base_MspInit+0x1c8>
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8005ece:	2280      	movs	r2, #128	; 0x80
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 8005ed0:	6225      	str	r5, [r4, #32]
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 8005ed2:	4b52      	ldr	r3, [pc, #328]	; (800601c <HAL_TIM_Base_MspInit+0x21c>)
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 8005ed4:	626c      	str	r4, [r5, #36]	; 0x24
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 8005ed6:	4d52      	ldr	r5, [pc, #328]	; (8006020 <HAL_TIM_Base_MspInit+0x220>)
 8005ed8:	602b      	str	r3, [r5, #0]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005eda:	2310      	movs	r3, #16
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8005edc:	60ea      	str	r2, [r5, #12]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005ede:	3281      	adds	r2, #129	; 0x81
 8005ee0:	32ff      	adds	r2, #255	; 0xff
 8005ee2:	612a      	str	r2, [r5, #16]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005ee4:	2280      	movs	r2, #128	; 0x80
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005ee6:	606b      	str	r3, [r5, #4]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ee8:	2300      	movs	r3, #0
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005eea:	0112      	lsls	r2, r2, #4
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8005eec:	0028      	movs	r0, r5
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8005eee:	60ab      	str	r3, [r5, #8]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005ef0:	616a      	str	r2, [r5, #20]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 8005ef2:	61ab      	str	r3, [r5, #24]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8005ef4:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8005ef6:	f7fa fdf9 	bl	8000aec <HAL_DMA_Init>
 8005efa:	2800      	cmp	r0, #0
 8005efc:	d001      	beq.n	8005f02 <HAL_TIM_Base_MspInit+0x102>
      Error_Handler();
 8005efe:	f7ff febd 	bl	8005c7c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8005f02:	62e5      	str	r5, [r4, #44]	; 0x2c
 8005f04:	626c      	str	r4, [r5, #36]	; 0x24
 8005f06:	e7a1      	b.n	8005e4c <HAL_TIM_Base_MspInit+0x4c>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005f08:	2310      	movs	r3, #16
 8005f0a:	4a41      	ldr	r2, [pc, #260]	; (8006010 <HAL_TIM_Base_MspInit+0x210>)
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8005f0c:	2011      	movs	r0, #17
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005f0e:	69d1      	ldr	r1, [r2, #28]
 8005f10:	4319      	orrs	r1, r3
 8005f12:	61d1      	str	r1, [r2, #28]
 8005f14:	69d2      	ldr	r2, [r2, #28]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8005f16:	2100      	movs	r1, #0
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005f18:	4013      	ands	r3, r2
 8005f1a:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8005f1c:	2200      	movs	r2, #0
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005f1e:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8005f20:	f7fa fd90 	bl	8000a44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005f24:	2011      	movs	r0, #17
 8005f26:	f7fa fdb9 	bl	8000a9c <HAL_NVIC_EnableIRQ>
 8005f2a:	e78f      	b.n	8005e4c <HAL_TIM_Base_MspInit+0x4c>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8005f2c:	2080      	movs	r0, #128	; 0x80
 8005f2e:	4a38      	ldr	r2, [pc, #224]	; (8006010 <HAL_TIM_Base_MspInit+0x210>)
 8005f30:	0040      	lsls	r0, r0, #1
 8005f32:	69d1      	ldr	r1, [r2, #28]
 8005f34:	4301      	orrs	r1, r0
 8005f36:	61d1      	str	r1, [r2, #28]
 8005f38:	69d3      	ldr	r3, [r2, #28]
    HAL_NVIC_SetPriority(TIM14_IRQn, 2, 0);
 8005f3a:	2102      	movs	r1, #2
    __HAL_RCC_TIM14_CLK_ENABLE();
 8005f3c:	4003      	ands	r3, r0
 8005f3e:	9304      	str	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM14_IRQn, 2, 0);
 8005f40:	2200      	movs	r2, #0
 8005f42:	38ed      	subs	r0, #237	; 0xed
    __HAL_RCC_TIM14_CLK_ENABLE();
 8005f44:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM14_IRQn, 2, 0);
 8005f46:	f7fa fd7d 	bl	8000a44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8005f4a:	2013      	movs	r0, #19
 8005f4c:	f7fa fda6 	bl	8000a9c <HAL_NVIC_EnableIRQ>
 8005f50:	e77c      	b.n	8005e4c <HAL_TIM_Base_MspInit+0x4c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005f52:	2080      	movs	r0, #128	; 0x80
 8005f54:	4b2e      	ldr	r3, [pc, #184]	; (8006010 <HAL_TIM_Base_MspInit+0x210>)
 8005f56:	0240      	lsls	r0, r0, #9
 8005f58:	6999      	ldr	r1, [r3, #24]
 8005f5a:	4301      	orrs	r1, r0
 8005f5c:	6199      	str	r1, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f5e:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005f60:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f62:	0289      	lsls	r1, r1, #10
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005f64:	4002      	ands	r2, r0
 8005f66:	9205      	str	r2, [sp, #20]
 8005f68:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f6a:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f6c:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	615a      	str	r2, [r3, #20]
 8005f72:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f74:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f76:	400b      	ands	r3, r1
 8005f78:	9306      	str	r3, [sp, #24]
 8005f7a:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005f7c:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f7e:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005f80:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f82:	3b02      	subs	r3, #2
 8005f84:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f86:	f7fb f841 	bl	800100c <HAL_GPIO_Init>
    hdma_tim15_ch1_up_trig_com.Instance = DMA1_Channel5;
 8005f8a:	4d26      	ldr	r5, [pc, #152]	; (8006024 <HAL_TIM_Base_MspInit+0x224>)
 8005f8c:	4b26      	ldr	r3, [pc, #152]	; (8006028 <HAL_TIM_Base_MspInit+0x228>)
    hdma_tim15_ch1_up_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 8005f8e:	2280      	movs	r2, #128	; 0x80
    hdma_tim15_ch1_up_trig_com.Instance = DMA1_Channel5;
 8005f90:	602b      	str	r3, [r5, #0]
    hdma_tim15_ch1_up_trig_com.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005f92:	2300      	movs	r3, #0
    hdma_tim15_ch1_up_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 8005f94:	60ea      	str	r2, [r5, #12]
    hdma_tim15_ch1_up_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005f96:	3280      	adds	r2, #128	; 0x80
    hdma_tim15_ch1_up_trig_com.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005f98:	606b      	str	r3, [r5, #4]
    hdma_tim15_ch1_up_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 8005f9a:	60ab      	str	r3, [r5, #8]
    hdma_tim15_ch1_up_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005f9c:	612a      	str	r2, [r5, #16]
    hdma_tim15_ch1_up_trig_com.Init.Mode = DMA_NORMAL;
 8005f9e:	61ab      	str	r3, [r5, #24]
    hdma_tim15_ch1_up_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005fa0:	2280      	movs	r2, #128	; 0x80
    hdma_tim15_ch1_up_trig_com.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005fa2:	2380      	movs	r3, #128	; 0x80
    hdma_tim15_ch1_up_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005fa4:	0112      	lsls	r2, r2, #4
    hdma_tim15_ch1_up_trig_com.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005fa6:	015b      	lsls	r3, r3, #5
    if (HAL_DMA_Init(&hdma_tim15_ch1_up_trig_com) != HAL_OK)
 8005fa8:	0028      	movs	r0, r5
    hdma_tim15_ch1_up_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005faa:	616a      	str	r2, [r5, #20]
    hdma_tim15_ch1_up_trig_com.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005fac:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_tim15_ch1_up_trig_com) != HAL_OK)
 8005fae:	f7fa fd9d 	bl	8000aec <HAL_DMA_Init>
 8005fb2:	2800      	cmp	r0, #0
 8005fb4:	d105      	bne.n	8005fc2 <HAL_TIM_Base_MspInit+0x1c2>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim15_ch1_up_trig_com);
 8005fb6:	6265      	str	r5, [r4, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim15_ch1_up_trig_com);
 8005fb8:	6225      	str	r5, [r4, #32]
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim15_ch1_up_trig_com);
 8005fba:	63a5      	str	r5, [r4, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim15_ch1_up_trig_com);
 8005fbc:	626c      	str	r4, [r5, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim15_ch1_up_trig_com);
 8005fbe:	6365      	str	r5, [r4, #52]	; 0x34
 8005fc0:	e744      	b.n	8005e4c <HAL_TIM_Base_MspInit+0x4c>
      Error_Handler();
 8005fc2:	f7ff fe5b 	bl	8005c7c <Error_Handler>
 8005fc6:	e7f6      	b.n	8005fb6 <HAL_TIM_Base_MspInit+0x1b6>
      Error_Handler();
 8005fc8:	f7ff fe58 	bl	8005c7c <Error_Handler>
 8005fcc:	e77f      	b.n	8005ece <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005fce:	2080      	movs	r0, #128	; 0x80
 8005fd0:	4a0f      	ldr	r2, [pc, #60]	; (8006010 <HAL_TIM_Base_MspInit+0x210>)
 8005fd2:	0280      	lsls	r0, r0, #10
 8005fd4:	6991      	ldr	r1, [r2, #24]
 8005fd6:	4301      	orrs	r1, r0
 8005fd8:	6191      	str	r1, [r2, #24]
 8005fda:	6993      	ldr	r3, [r2, #24]
    HAL_NVIC_SetPriority(TIM16_IRQn, 1, 0);
 8005fdc:	2101      	movs	r1, #1
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005fde:	4003      	ands	r3, r0
 8005fe0:	9307      	str	r3, [sp, #28]
    HAL_NVIC_SetPriority(TIM16_IRQn, 1, 0);
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	2015      	movs	r0, #21
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005fe6:	9b07      	ldr	r3, [sp, #28]
    HAL_NVIC_SetPriority(TIM16_IRQn, 1, 0);
 8005fe8:	f7fa fd2c 	bl	8000a44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8005fec:	2015      	movs	r0, #21
 8005fee:	f7fa fd55 	bl	8000a9c <HAL_NVIC_EnableIRQ>
 8005ff2:	e72b      	b.n	8005e4c <HAL_TIM_Base_MspInit+0x4c>
 8005ff4:	40012c00 	.word	0x40012c00
 8005ff8:	40000400 	.word	0x40000400
 8005ffc:	40001000 	.word	0x40001000
 8006000:	40002000 	.word	0x40002000
 8006004:	40014000 	.word	0x40014000
 8006008:	40014400 	.word	0x40014400
 800600c:	40014800 	.word	0x40014800
 8006010:	40021000 	.word	0x40021000
 8006014:	20000300 	.word	0x20000300
 8006018:	4002001c 	.word	0x4002001c
 800601c:	40020008 	.word	0x40020008
 8006020:	200006b8 	.word	0x200006b8
 8006024:	20000558 	.word	0x20000558
 8006028:	40020058 	.word	0x40020058

0800602c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800602c:	b510      	push	{r4, lr}
 800602e:	0004      	movs	r4, r0
 8006030:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006032:	2214      	movs	r2, #20
 8006034:	2100      	movs	r1, #0
 8006036:	a803      	add	r0, sp, #12
 8006038:	f000 f904 	bl	8006244 <memset>
  if(htim->Instance==TIM1)
 800603c:	4b17      	ldr	r3, [pc, #92]	; (800609c <HAL_TIM_MspPostInit+0x70>)
 800603e:	6822      	ldr	r2, [r4, #0]
 8006040:	429a      	cmp	r2, r3
 8006042:	d001      	beq.n	8006048 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8006044:	b008      	add	sp, #32
 8006046:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006048:	2080      	movs	r0, #128	; 0x80
 800604a:	4b15      	ldr	r3, [pc, #84]	; (80060a0 <HAL_TIM_MspPostInit+0x74>)
 800604c:	0280      	lsls	r0, r0, #10
 800604e:	6959      	ldr	r1, [r3, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006050:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006052:	4301      	orrs	r1, r0
 8006054:	6159      	str	r1, [r3, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006056:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006058:	695a      	ldr	r2, [r3, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800605a:	02c9      	lsls	r1, r1, #11
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800605c:	4002      	ands	r2, r0
 800605e:	9201      	str	r2, [sp, #4]
 8006060:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006062:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006064:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006066:	430a      	orrs	r2, r1
 8006068:	615a      	str	r2, [r3, #20]
 800606a:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800606c:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800606e:	400b      	ands	r3, r1
 8006070:	9302      	str	r3, [sp, #8]
 8006072:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8006074:	23f0      	movs	r3, #240	; 0xf0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006076:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8006078:	00db      	lsls	r3, r3, #3
 800607a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800607c:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800607e:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006080:	f7fa ffc4 	bl	800100c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006084:	2303      	movs	r3, #3
 8006086:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006088:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800608a:	a903      	add	r1, sp, #12
 800608c:	4805      	ldr	r0, [pc, #20]	; (80060a4 <HAL_TIM_MspPostInit+0x78>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800608e:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006090:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006092:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8006094:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006096:	f7fa ffb9 	bl	800100c <HAL_GPIO_Init>
}
 800609a:	e7d3      	b.n	8006044 <HAL_TIM_MspPostInit+0x18>
 800609c:	40012c00 	.word	0x40012c00
 80060a0:	40021000 	.word	0x40021000
 80060a4:	48000400 	.word	0x48000400

080060a8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80060a8:	4770      	bx	lr
 80060aa:	46c0      	nop			; (mov r8, r8)

080060ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80060ac:	e7fe      	b.n	80060ac <HardFault_Handler>
 80060ae:	46c0      	nop			; (mov r8, r8)

080060b0 <SVC_Handler>:
 80060b0:	4770      	bx	lr
 80060b2:	46c0      	nop			; (mov r8, r8)

080060b4 <PendSV_Handler>:
 80060b4:	4770      	bx	lr
 80060b6:	46c0      	nop			; (mov r8, r8)

080060b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80060b8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80060ba:	f7fa f9d1 	bl	8000460 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80060be:	bd10      	pop	{r4, pc}

080060c0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80060c0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 80060c2:	4803      	ldr	r0, [pc, #12]	; (80060d0 <DMA1_Channel1_IRQHandler+0x10>)
 80060c4:	f7fa fdaa 	bl	8000c1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  transferComplete();
 80060c8:	f7fe f91c 	bl	8004304 <transferComplete>
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80060cc:	bd10      	pop	{r4, pc}
 80060ce:	46c0      	nop			; (mov r8, r8)
 80060d0:	200006b8 	.word	0x200006b8

080060d4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80060d4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up);
 80060d6:	4802      	ldr	r0, [pc, #8]	; (80060e0 <DMA1_Channel2_3_IRQHandler+0xc>)
 80060d8:	f7fa fda0 	bl	8000c1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */
//  transferComplete();
  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80060dc:	bd10      	pop	{r4, pc}
 80060de:	46c0      	nop			; (mov r8, r8)
 80060e0:	20000300 	.word	0x20000300

080060e4 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 80060e4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim15_ch1_up_trig_com);
 80060e6:	4804      	ldr	r0, [pc, #16]	; (80060f8 <DMA1_Channel4_5_IRQHandler+0x14>)
 80060e8:	f7fa fd98 	bl	8000c1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */
 // if(!is_output){
  transferComplete();
 80060ec:	f7fe f90a 	bl	8004304 <transferComplete>
  TIM16->CNT = 0;
 80060f0:	2200      	movs	r2, #0
 80060f2:	4b02      	ldr	r3, [pc, #8]	; (80060fc <DMA1_Channel4_5_IRQHandler+0x18>)
 80060f4:	625a      	str	r2, [r3, #36]	; 0x24
  //}
  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 80060f6:	bd10      	pop	{r4, pc}
 80060f8:	20000558 	.word	0x20000558
 80060fc:	40014400 	.word	0x40014400

08006100 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8006100:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8006102:	4803      	ldr	r0, [pc, #12]	; (8006110 <ADC1_COMP_IRQHandler+0x10>)
 8006104:	f7fa fa80 	bl	8000608 <HAL_ADC_IRQHandler>
  HAL_COMP_IRQHandler(&hcomp1);
 8006108:	4802      	ldr	r0, [pc, #8]	; (8006114 <ADC1_COMP_IRQHandler+0x14>)
 800610a:	f7fa fc81 	bl	8000a10 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 800610e:	bd10      	pop	{r4, pc}
 8006110:	20000678 	.word	0x20000678
 8006114:	20000398 	.word	0x20000398

08006118 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006118:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800611a:	4802      	ldr	r0, [pc, #8]	; (8006124 <TIM6_DAC_IRQHandler+0xc>)
 800611c:	f7fc faae 	bl	800267c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006120:	bd10      	pop	{r4, pc}
 8006122:	46c0      	nop			; (mov r8, r8)
 8006124:	20000514 	.word	0x20000514

08006128 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8006128:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800612a:	4802      	ldr	r0, [pc, #8]	; (8006134 <TIM14_IRQHandler+0xc>)
 800612c:	f7fc faa6 	bl	800267c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8006130:	bd10      	pop	{r4, pc}
 8006132:	46c0      	nop			; (mov r8, r8)
 8006134:	20000630 	.word	0x20000630

08006138 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8006138:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800613a:	4802      	ldr	r0, [pc, #8]	; (8006144 <TIM16_IRQHandler+0xc>)
 800613c:	f7fc fa9e 	bl	800267c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8006140:	bd10      	pop	{r4, pc}
 8006142:	46c0      	nop			; (mov r8, r8)
 8006144:	200006fc 	.word	0x200006fc

08006148 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8006148:	2101      	movs	r1, #1
 800614a:	4b11      	ldr	r3, [pc, #68]	; (8006190 <SystemInit+0x48>)

#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 800614c:	4811      	ldr	r0, [pc, #68]	; (8006194 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	430a      	orrs	r2, r1
 8006152:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 8006154:	685a      	ldr	r2, [r3, #4]
 8006156:	4002      	ands	r2, r0
 8006158:	605a      	str	r2, [r3, #4]
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	480e      	ldr	r0, [pc, #56]	; (8006198 <SystemInit+0x50>)
 800615e:	4002      	ands	r2, r0
 8006160:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	480d      	ldr	r0, [pc, #52]	; (800619c <SystemInit+0x54>)
 8006166:	4002      	ands	r2, r0
 8006168:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800616a:	685a      	ldr	r2, [r3, #4]
 800616c:	480c      	ldr	r0, [pc, #48]	; (80061a0 <SystemInit+0x58>)
 800616e:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8006170:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8006172:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8006174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006176:	4382      	bics	r2, r0
 8006178:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
#elif defined (STM32F051x8) || defined (STM32F058xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
 800617a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800617c:	4809      	ldr	r0, [pc, #36]	; (80061a4 <SystemInit+0x5c>)
 800617e:	4002      	ands	r2, r0
 8006180:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8006182:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006184:	438a      	bics	r2, r1
 8006186:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8006188:	2200      	movs	r2, #0
 800618a:	609a      	str	r2, [r3, #8]

}
 800618c:	4770      	bx	lr
 800618e:	46c0      	nop			; (mov r8, r8)
 8006190:	40021000 	.word	0x40021000
 8006194:	f8ffb80c 	.word	0xf8ffb80c
 8006198:	fef6ffff 	.word	0xfef6ffff
 800619c:	fffbffff 	.word	0xfffbffff
 80061a0:	ffc0ffff 	.word	0xffc0ffff
 80061a4:	fffffeac 	.word	0xfffffeac

080061a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80061a8:	480d      	ldr	r0, [pc, #52]	; (80061e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80061aa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80061ac:	480d      	ldr	r0, [pc, #52]	; (80061e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80061ae:	490e      	ldr	r1, [pc, #56]	; (80061e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80061b0:	4a0e      	ldr	r2, [pc, #56]	; (80061ec <LoopForever+0xe>)
  movs r3, #0
 80061b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80061b4:	e002      	b.n	80061bc <LoopCopyDataInit>

080061b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80061b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80061b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80061ba:	3304      	adds	r3, #4

080061bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80061bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80061be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80061c0:	d3f9      	bcc.n	80061b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80061c2:	4a0b      	ldr	r2, [pc, #44]	; (80061f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80061c4:	4c0b      	ldr	r4, [pc, #44]	; (80061f4 <LoopForever+0x16>)
  movs r3, #0
 80061c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80061c8:	e001      	b.n	80061ce <LoopFillZerobss>

080061ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80061ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80061cc:	3204      	adds	r2, #4

080061ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80061ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80061d0:	d3fb      	bcc.n	80061ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80061d2:	f7ff ffb9 	bl	8006148 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80061d6:	f000 f811 	bl	80061fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80061da:	f7fe f93b 	bl	8004454 <main>

080061de <LoopForever>:

LoopForever:
    b LoopForever
 80061de:	e7fe      	b.n	80061de <LoopForever>
  ldr   r0, =_estack
 80061e0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80061e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80061e8:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 80061ec:	08006860 	.word	0x08006860
  ldr r2, =_sbss
 80061f0:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 80061f4:	20000740 	.word	0x20000740

080061f8 <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80061f8:	e7fe      	b.n	80061f8 <CEC_CAN_IRQHandler>
	...

080061fc <__libc_init_array>:
 80061fc:	b570      	push	{r4, r5, r6, lr}
 80061fe:	2600      	movs	r6, #0
 8006200:	4d0c      	ldr	r5, [pc, #48]	; (8006234 <__libc_init_array+0x38>)
 8006202:	4c0d      	ldr	r4, [pc, #52]	; (8006238 <__libc_init_array+0x3c>)
 8006204:	1b64      	subs	r4, r4, r5
 8006206:	10a4      	asrs	r4, r4, #2
 8006208:	42a6      	cmp	r6, r4
 800620a:	d109      	bne.n	8006220 <__libc_init_array+0x24>
 800620c:	2600      	movs	r6, #0
 800620e:	f000 f821 	bl	8006254 <_init>
 8006212:	4d0a      	ldr	r5, [pc, #40]	; (800623c <__libc_init_array+0x40>)
 8006214:	4c0a      	ldr	r4, [pc, #40]	; (8006240 <__libc_init_array+0x44>)
 8006216:	1b64      	subs	r4, r4, r5
 8006218:	10a4      	asrs	r4, r4, #2
 800621a:	42a6      	cmp	r6, r4
 800621c:	d105      	bne.n	800622a <__libc_init_array+0x2e>
 800621e:	bd70      	pop	{r4, r5, r6, pc}
 8006220:	00b3      	lsls	r3, r6, #2
 8006222:	58eb      	ldr	r3, [r5, r3]
 8006224:	4798      	blx	r3
 8006226:	3601      	adds	r6, #1
 8006228:	e7ee      	b.n	8006208 <__libc_init_array+0xc>
 800622a:	00b3      	lsls	r3, r6, #2
 800622c:	58eb      	ldr	r3, [r5, r3]
 800622e:	4798      	blx	r3
 8006230:	3601      	adds	r6, #1
 8006232:	e7f2      	b.n	800621a <__libc_init_array+0x1e>
 8006234:	08006858 	.word	0x08006858
 8006238:	08006858 	.word	0x08006858
 800623c:	08006858 	.word	0x08006858
 8006240:	0800685c 	.word	0x0800685c

08006244 <memset>:
 8006244:	0003      	movs	r3, r0
 8006246:	1812      	adds	r2, r2, r0
 8006248:	4293      	cmp	r3, r2
 800624a:	d100      	bne.n	800624e <memset+0xa>
 800624c:	4770      	bx	lr
 800624e:	7019      	strb	r1, [r3, #0]
 8006250:	3301      	adds	r3, #1
 8006252:	e7f9      	b.n	8006248 <memset+0x4>

08006254 <_init>:
 8006254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006256:	46c0      	nop			; (mov r8, r8)
 8006258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800625a:	bc08      	pop	{r3}
 800625c:	469e      	mov	lr, r3
 800625e:	4770      	bx	lr

08006260 <_fini>:
 8006260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006262:	46c0      	nop			; (mov r8, r8)
 8006264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006266:	bc08      	pop	{r3}
 8006268:	469e      	mov	lr, r3
 800626a:	4770      	bx	lr
