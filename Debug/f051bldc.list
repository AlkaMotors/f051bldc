
f051bldc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005730  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080057f0  080057f0  000157f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800583c  0800583c  0001583c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005840  08005840  00015840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000005c  20000000  08005844  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000046c  20000060  080058a0  00020060  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  200004cc  080058a0  000204cc  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001aeb3  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000368b  00000000  00000000  0003af37  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000f507  00000000  00000000  0003e5c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000a30  00000000  00000000  0004dad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002560  00000000  00000000  0004e500  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007d12  00000000  00000000  00050a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003f8e  00000000  00000000  00058772  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0005c700  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001db4  00000000  00000000  0005c77c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080057d8 	.word	0x080057d8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	080057d8 	.word	0x080057d8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003f4:	b510      	push	{r4, lr}
 80003f6:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 80003f8:	f001 f9de 	bl	80017b8 <HAL_RCC_GetHCLKFreq>
 80003fc:	21fa      	movs	r1, #250	; 0xfa
 80003fe:	0089      	lsls	r1, r1, #2
 8000400:	f7ff fe82 	bl	8000108 <__udivsi3>
 8000404:	f000 fb1a 	bl	8000a3c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000408:	2001      	movs	r0, #1
 800040a:	2200      	movs	r2, #0
 800040c:	0021      	movs	r1, r4
 800040e:	4240      	negs	r0, r0
 8000410:	f000 fad6 	bl	80009c0 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000414:	2000      	movs	r0, #0
 8000416:	bd10      	pop	{r4, pc}

08000418 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000418:	2110      	movs	r1, #16
 800041a:	4a06      	ldr	r2, [pc, #24]	; (8000434 <HAL_Init+0x1c>)
{
 800041c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800041e:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000420:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000422:	430b      	orrs	r3, r1
 8000424:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000426:	f7ff ffe5 	bl	80003f4 <HAL_InitTick>
  HAL_MspInit();
 800042a:	f005 f801 	bl	8005430 <HAL_MspInit>
}
 800042e:	2000      	movs	r0, #0
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			; (mov r8, r8)
 8000434:	40022000 	.word	0x40022000

08000438 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000438:	4a02      	ldr	r2, [pc, #8]	; (8000444 <HAL_IncTick+0xc>)
 800043a:	6813      	ldr	r3, [r2, #0]
 800043c:	3301      	adds	r3, #1
 800043e:	6013      	str	r3, [r2, #0]
}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	20000168 	.word	0x20000168

08000448 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000448:	4b01      	ldr	r3, [pc, #4]	; (8000450 <HAL_GetTick+0x8>)
 800044a:	6818      	ldr	r0, [r3, #0]
}
 800044c:	4770      	bx	lr
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	20000168 	.word	0x20000168

08000454 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000454:	b530      	push	{r4, r5, lr}
 8000456:	b083      	sub	sp, #12
 8000458:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 800045a:	f7ff fff5 	bl	8000448 <HAL_GetTick>
  uint32_t wait = Delay;
 800045e:	9c01      	ldr	r4, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000460:	0005      	movs	r5, r0
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
     wait++;
 8000462:	1c63      	adds	r3, r4, #1
 8000464:	1e5a      	subs	r2, r3, #1
 8000466:	4193      	sbcs	r3, r2
 8000468:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800046a:	f7ff ffed 	bl	8000448 <HAL_GetTick>
 800046e:	1b40      	subs	r0, r0, r5
 8000470:	42a0      	cmp	r0, r4
 8000472:	d3fa      	bcc.n	800046a <HAL_Delay+0x16>
  {
  }
}
 8000474:	b003      	add	sp, #12
 8000476:	bd30      	pop	{r4, r5, pc}

08000478 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800047a:	1e04      	subs	r4, r0, #0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0U;

  /* Check ADC handle */
  if(hadc == NULL)
 800047c:	d100      	bne.n	8000480 <HAL_ADC_Init+0x8>
 800047e:	e080      	b.n	8000582 <HAL_ADC_Init+0x10a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000480:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000482:	2b00      	cmp	r3, #0
 8000484:	d067      	beq.n	8000556 <HAL_ADC_Init+0xde>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000486:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000488:	06db      	lsls	r3, r3, #27
 800048a:	d45e      	bmi.n	800054a <HAL_ADC_Init+0xd2>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800048c:	2004      	movs	r0, #4
 800048e:	6823      	ldr	r3, [r4, #0]
 8000490:	689a      	ldr	r2, [r3, #8]
 8000492:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000494:	d159      	bne.n	800054a <HAL_ADC_Init+0xd2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000496:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000498:	4948      	ldr	r1, [pc, #288]	; (80005bc <HAL_ADC_Init+0x144>)
 800049a:	400a      	ands	r2, r1
 800049c:	3106      	adds	r1, #6
 800049e:	31ff      	adds	r1, #255	; 0xff
 80004a0:	430a      	orrs	r2, r1
 80004a2:	6462      	str	r2, [r4, #68]	; 0x44
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80004a4:	2203      	movs	r2, #3
 80004a6:	6899      	ldr	r1, [r3, #8]
 80004a8:	400a      	ands	r2, r1
 80004aa:	2a01      	cmp	r2, #1
 80004ac:	d059      	beq.n	8000562 <HAL_ADC_Init+0xea>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80004ae:	2118      	movs	r1, #24
 80004b0:	68da      	ldr	r2, [r3, #12]
 80004b2:	438a      	bics	r2, r1
 80004b4:	68a1      	ldr	r1, [r4, #8]
 80004b6:	430a      	orrs	r2, r1
 80004b8:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80004ba:	691a      	ldr	r2, [r3, #16]
 80004bc:	6861      	ldr	r1, [r4, #4]
 80004be:	0092      	lsls	r2, r2, #2
 80004c0:	0892      	lsrs	r2, r2, #2
 80004c2:	430a      	orrs	r2, r1
 80004c4:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80004c6:	68da      	ldr	r2, [r3, #12]
 80004c8:	493d      	ldr	r1, [pc, #244]	; (80005c0 <HAL_ADC_Init+0x148>)
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80004ca:	6a26      	ldr	r6, [r4, #32]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80004cc:	400a      	ands	r2, r1
 80004ce:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80004d0:	69a2      	ldr	r2, [r4, #24]
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80004d2:	0377      	lsls	r7, r6, #13
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80004d4:	0391      	lsls	r1, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 80004d6:	69e2      	ldr	r2, [r4, #28]
 80004d8:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80004da:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 80004dc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80004de:	3a01      	subs	r2, #1
 80004e0:	1e55      	subs	r5, r2, #1
 80004e2:	41aa      	sbcs	r2, r5
 80004e4:	0315      	lsls	r5, r2, #12
 80004e6:	68e2      	ldr	r2, [r4, #12]
 80004e8:	4311      	orrs	r1, r2
                 hadc->Init.DataAlign                                   |
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80004ea:	6922      	ldr	r2, [r4, #16]
 80004ec:	4339      	orrs	r1, r7
 80004ee:	2a02      	cmp	r2, #2
 80004f0:	d059      	beq.n	80005a6 <HAL_ADC_Init+0x12e>
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 80004f2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80004f4:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80004f6:	430a      	orrs	r2, r1
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80004f8:	6a61      	ldr	r1, [r4, #36]	; 0x24
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80004fa:	432a      	orrs	r2, r5
 80004fc:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80004fe:	2901      	cmp	r1, #1
 8000500:	d04b      	beq.n	800059a <HAL_ADC_Init+0x122>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000502:	20c2      	movs	r0, #194	; 0xc2
 8000504:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000506:	30ff      	adds	r0, #255	; 0xff
 8000508:	4281      	cmp	r1, r0
 800050a:	d002      	beq.n	8000512 <HAL_ADC_Init+0x9a>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800050c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800050e:	4301      	orrs	r1, r0
 8000510:	430a      	orrs	r2, r1
                    hadc->Init.ExternalTrigConvEdge );
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000512:	68d9      	ldr	r1, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000514:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000516:	4311      	orrs	r1, r2
 8000518:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800051a:	2180      	movs	r1, #128	; 0x80
 800051c:	0549      	lsls	r1, r1, #21
 800051e:	428d      	cmp	r5, r1
 8000520:	d026      	beq.n	8000570 <HAL_ADC_Init+0xf8>
 8000522:	1e69      	subs	r1, r5, #1
 8000524:	2906      	cmp	r1, #6
 8000526:	d923      	bls.n	8000570 <HAL_ADC_Init+0xf8>
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000528:	68db      	ldr	r3, [r3, #12]
 800052a:	4926      	ldr	r1, [pc, #152]	; (80005c4 <HAL_ADC_Init+0x14c>)
 800052c:	400b      	ands	r3, r1
 800052e:	429a      	cmp	r2, r3
 8000530:	d029      	beq.n	8000586 <HAL_ADC_Init+0x10e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000532:	2212      	movs	r2, #18
 8000534:	6c63      	ldr	r3, [r4, #68]	; 0x44
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
      
      tmp_hal_status = HAL_ERROR;
 8000536:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8000538:	4393      	bics	r3, r2
 800053a:	3a02      	subs	r2, #2
 800053c:	4313      	orrs	r3, r2
 800053e:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000540:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000542:	3a0f      	subs	r2, #15
 8000544:	4313      	orrs	r3, r2
 8000546:	64a3      	str	r3, [r4, #72]	; 0x48
 8000548:	e004      	b.n	8000554 <HAL_ADC_Init+0xdc>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800054a:	2210      	movs	r2, #16
        
    tmp_hal_status = HAL_ERROR;
 800054c:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800054e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000550:	4313      	orrs	r3, r2
 8000552:	6463      	str	r3, [r4, #68]	; 0x44
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8000554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hadc->Lock = HAL_UNLOCKED;
 8000556:	2240      	movs	r2, #64	; 0x40
    ADC_CLEAR_ERRORCODE(hadc);
 8000558:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 800055a:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 800055c:	f004 ff8a 	bl	8005474 <HAL_ADC_MspInit>
 8000560:	e791      	b.n	8000486 <HAL_ADC_Init+0xe>
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000562:	6819      	ldr	r1, [r3, #0]
 8000564:	420a      	tst	r2, r1
 8000566:	d1ae      	bne.n	80004c6 <HAL_ADC_Init+0x4e>
 8000568:	68da      	ldr	r2, [r3, #12]
 800056a:	0412      	lsls	r2, r2, #16
 800056c:	d59f      	bpl.n	80004ae <HAL_ADC_Init+0x36>
 800056e:	e7aa      	b.n	80004c6 <HAL_ADC_Init+0x4e>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000570:	2107      	movs	r1, #7
 8000572:	6958      	ldr	r0, [r3, #20]
 8000574:	4388      	bics	r0, r1
 8000576:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000578:	6958      	ldr	r0, [r3, #20]
 800057a:	4029      	ands	r1, r5
 800057c:	4301      	orrs	r1, r0
 800057e:	6159      	str	r1, [r3, #20]
 8000580:	e7d2      	b.n	8000528 <HAL_ADC_Init+0xb0>
    return HAL_ERROR;
 8000582:	2001      	movs	r0, #1
 8000584:	e7e6      	b.n	8000554 <HAL_ADC_Init+0xdc>
      ADC_CLEAR_ERRORCODE(hadc);
 8000586:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 8000588:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 800058a:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 800058c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800058e:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8000590:	4393      	bics	r3, r2
 8000592:	3a02      	subs	r2, #2
 8000594:	4313      	orrs	r3, r2
 8000596:	6463      	str	r3, [r4, #68]	; 0x44
 8000598:	e7dc      	b.n	8000554 <HAL_ADC_Init+0xdc>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800059a:	2e00      	cmp	r6, #0
 800059c:	d105      	bne.n	80005aa <HAL_ADC_Init+0x132>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800059e:	2180      	movs	r1, #128	; 0x80
 80005a0:	0249      	lsls	r1, r1, #9
 80005a2:	430a      	orrs	r2, r1
 80005a4:	e7ad      	b.n	8000502 <HAL_ADC_Init+0x8a>
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80005a6:	2004      	movs	r0, #4
 80005a8:	e7a3      	b.n	80004f2 <HAL_ADC_Init+0x7a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80005aa:	2520      	movs	r5, #32
 80005ac:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80005ae:	4328      	orrs	r0, r5
 80005b0:	6460      	str	r0, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80005b2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80005b4:	4301      	orrs	r1, r0
 80005b6:	64a1      	str	r1, [r4, #72]	; 0x48
 80005b8:	e7a3      	b.n	8000502 <HAL_ADC_Init+0x8a>
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	fffffefd 	.word	0xfffffefd
 80005c0:	fffe0219 	.word	0xfffe0219
 80005c4:	833fffe7 	.word	0x833fffe7

080005c8 <HAL_ADC_LevelOutOfWindowCallback>:
 80005c8:	4770      	bx	lr
 80005ca:	46c0      	nop			; (mov r8, r8)

080005cc <HAL_ADC_ErrorCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80005cc:	4770      	bx	lr
 80005ce:	46c0      	nop			; (mov r8, r8)

080005d0 <HAL_ADC_IRQHandler>:
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80005d0:	2204      	movs	r2, #4
 80005d2:	6803      	ldr	r3, [r0, #0]
{
 80005d4:	b570      	push	{r4, r5, r6, lr}
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80005d6:	6819      	ldr	r1, [r3, #0]
{
 80005d8:	0004      	movs	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80005da:	420a      	tst	r2, r1
 80005dc:	d04a      	beq.n	8000674 <HAL_ADC_IRQHandler+0xa4>
 80005de:	6859      	ldr	r1, [r3, #4]
 80005e0:	420a      	tst	r2, r1
 80005e2:	d047      	beq.n	8000674 <HAL_ADC_IRQHandler+0xa4>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80005e4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80005e6:	06d2      	lsls	r2, r2, #27
 80005e8:	d404      	bmi.n	80005f4 <HAL_ADC_IRQHandler+0x24>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80005ea:	2280      	movs	r2, #128	; 0x80
 80005ec:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80005ee:	0092      	lsls	r2, r2, #2
 80005f0:	430a      	orrs	r2, r1
 80005f2:	6462      	str	r2, [r4, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80005f4:	22c0      	movs	r2, #192	; 0xc0
 80005f6:	68d9      	ldr	r1, [r3, #12]
 80005f8:	0112      	lsls	r2, r2, #4
 80005fa:	4211      	tst	r1, r2
 80005fc:	d113      	bne.n	8000626 <HAL_ADC_IRQHandler+0x56>
 80005fe:	6a22      	ldr	r2, [r4, #32]
 8000600:	2a00      	cmp	r2, #0
 8000602:	d110      	bne.n	8000626 <HAL_ADC_IRQHandler+0x56>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	0712      	lsls	r2, r2, #28
 8000608:	d50d      	bpl.n	8000626 <HAL_ADC_IRQHandler+0x56>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800060a:	689a      	ldr	r2, [r3, #8]
 800060c:	0752      	lsls	r2, r2, #29
 800060e:	d444      	bmi.n	800069a <HAL_ADC_IRQHandler+0xca>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000610:	210c      	movs	r1, #12
 8000612:	685a      	ldr	r2, [r3, #4]
 8000614:	438a      	bics	r2, r1
 8000616:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8000618:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800061a:	4a24      	ldr	r2, [pc, #144]	; (80006ac <HAL_ADC_IRQHandler+0xdc>)
 800061c:	4013      	ands	r3, r2
 800061e:	3204      	adds	r2, #4
 8000620:	32ff      	adds	r2, #255	; 0xff
 8000622:	4313      	orrs	r3, r2
 8000624:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ConvCpltCallback(hadc);
 8000626:	0020      	movs	r0, r4
 8000628:	f003 fcee 	bl	8004008 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800062c:	220c      	movs	r2, #12
 800062e:	6823      	ldr	r3, [r4, #0]
 8000630:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000632:	2580      	movs	r5, #128	; 0x80
 8000634:	681a      	ldr	r2, [r3, #0]
 8000636:	4215      	tst	r5, r2
 8000638:	d002      	beq.n	8000640 <HAL_ADC_IRQHandler+0x70>
 800063a:	685a      	ldr	r2, [r3, #4]
 800063c:	4215      	tst	r5, r2
 800063e:	d121      	bne.n	8000684 <HAL_ADC_IRQHandler+0xb4>
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8000640:	2210      	movs	r2, #16
 8000642:	6819      	ldr	r1, [r3, #0]
 8000644:	420a      	tst	r2, r1
 8000646:	d014      	beq.n	8000672 <HAL_ADC_IRQHandler+0xa2>
 8000648:	6859      	ldr	r1, [r3, #4]
 800064a:	420a      	tst	r2, r1
 800064c:	d011      	beq.n	8000672 <HAL_ADC_IRQHandler+0xa2>
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800064e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000650:	2a01      	cmp	r2, #1
 8000652:	d002      	beq.n	800065a <HAL_ADC_IRQHandler+0x8a>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8000654:	68da      	ldr	r2, [r3, #12]
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8000656:	07d2      	lsls	r2, r2, #31
 8000658:	d509      	bpl.n	800066e <HAL_ADC_IRQHandler+0x9e>
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800065a:	2102      	movs	r1, #2
 800065c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
      HAL_ADC_ErrorCallback(hadc);
 800065e:	0020      	movs	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000660:	430a      	orrs	r2, r1
 8000662:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000664:	2210      	movs	r2, #16
 8000666:	601a      	str	r2, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 8000668:	f7ff ffb0 	bl	80005cc <HAL_ADC_ErrorCallback>
 800066c:	6823      	ldr	r3, [r4, #0]
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800066e:	2210      	movs	r2, #16
 8000670:	601a      	str	r2, [r3, #0]
}
 8000672:	bd70      	pop	{r4, r5, r6, pc}
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000674:	2208      	movs	r2, #8
 8000676:	6819      	ldr	r1, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000678:	420a      	tst	r2, r1
 800067a:	d0da      	beq.n	8000632 <HAL_ADC_IRQHandler+0x62>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800067c:	6859      	ldr	r1, [r3, #4]
 800067e:	420a      	tst	r2, r1
 8000680:	d0d7      	beq.n	8000632 <HAL_ADC_IRQHandler+0x62>
 8000682:	e7af      	b.n	80005e4 <HAL_ADC_IRQHandler+0x14>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000684:	2380      	movs	r3, #128	; 0x80
 8000686:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000688:	025b      	lsls	r3, r3, #9
 800068a:	4313      	orrs	r3, r2
 800068c:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800068e:	0020      	movs	r0, r4
 8000690:	f7ff ff9a 	bl	80005c8 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000694:	6823      	ldr	r3, [r4, #0]
 8000696:	601d      	str	r5, [r3, #0]
 8000698:	e7d2      	b.n	8000640 <HAL_ADC_IRQHandler+0x70>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800069a:	2220      	movs	r2, #32
 800069c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800069e:	4313      	orrs	r3, r2
 80006a0:	6463      	str	r3, [r4, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80006a2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80006a4:	3a1f      	subs	r2, #31
 80006a6:	4313      	orrs	r3, r2
 80006a8:	64a3      	str	r3, [r4, #72]	; 0x48
 80006aa:	e7bc      	b.n	8000626 <HAL_ADC_IRQHandler+0x56>
 80006ac:	fffffefe 	.word	0xfffffefe

080006b0 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80006b0:	2300      	movs	r3, #0
{
 80006b2:	b570      	push	{r4, r5, r6, lr}
 80006b4:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 80006b6:	9301      	str	r3, [sp, #4]
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80006b8:	3340      	adds	r3, #64	; 0x40
 80006ba:	5cc2      	ldrb	r2, [r0, r3]
{
 80006bc:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80006be:	2002      	movs	r0, #2
 80006c0:	2a01      	cmp	r2, #1
 80006c2:	d03c      	beq.n	800073e <HAL_ADC_ConfigChannel+0x8e>
 80006c4:	2201      	movs	r2, #1
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80006c6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  __HAL_LOCK(hadc);
 80006c8:	54e2      	strb	r2, [r4, r3]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80006ca:	6823      	ldr	r3, [r4, #0]
 80006cc:	689d      	ldr	r5, [r3, #8]
 80006ce:	076d      	lsls	r5, r5, #29
 80006d0:	d42d      	bmi.n	800072e <HAL_ADC_ConfigChannel+0x7e>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80006d2:	4d35      	ldr	r5, [pc, #212]	; (80007a8 <HAL_ADC_ConfigChannel+0xf8>)
 80006d4:	684e      	ldr	r6, [r1, #4]
 80006d6:	42ae      	cmp	r6, r5
 80006d8:	d033      	beq.n	8000742 <HAL_ADC_ConfigChannel+0x92>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80006da:	680d      	ldr	r5, [r1, #0]
 80006dc:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 80006de:	40aa      	lsls	r2, r5
 80006e0:	4332      	orrs	r2, r6
 80006e2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80006e4:	2280      	movs	r2, #128	; 0x80
 80006e6:	0552      	lsls	r2, r2, #21
 80006e8:	4290      	cmp	r0, r2
 80006ea:	d00f      	beq.n	800070c <HAL_ADC_ConfigChannel+0x5c>
 80006ec:	3801      	subs	r0, #1
 80006ee:	2806      	cmp	r0, #6
 80006f0:	d90c      	bls.n	800070c <HAL_ADC_ConfigChannel+0x5c>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80006f2:	2207      	movs	r2, #7
 80006f4:	6888      	ldr	r0, [r1, #8]
 80006f6:	6959      	ldr	r1, [r3, #20]
 80006f8:	4011      	ands	r1, r2
 80006fa:	4288      	cmp	r0, r1
 80006fc:	d006      	beq.n	800070c <HAL_ADC_ConfigChannel+0x5c>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80006fe:	6959      	ldr	r1, [r3, #20]
 8000700:	4391      	bics	r1, r2
 8000702:	6159      	str	r1, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000704:	6959      	ldr	r1, [r3, #20]
 8000706:	4002      	ands	r2, r0
 8000708:	430a      	orrs	r2, r1
 800070a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800070c:	002b      	movs	r3, r5
 800070e:	3b10      	subs	r3, #16
 8000710:	2b02      	cmp	r3, #2
 8000712:	d829      	bhi.n	8000768 <HAL_ADC_ConfigChannel+0xb8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000714:	4a25      	ldr	r2, [pc, #148]	; (80007ac <HAL_ADC_ConfigChannel+0xfc>)
 8000716:	6813      	ldr	r3, [r2, #0]
 8000718:	2d10      	cmp	r5, #16
 800071a:	d027      	beq.n	800076c <HAL_ADC_ConfigChannel+0xbc>
 800071c:	2280      	movs	r2, #128	; 0x80
 800071e:	2d11      	cmp	r5, #17
 8000720:	d03c      	beq.n	800079c <HAL_ADC_ConfigChannel+0xec>
 8000722:	0452      	lsls	r2, r2, #17
 8000724:	4313      	orrs	r3, r2
 8000726:	4a21      	ldr	r2, [pc, #132]	; (80007ac <HAL_ADC_ConfigChannel+0xfc>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000728:	2000      	movs	r0, #0
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800072a:	6013      	str	r3, [r2, #0]
 800072c:	e004      	b.n	8000738 <HAL_ADC_ConfigChannel+0x88>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800072e:	2220      	movs	r2, #32
    
    tmp_hal_status = HAL_ERROR;
 8000730:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000732:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000734:	4313      	orrs	r3, r2
 8000736:	6463      	str	r3, [r4, #68]	; 0x44
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000738:	2200      	movs	r2, #0
 800073a:	2340      	movs	r3, #64	; 0x40
 800073c:	54e2      	strb	r2, [r4, r3]
  
  /* Return function status */
  return tmp_hal_status;
}
 800073e:	b002      	add	sp, #8
 8000740:	bd70      	pop	{r4, r5, r6, pc}
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000742:	6809      	ldr	r1, [r1, #0]
 8000744:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000746:	408a      	lsls	r2, r1
 8000748:	4390      	bics	r0, r2
 800074a:	6298      	str	r0, [r3, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800074c:	000b      	movs	r3, r1
 800074e:	3b10      	subs	r3, #16
 8000750:	2b02      	cmp	r3, #2
 8000752:	d809      	bhi.n	8000768 <HAL_ADC_ConfigChannel+0xb8>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000754:	4b15      	ldr	r3, [pc, #84]	; (80007ac <HAL_ADC_ConfigChannel+0xfc>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2910      	cmp	r1, #16
 800075a:	d021      	beq.n	80007a0 <HAL_ADC_ConfigChannel+0xf0>
 800075c:	2911      	cmp	r1, #17
 800075e:	d021      	beq.n	80007a4 <HAL_ADC_ConfigChannel+0xf4>
 8000760:	4a13      	ldr	r2, [pc, #76]	; (80007b0 <HAL_ADC_ConfigChannel+0x100>)
 8000762:	4013      	ands	r3, r2
 8000764:	4a11      	ldr	r2, [pc, #68]	; (80007ac <HAL_ADC_ConfigChannel+0xfc>)
 8000766:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000768:	2000      	movs	r0, #0
 800076a:	e7e5      	b.n	8000738 <HAL_ADC_ConfigChannel+0x88>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800076c:	2180      	movs	r1, #128	; 0x80
 800076e:	0409      	lsls	r1, r1, #16
 8000770:	430b      	orrs	r3, r1
 8000772:	6013      	str	r3, [r2, #0]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000774:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <HAL_ADC_ConfigChannel+0x104>)
 8000776:	4910      	ldr	r1, [pc, #64]	; (80007b8 <HAL_ADC_ConfigChannel+0x108>)
 8000778:	6818      	ldr	r0, [r3, #0]
 800077a:	f7ff fcc5 	bl	8000108 <__udivsi3>
 800077e:	0083      	lsls	r3, r0, #2
 8000780:	1818      	adds	r0, r3, r0
 8000782:	0040      	lsls	r0, r0, #1
 8000784:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 8000786:	9b01      	ldr	r3, [sp, #4]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d0ed      	beq.n	8000768 <HAL_ADC_ConfigChannel+0xb8>
            wait_loop_index--;
 800078c:	9b01      	ldr	r3, [sp, #4]
 800078e:	3b01      	subs	r3, #1
 8000790:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000792:	9b01      	ldr	r3, [sp, #4]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d1f9      	bne.n	800078c <HAL_ADC_ConfigChannel+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000798:	2000      	movs	r0, #0
 800079a:	e7cd      	b.n	8000738 <HAL_ADC_ConfigChannel+0x88>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800079c:	03d2      	lsls	r2, r2, #15
 800079e:	e7c1      	b.n	8000724 <HAL_ADC_ConfigChannel+0x74>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80007a0:	4a06      	ldr	r2, [pc, #24]	; (80007bc <HAL_ADC_ConfigChannel+0x10c>)
 80007a2:	e7de      	b.n	8000762 <HAL_ADC_ConfigChannel+0xb2>
 80007a4:	4a06      	ldr	r2, [pc, #24]	; (80007c0 <HAL_ADC_ConfigChannel+0x110>)
 80007a6:	e7dc      	b.n	8000762 <HAL_ADC_ConfigChannel+0xb2>
 80007a8:	00001001 	.word	0x00001001
 80007ac:	40012708 	.word	0x40012708
 80007b0:	feffffff 	.word	0xfeffffff
 80007b4:	20000058 	.word	0x20000058
 80007b8:	000f4240 	.word	0x000f4240
 80007bc:	ff7fffff 	.word	0xff7fffff
 80007c0:	ffbfffff 	.word	0xffbfffff

080007c4 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80007c4:	b570      	push	{r4, r5, r6, lr}
 80007c6:	0004      	movs	r4, r0
 80007c8:	b082      	sub	sp, #8
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t regshift = COMP_CSR_COMP1_SHIFT;
  
  /* Check the COMP handle allocation and lock status */
  if((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 80007ca:	2800      	cmp	r0, #0
 80007cc:	d03b      	beq.n	8000846 <HAL_COMP_Init+0x82>
 80007ce:	6a83      	ldr	r3, [r0, #40]	; 0x28
  {
    status = HAL_ERROR;
 80007d0:	2001      	movs	r0, #1
  if((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 80007d2:	06db      	lsls	r3, r3, #27
 80007d4:	d501      	bpl.n	80007da <HAL_COMP_Init+0x16>
    /* Initialize the COMP state*/
    hcomp->State = HAL_COMP_STATE_READY;
  }
  
  return status;
}
 80007d6:	b002      	add	sp, #8
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SYSCFG_CLK_ENABLE();  
 80007da:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <HAL_COMP_Init+0x8c>)
 80007dc:	699a      	ldr	r2, [r3, #24]
 80007de:	4302      	orrs	r2, r0
 80007e0:	619a      	str	r2, [r3, #24]
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4018      	ands	r0, r3
 80007e6:	9001      	str	r0, [sp, #4]
    HAL_COMP_MspInit(hcomp);
 80007e8:	0020      	movs	r0, r4
    __HAL_RCC_SYSCFG_CLK_ENABLE();  
 80007ea:	9b01      	ldr	r3, [sp, #4]
    HAL_COMP_MspInit(hcomp);
 80007ec:	f004 fe90 	bl	8005510 <HAL_COMP_MspInit>
    if(hcomp->State == HAL_COMP_STATE_RESET)
 80007f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d024      	beq.n	8000840 <HAL_COMP_Init+0x7c>
    hcomp->State = HAL_COMP_STATE_BUSY;
 80007f6:	2302      	movs	r3, #2
    if(hcomp->Instance == COMP2)
 80007f8:	6822      	ldr	r2, [r4, #0]
    hcomp->State = HAL_COMP_STATE_BUSY;
 80007fa:	62a3      	str	r3, [r4, #40]	; 0x28
    if(hcomp->Instance == COMP2)
 80007fc:	4b15      	ldr	r3, [pc, #84]	; (8000854 <HAL_COMP_Init+0x90>)
 80007fe:	429a      	cmp	r2, r3
 8000800:	d023      	beq.n	800084a <HAL_COMP_Init+0x86>
  uint32_t regshift = COMP_CSR_COMP1_SHIFT;
 8000802:	2500      	movs	r5, #0
    if(hcomp->Instance == COMP2)
 8000804:	4914      	ldr	r1, [pc, #80]	; (8000858 <HAL_COMP_Init+0x94>)
    MODIFY_REG(COMP->CSR, 
 8000806:	68a6      	ldr	r6, [r4, #8]
 8000808:	6863      	ldr	r3, [r4, #4]
 800080a:	4a14      	ldr	r2, [pc, #80]	; (800085c <HAL_COMP_Init+0x98>)
 800080c:	4333      	orrs	r3, r6
 800080e:	68e6      	ldr	r6, [r4, #12]
 8000810:	6810      	ldr	r0, [r2, #0]
 8000812:	4333      	orrs	r3, r6
 8000814:	6926      	ldr	r6, [r4, #16]
 8000816:	4001      	ands	r1, r0
 8000818:	4333      	orrs	r3, r6
 800081a:	6966      	ldr	r6, [r4, #20]
 800081c:	4333      	orrs	r3, r6
 800081e:	69a6      	ldr	r6, [r4, #24]
 8000820:	4333      	orrs	r3, r6
 8000822:	40ab      	lsls	r3, r5
 8000824:	430b      	orrs	r3, r1
 8000826:	6013      	str	r3, [r2, #0]
    if(hcomp->Init.WindowMode != COMP_WINDOWMODE_DISABLE)
 8000828:	69e3      	ldr	r3, [r4, #28]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d004      	beq.n	8000838 <HAL_COMP_Init+0x74>
      COMP->CSR |= COMP_CSR_WNDWEN;
 800082e:	2380      	movs	r3, #128	; 0x80
 8000830:	6811      	ldr	r1, [r2, #0]
 8000832:	041b      	lsls	r3, r3, #16
 8000834:	430b      	orrs	r3, r1
 8000836:	6013      	str	r3, [r2, #0]
    hcomp->State = HAL_COMP_STATE_READY;
 8000838:	2301      	movs	r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 800083a:	2000      	movs	r0, #0
    hcomp->State = HAL_COMP_STATE_READY;
 800083c:	62a3      	str	r3, [r4, #40]	; 0x28
 800083e:	e7ca      	b.n	80007d6 <HAL_COMP_Init+0x12>
      hcomp->Lock = HAL_UNLOCKED;
 8000840:	2224      	movs	r2, #36	; 0x24
 8000842:	54a3      	strb	r3, [r4, r2]
 8000844:	e7d7      	b.n	80007f6 <HAL_COMP_Init+0x32>
    status = HAL_ERROR;
 8000846:	2001      	movs	r0, #1
 8000848:	e7c5      	b.n	80007d6 <HAL_COMP_Init+0x12>
 800084a:	4905      	ldr	r1, [pc, #20]	; (8000860 <HAL_COMP_Init+0x9c>)
      regshift = COMP_CSR_COMP2_SHIFT;
 800084c:	2510      	movs	r5, #16
 800084e:	e7da      	b.n	8000806 <HAL_COMP_Init+0x42>
 8000850:	40021000 	.word	0x40021000
 8000854:	4001001e 	.word	0x4001001e
 8000858:	ffffc081 	.word	0xffffc081
 800085c:	4001001c 	.word	0x4001001c
 8000860:	c081ffff 	.word	0xc081ffff

08000864 <HAL_COMP_Start_IT>:
  * @brief  Enables the interrupt and starts the comparator
  * @param  hcomp COMP handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_COMP_Start_IT(COMP_HandleTypeDef *hcomp)
{
 8000864:	b510      	push	{r4, lr}
 8000866:	1e03      	subs	r3, r0, #0
  if((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8000868:	d034      	beq.n	80008d4 <HAL_COMP_Start_IT+0x70>
 800086a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800086c:	2001      	movs	r0, #1
 800086e:	06d2      	lsls	r2, r2, #27
 8000870:	d402      	bmi.n	8000878 <HAL_COMP_Start_IT+0x14>
    if(hcomp->State == HAL_COMP_STATE_READY)
 8000872:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8000874:	2c01      	cmp	r4, #1
 8000876:	d000      	beq.n	800087a <HAL_COMP_Start_IT+0x16>
    /* Enable Exti interrupt mode */
    SET_BIT(EXTI->IMR, extiline);
  }

  return status;
}
 8000878:	bd10      	pop	{r4, pc}
      if(hcomp->Instance == COMP2)
 800087a:	6818      	ldr	r0, [r3, #0]
 800087c:	4a1e      	ldr	r2, [pc, #120]	; (80008f8 <HAL_COMP_Start_IT+0x94>)
 800087e:	4290      	cmp	r0, r2
 8000880:	d02e      	beq.n	80008e0 <HAL_COMP_Start_IT+0x7c>
      SET_BIT(COMP->CSR, COMP_CSR_COMPxEN << regshift);
 8000882:	4a1e      	ldr	r2, [pc, #120]	; (80008fc <HAL_COMP_Start_IT+0x98>)
 8000884:	6811      	ldr	r1, [r2, #0]
 8000886:	4321      	orrs	r1, r4
 8000888:	6011      	str	r1, [r2, #0]
      hcomp->State = HAL_COMP_STATE_BUSY;
 800088a:	2102      	movs	r1, #2
 800088c:	6299      	str	r1, [r3, #40]	; 0x28
    extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 800088e:	4290      	cmp	r0, r2
 8000890:	d022      	beq.n	80008d8 <HAL_COMP_Start_IT+0x74>
 8000892:	2180      	movs	r1, #128	; 0x80
 8000894:	4a1a      	ldr	r2, [pc, #104]	; (8000900 <HAL_COMP_Start_IT+0x9c>)
 8000896:	03c9      	lsls	r1, r1, #15
    if((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_IT_RISING) != RESET)
 8000898:	6a1b      	ldr	r3, [r3, #32]
      SET_BIT(EXTI->RTSR, extiline);
 800089a:	4c1a      	ldr	r4, [pc, #104]	; (8000904 <HAL_COMP_Start_IT+0xa0>)
    if((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_IT_RISING) != RESET)
 800089c:	07d8      	lsls	r0, r3, #31
 800089e:	d50f      	bpl.n	80008c0 <HAL_COMP_Start_IT+0x5c>
      SET_BIT(EXTI->RTSR, extiline);
 80008a0:	68a0      	ldr	r0, [r4, #8]
 80008a2:	4308      	orrs	r0, r1
 80008a4:	60a0      	str	r0, [r4, #8]
    if((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_IT_FALLING) != RESET)
 80008a6:	079b      	lsls	r3, r3, #30
 80008a8:	d50f      	bpl.n	80008ca <HAL_COMP_Start_IT+0x66>
      SET_BIT(EXTI->FTSR, extiline);
 80008aa:	4a16      	ldr	r2, [pc, #88]	; (8000904 <HAL_COMP_Start_IT+0xa0>)
 80008ac:	68d3      	ldr	r3, [r2, #12]
 80008ae:	430b      	orrs	r3, r1
 80008b0:	60d3      	str	r3, [r2, #12]
    WRITE_REG(EXTI->PR, extiline);
 80008b2:	4b14      	ldr	r3, [pc, #80]	; (8000904 <HAL_COMP_Start_IT+0xa0>)
    SET_BIT(EXTI->IMR, extiline);
 80008b4:	2000      	movs	r0, #0
    WRITE_REG(EXTI->PR, extiline);
 80008b6:	6159      	str	r1, [r3, #20]
    SET_BIT(EXTI->IMR, extiline);
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	430a      	orrs	r2, r1
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	e7db      	b.n	8000878 <HAL_COMP_Start_IT+0x14>
      CLEAR_BIT(EXTI->RTSR, extiline);
 80008c0:	68a0      	ldr	r0, [r4, #8]
 80008c2:	4010      	ands	r0, r2
 80008c4:	60a0      	str	r0, [r4, #8]
    if((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_IT_FALLING) != RESET)
 80008c6:	079b      	lsls	r3, r3, #30
 80008c8:	d4ef      	bmi.n	80008aa <HAL_COMP_Start_IT+0x46>
      CLEAR_BIT(EXTI->FTSR, extiline);
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <HAL_COMP_Start_IT+0xa0>)
 80008cc:	68d8      	ldr	r0, [r3, #12]
 80008ce:	4002      	ands	r2, r0
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	e7ee      	b.n	80008b2 <HAL_COMP_Start_IT+0x4e>
  if((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 80008d4:	2001      	movs	r0, #1
 80008d6:	e7cf      	b.n	8000878 <HAL_COMP_Start_IT+0x14>
    extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 80008d8:	2180      	movs	r1, #128	; 0x80
 80008da:	4a0b      	ldr	r2, [pc, #44]	; (8000908 <HAL_COMP_Start_IT+0xa4>)
 80008dc:	0389      	lsls	r1, r1, #14
 80008de:	e7db      	b.n	8000898 <HAL_COMP_Start_IT+0x34>
      SET_BIT(COMP->CSR, COMP_CSR_COMPxEN << regshift);
 80008e0:	2280      	movs	r2, #128	; 0x80
 80008e2:	4906      	ldr	r1, [pc, #24]	; (80008fc <HAL_COMP_Start_IT+0x98>)
 80008e4:	0252      	lsls	r2, r2, #9
 80008e6:	6808      	ldr	r0, [r1, #0]
 80008e8:	4302      	orrs	r2, r0
 80008ea:	600a      	str	r2, [r1, #0]
      hcomp->State = HAL_COMP_STATE_BUSY;
 80008ec:	2202      	movs	r2, #2
    extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 80008ee:	2180      	movs	r1, #128	; 0x80
      hcomp->State = HAL_COMP_STATE_BUSY;
 80008f0:	629a      	str	r2, [r3, #40]	; 0x28
    extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 80008f2:	03c9      	lsls	r1, r1, #15
      hcomp->State = HAL_COMP_STATE_BUSY;
 80008f4:	4a02      	ldr	r2, [pc, #8]	; (8000900 <HAL_COMP_Start_IT+0x9c>)
 80008f6:	e7cf      	b.n	8000898 <HAL_COMP_Start_IT+0x34>
 80008f8:	4001001e 	.word	0x4001001e
 80008fc:	4001001c 	.word	0x4001001c
 8000900:	ffbfffff 	.word	0xffbfffff
 8000904:	40010400 	.word	0x40010400
 8000908:	ffdfffff 	.word	0xffdfffff

0800090c <HAL_COMP_Stop_IT>:
  * @brief  Disable the interrupt and Stop the comparator 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Stop_IT(COMP_HandleTypeDef *hcomp)
{ 
 800090c:	0002      	movs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Disable the Exti Line interrupt mode */
  CLEAR_BIT(EXTI->IMR, COMP_GET_EXTI_LINE(hcomp->Instance));
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <HAL_COMP_Stop_IT+0x48>)
 8000910:	6801      	ldr	r1, [r0, #0]
 8000912:	4811      	ldr	r0, [pc, #68]	; (8000958 <HAL_COMP_Stop_IT+0x4c>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4281      	cmp	r1, r0
 8000918:	d018      	beq.n	800094c <HAL_COMP_Stop_IT+0x40>
 800091a:	4810      	ldr	r0, [pc, #64]	; (800095c <HAL_COMP_Stop_IT+0x50>)
 800091c:	4003      	ands	r3, r0
 800091e:	480d      	ldr	r0, [pc, #52]	; (8000954 <HAL_COMP_Stop_IT+0x48>)
 8000920:	6003      	str	r3, [r0, #0]
  if((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8000922:	6a93      	ldr	r3, [r2, #40]	; 0x28
    status = HAL_ERROR;
 8000924:	2001      	movs	r0, #1
  if((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8000926:	06db      	lsls	r3, r3, #27
 8000928:	d402      	bmi.n	8000930 <HAL_COMP_Stop_IT+0x24>
    if(hcomp->State == HAL_COMP_STATE_BUSY)
 800092a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800092c:	2b02      	cmp	r3, #2
 800092e:	d000      	beq.n	8000932 <HAL_COMP_Stop_IT+0x26>
  
  status = HAL_COMP_Stop(hcomp);
  
  return status;
}
 8000930:	4770      	bx	lr
      if(hcomp->Instance == COMP2)
 8000932:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <HAL_COMP_Stop_IT+0x54>)
 8000934:	4299      	cmp	r1, r3
 8000936:	d00b      	beq.n	8000950 <HAL_COMP_Stop_IT+0x44>
 8000938:	2302      	movs	r3, #2
 800093a:	425b      	negs	r3, r3
      CLEAR_BIT(COMP->CSR, COMP_CSR_COMPxEN << regshift);
 800093c:	4906      	ldr	r1, [pc, #24]	; (8000958 <HAL_COMP_Stop_IT+0x4c>)
 800093e:	6808      	ldr	r0, [r1, #0]
 8000940:	4003      	ands	r3, r0
 8000942:	600b      	str	r3, [r1, #0]
      hcomp->State = HAL_COMP_STATE_READY;
 8000944:	2301      	movs	r3, #1
 8000946:	2000      	movs	r0, #0
 8000948:	6293      	str	r3, [r2, #40]	; 0x28
 800094a:	e7f1      	b.n	8000930 <HAL_COMP_Stop_IT+0x24>
  CLEAR_BIT(EXTI->IMR, COMP_GET_EXTI_LINE(hcomp->Instance));
 800094c:	4805      	ldr	r0, [pc, #20]	; (8000964 <HAL_COMP_Stop_IT+0x58>)
 800094e:	e7e5      	b.n	800091c <HAL_COMP_Stop_IT+0x10>
      if(hcomp->Instance == COMP2)
 8000950:	4b05      	ldr	r3, [pc, #20]	; (8000968 <HAL_COMP_Stop_IT+0x5c>)
 8000952:	e7f3      	b.n	800093c <HAL_COMP_Stop_IT+0x30>
 8000954:	40010400 	.word	0x40010400
 8000958:	4001001c 	.word	0x4001001c
 800095c:	ffbfffff 	.word	0xffbfffff
 8000960:	4001001e 	.word	0x4001001e
 8000964:	ffdfffff 	.word	0xffdfffff
 8000968:	fffeffff 	.word	0xfffeffff

0800096c <HAL_COMP_GetOutputLevel>:
  uint32_t regshift = COMP_CSR_COMP1_SHIFT;
  
  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));
  
  if(hcomp->Instance == COMP2)
 800096c:	6802      	ldr	r2, [r0, #0]
 800096e:	4b07      	ldr	r3, [pc, #28]	; (800098c <HAL_COMP_GetOutputLevel+0x20>)
 8000970:	2080      	movs	r0, #128	; 0x80
 8000972:	429a      	cmp	r2, r3
 8000974:	d007      	beq.n	8000986 <HAL_COMP_GetOutputLevel+0x1a>
 8000976:	01c0      	lsls	r0, r0, #7
  {
    regshift = COMP_CSR_COMP2_SHIFT;
  }
  level = READ_BIT(COMP->CSR, COMP_CSR_COMPxOUT << regshift);
 8000978:	4b05      	ldr	r3, [pc, #20]	; (8000990 <HAL_COMP_GetOutputLevel+0x24>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4018      	ands	r0, r3
  
  if(level != 0U)
 800097e:	d001      	beq.n	8000984 <HAL_COMP_GetOutputLevel+0x18>
  {
    return(COMP_OUTPUTLEVEL_HIGH);
 8000980:	2080      	movs	r0, #128	; 0x80
 8000982:	01c0      	lsls	r0, r0, #7
  }
  return(COMP_OUTPUTLEVEL_LOW);
}
 8000984:	4770      	bx	lr
 8000986:	05c0      	lsls	r0, r0, #23
 8000988:	e7f6      	b.n	8000978 <HAL_COMP_GetOutputLevel+0xc>
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	4001001e 	.word	0x4001001e
 8000990:	4001001c 	.word	0x4001001c

08000994 <HAL_COMP_IRQHandler>:
  uint32_t extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 8000994:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <HAL_COMP_IRQHandler+0x24>)
 8000996:	6802      	ldr	r2, [r0, #0]
{
 8000998:	b510      	push	{r4, lr}
  uint32_t extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 800099a:	429a      	cmp	r2, r3
 800099c:	d009      	beq.n	80009b2 <HAL_COMP_IRQHandler+0x1e>
 800099e:	2280      	movs	r2, #128	; 0x80
 80009a0:	03d2      	lsls	r2, r2, #15
  if(READ_BIT(EXTI->PR, extiline) != RESET)
 80009a2:	4b06      	ldr	r3, [pc, #24]	; (80009bc <HAL_COMP_IRQHandler+0x28>)
 80009a4:	6959      	ldr	r1, [r3, #20]
 80009a6:	4211      	tst	r1, r2
 80009a8:	d002      	beq.n	80009b0 <HAL_COMP_IRQHandler+0x1c>
    WRITE_REG(EXTI->PR, extiline);
 80009aa:	615a      	str	r2, [r3, #20]
    HAL_COMP_TriggerCallback(hcomp);    
 80009ac:	f002 ff60 	bl	8003870 <HAL_COMP_TriggerCallback>
}
 80009b0:	bd10      	pop	{r4, pc}
  uint32_t extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 80009b2:	2280      	movs	r2, #128	; 0x80
 80009b4:	0392      	lsls	r2, r2, #14
 80009b6:	e7f4      	b.n	80009a2 <HAL_COMP_IRQHandler+0xe>
 80009b8:	4001001c 	.word	0x4001001c
 80009bc:	40010400 	.word	0x40010400

080009c0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009c0:	b570      	push	{r4, r5, r6, lr}
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80009c2:	2800      	cmp	r0, #0
 80009c4:	db14      	blt.n	80009f0 <HAL_NVIC_SetPriority+0x30>
 80009c6:	4a16      	ldr	r2, [pc, #88]	; (8000a20 <HAL_NVIC_SetPriority+0x60>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009c8:	2403      	movs	r4, #3
 80009ca:	4694      	mov	ip, r2
 80009cc:	22ff      	movs	r2, #255	; 0xff
 80009ce:	0883      	lsrs	r3, r0, #2
 80009d0:	4020      	ands	r0, r4
 80009d2:	0014      	movs	r4, r2
 80009d4:	26c0      	movs	r6, #192	; 0xc0
 80009d6:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009d8:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009da:	4084      	lsls	r4, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009dc:	400a      	ands	r2, r1
 80009de:	4082      	lsls	r2, r0
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	4463      	add	r3, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009e4:	00b6      	lsls	r6, r6, #2
 80009e6:	599d      	ldr	r5, [r3, r6]
 80009e8:	43a5      	bics	r5, r4
 80009ea:	432a      	orrs	r2, r5
 80009ec:	519a      	str	r2, [r3, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	4a0c      	ldr	r2, [pc, #48]	; (8000a24 <HAL_NVIC_SetPriority+0x64>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009f2:	24ff      	movs	r4, #255	; 0xff
 80009f4:	4694      	mov	ip, r2
 80009f6:	230f      	movs	r3, #15
 80009f8:	2203      	movs	r2, #3
 80009fa:	b2c0      	uxtb	r0, r0
 80009fc:	4003      	ands	r3, r0
 80009fe:	4010      	ands	r0, r2
 8000a00:	0022      	movs	r2, r4
 8000a02:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a04:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a06:	4082      	lsls	r2, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a08:	400c      	ands	r4, r1
 8000a0a:	4084      	lsls	r4, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a0c:	3b08      	subs	r3, #8
 8000a0e:	089b      	lsrs	r3, r3, #2
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	4463      	add	r3, ip
 8000a14:	69dd      	ldr	r5, [r3, #28]
 8000a16:	4395      	bics	r5, r2
 8000a18:	432c      	orrs	r4, r5
 8000a1a:	61dc      	str	r4, [r3, #28]
 8000a1c:	e7e7      	b.n	80009ee <HAL_NVIC_SetPriority+0x2e>
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	e000e100 	.word	0xe000e100
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000a28:	231f      	movs	r3, #31
 8000a2a:	4018      	ands	r0, r3
 8000a2c:	3b1e      	subs	r3, #30
 8000a2e:	4083      	lsls	r3, r0
 8000a30:	4a01      	ldr	r2, [pc, #4]	; (8000a38 <HAL_NVIC_EnableIRQ+0x10>)
 8000a32:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000a34:	4770      	bx	lr
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	e000e100 	.word	0xe000e100

08000a3c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a3c:	4a0a      	ldr	r2, [pc, #40]	; (8000a68 <HAL_SYSTICK_Config+0x2c>)
 8000a3e:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a40:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d80e      	bhi.n	8000a64 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a46:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a48:	4a08      	ldr	r2, [pc, #32]	; (8000a6c <HAL_SYSTICK_Config+0x30>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a4a:	4809      	ldr	r0, [pc, #36]	; (8000a70 <HAL_SYSTICK_Config+0x34>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a4c:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a4e:	6a03      	ldr	r3, [r0, #32]
 8000a50:	0609      	lsls	r1, r1, #24
 8000a52:	021b      	lsls	r3, r3, #8
 8000a54:	0a1b      	lsrs	r3, r3, #8
 8000a56:	430b      	orrs	r3, r1
 8000a58:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a5a:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a5c:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a5e:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a60:	3307      	adds	r3, #7
 8000a62:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000a64:	4770      	bx	lr
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	00ffffff 	.word	0x00ffffff
 8000a6c:	e000e010 	.word	0xe000e010
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000a74:	4a05      	ldr	r2, [pc, #20]	; (8000a8c <HAL_SYSTICK_CLKSourceConfig+0x18>)
 8000a76:	6813      	ldr	r3, [r2, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000a78:	2804      	cmp	r0, #4
 8000a7a:	d003      	beq.n	8000a84 <HAL_SYSTICK_CLKSourceConfig+0x10>
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000a7c:	2104      	movs	r1, #4
 8000a7e:	438b      	bics	r3, r1
 8000a80:	6013      	str	r3, [r2, #0]
  }
}
 8000a82:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000a84:	4318      	orrs	r0, r3
 8000a86:	6010      	str	r0, [r2, #0]
 8000a88:	e7fb      	b.n	8000a82 <HAL_SYSTICK_CLKSourceConfig+0xe>
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	e000e010 	.word	0xe000e010

08000a90 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000a90:	4770      	bx	lr
 8000a92:	46c0      	nop			; (mov r8, r8)

08000a94 <HAL_SYSTICK_IRQHandler>:
{
 8000a94:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 8000a96:	f7ff fffb 	bl	8000a90 <HAL_SYSTICK_Callback>
}
 8000a9a:	bd10      	pop	{r4, pc}

08000a9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000a9c:	b570      	push	{r4, r5, r6, lr}
 8000a9e:	1e04      	subs	r4, r0, #0
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000aa0:	d02b      	beq.n	8000afa <HAL_DMA_Init+0x5e>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000aa2:	2521      	movs	r5, #33	; 0x21
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	5543      	strb	r3, [r0, r5]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000aa8:	6800      	ldr	r0, [r0, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000aaa:	4a15      	ldr	r2, [pc, #84]	; (8000b00 <HAL_DMA_Init+0x64>)
  tmp = hdma->Instance->CCR;
 8000aac:	6803      	ldr	r3, [r0, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000aae:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000ab0:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8000ab2:	6863      	ldr	r3, [r4, #4]
 8000ab4:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ab6:	68e1      	ldr	r1, [r4, #12]
 8000ab8:	430b      	orrs	r3, r1
 8000aba:	6921      	ldr	r1, [r4, #16]
 8000abc:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000abe:	6961      	ldr	r1, [r4, #20]
 8000ac0:	430b      	orrs	r3, r1
 8000ac2:	69a1      	ldr	r1, [r4, #24]
 8000ac4:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ac6:	69e1      	ldr	r1, [r4, #28]
 8000ac8:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8000aca:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000acc:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000ace:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <HAL_DMA_Init+0x68>)
 8000ad0:	2114      	movs	r1, #20
 8000ad2:	469c      	mov	ip, r3
 8000ad4:	4460      	add	r0, ip
 8000ad6:	f7ff fb17 	bl	8000108 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <HAL_DMA_Init+0x6c>)
  hdma->State = HAL_DMA_STATE_READY;
 8000adc:	2201      	movs	r2, #1
  hdma->DmaBaseAddress = DMA1;
 8000ade:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->XferCpltCallback = NULL;
 8000ae0:	2300      	movs	r3, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000ae2:	0080      	lsls	r0, r0, #2
 8000ae4:	6420      	str	r0, [r4, #64]	; 0x40
  return HAL_OK;
 8000ae6:	2000      	movs	r0, #0
  hdma->XferCpltCallback = NULL;
 8000ae8:	62a3      	str	r3, [r4, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8000aea:	62e3      	str	r3, [r4, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8000aec:	6323      	str	r3, [r4, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8000aee:	6363      	str	r3, [r4, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000af0:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8000af2:	5562      	strb	r2, [r4, r5]
  hdma->Lock = HAL_UNLOCKED;
 8000af4:	321f      	adds	r2, #31
 8000af6:	54a3      	strb	r3, [r4, r2]
}  
 8000af8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000afa:	2001      	movs	r0, #1
 8000afc:	e7fc      	b.n	8000af8 <HAL_DMA_Init+0x5c>
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	ffffc00f 	.word	0xffffc00f
 8000b04:	bffdfff8 	.word	0xbffdfff8
 8000b08:	40020000 	.word	0x40020000

08000b0c <HAL_DMA_Start_IT>:
{
 8000b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8000b0e:	2420      	movs	r4, #32
 8000b10:	5d05      	ldrb	r5, [r0, r4]
 8000b12:	2602      	movs	r6, #2
 8000b14:	2d01      	cmp	r5, #1
 8000b16:	d008      	beq.n	8000b2a <HAL_DMA_Start_IT+0x1e>
 8000b18:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8000b1a:	2721      	movs	r7, #33	; 0x21
  __HAL_LOCK(hdma);
 8000b1c:	5505      	strb	r5, [r0, r4]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000b1e:	5dc5      	ldrb	r5, [r0, r7]
 8000b20:	b2ed      	uxtb	r5, r5
 8000b22:	2d01      	cmp	r5, #1
 8000b24:	d003      	beq.n	8000b2e <HAL_DMA_Start_IT+0x22>
    __HAL_UNLOCK(hdma); 
 8000b26:	2300      	movs	r3, #0
 8000b28:	5503      	strb	r3, [r0, r4]
} 
 8000b2a:	0030      	movs	r0, r6
 8000b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b2e:	2400      	movs	r4, #0
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000b30:	55c6      	strb	r6, [r0, r7]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b32:	6384      	str	r4, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b34:	6804      	ldr	r4, [r0, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000b36:	6c07      	ldr	r7, [r0, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b38:	6826      	ldr	r6, [r4, #0]
 8000b3a:	43ae      	bics	r6, r5
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000b3c:	40bd      	lsls	r5, r7
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b3e:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000b40:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8000b42:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8000b44:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000b46:	6843      	ldr	r3, [r0, #4]
 8000b48:	2b10      	cmp	r3, #16
 8000b4a:	d00e      	beq.n	8000b6a <HAL_DMA_Start_IT+0x5e>
    hdma->Instance->CPAR = SrcAddress;
 8000b4c:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 8000b4e:	60e2      	str	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8000b50:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d00c      	beq.n	8000b70 <HAL_DMA_Start_IT+0x64>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b56:	220e      	movs	r2, #14
 8000b58:	6823      	ldr	r3, [r4, #0]
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000b5e:	2201      	movs	r2, #1
 8000b60:	6823      	ldr	r3, [r4, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000b62:	2600      	movs	r6, #0
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000b64:	4313      	orrs	r3, r2
 8000b66:	6023      	str	r3, [r4, #0]
 8000b68:	e7df      	b.n	8000b2a <HAL_DMA_Start_IT+0x1e>
    hdma->Instance->CPAR = DstAddress;
 8000b6a:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000b6c:	60e1      	str	r1, [r4, #12]
 8000b6e:	e7ef      	b.n	8000b50 <HAL_DMA_Start_IT+0x44>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000b70:	220a      	movs	r2, #10
 8000b72:	6823      	ldr	r3, [r4, #0]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000b78:	6823      	ldr	r3, [r4, #0]
 8000b7a:	3a06      	subs	r2, #6
 8000b7c:	4393      	bics	r3, r2
 8000b7e:	6023      	str	r3, [r4, #0]
 8000b80:	e7ed      	b.n	8000b5e <HAL_DMA_Start_IT+0x52>
 8000b82:	46c0      	nop			; (mov r8, r8)

08000b84 <HAL_DMA_IRQHandler>:
{
 8000b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000b86:	2504      	movs	r5, #4
 8000b88:	002e      	movs	r6, r5
 8000b8a:	6c03      	ldr	r3, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000b8c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000b8e:	409e      	lsls	r6, r3
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000b90:	6822      	ldr	r2, [r4, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000b92:	6801      	ldr	r1, [r0, #0]
 8000b94:	680f      	ldr	r7, [r1, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000b96:	4216      	tst	r6, r2
 8000b98:	d00d      	beq.n	8000bb6 <HAL_DMA_IRQHandler+0x32>
 8000b9a:	423d      	tst	r5, r7
 8000b9c:	d00b      	beq.n	8000bb6 <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000b9e:	680b      	ldr	r3, [r1, #0]
 8000ba0:	069b      	lsls	r3, r3, #26
 8000ba2:	d402      	bmi.n	8000baa <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000ba4:	680b      	ldr	r3, [r1, #0]
 8000ba6:	43ab      	bics	r3, r5
 8000ba8:	600b      	str	r3, [r1, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000baa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000bac:	6066      	str	r6, [r4, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d000      	beq.n	8000bb4 <HAL_DMA_IRQHandler+0x30>
    	hdma->XferErrorCallback(hdma);
 8000bb2:	4798      	blx	r3
}  
 8000bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000bb6:	2502      	movs	r5, #2
 8000bb8:	002e      	movs	r6, r5
 8000bba:	409e      	lsls	r6, r3
 8000bbc:	4216      	tst	r6, r2
 8000bbe:	d014      	beq.n	8000bea <HAL_DMA_IRQHandler+0x66>
 8000bc0:	423d      	tst	r5, r7
 8000bc2:	d012      	beq.n	8000bea <HAL_DMA_IRQHandler+0x66>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000bc4:	680b      	ldr	r3, [r1, #0]
 8000bc6:	069b      	lsls	r3, r3, #26
 8000bc8:	d406      	bmi.n	8000bd8 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000bca:	220a      	movs	r2, #10
 8000bcc:	680b      	ldr	r3, [r1, #0]
 8000bce:	4393      	bics	r3, r2
 8000bd0:	600b      	str	r3, [r1, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8000bd2:	2321      	movs	r3, #33	; 0x21
 8000bd4:	3a09      	subs	r2, #9
 8000bd6:	54c2      	strb	r2, [r0, r3]
  	__HAL_UNLOCK(hdma);
 8000bd8:	2320      	movs	r3, #32
 8000bda:	2200      	movs	r2, #0
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000bdc:	6066      	str	r6, [r4, #4]
  	__HAL_UNLOCK(hdma);
 8000bde:	54c2      	strb	r2, [r0, r3]
  	if(hdma->XferCpltCallback != NULL)
 8000be0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d0e6      	beq.n	8000bb4 <HAL_DMA_IRQHandler+0x30>
    	hdma->XferErrorCallback(hdma);
 8000be6:	4798      	blx	r3
 8000be8:	e7e4      	b.n	8000bb4 <HAL_DMA_IRQHandler+0x30>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000bea:	2508      	movs	r5, #8
 8000bec:	002e      	movs	r6, r5
 8000bee:	409e      	lsls	r6, r3
 8000bf0:	4232      	tst	r2, r6
 8000bf2:	d0df      	beq.n	8000bb4 <HAL_DMA_IRQHandler+0x30>
 8000bf4:	423d      	tst	r5, r7
 8000bf6:	d0dd      	beq.n	8000bb4 <HAL_DMA_IRQHandler+0x30>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000bf8:	680a      	ldr	r2, [r1, #0]
 8000bfa:	3506      	adds	r5, #6
 8000bfc:	43aa      	bics	r2, r5
 8000bfe:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000c00:	2201      	movs	r2, #1
 8000c02:	0011      	movs	r1, r2
 8000c04:	4099      	lsls	r1, r3
    hdma->State = HAL_DMA_STATE_READY;    
 8000c06:	2321      	movs	r3, #33	; 0x21
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000c08:	6061      	str	r1, [r4, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000c0a:	6382      	str	r2, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8000c0c:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma); 
 8000c0e:	2200      	movs	r2, #0
 8000c10:	3b01      	subs	r3, #1
 8000c12:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferErrorCallback != NULL)
 8000c14:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d0cc      	beq.n	8000bb4 <HAL_DMA_IRQHandler+0x30>
    	hdma->XferErrorCallback(hdma);
 8000c1a:	4798      	blx	r3
 8000c1c:	e7ca      	b.n	8000bb4 <HAL_DMA_IRQHandler+0x30>
 8000c1e:	46c0      	nop			; (mov r8, r8)

08000c20 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c22:	46de      	mov	lr, fp
 8000c24:	4657      	mov	r7, sl
 8000c26:	464e      	mov	r6, r9
 8000c28:	4645      	mov	r5, r8
 8000c2a:	b5e0      	push	{r5, r6, r7, lr}
 8000c2c:	469b      	mov	fp, r3
 8000c2e:	b083      	sub	sp, #12
  HAL_StatusTypeDef status = HAL_ERROR;
  uint8_t index = 0U;
  uint8_t nbiterations = 0U;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000c30:	4b67      	ldr	r3, [pc, #412]	; (8000dd0 <HAL_FLASH_Program+0x1b0>)
{
 8000c32:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(&pFlash);
 8000c34:	469a      	mov	sl, r3
 8000c36:	7e1b      	ldrb	r3, [r3, #24]
{
 8000c38:	4680      	mov	r8, r0
 8000c3a:	4689      	mov	r9, r1
  __HAL_LOCK(&pFlash);
 8000c3c:	2002      	movs	r0, #2
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d106      	bne.n	8000c50 <HAL_FLASH_Program+0x30>

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);

  return status;
}
 8000c42:	b003      	add	sp, #12
 8000c44:	bc3c      	pop	{r2, r3, r4, r5}
 8000c46:	4690      	mov	r8, r2
 8000c48:	4699      	mov	r9, r3
 8000c4a:	46a2      	mov	sl, r4
 8000c4c:	46ab      	mov	fp, r5
 8000c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8000c50:	2301      	movs	r3, #1
 8000c52:	4652      	mov	r2, sl
 8000c54:	7613      	strb	r3, [r2, #24]
{
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000c56:	f7ff fbf7 	bl	8000448 <HAL_GetTick>
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000c5a:	4c5e      	ldr	r4, [pc, #376]	; (8000dd4 <HAL_FLASH_Program+0x1b4>)
  uint32_t tickstart = HAL_GetTick();
 8000c5c:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000c5e:	2501      	movs	r5, #1
  { 
    if (Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000c60:	4e5d      	ldr	r6, [pc, #372]	; (8000dd8 <HAL_FLASH_Program+0x1b8>)
 8000c62:	e005      	b.n	8000c70 <HAL_FLASH_Program+0x50>
 8000c64:	f7ff fbf0 	bl	8000448 <HAL_GetTick>
 8000c68:	1bc0      	subs	r0, r0, r7
 8000c6a:	42b0      	cmp	r0, r6
 8000c6c:	d900      	bls.n	8000c70 <HAL_FLASH_Program+0x50>
 8000c6e:	e0a6      	b.n	8000dbe <HAL_FLASH_Program+0x19e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000c70:	68e3      	ldr	r3, [r4, #12]
 8000c72:	421d      	tst	r5, r3
 8000c74:	d1f6      	bne.n	8000c64 <HAL_FLASH_Program+0x44>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000c76:	2320      	movs	r3, #32
 8000c78:	68e2      	ldr	r2, [r4, #12]
 8000c7a:	4213      	tst	r3, r2
 8000c7c:	d000      	beq.n	8000c80 <HAL_FLASH_Program+0x60>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000c7e:	60e3      	str	r3, [r4, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000c80:	4b54      	ldr	r3, [pc, #336]	; (8000dd4 <HAL_FLASH_Program+0x1b4>)
 8000c82:	68da      	ldr	r2, [r3, #12]
 8000c84:	06d2      	lsls	r2, r2, #27
 8000c86:	d402      	bmi.n	8000c8e <HAL_FLASH_Program+0x6e>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000c88:	68db      	ldr	r3, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000c8a:	075b      	lsls	r3, r3, #29
 8000c8c:	d51e      	bpl.n	8000ccc <HAL_FLASH_Program+0xac>
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000c8e:	4b51      	ldr	r3, [pc, #324]	; (8000dd4 <HAL_FLASH_Program+0x1b4>)
 8000c90:	68db      	ldr	r3, [r3, #12]
 8000c92:	06db      	lsls	r3, r3, #27
 8000c94:	d400      	bmi.n	8000c98 <HAL_FLASH_Program+0x78>
 8000c96:	e094      	b.n	8000dc2 <HAL_FLASH_Program+0x1a2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000c98:	4653      	mov	r3, sl
 8000c9a:	2202      	movs	r2, #2
 8000c9c:	69db      	ldr	r3, [r3, #28]
 8000c9e:	2114      	movs	r1, #20
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	4652      	mov	r2, sl
 8000ca4:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8000ca6:	2310      	movs	r3, #16
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000ca8:	4a4a      	ldr	r2, [pc, #296]	; (8000dd4 <HAL_FLASH_Program+0x1b4>)
 8000caa:	68d2      	ldr	r2, [r2, #12]
 8000cac:	0752      	lsls	r2, r2, #29
 8000cae:	d506      	bpl.n	8000cbe <HAL_FLASH_Program+0x9e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000cb0:	4653      	mov	r3, sl
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	69db      	ldr	r3, [r3, #28]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	4652      	mov	r2, sl
 8000cba:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8000cbc:	000b      	movs	r3, r1
    return HAL_ERROR;
 8000cbe:	2001      	movs	r0, #1
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000cc0:	4a44      	ldr	r2, [pc, #272]	; (8000dd4 <HAL_FLASH_Program+0x1b4>)
 8000cc2:	60d3      	str	r3, [r2, #12]
  __HAL_UNLOCK(&pFlash);
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	4652      	mov	r2, sl
 8000cc8:	7613      	strb	r3, [r2, #24]
  return status;
 8000cca:	e7ba      	b.n	8000c42 <HAL_FLASH_Program+0x22>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000ccc:	4643      	mov	r3, r8
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d07a      	beq.n	8000dc8 <HAL_FLASH_Program+0x1a8>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000cd2:	4642      	mov	r2, r8
      nbiterations = 4U;
 8000cd4:	2304      	movs	r3, #4
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000cd6:	2a02      	cmp	r2, #2
 8000cd8:	d078      	beq.n	8000dcc <HAL_FLASH_Program+0x1ac>
 8000cda:	464a      	mov	r2, r9
 8000cdc:	3b01      	subs	r3, #1
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	3202      	adds	r2, #2
 8000ce4:	189b      	adds	r3, r3, r2
 8000ce6:	9300      	str	r3, [sp, #0]
      nbiterations = 4U;
 8000ce8:	2300      	movs	r3, #0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000cea:	2501      	movs	r5, #1
      nbiterations = 4U;
 8000cec:	4698      	mov	r8, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000cee:	4c39      	ldr	r4, [pc, #228]	; (8000dd4 <HAL_FLASH_Program+0x1b4>)
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000cf0:	2220      	movs	r2, #32
 8000cf2:	4643      	mov	r3, r8
 8000cf4:	4252      	negs	r2, r2
 8000cf6:	189b      	adds	r3, r3, r2
 8000cf8:	d457      	bmi.n	8000daa <HAL_FLASH_Program+0x18a>
 8000cfa:	465a      	mov	r2, fp
 8000cfc:	40da      	lsrs	r2, r3
 8000cfe:	0013      	movs	r3, r2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000d00:	2200      	movs	r2, #0
 8000d02:	4651      	mov	r1, sl
 8000d04:	61ca      	str	r2, [r1, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000d06:	6922      	ldr	r2, [r4, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000d08:	b29b      	uxth	r3, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000d0a:	432a      	orrs	r2, r5
 8000d0c:	6122      	str	r2, [r4, #16]
  *(__IO uint16_t*)Address = Data;
 8000d0e:	464a      	mov	r2, r9
 8000d10:	8013      	strh	r3, [r2, #0]
  uint32_t tickstart = HAL_GetTick();
 8000d12:	f7ff fb99 	bl	8000448 <HAL_GetTick>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000d16:	4e30      	ldr	r6, [pc, #192]	; (8000dd8 <HAL_FLASH_Program+0x1b8>)
  uint32_t tickstart = HAL_GetTick();
 8000d18:	0007      	movs	r7, r0
 8000d1a:	e004      	b.n	8000d26 <HAL_FLASH_Program+0x106>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000d1c:	f7ff fb94 	bl	8000448 <HAL_GetTick>
 8000d20:	1bc0      	subs	r0, r0, r7
 8000d22:	42b0      	cmp	r0, r6
 8000d24:	d83c      	bhi.n	8000da0 <HAL_FLASH_Program+0x180>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000d26:	68e3      	ldr	r3, [r4, #12]
 8000d28:	421d      	tst	r5, r3
 8000d2a:	d1f7      	bne.n	8000d1c <HAL_FLASH_Program+0xfc>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000d2c:	2220      	movs	r2, #32
 8000d2e:	68e3      	ldr	r3, [r4, #12]
 8000d30:	421a      	tst	r2, r3
 8000d32:	d001      	beq.n	8000d38 <HAL_FLASH_Program+0x118>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000d34:	2320      	movs	r3, #32
 8000d36:	60e3      	str	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000d38:	68e3      	ldr	r3, [r4, #12]
 8000d3a:	06db      	lsls	r3, r3, #27
 8000d3c:	d402      	bmi.n	8000d44 <HAL_FLASH_Program+0x124>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000d3e:	68e3      	ldr	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000d40:	075b      	lsls	r3, r3, #29
 8000d42:	d51f      	bpl.n	8000d84 <HAL_FLASH_Program+0x164>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000d44:	4b23      	ldr	r3, [pc, #140]	; (8000dd4 <HAL_FLASH_Program+0x1b4>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	06db      	lsls	r3, r3, #27
 8000d4a:	d52b      	bpl.n	8000da4 <HAL_FLASH_Program+0x184>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000d4c:	4653      	mov	r3, sl
 8000d4e:	2202      	movs	r2, #2
 8000d50:	69db      	ldr	r3, [r3, #28]
 8000d52:	2114      	movs	r1, #20
 8000d54:	4313      	orrs	r3, r2
 8000d56:	4652      	mov	r2, sl
 8000d58:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8000d5a:	2310      	movs	r3, #16
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000d5c:	4a1d      	ldr	r2, [pc, #116]	; (8000dd4 <HAL_FLASH_Program+0x1b4>)
 8000d5e:	68d2      	ldr	r2, [r2, #12]
 8000d60:	0752      	lsls	r2, r2, #29
 8000d62:	d506      	bpl.n	8000d72 <HAL_FLASH_Program+0x152>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000d64:	4653      	mov	r3, sl
 8000d66:	2201      	movs	r2, #1
 8000d68:	69db      	ldr	r3, [r3, #28]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	4652      	mov	r2, sl
 8000d6e:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8000d70:	000b      	movs	r3, r1
    return HAL_ERROR;
 8000d72:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000d74:	4a17      	ldr	r2, [pc, #92]	; (8000dd4 <HAL_FLASH_Program+0x1b4>)
 8000d76:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000d78:	2101      	movs	r1, #1
 8000d7a:	4a16      	ldr	r2, [pc, #88]	; (8000dd4 <HAL_FLASH_Program+0x1b4>)
 8000d7c:	6913      	ldr	r3, [r2, #16]
 8000d7e:	438b      	bics	r3, r1
 8000d80:	6113      	str	r3, [r2, #16]
 8000d82:	e79f      	b.n	8000cc4 <HAL_FLASH_Program+0xa4>
 8000d84:	6923      	ldr	r3, [r4, #16]
 8000d86:	43ab      	bics	r3, r5
 8000d88:	6123      	str	r3, [r4, #16]
 8000d8a:	2310      	movs	r3, #16
 8000d8c:	469c      	mov	ip, r3
 8000d8e:	3b0e      	subs	r3, #14
 8000d90:	44e0      	add	r8, ip
 8000d92:	469c      	mov	ip, r3
    for (index = 0U; index < nbiterations; index++)
 8000d94:	9b00      	ldr	r3, [sp, #0]
 8000d96:	44e1      	add	r9, ip
 8000d98:	454b      	cmp	r3, r9
 8000d9a:	d1a9      	bne.n	8000cf0 <HAL_FLASH_Program+0xd0>
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	e791      	b.n	8000cc4 <HAL_FLASH_Program+0xa4>
        return HAL_TIMEOUT;
 8000da0:	2003      	movs	r0, #3
 8000da2:	e7e9      	b.n	8000d78 <HAL_FLASH_Program+0x158>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000da4:	2104      	movs	r1, #4
  uint32_t flags = 0U;
 8000da6:	2300      	movs	r3, #0
 8000da8:	e7d8      	b.n	8000d5c <HAL_FLASH_Program+0x13c>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000daa:	4642      	mov	r2, r8
 8000dac:	2320      	movs	r3, #32
 8000dae:	1a9b      	subs	r3, r3, r2
 8000db0:	465a      	mov	r2, fp
 8000db2:	4641      	mov	r1, r8
 8000db4:	409a      	lsls	r2, r3
 8000db6:	9b01      	ldr	r3, [sp, #4]
 8000db8:	40cb      	lsrs	r3, r1
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	e7a0      	b.n	8000d00 <HAL_FLASH_Program+0xe0>
        return HAL_TIMEOUT;
 8000dbe:	2003      	movs	r0, #3
 8000dc0:	e780      	b.n	8000cc4 <HAL_FLASH_Program+0xa4>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000dc2:	2104      	movs	r1, #4
  uint32_t flags = 0U;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	e76f      	b.n	8000ca8 <HAL_FLASH_Program+0x88>
      nbiterations = 1U;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	e786      	b.n	8000cda <HAL_FLASH_Program+0xba>
      nbiterations = 2U;
 8000dcc:	3b02      	subs	r3, #2
 8000dce:	e784      	b.n	8000cda <HAL_FLASH_Program+0xba>
 8000dd0:	20000170 	.word	0x20000170
 8000dd4:	40022000 	.word	0x40022000
 8000dd8:	0000c350 	.word	0x0000c350

08000ddc <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8000ddc:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <HAL_FLASH_Unlock+0x18>)
    return HAL_ERROR;
 8000dde:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8000de0:	691a      	ldr	r2, [r3, #16]
 8000de2:	0612      	lsls	r2, r2, #24
 8000de4:	d504      	bpl.n	8000df0 <HAL_FLASH_Unlock+0x14>
  return HAL_OK; 
 8000de6:	2000      	movs	r0, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000de8:	4a03      	ldr	r2, [pc, #12]	; (8000df8 <HAL_FLASH_Unlock+0x1c>)
 8000dea:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000dec:	4a03      	ldr	r2, [pc, #12]	; (8000dfc <HAL_FLASH_Unlock+0x20>)
 8000dee:	605a      	str	r2, [r3, #4]
}
 8000df0:	4770      	bx	lr
 8000df2:	46c0      	nop			; (mov r8, r8)
 8000df4:	40022000 	.word	0x40022000
 8000df8:	45670123 	.word	0x45670123
 8000dfc:	cdef89ab 	.word	0xcdef89ab

08000e00 <FLASH_WaitForLastOperation>:
{
 8000e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e02:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000e04:	f7ff fb20 	bl	8000448 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000e08:	2501      	movs	r5, #1
  uint32_t tickstart = HAL_GetTick();
 8000e0a:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000e0c:	4e1f      	ldr	r6, [pc, #124]	; (8000e8c <FLASH_WaitForLastOperation+0x8c>)
 8000e0e:	1c63      	adds	r3, r4, #1
 8000e10:	d125      	bne.n	8000e5e <FLASH_WaitForLastOperation+0x5e>
 8000e12:	2201      	movs	r2, #1
 8000e14:	491d      	ldr	r1, [pc, #116]	; (8000e8c <FLASH_WaitForLastOperation+0x8c>)
 8000e16:	68cb      	ldr	r3, [r1, #12]
 8000e18:	421a      	tst	r2, r3
 8000e1a:	d1fc      	bne.n	8000e16 <FLASH_WaitForLastOperation+0x16>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000e1c:	2220      	movs	r2, #32
 8000e1e:	4b1b      	ldr	r3, [pc, #108]	; (8000e8c <FLASH_WaitForLastOperation+0x8c>)
 8000e20:	68d9      	ldr	r1, [r3, #12]
 8000e22:	420a      	tst	r2, r1
 8000e24:	d127      	bne.n	8000e76 <FLASH_WaitForLastOperation+0x76>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000e26:	4b19      	ldr	r3, [pc, #100]	; (8000e8c <FLASH_WaitForLastOperation+0x8c>)
 8000e28:	68da      	ldr	r2, [r3, #12]
 8000e2a:	06d2      	lsls	r2, r2, #27
 8000e2c:	d403      	bmi.n	8000e36 <FLASH_WaitForLastOperation+0x36>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000e2e:	68db      	ldr	r3, [r3, #12]
  return HAL_OK;
 8000e30:	2000      	movs	r0, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000e32:	075b      	lsls	r3, r3, #29
 8000e34:	d512      	bpl.n	8000e5c <FLASH_WaitForLastOperation+0x5c>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000e36:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <FLASH_WaitForLastOperation+0x8c>)
 8000e38:	68db      	ldr	r3, [r3, #12]
 8000e3a:	06db      	lsls	r3, r3, #27
 8000e3c:	d41d      	bmi.n	8000e7a <FLASH_WaitForLastOperation+0x7a>
 8000e3e:	2104      	movs	r1, #4
  uint32_t flags = 0U;
 8000e40:	2300      	movs	r3, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000e42:	4a12      	ldr	r2, [pc, #72]	; (8000e8c <FLASH_WaitForLastOperation+0x8c>)
 8000e44:	68d2      	ldr	r2, [r2, #12]
 8000e46:	0752      	lsls	r2, r2, #29
 8000e48:	d505      	bpl.n	8000e56 <FLASH_WaitForLastOperation+0x56>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	4a10      	ldr	r2, [pc, #64]	; (8000e90 <FLASH_WaitForLastOperation+0x90>)
 8000e4e:	69d3      	ldr	r3, [r2, #28]
 8000e50:	4303      	orrs	r3, r0
 8000e52:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8000e54:	000b      	movs	r3, r1
    return HAL_ERROR;
 8000e56:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000e58:	4a0c      	ldr	r2, [pc, #48]	; (8000e8c <FLASH_WaitForLastOperation+0x8c>)
 8000e5a:	60d3      	str	r3, [r2, #12]
}
 8000e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000e5e:	68f3      	ldr	r3, [r6, #12]
 8000e60:	421d      	tst	r5, r3
 8000e62:	d0db      	beq.n	8000e1c <FLASH_WaitForLastOperation+0x1c>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000e64:	2c00      	cmp	r4, #0
 8000e66:	d004      	beq.n	8000e72 <FLASH_WaitForLastOperation+0x72>
 8000e68:	f7ff faee 	bl	8000448 <HAL_GetTick>
 8000e6c:	1bc0      	subs	r0, r0, r7
 8000e6e:	4284      	cmp	r4, r0
 8000e70:	d2cd      	bcs.n	8000e0e <FLASH_WaitForLastOperation+0xe>
        return HAL_TIMEOUT;
 8000e72:	2003      	movs	r0, #3
 8000e74:	e7f2      	b.n	8000e5c <FLASH_WaitForLastOperation+0x5c>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000e76:	60da      	str	r2, [r3, #12]
 8000e78:	e7d5      	b.n	8000e26 <FLASH_WaitForLastOperation+0x26>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000e7a:	2102      	movs	r1, #2
 8000e7c:	4a04      	ldr	r2, [pc, #16]	; (8000e90 <FLASH_WaitForLastOperation+0x90>)
 8000e7e:	69d3      	ldr	r3, [r2, #28]
 8000e80:	430b      	orrs	r3, r1
 8000e82:	61d3      	str	r3, [r2, #28]
 8000e84:	3112      	adds	r1, #18
    flags |= FLASH_FLAG_WRPERR;
 8000e86:	2310      	movs	r3, #16
 8000e88:	e7db      	b.n	8000e42 <FLASH_WaitForLastOperation+0x42>
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	40022000 	.word	0x40022000
 8000e90:	20000170 	.word	0x20000170

08000e94 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e96:	464f      	mov	r7, r9
 8000e98:	4646      	mov	r6, r8
 8000e9a:	46d6      	mov	lr, sl
 8000e9c:	b5c0      	push	{r6, r7, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t address = 0U;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000e9e:	4f2f      	ldr	r7, [pc, #188]	; (8000f5c <HAL_FLASHEx_Erase+0xc8>)
{
 8000ea0:	0006      	movs	r6, r0
  __HAL_LOCK(&pFlash);
 8000ea2:	7e3b      	ldrb	r3, [r7, #24]
{
 8000ea4:	4689      	mov	r9, r1
  __HAL_LOCK(&pFlash);
 8000ea6:	2002      	movs	r0, #2
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d041      	beq.n	8000f30 <HAL_FLASHEx_Erase+0x9c>
 8000eac:	2301      	movs	r3, #1
 8000eae:	763b      	strb	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000eb0:	6833      	ldr	r3, [r6, #0]
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000eb2:	482b      	ldr	r0, [pc, #172]	; (8000f60 <HAL_FLASHEx_Erase+0xcc>)
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d034      	beq.n	8000f22 <HAL_FLASHEx_Erase+0x8e>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000eb8:	f7ff ffa2 	bl	8000e00 <FLASH_WaitForLastOperation>
 8000ebc:	2800      	cmp	r0, #0
 8000ebe:	d134      	bne.n	8000f2a <HAL_FLASHEx_Erase+0x96>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	464a      	mov	r2, r9
 8000ec4:	425b      	negs	r3, r3
 8000ec6:	6013      	str	r3, [r2, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000ec8:	68b3      	ldr	r3, [r6, #8]
        for(address = pEraseInit->PageAddress;
 8000eca:	6875      	ldr	r5, [r6, #4]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000ecc:	029b      	lsls	r3, r3, #10
 8000ece:	195b      	adds	r3, r3, r5
        for(address = pEraseInit->PageAddress;
 8000ed0:	429d      	cmp	r5, r3
 8000ed2:	d22a      	bcs.n	8000f2a <HAL_FLASHEx_Erase+0x96>
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000ed4:	2300      	movs	r3, #0

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000ed6:	4c23      	ldr	r4, [pc, #140]	; (8000f64 <HAL_FLASHEx_Erase+0xd0>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000ed8:	4698      	mov	r8, r3
 8000eda:	e00a      	b.n	8000ef2 <HAL_FLASHEx_Erase+0x5e>
            address += FLASH_PAGE_SIZE)
 8000edc:	2380      	movs	r3, #128	; 0x80
 8000ede:	00db      	lsls	r3, r3, #3
 8000ee0:	469c      	mov	ip, r3
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000ee2:	6872      	ldr	r2, [r6, #4]
            address += FLASH_PAGE_SIZE)
 8000ee4:	4465      	add	r5, ip
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000ee6:	4694      	mov	ip, r2
 8000ee8:	68b3      	ldr	r3, [r6, #8]
 8000eea:	029b      	lsls	r3, r3, #10
 8000eec:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 8000eee:	42ab      	cmp	r3, r5
 8000ef0:	d91c      	bls.n	8000f2c <HAL_FLASHEx_Erase+0x98>
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000ef2:	2202      	movs	r2, #2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000ef4:	4643      	mov	r3, r8
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000ef6:	4692      	mov	sl, r2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000ef8:	61fb      	str	r3, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000efa:	6923      	ldr	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000efc:	4818      	ldr	r0, [pc, #96]	; (8000f60 <HAL_FLASHEx_Erase+0xcc>)
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000efe:	4313      	orrs	r3, r2
 8000f00:	6123      	str	r3, [r4, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000f02:	6165      	str	r5, [r4, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000f04:	6923      	ldr	r3, [r4, #16]
 8000f06:	323e      	adds	r2, #62	; 0x3e
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	6123      	str	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f0c:	f7ff ff78 	bl	8000e00 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000f10:	4652      	mov	r2, sl
 8000f12:	6923      	ldr	r3, [r4, #16]
 8000f14:	4393      	bics	r3, r2
 8000f16:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8000f18:	2800      	cmp	r0, #0
 8000f1a:	d0df      	beq.n	8000edc <HAL_FLASHEx_Erase+0x48>
            *PageError = address;
 8000f1c:	464b      	mov	r3, r9
 8000f1e:	601d      	str	r5, [r3, #0]
            break;
 8000f20:	e004      	b.n	8000f2c <HAL_FLASHEx_Erase+0x98>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000f22:	f7ff ff6d 	bl	8000e00 <FLASH_WaitForLastOperation>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d007      	beq.n	8000f3a <HAL_FLASHEx_Erase+0xa6>
  HAL_StatusTypeDef status = HAL_ERROR;
 8000f2a:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	763b      	strb	r3, [r7, #24]
}
 8000f30:	bc1c      	pop	{r2, r3, r4}
 8000f32:	4690      	mov	r8, r2
 8000f34:	4699      	mov	r9, r3
 8000f36:	46a2      	mov	sl, r4
 8000f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000f3a:	2504      	movs	r5, #4
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000f3c:	2240      	movs	r2, #64	; 0x40
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000f3e:	4c09      	ldr	r4, [pc, #36]	; (8000f64 <HAL_FLASHEx_Erase+0xd0>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000f40:	61f8      	str	r0, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000f42:	6923      	ldr	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f44:	4806      	ldr	r0, [pc, #24]	; (8000f60 <HAL_FLASHEx_Erase+0xcc>)
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000f46:	432b      	orrs	r3, r5
 8000f48:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000f4a:	6923      	ldr	r3, [r4, #16]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f50:	f7ff ff56 	bl	8000e00 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000f54:	6923      	ldr	r3, [r4, #16]
 8000f56:	43ab      	bics	r3, r5
 8000f58:	6123      	str	r3, [r4, #16]
 8000f5a:	e7e7      	b.n	8000f2c <HAL_FLASHEx_Erase+0x98>
 8000f5c:	20000170 	.word	0x20000170
 8000f60:	0000c350 	.word	0x0000c350
 8000f64:	40022000 	.word	0x40022000

08000f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f6a:	46de      	mov	lr, fp
 8000f6c:	4657      	mov	r7, sl
 8000f6e:	464e      	mov	r6, r9
 8000f70:	4645      	mov	r5, r8
 8000f72:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000f74:	680b      	ldr	r3, [r1, #0]
{ 
 8000f76:	b085      	sub	sp, #20
 8000f78:	468b      	mov	fp, r1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000f7a:	469c      	mov	ip, r3
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d100      	bne.n	8000f84 <HAL_GPIO_Init+0x1c>
 8000f82:	e0b7      	b.n	80010f4 <HAL_GPIO_Init+0x18c>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f84:	4b64      	ldr	r3, [pc, #400]	; (8001118 <HAL_GPIO_Init+0x1b0>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f86:	46e1      	mov	r9, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f88:	469a      	mov	sl, r3
        temp = EXTI->IMR;
 8000f8a:	4b64      	ldr	r3, [pc, #400]	; (800111c <HAL_GPIO_Init+0x1b4>)
 8000f8c:	4698      	mov	r8, r3
 8000f8e:	e067      	b.n	8001060 <HAL_GPIO_Init+0xf8>
      temp = GPIOx->MODER;
 8000f90:	6803      	ldr	r3, [r0, #0]
 8000f92:	0056      	lsls	r6, r2, #1
 8000f94:	469c      	mov	ip, r3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000f96:	2303      	movs	r3, #3
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f98:	2703      	movs	r7, #3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000f9a:	40b3      	lsls	r3, r6
 8000f9c:	4664      	mov	r4, ip
 8000f9e:	43db      	mvns	r3, r3
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fa0:	400f      	ands	r7, r1
 8000fa2:	40b7      	lsls	r7, r6
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000fa4:	401c      	ands	r4, r3
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fa6:	433c      	orrs	r4, r7
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fa8:	9f01      	ldr	r7, [sp, #4]
      GPIOx->MODER = temp;
 8000faa:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fac:	3f01      	subs	r7, #1
 8000fae:	2f01      	cmp	r7, #1
 8000fb0:	d800      	bhi.n	8000fb4 <HAL_GPIO_Init+0x4c>
 8000fb2:	e081      	b.n	80010b8 <HAL_GPIO_Init+0x150>
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000fb4:	465c      	mov	r4, fp
      temp = GPIOx->PUPDR;
 8000fb6:	68c5      	ldr	r5, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fb8:	402b      	ands	r3, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000fba:	68a5      	ldr	r5, [r4, #8]
 8000fbc:	40b5      	lsls	r5, r6
 8000fbe:	432b      	orrs	r3, r5
      GPIOx->PUPDR = temp;
 8000fc0:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000fc2:	2380      	movs	r3, #128	; 0x80
 8000fc4:	055b      	lsls	r3, r3, #21
 8000fc6:	4219      	tst	r1, r3
 8000fc8:	d046      	beq.n	8001058 <HAL_GPIO_Init+0xf0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fca:	4653      	mov	r3, sl
 8000fcc:	2401      	movs	r4, #1
 8000fce:	699b      	ldr	r3, [r3, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000fd0:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd2:	4323      	orrs	r3, r4
 8000fd4:	4654      	mov	r4, sl
 8000fd6:	61a3      	str	r3, [r4, #24]
 8000fd8:	69a3      	ldr	r3, [r4, #24]
 8000fda:	2401      	movs	r4, #1
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000fdc:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fde:	4023      	ands	r3, r4
 8000fe0:	4c4f      	ldr	r4, [pc, #316]	; (8001120 <HAL_GPIO_Init+0x1b8>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000fe2:	4016      	ands	r6, r2
 8000fe4:	46a4      	mov	ip, r4
 8000fe6:	00b6      	lsls	r6, r6, #2
 8000fe8:	40b7      	lsls	r7, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fea:	2490      	movs	r4, #144	; 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fec:	9303      	str	r3, [sp, #12]
 8000fee:	9b03      	ldr	r3, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8000ff0:	0893      	lsrs	r3, r2, #2
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	4463      	add	r3, ip
 8000ff6:	689d      	ldr	r5, [r3, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ff8:	05e4      	lsls	r4, r4, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000ffa:	43bd      	bics	r5, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ffc:	42a0      	cmp	r0, r4
 8000ffe:	d100      	bne.n	8001002 <HAL_GPIO_Init+0x9a>
 8001000:	e07f      	b.n	8001102 <HAL_GPIO_Init+0x19a>
 8001002:	4f48      	ldr	r7, [pc, #288]	; (8001124 <HAL_GPIO_Init+0x1bc>)
 8001004:	42b8      	cmp	r0, r7
 8001006:	d100      	bne.n	800100a <HAL_GPIO_Init+0xa2>
 8001008:	e07d      	b.n	8001106 <HAL_GPIO_Init+0x19e>
 800100a:	4f47      	ldr	r7, [pc, #284]	; (8001128 <HAL_GPIO_Init+0x1c0>)
 800100c:	42b8      	cmp	r0, r7
 800100e:	d100      	bne.n	8001012 <HAL_GPIO_Init+0xaa>
 8001010:	e07c      	b.n	800110c <HAL_GPIO_Init+0x1a4>
 8001012:	4f46      	ldr	r7, [pc, #280]	; (800112c <HAL_GPIO_Init+0x1c4>)
 8001014:	42b8      	cmp	r0, r7
 8001016:	d100      	bne.n	800101a <HAL_GPIO_Init+0xb2>
 8001018:	e07b      	b.n	8001112 <HAL_GPIO_Init+0x1aa>
 800101a:	2705      	movs	r7, #5
 800101c:	40b7      	lsls	r7, r6
 800101e:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8001020:	609d      	str	r5, [r3, #8]
        temp = EXTI->IMR;
 8001022:	4643      	mov	r3, r8
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001024:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->IMR;
 8001026:	681b      	ldr	r3, [r3, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001028:	43e5      	mvns	r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800102a:	03cc      	lsls	r4, r1, #15
 800102c:	d45f      	bmi.n	80010ee <HAL_GPIO_Init+0x186>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800102e:	402b      	ands	r3, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 8001030:	4644      	mov	r4, r8
 8001032:	6023      	str	r3, [r4, #0]

        temp = EXTI->EMR;
 8001034:	6863      	ldr	r3, [r4, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001036:	038c      	lsls	r4, r1, #14
 8001038:	d456      	bmi.n	80010e8 <HAL_GPIO_Init+0x180>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 800103a:	402b      	ands	r3, r5
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 800103c:	4644      	mov	r4, r8
 800103e:	6063      	str	r3, [r4, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001040:	68a3      	ldr	r3, [r4, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001042:	02cc      	lsls	r4, r1, #11
 8001044:	d44d      	bmi.n	80010e2 <HAL_GPIO_Init+0x17a>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001046:	402b      	ands	r3, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 8001048:	4644      	mov	r4, r8
 800104a:	60a3      	str	r3, [r4, #8]

        temp = EXTI->FTSR;
 800104c:	68e3      	ldr	r3, [r4, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800104e:	0289      	lsls	r1, r1, #10
 8001050:	d444      	bmi.n	80010dc <HAL_GPIO_Init+0x174>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001052:	402b      	ands	r3, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 8001054:	4641      	mov	r1, r8
 8001056:	60cb      	str	r3, [r1, #12]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001058:	464b      	mov	r3, r9
      }
    }
    
    position++;
 800105a:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 800105c:	40d3      	lsrs	r3, r2
 800105e:	d049      	beq.n	80010f4 <HAL_GPIO_Init+0x18c>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001060:	2501      	movs	r5, #1
 8001062:	464c      	mov	r4, r9
 8001064:	4095      	lsls	r5, r2
 8001066:	402c      	ands	r4, r5
 8001068:	9400      	str	r4, [sp, #0]
    if(iocurrent)
 800106a:	d0f5      	beq.n	8001058 <HAL_GPIO_Init+0xf0>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800106c:	465b      	mov	r3, fp
 800106e:	6859      	ldr	r1, [r3, #4]
 8001070:	2310      	movs	r3, #16
 8001072:	000f      	movs	r7, r1
 8001074:	439f      	bics	r7, r3
 8001076:	003b      	movs	r3, r7
 8001078:	9701      	str	r7, [sp, #4]
 800107a:	2f02      	cmp	r7, #2
 800107c:	d188      	bne.n	8000f90 <HAL_GPIO_Init+0x28>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 800107e:	240f      	movs	r4, #15
 8001080:	3305      	adds	r3, #5
 8001082:	4013      	ands	r3, r2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	409c      	lsls	r4, r3
        temp = GPIOx->AFR[position >> 3];
 8001088:	08d6      	lsrs	r6, r2, #3
 800108a:	00b6      	lsls	r6, r6, #2
 800108c:	1986      	adds	r6, r0, r6
 800108e:	6a37      	ldr	r7, [r6, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8001090:	43a7      	bics	r7, r4
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8001092:	465c      	mov	r4, fp
 8001094:	6924      	ldr	r4, [r4, #16]
 8001096:	409c      	lsls	r4, r3
 8001098:	0023      	movs	r3, r4
 800109a:	433b      	orrs	r3, r7
        GPIOx->AFR[position >> 3U] = temp;
 800109c:	6233      	str	r3, [r6, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 800109e:	2303      	movs	r3, #3
 80010a0:	0056      	lsls	r6, r2, #1
 80010a2:	40b3      	lsls	r3, r6
 80010a4:	43db      	mvns	r3, r3
      temp = GPIOx->MODER;
 80010a6:	6807      	ldr	r7, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80010a8:	401f      	ands	r7, r3
 80010aa:	46bc      	mov	ip, r7
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010ac:	2703      	movs	r7, #3
 80010ae:	400f      	ands	r7, r1
 80010b0:	40b7      	lsls	r7, r6
 80010b2:	4664      	mov	r4, ip
 80010b4:	4327      	orrs	r7, r4
      GPIOx->MODER = temp;
 80010b6:	6007      	str	r7, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 80010b8:	6887      	ldr	r7, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80010ba:	465c      	mov	r4, fp
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010bc:	401f      	ands	r7, r3
 80010be:	46bc      	mov	ip, r7
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80010c0:	68e7      	ldr	r7, [r4, #12]
 80010c2:	4664      	mov	r4, ip
 80010c4:	40b7      	lsls	r7, r6
 80010c6:	4327      	orrs	r7, r4
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010c8:	2401      	movs	r4, #1
        GPIOx->OSPEEDR = temp;
 80010ca:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80010cc:	6847      	ldr	r7, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80010ce:	43af      	bics	r7, r5
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010d0:	090d      	lsrs	r5, r1, #4
 80010d2:	4025      	ands	r5, r4
 80010d4:	4095      	lsls	r5, r2
 80010d6:	433d      	orrs	r5, r7
        GPIOx->OTYPER = temp;
 80010d8:	6045      	str	r5, [r0, #4]
 80010da:	e76b      	b.n	8000fb4 <HAL_GPIO_Init+0x4c>
          SET_BIT(temp, iocurrent); 
 80010dc:	9900      	ldr	r1, [sp, #0]
 80010de:	430b      	orrs	r3, r1
 80010e0:	e7b8      	b.n	8001054 <HAL_GPIO_Init+0xec>
          SET_BIT(temp, iocurrent); 
 80010e2:	9c00      	ldr	r4, [sp, #0]
 80010e4:	4323      	orrs	r3, r4
 80010e6:	e7af      	b.n	8001048 <HAL_GPIO_Init+0xe0>
          SET_BIT(temp, iocurrent); 
 80010e8:	9c00      	ldr	r4, [sp, #0]
 80010ea:	4323      	orrs	r3, r4
 80010ec:	e7a6      	b.n	800103c <HAL_GPIO_Init+0xd4>
          SET_BIT(temp, iocurrent); 
 80010ee:	9c00      	ldr	r4, [sp, #0]
 80010f0:	4323      	orrs	r3, r4
 80010f2:	e79d      	b.n	8001030 <HAL_GPIO_Init+0xc8>
  } 
}
 80010f4:	b005      	add	sp, #20
 80010f6:	bc3c      	pop	{r2, r3, r4, r5}
 80010f8:	4690      	mov	r8, r2
 80010fa:	4699      	mov	r9, r3
 80010fc:	46a2      	mov	sl, r4
 80010fe:	46ab      	mov	fp, r5
 8001100:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001102:	2700      	movs	r7, #0
 8001104:	e78b      	b.n	800101e <HAL_GPIO_Init+0xb6>
 8001106:	2701      	movs	r7, #1
 8001108:	40b7      	lsls	r7, r6
 800110a:	e788      	b.n	800101e <HAL_GPIO_Init+0xb6>
 800110c:	2702      	movs	r7, #2
 800110e:	40b7      	lsls	r7, r6
 8001110:	e785      	b.n	800101e <HAL_GPIO_Init+0xb6>
 8001112:	2703      	movs	r7, #3
 8001114:	40b7      	lsls	r7, r6
 8001116:	e782      	b.n	800101e <HAL_GPIO_Init+0xb6>
 8001118:	40021000 	.word	0x40021000
 800111c:	40010400 	.word	0x40010400
 8001120:	40010000 	.word	0x40010000
 8001124:	48000400 	.word	0x48000400
 8001128:	48000800 	.word	0x48000800
 800112c:	48000c00 	.word	0x48000c00

08001130 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001130:	6943      	ldr	r3, [r0, #20]
 8001132:	4059      	eors	r1, r3
 8001134:	6141      	str	r1, [r0, #20]
}
 8001136:	4770      	bx	lr

08001138 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001138:	b570      	push	{r4, r5, r6, lr}
 800113a:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 800113c:	d01e      	beq.n	800117c <HAL_IWDG_Init+0x44>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 800113e:	6803      	ldr	r3, [r0, #0]
 8001140:	4a11      	ldr	r2, [pc, #68]	; (8001188 <HAL_IWDG_Init+0x50>)
 8001142:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001144:	4a11      	ldr	r2, [pc, #68]	; (800118c <HAL_IWDG_Init+0x54>)
 8001146:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001148:	6842      	ldr	r2, [r0, #4]
 800114a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800114c:	6882      	ldr	r2, [r0, #8]
 800114e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001150:	f7ff f97a 	bl	8000448 <HAL_GetTick>
 8001154:	0005      	movs	r5, r0

   /* Wait for register to be updated */
  while(hiwdg->Instance->SR != RESET)
 8001156:	e004      	b.n	8001162 <HAL_IWDG_Init+0x2a>
  {
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001158:	f7ff f976 	bl	8000448 <HAL_GetTick>
 800115c:	1b40      	subs	r0, r0, r5
 800115e:	2827      	cmp	r0, #39	; 0x27
 8001160:	d80a      	bhi.n	8001178 <HAL_IWDG_Init+0x40>
  while(hiwdg->Instance->SR != RESET)
 8001162:	6823      	ldr	r3, [r4, #0]
 8001164:	68da      	ldr	r2, [r3, #12]
 8001166:	2a00      	cmp	r2, #0
 8001168:	d1f6      	bne.n	8001158 <HAL_IWDG_Init+0x20>
    }
  }

  /* If window parameter is different than current value, modify window 
  register */
  if(hiwdg->Instance->WINR != hiwdg->Init.Window)
 800116a:	6919      	ldr	r1, [r3, #16]
 800116c:	68e2      	ldr	r2, [r4, #12]
 800116e:	4291      	cmp	r1, r2
 8001170:	d006      	beq.n	8001180 <HAL_IWDG_Init+0x48>
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
  }

  /* Return function status */
  return HAL_OK;
 8001172:	2000      	movs	r0, #0
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8001174:	611a      	str	r2, [r3, #16]
}
 8001176:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 8001178:	2003      	movs	r0, #3
 800117a:	e7fc      	b.n	8001176 <HAL_IWDG_Init+0x3e>
    return HAL_ERROR;
 800117c:	2001      	movs	r0, #1
 800117e:	e7fa      	b.n	8001176 <HAL_IWDG_Init+0x3e>
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001180:	4a03      	ldr	r2, [pc, #12]	; (8001190 <HAL_IWDG_Init+0x58>)
  return HAL_OK;
 8001182:	2000      	movs	r0, #0
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	e7f6      	b.n	8001176 <HAL_IWDG_Init+0x3e>
 8001188:	0000cccc 	.word	0x0000cccc
 800118c:	00005555 	.word	0x00005555
 8001190:	0000aaaa 	.word	0x0000aaaa

08001194 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001194:	6803      	ldr	r3, [r0, #0]
 8001196:	4a02      	ldr	r2, [pc, #8]	; (80011a0 <HAL_IWDG_Refresh+0xc>)

  /* Return function status */
  return HAL_OK;
}
 8001198:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800119a:	601a      	str	r2, [r3, #0]
}
 800119c:	4770      	bx	lr
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	0000aaaa 	.word	0x0000aaaa

080011a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011a6:	46ce      	mov	lr, r9
 80011a8:	4647      	mov	r7, r8
 80011aa:	b580      	push	{r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ac:	6803      	ldr	r3, [r0, #0]
{
 80011ae:	b083      	sub	sp, #12
 80011b0:	0004      	movs	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011b2:	07da      	lsls	r2, r3, #31
 80011b4:	d52f      	bpl.n	8001216 <HAL_RCC_OscConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80011b6:	220c      	movs	r2, #12
 80011b8:	48c4      	ldr	r0, [pc, #784]	; (80014cc <HAL_RCC_OscConfig+0x328>)
 80011ba:	6841      	ldr	r1, [r0, #4]
 80011bc:	4011      	ands	r1, r2
 80011be:	2904      	cmp	r1, #4
 80011c0:	d100      	bne.n	80011c4 <HAL_RCC_OscConfig+0x20>
 80011c2:	e110      	b.n	80013e6 <HAL_RCC_OscConfig+0x242>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011c4:	6841      	ldr	r1, [r0, #4]
 80011c6:	400a      	ands	r2, r1
 80011c8:	2a08      	cmp	r2, #8
 80011ca:	d100      	bne.n	80011ce <HAL_RCC_OscConfig+0x2a>
 80011cc:	e107      	b.n	80013de <HAL_RCC_OscConfig+0x23a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ce:	6863      	ldr	r3, [r4, #4]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d100      	bne.n	80011d6 <HAL_RCC_OscConfig+0x32>
 80011d4:	e186      	b.n	80014e4 <HAL_RCC_OscConfig+0x340>
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d100      	bne.n	80011dc <HAL_RCC_OscConfig+0x38>
 80011da:	e11a      	b.n	8001412 <HAL_RCC_OscConfig+0x26e>
 80011dc:	2b05      	cmp	r3, #5
 80011de:	d100      	bne.n	80011e2 <HAL_RCC_OscConfig+0x3e>
 80011e0:	e1db      	b.n	800159a <HAL_RCC_OscConfig+0x3f6>
 80011e2:	4bba      	ldr	r3, [pc, #744]	; (80014cc <HAL_RCC_OscConfig+0x328>)
 80011e4:	49ba      	ldr	r1, [pc, #744]	; (80014d0 <HAL_RCC_OscConfig+0x32c>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	400a      	ands	r2, r1
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	49b9      	ldr	r1, [pc, #740]	; (80014d4 <HAL_RCC_OscConfig+0x330>)
 80011f0:	400a      	ands	r2, r1
 80011f2:	601a      	str	r2, [r3, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f4:	f7ff f928 	bl	8000448 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011f8:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 80011fa:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011fc:	4eb3      	ldr	r6, [pc, #716]	; (80014cc <HAL_RCC_OscConfig+0x328>)
 80011fe:	02ad      	lsls	r5, r5, #10
 8001200:	e005      	b.n	800120e <HAL_RCC_OscConfig+0x6a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001202:	f7ff f921 	bl	8000448 <HAL_GetTick>
 8001206:	1bc0      	subs	r0, r0, r7
 8001208:	2864      	cmp	r0, #100	; 0x64
 800120a:	d900      	bls.n	800120e <HAL_RCC_OscConfig+0x6a>
 800120c:	e12f      	b.n	800146e <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800120e:	6833      	ldr	r3, [r6, #0]
 8001210:	422b      	tst	r3, r5
 8001212:	d0f6      	beq.n	8001202 <HAL_RCC_OscConfig+0x5e>
 8001214:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001216:	079a      	lsls	r2, r3, #30
 8001218:	d529      	bpl.n	800126e <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800121a:	220c      	movs	r2, #12
 800121c:	49ab      	ldr	r1, [pc, #684]	; (80014cc <HAL_RCC_OscConfig+0x328>)
 800121e:	6848      	ldr	r0, [r1, #4]
 8001220:	4202      	tst	r2, r0
 8001222:	d100      	bne.n	8001226 <HAL_RCC_OscConfig+0x82>
 8001224:	e0bf      	b.n	80013a6 <HAL_RCC_OscConfig+0x202>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001226:	6848      	ldr	r0, [r1, #4]
 8001228:	4002      	ands	r2, r0
 800122a:	2a08      	cmp	r2, #8
 800122c:	d100      	bne.n	8001230 <HAL_RCC_OscConfig+0x8c>
 800122e:	e0b6      	b.n	800139e <HAL_RCC_OscConfig+0x1fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001230:	68e3      	ldr	r3, [r4, #12]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001232:	4da6      	ldr	r5, [pc, #664]	; (80014cc <HAL_RCC_OscConfig+0x328>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001234:	2b00      	cmp	r3, #0
 8001236:	d100      	bne.n	800123a <HAL_RCC_OscConfig+0x96>
 8001238:	e134      	b.n	80014a4 <HAL_RCC_OscConfig+0x300>
        __HAL_RCC_HSI_ENABLE();
 800123a:	2201      	movs	r2, #1
 800123c:	682b      	ldr	r3, [r5, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800123e:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8001240:	4313      	orrs	r3, r2
 8001242:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001244:	f7ff f900 	bl	8000448 <HAL_GetTick>
 8001248:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800124a:	e005      	b.n	8001258 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800124c:	f7ff f8fc 	bl	8000448 <HAL_GetTick>
 8001250:	1bc0      	subs	r0, r0, r7
 8001252:	2802      	cmp	r0, #2
 8001254:	d900      	bls.n	8001258 <HAL_RCC_OscConfig+0xb4>
 8001256:	e10a      	b.n	800146e <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001258:	682b      	ldr	r3, [r5, #0]
 800125a:	421e      	tst	r6, r3
 800125c:	d0f6      	beq.n	800124c <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800125e:	21f8      	movs	r1, #248	; 0xf8
 8001260:	682a      	ldr	r2, [r5, #0]
 8001262:	6923      	ldr	r3, [r4, #16]
 8001264:	438a      	bics	r2, r1
 8001266:	00db      	lsls	r3, r3, #3
 8001268:	4313      	orrs	r3, r2
 800126a:	602b      	str	r3, [r5, #0]
 800126c:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800126e:	071a      	lsls	r2, r3, #28
 8001270:	d500      	bpl.n	8001274 <HAL_RCC_OscConfig+0xd0>
 8001272:	e07d      	b.n	8001370 <HAL_RCC_OscConfig+0x1cc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001274:	075a      	lsls	r2, r3, #29
 8001276:	d540      	bpl.n	80012fa <HAL_RCC_OscConfig+0x156>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001278:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800127a:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800127c:	4b93      	ldr	r3, [pc, #588]	; (80014cc <HAL_RCC_OscConfig+0x328>)
 800127e:	0552      	lsls	r2, r2, #21
 8001280:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001282:	4680      	mov	r8, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001284:	4211      	tst	r1, r2
 8001286:	d108      	bne.n	800129a <HAL_RCC_OscConfig+0xf6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001288:	69d9      	ldr	r1, [r3, #28]
 800128a:	4311      	orrs	r1, r2
 800128c:	61d9      	str	r1, [r3, #28]
 800128e:	69db      	ldr	r3, [r3, #28]
 8001290:	401a      	ands	r2, r3
 8001292:	9201      	str	r2, [sp, #4]
 8001294:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001296:	2301      	movs	r3, #1
 8001298:	4698      	mov	r8, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800129a:	2780      	movs	r7, #128	; 0x80
 800129c:	4e8e      	ldr	r6, [pc, #568]	; (80014d8 <HAL_RCC_OscConfig+0x334>)
 800129e:	007f      	lsls	r7, r7, #1
 80012a0:	6833      	ldr	r3, [r6, #0]
 80012a2:	423b      	tst	r3, r7
 80012a4:	d100      	bne.n	80012a8 <HAL_RCC_OscConfig+0x104>
 80012a6:	e0cd      	b.n	8001444 <HAL_RCC_OscConfig+0x2a0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012a8:	68a3      	ldr	r3, [r4, #8]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d100      	bne.n	80012b0 <HAL_RCC_OscConfig+0x10c>
 80012ae:	e0d9      	b.n	8001464 <HAL_RCC_OscConfig+0x2c0>
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d100      	bne.n	80012b6 <HAL_RCC_OscConfig+0x112>
 80012b4:	e0dd      	b.n	8001472 <HAL_RCC_OscConfig+0x2ce>
 80012b6:	2b05      	cmp	r3, #5
 80012b8:	d100      	bne.n	80012bc <HAL_RCC_OscConfig+0x118>
 80012ba:	e198      	b.n	80015ee <HAL_RCC_OscConfig+0x44a>
 80012bc:	2101      	movs	r1, #1
 80012be:	4b83      	ldr	r3, [pc, #524]	; (80014cc <HAL_RCC_OscConfig+0x328>)
 80012c0:	6a1a      	ldr	r2, [r3, #32]
 80012c2:	438a      	bics	r2, r1
 80012c4:	621a      	str	r2, [r3, #32]
 80012c6:	6a1a      	ldr	r2, [r3, #32]
 80012c8:	3103      	adds	r1, #3
 80012ca:	438a      	bics	r2, r1
 80012cc:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ce:	f7ff f8bb 	bl	8000448 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012d2:	4f7e      	ldr	r7, [pc, #504]	; (80014cc <HAL_RCC_OscConfig+0x328>)
      tickstart = HAL_GetTick();
 80012d4:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012d6:	2602      	movs	r6, #2
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012d8:	4d80      	ldr	r5, [pc, #512]	; (80014dc <HAL_RCC_OscConfig+0x338>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012da:	e006      	b.n	80012ea <HAL_RCC_OscConfig+0x146>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012dc:	f7ff f8b4 	bl	8000448 <HAL_GetTick>
 80012e0:	464b      	mov	r3, r9
 80012e2:	1ac0      	subs	r0, r0, r3
 80012e4:	42a8      	cmp	r0, r5
 80012e6:	d900      	bls.n	80012ea <HAL_RCC_OscConfig+0x146>
 80012e8:	e0c1      	b.n	800146e <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012ea:	6a3b      	ldr	r3, [r7, #32]
 80012ec:	421e      	tst	r6, r3
 80012ee:	d0f5      	beq.n	80012dc <HAL_RCC_OscConfig+0x138>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80012f0:	4643      	mov	r3, r8
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d100      	bne.n	80012f8 <HAL_RCC_OscConfig+0x154>
 80012f6:	e113      	b.n	8001520 <HAL_RCC_OscConfig+0x37c>
 80012f8:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80012fa:	06db      	lsls	r3, r3, #27
 80012fc:	d512      	bpl.n	8001324 <HAL_RCC_OscConfig+0x180>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80012fe:	6963      	ldr	r3, [r4, #20]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d100      	bne.n	8001306 <HAL_RCC_OscConfig+0x162>
 8001304:	e155      	b.n	80015b2 <HAL_RCC_OscConfig+0x40e>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001306:	3305      	adds	r3, #5
 8001308:	d000      	beq.n	800130c <HAL_RCC_OscConfig+0x168>
 800130a:	e0f2      	b.n	80014f2 <HAL_RCC_OscConfig+0x34e>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800130c:	2104      	movs	r1, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800130e:	20f8      	movs	r0, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 8001310:	4a6e      	ldr	r2, [pc, #440]	; (80014cc <HAL_RCC_OscConfig+0x328>)
 8001312:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001314:	438b      	bics	r3, r1
 8001316:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001318:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800131a:	69a3      	ldr	r3, [r4, #24]
 800131c:	4381      	bics	r1, r0
 800131e:	00db      	lsls	r3, r3, #3
 8001320:	430b      	orrs	r3, r1
 8001322:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001324:	6a23      	ldr	r3, [r4, #32]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d01c      	beq.n	8001364 <HAL_RCC_OscConfig+0x1c0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800132a:	220c      	movs	r2, #12
 800132c:	4d67      	ldr	r5, [pc, #412]	; (80014cc <HAL_RCC_OscConfig+0x328>)
 800132e:	6869      	ldr	r1, [r5, #4]
 8001330:	400a      	ands	r2, r1
 8001332:	2a08      	cmp	r2, #8
 8001334:	d03e      	beq.n	80013b4 <HAL_RCC_OscConfig+0x210>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001336:	2b02      	cmp	r3, #2
 8001338:	d100      	bne.n	800133c <HAL_RCC_OscConfig+0x198>
 800133a:	e0f8      	b.n	800152e <HAL_RCC_OscConfig+0x38a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800133c:	682b      	ldr	r3, [r5, #0]
 800133e:	4a68      	ldr	r2, [pc, #416]	; (80014e0 <HAL_RCC_OscConfig+0x33c>)
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001340:	002c      	movs	r4, r5
        __HAL_RCC_PLL_DISABLE();
 8001342:	4013      	ands	r3, r2
 8001344:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001346:	f7ff f87f 	bl	8000448 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800134a:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 800134c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800134e:	04ad      	lsls	r5, r5, #18
 8001350:	e005      	b.n	800135e <HAL_RCC_OscConfig+0x1ba>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001352:	f7ff f879 	bl	8000448 <HAL_GetTick>
 8001356:	1b80      	subs	r0, r0, r6
 8001358:	2802      	cmp	r0, #2
 800135a:	d900      	bls.n	800135e <HAL_RCC_OscConfig+0x1ba>
 800135c:	e087      	b.n	800146e <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800135e:	6823      	ldr	r3, [r4, #0]
 8001360:	422b      	tst	r3, r5
 8001362:	d1f6      	bne.n	8001352 <HAL_RCC_OscConfig+0x1ae>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001364:	2000      	movs	r0, #0
}
 8001366:	b003      	add	sp, #12
 8001368:	bc0c      	pop	{r2, r3}
 800136a:	4690      	mov	r8, r2
 800136c:	4699      	mov	r9, r3
 800136e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001370:	69e3      	ldr	r3, [r4, #28]
      __HAL_RCC_LSI_ENABLE();
 8001372:	4d56      	ldr	r5, [pc, #344]	; (80014cc <HAL_RCC_OscConfig+0x328>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001374:	2b00      	cmp	r3, #0
 8001376:	d01f      	beq.n	80013b8 <HAL_RCC_OscConfig+0x214>
      __HAL_RCC_LSI_ENABLE();
 8001378:	2201      	movs	r2, #1
 800137a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800137c:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 800137e:	4313      	orrs	r3, r2
 8001380:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8001382:	f7ff f861 	bl	8000448 <HAL_GetTick>
 8001386:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001388:	e004      	b.n	8001394 <HAL_RCC_OscConfig+0x1f0>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800138a:	f7ff f85d 	bl	8000448 <HAL_GetTick>
 800138e:	1bc0      	subs	r0, r0, r7
 8001390:	2802      	cmp	r0, #2
 8001392:	d86c      	bhi.n	800146e <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001394:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001396:	421e      	tst	r6, r3
 8001398:	d0f7      	beq.n	800138a <HAL_RCC_OscConfig+0x1e6>
 800139a:	6823      	ldr	r3, [r4, #0]
 800139c:	e76a      	b.n	8001274 <HAL_RCC_OscConfig+0xd0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800139e:	684a      	ldr	r2, [r1, #4]
 80013a0:	03d2      	lsls	r2, r2, #15
 80013a2:	d500      	bpl.n	80013a6 <HAL_RCC_OscConfig+0x202>
 80013a4:	e744      	b.n	8001230 <HAL_RCC_OscConfig+0x8c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013a6:	4a49      	ldr	r2, [pc, #292]	; (80014cc <HAL_RCC_OscConfig+0x328>)
 80013a8:	6812      	ldr	r2, [r2, #0]
 80013aa:	0792      	lsls	r2, r2, #30
 80013ac:	d525      	bpl.n	80013fa <HAL_RCC_OscConfig+0x256>
 80013ae:	68e2      	ldr	r2, [r4, #12]
 80013b0:	2a01      	cmp	r2, #1
 80013b2:	d022      	beq.n	80013fa <HAL_RCC_OscConfig+0x256>
      return HAL_ERROR;
 80013b4:	2001      	movs	r0, #1
 80013b6:	e7d6      	b.n	8001366 <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_DISABLE();
 80013b8:	2201      	movs	r2, #1
 80013ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013bc:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 80013be:	4393      	bics	r3, r2
 80013c0:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80013c2:	f7ff f841 	bl	8000448 <HAL_GetTick>
 80013c6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013c8:	e004      	b.n	80013d4 <HAL_RCC_OscConfig+0x230>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013ca:	f7ff f83d 	bl	8000448 <HAL_GetTick>
 80013ce:	1bc0      	subs	r0, r0, r7
 80013d0:	2802      	cmp	r0, #2
 80013d2:	d84c      	bhi.n	800146e <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013d4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80013d6:	421e      	tst	r6, r3
 80013d8:	d1f7      	bne.n	80013ca <HAL_RCC_OscConfig+0x226>
 80013da:	6823      	ldr	r3, [r4, #0]
 80013dc:	e74a      	b.n	8001274 <HAL_RCC_OscConfig+0xd0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013de:	6842      	ldr	r2, [r0, #4]
 80013e0:	03d2      	lsls	r2, r2, #15
 80013e2:	d400      	bmi.n	80013e6 <HAL_RCC_OscConfig+0x242>
 80013e4:	e6f3      	b.n	80011ce <HAL_RCC_OscConfig+0x2a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e6:	4a39      	ldr	r2, [pc, #228]	; (80014cc <HAL_RCC_OscConfig+0x328>)
 80013e8:	6812      	ldr	r2, [r2, #0]
 80013ea:	0392      	lsls	r2, r2, #14
 80013ec:	d400      	bmi.n	80013f0 <HAL_RCC_OscConfig+0x24c>
 80013ee:	e712      	b.n	8001216 <HAL_RCC_OscConfig+0x72>
 80013f0:	6862      	ldr	r2, [r4, #4]
 80013f2:	2a00      	cmp	r2, #0
 80013f4:	d000      	beq.n	80013f8 <HAL_RCC_OscConfig+0x254>
 80013f6:	e70e      	b.n	8001216 <HAL_RCC_OscConfig+0x72>
 80013f8:	e7dc      	b.n	80013b4 <HAL_RCC_OscConfig+0x210>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013fa:	25f8      	movs	r5, #248	; 0xf8
 80013fc:	4833      	ldr	r0, [pc, #204]	; (80014cc <HAL_RCC_OscConfig+0x328>)
 80013fe:	6922      	ldr	r2, [r4, #16]
 8001400:	6801      	ldr	r1, [r0, #0]
 8001402:	00d2      	lsls	r2, r2, #3
 8001404:	43a9      	bics	r1, r5
 8001406:	430a      	orrs	r2, r1
 8001408:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800140a:	071a      	lsls	r2, r3, #28
 800140c:	d400      	bmi.n	8001410 <HAL_RCC_OscConfig+0x26c>
 800140e:	e731      	b.n	8001274 <HAL_RCC_OscConfig+0xd0>
 8001410:	e7ae      	b.n	8001370 <HAL_RCC_OscConfig+0x1cc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001412:	4d2e      	ldr	r5, [pc, #184]	; (80014cc <HAL_RCC_OscConfig+0x328>)
 8001414:	4a2e      	ldr	r2, [pc, #184]	; (80014d0 <HAL_RCC_OscConfig+0x32c>)
 8001416:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001418:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800141a:	4013      	ands	r3, r2
 800141c:	602b      	str	r3, [r5, #0]
 800141e:	682b      	ldr	r3, [r5, #0]
 8001420:	4a2c      	ldr	r2, [pc, #176]	; (80014d4 <HAL_RCC_OscConfig+0x330>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001422:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001424:	4013      	ands	r3, r2
 8001426:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001428:	f7ff f80e 	bl	8000448 <HAL_GetTick>
 800142c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800142e:	e004      	b.n	800143a <HAL_RCC_OscConfig+0x296>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001430:	f7ff f80a 	bl	8000448 <HAL_GetTick>
 8001434:	1bc0      	subs	r0, r0, r7
 8001436:	2864      	cmp	r0, #100	; 0x64
 8001438:	d819      	bhi.n	800146e <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800143a:	682b      	ldr	r3, [r5, #0]
 800143c:	4233      	tst	r3, r6
 800143e:	d1f7      	bne.n	8001430 <HAL_RCC_OscConfig+0x28c>
 8001440:	6823      	ldr	r3, [r4, #0]
 8001442:	e6e8      	b.n	8001216 <HAL_RCC_OscConfig+0x72>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001444:	6833      	ldr	r3, [r6, #0]
 8001446:	433b      	orrs	r3, r7
 8001448:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800144a:	f7fe fffd 	bl	8000448 <HAL_GetTick>
 800144e:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001450:	e004      	b.n	800145c <HAL_RCC_OscConfig+0x2b8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001452:	f7fe fff9 	bl	8000448 <HAL_GetTick>
 8001456:	1b40      	subs	r0, r0, r5
 8001458:	2864      	cmp	r0, #100	; 0x64
 800145a:	d808      	bhi.n	800146e <HAL_RCC_OscConfig+0x2ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800145c:	6833      	ldr	r3, [r6, #0]
 800145e:	423b      	tst	r3, r7
 8001460:	d0f7      	beq.n	8001452 <HAL_RCC_OscConfig+0x2ae>
 8001462:	e721      	b.n	80012a8 <HAL_RCC_OscConfig+0x104>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001464:	4919      	ldr	r1, [pc, #100]	; (80014cc <HAL_RCC_OscConfig+0x328>)
 8001466:	6a0a      	ldr	r2, [r1, #32]
 8001468:	4313      	orrs	r3, r2
 800146a:	620b      	str	r3, [r1, #32]
 800146c:	e72f      	b.n	80012ce <HAL_RCC_OscConfig+0x12a>
            return HAL_TIMEOUT;
 800146e:	2003      	movs	r0, #3
 8001470:	e779      	b.n	8001366 <HAL_RCC_OscConfig+0x1c2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001472:	2201      	movs	r2, #1
 8001474:	4e15      	ldr	r6, [pc, #84]	; (80014cc <HAL_RCC_OscConfig+0x328>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001476:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001478:	6a33      	ldr	r3, [r6, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800147a:	4d18      	ldr	r5, [pc, #96]	; (80014dc <HAL_RCC_OscConfig+0x338>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800147c:	4393      	bics	r3, r2
 800147e:	6233      	str	r3, [r6, #32]
 8001480:	6a33      	ldr	r3, [r6, #32]
 8001482:	3203      	adds	r2, #3
 8001484:	4393      	bics	r3, r2
 8001486:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8001488:	f7fe ffde 	bl	8000448 <HAL_GetTick>
 800148c:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800148e:	e005      	b.n	800149c <HAL_RCC_OscConfig+0x2f8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001490:	f7fe ffda 	bl	8000448 <HAL_GetTick>
 8001494:	464b      	mov	r3, r9
 8001496:	1ac0      	subs	r0, r0, r3
 8001498:	42a8      	cmp	r0, r5
 800149a:	d8e8      	bhi.n	800146e <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800149c:	6a33      	ldr	r3, [r6, #32]
 800149e:	421f      	tst	r7, r3
 80014a0:	d1f6      	bne.n	8001490 <HAL_RCC_OscConfig+0x2ec>
 80014a2:	e725      	b.n	80012f0 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_DISABLE();
 80014a4:	2201      	movs	r2, #1
 80014a6:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014a8:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 80014aa:	4393      	bics	r3, r2
 80014ac:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80014ae:	f7fe ffcb 	bl	8000448 <HAL_GetTick>
 80014b2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014b4:	e004      	b.n	80014c0 <HAL_RCC_OscConfig+0x31c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014b6:	f7fe ffc7 	bl	8000448 <HAL_GetTick>
 80014ba:	1bc0      	subs	r0, r0, r7
 80014bc:	2802      	cmp	r0, #2
 80014be:	d8d6      	bhi.n	800146e <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014c0:	682b      	ldr	r3, [r5, #0]
 80014c2:	421e      	tst	r6, r3
 80014c4:	d1f7      	bne.n	80014b6 <HAL_RCC_OscConfig+0x312>
 80014c6:	6823      	ldr	r3, [r4, #0]
 80014c8:	e6d1      	b.n	800126e <HAL_RCC_OscConfig+0xca>
 80014ca:	46c0      	nop			; (mov r8, r8)
 80014cc:	40021000 	.word	0x40021000
 80014d0:	fffeffff 	.word	0xfffeffff
 80014d4:	fffbffff 	.word	0xfffbffff
 80014d8:	40007000 	.word	0x40007000
 80014dc:	00001388 	.word	0x00001388
 80014e0:	feffffff 	.word	0xfeffffff
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014e4:	2380      	movs	r3, #128	; 0x80
 80014e6:	4a47      	ldr	r2, [pc, #284]	; (8001604 <HAL_RCC_OscConfig+0x460>)
 80014e8:	025b      	lsls	r3, r3, #9
 80014ea:	6811      	ldr	r1, [r2, #0]
 80014ec:	430b      	orrs	r3, r1
 80014ee:	6013      	str	r3, [r2, #0]
 80014f0:	e680      	b.n	80011f4 <HAL_RCC_OscConfig+0x50>
      __HAL_RCC_HSI14ADC_DISABLE();
 80014f2:	2204      	movs	r2, #4
 80014f4:	4d43      	ldr	r5, [pc, #268]	; (8001604 <HAL_RCC_OscConfig+0x460>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80014f6:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80014f8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80014fa:	4313      	orrs	r3, r2
 80014fc:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80014fe:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001500:	3a03      	subs	r2, #3
 8001502:	4393      	bics	r3, r2
 8001504:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001506:	f7fe ff9f 	bl	8000448 <HAL_GetTick>
 800150a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800150c:	e004      	b.n	8001518 <HAL_RCC_OscConfig+0x374>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800150e:	f7fe ff9b 	bl	8000448 <HAL_GetTick>
 8001512:	1bc0      	subs	r0, r0, r7
 8001514:	2802      	cmp	r0, #2
 8001516:	d8aa      	bhi.n	800146e <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001518:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800151a:	421e      	tst	r6, r3
 800151c:	d1f7      	bne.n	800150e <HAL_RCC_OscConfig+0x36a>
 800151e:	e701      	b.n	8001324 <HAL_RCC_OscConfig+0x180>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001520:	4a38      	ldr	r2, [pc, #224]	; (8001604 <HAL_RCC_OscConfig+0x460>)
 8001522:	4939      	ldr	r1, [pc, #228]	; (8001608 <HAL_RCC_OscConfig+0x464>)
 8001524:	69d3      	ldr	r3, [r2, #28]
 8001526:	400b      	ands	r3, r1
 8001528:	61d3      	str	r3, [r2, #28]
 800152a:	6823      	ldr	r3, [r4, #0]
 800152c:	e6e5      	b.n	80012fa <HAL_RCC_OscConfig+0x156>
        __HAL_RCC_PLL_DISABLE();
 800152e:	682b      	ldr	r3, [r5, #0]
 8001530:	4a36      	ldr	r2, [pc, #216]	; (800160c <HAL_RCC_OscConfig+0x468>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001532:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001534:	4013      	ands	r3, r2
 8001536:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001538:	f7fe ff86 	bl	8000448 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800153c:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 800153e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001540:	e004      	b.n	800154c <HAL_RCC_OscConfig+0x3a8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001542:	f7fe ff81 	bl	8000448 <HAL_GetTick>
 8001546:	1bc0      	subs	r0, r0, r7
 8001548:	2802      	cmp	r0, #2
 800154a:	d890      	bhi.n	800146e <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800154c:	682b      	ldr	r3, [r5, #0]
 800154e:	4233      	tst	r3, r6
 8001550:	d1f7      	bne.n	8001542 <HAL_RCC_OscConfig+0x39e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001552:	220f      	movs	r2, #15
 8001554:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001556:	4393      	bics	r3, r2
 8001558:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800155a:	4313      	orrs	r3, r2
 800155c:	62eb      	str	r3, [r5, #44]	; 0x2c
 800155e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001560:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001562:	686a      	ldr	r2, [r5, #4]
 8001564:	430b      	orrs	r3, r1
 8001566:	492a      	ldr	r1, [pc, #168]	; (8001610 <HAL_RCC_OscConfig+0x46c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001568:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800156a:	400a      	ands	r2, r1
 800156c:	4313      	orrs	r3, r2
 800156e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001570:	2380      	movs	r3, #128	; 0x80
 8001572:	682a      	ldr	r2, [r5, #0]
 8001574:	045b      	lsls	r3, r3, #17
 8001576:	4313      	orrs	r3, r2
 8001578:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800157a:	f7fe ff65 	bl	8000448 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800157e:	4d21      	ldr	r5, [pc, #132]	; (8001604 <HAL_RCC_OscConfig+0x460>)
        tickstart = HAL_GetTick();
 8001580:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001582:	04a4      	lsls	r4, r4, #18
 8001584:	e005      	b.n	8001592 <HAL_RCC_OscConfig+0x3ee>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001586:	f7fe ff5f 	bl	8000448 <HAL_GetTick>
 800158a:	1b80      	subs	r0, r0, r6
 800158c:	2802      	cmp	r0, #2
 800158e:	d900      	bls.n	8001592 <HAL_RCC_OscConfig+0x3ee>
 8001590:	e76d      	b.n	800146e <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001592:	682b      	ldr	r3, [r5, #0]
 8001594:	4223      	tst	r3, r4
 8001596:	d0f6      	beq.n	8001586 <HAL_RCC_OscConfig+0x3e2>
 8001598:	e6e4      	b.n	8001364 <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800159a:	2280      	movs	r2, #128	; 0x80
 800159c:	4b19      	ldr	r3, [pc, #100]	; (8001604 <HAL_RCC_OscConfig+0x460>)
 800159e:	02d2      	lsls	r2, r2, #11
 80015a0:	6819      	ldr	r1, [r3, #0]
 80015a2:	430a      	orrs	r2, r1
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	2280      	movs	r2, #128	; 0x80
 80015a8:	6819      	ldr	r1, [r3, #0]
 80015aa:	0252      	lsls	r2, r2, #9
 80015ac:	430a      	orrs	r2, r1
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	e620      	b.n	80011f4 <HAL_RCC_OscConfig+0x50>
      __HAL_RCC_HSI14ADC_DISABLE();
 80015b2:	2104      	movs	r1, #4
 80015b4:	4d13      	ldr	r5, [pc, #76]	; (8001604 <HAL_RCC_OscConfig+0x460>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80015b6:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80015b8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80015ba:	430a      	orrs	r2, r1
 80015bc:	636a      	str	r2, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80015be:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80015c0:	4313      	orrs	r3, r2
 80015c2:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80015c4:	f7fe ff40 	bl	8000448 <HAL_GetTick>
 80015c8:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80015ca:	e005      	b.n	80015d8 <HAL_RCC_OscConfig+0x434>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80015cc:	f7fe ff3c 	bl	8000448 <HAL_GetTick>
 80015d0:	1bc0      	subs	r0, r0, r7
 80015d2:	2802      	cmp	r0, #2
 80015d4:	d900      	bls.n	80015d8 <HAL_RCC_OscConfig+0x434>
 80015d6:	e74a      	b.n	800146e <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80015d8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80015da:	421e      	tst	r6, r3
 80015dc:	d0f6      	beq.n	80015cc <HAL_RCC_OscConfig+0x428>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80015de:	21f8      	movs	r1, #248	; 0xf8
 80015e0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80015e2:	69a3      	ldr	r3, [r4, #24]
 80015e4:	438a      	bics	r2, r1
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	4313      	orrs	r3, r2
 80015ea:	636b      	str	r3, [r5, #52]	; 0x34
 80015ec:	e69a      	b.n	8001324 <HAL_RCC_OscConfig+0x180>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015ee:	2104      	movs	r1, #4
 80015f0:	4b04      	ldr	r3, [pc, #16]	; (8001604 <HAL_RCC_OscConfig+0x460>)
 80015f2:	6a1a      	ldr	r2, [r3, #32]
 80015f4:	430a      	orrs	r2, r1
 80015f6:	621a      	str	r2, [r3, #32]
 80015f8:	6a1a      	ldr	r2, [r3, #32]
 80015fa:	3903      	subs	r1, #3
 80015fc:	430a      	orrs	r2, r1
 80015fe:	621a      	str	r2, [r3, #32]
 8001600:	e665      	b.n	80012ce <HAL_RCC_OscConfig+0x12a>
 8001602:	46c0      	nop			; (mov r8, r8)
 8001604:	40021000 	.word	0x40021000
 8001608:	efffffff 	.word	0xefffffff
 800160c:	feffffff 	.word	0xfeffffff
 8001610:	ffc2ffff 	.word	0xffc2ffff

08001614 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001616:	46ce      	mov	lr, r9
 8001618:	4647      	mov	r7, r8
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800161a:	2201      	movs	r2, #1
{
 800161c:	b580      	push	{r7, lr}
 800161e:	000c      	movs	r4, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001620:	495c      	ldr	r1, [pc, #368]	; (8001794 <HAL_RCC_ClockConfig+0x180>)
{
 8001622:	b089      	sub	sp, #36	; 0x24
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001624:	680b      	ldr	r3, [r1, #0]
{
 8001626:	0005      	movs	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001628:	4013      	ands	r3, r2
 800162a:	42a3      	cmp	r3, r4
 800162c:	d20d      	bcs.n	800164a <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800162e:	680b      	ldr	r3, [r1, #0]
 8001630:	4393      	bics	r3, r2
 8001632:	4323      	orrs	r3, r4
 8001634:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001636:	680b      	ldr	r3, [r1, #0]
 8001638:	401a      	ands	r2, r3
 800163a:	4294      	cmp	r4, r2
 800163c:	d005      	beq.n	800164a <HAL_RCC_ClockConfig+0x36>
    {
      return HAL_ERROR;
 800163e:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8001640:	b009      	add	sp, #36	; 0x24
 8001642:	bc0c      	pop	{r2, r3}
 8001644:	4690      	mov	r8, r2
 8001646:	4699      	mov	r9, r3
 8001648:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800164a:	682b      	ldr	r3, [r5, #0]
 800164c:	079a      	lsls	r2, r3, #30
 800164e:	d506      	bpl.n	800165e <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001650:	20f0      	movs	r0, #240	; 0xf0
 8001652:	4951      	ldr	r1, [pc, #324]	; (8001798 <HAL_RCC_ClockConfig+0x184>)
 8001654:	684a      	ldr	r2, [r1, #4]
 8001656:	4382      	bics	r2, r0
 8001658:	68a8      	ldr	r0, [r5, #8]
 800165a:	4302      	orrs	r2, r0
 800165c:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800165e:	07db      	lsls	r3, r3, #31
 8001660:	d524      	bpl.n	80016ac <HAL_RCC_ClockConfig+0x98>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001662:	4b4d      	ldr	r3, [pc, #308]	; (8001798 <HAL_RCC_ClockConfig+0x184>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001664:	686a      	ldr	r2, [r5, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001666:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001668:	2a01      	cmp	r2, #1
 800166a:	d06a      	beq.n	8001742 <HAL_RCC_ClockConfig+0x12e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800166c:	2a02      	cmp	r2, #2
 800166e:	d063      	beq.n	8001738 <HAL_RCC_ClockConfig+0x124>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001670:	079b      	lsls	r3, r3, #30
 8001672:	d5e4      	bpl.n	800163e <HAL_RCC_ClockConfig+0x2a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001674:	2103      	movs	r1, #3
 8001676:	4e48      	ldr	r6, [pc, #288]	; (8001798 <HAL_RCC_ClockConfig+0x184>)
 8001678:	6873      	ldr	r3, [r6, #4]
 800167a:	438b      	bics	r3, r1
 800167c:	4313      	orrs	r3, r2
 800167e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001680:	f7fe fee2 	bl	8000448 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001684:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001686:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001688:	2b01      	cmp	r3, #1
 800168a:	d05d      	beq.n	8001748 <HAL_RCC_ClockConfig+0x134>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800168c:	2b02      	cmp	r3, #2
 800168e:	d06b      	beq.n	8001768 <HAL_RCC_ClockConfig+0x154>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001690:	230c      	movs	r3, #12
 8001692:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001694:	4b41      	ldr	r3, [pc, #260]	; (800179c <HAL_RCC_ClockConfig+0x188>)
 8001696:	4699      	mov	r9, r3
 8001698:	e004      	b.n	80016a4 <HAL_RCC_ClockConfig+0x90>
 800169a:	f7fe fed5 	bl	8000448 <HAL_GetTick>
 800169e:	1bc0      	subs	r0, r0, r7
 80016a0:	4548      	cmp	r0, r9
 80016a2:	d84c      	bhi.n	800173e <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80016a4:	4642      	mov	r2, r8
 80016a6:	6873      	ldr	r3, [r6, #4]
 80016a8:	421a      	tst	r2, r3
 80016aa:	d1f6      	bne.n	800169a <HAL_RCC_ClockConfig+0x86>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80016ac:	2101      	movs	r1, #1
 80016ae:	4a39      	ldr	r2, [pc, #228]	; (8001794 <HAL_RCC_ClockConfig+0x180>)
 80016b0:	6813      	ldr	r3, [r2, #0]
 80016b2:	400b      	ands	r3, r1
 80016b4:	429c      	cmp	r4, r3
 80016b6:	d205      	bcs.n	80016c4 <HAL_RCC_ClockConfig+0xb0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016b8:	6813      	ldr	r3, [r2, #0]
 80016ba:	438b      	bics	r3, r1
 80016bc:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016be:	6813      	ldr	r3, [r2, #0]
 80016c0:	4219      	tst	r1, r3
 80016c2:	d1bc      	bne.n	800163e <HAL_RCC_ClockConfig+0x2a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c4:	682b      	ldr	r3, [r5, #0]
 80016c6:	075b      	lsls	r3, r3, #29
 80016c8:	d506      	bpl.n	80016d8 <HAL_RCC_ClockConfig+0xc4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80016ca:	4a33      	ldr	r2, [pc, #204]	; (8001798 <HAL_RCC_ClockConfig+0x184>)
 80016cc:	4934      	ldr	r1, [pc, #208]	; (80017a0 <HAL_RCC_ClockConfig+0x18c>)
 80016ce:	6853      	ldr	r3, [r2, #4]
 80016d0:	400b      	ands	r3, r1
 80016d2:	68e9      	ldr	r1, [r5, #12]
 80016d4:	430b      	orrs	r3, r1
 80016d6:	6053      	str	r3, [r2, #4]
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80016d8:	4b32      	ldr	r3, [pc, #200]	; (80017a4 <HAL_RCC_ClockConfig+0x190>)
 80016da:	466a      	mov	r2, sp
 80016dc:	0018      	movs	r0, r3
 80016de:	c870      	ldmia	r0!, {r4, r5, r6}
 80016e0:	c270      	stmia	r2!, {r4, r5, r6}
 80016e2:	6800      	ldr	r0, [r0, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80016e4:	3310      	adds	r3, #16
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80016e6:	6010      	str	r0, [r2, #0]
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80016e8:	aa04      	add	r2, sp, #16
 80016ea:	0010      	movs	r0, r2
 80016ec:	cb70      	ldmia	r3!, {r4, r5, r6}
 80016ee:	c070      	stmia	r0!, {r4, r5, r6}
 80016f0:	681b      	ldr	r3, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80016f2:	4d29      	ldr	r5, [pc, #164]	; (8001798 <HAL_RCC_ClockConfig+0x184>)
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80016f4:	6003      	str	r3, [r0, #0]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016f6:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 80016f8:	6868      	ldr	r0, [r5, #4]
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80016fa:	4669      	mov	r1, sp
  switch (tmpreg & RCC_CFGR_SWS)
 80016fc:	4003      	ands	r3, r0
 80016fe:	2b08      	cmp	r3, #8
 8001700:	d10b      	bne.n	800171a <HAL_RCC_ClockConfig+0x106>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001702:	3307      	adds	r3, #7
 8001704:	0c84      	lsrs	r4, r0, #18
 8001706:	401c      	ands	r4, r3
 8001708:	5d0c      	ldrb	r4, [r1, r4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800170a:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800170c:	400b      	ands	r3, r1
 800170e:	5cd1      	ldrb	r1, [r2, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001710:	03c3      	lsls	r3, r0, #15
 8001712:	d439      	bmi.n	8001788 <HAL_RCC_ClockConfig+0x174>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8001714:	4824      	ldr	r0, [pc, #144]	; (80017a8 <HAL_RCC_ClockConfig+0x194>)
 8001716:	4360      	muls	r0, r4
 8001718:	e000      	b.n	800171c <HAL_RCC_ClockConfig+0x108>
      sysclockfreq = HSE_VALUE;
 800171a:	4824      	ldr	r0, [pc, #144]	; (80017ac <HAL_RCC_ClockConfig+0x198>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800171c:	4b1e      	ldr	r3, [pc, #120]	; (8001798 <HAL_RCC_ClockConfig+0x184>)
 800171e:	4a24      	ldr	r2, [pc, #144]	; (80017b0 <HAL_RCC_ClockConfig+0x19c>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	061b      	lsls	r3, r3, #24
 8001724:	0f1b      	lsrs	r3, r3, #28
 8001726:	5cd3      	ldrb	r3, [r2, r3]
 8001728:	40d8      	lsrs	r0, r3
 800172a:	4b22      	ldr	r3, [pc, #136]	; (80017b4 <HAL_RCC_ClockConfig+0x1a0>)
 800172c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800172e:	2000      	movs	r0, #0
 8001730:	f7fe fe60 	bl	80003f4 <HAL_InitTick>
  return HAL_OK;
 8001734:	2000      	movs	r0, #0
 8001736:	e783      	b.n	8001640 <HAL_RCC_ClockConfig+0x2c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001738:	019b      	lsls	r3, r3, #6
 800173a:	d49b      	bmi.n	8001674 <HAL_RCC_ClockConfig+0x60>
 800173c:	e77f      	b.n	800163e <HAL_RCC_ClockConfig+0x2a>
          return HAL_TIMEOUT;
 800173e:	2003      	movs	r0, #3
 8001740:	e77e      	b.n	8001640 <HAL_RCC_ClockConfig+0x2c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001742:	039b      	lsls	r3, r3, #14
 8001744:	d496      	bmi.n	8001674 <HAL_RCC_ClockConfig+0x60>
 8001746:	e77a      	b.n	800163e <HAL_RCC_ClockConfig+0x2a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001748:	330b      	adds	r3, #11
 800174a:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800174c:	4b13      	ldr	r3, [pc, #76]	; (800179c <HAL_RCC_ClockConfig+0x188>)
 800174e:	4699      	mov	r9, r3
 8001750:	e004      	b.n	800175c <HAL_RCC_ClockConfig+0x148>
 8001752:	f7fe fe79 	bl	8000448 <HAL_GetTick>
 8001756:	1bc0      	subs	r0, r0, r7
 8001758:	4548      	cmp	r0, r9
 800175a:	d8f0      	bhi.n	800173e <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800175c:	4642      	mov	r2, r8
 800175e:	6873      	ldr	r3, [r6, #4]
 8001760:	4013      	ands	r3, r2
 8001762:	2b04      	cmp	r3, #4
 8001764:	d1f5      	bne.n	8001752 <HAL_RCC_ClockConfig+0x13e>
 8001766:	e7a1      	b.n	80016ac <HAL_RCC_ClockConfig+0x98>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001768:	330a      	adds	r3, #10
 800176a:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800176c:	4b0b      	ldr	r3, [pc, #44]	; (800179c <HAL_RCC_ClockConfig+0x188>)
 800176e:	4699      	mov	r9, r3
 8001770:	e004      	b.n	800177c <HAL_RCC_ClockConfig+0x168>
 8001772:	f7fe fe69 	bl	8000448 <HAL_GetTick>
 8001776:	1bc0      	subs	r0, r0, r7
 8001778:	4548      	cmp	r0, r9
 800177a:	d8e0      	bhi.n	800173e <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800177c:	4642      	mov	r2, r8
 800177e:	6873      	ldr	r3, [r6, #4]
 8001780:	4013      	ands	r3, r2
 8001782:	2b08      	cmp	r3, #8
 8001784:	d1f5      	bne.n	8001772 <HAL_RCC_ClockConfig+0x15e>
 8001786:	e791      	b.n	80016ac <HAL_RCC_ClockConfig+0x98>
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001788:	4808      	ldr	r0, [pc, #32]	; (80017ac <HAL_RCC_ClockConfig+0x198>)
 800178a:	f7fe fcbd 	bl	8000108 <__udivsi3>
 800178e:	4360      	muls	r0, r4
 8001790:	e7c4      	b.n	800171c <HAL_RCC_ClockConfig+0x108>
 8001792:	46c0      	nop			; (mov r8, r8)
 8001794:	40022000 	.word	0x40022000
 8001798:	40021000 	.word	0x40021000
 800179c:	00001388 	.word	0x00001388
 80017a0:	fffff8ff 	.word	0xfffff8ff
 80017a4:	080057f0 	.word	0x080057f0
 80017a8:	003d0900 	.word	0x003d0900
 80017ac:	007a1200 	.word	0x007a1200
 80017b0:	0800582c 	.word	0x0800582c
 80017b4:	20000058 	.word	0x20000058

080017b8 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80017b8:	4b01      	ldr	r3, [pc, #4]	; (80017c0 <HAL_RCC_GetHCLKFreq+0x8>)
 80017ba:	6818      	ldr	r0, [r3, #0]
}
 80017bc:	4770      	bx	lr
 80017be:	46c0      	nop			; (mov r8, r8)
 80017c0:	20000058 	.word	0x20000058

080017c4 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80017c4:	b510      	push	{r4, lr}
 80017c6:	1e04      	subs	r4, r0, #0
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80017c8:	d064      	beq.n	8001894 <HAL_TIM_Base_Init+0xd0>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80017ca:	233d      	movs	r3, #61	; 0x3d
 80017cc:	5cc3      	ldrb	r3, [r0, r3]
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d03d      	beq.n	8001850 <HAL_TIM_Base_Init+0x8c>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80017d4:	2202      	movs	r2, #2
 80017d6:	233d      	movs	r3, #61	; 0x3d
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017d8:	492f      	ldr	r1, [pc, #188]	; (8001898 <HAL_TIM_Base_Init+0xd4>)
  htim->State= HAL_TIM_STATE_BUSY;
 80017da:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017dc:	6823      	ldr	r3, [r4, #0]
  tmpcr1 = TIMx->CR1;
 80017de:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017e0:	428b      	cmp	r3, r1
 80017e2:	d021      	beq.n	8001828 <HAL_TIM_Base_Init+0x64>
 80017e4:	2180      	movs	r1, #128	; 0x80
 80017e6:	05c9      	lsls	r1, r1, #23
 80017e8:	428b      	cmp	r3, r1
 80017ea:	d036      	beq.n	800185a <HAL_TIM_Base_Init+0x96>
 80017ec:	492b      	ldr	r1, [pc, #172]	; (800189c <HAL_TIM_Base_Init+0xd8>)
 80017ee:	428b      	cmp	r3, r1
 80017f0:	d033      	beq.n	800185a <HAL_TIM_Base_Init+0x96>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80017f2:	492b      	ldr	r1, [pc, #172]	; (80018a0 <HAL_TIM_Base_Init+0xdc>)
 80017f4:	428b      	cmp	r3, r1
 80017f6:	d048      	beq.n	800188a <HAL_TIM_Base_Init+0xc6>
 80017f8:	492a      	ldr	r1, [pc, #168]	; (80018a4 <HAL_TIM_Base_Init+0xe0>)
 80017fa:	428b      	cmp	r3, r1
 80017fc:	d018      	beq.n	8001830 <HAL_TIM_Base_Init+0x6c>
 80017fe:	492a      	ldr	r1, [pc, #168]	; (80018a8 <HAL_TIM_Base_Init+0xe4>)
 8001800:	428b      	cmp	r3, r1
 8001802:	d015      	beq.n	8001830 <HAL_TIM_Base_Init+0x6c>
 8001804:	4929      	ldr	r1, [pc, #164]	; (80018ac <HAL_TIM_Base_Init+0xe8>)
 8001806:	428b      	cmp	r3, r1
 8001808:	d012      	beq.n	8001830 <HAL_TIM_Base_Init+0x6c>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800180a:	2180      	movs	r1, #128	; 0x80
 800180c:	438a      	bics	r2, r1
 800180e:	69a1      	ldr	r1, [r4, #24]
 8001810:	430a      	orrs	r2, r1

  TIMx->CR1 = tmpcr1;
 8001812:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001814:	68e2      	ldr	r2, [r4, #12]
 8001816:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001818:	6862      	ldr	r2, [r4, #4]
 800181a:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 800181c:	2201      	movs	r2, #1
 800181e:	615a      	str	r2, [r3, #20]
  htim->State= HAL_TIM_STATE_READY;
 8001820:	233d      	movs	r3, #61	; 0x3d
  return HAL_OK;
 8001822:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001824:	54e2      	strb	r2, [r4, r3]
}
 8001826:	bd10      	pop	{r4, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001828:	2170      	movs	r1, #112	; 0x70
 800182a:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 800182c:	68a1      	ldr	r1, [r4, #8]
 800182e:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8001830:	491f      	ldr	r1, [pc, #124]	; (80018b0 <HAL_TIM_Base_Init+0xec>)
 8001832:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001834:	6921      	ldr	r1, [r4, #16]
 8001836:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001838:	2180      	movs	r1, #128	; 0x80
 800183a:	438a      	bics	r2, r1
 800183c:	69a1      	ldr	r1, [r4, #24]
 800183e:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8001840:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001842:	68e2      	ldr	r2, [r4, #12]
 8001844:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001846:	6862      	ldr	r2, [r4, #4]
 8001848:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800184a:	6962      	ldr	r2, [r4, #20]
 800184c:	631a      	str	r2, [r3, #48]	; 0x30
 800184e:	e7e5      	b.n	800181c <HAL_TIM_Base_Init+0x58>
    htim->Lock = HAL_UNLOCKED;
 8001850:	223c      	movs	r2, #60	; 0x3c
 8001852:	5483      	strb	r3, [r0, r2]
    HAL_TIM_Base_MspInit(htim);
 8001854:	f003 fe7a 	bl	800554c <HAL_TIM_Base_MspInit>
 8001858:	e7bc      	b.n	80017d4 <HAL_TIM_Base_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800185a:	2170      	movs	r1, #112	; 0x70
 800185c:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 800185e:	68a1      	ldr	r1, [r4, #8]
 8001860:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8001862:	4913      	ldr	r1, [pc, #76]	; (80018b0 <HAL_TIM_Base_Init+0xec>)
 8001864:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001866:	6921      	ldr	r1, [r4, #16]
 8001868:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800186a:	2180      	movs	r1, #128	; 0x80
 800186c:	438a      	bics	r2, r1
 800186e:	69a1      	ldr	r1, [r4, #24]
 8001870:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8001872:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001874:	68e2      	ldr	r2, [r4, #12]
 8001876:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001878:	6862      	ldr	r2, [r4, #4]
 800187a:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800187c:	4a0a      	ldr	r2, [pc, #40]	; (80018a8 <HAL_TIM_Base_Init+0xe4>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d0e3      	beq.n	800184a <HAL_TIM_Base_Init+0x86>
 8001882:	4a0a      	ldr	r2, [pc, #40]	; (80018ac <HAL_TIM_Base_Init+0xe8>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d0e0      	beq.n	800184a <HAL_TIM_Base_Init+0x86>
 8001888:	e7c8      	b.n	800181c <HAL_TIM_Base_Init+0x58>
    tmpcr1 &= ~TIM_CR1_CKD;
 800188a:	4909      	ldr	r1, [pc, #36]	; (80018b0 <HAL_TIM_Base_Init+0xec>)
 800188c:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800188e:	6921      	ldr	r1, [r4, #16]
 8001890:	430a      	orrs	r2, r1
 8001892:	e7ba      	b.n	800180a <HAL_TIM_Base_Init+0x46>
    return HAL_ERROR;
 8001894:	2001      	movs	r0, #1
 8001896:	e7c6      	b.n	8001826 <HAL_TIM_Base_Init+0x62>
 8001898:	40012c00 	.word	0x40012c00
 800189c:	40000400 	.word	0x40000400
 80018a0:	40002000 	.word	0x40002000
 80018a4:	40014000 	.word	0x40014000
 80018a8:	40014400 	.word	0x40014400
 80018ac:	40014800 	.word	0x40014800
 80018b0:	fffffcff 	.word	0xfffffcff

080018b4 <HAL_TIM_Base_Start>:
  htim->State= HAL_TIM_STATE_BUSY;
 80018b4:	223d      	movs	r2, #61	; 0x3d
 80018b6:	2302      	movs	r3, #2
  __HAL_TIM_ENABLE(htim);
 80018b8:	2101      	movs	r1, #1
{
 80018ba:	b510      	push	{r4, lr}
  __HAL_TIM_ENABLE(htim);
 80018bc:	6804      	ldr	r4, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80018be:	5483      	strb	r3, [r0, r2]
  __HAL_TIM_ENABLE(htim);
 80018c0:	6823      	ldr	r3, [r4, #0]
 80018c2:	430b      	orrs	r3, r1
 80018c4:	6023      	str	r3, [r4, #0]
  htim->State= HAL_TIM_STATE_READY;
 80018c6:	5481      	strb	r1, [r0, r2]
}
 80018c8:	2000      	movs	r0, #0
 80018ca:	bd10      	pop	{r4, pc}

080018cc <HAL_TIM_OC_Start_IT>:
 80018cc:	2904      	cmp	r1, #4
 80018ce:	d023      	beq.n	8001918 <HAL_TIM_OC_Start_IT+0x4c>
 80018d0:	d92d      	bls.n	800192e <HAL_TIM_OC_Start_IT+0x62>
 80018d2:	2908      	cmp	r1, #8
 80018d4:	d020      	beq.n	8001918 <HAL_TIM_OC_Start_IT+0x4c>
 80018d6:	290c      	cmp	r1, #12
 80018d8:	d131      	bne.n	800193e <HAL_TIM_OC_Start_IT+0x72>
 80018da:	6803      	ldr	r3, [r0, #0]
 80018dc:	2010      	movs	r0, #16
 80018de:	68da      	ldr	r2, [r3, #12]
 80018e0:	4302      	orrs	r2, r0
 80018e2:	60da      	str	r2, [r3, #12]
 80018e4:	2201      	movs	r2, #1
 80018e6:	408a      	lsls	r2, r1
 80018e8:	6a19      	ldr	r1, [r3, #32]
 80018ea:	4391      	bics	r1, r2
 80018ec:	6219      	str	r1, [r3, #32]
 80018ee:	6a19      	ldr	r1, [r3, #32]
 80018f0:	430a      	orrs	r2, r1
 80018f2:	621a      	str	r2, [r3, #32]
 80018f4:	4a13      	ldr	r2, [pc, #76]	; (8001944 <HAL_TIM_OC_Start_IT+0x78>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d013      	beq.n	8001922 <HAL_TIM_OC_Start_IT+0x56>
 80018fa:	4a13      	ldr	r2, [pc, #76]	; (8001948 <HAL_TIM_OC_Start_IT+0x7c>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d010      	beq.n	8001922 <HAL_TIM_OC_Start_IT+0x56>
 8001900:	4a12      	ldr	r2, [pc, #72]	; (800194c <HAL_TIM_OC_Start_IT+0x80>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d00d      	beq.n	8001922 <HAL_TIM_OC_Start_IT+0x56>
 8001906:	4a12      	ldr	r2, [pc, #72]	; (8001950 <HAL_TIM_OC_Start_IT+0x84>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d00a      	beq.n	8001922 <HAL_TIM_OC_Start_IT+0x56>
 800190c:	2101      	movs	r1, #1
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	2000      	movs	r0, #0
 8001912:	430a      	orrs	r2, r1
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	4770      	bx	lr
 8001918:	6803      	ldr	r3, [r0, #0]
 800191a:	68da      	ldr	r2, [r3, #12]
 800191c:	430a      	orrs	r2, r1
 800191e:	60da      	str	r2, [r3, #12]
 8001920:	e7e0      	b.n	80018e4 <HAL_TIM_OC_Start_IT+0x18>
 8001922:	2280      	movs	r2, #128	; 0x80
 8001924:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001926:	0212      	lsls	r2, r2, #8
 8001928:	430a      	orrs	r2, r1
 800192a:	645a      	str	r2, [r3, #68]	; 0x44
 800192c:	e7ee      	b.n	800190c <HAL_TIM_OC_Start_IT+0x40>
 800192e:	2900      	cmp	r1, #0
 8001930:	d105      	bne.n	800193e <HAL_TIM_OC_Start_IT+0x72>
 8001932:	6803      	ldr	r3, [r0, #0]
 8001934:	2002      	movs	r0, #2
 8001936:	68da      	ldr	r2, [r3, #12]
 8001938:	4302      	orrs	r2, r0
 800193a:	60da      	str	r2, [r3, #12]
 800193c:	e7d2      	b.n	80018e4 <HAL_TIM_OC_Start_IT+0x18>
 800193e:	6803      	ldr	r3, [r0, #0]
 8001940:	e7d0      	b.n	80018e4 <HAL_TIM_OC_Start_IT+0x18>
 8001942:	46c0      	nop			; (mov r8, r8)
 8001944:	40012c00 	.word	0x40012c00
 8001948:	40014000 	.word	0x40014000
 800194c:	40014400 	.word	0x40014400
 8001950:	40014800 	.word	0x40014800

08001954 <HAL_TIM_PWM_MspInit>:
 8001954:	4770      	bx	lr
 8001956:	46c0      	nop			; (mov r8, r8)

08001958 <HAL_TIM_PWM_Init>:
{
 8001958:	b510      	push	{r4, lr}
 800195a:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 800195c:	d064      	beq.n	8001a28 <HAL_TIM_PWM_Init+0xd0>
  if(htim->State == HAL_TIM_STATE_RESET)
 800195e:	233d      	movs	r3, #61	; 0x3d
 8001960:	5cc3      	ldrb	r3, [r0, r3]
 8001962:	b2db      	uxtb	r3, r3
 8001964:	2b00      	cmp	r3, #0
 8001966:	d03d      	beq.n	80019e4 <HAL_TIM_PWM_Init+0x8c>
  htim->State= HAL_TIM_STATE_BUSY;
 8001968:	2202      	movs	r2, #2
 800196a:	233d      	movs	r3, #61	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800196c:	492f      	ldr	r1, [pc, #188]	; (8001a2c <HAL_TIM_PWM_Init+0xd4>)
  htim->State= HAL_TIM_STATE_BUSY;
 800196e:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001970:	6823      	ldr	r3, [r4, #0]
  tmpcr1 = TIMx->CR1;
 8001972:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001974:	428b      	cmp	r3, r1
 8001976:	d021      	beq.n	80019bc <HAL_TIM_PWM_Init+0x64>
 8001978:	2180      	movs	r1, #128	; 0x80
 800197a:	05c9      	lsls	r1, r1, #23
 800197c:	428b      	cmp	r3, r1
 800197e:	d036      	beq.n	80019ee <HAL_TIM_PWM_Init+0x96>
 8001980:	492b      	ldr	r1, [pc, #172]	; (8001a30 <HAL_TIM_PWM_Init+0xd8>)
 8001982:	428b      	cmp	r3, r1
 8001984:	d033      	beq.n	80019ee <HAL_TIM_PWM_Init+0x96>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001986:	492b      	ldr	r1, [pc, #172]	; (8001a34 <HAL_TIM_PWM_Init+0xdc>)
 8001988:	428b      	cmp	r3, r1
 800198a:	d048      	beq.n	8001a1e <HAL_TIM_PWM_Init+0xc6>
 800198c:	492a      	ldr	r1, [pc, #168]	; (8001a38 <HAL_TIM_PWM_Init+0xe0>)
 800198e:	428b      	cmp	r3, r1
 8001990:	d018      	beq.n	80019c4 <HAL_TIM_PWM_Init+0x6c>
 8001992:	492a      	ldr	r1, [pc, #168]	; (8001a3c <HAL_TIM_PWM_Init+0xe4>)
 8001994:	428b      	cmp	r3, r1
 8001996:	d015      	beq.n	80019c4 <HAL_TIM_PWM_Init+0x6c>
 8001998:	4929      	ldr	r1, [pc, #164]	; (8001a40 <HAL_TIM_PWM_Init+0xe8>)
 800199a:	428b      	cmp	r3, r1
 800199c:	d012      	beq.n	80019c4 <HAL_TIM_PWM_Init+0x6c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800199e:	2180      	movs	r1, #128	; 0x80
 80019a0:	438a      	bics	r2, r1
 80019a2:	69a1      	ldr	r1, [r4, #24]
 80019a4:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 80019a6:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019a8:	68e2      	ldr	r2, [r4, #12]
 80019aa:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80019ac:	6862      	ldr	r2, [r4, #4]
 80019ae:	629a      	str	r2, [r3, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80019b0:	2201      	movs	r2, #1
 80019b2:	615a      	str	r2, [r3, #20]
  htim->State= HAL_TIM_STATE_READY;
 80019b4:	233d      	movs	r3, #61	; 0x3d
  return HAL_OK;
 80019b6:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80019b8:	54e2      	strb	r2, [r4, r3]
}
 80019ba:	bd10      	pop	{r4, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019bc:	2170      	movs	r1, #112	; 0x70
 80019be:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 80019c0:	68a1      	ldr	r1, [r4, #8]
 80019c2:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80019c4:	491f      	ldr	r1, [pc, #124]	; (8001a44 <HAL_TIM_PWM_Init+0xec>)
 80019c6:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019c8:	6921      	ldr	r1, [r4, #16]
 80019ca:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019cc:	2180      	movs	r1, #128	; 0x80
 80019ce:	438a      	bics	r2, r1
 80019d0:	69a1      	ldr	r1, [r4, #24]
 80019d2:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 80019d4:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019d6:	68e2      	ldr	r2, [r4, #12]
 80019d8:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80019da:	6862      	ldr	r2, [r4, #4]
 80019dc:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80019de:	6962      	ldr	r2, [r4, #20]
 80019e0:	631a      	str	r2, [r3, #48]	; 0x30
 80019e2:	e7e5      	b.n	80019b0 <HAL_TIM_PWM_Init+0x58>
    htim->Lock = HAL_UNLOCKED;
 80019e4:	223c      	movs	r2, #60	; 0x3c
 80019e6:	5483      	strb	r3, [r0, r2]
    HAL_TIM_PWM_MspInit(htim);
 80019e8:	f7ff ffb4 	bl	8001954 <HAL_TIM_PWM_MspInit>
 80019ec:	e7bc      	b.n	8001968 <HAL_TIM_PWM_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019ee:	2170      	movs	r1, #112	; 0x70
 80019f0:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 80019f2:	68a1      	ldr	r1, [r4, #8]
 80019f4:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80019f6:	4913      	ldr	r1, [pc, #76]	; (8001a44 <HAL_TIM_PWM_Init+0xec>)
 80019f8:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019fa:	6921      	ldr	r1, [r4, #16]
 80019fc:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019fe:	2180      	movs	r1, #128	; 0x80
 8001a00:	438a      	bics	r2, r1
 8001a02:	69a1      	ldr	r1, [r4, #24]
 8001a04:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8001a06:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a08:	68e2      	ldr	r2, [r4, #12]
 8001a0a:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001a0c:	6862      	ldr	r2, [r4, #4]
 8001a0e:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a10:	4a0a      	ldr	r2, [pc, #40]	; (8001a3c <HAL_TIM_PWM_Init+0xe4>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d0e3      	beq.n	80019de <HAL_TIM_PWM_Init+0x86>
 8001a16:	4a0a      	ldr	r2, [pc, #40]	; (8001a40 <HAL_TIM_PWM_Init+0xe8>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d0e0      	beq.n	80019de <HAL_TIM_PWM_Init+0x86>
 8001a1c:	e7c8      	b.n	80019b0 <HAL_TIM_PWM_Init+0x58>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a1e:	4909      	ldr	r1, [pc, #36]	; (8001a44 <HAL_TIM_PWM_Init+0xec>)
 8001a20:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a22:	6921      	ldr	r1, [r4, #16]
 8001a24:	430a      	orrs	r2, r1
 8001a26:	e7ba      	b.n	800199e <HAL_TIM_PWM_Init+0x46>
    return HAL_ERROR;
 8001a28:	2001      	movs	r0, #1
 8001a2a:	e7c6      	b.n	80019ba <HAL_TIM_PWM_Init+0x62>
 8001a2c:	40012c00 	.word	0x40012c00
 8001a30:	40000400 	.word	0x40000400
 8001a34:	40002000 	.word	0x40002000
 8001a38:	40014000 	.word	0x40014000
 8001a3c:	40014400 	.word	0x40014400
 8001a40:	40014800 	.word	0x40014800
 8001a44:	fffffcff 	.word	0xfffffcff

08001a48 <HAL_TIM_PWM_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8001a48:	2201      	movs	r2, #1
 8001a4a:	408a      	lsls	r2, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001a4c:	6803      	ldr	r3, [r0, #0]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001a4e:	6a19      	ldr	r1, [r3, #32]
 8001a50:	4391      	bics	r1, r2
 8001a52:	6219      	str	r1, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001a54:	6a19      	ldr	r1, [r3, #32]
 8001a56:	430a      	orrs	r2, r1
 8001a58:	621a      	str	r2, [r3, #32]
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001a5a:	4a0c      	ldr	r2, [pc, #48]	; (8001a8c <HAL_TIM_PWM_Start+0x44>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d00e      	beq.n	8001a7e <HAL_TIM_PWM_Start+0x36>
 8001a60:	4a0b      	ldr	r2, [pc, #44]	; (8001a90 <HAL_TIM_PWM_Start+0x48>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d00b      	beq.n	8001a7e <HAL_TIM_PWM_Start+0x36>
 8001a66:	4a0b      	ldr	r2, [pc, #44]	; (8001a94 <HAL_TIM_PWM_Start+0x4c>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d008      	beq.n	8001a7e <HAL_TIM_PWM_Start+0x36>
 8001a6c:	4a0a      	ldr	r2, [pc, #40]	; (8001a98 <HAL_TIM_PWM_Start+0x50>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d005      	beq.n	8001a7e <HAL_TIM_PWM_Start+0x36>
  __HAL_TIM_ENABLE(htim);
 8001a72:	2101      	movs	r1, #1
 8001a74:	681a      	ldr	r2, [r3, #0]
}
 8001a76:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	601a      	str	r2, [r3, #0]
}
 8001a7c:	4770      	bx	lr
    __HAL_TIM_MOE_ENABLE(htim);
 8001a7e:	2280      	movs	r2, #128	; 0x80
 8001a80:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001a82:	0212      	lsls	r2, r2, #8
 8001a84:	430a      	orrs	r2, r1
 8001a86:	645a      	str	r2, [r3, #68]	; 0x44
 8001a88:	e7f3      	b.n	8001a72 <HAL_TIM_PWM_Start+0x2a>
 8001a8a:	46c0      	nop			; (mov r8, r8)
 8001a8c:	40012c00 	.word	0x40012c00
 8001a90:	40014000 	.word	0x40014000
 8001a94:	40014400 	.word	0x40014400
 8001a98:	40014800 	.word	0x40014800

08001a9c <HAL_TIM_IC_MspInit>:
 8001a9c:	4770      	bx	lr
 8001a9e:	46c0      	nop			; (mov r8, r8)

08001aa0 <HAL_TIM_IC_Init>:
{
 8001aa0:	b510      	push	{r4, lr}
 8001aa2:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8001aa4:	d064      	beq.n	8001b70 <HAL_TIM_IC_Init+0xd0>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001aa6:	233d      	movs	r3, #61	; 0x3d
 8001aa8:	5cc3      	ldrb	r3, [r0, r3]
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d03d      	beq.n	8001b2c <HAL_TIM_IC_Init+0x8c>
  htim->State= HAL_TIM_STATE_BUSY;
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	233d      	movs	r3, #61	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ab4:	492f      	ldr	r1, [pc, #188]	; (8001b74 <HAL_TIM_IC_Init+0xd4>)
  htim->State= HAL_TIM_STATE_BUSY;
 8001ab6:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ab8:	6823      	ldr	r3, [r4, #0]
  tmpcr1 = TIMx->CR1;
 8001aba:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001abc:	428b      	cmp	r3, r1
 8001abe:	d021      	beq.n	8001b04 <HAL_TIM_IC_Init+0x64>
 8001ac0:	2180      	movs	r1, #128	; 0x80
 8001ac2:	05c9      	lsls	r1, r1, #23
 8001ac4:	428b      	cmp	r3, r1
 8001ac6:	d036      	beq.n	8001b36 <HAL_TIM_IC_Init+0x96>
 8001ac8:	492b      	ldr	r1, [pc, #172]	; (8001b78 <HAL_TIM_IC_Init+0xd8>)
 8001aca:	428b      	cmp	r3, r1
 8001acc:	d033      	beq.n	8001b36 <HAL_TIM_IC_Init+0x96>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ace:	492b      	ldr	r1, [pc, #172]	; (8001b7c <HAL_TIM_IC_Init+0xdc>)
 8001ad0:	428b      	cmp	r3, r1
 8001ad2:	d048      	beq.n	8001b66 <HAL_TIM_IC_Init+0xc6>
 8001ad4:	492a      	ldr	r1, [pc, #168]	; (8001b80 <HAL_TIM_IC_Init+0xe0>)
 8001ad6:	428b      	cmp	r3, r1
 8001ad8:	d018      	beq.n	8001b0c <HAL_TIM_IC_Init+0x6c>
 8001ada:	492a      	ldr	r1, [pc, #168]	; (8001b84 <HAL_TIM_IC_Init+0xe4>)
 8001adc:	428b      	cmp	r3, r1
 8001ade:	d015      	beq.n	8001b0c <HAL_TIM_IC_Init+0x6c>
 8001ae0:	4929      	ldr	r1, [pc, #164]	; (8001b88 <HAL_TIM_IC_Init+0xe8>)
 8001ae2:	428b      	cmp	r3, r1
 8001ae4:	d012      	beq.n	8001b0c <HAL_TIM_IC_Init+0x6c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ae6:	2180      	movs	r1, #128	; 0x80
 8001ae8:	438a      	bics	r2, r1
 8001aea:	69a1      	ldr	r1, [r4, #24]
 8001aec:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8001aee:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001af0:	68e2      	ldr	r2, [r4, #12]
 8001af2:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001af4:	6862      	ldr	r2, [r4, #4]
 8001af6:	629a      	str	r2, [r3, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8001af8:	2201      	movs	r2, #1
 8001afa:	615a      	str	r2, [r3, #20]
  htim->State= HAL_TIM_STATE_READY;
 8001afc:	233d      	movs	r3, #61	; 0x3d
  return HAL_OK;
 8001afe:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001b00:	54e2      	strb	r2, [r4, r3]
}
 8001b02:	bd10      	pop	{r4, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b04:	2170      	movs	r1, #112	; 0x70
 8001b06:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 8001b08:	68a1      	ldr	r1, [r4, #8]
 8001b0a:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b0c:	491f      	ldr	r1, [pc, #124]	; (8001b8c <HAL_TIM_IC_Init+0xec>)
 8001b0e:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b10:	6921      	ldr	r1, [r4, #16]
 8001b12:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b14:	2180      	movs	r1, #128	; 0x80
 8001b16:	438a      	bics	r2, r1
 8001b18:	69a1      	ldr	r1, [r4, #24]
 8001b1a:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8001b1c:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b1e:	68e2      	ldr	r2, [r4, #12]
 8001b20:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001b22:	6862      	ldr	r2, [r4, #4]
 8001b24:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8001b26:	6962      	ldr	r2, [r4, #20]
 8001b28:	631a      	str	r2, [r3, #48]	; 0x30
 8001b2a:	e7e5      	b.n	8001af8 <HAL_TIM_IC_Init+0x58>
    htim->Lock = HAL_UNLOCKED;
 8001b2c:	223c      	movs	r2, #60	; 0x3c
 8001b2e:	5483      	strb	r3, [r0, r2]
    HAL_TIM_IC_MspInit(htim);
 8001b30:	f7ff ffb4 	bl	8001a9c <HAL_TIM_IC_MspInit>
 8001b34:	e7bc      	b.n	8001ab0 <HAL_TIM_IC_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b36:	2170      	movs	r1, #112	; 0x70
 8001b38:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 8001b3a:	68a1      	ldr	r1, [r4, #8]
 8001b3c:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b3e:	4913      	ldr	r1, [pc, #76]	; (8001b8c <HAL_TIM_IC_Init+0xec>)
 8001b40:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b42:	6921      	ldr	r1, [r4, #16]
 8001b44:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b46:	2180      	movs	r1, #128	; 0x80
 8001b48:	438a      	bics	r2, r1
 8001b4a:	69a1      	ldr	r1, [r4, #24]
 8001b4c:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8001b4e:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b50:	68e2      	ldr	r2, [r4, #12]
 8001b52:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001b54:	6862      	ldr	r2, [r4, #4]
 8001b56:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b58:	4a0a      	ldr	r2, [pc, #40]	; (8001b84 <HAL_TIM_IC_Init+0xe4>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d0e3      	beq.n	8001b26 <HAL_TIM_IC_Init+0x86>
 8001b5e:	4a0a      	ldr	r2, [pc, #40]	; (8001b88 <HAL_TIM_IC_Init+0xe8>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d0e0      	beq.n	8001b26 <HAL_TIM_IC_Init+0x86>
 8001b64:	e7c8      	b.n	8001af8 <HAL_TIM_IC_Init+0x58>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b66:	4909      	ldr	r1, [pc, #36]	; (8001b8c <HAL_TIM_IC_Init+0xec>)
 8001b68:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b6a:	6921      	ldr	r1, [r4, #16]
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	e7ba      	b.n	8001ae6 <HAL_TIM_IC_Init+0x46>
    return HAL_ERROR;
 8001b70:	2001      	movs	r0, #1
 8001b72:	e7c6      	b.n	8001b02 <HAL_TIM_IC_Init+0x62>
 8001b74:	40012c00 	.word	0x40012c00
 8001b78:	40000400 	.word	0x40000400
 8001b7c:	40002000 	.word	0x40002000
 8001b80:	40014000 	.word	0x40014000
 8001b84:	40014400 	.word	0x40014400
 8001b88:	40014800 	.word	0x40014800
 8001b8c:	fffffcff 	.word	0xfffffcff

08001b90 <HAL_TIM_IC_Start_DMA>:
{
 8001b90:	b570      	push	{r4, r5, r6, lr}
 8001b92:	000d      	movs	r5, r1
  if((htim->State == HAL_TIM_STATE_BUSY))
 8001b94:	213d      	movs	r1, #61	; 0x3d
 8001b96:	5c46      	ldrb	r6, [r0, r1]
{
 8001b98:	0004      	movs	r4, r0
     return HAL_BUSY;
 8001b9a:	2002      	movs	r0, #2
  if((htim->State == HAL_TIM_STATE_BUSY))
 8001b9c:	2e02      	cmp	r6, #2
 8001b9e:	d026      	beq.n	8001bee <HAL_TIM_IC_Start_DMA+0x5e>
  else if((htim->State == HAL_TIM_STATE_READY))
 8001ba0:	5c61      	ldrb	r1, [r4, r1]
 8001ba2:	2901      	cmp	r1, #1
 8001ba4:	d024      	beq.n	8001bf0 <HAL_TIM_IC_Start_DMA+0x60>
  switch (Channel)
 8001ba6:	2d04      	cmp	r5, #4
 8001ba8:	d03a      	beq.n	8001c20 <HAL_TIM_IC_Start_DMA+0x90>
 8001baa:	2d04      	cmp	r5, #4
 8001bac:	d948      	bls.n	8001c40 <HAL_TIM_IC_Start_DMA+0xb0>
 8001bae:	2d08      	cmp	r5, #8
 8001bb0:	d026      	beq.n	8001c00 <HAL_TIM_IC_Start_DMA+0x70>
 8001bb2:	2d0c      	cmp	r5, #12
 8001bb4:	d156      	bne.n	8001c64 <HAL_TIM_IC_Start_DMA+0xd4>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8001bb6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001bb8:	492d      	ldr	r1, [pc, #180]	; (8001c70 <HAL_TIM_IC_Start_DMA+0xe0>)
 8001bba:	6281      	str	r1, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8001bbc:	492d      	ldr	r1, [pc, #180]	; (8001c74 <HAL_TIM_IC_Start_DMA+0xe4>)
 8001bbe:	6301      	str	r1, [r0, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length);
 8001bc0:	6821      	ldr	r1, [r4, #0]
 8001bc2:	3140      	adds	r1, #64	; 0x40
 8001bc4:	f7fe ffa2 	bl	8000b0c <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8001bc8:	2280      	movs	r2, #128	; 0x80
 8001bca:	6823      	ldr	r3, [r4, #0]
 8001bcc:	0152      	lsls	r2, r2, #5
 8001bce:	68d9      	ldr	r1, [r3, #12]
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	60da      	str	r2, [r3, #12]
  tmp = TIM_CCER_CC1E << Channel;
 8001bd4:	2001      	movs	r0, #1
 8001bd6:	0002      	movs	r2, r0
 8001bd8:	40aa      	lsls	r2, r5
  TIMx->CCER &= ~tmp;
 8001bda:	6a19      	ldr	r1, [r3, #32]
 8001bdc:	4391      	bics	r1, r2
 8001bde:	6219      	str	r1, [r3, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001be0:	6a19      	ldr	r1, [r3, #32]
 8001be2:	430a      	orrs	r2, r1
 8001be4:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	4302      	orrs	r2, r0
  return HAL_OK;
 8001bea:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8001bec:	601a      	str	r2, [r3, #0]
}
 8001bee:	bd70      	pop	{r4, r5, r6, pc}
    if((pData == 0U ) && (Length > 0U))
 8001bf0:	2a00      	cmp	r2, #0
 8001bf2:	d039      	beq.n	8001c68 <HAL_TIM_IC_Start_DMA+0xd8>
      htim->State = HAL_TIM_STATE_BUSY;
 8001bf4:	2002      	movs	r0, #2
 8001bf6:	213d      	movs	r1, #61	; 0x3d
 8001bf8:	5460      	strb	r0, [r4, r1]
  switch (Channel)
 8001bfa:	2d04      	cmp	r5, #4
 8001bfc:	d1d5      	bne.n	8001baa <HAL_TIM_IC_Start_DMA+0x1a>
 8001bfe:	e00f      	b.n	8001c20 <HAL_TIM_IC_Start_DMA+0x90>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8001c00:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001c02:	491b      	ldr	r1, [pc, #108]	; (8001c70 <HAL_TIM_IC_Start_DMA+0xe0>)
 8001c04:	6281      	str	r1, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8001c06:	491b      	ldr	r1, [pc, #108]	; (8001c74 <HAL_TIM_IC_Start_DMA+0xe4>)
 8001c08:	6301      	str	r1, [r0, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length);
 8001c0a:	6821      	ldr	r1, [r4, #0]
 8001c0c:	313c      	adds	r1, #60	; 0x3c
 8001c0e:	f7fe ff7d 	bl	8000b0c <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8001c12:	2280      	movs	r2, #128	; 0x80
 8001c14:	6823      	ldr	r3, [r4, #0]
 8001c16:	0112      	lsls	r2, r2, #4
 8001c18:	68d9      	ldr	r1, [r3, #12]
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	60da      	str	r2, [r3, #12]
    break;
 8001c1e:	e7d9      	b.n	8001bd4 <HAL_TIM_IC_Start_DMA+0x44>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8001c20:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001c22:	4913      	ldr	r1, [pc, #76]	; (8001c70 <HAL_TIM_IC_Start_DMA+0xe0>)
 8001c24:	6281      	str	r1, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8001c26:	4913      	ldr	r1, [pc, #76]	; (8001c74 <HAL_TIM_IC_Start_DMA+0xe4>)
 8001c28:	6301      	str	r1, [r0, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length);
 8001c2a:	6821      	ldr	r1, [r4, #0]
 8001c2c:	3138      	adds	r1, #56	; 0x38
 8001c2e:	f7fe ff6d 	bl	8000b0c <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8001c32:	2280      	movs	r2, #128	; 0x80
 8001c34:	6823      	ldr	r3, [r4, #0]
 8001c36:	00d2      	lsls	r2, r2, #3
 8001c38:	68d9      	ldr	r1, [r3, #12]
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	60da      	str	r2, [r3, #12]
    break;
 8001c3e:	e7c9      	b.n	8001bd4 <HAL_TIM_IC_Start_DMA+0x44>
  switch (Channel)
 8001c40:	2d00      	cmp	r5, #0
 8001c42:	d10f      	bne.n	8001c64 <HAL_TIM_IC_Start_DMA+0xd4>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8001c44:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001c46:	490a      	ldr	r1, [pc, #40]	; (8001c70 <HAL_TIM_IC_Start_DMA+0xe0>)
 8001c48:	6281      	str	r1, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8001c4a:	490a      	ldr	r1, [pc, #40]	; (8001c74 <HAL_TIM_IC_Start_DMA+0xe4>)
 8001c4c:	6301      	str	r1, [r0, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length);
 8001c4e:	6821      	ldr	r1, [r4, #0]
 8001c50:	3134      	adds	r1, #52	; 0x34
 8001c52:	f7fe ff5b 	bl	8000b0c <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8001c56:	2280      	movs	r2, #128	; 0x80
 8001c58:	6823      	ldr	r3, [r4, #0]
 8001c5a:	0092      	lsls	r2, r2, #2
 8001c5c:	68d9      	ldr	r1, [r3, #12]
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	60da      	str	r2, [r3, #12]
    break;
 8001c62:	e7b7      	b.n	8001bd4 <HAL_TIM_IC_Start_DMA+0x44>
 8001c64:	6823      	ldr	r3, [r4, #0]
 8001c66:	e7b5      	b.n	8001bd4 <HAL_TIM_IC_Start_DMA+0x44>
      return HAL_ERROR;
 8001c68:	3801      	subs	r0, #1
    if((pData == 0U ) && (Length > 0U))
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d0c2      	beq.n	8001bf4 <HAL_TIM_IC_Start_DMA+0x64>
 8001c6e:	e7be      	b.n	8001bee <HAL_TIM_IC_Start_DMA+0x5e>
 8001c70:	0800222d 	.word	0x0800222d
 8001c74:	08002271 	.word	0x08002271

08001c78 <HAL_TIM_IC_ConfigChannel>:
{
 8001c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c7a:	46ce      	mov	lr, r9
 8001c7c:	4647      	mov	r7, r8
  __HAL_LOCK(htim);
 8001c7e:	243c      	movs	r4, #60	; 0x3c
{
 8001c80:	b580      	push	{r7, lr}
  __HAL_LOCK(htim);
 8001c82:	5d05      	ldrb	r5, [r0, r4]
{
 8001c84:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8001c86:	2002      	movs	r0, #2
 8001c88:	2d01      	cmp	r5, #1
 8001c8a:	d038      	beq.n	8001cfe <HAL_TIM_IC_ConfigChannel+0x86>
 8001c8c:	2501      	movs	r5, #1
 8001c8e:	551d      	strb	r5, [r3, r4]
  htim->State = HAL_TIM_STATE_BUSY;
 8001c90:	3401      	adds	r4, #1
 8001c92:	5518      	strb	r0, [r3, r4]
  if (Channel == TIM_CHANNEL_1)
 8001c94:	2a00      	cmp	r2, #0
 8001c96:	d036      	beq.n	8001d06 <HAL_TIM_IC_ConfigChannel+0x8e>
  else if (Channel == TIM_CHANNEL_2)
 8001c98:	2a04      	cmp	r2, #4
 8001c9a:	d063      	beq.n	8001d64 <HAL_TIM_IC_ConfigChannel+0xec>
  else if (Channel == TIM_CHANNEL_3)
 8001c9c:	2a08      	cmp	r2, #8
 8001c9e:	d100      	bne.n	8001ca2 <HAL_TIM_IC_ConfigChannel+0x2a>
 8001ca0:	e086      	b.n	8001db0 <HAL_TIM_IC_ConfigChannel+0x138>
    TIM_TI4_SetConfig(htim->Instance,
 8001ca2:	6808      	ldr	r0, [r1, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	4680      	mov	r8, r0
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001ca8:	6a16      	ldr	r6, [r2, #32]
 8001caa:	4f58      	ldr	r7, [pc, #352]	; (8001e0c <HAL_TIM_IC_ConfigChannel+0x194>)
    TIM_TI4_SetConfig(htim->Instance,
 8001cac:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001cae:	403e      	ands	r6, r7
    TIM_TI4_SetConfig(htim->Instance,
 8001cb0:	68cc      	ldr	r4, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001cb2:	6216      	str	r6, [r2, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001cb4:	69d7      	ldr	r7, [r2, #28]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8001cb6:	4856      	ldr	r0, [pc, #344]	; (8001e10 <HAL_TIM_IC_ConfigChannel+0x198>)
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8001cb8:	022d      	lsls	r5, r5, #8
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8001cba:	4007      	ands	r7, r0
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8001cbc:	433d      	orrs	r5, r7
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8001cbe:	4f55      	ldr	r7, [pc, #340]	; (8001e14 <HAL_TIM_IC_ConfigChannel+0x19c>)
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001cc0:	0724      	lsls	r4, r4, #28
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8001cc2:	403d      	ands	r5, r7
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001cc4:	0c24      	lsrs	r4, r4, #16
  tmpccer = TIMx->CCER;
 8001cc6:	6a16      	ldr	r6, [r2, #32]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001cc8:	432c      	orrs	r4, r5
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8001cca:	4d53      	ldr	r5, [pc, #332]	; (8001e18 <HAL_TIM_IC_ConfigChannel+0x1a0>)
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001ccc:	4640      	mov	r0, r8
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8001cce:	4035      	ands	r5, r6
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001cd0:	26a0      	movs	r6, #160	; 0xa0
 8001cd2:	0300      	lsls	r0, r0, #12
 8001cd4:	0236      	lsls	r6, r6, #8
 8001cd6:	4030      	ands	r0, r6
 8001cd8:	4328      	orrs	r0, r5
  TIMx->CCMR2 = tmpccmr2;
 8001cda:	61d4      	str	r4, [r2, #28]
  TIMx->CCER = tmpccer ;
 8001cdc:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001cde:	69d0      	ldr	r0, [r2, #28]
 8001ce0:	4c4e      	ldr	r4, [pc, #312]	; (8001e1c <HAL_TIM_IC_ConfigChannel+0x1a4>)
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001ce2:	6889      	ldr	r1, [r1, #8]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001ce4:	4020      	ands	r0, r4
 8001ce6:	61d0      	str	r0, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001ce8:	69d0      	ldr	r0, [r2, #28]
 8001cea:	0209      	lsls	r1, r1, #8
 8001cec:	4301      	orrs	r1, r0
 8001cee:	61d1      	str	r1, [r2, #28]
  htim->State = HAL_TIM_STATE_READY;
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	223d      	movs	r2, #61	; 0x3d
 8001cf4:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(htim);
 8001cf6:	2100      	movs	r1, #0
  return HAL_OK;
 8001cf8:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8001cfa:	3a01      	subs	r2, #1
 8001cfc:	5499      	strb	r1, [r3, r2]
}
 8001cfe:	bc0c      	pop	{r2, r3}
 8001d00:	4690      	mov	r8, r2
 8001d02:	4699      	mov	r9, r3
 8001d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    TIM_TI1_SetConfig(htim->Instance,
 8001d06:	6848      	ldr	r0, [r1, #4]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	4680      	mov	r8, r0
 8001d0c:	68c8      	ldr	r0, [r1, #12]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001d0e:	4c44      	ldr	r4, [pc, #272]	; (8001e20 <HAL_TIM_IC_ConfigChannel+0x1a8>)
    TIM_TI1_SetConfig(htim->Instance,
 8001d10:	4681      	mov	r9, r0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d12:	6a10      	ldr	r0, [r2, #32]
    TIM_TI1_SetConfig(htim->Instance,
 8001d14:	680f      	ldr	r7, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d16:	43a8      	bics	r0, r5
 8001d18:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d1a:	6990      	ldr	r0, [r2, #24]
  tmpccer = TIMx->CCER;
 8001d1c:	6a16      	ldr	r6, [r2, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001d1e:	42a2      	cmp	r2, r4
 8001d20:	d06d      	beq.n	8001dfe <HAL_TIM_IC_ConfigChannel+0x186>
 8001d22:	2480      	movs	r4, #128	; 0x80
 8001d24:	05e4      	lsls	r4, r4, #23
 8001d26:	42a2      	cmp	r2, r4
 8001d28:	d069      	beq.n	8001dfe <HAL_TIM_IC_ConfigChannel+0x186>
 8001d2a:	4c3e      	ldr	r4, [pc, #248]	; (8001e24 <HAL_TIM_IC_ConfigChannel+0x1ac>)
 8001d2c:	42a2      	cmp	r2, r4
 8001d2e:	d066      	beq.n	8001dfe <HAL_TIM_IC_ConfigChannel+0x186>
 8001d30:	4c3d      	ldr	r4, [pc, #244]	; (8001e28 <HAL_TIM_IC_ConfigChannel+0x1b0>)
 8001d32:	42a2      	cmp	r2, r4
 8001d34:	d063      	beq.n	8001dfe <HAL_TIM_IC_ConfigChannel+0x186>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8001d36:	4305      	orrs	r5, r0
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001d38:	20f0      	movs	r0, #240	; 0xf0
 8001d3a:	4385      	bics	r5, r0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001d3c:	4648      	mov	r0, r9
 8001d3e:	24ff      	movs	r4, #255	; 0xff
 8001d40:	0100      	lsls	r0, r0, #4
 8001d42:	4004      	ands	r4, r0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d44:	200a      	movs	r0, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001d46:	4325      	orrs	r5, r4
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001d48:	240c      	movs	r4, #12
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d4a:	4386      	bics	r6, r0
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001d4c:	4038      	ands	r0, r7
 8001d4e:	4330      	orrs	r0, r6
  TIMx->CCMR1 = tmpccmr1;
 8001d50:	6195      	str	r5, [r2, #24]
  TIMx->CCER = tmpccer;
 8001d52:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001d54:	6990      	ldr	r0, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001d56:	6889      	ldr	r1, [r1, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001d58:	43a0      	bics	r0, r4
 8001d5a:	6190      	str	r0, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001d5c:	6990      	ldr	r0, [r2, #24]
 8001d5e:	4301      	orrs	r1, r0
 8001d60:	6191      	str	r1, [r2, #24]
 8001d62:	e7c5      	b.n	8001cf0 <HAL_TIM_IC_ConfigChannel+0x78>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d64:	2710      	movs	r7, #16
    TIM_TI2_SetConfig(htim->Instance,
 8001d66:	68c8      	ldr	r0, [r1, #12]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	4680      	mov	r8, r0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d6c:	6a15      	ldr	r5, [r2, #32]
    TIM_TI2_SetConfig(htim->Instance,
 8001d6e:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d70:	43bd      	bics	r5, r7
    TIM_TI2_SetConfig(htim->Instance,
 8001d72:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d74:	6215      	str	r5, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d76:	6997      	ldr	r7, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8001d78:	4825      	ldr	r0, [pc, #148]	; (8001e10 <HAL_TIM_IC_ConfigChannel+0x198>)
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8001d7a:	0224      	lsls	r4, r4, #8
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8001d7c:	4007      	ands	r7, r0
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001d7e:	4640      	mov	r0, r8
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8001d80:	433c      	orrs	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001d82:	4f24      	ldr	r7, [pc, #144]	; (8001e14 <HAL_TIM_IC_ConfigChannel+0x19c>)
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001d84:	0700      	lsls	r0, r0, #28
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001d86:	403c      	ands	r4, r7
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001d88:	0c00      	lsrs	r0, r0, #16
 8001d8a:	4320      	orrs	r0, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001d8c:	24a0      	movs	r4, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8001d8e:	6a15      	ldr	r5, [r2, #32]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001d90:	0136      	lsls	r6, r6, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001d92:	43a5      	bics	r5, r4
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001d94:	4034      	ands	r4, r6
 8001d96:	4325      	orrs	r5, r4
  TIMx->CCMR1 = tmpccmr1 ;
 8001d98:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 8001d9a:	6215      	str	r5, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001d9c:	6990      	ldr	r0, [r2, #24]
 8001d9e:	4c1f      	ldr	r4, [pc, #124]	; (8001e1c <HAL_TIM_IC_ConfigChannel+0x1a4>)
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001da0:	6889      	ldr	r1, [r1, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001da2:	4020      	ands	r0, r4
 8001da4:	6190      	str	r0, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001da6:	6990      	ldr	r0, [r2, #24]
 8001da8:	0209      	lsls	r1, r1, #8
 8001daa:	4301      	orrs	r1, r0
 8001dac:	6191      	str	r1, [r2, #24]
 8001dae:	e79f      	b.n	8001cf0 <HAL_TIM_IC_ConfigChannel+0x78>
    TIM_TI3_SetConfig(htim->Instance,
 8001db0:	6808      	ldr	r0, [r1, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	4680      	mov	r8, r0
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8001db6:	2003      	movs	r0, #3
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001db8:	6a16      	ldr	r6, [r2, #32]
 8001dba:	4f1c      	ldr	r7, [pc, #112]	; (8001e2c <HAL_TIM_IC_ConfigChannel+0x1b4>)
    TIM_TI3_SetConfig(htim->Instance,
 8001dbc:	68cc      	ldr	r4, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001dbe:	403e      	ands	r6, r7
    TIM_TI3_SetConfig(htim->Instance,
 8001dc0:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001dc2:	6216      	str	r6, [r2, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001dc4:	69d7      	ldr	r7, [r2, #28]
  tmpccer = TIMx->CCER;
 8001dc6:	6a16      	ldr	r6, [r2, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8001dc8:	4387      	bics	r7, r0
  tmpccmr2 |= TIM_ICSelection;
 8001dca:	433d      	orrs	r5, r7
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8001dcc:	27f0      	movs	r7, #240	; 0xf0
 8001dce:	43bd      	bics	r5, r7
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8001dd0:	0127      	lsls	r7, r4, #4
 8001dd2:	24ff      	movs	r4, #255	; 0xff
 8001dd4:	403c      	ands	r4, r7
 8001dd6:	432c      	orrs	r4, r5
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8001dd8:	4d15      	ldr	r5, [pc, #84]	; (8001e30 <HAL_TIM_IC_ConfigChannel+0x1b8>)
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001dda:	4640      	mov	r0, r8
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8001ddc:	4035      	ands	r5, r6
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001dde:	26a0      	movs	r6, #160	; 0xa0
  TIMx->CCMR2 = tmpccmr2;
 8001de0:	61d4      	str	r4, [r2, #28]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001de2:	240c      	movs	r4, #12
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001de4:	0200      	lsls	r0, r0, #8
 8001de6:	0136      	lsls	r6, r6, #4
 8001de8:	4030      	ands	r0, r6
 8001dea:	4328      	orrs	r0, r5
  TIMx->CCER = tmpccer;
 8001dec:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001dee:	69d0      	ldr	r0, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001df0:	6889      	ldr	r1, [r1, #8]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001df2:	43a0      	bics	r0, r4
 8001df4:	61d0      	str	r0, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001df6:	69d0      	ldr	r0, [r2, #28]
 8001df8:	4301      	orrs	r1, r0
 8001dfa:	61d1      	str	r1, [r2, #28]
 8001dfc:	e778      	b.n	8001cf0 <HAL_TIM_IC_ConfigChannel+0x78>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8001dfe:	2503      	movs	r5, #3
 8001e00:	43a8      	bics	r0, r5
 8001e02:	0005      	movs	r5, r0
    tmpccmr1 |= TIM_ICSelection;
 8001e04:	4640      	mov	r0, r8
 8001e06:	4328      	orrs	r0, r5
 8001e08:	0005      	movs	r5, r0
 8001e0a:	e795      	b.n	8001d38 <HAL_TIM_IC_ConfigChannel+0xc0>
 8001e0c:	ffffefff 	.word	0xffffefff
 8001e10:	fffffcff 	.word	0xfffffcff
 8001e14:	ffff0fff 	.word	0xffff0fff
 8001e18:	ffff5fff 	.word	0xffff5fff
 8001e1c:	fffff3ff 	.word	0xfffff3ff
 8001e20:	40012c00 	.word	0x40012c00
 8001e24:	40000400 	.word	0x40000400
 8001e28:	40014000 	.word	0x40014000
 8001e2c:	fffffeff 	.word	0xfffffeff
 8001e30:	fffff5ff 	.word	0xfffff5ff

08001e34 <HAL_TIM_PWM_ConfigChannel>:
{
 8001e34:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8001e36:	243c      	movs	r4, #60	; 0x3c
 8001e38:	5d05      	ldrb	r5, [r0, r4]
{
 8001e3a:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8001e3c:	2002      	movs	r0, #2
 8001e3e:	2d01      	cmp	r5, #1
 8001e40:	d048      	beq.n	8001ed4 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8001e42:	2501      	movs	r5, #1
 8001e44:	551d      	strb	r5, [r3, r4]
  htim->State = HAL_TIM_STATE_BUSY;
 8001e46:	3401      	adds	r4, #1
 8001e48:	5518      	strb	r0, [r3, r4]
  switch (Channel)
 8001e4a:	2a04      	cmp	r2, #4
 8001e4c:	d043      	beq.n	8001ed6 <HAL_TIM_PWM_ConfigChannel+0xa2>
 8001e4e:	d800      	bhi.n	8001e52 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001e50:	e0a6      	b.n	8001fa0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001e52:	2a08      	cmp	r2, #8
 8001e54:	d100      	bne.n	8001e58 <HAL_TIM_PWM_ConfigChannel+0x24>
 8001e56:	e074      	b.n	8001f42 <HAL_TIM_PWM_ConfigChannel+0x10e>
 8001e58:	2a0c      	cmp	r2, #12
 8001e5a:	d134      	bne.n	8001ec6 <HAL_TIM_PWM_ConfigChannel+0x92>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001e5c:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001e5e:	4c81      	ldr	r4, [pc, #516]	; (8002064 <HAL_TIM_PWM_ConfigChannel+0x230>)
 8001e60:	6a10      	ldr	r0, [r2, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001e62:	4d81      	ldr	r5, [pc, #516]	; (8002068 <HAL_TIM_PWM_ConfigChannel+0x234>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001e64:	4020      	ands	r0, r4
 8001e66:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8001e68:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8001e6a:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8001e6c:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001e6e:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e70:	680d      	ldr	r5, [r1, #0]
 8001e72:	022d      	lsls	r5, r5, #8
 8001e74:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC4P;
 8001e76:	4c7d      	ldr	r4, [pc, #500]	; (800206c <HAL_TIM_PWM_ConfigChannel+0x238>)
 8001e78:	4004      	ands	r4, r0
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001e7a:	6888      	ldr	r0, [r1, #8]
 8001e7c:	0300      	lsls	r0, r0, #12
 8001e7e:	4320      	orrs	r0, r4
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001e80:	4c7b      	ldr	r4, [pc, #492]	; (8002070 <HAL_TIM_PWM_ConfigChannel+0x23c>)
 8001e82:	42a2      	cmp	r2, r4
 8001e84:	d100      	bne.n	8001e88 <HAL_TIM_PWM_ConfigChannel+0x54>
 8001e86:	e0ca      	b.n	800201e <HAL_TIM_PWM_ConfigChannel+0x1ea>
 8001e88:	4c7a      	ldr	r4, [pc, #488]	; (8002074 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8001e8a:	42a2      	cmp	r2, r4
 8001e8c:	d100      	bne.n	8001e90 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001e8e:	e0c6      	b.n	800201e <HAL_TIM_PWM_ConfigChannel+0x1ea>
 8001e90:	4c79      	ldr	r4, [pc, #484]	; (8002078 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8001e92:	42a2      	cmp	r2, r4
 8001e94:	d100      	bne.n	8001e98 <HAL_TIM_PWM_ConfigChannel+0x64>
 8001e96:	e0c2      	b.n	800201e <HAL_TIM_PWM_ConfigChannel+0x1ea>
 8001e98:	4c78      	ldr	r4, [pc, #480]	; (800207c <HAL_TIM_PWM_ConfigChannel+0x248>)
 8001e9a:	42a2      	cmp	r2, r4
 8001e9c:	d100      	bne.n	8001ea0 <HAL_TIM_PWM_ConfigChannel+0x6c>
 8001e9e:	e0be      	b.n	800201e <HAL_TIM_PWM_ConfigChannel+0x1ea>
  TIMx->CCR4 = OC_Config->Pulse;
 8001ea0:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001ea2:	6056      	str	r6, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001ea4:	61d5      	str	r5, [r2, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8001ea6:	6414      	str	r4, [r2, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8001ea8:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001eaa:	2080      	movs	r0, #128	; 0x80
 8001eac:	69d4      	ldr	r4, [r2, #28]
 8001eae:	0100      	lsls	r0, r0, #4
 8001eb0:	4320      	orrs	r0, r4
 8001eb2:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001eb4:	69d0      	ldr	r0, [r2, #28]
 8001eb6:	4c72      	ldr	r4, [pc, #456]	; (8002080 <HAL_TIM_PWM_ConfigChannel+0x24c>)
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001eb8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001eba:	4020      	ands	r0, r4
 8001ebc:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001ebe:	69d0      	ldr	r0, [r2, #28]
 8001ec0:	0209      	lsls	r1, r1, #8
 8001ec2:	4301      	orrs	r1, r0
 8001ec4:	61d1      	str	r1, [r2, #28]
  htim->State = HAL_TIM_STATE_READY;
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	223d      	movs	r2, #61	; 0x3d
 8001eca:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(htim);
 8001ecc:	2100      	movs	r1, #0
  return HAL_OK;
 8001ece:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8001ed0:	3a01      	subs	r2, #1
 8001ed2:	5499      	strb	r1, [r3, r2]
}
 8001ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ed6:	2410      	movs	r4, #16
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001ed8:	681a      	ldr	r2, [r3, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001eda:	4d63      	ldr	r5, [pc, #396]	; (8002068 <HAL_TIM_PWM_ConfigChannel+0x234>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001edc:	6a10      	ldr	r0, [r2, #32]
 8001ede:	43a0      	bics	r0, r4
 8001ee0:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8001ee2:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8001ee4:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8001ee6:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001ee8:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001eea:	680d      	ldr	r5, [r1, #0]
 8001eec:	022d      	lsls	r5, r5, #8
 8001eee:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC2P;
 8001ef0:	2420      	movs	r4, #32
 8001ef2:	43a0      	bics	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001ef4:	688c      	ldr	r4, [r1, #8]
 8001ef6:	0124      	lsls	r4, r4, #4
 8001ef8:	4320      	orrs	r0, r4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001efa:	4c5d      	ldr	r4, [pc, #372]	; (8002070 <HAL_TIM_PWM_ConfigChannel+0x23c>)
 8001efc:	42a2      	cmp	r2, r4
 8001efe:	d100      	bne.n	8001f02 <HAL_TIM_PWM_ConfigChannel+0xce>
 8001f00:	e093      	b.n	800202a <HAL_TIM_PWM_ConfigChannel+0x1f6>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001f02:	4c5c      	ldr	r4, [pc, #368]	; (8002074 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8001f04:	42a2      	cmp	r2, r4
 8001f06:	d100      	bne.n	8001f0a <HAL_TIM_PWM_ConfigChannel+0xd6>
 8001f08:	e096      	b.n	8002038 <HAL_TIM_PWM_ConfigChannel+0x204>
 8001f0a:	4c5b      	ldr	r4, [pc, #364]	; (8002078 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8001f0c:	42a2      	cmp	r2, r4
 8001f0e:	d100      	bne.n	8001f12 <HAL_TIM_PWM_ConfigChannel+0xde>
 8001f10:	e092      	b.n	8002038 <HAL_TIM_PWM_ConfigChannel+0x204>
 8001f12:	4c5a      	ldr	r4, [pc, #360]	; (800207c <HAL_TIM_PWM_ConfigChannel+0x248>)
 8001f14:	42a2      	cmp	r2, r4
 8001f16:	d100      	bne.n	8001f1a <HAL_TIM_PWM_ConfigChannel+0xe6>
 8001f18:	e08e      	b.n	8002038 <HAL_TIM_PWM_ConfigChannel+0x204>
  TIMx->CCR2 = OC_Config->Pulse;
 8001f1a:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001f1c:	6056      	str	r6, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001f1e:	6195      	str	r5, [r2, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001f20:	6394      	str	r4, [r2, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001f22:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001f24:	2080      	movs	r0, #128	; 0x80
 8001f26:	6994      	ldr	r4, [r2, #24]
 8001f28:	0100      	lsls	r0, r0, #4
 8001f2a:	4320      	orrs	r0, r4
 8001f2c:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f2e:	6990      	ldr	r0, [r2, #24]
 8001f30:	4c53      	ldr	r4, [pc, #332]	; (8002080 <HAL_TIM_PWM_ConfigChannel+0x24c>)
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f32:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f34:	4020      	ands	r0, r4
 8001f36:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f38:	6990      	ldr	r0, [r2, #24]
 8001f3a:	0209      	lsls	r1, r1, #8
 8001f3c:	4301      	orrs	r1, r0
 8001f3e:	6191      	str	r1, [r2, #24]
    break;
 8001f40:	e7c1      	b.n	8001ec6 <HAL_TIM_PWM_ConfigChannel+0x92>
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001f42:	2673      	movs	r6, #115	; 0x73
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001f44:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001f46:	4c4f      	ldr	r4, [pc, #316]	; (8002084 <HAL_TIM_PWM_ConfigChannel+0x250>)
 8001f48:	6a10      	ldr	r0, [r2, #32]
 8001f4a:	4020      	ands	r0, r4
 8001f4c:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8001f4e:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8001f50:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8001f52:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001f54:	43b4      	bics	r4, r6
  tmpccmrx |= OC_Config->OCMode;
 8001f56:	680e      	ldr	r6, [r1, #0]
 8001f58:	4326      	orrs	r6, r4
  tmpccer &= ~TIM_CCER_CC3P;
 8001f5a:	4c4b      	ldr	r4, [pc, #300]	; (8002088 <HAL_TIM_PWM_ConfigChannel+0x254>)
 8001f5c:	4020      	ands	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001f5e:	688c      	ldr	r4, [r1, #8]
 8001f60:	0224      	lsls	r4, r4, #8
 8001f62:	4320      	orrs	r0, r4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001f64:	4c42      	ldr	r4, [pc, #264]	; (8002070 <HAL_TIM_PWM_ConfigChannel+0x23c>)
 8001f66:	42a2      	cmp	r2, r4
 8001f68:	d04a      	beq.n	8002000 <HAL_TIM_PWM_ConfigChannel+0x1cc>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001f6a:	4c42      	ldr	r4, [pc, #264]	; (8002074 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8001f6c:	42a2      	cmp	r2, r4
 8001f6e:	d04e      	beq.n	800200e <HAL_TIM_PWM_ConfigChannel+0x1da>
 8001f70:	4c41      	ldr	r4, [pc, #260]	; (8002078 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8001f72:	42a2      	cmp	r2, r4
 8001f74:	d04b      	beq.n	800200e <HAL_TIM_PWM_ConfigChannel+0x1da>
 8001f76:	4c41      	ldr	r4, [pc, #260]	; (800207c <HAL_TIM_PWM_ConfigChannel+0x248>)
 8001f78:	42a2      	cmp	r2, r4
 8001f7a:	d048      	beq.n	800200e <HAL_TIM_PWM_ConfigChannel+0x1da>
  TIMx->CCR3 = OC_Config->Pulse;
 8001f7c:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001f7e:	6055      	str	r5, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001f80:	61d6      	str	r6, [r2, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8001f82:	63d4      	str	r4, [r2, #60]	; 0x3c
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f84:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 8001f86:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f88:	69d0      	ldr	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001f8a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f8c:	4320      	orrs	r0, r4
 8001f8e:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001f90:	69d0      	ldr	r0, [r2, #28]
 8001f92:	3c04      	subs	r4, #4
 8001f94:	43a0      	bics	r0, r4
 8001f96:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001f98:	69d0      	ldr	r0, [r2, #28]
 8001f9a:	4301      	orrs	r1, r0
 8001f9c:	61d1      	str	r1, [r2, #28]
    break;
 8001f9e:	e792      	b.n	8001ec6 <HAL_TIM_PWM_ConfigChannel+0x92>
  switch (Channel)
 8001fa0:	2a00      	cmp	r2, #0
 8001fa2:	d000      	beq.n	8001fa6 <HAL_TIM_PWM_ConfigChannel+0x172>
 8001fa4:	e78f      	b.n	8001ec6 <HAL_TIM_PWM_ConfigChannel+0x92>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001fa6:	681a      	ldr	r2, [r3, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001fa8:	2773      	movs	r7, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001faa:	6a14      	ldr	r4, [r2, #32]
 8001fac:	43ac      	bics	r4, r5
 8001fae:	6214      	str	r4, [r2, #32]
  tmpccer = TIMx->CCER;
 8001fb0:	6a14      	ldr	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8001fb2:	6856      	ldr	r6, [r2, #4]
  tmpccer &= ~TIM_CCER_CC1P;
 8001fb4:	4384      	bics	r4, r0
 8001fb6:	0020      	movs	r0, r4
  tmpccmrx = TIMx->CCMR1;
 8001fb8:	6995      	ldr	r5, [r2, #24]
  tmpccer |= OC_Config->OCPolarity;
 8001fba:	688c      	ldr	r4, [r1, #8]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001fbc:	43bd      	bics	r5, r7
  tmpccer |= OC_Config->OCPolarity;
 8001fbe:	4320      	orrs	r0, r4
  tmpccmrx |= OC_Config->OCMode;
 8001fc0:	680f      	ldr	r7, [r1, #0]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001fc2:	4c2b      	ldr	r4, [pc, #172]	; (8002070 <HAL_TIM_PWM_ConfigChannel+0x23c>)
  tmpccmrx |= OC_Config->OCMode;
 8001fc4:	433d      	orrs	r5, r7
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001fc6:	42a2      	cmp	r2, r4
 8001fc8:	d03e      	beq.n	8002048 <HAL_TIM_PWM_ConfigChannel+0x214>
 8001fca:	4c2a      	ldr	r4, [pc, #168]	; (8002074 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8001fcc:	42a2      	cmp	r2, r4
 8001fce:	d03b      	beq.n	8002048 <HAL_TIM_PWM_ConfigChannel+0x214>
 8001fd0:	4c29      	ldr	r4, [pc, #164]	; (8002078 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8001fd2:	42a2      	cmp	r2, r4
 8001fd4:	d038      	beq.n	8002048 <HAL_TIM_PWM_ConfigChannel+0x214>
 8001fd6:	4c29      	ldr	r4, [pc, #164]	; (800207c <HAL_TIM_PWM_ConfigChannel+0x248>)
 8001fd8:	42a2      	cmp	r2, r4
 8001fda:	d035      	beq.n	8002048 <HAL_TIM_PWM_ConfigChannel+0x214>
  TIMx->CCR1 = OC_Config->Pulse;
 8001fdc:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001fde:	6056      	str	r6, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001fe0:	6195      	str	r5, [r2, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8001fe2:	6354      	str	r4, [r2, #52]	; 0x34
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001fe4:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 8001fe6:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001fe8:	6990      	ldr	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001fea:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001fec:	4320      	orrs	r0, r4
 8001fee:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001ff0:	6990      	ldr	r0, [r2, #24]
 8001ff2:	3c04      	subs	r4, #4
 8001ff4:	43a0      	bics	r0, r4
 8001ff6:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001ff8:	6990      	ldr	r0, [r2, #24]
 8001ffa:	4301      	orrs	r1, r0
 8001ffc:	6191      	str	r1, [r2, #24]
    break;
 8001ffe:	e762      	b.n	8001ec6 <HAL_TIM_PWM_ConfigChannel+0x92>
    tmpccer &= ~TIM_CCER_CC3NP;
 8002000:	4c22      	ldr	r4, [pc, #136]	; (800208c <HAL_TIM_PWM_ConfigChannel+0x258>)
 8002002:	4004      	ands	r4, r0
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002004:	68c8      	ldr	r0, [r1, #12]
 8002006:	0200      	lsls	r0, r0, #8
 8002008:	4320      	orrs	r0, r4
    tmpccer &= ~TIM_CCER_CC3NE;
 800200a:	4c1d      	ldr	r4, [pc, #116]	; (8002080 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 800200c:	4020      	ands	r0, r4
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800200e:	4c20      	ldr	r4, [pc, #128]	; (8002090 <HAL_TIM_PWM_ConfigChannel+0x25c>)
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002010:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002012:	402c      	ands	r4, r5
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002014:	698d      	ldr	r5, [r1, #24]
 8002016:	433d      	orrs	r5, r7
 8002018:	012d      	lsls	r5, r5, #4
 800201a:	4325      	orrs	r5, r4
 800201c:	e7ae      	b.n	8001f7c <HAL_TIM_PWM_ConfigChannel+0x148>
    tmpcr2 &= ~TIM_CR2_OIS4;
 800201e:	4c1d      	ldr	r4, [pc, #116]	; (8002094 <HAL_TIM_PWM_ConfigChannel+0x260>)
 8002020:	4034      	ands	r4, r6
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002022:	694e      	ldr	r6, [r1, #20]
 8002024:	01b6      	lsls	r6, r6, #6
 8002026:	4326      	orrs	r6, r4
 8002028:	e73a      	b.n	8001ea0 <HAL_TIM_PWM_ConfigChannel+0x6c>
    tmpccer &= ~TIM_CCER_CC2NP;
 800202a:	2480      	movs	r4, #128	; 0x80
 800202c:	43a0      	bics	r0, r4
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800202e:	68cc      	ldr	r4, [r1, #12]
 8002030:	0127      	lsls	r7, r4, #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8002032:	2440      	movs	r4, #64	; 0x40
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002034:	4338      	orrs	r0, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 8002036:	43a0      	bics	r0, r4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002038:	4c17      	ldr	r4, [pc, #92]	; (8002098 <HAL_TIM_PWM_ConfigChannel+0x264>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800203a:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800203c:	4034      	ands	r4, r6
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800203e:	698e      	ldr	r6, [r1, #24]
 8002040:	433e      	orrs	r6, r7
 8002042:	00b6      	lsls	r6, r6, #2
 8002044:	4326      	orrs	r6, r4
 8002046:	e768      	b.n	8001f1a <HAL_TIM_PWM_ConfigChannel+0xe6>
    tmpccer &= ~TIM_CCER_CC1NP;
 8002048:	2408      	movs	r4, #8
 800204a:	43a0      	bics	r0, r4
    tmpccer |= OC_Config->OCNPolarity;
 800204c:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 800204e:	698f      	ldr	r7, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 8002050:	4320      	orrs	r0, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 8002052:	2404      	movs	r4, #4
 8002054:	43a0      	bics	r0, r4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002056:	4c11      	ldr	r4, [pc, #68]	; (800209c <HAL_TIM_PWM_ConfigChannel+0x268>)
 8002058:	4026      	ands	r6, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 800205a:	694c      	ldr	r4, [r1, #20]
 800205c:	433c      	orrs	r4, r7
 800205e:	4326      	orrs	r6, r4
 8002060:	e7bc      	b.n	8001fdc <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	ffffefff 	.word	0xffffefff
 8002068:	ffff8cff 	.word	0xffff8cff
 800206c:	ffffdfff 	.word	0xffffdfff
 8002070:	40012c00 	.word	0x40012c00
 8002074:	40014000 	.word	0x40014000
 8002078:	40014400 	.word	0x40014400
 800207c:	40014800 	.word	0x40014800
 8002080:	fffffbff 	.word	0xfffffbff
 8002084:	fffffeff 	.word	0xfffffeff
 8002088:	fffffdff 	.word	0xfffffdff
 800208c:	fffff7ff 	.word	0xfffff7ff
 8002090:	ffffcfff 	.word	0xffffcfff
 8002094:	ffffbfff 	.word	0xffffbfff
 8002098:	fffff3ff 	.word	0xfffff3ff
 800209c:	fffffcff 	.word	0xfffffcff

080020a0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80020a0:	223c      	movs	r2, #60	; 0x3c
{
 80020a2:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80020a4:	5c84      	ldrb	r4, [r0, r2]
 80020a6:	2302      	movs	r3, #2
 80020a8:	2c01      	cmp	r4, #1
 80020aa:	d03d      	beq.n	8002128 <HAL_TIM_ConfigClockSource+0x88>
 80020ac:	2401      	movs	r4, #1
 80020ae:	5484      	strb	r4, [r0, r2]
  htim->State = HAL_TIM_STATE_BUSY;
 80020b0:	3201      	adds	r2, #1
 80020b2:	5483      	strb	r3, [r0, r2]
  tmpsmcr = htim->Instance->SMCR;
 80020b4:	6803      	ldr	r3, [r0, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020b6:	4d59      	ldr	r5, [pc, #356]	; (800221c <HAL_TIM_ConfigClockSource+0x17c>)
  tmpsmcr = htim->Instance->SMCR;
 80020b8:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020ba:	402a      	ands	r2, r5
  htim->Instance->SMCR = tmpsmcr;
 80020bc:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80020be:	680a      	ldr	r2, [r1, #0]
 80020c0:	2a40      	cmp	r2, #64	; 0x40
 80020c2:	d100      	bne.n	80020c6 <HAL_TIM_ConfigClockSource+0x26>
 80020c4:	e074      	b.n	80021b0 <HAL_TIM_ConfigClockSource+0x110>
 80020c6:	d91b      	bls.n	8002100 <HAL_TIM_ConfigClockSource+0x60>
 80020c8:	2a70      	cmp	r2, #112	; 0x70
 80020ca:	d061      	beq.n	8002190 <HAL_TIM_ConfigClockSource+0xf0>
 80020cc:	d92e      	bls.n	800212c <HAL_TIM_ConfigClockSource+0x8c>
 80020ce:	2480      	movs	r4, #128	; 0x80
 80020d0:	0164      	lsls	r4, r4, #5
 80020d2:	42a2      	cmp	r2, r4
 80020d4:	d057      	beq.n	8002186 <HAL_TIM_ConfigClockSource+0xe6>
 80020d6:	2480      	movs	r4, #128	; 0x80
 80020d8:	01a4      	lsls	r4, r4, #6
 80020da:	42a2      	cmp	r2, r4
 80020dc:	d11d      	bne.n	800211a <HAL_TIM_ConfigClockSource+0x7a>
  tmpsmcr = TIMx->SMCR;
 80020de:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020e0:	4c4f      	ldr	r4, [pc, #316]	; (8002220 <HAL_TIM_ConfigClockSource+0x180>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80020e2:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020e4:	4014      	ands	r4, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80020e6:	688a      	ldr	r2, [r1, #8]
 80020e8:	68c9      	ldr	r1, [r1, #12]
 80020ea:	432a      	orrs	r2, r5
 80020ec:	0209      	lsls	r1, r1, #8
 80020ee:	430a      	orrs	r2, r1
 80020f0:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 80020f2:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020f4:	2280      	movs	r2, #128	; 0x80
 80020f6:	6899      	ldr	r1, [r3, #8]
 80020f8:	01d2      	lsls	r2, r2, #7
 80020fa:	430a      	orrs	r2, r1
 80020fc:	609a      	str	r2, [r3, #8]
    break;
 80020fe:	e00c      	b.n	800211a <HAL_TIM_ConfigClockSource+0x7a>
  switch (sClockSourceConfig->ClockSource)
 8002100:	2a10      	cmp	r2, #16
 8002102:	d030      	beq.n	8002166 <HAL_TIM_ConfigClockSource+0xc6>
 8002104:	d936      	bls.n	8002174 <HAL_TIM_ConfigClockSource+0xd4>
 8002106:	2a20      	cmp	r2, #32
 8002108:	d069      	beq.n	80021de <HAL_TIM_ConfigClockSource+0x13e>
 800210a:	2a30      	cmp	r2, #48	; 0x30
 800210c:	d105      	bne.n	800211a <HAL_TIM_ConfigClockSource+0x7a>
   tmpsmcr &= ~TIM_SMCR_TS;
 800210e:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8002110:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002112:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002114:	3939      	subs	r1, #57	; 0x39
 8002116:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 8002118:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 800211a:	2201      	movs	r2, #1
 800211c:	233d      	movs	r3, #61	; 0x3d
 800211e:	54c2      	strb	r2, [r0, r3]
  __HAL_UNLOCK(htim);
 8002120:	2200      	movs	r2, #0
 8002122:	3b01      	subs	r3, #1
 8002124:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	0018      	movs	r0, r3
 800212a:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800212c:	2a50      	cmp	r2, #80	; 0x50
 800212e:	d05d      	beq.n	80021ec <HAL_TIM_ConfigClockSource+0x14c>
 8002130:	2a60      	cmp	r2, #96	; 0x60
 8002132:	d1f2      	bne.n	800211a <HAL_TIM_ConfigClockSource+0x7a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002134:	2510      	movs	r5, #16
 8002136:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002138:	684a      	ldr	r2, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800213a:	43ac      	bics	r4, r5
      TIM_TI2_ConfigInputStage(htim->Instance,
 800213c:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800213e:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002140:	699d      	ldr	r5, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002142:	4e38      	ldr	r6, [pc, #224]	; (8002224 <HAL_TIM_ConfigClockSource+0x184>)
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002144:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002146:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002148:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800214a:	25a0      	movs	r5, #160	; 0xa0
  tmpccer = TIMx->CCER;
 800214c:	6a1c      	ldr	r4, [r3, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 800214e:	6199      	str	r1, [r3, #24]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002150:	2170      	movs	r1, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002152:	43ac      	bics	r4, r5
  tmpccer |= (TIM_ICPolarity << 4U);
 8002154:	0112      	lsls	r2, r2, #4
 8002156:	4322      	orrs	r2, r4
  TIMx->CCER = tmpccer;
 8002158:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800215a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800215c:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800215e:	3909      	subs	r1, #9
 8002160:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 8002162:	609a      	str	r2, [r3, #8]
 8002164:	e7d9      	b.n	800211a <HAL_TIM_ConfigClockSource+0x7a>
   tmpsmcr &= ~TIM_SMCR_TS;
 8002166:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8002168:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800216a:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800216c:	3959      	subs	r1, #89	; 0x59
 800216e:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 8002170:	609a      	str	r2, [r3, #8]
 8002172:	e7d2      	b.n	800211a <HAL_TIM_ConfigClockSource+0x7a>
  switch (sClockSourceConfig->ClockSource)
 8002174:	2a00      	cmp	r2, #0
 8002176:	d1d0      	bne.n	800211a <HAL_TIM_ConfigClockSource+0x7a>
   tmpsmcr &= ~TIM_SMCR_TS;
 8002178:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 800217a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800217c:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800217e:	3969      	subs	r1, #105	; 0x69
 8002180:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	e7c9      	b.n	800211a <HAL_TIM_ConfigClockSource+0x7a>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002186:	2107      	movs	r1, #7
 8002188:	689a      	ldr	r2, [r3, #8]
 800218a:	438a      	bics	r2, r1
 800218c:	609a      	str	r2, [r3, #8]
    break;
 800218e:	e7c4      	b.n	800211a <HAL_TIM_ConfigClockSource+0x7a>
  tmpsmcr = TIMx->SMCR;
 8002190:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002192:	4c23      	ldr	r4, [pc, #140]	; (8002220 <HAL_TIM_ConfigClockSource+0x180>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002194:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002196:	4014      	ands	r4, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002198:	688a      	ldr	r2, [r1, #8]
 800219a:	68c9      	ldr	r1, [r1, #12]
 800219c:	432a      	orrs	r2, r5
 800219e:	0209      	lsls	r1, r1, #8
 80021a0:	430a      	orrs	r2, r1
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021a2:	2177      	movs	r1, #119	; 0x77
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021a4:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 80021a6:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 80021a8:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021aa:	430a      	orrs	r2, r1
      htim->Instance->SMCR = tmpsmcr;
 80021ac:	609a      	str	r2, [r3, #8]
    break;
 80021ae:	e7b4      	b.n	800211a <HAL_TIM_ConfigClockSource+0x7a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021b0:	684d      	ldr	r5, [r1, #4]
 80021b2:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 80021b4:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021b6:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80021b8:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021ba:	43a6      	bics	r6, r4
 80021bc:	621e      	str	r6, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80021be:	26f0      	movs	r6, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 80021c0:	699c      	ldr	r4, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80021c2:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80021c4:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80021c6:	240a      	movs	r4, #10
 80021c8:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 80021ca:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 80021cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021ce:	6219      	str	r1, [r3, #32]
   tmpsmcr &= ~TIM_SMCR_TS;
 80021d0:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 80021d2:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80021d4:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80021d6:	3929      	subs	r1, #41	; 0x29
 80021d8:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	e79d      	b.n	800211a <HAL_TIM_ConfigClockSource+0x7a>
   tmpsmcr &= ~TIM_SMCR_TS;
 80021de:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 80021e0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80021e2:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80021e4:	3949      	subs	r1, #73	; 0x49
 80021e6:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 80021e8:	609a      	str	r2, [r3, #8]
 80021ea:	e796      	b.n	800211a <HAL_TIM_ConfigClockSource+0x7a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021ec:	684d      	ldr	r5, [r1, #4]
 80021ee:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 80021f0:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021f2:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80021f4:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021f6:	43a6      	bics	r6, r4
 80021f8:	621e      	str	r6, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80021fa:	26f0      	movs	r6, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 80021fc:	699c      	ldr	r4, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80021fe:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002200:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002202:	240a      	movs	r4, #10
 8002204:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8002206:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8002208:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800220a:	6219      	str	r1, [r3, #32]
   tmpsmcr &= ~TIM_SMCR_TS;
 800220c:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 800220e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002210:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002212:	3919      	subs	r1, #25
 8002214:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	e77f      	b.n	800211a <HAL_TIM_ConfigClockSource+0x7a>
 800221a:	46c0      	nop			; (mov r8, r8)
 800221c:	ffff0088 	.word	0xffff0088
 8002220:	ffff00ff 	.word	0xffff00ff
 8002224:	ffff0fff 	.word	0xffff0fff

08002228 <HAL_TIM_IC_CaptureCallback>:
 8002228:	4770      	bx	lr
 800222a:	46c0      	nop			; (mov r8, r8)

0800222c <TIM_DMACaptureCplt>:
  htim->State= HAL_TIM_STATE_READY;
 800222c:	223d      	movs	r2, #61	; 0x3d
 800222e:	2301      	movs	r3, #1
{
 8002230:	b510      	push	{r4, lr}
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002232:	6a44      	ldr	r4, [r0, #36]	; 0x24
  htim->State= HAL_TIM_STATE_READY;
 8002234:	54a3      	strb	r3, [r4, r2]
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002236:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002238:	4290      	cmp	r0, r2
 800223a:	d00f      	beq.n	800225c <TIM_DMACaptureCplt+0x30>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800223c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800223e:	4298      	cmp	r0, r3
 8002240:	d00e      	beq.n	8002260 <TIM_DMACaptureCplt+0x34>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002242:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002244:	4298      	cmp	r0, r3
 8002246:	d00e      	beq.n	8002266 <TIM_DMACaptureCplt+0x3a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002248:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800224a:	4298      	cmp	r0, r3
 800224c:	d005      	beq.n	800225a <TIM_DMACaptureCplt+0x2e>
  HAL_TIM_IC_CaptureCallback(htim);
 800224e:	0020      	movs	r0, r4
 8002250:	f7ff ffea 	bl	8002228 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002254:	2300      	movs	r3, #0
 8002256:	7723      	strb	r3, [r4, #28]
}
 8002258:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800225a:	2308      	movs	r3, #8
 800225c:	7723      	strb	r3, [r4, #28]
 800225e:	e7f6      	b.n	800224e <TIM_DMACaptureCplt+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002260:	2302      	movs	r3, #2
 8002262:	7723      	strb	r3, [r4, #28]
 8002264:	e7f3      	b.n	800224e <TIM_DMACaptureCplt+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002266:	2304      	movs	r3, #4
 8002268:	7723      	strb	r3, [r4, #28]
 800226a:	e7f0      	b.n	800224e <TIM_DMACaptureCplt+0x22>

0800226c <HAL_TIM_ErrorCallback>:
}
 800226c:	4770      	bx	lr
 800226e:	46c0      	nop			; (mov r8, r8)

08002270 <TIM_DMAError>:
  htim->State= HAL_TIM_STATE_READY;
 8002270:	2201      	movs	r2, #1
 8002272:	233d      	movs	r3, #61	; 0x3d
{
 8002274:	b510      	push	{r4, lr}
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002276:	6a40      	ldr	r0, [r0, #36]	; 0x24
  htim->State= HAL_TIM_STATE_READY;
 8002278:	54c2      	strb	r2, [r0, r3]
  HAL_TIM_ErrorCallback(htim);
 800227a:	f7ff fff7 	bl	800226c <HAL_TIM_ErrorCallback>
}
 800227e:	bd10      	pop	{r4, pc}

08002280 <HAL_TIMEx_PWMN_Start>:
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelNState)
{
  uint32_t tmp = 0U;

  tmp = TIM_CCER_CC1NE << Channel;
 8002280:	2204      	movs	r2, #4
 8002282:	408a      	lsls	r2, r1
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8002284:	6803      	ldr	r3, [r0, #0]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8002286:	6a19      	ldr	r1, [r3, #32]
}
 8002288:	2000      	movs	r0, #0
  TIMx->CCER &=  ~tmp;
 800228a:	4391      	bics	r1, r2
 800228c:	6219      	str	r1, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelNState << Channel);
 800228e:	6a19      	ldr	r1, [r3, #32]
 8002290:	430a      	orrs	r2, r1
 8002292:	621a      	str	r2, [r3, #32]
  __HAL_TIM_MOE_ENABLE(htim);
 8002294:	2280      	movs	r2, #128	; 0x80
 8002296:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002298:	0212      	lsls	r2, r2, #8
 800229a:	430a      	orrs	r2, r1
  __HAL_TIM_ENABLE(htim);
 800229c:	2101      	movs	r1, #1
  __HAL_TIM_MOE_ENABLE(htim);
 800229e:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	430a      	orrs	r2, r1
 80022a4:	601a      	str	r2, [r3, #0]
}
 80022a6:	4770      	bx	lr

080022a8 <HAL_TIMEx_MasterConfigSynchronization>:
{
 80022a8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80022aa:	243c      	movs	r4, #60	; 0x3c
 80022ac:	5d03      	ldrb	r3, [r0, r4]
{
 80022ae:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 80022b0:	2002      	movs	r0, #2
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d017      	beq.n	80022e6 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
  htim->State = HAL_TIM_STATE_BUSY;
 80022b6:	253d      	movs	r5, #61	; 0x3d
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80022b8:	2670      	movs	r6, #112	; 0x70
 80022ba:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80022bc:	5550      	strb	r0, [r2, r5]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80022be:	6858      	ldr	r0, [r3, #4]
 80022c0:	43b0      	bics	r0, r6
 80022c2:	6058      	str	r0, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80022c4:	6858      	ldr	r0, [r3, #4]
 80022c6:	680e      	ldr	r6, [r1, #0]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80022c8:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80022ca:	4330      	orrs	r0, r6
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80022cc:	2680      	movs	r6, #128	; 0x80
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80022ce:	6058      	str	r0, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80022d0:	6898      	ldr	r0, [r3, #8]
 80022d2:	43b0      	bics	r0, r6
 80022d4:	6098      	str	r0, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80022d6:	6898      	ldr	r0, [r3, #8]
 80022d8:	4301      	orrs	r1, r0
 80022da:	6099      	str	r1, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 80022dc:	2301      	movs	r3, #1
 80022de:	5553      	strb	r3, [r2, r5]
  __HAL_UNLOCK(htim);
 80022e0:	2300      	movs	r3, #0
  return HAL_OK;
 80022e2:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 80022e4:	5513      	strb	r3, [r2, r4]
}
 80022e6:	bd70      	pop	{r4, r5, r6, pc}

080022e8 <HAL_TIMEx_ConfigBreakDeadTime>:
{
 80022e8:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 80022ea:	243c      	movs	r4, #60	; 0x3c
 80022ec:	5d03      	ldrb	r3, [r0, r4]
{
 80022ee:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 80022f0:	2002      	movs	r0, #2
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d024      	beq.n	8002340 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  htim->State = HAL_TIM_STATE_BUSY;
 80022f6:	253d      	movs	r5, #61	; 0x3d
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80022f8:	4b12      	ldr	r3, [pc, #72]	; (8002344 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>)
  htim->State = HAL_TIM_STATE_BUSY;
 80022fa:	5550      	strb	r0, [r2, r5]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80022fc:	68c8      	ldr	r0, [r1, #12]
 80022fe:	4003      	ands	r3, r0
 8002300:	6888      	ldr	r0, [r1, #8]
 8002302:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002304:	4810      	ldr	r0, [pc, #64]	; (8002348 <HAL_TIMEx_ConfigBreakDeadTime+0x60>)
 8002306:	4003      	ands	r3, r0
 8002308:	6848      	ldr	r0, [r1, #4]
 800230a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800230c:	480f      	ldr	r0, [pc, #60]	; (800234c <HAL_TIMEx_ConfigBreakDeadTime+0x64>)
 800230e:	4003      	ands	r3, r0
 8002310:	6808      	ldr	r0, [r1, #0]
 8002312:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002314:	480e      	ldr	r0, [pc, #56]	; (8002350 <HAL_TIMEx_ConfigBreakDeadTime+0x68>)
 8002316:	4003      	ands	r3, r0
 8002318:	6908      	ldr	r0, [r1, #16]
 800231a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800231c:	480d      	ldr	r0, [pc, #52]	; (8002354 <HAL_TIMEx_ConfigBreakDeadTime+0x6c>)
 800231e:	4003      	ands	r3, r0
 8002320:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002322:	6989      	ldr	r1, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002324:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002326:	480c      	ldr	r0, [pc, #48]	; (8002358 <HAL_TIMEx_ConfigBreakDeadTime+0x70>)
 8002328:	4003      	ands	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 800232a:	480c      	ldr	r0, [pc, #48]	; (800235c <HAL_TIMEx_ConfigBreakDeadTime+0x74>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800232c:	430b      	orrs	r3, r1
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 800232e:	4003      	ands	r3, r0
 8002330:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 8002332:	6811      	ldr	r1, [r2, #0]
  return HAL_OK;
 8002334:	2000      	movs	r0, #0
  htim->Instance->BDTR = tmpbdtr;
 8002336:	644b      	str	r3, [r1, #68]	; 0x44
  htim->State = HAL_TIM_STATE_READY;
 8002338:	2301      	movs	r3, #1
 800233a:	5553      	strb	r3, [r2, r5]
  __HAL_UNLOCK(htim);
 800233c:	2300      	movs	r3, #0
 800233e:	5513      	strb	r3, [r2, r4]
}
 8002340:	bd30      	pop	{r4, r5, pc}
 8002342:	46c0      	nop			; (mov r8, r8)
 8002344:	fffffcff 	.word	0xfffffcff
 8002348:	fffffbff 	.word	0xfffffbff
 800234c:	fffff7ff 	.word	0xfffff7ff
 8002350:	ffffefff 	.word	0xffffefff
 8002354:	ffffdfff 	.word	0xffffdfff
 8002358:	ffffbfff 	.word	0xffffbfff
 800235c:	ffff7fff 	.word	0xffff7fff

08002360 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002362:	46de      	mov	lr, fp
 8002364:	464e      	mov	r6, r9
 8002366:	4657      	mov	r7, sl
 8002368:	4645      	mov	r5, r8
 800236a:	b5e0      	push	{r5, r6, r7, lr}
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800236c:	680e      	ldr	r6, [r1, #0]
{
 800236e:	468b      	mov	fp, r1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002370:	2e00      	cmp	r6, #0
 8002372:	d100      	bne.n	8002376 <LL_GPIO_Init+0x16>
 8002374:	e073      	b.n	800245e <LL_GPIO_Init+0xfe>
 8002376:	684b      	ldr	r3, [r1, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	469c      	mov	ip, r3
 800237c:	2301      	movs	r3, #1
 800237e:	425b      	negs	r3, r3
 8002380:	4463      	add	r3, ip
 8002382:	4698      	mov	r8, r3
 8002384:	e00a      	b.n	800239c <LL_GPIO_Init+0x3c>
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8002386:	4659      	mov	r1, fp
 8002388:	6909      	ldr	r1, [r1, #16]
 800238a:	68c3      	ldr	r3, [r0, #12]
 800238c:	434d      	muls	r5, r1
 800238e:	401c      	ands	r4, r3
 8002390:	432c      	orrs	r4, r5
 8002392:	60c4      	str	r4, [r0, #12]
 8002394:	0033      	movs	r3, r6
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
      }
    }
    pinpos++;
 8002396:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002398:	40d3      	lsrs	r3, r2
 800239a:	d042      	beq.n	8002422 <LL_GPIO_Init+0xc2>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800239c:	2301      	movs	r3, #1
 800239e:	4093      	lsls	r3, r2
 80023a0:	4033      	ands	r3, r6
    if (currentpin)
 80023a2:	d0f7      	beq.n	8002394 <LL_GPIO_Init+0x34>
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 80023a4:	001d      	movs	r5, r3
 80023a6:	6804      	ldr	r4, [r0, #0]
 80023a8:	435d      	muls	r5, r3
 80023aa:	46a1      	mov	r9, r4
 80023ac:	006c      	lsls	r4, r5, #1
 80023ae:	1964      	adds	r4, r4, r5
 80023b0:	464f      	mov	r7, r9
 80023b2:	43e4      	mvns	r4, r4
 80023b4:	4027      	ands	r7, r4
 80023b6:	46b9      	mov	r9, r7
 80023b8:	4667      	mov	r7, ip
 80023ba:	436f      	muls	r7, r5
 80023bc:	46ba      	mov	sl, r7
 80023be:	464f      	mov	r7, r9
 80023c0:	4651      	mov	r1, sl
 80023c2:	430f      	orrs	r7, r1
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80023c4:	4641      	mov	r1, r8
 80023c6:	6007      	str	r7, [r0, #0]
 80023c8:	2901      	cmp	r1, #1
 80023ca:	d8dc      	bhi.n	8002386 <LL_GPIO_Init+0x26>
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 80023cc:	6881      	ldr	r1, [r0, #8]
 80023ce:	468a      	mov	sl, r1
 80023d0:	4659      	mov	r1, fp
 80023d2:	6889      	ldr	r1, [r1, #8]
 80023d4:	4369      	muls	r1, r5
 80023d6:	4689      	mov	r9, r1
 80023d8:	4651      	mov	r1, sl
 80023da:	4021      	ands	r1, r4
 80023dc:	468a      	mov	sl, r1
 80023de:	4649      	mov	r1, r9
 80023e0:	4657      	mov	r7, sl
 80023e2:	4339      	orrs	r1, r7
 80023e4:	6081      	str	r1, [r0, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 80023e6:	68c1      	ldr	r1, [r0, #12]
 80023e8:	468a      	mov	sl, r1
 80023ea:	4659      	mov	r1, fp
 80023ec:	6909      	ldr	r1, [r1, #16]
 80023ee:	4369      	muls	r1, r5
 80023f0:	4689      	mov	r9, r1
 80023f2:	4651      	mov	r1, sl
 80023f4:	400c      	ands	r4, r1
 80023f6:	4649      	mov	r1, r9
 80023f8:	430c      	orrs	r4, r1
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80023fa:	4661      	mov	r1, ip
 80023fc:	60c4      	str	r4, [r0, #12]
 80023fe:	2902      	cmp	r1, #2
 8002400:	d1c8      	bne.n	8002394 <LL_GPIO_Init+0x34>
        if (currentpin < LL_GPIO_PIN_8)
 8002402:	2bff      	cmp	r3, #255	; 0xff
 8002404:	d81e      	bhi.n	8002444 <LL_GPIO_Init+0xe4>
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8002406:	4659      	mov	r1, fp
 8002408:	436d      	muls	r5, r5
 800240a:	6949      	ldr	r1, [r1, #20]
 800240c:	012c      	lsls	r4, r5, #4
 800240e:	1b64      	subs	r4, r4, r5
 8002410:	434d      	muls	r5, r1
 8002412:	6a03      	ldr	r3, [r0, #32]
    pinpos++;
 8002414:	3201      	adds	r2, #1
 8002416:	43a3      	bics	r3, r4
 8002418:	431d      	orrs	r5, r3
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800241a:	0033      	movs	r3, r6
 800241c:	6205      	str	r5, [r0, #32]
 800241e:	40d3      	lsrs	r3, r2
 8002420:	d1bc      	bne.n	800239c <LL_GPIO_Init+0x3c>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002422:	4643      	mov	r3, r8
 8002424:	2b01      	cmp	r3, #1
 8002426:	d806      	bhi.n	8002436 <LL_GPIO_Init+0xd6>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002428:	465a      	mov	r2, fp
 800242a:	6843      	ldr	r3, [r0, #4]
 800242c:	68d2      	ldr	r2, [r2, #12]
 800242e:	43b3      	bics	r3, r6
 8002430:	4356      	muls	r6, r2
 8002432:	431e      	orrs	r6, r3
 8002434:	6046      	str	r6, [r0, #4]
    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);

  }
  return (SUCCESS);
}
 8002436:	2001      	movs	r0, #1
 8002438:	bc3c      	pop	{r2, r3, r4, r5}
 800243a:	4690      	mov	r8, r2
 800243c:	4699      	mov	r9, r3
 800243e:	46a2      	mov	sl, r4
 8002440:	46ab      	mov	fp, r5
 8002442:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8002444:	4659      	mov	r1, fp
 8002446:	0a1b      	lsrs	r3, r3, #8
 8002448:	435b      	muls	r3, r3
 800244a:	435b      	muls	r3, r3
 800244c:	6949      	ldr	r1, [r1, #20]
 800244e:	011d      	lsls	r5, r3, #4
 8002450:	1aed      	subs	r5, r5, r3
 8002452:	434b      	muls	r3, r1
 8002454:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8002456:	43ac      	bics	r4, r5
 8002458:	4323      	orrs	r3, r4
 800245a:	6243      	str	r3, [r0, #36]	; 0x24
 800245c:	e79a      	b.n	8002394 <LL_GPIO_Init+0x34>
 800245e:	684b      	ldr	r3, [r1, #4]
 8002460:	3b01      	subs	r3, #1
 8002462:	4698      	mov	r8, r3
 8002464:	e7dd      	b.n	8002422 <LL_GPIO_Init+0xc2>
 8002466:	46c0      	nop			; (mov r8, r8)

08002468 <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 8002468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800246a:	4647      	mov	r7, r8
 800246c:	46ce      	mov	lr, r9
  uint16_t pagestatus0 = 6, pagestatus1 = 6;
  uint16_t varidx = 0;
  uint16_t eepromstatus = 0, readstatus = 0;
  int16_t x = -1;
  HAL_StatusTypeDef  flashstatus;
  uint32_t page_error = 0;
 800246e:	2500      	movs	r5, #0
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);

  /* Fill EraseInit structure*/
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
  s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
  s_eraseinit.NbPages     = 1;
 8002470:	2601      	movs	r6, #1
{
 8002472:	b580      	push	{r7, lr}
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002474:	49a5      	ldr	r1, [pc, #660]	; (800270c <EE_Init+0x2a4>)
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002476:	4fa6      	ldr	r7, [pc, #664]	; (8002710 <EE_Init+0x2a8>)
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002478:	880b      	ldrh	r3, [r1, #0]
  
  /* Check for invalid header states and repair if necessary */
  switch (pagestatus0)
 800247a:	48a6      	ldr	r0, [pc, #664]	; (8002714 <EE_Init+0x2ac>)
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800247c:	883c      	ldrh	r4, [r7, #0]
{
 800247e:	b089      	sub	sp, #36	; 0x24
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002480:	b29b      	uxth	r3, r3
  uint32_t page_error = 0;
 8002482:	9500      	str	r5, [sp, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002484:	b2a4      	uxth	r4, r4
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8002486:	9502      	str	r5, [sp, #8]
  s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 8002488:	9103      	str	r1, [sp, #12]
  s_eraseinit.NbPages     = 1;
 800248a:	9604      	str	r6, [sp, #16]
  switch (pagestatus0)
 800248c:	4283      	cmp	r3, r0
 800248e:	d100      	bne.n	8002492 <EE_Init+0x2a>
 8002490:	e096      	b.n	80025c0 <EE_Init+0x158>
 8002492:	4aa1      	ldr	r2, [pc, #644]	; (8002718 <EE_Init+0x2b0>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d022      	beq.n	80024de <EE_Init+0x76>
 8002498:	2b00      	cmp	r3, #0
 800249a:	d03e      	beq.n	800251a <EE_Init+0xb2>
{
  HAL_StatusTypeDef flashstatus = HAL_OK;
  uint32_t page_error = 0;
  FLASH_EraseInitTypeDef s_eraseinit;

  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 800249c:	a805      	add	r0, sp, #20
  uint32_t page_error = 0;
 800249e:	9501      	str	r5, [sp, #4]
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80024a0:	9505      	str	r5, [sp, #20]
  s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 80024a2:	6041      	str	r1, [r0, #4]
  s_eraseinit.NbPages     = 1;
 80024a4:	6086      	str	r6, [r0, #8]
  while (Address <= PAGE0_END_ADDRESS)
 80024a6:	4c9d      	ldr	r4, [pc, #628]	; (800271c <EE_Init+0x2b4>)
 80024a8:	e002      	b.n	80024b0 <EE_Init+0x48>
    Address = Address + 4;
 80024aa:	3104      	adds	r1, #4
  while (Address <= PAGE0_END_ADDRESS)
 80024ac:	42a1      	cmp	r1, r4
 80024ae:	d007      	beq.n	80024c0 <EE_Init+0x58>
    addressvalue = (*(__IO uint16_t*)Address);
 80024b0:	880b      	ldrh	r3, [r1, #0]
    if (addressvalue != ERASED)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d0f9      	beq.n	80024aa <EE_Init+0x42>
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
  {
    flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error); 
 80024b6:	a901      	add	r1, sp, #4
 80024b8:	f7fe fcec 	bl	8000e94 <HAL_FLASHEx_Erase>
    /* If erase operation was failed, a Flash error code is returned */
    if (flashstatus != HAL_OK)
 80024bc:	2800      	cmp	r0, #0
 80024be:	d12a      	bne.n	8002516 <EE_Init+0xae>
    {
      return flashstatus;
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 80024c0:	2200      	movs	r2, #0
 80024c2:	2300      	movs	r3, #0
 80024c4:	4991      	ldr	r1, [pc, #580]	; (800270c <EE_Init+0x2a4>)
 80024c6:	2001      	movs	r0, #1
 80024c8:	f7fe fbaa 	bl	8000c20 <HAL_FLASH_Program>
  /* If program operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 80024cc:	2800      	cmp	r0, #0
 80024ce:	d122      	bne.n	8002516 <EE_Init+0xae>
  return HAL_OK;
 80024d0:	2400      	movs	r4, #0
}
 80024d2:	0020      	movs	r0, r4
 80024d4:	b009      	add	sp, #36	; 0x24
 80024d6:	bc0c      	pop	{r2, r3}
 80024d8:	4690      	mov	r8, r2
 80024da:	4699      	mov	r9, r3
 80024dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pagestatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 80024de:	2c00      	cmp	r4, #0
 80024e0:	d100      	bne.n	80024e4 <EE_Init+0x7c>
 80024e2:	e0a0      	b.n	8002626 <EE_Init+0x1be>
      else if (pagestatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 80024e4:	4284      	cmp	r4, r0
 80024e6:	d000      	beq.n	80024ea <EE_Init+0x82>
 80024e8:	e101      	b.n	80026ee <EE_Init+0x286>
  while (Address <= PAGE0_END_ADDRESS)
 80024ea:	488c      	ldr	r0, [pc, #560]	; (800271c <EE_Init+0x2b4>)
 80024ec:	e002      	b.n	80024f4 <EE_Init+0x8c>
    Address = Address + 4;
 80024ee:	3104      	adds	r1, #4
  while (Address <= PAGE0_END_ADDRESS)
 80024f0:	4281      	cmp	r1, r0
 80024f2:	d008      	beq.n	8002506 <EE_Init+0x9e>
    addressvalue = (*(__IO uint16_t*)Address);
 80024f4:	880a      	ldrh	r2, [r1, #0]
    if (addressvalue != ERASED)
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d0f9      	beq.n	80024ee <EE_Init+0x86>
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 80024fa:	4669      	mov	r1, sp
 80024fc:	a802      	add	r0, sp, #8
 80024fe:	f7fe fcc9 	bl	8000e94 <HAL_FLASHEx_Erase>
          if (flashstatus != HAL_OK)
 8002502:	2800      	cmp	r0, #0
 8002504:	d107      	bne.n	8002516 <EE_Init+0xae>
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 8002506:	2200      	movs	r2, #0
 8002508:	2300      	movs	r3, #0
 800250a:	4981      	ldr	r1, [pc, #516]	; (8002710 <EE_Init+0x2a8>)
 800250c:	2001      	movs	r0, #1
 800250e:	f7fe fb87 	bl	8000c20 <HAL_FLASH_Program>
        if (flashstatus != HAL_OK)
 8002512:	2800      	cmp	r0, #0
 8002514:	d0dc      	beq.n	80024d0 <EE_Init+0x68>
        return flashstatus;
 8002516:	b284      	uxth	r4, r0
 8002518:	e7db      	b.n	80024d2 <EE_Init+0x6a>
      if (pagestatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 800251a:	2c00      	cmp	r4, #0
 800251c:	d100      	bne.n	8002520 <EE_Init+0xb8>
 800251e:	e092      	b.n	8002646 <EE_Init+0x1de>
      else if (pagestatus1 == ERASED) /* Page0 valid, Page1 erased */
 8002520:	4294      	cmp	r4, r2
 8002522:	d0d5      	beq.n	80024d0 <EE_Init+0x68>
 8002524:	2301      	movs	r3, #1
 8002526:	425b      	negs	r3, r3
 8002528:	4698      	mov	r8, r3
      *Data = (*(__IO uint16_t*)(address - 2));
 800252a:	4b7d      	ldr	r3, [pc, #500]	; (8002720 <EE_Init+0x2b8>)
 800252c:	2600      	movs	r6, #0
 800252e:	4699      	mov	r9, r3
 8002530:	4f7c      	ldr	r7, [pc, #496]	; (8002724 <EE_Init+0x2bc>)
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 8002532:	4b7d      	ldr	r3, [pc, #500]	; (8002728 <EE_Init+0x2c0>)
 8002534:	0072      	lsls	r2, r6, #1
 8002536:	881b      	ldrh	r3, [r3, #0]
 8002538:	5abc      	ldrh	r4, [r7, r2]
 800253a:	42a3      	cmp	r3, r4
 800253c:	d100      	bne.n	8002540 <EE_Init+0xd8>
 800253e:	e0be      	b.n	80026be <EE_Init+0x256>
          if (varidx != x)
 8002540:	4546      	cmp	r6, r8
 8002542:	d01a      	beq.n	800257a <EE_Init+0x112>
static uint16_t EE_FindValidPage(uint8_t Operation)
{
  uint16_t pagestatus0 = 6, pagestatus1 = 6;

  /* Get Page0 actual status */
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002544:	4b71      	ldr	r3, [pc, #452]	; (800270c <EE_Init+0x2a4>)
 8002546:	881a      	ldrh	r2, [r3, #0]

  /* Get Page1 actual status */
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002548:	4b71      	ldr	r3, [pc, #452]	; (8002710 <EE_Init+0x2a8>)
 800254a:	881b      	ldrh	r3, [r3, #0]
 800254c:	b29b      	uxth	r3, r3
      {
        return NO_VALID_PAGE;   /* No valid Page */
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (pagestatus0 == VALID_PAGE)
 800254e:	2a00      	cmp	r2, #0
 8002550:	d100      	bne.n	8002554 <EE_Init+0xec>
 8002552:	e0b7      	b.n	80026c4 <EE_Init+0x25c>
      {
        return PAGE0;           /* Page0 valid */
      }
      else if (pagestatus1 == VALID_PAGE)
 8002554:	2b00      	cmp	r3, #0
 8002556:	d000      	beq.n	800255a <EE_Init+0xf2>
 8002558:	e11f      	b.n	800279a <EE_Init+0x332>
 800255a:	4b74      	ldr	r3, [pc, #464]	; (800272c <EE_Init+0x2c4>)
 800255c:	4974      	ldr	r1, [pc, #464]	; (8002730 <EE_Init+0x2c8>)
 800255e:	001a      	movs	r2, r3
 8002560:	4874      	ldr	r0, [pc, #464]	; (8002734 <EE_Init+0x2cc>)
    addressvalue = (*(__IO uint16_t*)address);
 8002562:	881b      	ldrh	r3, [r3, #0]
    if (addressvalue == VirtAddress)
 8002564:	429c      	cmp	r4, r3
 8002566:	d105      	bne.n	8002574 <EE_Init+0x10c>
 8002568:	e0ef      	b.n	800274a <EE_Init+0x2e2>
    addressvalue = (*(__IO uint16_t*)address);
 800256a:	8819      	ldrh	r1, [r3, #0]
    if (addressvalue == VirtAddress)
 800256c:	428c      	cmp	r4, r1
 800256e:	d100      	bne.n	8002572 <EE_Init+0x10a>
 8002570:	e0ea      	b.n	8002748 <EE_Init+0x2e0>
 8002572:	001a      	movs	r2, r3
      address = address - 4;
 8002574:	1f13      	subs	r3, r2, #4
  while (address > (PageStartAddress + 2))
 8002576:	4283      	cmp	r3, r0
 8002578:	d8f7      	bhi.n	800256a <EE_Init+0x102>
 800257a:	3601      	adds	r6, #1
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 800257c:	2e03      	cmp	r6, #3
 800257e:	d1d8      	bne.n	8002532 <EE_Init+0xca>
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 8002580:	2200      	movs	r2, #0
 8002582:	2300      	movs	r3, #0
 8002584:	4962      	ldr	r1, [pc, #392]	; (8002710 <EE_Init+0x2a8>)
 8002586:	2001      	movs	r0, #1
 8002588:	f7fe fb4a 	bl	8000c20 <HAL_FLASH_Program>
        if (flashstatus != HAL_OK)
 800258c:	2800      	cmp	r0, #0
 800258e:	d1c2      	bne.n	8002516 <EE_Init+0xae>
        s_eraseinit.NbPages     = 1;
 8002590:	2201      	movs	r2, #1
        s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 8002592:	4b5e      	ldr	r3, [pc, #376]	; (800270c <EE_Init+0x2a4>)
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8002594:	9002      	str	r0, [sp, #8]
        s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 8002596:	9303      	str	r3, [sp, #12]
        s_eraseinit.NbPages     = 1;
 8002598:	9204      	str	r2, [sp, #16]
    if (addressvalue != ERASED)
 800259a:	495f      	ldr	r1, [pc, #380]	; (8002718 <EE_Init+0x2b0>)
  while (Address <= PAGE0_END_ADDRESS)
 800259c:	485f      	ldr	r0, [pc, #380]	; (800271c <EE_Init+0x2b4>)
 800259e:	e003      	b.n	80025a8 <EE_Init+0x140>
    Address = Address + 4;
 80025a0:	3304      	adds	r3, #4
  while (Address <= PAGE0_END_ADDRESS)
 80025a2:	4283      	cmp	r3, r0
 80025a4:	d100      	bne.n	80025a8 <EE_Init+0x140>
 80025a6:	e793      	b.n	80024d0 <EE_Init+0x68>
    addressvalue = (*(__IO uint16_t*)Address);
 80025a8:	881a      	ldrh	r2, [r3, #0]
    if (addressvalue != ERASED)
 80025aa:	428a      	cmp	r2, r1
 80025ac:	d0f8      	beq.n	80025a0 <EE_Init+0x138>
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 80025ae:	4669      	mov	r1, sp
 80025b0:	a802      	add	r0, sp, #8
 80025b2:	f7fe fc6f 	bl	8000e94 <HAL_FLASHEx_Erase>
          if (flashstatus != HAL_OK)
 80025b6:	2800      	cmp	r0, #0
 80025b8:	d100      	bne.n	80025bc <EE_Init+0x154>
 80025ba:	e789      	b.n	80024d0 <EE_Init+0x68>
        return flashstatus;
 80025bc:	b284      	uxth	r4, r0
 80025be:	e788      	b.n	80024d2 <EE_Init+0x6a>
      if (pagestatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 80025c0:	2c00      	cmp	r4, #0
 80025c2:	d11d      	bne.n	8002600 <EE_Init+0x198>
 80025c4:	2301      	movs	r3, #1
 80025c6:	2600      	movs	r6, #0
 80025c8:	425b      	negs	r3, r3
 80025ca:	4698      	mov	r8, r3
      *Data = (*(__IO uint16_t*)(address - 2));
 80025cc:	4b54      	ldr	r3, [pc, #336]	; (8002720 <EE_Init+0x2b8>)
 80025ce:	4f55      	ldr	r7, [pc, #340]	; (8002724 <EE_Init+0x2bc>)
 80025d0:	4699      	mov	r9, r3
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 80025d2:	4b59      	ldr	r3, [pc, #356]	; (8002738 <EE_Init+0x2d0>)
 80025d4:	0072      	lsls	r2, r6, #1
 80025d6:	881b      	ldrh	r3, [r3, #0]
 80025d8:	5abc      	ldrh	r4, [r7, r2]
 80025da:	42a3      	cmp	r3, r4
 80025dc:	d06c      	beq.n	80026b8 <EE_Init+0x250>
          if (varidx != x)
 80025de:	4546      	cmp	r6, r8
 80025e0:	d060      	beq.n	80026a4 <EE_Init+0x23c>
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80025e2:	4b4a      	ldr	r3, [pc, #296]	; (800270c <EE_Init+0x2a4>)
 80025e4:	881a      	ldrh	r2, [r3, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80025e6:	4b4a      	ldr	r3, [pc, #296]	; (8002710 <EE_Init+0x2a8>)
 80025e8:	881b      	ldrh	r3, [r3, #0]
 80025ea:	b29b      	uxth	r3, r3
      if (pagestatus0 == VALID_PAGE)
 80025ec:	2a00      	cmp	r2, #0
 80025ee:	d06e      	beq.n	80026ce <EE_Init+0x266>
      else if (pagestatus1 == VALID_PAGE)
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d000      	beq.n	80025f6 <EE_Init+0x18e>
 80025f4:	e0fc      	b.n	80027f0 <EE_Init+0x388>
 80025f6:	4b4d      	ldr	r3, [pc, #308]	; (800272c <EE_Init+0x2c4>)
 80025f8:	494d      	ldr	r1, [pc, #308]	; (8002730 <EE_Init+0x2c8>)
 80025fa:	001a      	movs	r2, r3
 80025fc:	484d      	ldr	r0, [pc, #308]	; (8002734 <EE_Init+0x2cc>)
 80025fe:	e06a      	b.n	80026d6 <EE_Init+0x26e>
      else if (pagestatus1 == ERASED) /* Page0 receive, Page1 erased */
 8002600:	4a45      	ldr	r2, [pc, #276]	; (8002718 <EE_Init+0x2b0>)
 8002602:	4294      	cmp	r4, r2
 8002604:	d100      	bne.n	8002608 <EE_Init+0x1a0>
 8002606:	e0f6      	b.n	80027f6 <EE_Init+0x38e>
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8002608:	a805      	add	r0, sp, #20
  uint32_t page_error = 0;
 800260a:	9501      	str	r5, [sp, #4]
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 800260c:	9505      	str	r5, [sp, #20]
  s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 800260e:	6041      	str	r1, [r0, #4]
  s_eraseinit.NbPages     = 1;
 8002610:	6086      	str	r6, [r0, #8]
  while (Address <= PAGE0_END_ADDRESS)
 8002612:	4c42      	ldr	r4, [pc, #264]	; (800271c <EE_Init+0x2b4>)
 8002614:	e003      	b.n	800261e <EE_Init+0x1b6>
    Address = Address + 4;
 8002616:	3104      	adds	r1, #4
  while (Address <= PAGE0_END_ADDRESS)
 8002618:	42a1      	cmp	r1, r4
 800261a:	d100      	bne.n	800261e <EE_Init+0x1b6>
 800261c:	e750      	b.n	80024c0 <EE_Init+0x58>
    addressvalue = (*(__IO uint16_t*)Address);
 800261e:	880b      	ldrh	r3, [r1, #0]
    if (addressvalue != ERASED)
 8002620:	4293      	cmp	r3, r2
 8002622:	d0f8      	beq.n	8002616 <EE_Init+0x1ae>
 8002624:	e747      	b.n	80024b6 <EE_Init+0x4e>
  while (Address <= PAGE0_END_ADDRESS)
 8002626:	483d      	ldr	r0, [pc, #244]	; (800271c <EE_Init+0x2b4>)
 8002628:	e003      	b.n	8002632 <EE_Init+0x1ca>
    Address = Address + 4;
 800262a:	3104      	adds	r1, #4
  while (Address <= PAGE0_END_ADDRESS)
 800262c:	4281      	cmp	r1, r0
 800262e:	d100      	bne.n	8002632 <EE_Init+0x1ca>
 8002630:	e74e      	b.n	80024d0 <EE_Init+0x68>
    addressvalue = (*(__IO uint16_t*)Address);
 8002632:	880a      	ldrh	r2, [r1, #0]
    if (addressvalue != ERASED)
 8002634:	429a      	cmp	r2, r3
 8002636:	d0f8      	beq.n	800262a <EE_Init+0x1c2>
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8002638:	4669      	mov	r1, sp
 800263a:	a802      	add	r0, sp, #8
 800263c:	f7fe fc2a 	bl	8000e94 <HAL_FLASHEx_Erase>
          if (flashstatus != HAL_OK)
 8002640:	2800      	cmp	r0, #0
 8002642:	d1bb      	bne.n	80025bc <EE_Init+0x154>
 8002644:	e744      	b.n	80024d0 <EE_Init+0x68>
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8002646:	a805      	add	r0, sp, #20
  uint32_t page_error = 0;
 8002648:	9401      	str	r4, [sp, #4]
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 800264a:	9405      	str	r4, [sp, #20]
  s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 800264c:	6041      	str	r1, [r0, #4]
  s_eraseinit.NbPages     = 1;
 800264e:	6086      	str	r6, [r0, #8]
  while (Address <= PAGE0_END_ADDRESS)
 8002650:	4d32      	ldr	r5, [pc, #200]	; (800271c <EE_Init+0x2b4>)
 8002652:	e002      	b.n	800265a <EE_Init+0x1f2>
    Address = Address + 4;
 8002654:	3104      	adds	r1, #4
  while (Address <= PAGE0_END_ADDRESS)
 8002656:	42a9      	cmp	r1, r5
 8002658:	d008      	beq.n	800266c <EE_Init+0x204>
    addressvalue = (*(__IO uint16_t*)Address);
 800265a:	880b      	ldrh	r3, [r1, #0]
    if (addressvalue != ERASED)
 800265c:	4293      	cmp	r3, r2
 800265e:	d0f9      	beq.n	8002654 <EE_Init+0x1ec>
    flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error); 
 8002660:	a901      	add	r1, sp, #4
 8002662:	f7fe fc17 	bl	8000e94 <HAL_FLASHEx_Erase>
    if (flashstatus != HAL_OK)
 8002666:	2800      	cmp	r0, #0
 8002668:	d000      	beq.n	800266c <EE_Init+0x204>
 800266a:	e754      	b.n	8002516 <EE_Init+0xae>
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 800266c:	2200      	movs	r2, #0
 800266e:	2300      	movs	r3, #0
 8002670:	4926      	ldr	r1, [pc, #152]	; (800270c <EE_Init+0x2a4>)
 8002672:	2001      	movs	r0, #1
 8002674:	f7fe fad4 	bl	8000c20 <HAL_FLASH_Program>
  if (flashstatus != HAL_OK)
 8002678:	2800      	cmp	r0, #0
 800267a:	d100      	bne.n	800267e <EE_Init+0x216>
 800267c:	e729      	b.n	80024d2 <EE_Init+0x6a>
 800267e:	e74a      	b.n	8002516 <EE_Init+0xae>
  {
    /* Verify if address and address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
    {
      /* Set variable data */
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, Data);       
 8002680:	2300      	movs	r3, #0
 8002682:	0029      	movs	r1, r5
 8002684:	2001      	movs	r0, #1
 8002686:	f7fe facb 	bl	8000c20 <HAL_FLASH_Program>
      /* If program operation was failed, a Flash error code is returned */
      if (flashstatus != HAL_OK)
 800268a:	2800      	cmp	r0, #0
 800268c:	d000      	beq.n	8002690 <EE_Init+0x228>
 800268e:	e742      	b.n	8002516 <EE_Init+0xae>
      {
        return flashstatus;
      }
      /* Set variable virtual address */
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, VirtAddress);       
 8002690:	0022      	movs	r2, r4
 8002692:	1ca9      	adds	r1, r5, #2
 8002694:	2300      	movs	r3, #0
 8002696:	2001      	movs	r0, #1
 8002698:	f7fe fac2 	bl	8000c20 <HAL_FLASH_Program>
      /* Return program operation status */
      return flashstatus;
 800269c:	b284      	uxth	r4, r0
              if (eepromstatus != HAL_OK)
 800269e:	2c00      	cmp	r4, #0
 80026a0:	d000      	beq.n	80026a4 <EE_Init+0x23c>
 80026a2:	e716      	b.n	80024d2 <EE_Init+0x6a>
 80026a4:	3601      	adds	r6, #1
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 80026a6:	2e03      	cmp	r6, #3
 80026a8:	d100      	bne.n	80026ac <EE_Init+0x244>
 80026aa:	e709      	b.n	80024c0 <EE_Init+0x58>
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 80026ac:	4b22      	ldr	r3, [pc, #136]	; (8002738 <EE_Init+0x2d0>)
 80026ae:	0072      	lsls	r2, r6, #1
 80026b0:	881b      	ldrh	r3, [r3, #0]
 80026b2:	5abc      	ldrh	r4, [r7, r2]
 80026b4:	42a3      	cmp	r3, r4
 80026b6:	d192      	bne.n	80025de <EE_Init+0x176>
            x = varidx;
 80026b8:	b233      	sxth	r3, r6
 80026ba:	4698      	mov	r8, r3
 80026bc:	e78f      	b.n	80025de <EE_Init+0x176>
            x = varidx;
 80026be:	b233      	sxth	r3, r6
 80026c0:	4698      	mov	r8, r3
 80026c2:	e73d      	b.n	8002540 <EE_Init+0xd8>
      if (pagestatus0 == VALID_PAGE)
 80026c4:	4b1d      	ldr	r3, [pc, #116]	; (800273c <EE_Init+0x2d4>)
 80026c6:	491e      	ldr	r1, [pc, #120]	; (8002740 <EE_Init+0x2d8>)
 80026c8:	001a      	movs	r2, r3
 80026ca:	481e      	ldr	r0, [pc, #120]	; (8002744 <EE_Init+0x2dc>)
 80026cc:	e749      	b.n	8002562 <EE_Init+0xfa>
 80026ce:	4b1b      	ldr	r3, [pc, #108]	; (800273c <EE_Init+0x2d4>)
 80026d0:	491b      	ldr	r1, [pc, #108]	; (8002740 <EE_Init+0x2d8>)
 80026d2:	001a      	movs	r2, r3
 80026d4:	481b      	ldr	r0, [pc, #108]	; (8002744 <EE_Init+0x2dc>)
    addressvalue = (*(__IO uint16_t*)address);
 80026d6:	881b      	ldrh	r3, [r3, #0]
    if (addressvalue == VirtAddress)
 80026d8:	429c      	cmp	r4, r3
 80026da:	d104      	bne.n	80026e6 <EE_Init+0x27e>
 80026dc:	e061      	b.n	80027a2 <EE_Init+0x33a>
    addressvalue = (*(__IO uint16_t*)address);
 80026de:	8819      	ldrh	r1, [r3, #0]
    if (addressvalue == VirtAddress)
 80026e0:	428c      	cmp	r4, r1
 80026e2:	d05d      	beq.n	80027a0 <EE_Init+0x338>
 80026e4:	001a      	movs	r2, r3
      address = address - 4;
 80026e6:	1f13      	subs	r3, r2, #4
  while (address > (PageStartAddress + 2))
 80026e8:	4298      	cmp	r0, r3
 80026ea:	d3f8      	bcc.n	80026de <EE_Init+0x276>
 80026ec:	e7da      	b.n	80026a4 <EE_Init+0x23c>
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80026ee:	a805      	add	r0, sp, #20
  uint32_t page_error = 0;
 80026f0:	9501      	str	r5, [sp, #4]
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80026f2:	9505      	str	r5, [sp, #20]
  s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 80026f4:	6041      	str	r1, [r0, #4]
  s_eraseinit.NbPages     = 1;
 80026f6:	6086      	str	r6, [r0, #8]
  while (Address <= PAGE0_END_ADDRESS)
 80026f8:	4c08      	ldr	r4, [pc, #32]	; (800271c <EE_Init+0x2b4>)
 80026fa:	e003      	b.n	8002704 <EE_Init+0x29c>
    Address = Address + 4;
 80026fc:	3104      	adds	r1, #4
  while (Address <= PAGE0_END_ADDRESS)
 80026fe:	42a1      	cmp	r1, r4
 8002700:	d100      	bne.n	8002704 <EE_Init+0x29c>
 8002702:	e6dd      	b.n	80024c0 <EE_Init+0x58>
    addressvalue = (*(__IO uint16_t*)Address);
 8002704:	880a      	ldrh	r2, [r1, #0]
    if (addressvalue != ERASED)
 8002706:	429a      	cmp	r2, r3
 8002708:	d0f8      	beq.n	80026fc <EE_Init+0x294>
 800270a:	e6d4      	b.n	80024b6 <EE_Init+0x4e>
 800270c:	08007000 	.word	0x08007000
 8002710:	08007800 	.word	0x08007800
 8002714:	0000eeee 	.word	0x0000eeee
 8002718:	0000ffff 	.word	0x0000ffff
 800271c:	08007400 	.word	0x08007400
 8002720:	2000007c 	.word	0x2000007c
 8002724:	20000000 	.word	0x20000000
 8002728:	08007806 	.word	0x08007806
 800272c:	0800f3fe 	.word	0x0800f3fe
 8002730:	0800f3fc 	.word	0x0800f3fc
 8002734:	0800f002 	.word	0x0800f002
 8002738:	08007006 	.word	0x08007006
 800273c:	080073fe 	.word	0x080073fe
 8002740:	080073fc 	.word	0x080073fc
 8002744:	08007002 	.word	0x08007002
 8002748:	1f91      	subs	r1, r2, #6
      *Data = (*(__IO uint16_t*)(address - 2));
 800274a:	464b      	mov	r3, r9
 800274c:	880a      	ldrh	r2, [r1, #0]
 800274e:	b292      	uxth	r2, r2
 8002750:	801a      	strh	r2, [r3, #0]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002752:	4d38      	ldr	r5, [pc, #224]	; (8002834 <EE_Init+0x3cc>)
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002754:	4b38      	ldr	r3, [pc, #224]	; (8002838 <EE_Init+0x3d0>)
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002756:	8828      	ldrh	r0, [r5, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002758:	881b      	ldrh	r3, [r3, #0]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800275a:	b280      	uxth	r0, r0
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800275c:	b29b      	uxth	r3, r3
      if (pagestatus1 == VALID_PAGE)
 800275e:	2b00      	cmp	r3, #0
 8002760:	d111      	bne.n	8002786 <EE_Init+0x31e>
        if (pagestatus0 == RECEIVE_DATA)
 8002762:	4b36      	ldr	r3, [pc, #216]	; (800283c <EE_Init+0x3d4>)
 8002764:	4298      	cmp	r0, r3
 8002766:	d013      	beq.n	8002790 <EE_Init+0x328>
 8002768:	4d35      	ldr	r5, [pc, #212]	; (8002840 <EE_Init+0x3d8>)
 800276a:	4936      	ldr	r1, [pc, #216]	; (8002844 <EE_Init+0x3dc>)
 800276c:	002b      	movs	r3, r5
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	3301      	adds	r3, #1
 8002772:	d103      	bne.n	800277c <EE_Init+0x314>
 8002774:	e04a      	b.n	800280c <EE_Init+0x3a4>
 8002776:	682b      	ldr	r3, [r5, #0]
 8002778:	3301      	adds	r3, #1
 800277a:	d047      	beq.n	800280c <EE_Init+0x3a4>
    }
    else
    {
      /* Next address location */
      address = address + 4;
 800277c:	3504      	adds	r5, #4
  while (address < pageendaddress)
 800277e:	42a9      	cmp	r1, r5
 8002780:	d8f9      	bhi.n	8002776 <EE_Init+0x30e>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8002782:	2480      	movs	r4, #128	; 0x80
 8002784:	e6a5      	b.n	80024d2 <EE_Init+0x6a>
      else if (pagestatus0 == VALID_PAGE)
 8002786:	2800      	cmp	r0, #0
 8002788:	d105      	bne.n	8002796 <EE_Init+0x32e>
        if (pagestatus1 == RECEIVE_DATA)
 800278a:	492c      	ldr	r1, [pc, #176]	; (800283c <EE_Init+0x3d4>)
 800278c:	428b      	cmp	r3, r1
 800278e:	d0eb      	beq.n	8002768 <EE_Init+0x300>
 8002790:	492d      	ldr	r1, [pc, #180]	; (8002848 <EE_Init+0x3e0>)
 8002792:	002b      	movs	r3, r5
 8002794:	e7eb      	b.n	800276e <EE_Init+0x306>
    return  NO_VALID_PAGE;
 8002796:	24ab      	movs	r4, #171	; 0xab
 8002798:	e69b      	b.n	80024d2 <EE_Init+0x6a>
 800279a:	4b2c      	ldr	r3, [pc, #176]	; (800284c <EE_Init+0x3e4>)
 800279c:	881a      	ldrh	r2, [r3, #0]
 800279e:	e7d8      	b.n	8002752 <EE_Init+0x2ea>
 80027a0:	1f91      	subs	r1, r2, #6
      *Data = (*(__IO uint16_t*)(address - 2));
 80027a2:	464b      	mov	r3, r9
 80027a4:	880a      	ldrh	r2, [r1, #0]
 80027a6:	b292      	uxth	r2, r2
 80027a8:	801a      	strh	r2, [r3, #0]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80027aa:	4d22      	ldr	r5, [pc, #136]	; (8002834 <EE_Init+0x3cc>)
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80027ac:	4b22      	ldr	r3, [pc, #136]	; (8002838 <EE_Init+0x3d0>)
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80027ae:	8828      	ldrh	r0, [r5, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80027b0:	881b      	ldrh	r3, [r3, #0]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80027b2:	b280      	uxth	r0, r0
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80027b4:	b29b      	uxth	r3, r3
      if (pagestatus1 == VALID_PAGE)
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d013      	beq.n	80027e2 <EE_Init+0x37a>
      else if (pagestatus0 == VALID_PAGE)
 80027ba:	2800      	cmp	r0, #0
 80027bc:	d1eb      	bne.n	8002796 <EE_Init+0x32e>
        if (pagestatus1 == RECEIVE_DATA)
 80027be:	491f      	ldr	r1, [pc, #124]	; (800283c <EE_Init+0x3d4>)
 80027c0:	428b      	cmp	r3, r1
 80027c2:	d011      	beq.n	80027e8 <EE_Init+0x380>
 80027c4:	002b      	movs	r3, r5
 80027c6:	4920      	ldr	r1, [pc, #128]	; (8002848 <EE_Init+0x3e0>)
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	3301      	adds	r3, #1
 80027cc:	d104      	bne.n	80027d8 <EE_Init+0x370>
 80027ce:	e757      	b.n	8002680 <EE_Init+0x218>
 80027d0:	682b      	ldr	r3, [r5, #0]
 80027d2:	3301      	adds	r3, #1
 80027d4:	d100      	bne.n	80027d8 <EE_Init+0x370>
 80027d6:	e753      	b.n	8002680 <EE_Init+0x218>
      address = address + 4;
 80027d8:	3504      	adds	r5, #4
  while (address < pageendaddress)
 80027da:	42a9      	cmp	r1, r5
 80027dc:	d8f8      	bhi.n	80027d0 <EE_Init+0x368>
  return PAGE_FULL;
 80027de:	2480      	movs	r4, #128	; 0x80
 80027e0:	e677      	b.n	80024d2 <EE_Init+0x6a>
        if (pagestatus0 == RECEIVE_DATA)
 80027e2:	4b16      	ldr	r3, [pc, #88]	; (800283c <EE_Init+0x3d4>)
 80027e4:	4298      	cmp	r0, r3
 80027e6:	d0ed      	beq.n	80027c4 <EE_Init+0x35c>
 80027e8:	4d15      	ldr	r5, [pc, #84]	; (8002840 <EE_Init+0x3d8>)
 80027ea:	4916      	ldr	r1, [pc, #88]	; (8002844 <EE_Init+0x3dc>)
 80027ec:	002b      	movs	r3, r5
 80027ee:	e7eb      	b.n	80027c8 <EE_Init+0x360>
 80027f0:	4b16      	ldr	r3, [pc, #88]	; (800284c <EE_Init+0x3e4>)
 80027f2:	881a      	ldrh	r2, [r3, #0]
 80027f4:	e7d9      	b.n	80027aa <EE_Init+0x342>
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 80027f6:	2200      	movs	r2, #0
 80027f8:	2300      	movs	r3, #0
 80027fa:	2001      	movs	r0, #1
        s_eraseinit.PageAddress = PAGE1_BASE_ADDRESS;
 80027fc:	9703      	str	r7, [sp, #12]
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 80027fe:	f7fe fa0f 	bl	8000c20 <HAL_FLASH_Program>
        if (flashstatus != HAL_OK)
 8002802:	2800      	cmp	r0, #0
 8002804:	d100      	bne.n	8002808 <EE_Init+0x3a0>
 8002806:	e663      	b.n	80024d0 <EE_Init+0x68>
        return flashstatus;
 8002808:	b284      	uxth	r4, r0
 800280a:	e662      	b.n	80024d2 <EE_Init+0x6a>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, Data);       
 800280c:	2300      	movs	r3, #0
 800280e:	0029      	movs	r1, r5
 8002810:	2001      	movs	r0, #1
 8002812:	f7fe fa05 	bl	8000c20 <HAL_FLASH_Program>
      if (flashstatus != HAL_OK)
 8002816:	2800      	cmp	r0, #0
 8002818:	d000      	beq.n	800281c <EE_Init+0x3b4>
 800281a:	e67c      	b.n	8002516 <EE_Init+0xae>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, VirtAddress);       
 800281c:	0022      	movs	r2, r4
 800281e:	1ca9      	adds	r1, r5, #2
 8002820:	2300      	movs	r3, #0
 8002822:	2001      	movs	r0, #1
 8002824:	f7fe f9fc 	bl	8000c20 <HAL_FLASH_Program>
      return flashstatus;
 8002828:	b284      	uxth	r4, r0
              if (eepromstatus != HAL_OK)
 800282a:	2c00      	cmp	r4, #0
 800282c:	d100      	bne.n	8002830 <EE_Init+0x3c8>
 800282e:	e6a4      	b.n	800257a <EE_Init+0x112>
 8002830:	e64f      	b.n	80024d2 <EE_Init+0x6a>
 8002832:	46c0      	nop			; (mov r8, r8)
 8002834:	08007000 	.word	0x08007000
 8002838:	08007800 	.word	0x08007800
 800283c:	0000eeee 	.word	0x0000eeee
 8002840:	0800f000 	.word	0x0800f000
 8002844:	0800f3ff 	.word	0x0800f3ff
 8002848:	080073ff 	.word	0x080073ff
 800284c:	2000007c 	.word	0x2000007c

08002850 <EE_ReadVariable>:
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002850:	4b13      	ldr	r3, [pc, #76]	; (80028a0 <EE_ReadVariable+0x50>)
{
 8002852:	b530      	push	{r4, r5, lr}
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002854:	881a      	ldrh	r2, [r3, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002856:	4b13      	ldr	r3, [pc, #76]	; (80028a4 <EE_ReadVariable+0x54>)
 8002858:	881b      	ldrh	r3, [r3, #0]
 800285a:	b29b      	uxth	r3, r3
      if (pagestatus0 == VALID_PAGE)
 800285c:	2a00      	cmp	r2, #0
 800285e:	d006      	beq.n	800286e <EE_ReadVariable+0x1e>
      else if (pagestatus1 == VALID_PAGE)
 8002860:	2b00      	cmp	r3, #0
 8002862:	d115      	bne.n	8002890 <EE_ReadVariable+0x40>
 8002864:	4a10      	ldr	r2, [pc, #64]	; (80028a8 <EE_ReadVariable+0x58>)
 8002866:	4c11      	ldr	r4, [pc, #68]	; (80028ac <EE_ReadVariable+0x5c>)
 8002868:	4d11      	ldr	r5, [pc, #68]	; (80028b0 <EE_ReadVariable+0x60>)
 800286a:	0013      	movs	r3, r2
 800286c:	e003      	b.n	8002876 <EE_ReadVariable+0x26>
      if (pagestatus0 == VALID_PAGE)
 800286e:	4a11      	ldr	r2, [pc, #68]	; (80028b4 <EE_ReadVariable+0x64>)
 8002870:	4c11      	ldr	r4, [pc, #68]	; (80028b8 <EE_ReadVariable+0x68>)
 8002872:	0013      	movs	r3, r2
 8002874:	4d11      	ldr	r5, [pc, #68]	; (80028bc <EE_ReadVariable+0x6c>)
    addressvalue = (*(__IO uint16_t*)address);
 8002876:	881b      	ldrh	r3, [r3, #0]
    if (addressvalue == VirtAddress)
 8002878:	4298      	cmp	r0, r3
 800287a:	d104      	bne.n	8002886 <EE_ReadVariable+0x36>
 800287c:	e00b      	b.n	8002896 <EE_ReadVariable+0x46>
    addressvalue = (*(__IO uint16_t*)address);
 800287e:	881c      	ldrh	r4, [r3, #0]
    if (addressvalue == VirtAddress)
 8002880:	4284      	cmp	r4, r0
 8002882:	d007      	beq.n	8002894 <EE_ReadVariable+0x44>
 8002884:	001a      	movs	r2, r3
      address = address - 4;
 8002886:	1f13      	subs	r3, r2, #4
  while (address > (PageStartAddress + 2))
 8002888:	429d      	cmp	r5, r3
 800288a:	d3f8      	bcc.n	800287e <EE_ReadVariable+0x2e>
  uint16_t addressvalue = 0x5555, readstatus = 1;
 800288c:	2001      	movs	r0, #1
}
 800288e:	bd30      	pop	{r4, r5, pc}
    return  NO_VALID_PAGE;
 8002890:	20ab      	movs	r0, #171	; 0xab
 8002892:	e7fc      	b.n	800288e <EE_ReadVariable+0x3e>
 8002894:	1f94      	subs	r4, r2, #6
      *Data = (*(__IO uint16_t*)(address - 2));
 8002896:	8823      	ldrh	r3, [r4, #0]
      readstatus = 0;
 8002898:	2000      	movs	r0, #0
      *Data = (*(__IO uint16_t*)(address - 2));
 800289a:	800b      	strh	r3, [r1, #0]
      break;
 800289c:	e7f7      	b.n	800288e <EE_ReadVariable+0x3e>
 800289e:	46c0      	nop			; (mov r8, r8)
 80028a0:	08007000 	.word	0x08007000
 80028a4:	08007800 	.word	0x08007800
 80028a8:	0800f3fe 	.word	0x0800f3fe
 80028ac:	0800f3fc 	.word	0x0800f3fc
 80028b0:	0800f002 	.word	0x0800f002
 80028b4:	080073fe 	.word	0x080073fe
 80028b8:	080073fc 	.word	0x080073fc
 80028bc:	08007002 	.word	0x08007002

080028c0 <EE_WriteVariable>:
{
 80028c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028c2:	464e      	mov	r6, r9
 80028c4:	4645      	mov	r5, r8
 80028c6:	46de      	mov	lr, fp
 80028c8:	4657      	mov	r7, sl
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80028ca:	4b86      	ldr	r3, [pc, #536]	; (8002ae4 <EE_WriteVariable+0x224>)
{
 80028cc:	b5e0      	push	{r5, r6, r7, lr}
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80028ce:	4a86      	ldr	r2, [pc, #536]	; (8002ae8 <EE_WriteVariable+0x228>)
{
 80028d0:	000d      	movs	r5, r1
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80028d2:	8819      	ldrh	r1, [r3, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80028d4:	8812      	ldrh	r2, [r2, #0]
{
 80028d6:	b085      	sub	sp, #20
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80028d8:	b292      	uxth	r2, r2
{
 80028da:	0006      	movs	r6, r0
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80028dc:	b289      	uxth	r1, r1
      if (pagestatus1 == VALID_PAGE)
 80028de:	2a00      	cmp	r2, #0
 80028e0:	d129      	bne.n	8002936 <EE_WriteVariable+0x76>
        if (pagestatus0 == RECEIVE_DATA)
 80028e2:	4a82      	ldr	r2, [pc, #520]	; (8002aec <EE_WriteVariable+0x22c>)
 80028e4:	4291      	cmp	r1, r2
 80028e6:	d02c      	beq.n	8002942 <EE_WriteVariable+0x82>
 80028e8:	4b81      	ldr	r3, [pc, #516]	; (8002af0 <EE_WriteVariable+0x230>)
 80028ea:	4a82      	ldr	r2, [pc, #520]	; (8002af4 <EE_WriteVariable+0x234>)
 80028ec:	001c      	movs	r4, r3
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	3301      	adds	r3, #1
 80028f2:	d103      	bne.n	80028fc <EE_WriteVariable+0x3c>
 80028f4:	e028      	b.n	8002948 <EE_WriteVariable+0x88>
 80028f6:	6823      	ldr	r3, [r4, #0]
 80028f8:	3301      	adds	r3, #1
 80028fa:	d025      	beq.n	8002948 <EE_WriteVariable+0x88>
      address = address + 4;
 80028fc:	3404      	adds	r4, #4
  while (address < pageendaddress)
 80028fe:	42a2      	cmp	r2, r4
 8002900:	d8f9      	bhi.n	80028f6 <EE_WriteVariable+0x36>
  HAL_StatusTypeDef flashstatus = HAL_OK;
  uint32_t newpageaddress = EEPROM_START_ADDRESS;
  uint32_t oldpageid = 0;
  uint16_t validpage = PAGE0, varidx = 0;
  uint16_t eepromstatus = 0, readstatus = 0;
  uint32_t page_error = 0;
 8002902:	2300      	movs	r3, #0
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002904:	4a77      	ldr	r2, [pc, #476]	; (8002ae4 <EE_WriteVariable+0x224>)
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002906:	4c78      	ldr	r4, [pc, #480]	; (8002ae8 <EE_WriteVariable+0x228>)
  uint32_t page_error = 0;
 8002908:	9300      	str	r3, [sp, #0]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800290a:	8811      	ldrh	r1, [r2, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800290c:	8823      	ldrh	r3, [r4, #0]
 800290e:	b29b      	uxth	r3, r3
      if (pagestatus0 == VALID_PAGE)
 8002910:	2900      	cmp	r1, #0
 8002912:	d125      	bne.n	8002960 <EE_WriteVariable+0xa0>
  {
    /* New page address  where variable will be moved to */
    newpageaddress = PAGE1_BASE_ADDRESS;

    /* Old page ID where variable will be taken from */
    oldpageid = PAGE0_BASE_ADDRESS;
 8002914:	4690      	mov	r8, r2
  {
    return NO_VALID_PAGE;       /* No valid Page */
  }

  /* Set the new Page status to RECEIVE_DATA status */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, newpageaddress, RECEIVE_DATA);  
 8002916:	4a75      	ldr	r2, [pc, #468]	; (8002aec <EE_WriteVariable+0x22c>)
 8002918:	2300      	movs	r3, #0
 800291a:	0021      	movs	r1, r4
 800291c:	2001      	movs	r0, #1
 800291e:	f7fe f97f 	bl	8000c20 <HAL_FLASH_Program>
  /* If program operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 8002922:	2800      	cmp	r0, #0
 8002924:	d02a      	beq.n	800297c <EE_WriteVariable+0xbc>
  /* Erase the old Page: Set old Page status to ERASED status */
  flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);  
  /* If erase operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
  {
    return flashstatus;
 8002926:	b280      	uxth	r0, r0
}
 8002928:	b005      	add	sp, #20
 800292a:	bc3c      	pop	{r2, r3, r4, r5}
 800292c:	4690      	mov	r8, r2
 800292e:	4699      	mov	r9, r3
 8002930:	46a2      	mov	sl, r4
 8002932:	46ab      	mov	fp, r5
 8002934:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return  NO_VALID_PAGE;
 8002936:	20ab      	movs	r0, #171	; 0xab
      else if (pagestatus0 == VALID_PAGE)
 8002938:	2900      	cmp	r1, #0
 800293a:	d1f5      	bne.n	8002928 <EE_WriteVariable+0x68>
        if (pagestatus1 == RECEIVE_DATA)
 800293c:	496b      	ldr	r1, [pc, #428]	; (8002aec <EE_WriteVariable+0x22c>)
 800293e:	428a      	cmp	r2, r1
 8002940:	d0d2      	beq.n	80028e8 <EE_WriteVariable+0x28>
 8002942:	001c      	movs	r4, r3
 8002944:	4a6c      	ldr	r2, [pc, #432]	; (8002af8 <EE_WriteVariable+0x238>)
 8002946:	e7d2      	b.n	80028ee <EE_WriteVariable+0x2e>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, Data);       
 8002948:	002a      	movs	r2, r5
 800294a:	2300      	movs	r3, #0
 800294c:	0021      	movs	r1, r4
 800294e:	2001      	movs	r0, #1
 8002950:	f7fe f966 	bl	8000c20 <HAL_FLASH_Program>
      if (flashstatus != HAL_OK)
 8002954:	2800      	cmp	r0, #0
 8002956:	d008      	beq.n	800296a <EE_WriteVariable+0xaa>
      return flashstatus;
 8002958:	b280      	uxth	r0, r0
  if (Status == PAGE_FULL)
 800295a:	2880      	cmp	r0, #128	; 0x80
 800295c:	d1e4      	bne.n	8002928 <EE_WriteVariable+0x68>
 800295e:	e7d0      	b.n	8002902 <EE_WriteVariable+0x42>
      else if (pagestatus1 == VALID_PAGE)
 8002960:	2b00      	cmp	r3, #0
 8002962:	d109      	bne.n	8002978 <EE_WriteVariable+0xb8>
    oldpageid = PAGE1_BASE_ADDRESS;
 8002964:	46a0      	mov	r8, r4
    newpageaddress = PAGE0_BASE_ADDRESS;
 8002966:	0014      	movs	r4, r2
 8002968:	e7d5      	b.n	8002916 <EE_WriteVariable+0x56>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, VirtAddress);       
 800296a:	1ca1      	adds	r1, r4, #2
 800296c:	0032      	movs	r2, r6
 800296e:	2300      	movs	r3, #0
 8002970:	2001      	movs	r0, #1
 8002972:	f7fe f955 	bl	8000c20 <HAL_FLASH_Program>
 8002976:	e7ef      	b.n	8002958 <EE_WriteVariable+0x98>
    return NO_VALID_PAGE;       /* No valid Page */
 8002978:	20ab      	movs	r0, #171	; 0xab
 800297a:	e7d5      	b.n	8002928 <EE_WriteVariable+0x68>
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800297c:	4b59      	ldr	r3, [pc, #356]	; (8002ae4 <EE_WriteVariable+0x224>)
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800297e:	4a5a      	ldr	r2, [pc, #360]	; (8002ae8 <EE_WriteVariable+0x228>)
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002980:	8819      	ldrh	r1, [r3, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002982:	8812      	ldrh	r2, [r2, #0]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002984:	b289      	uxth	r1, r1
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002986:	b292      	uxth	r2, r2
      if (pagestatus1 == VALID_PAGE)
 8002988:	2a00      	cmp	r2, #0
 800298a:	d111      	bne.n	80029b0 <EE_WriteVariable+0xf0>
        if (pagestatus0 == RECEIVE_DATA)
 800298c:	4a57      	ldr	r2, [pc, #348]	; (8002aec <EE_WriteVariable+0x22c>)
 800298e:	4291      	cmp	r1, r2
 8002990:	d013      	beq.n	80029ba <EE_WriteVariable+0xfa>
 8002992:	4b57      	ldr	r3, [pc, #348]	; (8002af0 <EE_WriteVariable+0x230>)
 8002994:	4a57      	ldr	r2, [pc, #348]	; (8002af4 <EE_WriteVariable+0x234>)
 8002996:	001f      	movs	r7, r3
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	3301      	adds	r3, #1
 800299c:	d103      	bne.n	80029a6 <EE_WriteVariable+0xe6>
 800299e:	e00f      	b.n	80029c0 <EE_WriteVariable+0x100>
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	3301      	adds	r3, #1
 80029a4:	d00c      	beq.n	80029c0 <EE_WriteVariable+0x100>
      address = address + 4;
 80029a6:	3704      	adds	r7, #4
  while (address < pageendaddress)
 80029a8:	4297      	cmp	r7, r2
 80029aa:	d3f9      	bcc.n	80029a0 <EE_WriteVariable+0xe0>
  return PAGE_FULL;
 80029ac:	2080      	movs	r0, #128	; 0x80
 80029ae:	e7bb      	b.n	8002928 <EE_WriteVariable+0x68>
      else if (pagestatus0 == VALID_PAGE)
 80029b0:	2900      	cmp	r1, #0
 80029b2:	d1e1      	bne.n	8002978 <EE_WriteVariable+0xb8>
        if (pagestatus1 == RECEIVE_DATA)
 80029b4:	494d      	ldr	r1, [pc, #308]	; (8002aec <EE_WriteVariable+0x22c>)
 80029b6:	428a      	cmp	r2, r1
 80029b8:	d0eb      	beq.n	8002992 <EE_WriteVariable+0xd2>
 80029ba:	4a4f      	ldr	r2, [pc, #316]	; (8002af8 <EE_WriteVariable+0x238>)
 80029bc:	001f      	movs	r7, r3
 80029be:	e7eb      	b.n	8002998 <EE_WriteVariable+0xd8>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, Data);       
 80029c0:	002a      	movs	r2, r5
 80029c2:	2300      	movs	r3, #0
 80029c4:	0039      	movs	r1, r7
 80029c6:	2001      	movs	r0, #1
 80029c8:	f7fe f92a 	bl	8000c20 <HAL_FLASH_Program>
      if (flashstatus != HAL_OK)
 80029cc:	2800      	cmp	r0, #0
 80029ce:	d1aa      	bne.n	8002926 <EE_WriteVariable+0x66>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, VirtAddress);       
 80029d0:	1cb9      	adds	r1, r7, #2
 80029d2:	0032      	movs	r2, r6
 80029d4:	2300      	movs	r3, #0
 80029d6:	2001      	movs	r0, #1
 80029d8:	f7fe f922 	bl	8000c20 <HAL_FLASH_Program>
      return flashstatus;
 80029dc:	b280      	uxth	r0, r0
  if (eepromstatus != HAL_OK)
 80029de:	2800      	cmp	r0, #0
 80029e0:	d1a2      	bne.n	8002928 <EE_WriteVariable+0x68>
 80029e2:	4b46      	ldr	r3, [pc, #280]	; (8002afc <EE_WriteVariable+0x23c>)
 80029e4:	2700      	movs	r7, #0
 80029e6:	4699      	mov	r9, r3
      *Data = (*(__IO uint16_t*)(address - 2));
 80029e8:	4b45      	ldr	r3, [pc, #276]	; (8002b00 <EE_WriteVariable+0x240>)
 80029ea:	469a      	mov	sl, r3
    if (VirtAddVarTab[varidx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 80029ec:	464b      	mov	r3, r9
 80029ee:	5bdb      	ldrh	r3, [r3, r7]
 80029f0:	469b      	mov	fp, r3
 80029f2:	429e      	cmp	r6, r3
 80029f4:	d017      	beq.n	8002a26 <EE_WriteVariable+0x166>
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80029f6:	4b3b      	ldr	r3, [pc, #236]	; (8002ae4 <EE_WriteVariable+0x224>)
 80029f8:	881a      	ldrh	r2, [r3, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80029fa:	4b3b      	ldr	r3, [pc, #236]	; (8002ae8 <EE_WriteVariable+0x228>)
 80029fc:	881b      	ldrh	r3, [r3, #0]
 80029fe:	b29b      	uxth	r3, r3
      if (pagestatus0 == VALID_PAGE)
 8002a00:	2a00      	cmp	r2, #0
 8002a02:	d02d      	beq.n	8002a60 <EE_WriteVariable+0x1a0>
      else if (pagestatus1 == VALID_PAGE)
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d14f      	bne.n	8002aa8 <EE_WriteVariable+0x1e8>
 8002a08:	4a3e      	ldr	r2, [pc, #248]	; (8002b04 <EE_WriteVariable+0x244>)
 8002a0a:	493f      	ldr	r1, [pc, #252]	; (8002b08 <EE_WriteVariable+0x248>)
 8002a0c:	0013      	movs	r3, r2
 8002a0e:	483f      	ldr	r0, [pc, #252]	; (8002b0c <EE_WriteVariable+0x24c>)
    addressvalue = (*(__IO uint16_t*)address);
 8002a10:	881b      	ldrh	r3, [r3, #0]
    if (addressvalue == VirtAddress)
 8002a12:	459b      	cmp	fp, r3
 8002a14:	d104      	bne.n	8002a20 <EE_WriteVariable+0x160>
 8002a16:	e029      	b.n	8002a6c <EE_WriteVariable+0x1ac>
    addressvalue = (*(__IO uint16_t*)address);
 8002a18:	8819      	ldrh	r1, [r3, #0]
    if (addressvalue == VirtAddress)
 8002a1a:	458b      	cmp	fp, r1
 8002a1c:	d025      	beq.n	8002a6a <EE_WriteVariable+0x1aa>
 8002a1e:	001a      	movs	r2, r3
      address = address - 4;
 8002a20:	1f13      	subs	r3, r2, #4
  while (address > (PageStartAddress + 2))
 8002a22:	4298      	cmp	r0, r3
 8002a24:	d3f8      	bcc.n	8002a18 <EE_WriteVariable+0x158>
 8002a26:	3702      	adds	r7, #2
  for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8002a28:	2f06      	cmp	r7, #6
 8002a2a:	d1df      	bne.n	80029ec <EE_WriteVariable+0x12c>
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	9301      	str	r3, [sp, #4]
  s_eraseinit.PageAddress = oldpageid;
 8002a30:	4643      	mov	r3, r8
 8002a32:	9302      	str	r3, [sp, #8]
  s_eraseinit.NbPages     = 1;
 8002a34:	2301      	movs	r3, #1
  flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);  
 8002a36:	4669      	mov	r1, sp
 8002a38:	a801      	add	r0, sp, #4
  s_eraseinit.NbPages     = 1;
 8002a3a:	9303      	str	r3, [sp, #12]
  flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);  
 8002a3c:	f7fe fa2a 	bl	8000e94 <HAL_FLASHEx_Erase>
  if (flashstatus != HAL_OK)
 8002a40:	2800      	cmp	r0, #0
 8002a42:	d000      	beq.n	8002a46 <EE_WriteVariable+0x186>
 8002a44:	e76f      	b.n	8002926 <EE_WriteVariable+0x66>
  }

  /* Set new Page status to VALID_PAGE status */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, newpageaddress, VALID_PAGE);   
 8002a46:	2300      	movs	r3, #0
 8002a48:	2200      	movs	r2, #0
 8002a4a:	0021      	movs	r1, r4
 8002a4c:	2001      	movs	r0, #1
 8002a4e:	f7fe f8e7 	bl	8000c20 <HAL_FLASH_Program>
 8002a52:	0003      	movs	r3, r0
  }
  
  

  /* Return last operation flash status */
  return flashstatus;
 8002a54:	2000      	movs	r0, #0
  if (flashstatus != HAL_OK)
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d100      	bne.n	8002a5c <EE_WriteVariable+0x19c>
 8002a5a:	e765      	b.n	8002928 <EE_WriteVariable+0x68>
    return flashstatus;
 8002a5c:	b298      	uxth	r0, r3
 8002a5e:	e763      	b.n	8002928 <EE_WriteVariable+0x68>
      if (pagestatus0 == VALID_PAGE)
 8002a60:	4a2b      	ldr	r2, [pc, #172]	; (8002b10 <EE_WriteVariable+0x250>)
 8002a62:	492c      	ldr	r1, [pc, #176]	; (8002b14 <EE_WriteVariable+0x254>)
 8002a64:	482c      	ldr	r0, [pc, #176]	; (8002b18 <EE_WriteVariable+0x258>)
 8002a66:	0013      	movs	r3, r2
 8002a68:	e7d2      	b.n	8002a10 <EE_WriteVariable+0x150>
 8002a6a:	1f91      	subs	r1, r2, #6
      *Data = (*(__IO uint16_t*)(address - 2));
 8002a6c:	4653      	mov	r3, sl
 8002a6e:	880a      	ldrh	r2, [r1, #0]
 8002a70:	b292      	uxth	r2, r2
 8002a72:	801a      	strh	r2, [r3, #0]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002a74:	4b1b      	ldr	r3, [pc, #108]	; (8002ae4 <EE_WriteVariable+0x224>)
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002a76:	491c      	ldr	r1, [pc, #112]	; (8002ae8 <EE_WriteVariable+0x228>)
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002a78:	8818      	ldrh	r0, [r3, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002a7a:	8809      	ldrh	r1, [r1, #0]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002a7c:	b280      	uxth	r0, r0
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002a7e:	b289      	uxth	r1, r1
      if (pagestatus1 == VALID_PAGE)
 8002a80:	2900      	cmp	r1, #0
 8002a82:	d114      	bne.n	8002aae <EE_WriteVariable+0x1ee>
        if (pagestatus0 == RECEIVE_DATA)
 8002a84:	4919      	ldr	r1, [pc, #100]	; (8002aec <EE_WriteVariable+0x22c>)
 8002a86:	4288      	cmp	r0, r1
 8002a88:	d017      	beq.n	8002aba <EE_WriteVariable+0x1fa>
 8002a8a:	4b19      	ldr	r3, [pc, #100]	; (8002af0 <EE_WriteVariable+0x230>)
 8002a8c:	4919      	ldr	r1, [pc, #100]	; (8002af4 <EE_WriteVariable+0x234>)
 8002a8e:	001d      	movs	r5, r3
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	3301      	adds	r3, #1
 8002a94:	d103      	bne.n	8002a9e <EE_WriteVariable+0x1de>
 8002a96:	e013      	b.n	8002ac0 <EE_WriteVariable+0x200>
 8002a98:	682b      	ldr	r3, [r5, #0]
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	d010      	beq.n	8002ac0 <EE_WriteVariable+0x200>
      address = address + 4;
 8002a9e:	3504      	adds	r5, #4
  while (address < pageendaddress)
 8002aa0:	428d      	cmp	r5, r1
 8002aa2:	d3f9      	bcc.n	8002a98 <EE_WriteVariable+0x1d8>
  return PAGE_FULL;
 8002aa4:	2080      	movs	r0, #128	; 0x80
 8002aa6:	e73f      	b.n	8002928 <EE_WriteVariable+0x68>
 8002aa8:	4b15      	ldr	r3, [pc, #84]	; (8002b00 <EE_WriteVariable+0x240>)
 8002aaa:	881a      	ldrh	r2, [r3, #0]
 8002aac:	e7e2      	b.n	8002a74 <EE_WriteVariable+0x1b4>
      else if (pagestatus0 == VALID_PAGE)
 8002aae:	2800      	cmp	r0, #0
 8002ab0:	d000      	beq.n	8002ab4 <EE_WriteVariable+0x1f4>
 8002ab2:	e761      	b.n	8002978 <EE_WriteVariable+0xb8>
        if (pagestatus1 == RECEIVE_DATA)
 8002ab4:	480d      	ldr	r0, [pc, #52]	; (8002aec <EE_WriteVariable+0x22c>)
 8002ab6:	4281      	cmp	r1, r0
 8002ab8:	d0e7      	beq.n	8002a8a <EE_WriteVariable+0x1ca>
 8002aba:	001d      	movs	r5, r3
 8002abc:	490e      	ldr	r1, [pc, #56]	; (8002af8 <EE_WriteVariable+0x238>)
 8002abe:	e7e7      	b.n	8002a90 <EE_WriteVariable+0x1d0>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, Data);       
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	0029      	movs	r1, r5
 8002ac4:	2001      	movs	r0, #1
 8002ac6:	f7fe f8ab 	bl	8000c20 <HAL_FLASH_Program>
      if (flashstatus != HAL_OK)
 8002aca:	2800      	cmp	r0, #0
 8002acc:	d000      	beq.n	8002ad0 <EE_WriteVariable+0x210>
 8002ace:	e72a      	b.n	8002926 <EE_WriteVariable+0x66>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, VirtAddress);       
 8002ad0:	1ca9      	adds	r1, r5, #2
 8002ad2:	465a      	mov	r2, fp
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	2001      	movs	r0, #1
 8002ad8:	f7fe f8a2 	bl	8000c20 <HAL_FLASH_Program>
      return flashstatus;
 8002adc:	b280      	uxth	r0, r0
        if (eepromstatus != HAL_OK)
 8002ade:	2800      	cmp	r0, #0
 8002ae0:	d0a1      	beq.n	8002a26 <EE_WriteVariable+0x166>
 8002ae2:	e721      	b.n	8002928 <EE_WriteVariable+0x68>
 8002ae4:	08007000 	.word	0x08007000
 8002ae8:	08007800 	.word	0x08007800
 8002aec:	0000eeee 	.word	0x0000eeee
 8002af0:	0800f000 	.word	0x0800f000
 8002af4:	0800f3ff 	.word	0x0800f3ff
 8002af8:	080073ff 	.word	0x080073ff
 8002afc:	20000000 	.word	0x20000000
 8002b00:	2000007c 	.word	0x2000007c
 8002b04:	0800f3fe 	.word	0x0800f3fe
 8002b08:	0800f3fc 	.word	0x0800f3fc
 8002b0c:	0800f002 	.word	0x0800f002
 8002b10:	080073fe 	.word	0x080073fe
 8002b14:	080073fc 	.word	0x080073fc
 8002b18:	08007002 	.word	0x08007002

08002b1c <storeEEpromConfig>:
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;

}


void storeEEpromConfig(){
 8002b1c:	b510      	push	{r4, lr}

	 EE_WriteVariable(VirtAddVarTab[EEvehiclemode], vehicle_mode);
 8002b1e:	4b08      	ldr	r3, [pc, #32]	; (8002b40 <storeEEpromConfig+0x24>)
 8002b20:	4c08      	ldr	r4, [pc, #32]	; (8002b44 <storeEEpromConfig+0x28>)
 8002b22:	7819      	ldrb	r1, [r3, #0]
 8002b24:	8820      	ldrh	r0, [r4, #0]
 8002b26:	f7ff fecb 	bl	80028c0 <EE_WriteVariable>
	 EE_WriteVariable(VirtAddVarTab[EEdirection], dir_reversed);
 8002b2a:	4b07      	ldr	r3, [pc, #28]	; (8002b48 <storeEEpromConfig+0x2c>)
 8002b2c:	8860      	ldrh	r0, [r4, #2]
 8002b2e:	8819      	ldrh	r1, [r3, #0]
 8002b30:	f7ff fec6 	bl	80028c0 <EE_WriteVariable>
	 EE_WriteVariable(VirtAddVarTab[EEbidirection], bi_direction);
 8002b34:	4b05      	ldr	r3, [pc, #20]	; (8002b4c <storeEEpromConfig+0x30>)
 8002b36:	88a0      	ldrh	r0, [r4, #4]
 8002b38:	8819      	ldrh	r1, [r3, #0]
 8002b3a:	f7ff fec1 	bl	80028c0 <EE_WriteVariable>
	// EE_WriteVariable(VirtAddVarTab[EEbrake_on_stop], EEbrake_on_stop);

	// playEEpromSavedTune();
}
 8002b3e:	bd10      	pop	{r4, pc}
 8002b40:	20000050 	.word	0x20000050
 8002b44:	20000000 	.word	0x20000000
 8002b48:	200000b8 	.word	0x200000b8
 8002b4c:	200000a0 	.word	0x200000a0

08002b50 <loadEEpromConfig>:


void loadEEpromConfig(){
 8002b50:	b570      	push	{r4, r5, r6, lr}
	 EE_ReadVariable(VirtAddVarTab[EEvehiclemode], &VarDataTab[EEvehiclemode]);
 8002b52:	4c15      	ldr	r4, [pc, #84]	; (8002ba8 <loadEEpromConfig+0x58>)
 8002b54:	4d15      	ldr	r5, [pc, #84]	; (8002bac <loadEEpromConfig+0x5c>)
 8002b56:	0021      	movs	r1, r4
 8002b58:	8828      	ldrh	r0, [r5, #0]
 8002b5a:	f7ff fe79 	bl	8002850 <EE_ReadVariable>
	 EE_ReadVariable(VirtAddVarTab[EEdirection], &VarDataTab[EEdirection]);
 8002b5e:	1ca1      	adds	r1, r4, #2
 8002b60:	8868      	ldrh	r0, [r5, #2]
 8002b62:	f7ff fe75 	bl	8002850 <EE_ReadVariable>
	 EE_ReadVariable(VirtAddVarTab[EEbidirection], &VarDataTab[EEbidirection]);
 8002b66:	1d21      	adds	r1, r4, #4
 8002b68:	88a8      	ldrh	r0, [r5, #4]
 8002b6a:	f7ff fe71 	bl	8002850 <EE_ReadVariable>
//	 EE_ReadVariable(VirtAddVarTab[EEbrake_on_stop], &VarDataTab[EEbrake_on_stop]);

	 if (VarDataTab[EEvehiclemode] == 0){             // nothing in the eeprom
 8002b6e:	8823      	ldrh	r3, [r4, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d008      	beq.n	8002b86 <loadEEpromConfig+0x36>
     storeEEpromConfig();            // store default values
	 }else{
	 vehicle_mode = VarDataTab[EEvehiclemode];
 8002b74:	4a0e      	ldr	r2, [pc, #56]	; (8002bb0 <loadEEpromConfig+0x60>)
 8002b76:	7013      	strb	r3, [r2, #0]
	 dir_reversed = VarDataTab[EEdirection];
 8002b78:	8862      	ldrh	r2, [r4, #2]
 8002b7a:	4b0e      	ldr	r3, [pc, #56]	; (8002bb4 <loadEEpromConfig+0x64>)
 8002b7c:	601a      	str	r2, [r3, #0]
	 bi_direction = VarDataTab[EEbidirection];
 8002b7e:	88a2      	ldrh	r2, [r4, #4]
 8002b80:	4b0d      	ldr	r3, [pc, #52]	; (8002bb8 <loadEEpromConfig+0x68>)
 8002b82:	601a      	str	r2, [r3, #0]
//	 brake = VarDataTab[EEbrake_on_stop];
	 }
}
 8002b84:	bd70      	pop	{r4, r5, r6, pc}
	 EE_WriteVariable(VirtAddVarTab[EEvehiclemode], vehicle_mode);
 8002b86:	4b0a      	ldr	r3, [pc, #40]	; (8002bb0 <loadEEpromConfig+0x60>)
 8002b88:	8828      	ldrh	r0, [r5, #0]
 8002b8a:	7819      	ldrb	r1, [r3, #0]
 8002b8c:	f7ff fe98 	bl	80028c0 <EE_WriteVariable>
	 EE_WriteVariable(VirtAddVarTab[EEdirection], dir_reversed);
 8002b90:	4b08      	ldr	r3, [pc, #32]	; (8002bb4 <loadEEpromConfig+0x64>)
 8002b92:	8868      	ldrh	r0, [r5, #2]
 8002b94:	8819      	ldrh	r1, [r3, #0]
 8002b96:	f7ff fe93 	bl	80028c0 <EE_WriteVariable>
	 EE_WriteVariable(VirtAddVarTab[EEbidirection], bi_direction);
 8002b9a:	4b07      	ldr	r3, [pc, #28]	; (8002bb8 <loadEEpromConfig+0x68>)
 8002b9c:	88a8      	ldrh	r0, [r5, #4]
 8002b9e:	8819      	ldrh	r1, [r3, #0]
 8002ba0:	f7ff fe8e 	bl	80028c0 <EE_WriteVariable>
 8002ba4:	e7ee      	b.n	8002b84 <loadEEpromConfig+0x34>
 8002ba6:	46c0      	nop			; (mov r8, r8)
 8002ba8:	20000088 	.word	0x20000088
 8002bac:	20000000 	.word	0x20000000
 8002bb0:	20000050 	.word	0x20000050
 8002bb4:	200000b8 	.word	0x200000b8
 8002bb8:	200000a0 	.word	0x200000a0

08002bbc <phaseA>:
#endif
#ifdef FD6288
void phaseB(int newPhase) {
#endif

	if (newPhase == pwm) {
 8002bbc:	4b2b      	ldr	r3, [pc, #172]	; (8002c6c <phaseA+0xb0>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4283      	cmp	r3, r0
 8002bc2:	d031      	beq.n	8002c28 <phaseA+0x6c>
		}
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_9, LL_GPIO_MODE_ALTERNATE);  // high

	}

	if (newPhase == floating) {
 8002bc4:	4b2a      	ldr	r3, [pc, #168]	; (8002c70 <phaseA+0xb4>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4298      	cmp	r0, r3
 8002bca:	d018      	beq.n	8002bfe <phaseA+0x42>
		GPIOB->BRR = GPIO_PIN_0;
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_9, LL_GPIO_MODE_OUTPUT);
		GPIOA->BRR = GPIO_PIN_9;
	}

	if (newPhase == lowside) {          // low mosfet on
 8002bcc:	4b29      	ldr	r3, [pc, #164]	; (8002c74 <phaseA+0xb8>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4298      	cmp	r0, r3
 8002bd2:	d113      	bne.n	8002bfc <phaseA+0x40>
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8002bd4:	2103      	movs	r1, #3
 8002bd6:	4a28      	ldr	r2, [pc, #160]	; (8002c78 <phaseA+0xbc>)
 8002bd8:	6813      	ldr	r3, [r2, #0]
 8002bda:	438b      	bics	r3, r1
 8002bdc:	3902      	subs	r1, #2
 8002bde:	430b      	orrs	r3, r1
 8002be0:	6013      	str	r3, [r2, #0]
 8002be2:	2390      	movs	r3, #144	; 0x90
		LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_0, LL_GPIO_MODE_OUTPUT);
		GPIOB->BSRR = GPIO_PIN_0;
 8002be4:	6191      	str	r1, [r2, #24]
 8002be6:	05db      	lsls	r3, r3, #23
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	4924      	ldr	r1, [pc, #144]	; (8002c7c <phaseA+0xc0>)
 8002bec:	4011      	ands	r1, r2
 8002bee:	2280      	movs	r2, #128	; 0x80
 8002bf0:	02d2      	lsls	r2, r2, #11
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	601a      	str	r2, [r3, #0]
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_9, LL_GPIO_MODE_OUTPUT);
		GPIOA->BRR = GPIO_PIN_9;
 8002bf6:	2280      	movs	r2, #128	; 0x80
 8002bf8:	0092      	lsls	r2, r2, #2
 8002bfa:	629a      	str	r2, [r3, #40]	; 0x28
	}

}
 8002bfc:	4770      	bx	lr
 8002bfe:	2103      	movs	r1, #3
 8002c00:	4a1d      	ldr	r2, [pc, #116]	; (8002c78 <phaseA+0xbc>)
 8002c02:	6813      	ldr	r3, [r2, #0]
 8002c04:	438b      	bics	r3, r1
 8002c06:	3902      	subs	r1, #2
 8002c08:	430b      	orrs	r3, r1
 8002c0a:	6013      	str	r3, [r2, #0]
 8002c0c:	2390      	movs	r3, #144	; 0x90
		GPIOB->BRR = GPIO_PIN_0;
 8002c0e:	6291      	str	r1, [r2, #40]	; 0x28
 8002c10:	05db      	lsls	r3, r3, #23
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	4919      	ldr	r1, [pc, #100]	; (8002c7c <phaseA+0xc0>)
 8002c16:	4011      	ands	r1, r2
 8002c18:	2280      	movs	r2, #128	; 0x80
 8002c1a:	02d2      	lsls	r2, r2, #11
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_9;
 8002c20:	2280      	movs	r2, #128	; 0x80
 8002c22:	0092      	lsls	r2, r2, #2
 8002c24:	629a      	str	r2, [r3, #40]	; 0x28
 8002c26:	e7d1      	b.n	8002bcc <phaseA+0x10>
		if(!slow_decay  || prop_brake_active){            // for future
 8002c28:	4b15      	ldr	r3, [pc, #84]	; (8002c80 <phaseA+0xc4>)
 8002c2a:	4a13      	ldr	r2, [pc, #76]	; (8002c78 <phaseA+0xbc>)
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d110      	bne.n	8002c54 <phaseA+0x98>
 8002c32:	2103      	movs	r1, #3
 8002c34:	6813      	ldr	r3, [r2, #0]
 8002c36:	438b      	bics	r3, r1
 8002c38:	3902      	subs	r1, #2
 8002c3a:	430b      	orrs	r3, r1
 8002c3c:	6013      	str	r3, [r2, #0]
		GPIOB->BRR = GPIO_PIN_0;
 8002c3e:	6291      	str	r1, [r2, #40]	; 0x28
 8002c40:	2190      	movs	r1, #144	; 0x90
 8002c42:	05c9      	lsls	r1, r1, #23
 8002c44:	680b      	ldr	r3, [r1, #0]
 8002c46:	4a0d      	ldr	r2, [pc, #52]	; (8002c7c <phaseA+0xc0>)
 8002c48:	401a      	ands	r2, r3
 8002c4a:	2380      	movs	r3, #128	; 0x80
 8002c4c:	031b      	lsls	r3, r3, #12
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	600b      	str	r3, [r1, #0]
 8002c52:	e7b7      	b.n	8002bc4 <phaseA+0x8>
		if(!slow_decay  || prop_brake_active){            // for future
 8002c54:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <phaseA+0xc8>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d1ea      	bne.n	8002c32 <phaseA+0x76>
 8002c5c:	2103      	movs	r1, #3
 8002c5e:	6813      	ldr	r3, [r2, #0]
 8002c60:	438b      	bics	r3, r1
 8002c62:	3901      	subs	r1, #1
 8002c64:	430b      	orrs	r3, r1
 8002c66:	6013      	str	r3, [r2, #0]
 8002c68:	e7ea      	b.n	8002c40 <phaseA+0x84>
 8002c6a:	46c0      	nop			; (mov r8, r8)
 8002c6c:	2000002c 	.word	0x2000002c
 8002c70:	20000018 	.word	0x20000018
 8002c74:	20000024 	.word	0x20000024
 8002c78:	48000400 	.word	0x48000400
 8002c7c:	fff3ffff 	.word	0xfff3ffff
 8002c80:	20000038 	.word	0x20000038
 8002c84:	20000127 	.word	0x20000127

08002c88 <phaseB>:
void phaseB(int newPhase) {                                // phase c qfn , phase b qfp
#endif
#ifdef FD6288
void phaseC(int newPhase) {
#endif
	if (newPhase == pwm) {  // pwm
 8002c88:	4b2f      	ldr	r3, [pc, #188]	; (8002d48 <phaseB+0xc0>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4283      	cmp	r3, r0
 8002c8e:	d033      	beq.n	8002cf8 <phaseB+0x70>
		}
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_8, LL_GPIO_MODE_ALTERNATE);

	}

	if (newPhase == floating) {            // floating
 8002c90:	4b2e      	ldr	r3, [pc, #184]	; (8002d4c <phaseB+0xc4>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4298      	cmp	r0, r3
 8002c96:	d019      	beq.n	8002ccc <phaseB+0x44>
		GPIOA->BRR = GPIO_PIN_7;
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_8, LL_GPIO_MODE_OUTPUT);
		GPIOA->BRR = GPIO_PIN_8;
	}

	if (newPhase == lowside) {              // lowside
 8002c98:	4b2d      	ldr	r3, [pc, #180]	; (8002d50 <phaseB+0xc8>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4298      	cmp	r0, r3
 8002c9e:	d114      	bne.n	8002cca <phaseB+0x42>
 8002ca0:	2390      	movs	r3, #144	; 0x90
 8002ca2:	05db      	lsls	r3, r3, #23
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	492b      	ldr	r1, [pc, #172]	; (8002d54 <phaseB+0xcc>)
 8002ca8:	4011      	ands	r1, r2
 8002caa:	2280      	movs	r2, #128	; 0x80
 8002cac:	01d2      	lsls	r2, r2, #7
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	601a      	str	r2, [r3, #0]
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_7, LL_GPIO_MODE_OUTPUT);
		GPIOA->BSRR = GPIO_PIN_7;
 8002cb2:	2280      	movs	r2, #128	; 0x80
 8002cb4:	619a      	str	r2, [r3, #24]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	4927      	ldr	r1, [pc, #156]	; (8002d58 <phaseB+0xd0>)
 8002cba:	4011      	ands	r1, r2
 8002cbc:	2280      	movs	r2, #128	; 0x80
 8002cbe:	0252      	lsls	r2, r2, #9
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	601a      	str	r2, [r3, #0]
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_8, LL_GPIO_MODE_OUTPUT);
		GPIOA->BRR = GPIO_PIN_8;
 8002cc4:	2280      	movs	r2, #128	; 0x80
 8002cc6:	0052      	lsls	r2, r2, #1
 8002cc8:	629a      	str	r2, [r3, #40]	; 0x28
	}
}
 8002cca:	4770      	bx	lr
 8002ccc:	2390      	movs	r3, #144	; 0x90
 8002cce:	05db      	lsls	r3, r3, #23
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	4920      	ldr	r1, [pc, #128]	; (8002d54 <phaseB+0xcc>)
 8002cd4:	4011      	ands	r1, r2
 8002cd6:	2280      	movs	r2, #128	; 0x80
 8002cd8:	01d2      	lsls	r2, r2, #7
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_7;
 8002cde:	2280      	movs	r2, #128	; 0x80
 8002ce0:	629a      	str	r2, [r3, #40]	; 0x28
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	491c      	ldr	r1, [pc, #112]	; (8002d58 <phaseB+0xd0>)
 8002ce6:	4011      	ands	r1, r2
 8002ce8:	2280      	movs	r2, #128	; 0x80
 8002cea:	0252      	lsls	r2, r2, #9
 8002cec:	430a      	orrs	r2, r1
 8002cee:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_8;
 8002cf0:	2280      	movs	r2, #128	; 0x80
 8002cf2:	0052      	lsls	r2, r2, #1
 8002cf4:	629a      	str	r2, [r3, #40]	; 0x28
 8002cf6:	e7cf      	b.n	8002c98 <phaseB+0x10>
		if (!slow_decay || prop_brake_active){
 8002cf8:	4b18      	ldr	r3, [pc, #96]	; (8002d5c <phaseB+0xd4>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d114      	bne.n	8002d2a <phaseB+0xa2>
 8002d00:	2390      	movs	r3, #144	; 0x90
 8002d02:	05db      	lsls	r3, r3, #23
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	4913      	ldr	r1, [pc, #76]	; (8002d54 <phaseB+0xcc>)
 8002d08:	4011      	ands	r1, r2
 8002d0a:	2280      	movs	r2, #128	; 0x80
 8002d0c:	01d2      	lsls	r2, r2, #7
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	601a      	str	r2, [r3, #0]
			GPIOA->BRR = GPIO_PIN_7;
 8002d12:	2280      	movs	r2, #128	; 0x80
 8002d14:	629a      	str	r2, [r3, #40]	; 0x28
 8002d16:	2190      	movs	r1, #144	; 0x90
 8002d18:	05c9      	lsls	r1, r1, #23
 8002d1a:	680b      	ldr	r3, [r1, #0]
 8002d1c:	4a0e      	ldr	r2, [pc, #56]	; (8002d58 <phaseB+0xd0>)
 8002d1e:	401a      	ands	r2, r3
 8002d20:	2380      	movs	r3, #128	; 0x80
 8002d22:	029b      	lsls	r3, r3, #10
 8002d24:	4313      	orrs	r3, r2
 8002d26:	600b      	str	r3, [r1, #0]
 8002d28:	e7b2      	b.n	8002c90 <phaseB+0x8>
		if (!slow_decay || prop_brake_active){
 8002d2a:	4b0d      	ldr	r3, [pc, #52]	; (8002d60 <phaseB+0xd8>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1e6      	bne.n	8002d00 <phaseB+0x78>
 8002d32:	2190      	movs	r1, #144	; 0x90
 8002d34:	05c9      	lsls	r1, r1, #23
 8002d36:	680b      	ldr	r3, [r1, #0]
 8002d38:	4a06      	ldr	r2, [pc, #24]	; (8002d54 <phaseB+0xcc>)
 8002d3a:	401a      	ands	r2, r3
 8002d3c:	2380      	movs	r3, #128	; 0x80
 8002d3e:	021b      	lsls	r3, r3, #8
 8002d40:	4313      	orrs	r3, r2
 8002d42:	600b      	str	r3, [r1, #0]
 8002d44:	e7e7      	b.n	8002d16 <phaseB+0x8e>
 8002d46:	46c0      	nop			; (mov r8, r8)
 8002d48:	2000002c 	.word	0x2000002c
 8002d4c:	20000018 	.word	0x20000018
 8002d50:	20000024 	.word	0x20000024
 8002d54:	ffff3fff 	.word	0xffff3fff
 8002d58:	fffcffff 	.word	0xfffcffff
 8002d5c:	20000038 	.word	0x20000038
 8002d60:	20000127 	.word	0x20000127

08002d64 <phaseC>:
void phaseC(int newPhase) {                    // phaseA qfn , phase C qfp
#endif
#ifdef FD6288
void phaseA(int newPhase) {
#endif
	if (newPhase == pwm) {
 8002d64:	4b2c      	ldr	r3, [pc, #176]	; (8002e18 <phaseC+0xb4>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4283      	cmp	r3, r0
 8002d6a:	d033      	beq.n	8002dd4 <phaseC+0x70>
			}
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_10, LL_GPIO_MODE_ALTERNATE);

	}

	if (newPhase == floating) {
 8002d6c:	4b2b      	ldr	r3, [pc, #172]	; (8002e1c <phaseC+0xb8>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4298      	cmp	r0, r3
 8002d72:	d019      	beq.n	8002da8 <phaseC+0x44>
		GPIOB->BRR = GPIO_PIN_1;
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_10, LL_GPIO_MODE_OUTPUT);
		GPIOA->BRR = GPIO_PIN_10;
	}

	if (newPhase == lowside) {
 8002d74:	4b2a      	ldr	r3, [pc, #168]	; (8002e20 <phaseC+0xbc>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4298      	cmp	r0, r3
 8002d7a:	d114      	bne.n	8002da6 <phaseC+0x42>
 8002d7c:	210c      	movs	r1, #12
 8002d7e:	4a29      	ldr	r2, [pc, #164]	; (8002e24 <phaseC+0xc0>)
 8002d80:	6813      	ldr	r3, [r2, #0]
 8002d82:	438b      	bics	r3, r1
 8002d84:	3908      	subs	r1, #8
 8002d86:	430b      	orrs	r3, r1
 8002d88:	6013      	str	r3, [r2, #0]
		LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_1, LL_GPIO_MODE_OUTPUT);
		GPIOB->BSRR = GPIO_PIN_1;
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	6193      	str	r3, [r2, #24]
 8002d8e:	2390      	movs	r3, #144	; 0x90
 8002d90:	05db      	lsls	r3, r3, #23
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	4924      	ldr	r1, [pc, #144]	; (8002e28 <phaseC+0xc4>)
 8002d96:	4011      	ands	r1, r2
 8002d98:	2280      	movs	r2, #128	; 0x80
 8002d9a:	0352      	lsls	r2, r2, #13
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	601a      	str	r2, [r3, #0]
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_10, LL_GPIO_MODE_OUTPUT);
		GPIOA->BRR = GPIO_PIN_10;
 8002da0:	2280      	movs	r2, #128	; 0x80
 8002da2:	00d2      	lsls	r2, r2, #3
 8002da4:	629a      	str	r2, [r3, #40]	; 0x28
	}

}
 8002da6:	4770      	bx	lr
 8002da8:	210c      	movs	r1, #12
 8002daa:	4a1e      	ldr	r2, [pc, #120]	; (8002e24 <phaseC+0xc0>)
 8002dac:	6813      	ldr	r3, [r2, #0]
 8002dae:	438b      	bics	r3, r1
 8002db0:	3908      	subs	r1, #8
 8002db2:	430b      	orrs	r3, r1
 8002db4:	6013      	str	r3, [r2, #0]
		GPIOB->BRR = GPIO_PIN_1;
 8002db6:	2302      	movs	r3, #2
 8002db8:	6293      	str	r3, [r2, #40]	; 0x28
 8002dba:	2390      	movs	r3, #144	; 0x90
 8002dbc:	05db      	lsls	r3, r3, #23
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	4919      	ldr	r1, [pc, #100]	; (8002e28 <phaseC+0xc4>)
 8002dc2:	4011      	ands	r1, r2
 8002dc4:	2280      	movs	r2, #128	; 0x80
 8002dc6:	0352      	lsls	r2, r2, #13
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_10;
 8002dcc:	2280      	movs	r2, #128	; 0x80
 8002dce:	00d2      	lsls	r2, r2, #3
 8002dd0:	629a      	str	r2, [r3, #40]	; 0x28
 8002dd2:	e7cf      	b.n	8002d74 <phaseC+0x10>
		if (!slow_decay || prop_brake_active){
 8002dd4:	4b15      	ldr	r3, [pc, #84]	; (8002e2c <phaseC+0xc8>)
 8002dd6:	4a13      	ldr	r2, [pc, #76]	; (8002e24 <phaseC+0xc0>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d111      	bne.n	8002e02 <phaseC+0x9e>
 8002dde:	210c      	movs	r1, #12
 8002de0:	6813      	ldr	r3, [r2, #0]
 8002de2:	438b      	bics	r3, r1
 8002de4:	3908      	subs	r1, #8
 8002de6:	430b      	orrs	r3, r1
 8002de8:	6013      	str	r3, [r2, #0]
			GPIOB->BRR = GPIO_PIN_1;
 8002dea:	2302      	movs	r3, #2
 8002dec:	6293      	str	r3, [r2, #40]	; 0x28
 8002dee:	2190      	movs	r1, #144	; 0x90
 8002df0:	05c9      	lsls	r1, r1, #23
 8002df2:	680b      	ldr	r3, [r1, #0]
 8002df4:	4a0c      	ldr	r2, [pc, #48]	; (8002e28 <phaseC+0xc4>)
 8002df6:	401a      	ands	r2, r3
 8002df8:	2380      	movs	r3, #128	; 0x80
 8002dfa:	039b      	lsls	r3, r3, #14
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	600b      	str	r3, [r1, #0]
 8002e00:	e7b4      	b.n	8002d6c <phaseC+0x8>
		if (!slow_decay || prop_brake_active){
 8002e02:	4b0b      	ldr	r3, [pc, #44]	; (8002e30 <phaseC+0xcc>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1e9      	bne.n	8002dde <phaseC+0x7a>
 8002e0a:	210c      	movs	r1, #12
 8002e0c:	6813      	ldr	r3, [r2, #0]
 8002e0e:	438b      	bics	r3, r1
 8002e10:	3904      	subs	r1, #4
 8002e12:	430b      	orrs	r3, r1
 8002e14:	6013      	str	r3, [r2, #0]
 8002e16:	e7ea      	b.n	8002dee <phaseC+0x8a>
 8002e18:	2000002c 	.word	0x2000002c
 8002e1c:	20000018 	.word	0x20000018
 8002e20:	20000024 	.word	0x20000024
 8002e24:	48000400 	.word	0x48000400
 8002e28:	ffcfffff 	.word	0xffcfffff
 8002e2c:	20000038 	.word	0x20000038
 8002e30:	20000127 	.word	0x20000127

08002e34 <comStep>:

void comStep(int newStep) {
 8002e34:	b510      	push	{r4, lr}

	if (newStep == 1) {			//A-B
 8002e36:	2801      	cmp	r0, #1
 8002e38:	d02a      	beq.n	8002e90 <comStep+0x5c>
		phaseA(pwm);
		phaseB(lowside);
		phaseC(floating);
	}

	if (newStep == 2) {			// C-B
 8002e3a:	2802      	cmp	r0, #2
 8002e3c:	d02e      	beq.n	8002e9c <comStep+0x68>
		phaseA(floating);
		phaseB(lowside);
		phaseC(pwm);
	}

	if (newStep == 3) {		// C-A
 8002e3e:	2803      	cmp	r0, #3
 8002e40:	d039      	beq.n	8002eb6 <comStep+0x82>
		phaseA(lowside);
		phaseB(floating);
		phaseC(pwm);
	}

	if (newStep == 4) {    // B-A
 8002e42:	2804      	cmp	r0, #4
 8002e44:	d004      	beq.n	8002e50 <comStep+0x1c>
		phaseA(lowside);
		phaseB(pwm);
		phaseC(floating);
	}

	if (newStep == 5) {          // B-C
 8002e46:	2805      	cmp	r0, #5
 8002e48:	d01c      	beq.n	8002e84 <comStep+0x50>
		phaseA(floating);
		phaseB(pwm);
		phaseC(lowside);
	}

	if (newStep == 6) {       // A-C
 8002e4a:	2806      	cmp	r0, #6
 8002e4c:	d00d      	beq.n	8002e6a <comStep+0x36>
		phaseA(pwm);
		phaseB(floating);
		phaseC(lowside);
	}

}
 8002e4e:	bd10      	pop	{r4, pc}
		phaseA(lowside);
 8002e50:	4b1c      	ldr	r3, [pc, #112]	; (8002ec4 <comStep+0x90>)
 8002e52:	6818      	ldr	r0, [r3, #0]
 8002e54:	f7ff feb2 	bl	8002bbc <phaseA>
		phaseB(pwm);
 8002e58:	4b1b      	ldr	r3, [pc, #108]	; (8002ec8 <comStep+0x94>)
 8002e5a:	6818      	ldr	r0, [r3, #0]
 8002e5c:	f7ff ff14 	bl	8002c88 <phaseB>
		phaseC(floating);
 8002e60:	4b1a      	ldr	r3, [pc, #104]	; (8002ecc <comStep+0x98>)
 8002e62:	6818      	ldr	r0, [r3, #0]
 8002e64:	f7ff ff7e 	bl	8002d64 <phaseC>
 8002e68:	e7f1      	b.n	8002e4e <comStep+0x1a>
		phaseA(pwm);
 8002e6a:	4b17      	ldr	r3, [pc, #92]	; (8002ec8 <comStep+0x94>)
 8002e6c:	6818      	ldr	r0, [r3, #0]
 8002e6e:	f7ff fea5 	bl	8002bbc <phaseA>
		phaseB(floating);
 8002e72:	4b16      	ldr	r3, [pc, #88]	; (8002ecc <comStep+0x98>)
 8002e74:	6818      	ldr	r0, [r3, #0]
 8002e76:	f7ff ff07 	bl	8002c88 <phaseB>
		phaseC(lowside);
 8002e7a:	4b12      	ldr	r3, [pc, #72]	; (8002ec4 <comStep+0x90>)
 8002e7c:	6818      	ldr	r0, [r3, #0]
 8002e7e:	f7ff ff71 	bl	8002d64 <phaseC>
}
 8002e82:	e7e4      	b.n	8002e4e <comStep+0x1a>
		phaseA(floating);
 8002e84:	4b11      	ldr	r3, [pc, #68]	; (8002ecc <comStep+0x98>)
 8002e86:	6818      	ldr	r0, [r3, #0]
 8002e88:	f7ff fe98 	bl	8002bbc <phaseA>
		phaseB(pwm);
 8002e8c:	4b0e      	ldr	r3, [pc, #56]	; (8002ec8 <comStep+0x94>)
 8002e8e:	e7f1      	b.n	8002e74 <comStep+0x40>
		phaseA(pwm);
 8002e90:	4b0d      	ldr	r3, [pc, #52]	; (8002ec8 <comStep+0x94>)
 8002e92:	6818      	ldr	r0, [r3, #0]
 8002e94:	f7ff fe92 	bl	8002bbc <phaseA>
		phaseB(lowside);
 8002e98:	4b0a      	ldr	r3, [pc, #40]	; (8002ec4 <comStep+0x90>)
 8002e9a:	e7de      	b.n	8002e5a <comStep+0x26>
		phaseA(floating);
 8002e9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ecc <comStep+0x98>)
 8002e9e:	6818      	ldr	r0, [r3, #0]
 8002ea0:	f7ff fe8c 	bl	8002bbc <phaseA>
		phaseB(lowside);
 8002ea4:	4b07      	ldr	r3, [pc, #28]	; (8002ec4 <comStep+0x90>)
		phaseB(floating);
 8002ea6:	6818      	ldr	r0, [r3, #0]
 8002ea8:	f7ff feee 	bl	8002c88 <phaseB>
		phaseC(pwm);
 8002eac:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <comStep+0x94>)
 8002eae:	6818      	ldr	r0, [r3, #0]
 8002eb0:	f7ff ff58 	bl	8002d64 <phaseC>
 8002eb4:	e7cb      	b.n	8002e4e <comStep+0x1a>
		phaseA(lowside);
 8002eb6:	4b03      	ldr	r3, [pc, #12]	; (8002ec4 <comStep+0x90>)
 8002eb8:	6818      	ldr	r0, [r3, #0]
 8002eba:	f7ff fe7f 	bl	8002bbc <phaseA>
		phaseB(floating);
 8002ebe:	4b03      	ldr	r3, [pc, #12]	; (8002ecc <comStep+0x98>)
 8002ec0:	e7f1      	b.n	8002ea6 <comStep+0x72>
 8002ec2:	46c0      	nop			; (mov r8, r8)
 8002ec4:	20000024 	.word	0x20000024
 8002ec8:	2000002c 	.word	0x2000002c
 8002ecc:	20000018 	.word	0x20000018

08002ed0 <allOff>:

void allOff() {                   // coast
 8002ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ed2:	46de      	mov	lr, fp
 8002ed4:	4657      	mov	r7, sl
 8002ed6:	464e      	mov	r6, r9
 8002ed8:	4645      	mov	r5, r8
	phaseA(floating);
 8002eda:	4b82      	ldr	r3, [pc, #520]	; (80030e4 <allOff+0x214>)
void allOff() {                   // coast
 8002edc:	b5e0      	push	{r5, r6, r7, lr}
	phaseA(floating);
 8002ede:	469b      	mov	fp, r3
 8002ee0:	681a      	ldr	r2, [r3, #0]
	if (newPhase == pwm) {
 8002ee2:	4b81      	ldr	r3, [pc, #516]	; (80030e8 <allOff+0x218>)
 8002ee4:	6818      	ldr	r0, [r3, #0]
 8002ee6:	4282      	cmp	r2, r0
 8002ee8:	d100      	bne.n	8002eec <allOff+0x1c>
 8002eea:	e0c0      	b.n	800306e <allOff+0x19e>
 8002eec:	2703      	movs	r7, #3
 8002eee:	2101      	movs	r1, #1
 8002ef0:	4d7e      	ldr	r5, [pc, #504]	; (80030ec <allOff+0x21c>)
 8002ef2:	468c      	mov	ip, r1
 8002ef4:	682b      	ldr	r3, [r5, #0]
 8002ef6:	4e7e      	ldr	r6, [pc, #504]	; (80030f0 <allOff+0x220>)
 8002ef8:	43bb      	bics	r3, r7
 8002efa:	430b      	orrs	r3, r1
 8002efc:	602b      	str	r3, [r5, #0]
		GPIOB->BRR = GPIO_PIN_0;
 8002efe:	62a9      	str	r1, [r5, #40]	; 0x28
 8002f00:	2190      	movs	r1, #144	; 0x90
 8002f02:	05c9      	lsls	r1, r1, #23
 8002f04:	680b      	ldr	r3, [r1, #0]
 8002f06:	46b1      	mov	r9, r6
 8002f08:	4033      	ands	r3, r6
 8002f0a:	2680      	movs	r6, #128	; 0x80
 8002f0c:	02f6      	lsls	r6, r6, #11
 8002f0e:	4333      	orrs	r3, r6
 8002f10:	600b      	str	r3, [r1, #0]
		GPIOA->BRR = GPIO_PIN_9;
 8002f12:	2380      	movs	r3, #128	; 0x80
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	469a      	mov	sl, r3
 8002f18:	628b      	str	r3, [r1, #40]	; 0x28
	if (newPhase == lowside) {          // low mosfet on
 8002f1a:	4b76      	ldr	r3, [pc, #472]	; (80030f4 <allOff+0x224>)
 8002f1c:	46b0      	mov	r8, r6
 8002f1e:	681e      	ldr	r6, [r3, #0]
 8002f20:	42b2      	cmp	r2, r6
 8002f22:	d10d      	bne.n	8002f40 <allOff+0x70>
 8002f24:	4664      	mov	r4, ip
 8002f26:	682b      	ldr	r3, [r5, #0]
 8002f28:	43bb      	bics	r3, r7
 8002f2a:	4323      	orrs	r3, r4
 8002f2c:	602b      	str	r3, [r5, #0]
		GPIOB->BSRR = GPIO_PIN_0;
 8002f2e:	61ac      	str	r4, [r5, #24]
 8002f30:	464c      	mov	r4, r9
 8002f32:	680b      	ldr	r3, [r1, #0]
 8002f34:	4023      	ands	r3, r4
 8002f36:	4644      	mov	r4, r8
 8002f38:	431c      	orrs	r4, r3
		GPIOA->BRR = GPIO_PIN_9;
 8002f3a:	4653      	mov	r3, sl
 8002f3c:	600c      	str	r4, [r1, #0]
 8002f3e:	628b      	str	r3, [r1, #40]	; 0x28
	if (newPhase == pwm) {  // pwm
 8002f40:	0015      	movs	r5, r2
 8002f42:	4282      	cmp	r2, r0
 8002f44:	d100      	bne.n	8002f48 <allOff+0x78>
 8002f46:	e077      	b.n	8003038 <allOff+0x168>
 8002f48:	2390      	movs	r3, #144	; 0x90
 8002f4a:	2480      	movs	r4, #128	; 0x80
 8002f4c:	05db      	lsls	r3, r3, #23
 8002f4e:	6819      	ldr	r1, [r3, #0]
 8002f50:	4f69      	ldr	r7, [pc, #420]	; (80030f8 <allOff+0x228>)
 8002f52:	01e4      	lsls	r4, r4, #7
 8002f54:	4039      	ands	r1, r7
 8002f56:	4321      	orrs	r1, r4
 8002f58:	6019      	str	r1, [r3, #0]
		GPIOA->BRR = GPIO_PIN_7;
 8002f5a:	2180      	movs	r1, #128	; 0x80
 8002f5c:	6299      	str	r1, [r3, #40]	; 0x28
 8002f5e:	46a4      	mov	ip, r4
 8002f60:	4689      	mov	r9, r1
 8002f62:	4c66      	ldr	r4, [pc, #408]	; (80030fc <allOff+0x22c>)
 8002f64:	6819      	ldr	r1, [r3, #0]
 8002f66:	46a0      	mov	r8, r4
 8002f68:	4021      	ands	r1, r4
 8002f6a:	2480      	movs	r4, #128	; 0x80
 8002f6c:	0264      	lsls	r4, r4, #9
 8002f6e:	4321      	orrs	r1, r4
 8002f70:	6019      	str	r1, [r3, #0]
		GPIOA->BRR = GPIO_PIN_8;
 8002f72:	2180      	movs	r1, #128	; 0x80
 8002f74:	0049      	lsls	r1, r1, #1
 8002f76:	46a2      	mov	sl, r4
 8002f78:	6299      	str	r1, [r3, #40]	; 0x28
	if (newPhase == lowside) {              // lowside
 8002f7a:	42b2      	cmp	r2, r6
 8002f7c:	d10d      	bne.n	8002f9a <allOff+0xca>
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	4644      	mov	r4, r8
 8002f82:	4017      	ands	r7, r2
 8002f84:	4662      	mov	r2, ip
 8002f86:	433a      	orrs	r2, r7
 8002f88:	601a      	str	r2, [r3, #0]
		GPIOA->BSRR = GPIO_PIN_7;
 8002f8a:	464a      	mov	r2, r9
 8002f8c:	619a      	str	r2, [r3, #24]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	4022      	ands	r2, r4
 8002f92:	4654      	mov	r4, sl
 8002f94:	4314      	orrs	r4, r2
 8002f96:	601c      	str	r4, [r3, #0]
		GPIOA->BRR = GPIO_PIN_8;
 8002f98:	6299      	str	r1, [r3, #40]	; 0x28
	if (newPhase == pwm) {
 8002f9a:	42a8      	cmp	r0, r5
 8002f9c:	d031      	beq.n	8003002 <allOff+0x132>
 8002f9e:	210c      	movs	r1, #12
 8002fa0:	4a52      	ldr	r2, [pc, #328]	; (80030ec <allOff+0x21c>)
 8002fa2:	6813      	ldr	r3, [r2, #0]
 8002fa4:	438b      	bics	r3, r1
 8002fa6:	3908      	subs	r1, #8
 8002fa8:	430b      	orrs	r3, r1
 8002faa:	6013      	str	r3, [r2, #0]
		GPIOB->BRR = GPIO_PIN_1;
 8002fac:	2302      	movs	r3, #2
 8002fae:	6293      	str	r3, [r2, #40]	; 0x28
 8002fb0:	2390      	movs	r3, #144	; 0x90
 8002fb2:	05db      	lsls	r3, r3, #23
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	4952      	ldr	r1, [pc, #328]	; (8003100 <allOff+0x230>)
 8002fb8:	4011      	ands	r1, r2
 8002fba:	2280      	movs	r2, #128	; 0x80
 8002fbc:	0352      	lsls	r2, r2, #13
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_10;
 8002fc2:	2280      	movs	r2, #128	; 0x80
 8002fc4:	00d2      	lsls	r2, r2, #3
 8002fc6:	629a      	str	r2, [r3, #40]	; 0x28
	if (newPhase == lowside) {
 8002fc8:	42ae      	cmp	r6, r5
 8002fca:	d114      	bne.n	8002ff6 <allOff+0x126>
 8002fcc:	210c      	movs	r1, #12
 8002fce:	4a47      	ldr	r2, [pc, #284]	; (80030ec <allOff+0x21c>)
 8002fd0:	6813      	ldr	r3, [r2, #0]
 8002fd2:	438b      	bics	r3, r1
 8002fd4:	3908      	subs	r1, #8
 8002fd6:	430b      	orrs	r3, r1
 8002fd8:	6013      	str	r3, [r2, #0]
		GPIOB->BSRR = GPIO_PIN_1;
 8002fda:	2302      	movs	r3, #2
 8002fdc:	6193      	str	r3, [r2, #24]
 8002fde:	2390      	movs	r3, #144	; 0x90
 8002fe0:	05db      	lsls	r3, r3, #23
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	4946      	ldr	r1, [pc, #280]	; (8003100 <allOff+0x230>)
 8002fe6:	4011      	ands	r1, r2
 8002fe8:	2280      	movs	r2, #128	; 0x80
 8002fea:	0352      	lsls	r2, r2, #13
 8002fec:	430a      	orrs	r2, r1
 8002fee:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_10;
 8002ff0:	2280      	movs	r2, #128	; 0x80
 8002ff2:	00d2      	lsls	r2, r2, #3
 8002ff4:	629a      	str	r2, [r3, #40]	; 0x28
	phaseB(floating);
	phaseC(floating);
}
 8002ff6:	bc3c      	pop	{r2, r3, r4, r5}
 8002ff8:	4690      	mov	r8, r2
 8002ffa:	4699      	mov	r9, r3
 8002ffc:	46a2      	mov	sl, r4
 8002ffe:	46ab      	mov	fp, r5
 8003000:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!slow_decay || prop_brake_active){
 8003002:	4b40      	ldr	r3, [pc, #256]	; (8003104 <allOff+0x234>)
 8003004:	4a39      	ldr	r2, [pc, #228]	; (80030ec <allOff+0x21c>)
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d15f      	bne.n	80030cc <allOff+0x1fc>
 800300c:	210c      	movs	r1, #12
 800300e:	6813      	ldr	r3, [r2, #0]
 8003010:	438b      	bics	r3, r1
 8003012:	3908      	subs	r1, #8
 8003014:	430b      	orrs	r3, r1
 8003016:	6013      	str	r3, [r2, #0]
			GPIOB->BRR = GPIO_PIN_1;
 8003018:	2302      	movs	r3, #2
 800301a:	6293      	str	r3, [r2, #40]	; 0x28
 800301c:	2190      	movs	r1, #144	; 0x90
 800301e:	05c9      	lsls	r1, r1, #23
 8003020:	680b      	ldr	r3, [r1, #0]
 8003022:	4a37      	ldr	r2, [pc, #220]	; (8003100 <allOff+0x230>)
 8003024:	401a      	ands	r2, r3
 8003026:	2380      	movs	r3, #128	; 0x80
 8003028:	039b      	lsls	r3, r3, #14
 800302a:	4313      	orrs	r3, r2
 800302c:	600b      	str	r3, [r1, #0]
	if (newPhase == floating) {
 800302e:	465b      	mov	r3, fp
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	42ab      	cmp	r3, r5
 8003034:	d1c8      	bne.n	8002fc8 <allOff+0xf8>
 8003036:	e7b2      	b.n	8002f9e <allOff+0xce>
		if (!slow_decay || prop_brake_active){
 8003038:	4b32      	ldr	r3, [pc, #200]	; (8003104 <allOff+0x234>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d137      	bne.n	80030b0 <allOff+0x1e0>
 8003040:	2390      	movs	r3, #144	; 0x90
 8003042:	05db      	lsls	r3, r3, #23
 8003044:	6819      	ldr	r1, [r3, #0]
 8003046:	4d2c      	ldr	r5, [pc, #176]	; (80030f8 <allOff+0x228>)
 8003048:	400d      	ands	r5, r1
 800304a:	2180      	movs	r1, #128	; 0x80
 800304c:	01c9      	lsls	r1, r1, #7
 800304e:	4329      	orrs	r1, r5
 8003050:	6019      	str	r1, [r3, #0]
			GPIOA->BRR = GPIO_PIN_7;
 8003052:	2180      	movs	r1, #128	; 0x80
 8003054:	6299      	str	r1, [r3, #40]	; 0x28
 8003056:	2590      	movs	r5, #144	; 0x90
 8003058:	05ed      	lsls	r5, r5, #23
 800305a:	682b      	ldr	r3, [r5, #0]
 800305c:	4927      	ldr	r1, [pc, #156]	; (80030fc <allOff+0x22c>)
 800305e:	4019      	ands	r1, r3
 8003060:	2380      	movs	r3, #128	; 0x80
 8003062:	029b      	lsls	r3, r3, #10
 8003064:	430b      	orrs	r3, r1
 8003066:	602b      	str	r3, [r5, #0]
 8003068:	0005      	movs	r5, r0
 800306a:	0010      	movs	r0, r2
 800306c:	e76c      	b.n	8002f48 <allOff+0x78>
		if(!slow_decay  || prop_brake_active){            // for future
 800306e:	4b25      	ldr	r3, [pc, #148]	; (8003104 <allOff+0x234>)
 8003070:	491e      	ldr	r1, [pc, #120]	; (80030ec <allOff+0x21c>)
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d110      	bne.n	800309a <allOff+0x1ca>
 8003078:	2503      	movs	r5, #3
 800307a:	680b      	ldr	r3, [r1, #0]
 800307c:	43ab      	bics	r3, r5
 800307e:	3d02      	subs	r5, #2
 8003080:	432b      	orrs	r3, r5
 8003082:	600b      	str	r3, [r1, #0]
		GPIOB->BRR = GPIO_PIN_0;
 8003084:	628d      	str	r5, [r1, #40]	; 0x28
 8003086:	2590      	movs	r5, #144	; 0x90
 8003088:	05ed      	lsls	r5, r5, #23
 800308a:	682b      	ldr	r3, [r5, #0]
 800308c:	4918      	ldr	r1, [pc, #96]	; (80030f0 <allOff+0x220>)
 800308e:	4019      	ands	r1, r3
 8003090:	2380      	movs	r3, #128	; 0x80
 8003092:	031b      	lsls	r3, r3, #12
 8003094:	430b      	orrs	r3, r1
 8003096:	602b      	str	r3, [r5, #0]
 8003098:	e728      	b.n	8002eec <allOff+0x1c>
		if(!slow_decay  || prop_brake_active){            // for future
 800309a:	4b1b      	ldr	r3, [pc, #108]	; (8003108 <allOff+0x238>)
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1ea      	bne.n	8003078 <allOff+0x1a8>
 80030a2:	2503      	movs	r5, #3
 80030a4:	680b      	ldr	r3, [r1, #0]
 80030a6:	43ab      	bics	r3, r5
 80030a8:	3d01      	subs	r5, #1
 80030aa:	432b      	orrs	r3, r5
 80030ac:	600b      	str	r3, [r1, #0]
 80030ae:	e7ea      	b.n	8003086 <allOff+0x1b6>
		if (!slow_decay || prop_brake_active){
 80030b0:	4b15      	ldr	r3, [pc, #84]	; (8003108 <allOff+0x238>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1c3      	bne.n	8003040 <allOff+0x170>
 80030b8:	2590      	movs	r5, #144	; 0x90
 80030ba:	05ed      	lsls	r5, r5, #23
 80030bc:	682b      	ldr	r3, [r5, #0]
 80030be:	490e      	ldr	r1, [pc, #56]	; (80030f8 <allOff+0x228>)
 80030c0:	4019      	ands	r1, r3
 80030c2:	2380      	movs	r3, #128	; 0x80
 80030c4:	021b      	lsls	r3, r3, #8
 80030c6:	430b      	orrs	r3, r1
 80030c8:	602b      	str	r3, [r5, #0]
 80030ca:	e7c4      	b.n	8003056 <allOff+0x186>
		if (!slow_decay || prop_brake_active){
 80030cc:	4b0e      	ldr	r3, [pc, #56]	; (8003108 <allOff+0x238>)
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d19b      	bne.n	800300c <allOff+0x13c>
 80030d4:	210c      	movs	r1, #12
 80030d6:	6813      	ldr	r3, [r2, #0]
 80030d8:	438b      	bics	r3, r1
 80030da:	3904      	subs	r1, #4
 80030dc:	430b      	orrs	r3, r1
 80030de:	6013      	str	r3, [r2, #0]
 80030e0:	e79c      	b.n	800301c <allOff+0x14c>
 80030e2:	46c0      	nop			; (mov r8, r8)
 80030e4:	20000018 	.word	0x20000018
 80030e8:	2000002c 	.word	0x2000002c
 80030ec:	48000400 	.word	0x48000400
 80030f0:	fff3ffff 	.word	0xfff3ffff
 80030f4:	20000024 	.word	0x20000024
 80030f8:	ffff3fff 	.word	0xffff3fff
 80030fc:	fffcffff 	.word	0xfffcffff
 8003100:	ffcfffff 	.word	0xffcfffff
 8003104:	20000038 	.word	0x20000038
 8003108:	20000127 	.word	0x20000127

0800310c <fullBrake>:

void fullBrake(){                     // full braking shorting all low sides
 800310c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (newPhase == pwm) {
 800310e:	4b8b      	ldr	r3, [pc, #556]	; (800333c <fullBrake+0x230>)
	phaseA(lowside);
 8003110:	4d8b      	ldr	r5, [pc, #556]	; (8003340 <fullBrake+0x234>)
	if (newPhase == pwm) {
 8003112:	681a      	ldr	r2, [r3, #0]
	phaseA(lowside);
 8003114:	6829      	ldr	r1, [r5, #0]
	if (newPhase == pwm) {
 8003116:	4291      	cmp	r1, r2
 8003118:	d100      	bne.n	800311c <fullBrake+0x10>
 800311a:	e0cd      	b.n	80032b8 <fullBrake+0x1ac>
	if (newPhase == floating) {
 800311c:	4b89      	ldr	r3, [pc, #548]	; (8003344 <fullBrake+0x238>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4299      	cmp	r1, r3
 8003122:	d04a      	beq.n	80031ba <fullBrake+0xae>
 8003124:	2603      	movs	r6, #3
 8003126:	4c88      	ldr	r4, [pc, #544]	; (8003348 <fullBrake+0x23c>)
 8003128:	6820      	ldr	r0, [r4, #0]
 800312a:	43b0      	bics	r0, r6
 800312c:	3e02      	subs	r6, #2
 800312e:	4330      	orrs	r0, r6
 8003130:	6020      	str	r0, [r4, #0]
 8003132:	2090      	movs	r0, #144	; 0x90
		GPIOB->BSRR = GPIO_PIN_0;
 8003134:	61a6      	str	r6, [r4, #24]
 8003136:	05c0      	lsls	r0, r0, #23
 8003138:	6804      	ldr	r4, [r0, #0]
 800313a:	4e84      	ldr	r6, [pc, #528]	; (800334c <fullBrake+0x240>)
 800313c:	4026      	ands	r6, r4
 800313e:	2480      	movs	r4, #128	; 0x80
 8003140:	02e4      	lsls	r4, r4, #11
 8003142:	4334      	orrs	r4, r6
 8003144:	6004      	str	r4, [r0, #0]
		GPIOA->BRR = GPIO_PIN_9;
 8003146:	2480      	movs	r4, #128	; 0x80
 8003148:	001e      	movs	r6, r3
 800314a:	000b      	movs	r3, r1
 800314c:	00a4      	lsls	r4, r4, #2
 800314e:	6284      	str	r4, [r0, #40]	; 0x28
	if (newPhase == pwm) {  // pwm
 8003150:	4293      	cmp	r3, r2
 8003152:	d100      	bne.n	8003156 <fullBrake+0x4a>
 8003154:	e092      	b.n	800327c <fullBrake+0x170>
	if (newPhase == floating) {            // floating
 8003156:	42b3      	cmp	r3, r6
 8003158:	d100      	bne.n	800315c <fullBrake+0x50>
 800315a:	e079      	b.n	8003250 <fullBrake+0x144>
 800315c:	2190      	movs	r1, #144	; 0x90
 800315e:	05c9      	lsls	r1, r1, #23
 8003160:	6808      	ldr	r0, [r1, #0]
 8003162:	4c7b      	ldr	r4, [pc, #492]	; (8003350 <fullBrake+0x244>)
 8003164:	4004      	ands	r4, r0
 8003166:	2080      	movs	r0, #128	; 0x80
 8003168:	01c0      	lsls	r0, r0, #7
 800316a:	4320      	orrs	r0, r4
 800316c:	6008      	str	r0, [r1, #0]
		GPIOA->BSRR = GPIO_PIN_7;
 800316e:	2080      	movs	r0, #128	; 0x80
 8003170:	6188      	str	r0, [r1, #24]
 8003172:	6808      	ldr	r0, [r1, #0]
 8003174:	4c77      	ldr	r4, [pc, #476]	; (8003354 <fullBrake+0x248>)
 8003176:	4004      	ands	r4, r0
 8003178:	2080      	movs	r0, #128	; 0x80
 800317a:	0240      	lsls	r0, r0, #9
 800317c:	4320      	orrs	r0, r4
 800317e:	6008      	str	r0, [r1, #0]
		GPIOA->BRR = GPIO_PIN_8;
 8003180:	2080      	movs	r0, #128	; 0x80
 8003182:	0040      	lsls	r0, r0, #1
 8003184:	6288      	str	r0, [r1, #40]	; 0x28
	if (newPhase == pwm) {
 8003186:	4293      	cmp	r3, r2
 8003188:	d030      	beq.n	80031ec <fullBrake+0xe0>
	if (newPhase == floating) {
 800318a:	42b3      	cmp	r3, r6
 800318c:	d046      	beq.n	800321c <fullBrake+0x110>
 800318e:	210c      	movs	r1, #12
 8003190:	4a6d      	ldr	r2, [pc, #436]	; (8003348 <fullBrake+0x23c>)
 8003192:	6813      	ldr	r3, [r2, #0]
 8003194:	438b      	bics	r3, r1
 8003196:	3908      	subs	r1, #8
 8003198:	430b      	orrs	r3, r1
 800319a:	6013      	str	r3, [r2, #0]
		GPIOB->BSRR = GPIO_PIN_1;
 800319c:	2302      	movs	r3, #2
 800319e:	6193      	str	r3, [r2, #24]
 80031a0:	2390      	movs	r3, #144	; 0x90
 80031a2:	05db      	lsls	r3, r3, #23
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	496c      	ldr	r1, [pc, #432]	; (8003358 <fullBrake+0x24c>)
 80031a8:	4011      	ands	r1, r2
 80031aa:	2280      	movs	r2, #128	; 0x80
 80031ac:	0352      	lsls	r2, r2, #13
 80031ae:	430a      	orrs	r2, r1
 80031b0:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_10;
 80031b2:	2280      	movs	r2, #128	; 0x80
 80031b4:	00d2      	lsls	r2, r2, #3
 80031b6:	629a      	str	r2, [r3, #40]	; 0x28
	phaseB(lowside);
	phaseC(lowside);
}
 80031b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (newPhase == floating) {
 80031ba:	000e      	movs	r6, r1
 80031bc:	2703      	movs	r7, #3
 80031be:	4c62      	ldr	r4, [pc, #392]	; (8003348 <fullBrake+0x23c>)
 80031c0:	6820      	ldr	r0, [r4, #0]
 80031c2:	43b8      	bics	r0, r7
 80031c4:	3f02      	subs	r7, #2
 80031c6:	4338      	orrs	r0, r7
 80031c8:	6020      	str	r0, [r4, #0]
 80031ca:	2090      	movs	r0, #144	; 0x90
		GPIOB->BRR = GPIO_PIN_0;
 80031cc:	62a7      	str	r7, [r4, #40]	; 0x28
 80031ce:	05c0      	lsls	r0, r0, #23
 80031d0:	6804      	ldr	r4, [r0, #0]
 80031d2:	4f5e      	ldr	r7, [pc, #376]	; (800334c <fullBrake+0x240>)
 80031d4:	4027      	ands	r7, r4
 80031d6:	2480      	movs	r4, #128	; 0x80
 80031d8:	02e4      	lsls	r4, r4, #11
 80031da:	433c      	orrs	r4, r7
 80031dc:	6004      	str	r4, [r0, #0]
		GPIOA->BRR = GPIO_PIN_9;
 80031de:	2480      	movs	r4, #128	; 0x80
 80031e0:	00a4      	lsls	r4, r4, #2
 80031e2:	6284      	str	r4, [r0, #40]	; 0x28
	if (newPhase == lowside) {          // low mosfet on
 80031e4:	4299      	cmp	r1, r3
 80031e6:	d1b3      	bne.n	8003150 <fullBrake+0x44>
 80031e8:	0033      	movs	r3, r6
 80031ea:	e79b      	b.n	8003124 <fullBrake+0x18>
		if (!slow_decay || prop_brake_active){
 80031ec:	4a5b      	ldr	r2, [pc, #364]	; (800335c <fullBrake+0x250>)
 80031ee:	4956      	ldr	r1, [pc, #344]	; (8003348 <fullBrake+0x23c>)
 80031f0:	7812      	ldrb	r2, [r2, #0]
 80031f2:	2a00      	cmp	r2, #0
 80031f4:	d17d      	bne.n	80032f2 <fullBrake+0x1e6>
 80031f6:	200c      	movs	r0, #12
 80031f8:	680a      	ldr	r2, [r1, #0]
 80031fa:	4382      	bics	r2, r0
 80031fc:	3808      	subs	r0, #8
 80031fe:	4302      	orrs	r2, r0
 8003200:	600a      	str	r2, [r1, #0]
			GPIOB->BRR = GPIO_PIN_1;
 8003202:	2202      	movs	r2, #2
 8003204:	628a      	str	r2, [r1, #40]	; 0x28
 8003206:	2090      	movs	r0, #144	; 0x90
 8003208:	05c0      	lsls	r0, r0, #23
 800320a:	6802      	ldr	r2, [r0, #0]
 800320c:	4952      	ldr	r1, [pc, #328]	; (8003358 <fullBrake+0x24c>)
 800320e:	4011      	ands	r1, r2
 8003210:	2280      	movs	r2, #128	; 0x80
 8003212:	0392      	lsls	r2, r2, #14
 8003214:	430a      	orrs	r2, r1
 8003216:	6002      	str	r2, [r0, #0]
	if (newPhase == floating) {
 8003218:	42b3      	cmp	r3, r6
 800321a:	d114      	bne.n	8003246 <fullBrake+0x13a>
 800321c:	200c      	movs	r0, #12
 800321e:	494a      	ldr	r1, [pc, #296]	; (8003348 <fullBrake+0x23c>)
 8003220:	680a      	ldr	r2, [r1, #0]
 8003222:	4382      	bics	r2, r0
 8003224:	3808      	subs	r0, #8
 8003226:	4302      	orrs	r2, r0
 8003228:	600a      	str	r2, [r1, #0]
		GPIOB->BRR = GPIO_PIN_1;
 800322a:	2202      	movs	r2, #2
 800322c:	628a      	str	r2, [r1, #40]	; 0x28
 800322e:	2290      	movs	r2, #144	; 0x90
 8003230:	05d2      	lsls	r2, r2, #23
 8003232:	6811      	ldr	r1, [r2, #0]
 8003234:	4848      	ldr	r0, [pc, #288]	; (8003358 <fullBrake+0x24c>)
 8003236:	4008      	ands	r0, r1
 8003238:	2180      	movs	r1, #128	; 0x80
 800323a:	0349      	lsls	r1, r1, #13
 800323c:	4301      	orrs	r1, r0
 800323e:	6011      	str	r1, [r2, #0]
		GPIOA->BRR = GPIO_PIN_10;
 8003240:	2180      	movs	r1, #128	; 0x80
 8003242:	00c9      	lsls	r1, r1, #3
 8003244:	6291      	str	r1, [r2, #40]	; 0x28
	if (newPhase == lowside) {
 8003246:	682a      	ldr	r2, [r5, #0]
 8003248:	4293      	cmp	r3, r2
 800324a:	d1b5      	bne.n	80031b8 <fullBrake+0xac>
 800324c:	e79f      	b.n	800318e <fullBrake+0x82>
	if (newPhase == floating) {            // floating
 800324e:	000a      	movs	r2, r1
 8003250:	2190      	movs	r1, #144	; 0x90
 8003252:	05c9      	lsls	r1, r1, #23
 8003254:	6808      	ldr	r0, [r1, #0]
 8003256:	4c3e      	ldr	r4, [pc, #248]	; (8003350 <fullBrake+0x244>)
 8003258:	4004      	ands	r4, r0
 800325a:	2080      	movs	r0, #128	; 0x80
 800325c:	01c0      	lsls	r0, r0, #7
 800325e:	4320      	orrs	r0, r4
 8003260:	6008      	str	r0, [r1, #0]
		GPIOA->BRR = GPIO_PIN_7;
 8003262:	2080      	movs	r0, #128	; 0x80
 8003264:	6288      	str	r0, [r1, #40]	; 0x28
 8003266:	6808      	ldr	r0, [r1, #0]
 8003268:	4c3a      	ldr	r4, [pc, #232]	; (8003354 <fullBrake+0x248>)
 800326a:	4004      	ands	r4, r0
 800326c:	2080      	movs	r0, #128	; 0x80
 800326e:	0240      	lsls	r0, r0, #9
 8003270:	4320      	orrs	r0, r4
 8003272:	6008      	str	r0, [r1, #0]
		GPIOA->BRR = GPIO_PIN_8;
 8003274:	2080      	movs	r0, #128	; 0x80
 8003276:	0040      	lsls	r0, r0, #1
 8003278:	6288      	str	r0, [r1, #40]	; 0x28
 800327a:	e76f      	b.n	800315c <fullBrake+0x50>
		if (!slow_decay || prop_brake_active){
 800327c:	4937      	ldr	r1, [pc, #220]	; (800335c <fullBrake+0x250>)
 800327e:	7809      	ldrb	r1, [r1, #0]
 8003280:	2900      	cmp	r1, #0
 8003282:	d14d      	bne.n	8003320 <fullBrake+0x214>
 8003284:	2190      	movs	r1, #144	; 0x90
 8003286:	05c9      	lsls	r1, r1, #23
 8003288:	6808      	ldr	r0, [r1, #0]
 800328a:	4c31      	ldr	r4, [pc, #196]	; (8003350 <fullBrake+0x244>)
 800328c:	4004      	ands	r4, r0
 800328e:	2080      	movs	r0, #128	; 0x80
 8003290:	01c0      	lsls	r0, r0, #7
 8003292:	4320      	orrs	r0, r4
 8003294:	6008      	str	r0, [r1, #0]
			GPIOA->BRR = GPIO_PIN_7;
 8003296:	2080      	movs	r0, #128	; 0x80
 8003298:	6288      	str	r0, [r1, #40]	; 0x28
 800329a:	2490      	movs	r4, #144	; 0x90
 800329c:	05e4      	lsls	r4, r4, #23
 800329e:	6821      	ldr	r1, [r4, #0]
 80032a0:	482c      	ldr	r0, [pc, #176]	; (8003354 <fullBrake+0x248>)
 80032a2:	4008      	ands	r0, r1
 80032a4:	2180      	movs	r1, #128	; 0x80
 80032a6:	0289      	lsls	r1, r1, #10
 80032a8:	4301      	orrs	r1, r0
 80032aa:	6021      	str	r1, [r4, #0]
	if (newPhase == floating) {            // floating
 80032ac:	0019      	movs	r1, r3
 80032ae:	0013      	movs	r3, r2
 80032b0:	42b2      	cmp	r2, r6
 80032b2:	d0cc      	beq.n	800324e <fullBrake+0x142>
 80032b4:	000a      	movs	r2, r1
 80032b6:	e751      	b.n	800315c <fullBrake+0x50>
		if(!slow_decay  || prop_brake_active){            // for future
 80032b8:	4b28      	ldr	r3, [pc, #160]	; (800335c <fullBrake+0x250>)
 80032ba:	4823      	ldr	r0, [pc, #140]	; (8003348 <fullBrake+0x23c>)
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d123      	bne.n	800330a <fullBrake+0x1fe>
 80032c2:	2403      	movs	r4, #3
 80032c4:	6803      	ldr	r3, [r0, #0]
 80032c6:	43a3      	bics	r3, r4
 80032c8:	3c02      	subs	r4, #2
 80032ca:	4323      	orrs	r3, r4
 80032cc:	6003      	str	r3, [r0, #0]
		GPIOB->BRR = GPIO_PIN_0;
 80032ce:	6284      	str	r4, [r0, #40]	; 0x28
 80032d0:	2490      	movs	r4, #144	; 0x90
 80032d2:	05e4      	lsls	r4, r4, #23
 80032d4:	6823      	ldr	r3, [r4, #0]
 80032d6:	481d      	ldr	r0, [pc, #116]	; (800334c <fullBrake+0x240>)
 80032d8:	4018      	ands	r0, r3
 80032da:	2380      	movs	r3, #128	; 0x80
 80032dc:	031b      	lsls	r3, r3, #12
 80032de:	4303      	orrs	r3, r0
 80032e0:	6023      	str	r3, [r4, #0]
	if (newPhase == floating) {
 80032e2:	4b18      	ldr	r3, [pc, #96]	; (8003344 <fullBrake+0x238>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d000      	beq.n	80032ec <fullBrake+0x1e0>
 80032ea:	e71b      	b.n	8003124 <fullBrake+0x18>
 80032ec:	0016      	movs	r6, r2
 80032ee:	000b      	movs	r3, r1
 80032f0:	e764      	b.n	80031bc <fullBrake+0xb0>
		if (!slow_decay || prop_brake_active){
 80032f2:	4a1b      	ldr	r2, [pc, #108]	; (8003360 <fullBrake+0x254>)
 80032f4:	7812      	ldrb	r2, [r2, #0]
 80032f6:	2a00      	cmp	r2, #0
 80032f8:	d000      	beq.n	80032fc <fullBrake+0x1f0>
 80032fa:	e77c      	b.n	80031f6 <fullBrake+0xea>
 80032fc:	200c      	movs	r0, #12
 80032fe:	680a      	ldr	r2, [r1, #0]
 8003300:	4382      	bics	r2, r0
 8003302:	3804      	subs	r0, #4
 8003304:	4302      	orrs	r2, r0
 8003306:	600a      	str	r2, [r1, #0]
 8003308:	e77d      	b.n	8003206 <fullBrake+0xfa>
		if(!slow_decay  || prop_brake_active){            // for future
 800330a:	4b15      	ldr	r3, [pc, #84]	; (8003360 <fullBrake+0x254>)
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1d7      	bne.n	80032c2 <fullBrake+0x1b6>
 8003312:	2403      	movs	r4, #3
 8003314:	6803      	ldr	r3, [r0, #0]
 8003316:	43a3      	bics	r3, r4
 8003318:	3c01      	subs	r4, #1
 800331a:	4323      	orrs	r3, r4
 800331c:	6003      	str	r3, [r0, #0]
 800331e:	e7d7      	b.n	80032d0 <fullBrake+0x1c4>
		if (!slow_decay || prop_brake_active){
 8003320:	490f      	ldr	r1, [pc, #60]	; (8003360 <fullBrake+0x254>)
 8003322:	7809      	ldrb	r1, [r1, #0]
 8003324:	2900      	cmp	r1, #0
 8003326:	d1ad      	bne.n	8003284 <fullBrake+0x178>
 8003328:	2490      	movs	r4, #144	; 0x90
 800332a:	05e4      	lsls	r4, r4, #23
 800332c:	6821      	ldr	r1, [r4, #0]
 800332e:	4808      	ldr	r0, [pc, #32]	; (8003350 <fullBrake+0x244>)
 8003330:	4008      	ands	r0, r1
 8003332:	2180      	movs	r1, #128	; 0x80
 8003334:	0209      	lsls	r1, r1, #8
 8003336:	4301      	orrs	r1, r0
 8003338:	6021      	str	r1, [r4, #0]
 800333a:	e7ae      	b.n	800329a <fullBrake+0x18e>
 800333c:	2000002c 	.word	0x2000002c
 8003340:	20000024 	.word	0x20000024
 8003344:	20000018 	.word	0x20000018
 8003348:	48000400 	.word	0x48000400
 800334c:	fff3ffff 	.word	0xfff3ffff
 8003350:	ffff3fff 	.word	0xffff3fff
 8003354:	fffcffff 	.word	0xfffcffff
 8003358:	ffcfffff 	.word	0xffcfffff
 800335c:	20000038 	.word	0x20000038
 8003360:	20000127 	.word	0x20000127

08003364 <proBrake>:

void proBrake(){                    // duty cycle controls braking strength
 8003364:	b5f0      	push	{r4, r5, r6, r7, lr}
		if(!slow_decay  || prop_brake_active){            // for future
 8003366:	4a78      	ldr	r2, [pc, #480]	; (8003548 <proBrake+0x1e4>)
//	prop_brake_active = 1;       // will turn off lower fets so only high side is active
	phaseA(pwm);
 8003368:	4b78      	ldr	r3, [pc, #480]	; (800354c <proBrake+0x1e8>)
		if(!slow_decay  || prop_brake_active){            // for future
 800336a:	7814      	ldrb	r4, [r2, #0]
	phaseA(pwm);
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4978      	ldr	r1, [pc, #480]	; (8003550 <proBrake+0x1ec>)
		if(!slow_decay  || prop_brake_active){            // for future
 8003370:	2c00      	cmp	r4, #0
 8003372:	d004      	beq.n	800337e <proBrake+0x1a>
 8003374:	4a77      	ldr	r2, [pc, #476]	; (8003554 <proBrake+0x1f0>)
 8003376:	7812      	ldrb	r2, [r2, #0]
 8003378:	2a00      	cmp	r2, #0
 800337a:	d100      	bne.n	800337e <proBrake+0x1a>
 800337c:	e0dd      	b.n	800353a <proBrake+0x1d6>
 800337e:	2003      	movs	r0, #3
 8003380:	680a      	ldr	r2, [r1, #0]
 8003382:	4382      	bics	r2, r0
 8003384:	3802      	subs	r0, #2
 8003386:	4302      	orrs	r2, r0
 8003388:	600a      	str	r2, [r1, #0]
		GPIOB->BRR = GPIO_PIN_0;
 800338a:	6288      	str	r0, [r1, #40]	; 0x28
 800338c:	2590      	movs	r5, #144	; 0x90
 800338e:	2280      	movs	r2, #128	; 0x80
 8003390:	05ed      	lsls	r5, r5, #23
 8003392:	6829      	ldr	r1, [r5, #0]
 8003394:	4e70      	ldr	r6, [pc, #448]	; (8003558 <proBrake+0x1f4>)
 8003396:	0312      	lsls	r2, r2, #12
 8003398:	4031      	ands	r1, r6
 800339a:	430a      	orrs	r2, r1
 800339c:	602a      	str	r2, [r5, #0]
	if (newPhase == floating) {
 800339e:	4a6f      	ldr	r2, [pc, #444]	; (800355c <proBrake+0x1f8>)
 80033a0:	6810      	ldr	r0, [r2, #0]
 80033a2:	4283      	cmp	r3, r0
 80033a4:	d100      	bne.n	80033a8 <proBrake+0x44>
 80033a6:	e07e      	b.n	80034a6 <proBrake+0x142>
	if (newPhase == lowside) {          // low mosfet on
 80033a8:	4a6d      	ldr	r2, [pc, #436]	; (8003560 <proBrake+0x1fc>)
 80033aa:	6811      	ldr	r1, [r2, #0]
 80033ac:	428b      	cmp	r3, r1
 80033ae:	d113      	bne.n	80033d8 <proBrake+0x74>
 80033b0:	2603      	movs	r6, #3
 80033b2:	4d67      	ldr	r5, [pc, #412]	; (8003550 <proBrake+0x1ec>)
 80033b4:	682a      	ldr	r2, [r5, #0]
 80033b6:	43b2      	bics	r2, r6
 80033b8:	3e02      	subs	r6, #2
 80033ba:	4332      	orrs	r2, r6
 80033bc:	602a      	str	r2, [r5, #0]
 80033be:	2290      	movs	r2, #144	; 0x90
		GPIOB->BSRR = GPIO_PIN_0;
 80033c0:	61ae      	str	r6, [r5, #24]
 80033c2:	05d2      	lsls	r2, r2, #23
 80033c4:	6815      	ldr	r5, [r2, #0]
 80033c6:	4e64      	ldr	r6, [pc, #400]	; (8003558 <proBrake+0x1f4>)
 80033c8:	402e      	ands	r6, r5
 80033ca:	2580      	movs	r5, #128	; 0x80
 80033cc:	02ed      	lsls	r5, r5, #11
 80033ce:	4335      	orrs	r5, r6
 80033d0:	6015      	str	r5, [r2, #0]
		GPIOA->BRR = GPIO_PIN_9;
 80033d2:	2580      	movs	r5, #128	; 0x80
 80033d4:	00ad      	lsls	r5, r5, #2
 80033d6:	6295      	str	r5, [r2, #40]	; 0x28
		if (!slow_decay || prop_brake_active){
 80033d8:	2c00      	cmp	r4, #0
 80033da:	d004      	beq.n	80033e6 <proBrake+0x82>
 80033dc:	4a5d      	ldr	r2, [pc, #372]	; (8003554 <proBrake+0x1f0>)
 80033de:	7812      	ldrb	r2, [r2, #0]
 80033e0:	2a00      	cmp	r2, #0
 80033e2:	d100      	bne.n	80033e6 <proBrake+0x82>
 80033e4:	e09f      	b.n	8003526 <proBrake+0x1c2>
 80033e6:	2290      	movs	r2, #144	; 0x90
 80033e8:	05d2      	lsls	r2, r2, #23
 80033ea:	6815      	ldr	r5, [r2, #0]
 80033ec:	4e5d      	ldr	r6, [pc, #372]	; (8003564 <proBrake+0x200>)
 80033ee:	402e      	ands	r6, r5
 80033f0:	2580      	movs	r5, #128	; 0x80
 80033f2:	01ed      	lsls	r5, r5, #7
 80033f4:	4335      	orrs	r5, r6
 80033f6:	6015      	str	r5, [r2, #0]
			GPIOA->BRR = GPIO_PIN_7;
 80033f8:	2580      	movs	r5, #128	; 0x80
 80033fa:	6295      	str	r5, [r2, #40]	; 0x28
 80033fc:	2290      	movs	r2, #144	; 0x90
 80033fe:	2580      	movs	r5, #128	; 0x80
 8003400:	05d2      	lsls	r2, r2, #23
 8003402:	6816      	ldr	r6, [r2, #0]
 8003404:	4f58      	ldr	r7, [pc, #352]	; (8003568 <proBrake+0x204>)
 8003406:	02ad      	lsls	r5, r5, #10
 8003408:	403e      	ands	r6, r7
 800340a:	4335      	orrs	r5, r6
 800340c:	6015      	str	r5, [r2, #0]
	if (newPhase == floating) {            // floating
 800340e:	4283      	cmp	r3, r0
 8003410:	d100      	bne.n	8003414 <proBrake+0xb0>
 8003412:	e06d      	b.n	80034f0 <proBrake+0x18c>
	if (newPhase == lowside) {              // lowside
 8003414:	428b      	cmp	r3, r1
 8003416:	d114      	bne.n	8003442 <proBrake+0xde>
 8003418:	2290      	movs	r2, #144	; 0x90
 800341a:	05d2      	lsls	r2, r2, #23
 800341c:	6815      	ldr	r5, [r2, #0]
 800341e:	4e51      	ldr	r6, [pc, #324]	; (8003564 <proBrake+0x200>)
 8003420:	402e      	ands	r6, r5
 8003422:	2580      	movs	r5, #128	; 0x80
 8003424:	01ed      	lsls	r5, r5, #7
 8003426:	4335      	orrs	r5, r6
 8003428:	6015      	str	r5, [r2, #0]
		GPIOA->BSRR = GPIO_PIN_7;
 800342a:	2580      	movs	r5, #128	; 0x80
 800342c:	6195      	str	r5, [r2, #24]
 800342e:	6815      	ldr	r5, [r2, #0]
 8003430:	4e4d      	ldr	r6, [pc, #308]	; (8003568 <proBrake+0x204>)
 8003432:	402e      	ands	r6, r5
 8003434:	2580      	movs	r5, #128	; 0x80
 8003436:	026d      	lsls	r5, r5, #9
 8003438:	4335      	orrs	r5, r6
 800343a:	6015      	str	r5, [r2, #0]
		GPIOA->BRR = GPIO_PIN_8;
 800343c:	2580      	movs	r5, #128	; 0x80
 800343e:	006d      	lsls	r5, r5, #1
 8003440:	6295      	str	r5, [r2, #40]	; 0x28
		if (!slow_decay || prop_brake_active){
 8003442:	2c00      	cmp	r4, #0
 8003444:	d003      	beq.n	800344e <proBrake+0xea>
 8003446:	4a43      	ldr	r2, [pc, #268]	; (8003554 <proBrake+0x1f0>)
 8003448:	7812      	ldrb	r2, [r2, #0]
 800344a:	2a00      	cmp	r2, #0
 800344c:	d063      	beq.n	8003516 <proBrake+0x1b2>
 800344e:	250c      	movs	r5, #12
 8003450:	4c3f      	ldr	r4, [pc, #252]	; (8003550 <proBrake+0x1ec>)
 8003452:	6822      	ldr	r2, [r4, #0]
 8003454:	43aa      	bics	r2, r5
 8003456:	3d08      	subs	r5, #8
 8003458:	432a      	orrs	r2, r5
 800345a:	6022      	str	r2, [r4, #0]
			GPIOB->BRR = GPIO_PIN_1;
 800345c:	2202      	movs	r2, #2
 800345e:	62a2      	str	r2, [r4, #40]	; 0x28
 8003460:	2590      	movs	r5, #144	; 0x90
 8003462:	2280      	movs	r2, #128	; 0x80
 8003464:	05ed      	lsls	r5, r5, #23
 8003466:	682c      	ldr	r4, [r5, #0]
 8003468:	4e40      	ldr	r6, [pc, #256]	; (800356c <proBrake+0x208>)
 800346a:	0392      	lsls	r2, r2, #14
 800346c:	4034      	ands	r4, r6
 800346e:	4322      	orrs	r2, r4
 8003470:	602a      	str	r2, [r5, #0]
	if (newPhase == floating) {
 8003472:	4283      	cmp	r3, r0
 8003474:	d029      	beq.n	80034ca <proBrake+0x166>
	if (newPhase == lowside) {
 8003476:	428b      	cmp	r3, r1
 8003478:	d114      	bne.n	80034a4 <proBrake+0x140>
 800347a:	210c      	movs	r1, #12
 800347c:	4a34      	ldr	r2, [pc, #208]	; (8003550 <proBrake+0x1ec>)
 800347e:	6813      	ldr	r3, [r2, #0]
 8003480:	438b      	bics	r3, r1
 8003482:	3908      	subs	r1, #8
 8003484:	430b      	orrs	r3, r1
 8003486:	6013      	str	r3, [r2, #0]
		GPIOB->BSRR = GPIO_PIN_1;
 8003488:	2302      	movs	r3, #2
 800348a:	6193      	str	r3, [r2, #24]
 800348c:	2390      	movs	r3, #144	; 0x90
 800348e:	05db      	lsls	r3, r3, #23
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	4936      	ldr	r1, [pc, #216]	; (800356c <proBrake+0x208>)
 8003494:	4011      	ands	r1, r2
 8003496:	2280      	movs	r2, #128	; 0x80
 8003498:	0352      	lsls	r2, r2, #13
 800349a:	430a      	orrs	r2, r1
 800349c:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_10;
 800349e:	2280      	movs	r2, #128	; 0x80
 80034a0:	00d2      	lsls	r2, r2, #3
 80034a2:	629a      	str	r2, [r3, #40]	; 0x28
	phaseB(pwm);
	phaseC(pwm);
}
 80034a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034a6:	2703      	movs	r7, #3
 80034a8:	4929      	ldr	r1, [pc, #164]	; (8003550 <proBrake+0x1ec>)
 80034aa:	680a      	ldr	r2, [r1, #0]
 80034ac:	43ba      	bics	r2, r7
 80034ae:	3f02      	subs	r7, #2
 80034b0:	433a      	orrs	r2, r7
 80034b2:	600a      	str	r2, [r1, #0]
		GPIOB->BRR = GPIO_PIN_0;
 80034b4:	628f      	str	r7, [r1, #40]	; 0x28
 80034b6:	682a      	ldr	r2, [r5, #0]
 80034b8:	4032      	ands	r2, r6
 80034ba:	2680      	movs	r6, #128	; 0x80
 80034bc:	02f6      	lsls	r6, r6, #11
 80034be:	4316      	orrs	r6, r2
		GPIOA->BRR = GPIO_PIN_9;
 80034c0:	2280      	movs	r2, #128	; 0x80
 80034c2:	0092      	lsls	r2, r2, #2
 80034c4:	602e      	str	r6, [r5, #0]
 80034c6:	62aa      	str	r2, [r5, #40]	; 0x28
 80034c8:	e76e      	b.n	80033a8 <proBrake+0x44>
 80034ca:	240c      	movs	r4, #12
 80034cc:	4820      	ldr	r0, [pc, #128]	; (8003550 <proBrake+0x1ec>)
 80034ce:	6802      	ldr	r2, [r0, #0]
 80034d0:	43a2      	bics	r2, r4
 80034d2:	3c08      	subs	r4, #8
 80034d4:	4322      	orrs	r2, r4
 80034d6:	6002      	str	r2, [r0, #0]
		GPIOB->BRR = GPIO_PIN_1;
 80034d8:	2202      	movs	r2, #2
 80034da:	6282      	str	r2, [r0, #40]	; 0x28
 80034dc:	682a      	ldr	r2, [r5, #0]
 80034de:	4032      	ands	r2, r6
 80034e0:	2680      	movs	r6, #128	; 0x80
 80034e2:	0376      	lsls	r6, r6, #13
 80034e4:	4316      	orrs	r6, r2
		GPIOA->BRR = GPIO_PIN_10;
 80034e6:	2280      	movs	r2, #128	; 0x80
 80034e8:	00d2      	lsls	r2, r2, #3
 80034ea:	602e      	str	r6, [r5, #0]
 80034ec:	62aa      	str	r2, [r5, #40]	; 0x28
 80034ee:	e7c2      	b.n	8003476 <proBrake+0x112>
 80034f0:	6815      	ldr	r5, [r2, #0]
 80034f2:	4e1c      	ldr	r6, [pc, #112]	; (8003564 <proBrake+0x200>)
 80034f4:	402e      	ands	r6, r5
 80034f6:	2580      	movs	r5, #128	; 0x80
 80034f8:	01ed      	lsls	r5, r5, #7
 80034fa:	4335      	orrs	r5, r6
 80034fc:	6015      	str	r5, [r2, #0]
		GPIOA->BRR = GPIO_PIN_7;
 80034fe:	2580      	movs	r5, #128	; 0x80
 8003500:	6295      	str	r5, [r2, #40]	; 0x28
 8003502:	6815      	ldr	r5, [r2, #0]
 8003504:	403d      	ands	r5, r7
 8003506:	2780      	movs	r7, #128	; 0x80
 8003508:	027f      	lsls	r7, r7, #9
 800350a:	432f      	orrs	r7, r5
		GPIOA->BRR = GPIO_PIN_8;
 800350c:	2580      	movs	r5, #128	; 0x80
 800350e:	006d      	lsls	r5, r5, #1
 8003510:	6017      	str	r7, [r2, #0]
 8003512:	6295      	str	r5, [r2, #40]	; 0x28
 8003514:	e77e      	b.n	8003414 <proBrake+0xb0>
 8003516:	250c      	movs	r5, #12
 8003518:	4c0d      	ldr	r4, [pc, #52]	; (8003550 <proBrake+0x1ec>)
 800351a:	6822      	ldr	r2, [r4, #0]
 800351c:	43aa      	bics	r2, r5
 800351e:	3d04      	subs	r5, #4
 8003520:	432a      	orrs	r2, r5
 8003522:	6022      	str	r2, [r4, #0]
 8003524:	e79c      	b.n	8003460 <proBrake+0xfc>
 8003526:	2690      	movs	r6, #144	; 0x90
 8003528:	05f6      	lsls	r6, r6, #23
 800352a:	6832      	ldr	r2, [r6, #0]
 800352c:	4d0d      	ldr	r5, [pc, #52]	; (8003564 <proBrake+0x200>)
 800352e:	4015      	ands	r5, r2
 8003530:	2280      	movs	r2, #128	; 0x80
 8003532:	0212      	lsls	r2, r2, #8
 8003534:	432a      	orrs	r2, r5
 8003536:	6032      	str	r2, [r6, #0]
 8003538:	e760      	b.n	80033fc <proBrake+0x98>
 800353a:	2003      	movs	r0, #3
 800353c:	680a      	ldr	r2, [r1, #0]
 800353e:	4382      	bics	r2, r0
 8003540:	3801      	subs	r0, #1
 8003542:	4302      	orrs	r2, r0
 8003544:	600a      	str	r2, [r1, #0]
 8003546:	e721      	b.n	800338c <proBrake+0x28>
 8003548:	20000038 	.word	0x20000038
 800354c:	2000002c 	.word	0x2000002c
 8003550:	48000400 	.word	0x48000400
 8003554:	20000127 	.word	0x20000127
 8003558:	fff3ffff 	.word	0xfff3ffff
 800355c:	20000018 	.word	0x20000018
 8003560:	20000024 	.word	0x20000024
 8003564:	ffff3fff 	.word	0xffff3fff
 8003568:	fffcffff 	.word	0xfffcffff
 800356c:	ffcfffff 	.word	0xffcfffff

08003570 <commutate>:
}


void commutate() {

	if (forward == 1){
 8003570:	4b3e      	ldr	r3, [pc, #248]	; (800366c <commutate+0xfc>)
void commutate() {
 8003572:	b570      	push	{r4, r5, r6, lr}
	if (forward == 1){
 8003574:	681a      	ldr	r2, [r3, #0]
		step++;
 8003576:	4c3e      	ldr	r4, [pc, #248]	; (8003670 <commutate+0x100>)
 8003578:	6823      	ldr	r3, [r4, #0]
	if (forward == 1){
 800357a:	2a01      	cmp	r2, #1
 800357c:	d04e      	beq.n	800361c <commutate+0xac>
		}
		if (step == 2 || step == 4 || step == 6) {
			rising = 0;
		}
	}
	if (forward == 0){
 800357e:	2a00      	cmp	r2, #0
 8003580:	d023      	beq.n	80035ca <commutate+0x5a>
 8003582:	4d3c      	ldr	r5, [pc, #240]	; (8003674 <commutate+0x104>)
			rising = 1;
		}
	}


	if (input > 47){
 8003584:	4a3c      	ldr	r2, [pc, #240]	; (8003678 <commutate+0x108>)
 8003586:	6812      	ldr	r2, [r2, #0]
 8003588:	2a2f      	cmp	r2, #47	; 0x2f
 800358a:	dd03      	ble.n	8003594 <commutate+0x24>
comStep(step);
 800358c:	0018      	movs	r0, r3
 800358e:	f7ff fc51 	bl	8002e34 <comStep>
 8003592:	6823      	ldr	r3, [r4, #0]
		hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_IO1;
 8003594:	4839      	ldr	r0, [pc, #228]	; (800367c <commutate+0x10c>)
	if (step == 1 || step == 4) {   // c floating
 8003596:	2b01      	cmp	r3, #1
 8003598:	d02f      	beq.n	80035fa <commutate+0x8a>
 800359a:	2b04      	cmp	r3, #4
 800359c:	d02d      	beq.n	80035fa <commutate+0x8a>
	if (step == 2 || step == 5) {     // a floating
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d028      	beq.n	80035f4 <commutate+0x84>
 80035a2:	2b05      	cmp	r3, #5
 80035a4:	d026      	beq.n	80035f4 <commutate+0x84>
	if (step == 3 || step == 6) {      // b floating
 80035a6:	2b03      	cmp	r3, #3
 80035a8:	d00c      	beq.n	80035c4 <commutate+0x54>
 80035aa:	2b06      	cmp	r3, #6
 80035ac:	d00a      	beq.n	80035c4 <commutate+0x54>
	if (rising){
 80035ae:	682b      	ldr	r3, [r5, #0]
		hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_FALLING;   // polarity of comp output reversed
 80035b0:	1e5a      	subs	r2, r3, #1
 80035b2:	4193      	sbcs	r3, r2
 80035b4:	3301      	adds	r3, #1
 80035b6:	6203      	str	r3, [r0, #32]
	if (HAL_COMP_Init(&hcomp1) != HAL_OK) {
 80035b8:	f7fd f904 	bl	80007c4 <HAL_COMP_Init>
 80035bc:	2800      	cmp	r0, #0
 80035be:	d000      	beq.n	80035c2 <commutate+0x52>
 80035c0:	e7fe      	b.n	80035c0 <commutate+0x50>
//	falseAlarm = 0;
//	compCount = 0;
//	upcompCount = 0;
//	TIM2->CNT = 0;
//	TIM2->ARR = commutation_interval;
}
 80035c2:	bd70      	pop	{r4, r5, r6, pc}
		hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_DAC2;
 80035c4:	2350      	movs	r3, #80	; 0x50
 80035c6:	6043      	str	r3, [r0, #4]
 80035c8:	e7f1      	b.n	80035ae <commutate+0x3e>
		step--;
 80035ca:	3b01      	subs	r3, #1
 80035cc:	6023      	str	r3, [r4, #0]
		if (step < 1) {
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	dd33      	ble.n	800363a <commutate+0xca>
		if (step == 1 || step == 3 || step == 5) {
 80035d2:	2202      	movs	r2, #2
 80035d4:	0019      	movs	r1, r3
 80035d6:	4391      	bics	r1, r2
 80035d8:	2901      	cmp	r1, #1
 80035da:	d011      	beq.n	8003600 <commutate+0x90>
 80035dc:	2b05      	cmp	r3, #5
 80035de:	d00f      	beq.n	8003600 <commutate+0x90>
 80035e0:	2204      	movs	r2, #4
 80035e2:	0019      	movs	r1, r3
 80035e4:	4391      	bics	r1, r2
 80035e6:	000a      	movs	r2, r1
 80035e8:	4d22      	ldr	r5, [pc, #136]	; (8003674 <commutate+0x104>)
		if (step == 2 || step == 4 || step == 6) {
 80035ea:	2a02      	cmp	r2, #2
 80035ec:	d111      	bne.n	8003612 <commutate+0xa2>
			rising = 1;
 80035ee:	2201      	movs	r2, #1
 80035f0:	602a      	str	r2, [r5, #0]
 80035f2:	e7c7      	b.n	8003584 <commutate+0x14>
		hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1;                      /// if f051k6  step 2 , 5 is dac 1 ( swap comp input)
 80035f4:	2240      	movs	r2, #64	; 0x40
 80035f6:	6042      	str	r2, [r0, #4]
 80035f8:	e7d5      	b.n	80035a6 <commutate+0x36>
		hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_IO1;
 80035fa:	2260      	movs	r2, #96	; 0x60
 80035fc:	6042      	str	r2, [r0, #4]
 80035fe:	e7ce      	b.n	800359e <commutate+0x2e>
			rising = 0;
 8003600:	2200      	movs	r2, #0
 8003602:	0019      	movs	r1, r3
 8003604:	4d1b      	ldr	r5, [pc, #108]	; (8003674 <commutate+0x104>)
 8003606:	602a      	str	r2, [r5, #0]
 8003608:	3204      	adds	r2, #4
 800360a:	4391      	bics	r1, r2
 800360c:	000a      	movs	r2, r1
		if (step == 2 || step == 4 || step == 6) {
 800360e:	2a02      	cmp	r2, #2
 8003610:	d0ed      	beq.n	80035ee <commutate+0x7e>
 8003612:	2b04      	cmp	r3, #4
 8003614:	d1b6      	bne.n	8003584 <commutate+0x14>
			rising = 1;
 8003616:	2201      	movs	r2, #1
 8003618:	602a      	str	r2, [r5, #0]
 800361a:	e7b3      	b.n	8003584 <commutate+0x14>
		step++;
 800361c:	3301      	adds	r3, #1
 800361e:	6023      	str	r3, [r4, #0]
		if (step > 6) {
 8003620:	2b06      	cmp	r3, #6
 8003622:	dd13      	ble.n	800364c <commutate+0xdc>
		if (step == 1 || step == 3 || step == 5) {
 8003624:	2301      	movs	r3, #1
			step = 1;
 8003626:	6022      	str	r2, [r4, #0]
			rising = 1;                                // is back emf rising or falling
 8003628:	2101      	movs	r1, #1
 800362a:	4d12      	ldr	r5, [pc, #72]	; (8003674 <commutate+0x104>)
 800362c:	6029      	str	r1, [r5, #0]
		if (step == 2 || step == 4 || step == 6) {
 800362e:	2a02      	cmp	r2, #2
 8003630:	d009      	beq.n	8003646 <commutate+0xd6>
 8003632:	2b04      	cmp	r3, #4
 8003634:	d007      	beq.n	8003646 <commutate+0xd6>
 8003636:	6823      	ldr	r3, [r4, #0]
 8003638:	e7a4      	b.n	8003584 <commutate+0x14>
			step = 6;
 800363a:	2306      	movs	r3, #6
			rising = 1;
 800363c:	2201      	movs	r2, #1
 800363e:	4d0d      	ldr	r5, [pc, #52]	; (8003674 <commutate+0x104>)
			step = 6;
 8003640:	6023      	str	r3, [r4, #0]
			rising = 1;
 8003642:	602a      	str	r2, [r5, #0]
 8003644:	e79e      	b.n	8003584 <commutate+0x14>
			rising = 0;
 8003646:	2300      	movs	r3, #0
 8003648:	602b      	str	r3, [r5, #0]
 800364a:	e7f4      	b.n	8003636 <commutate+0xc6>
		if (step == 1 || step == 3 || step == 5) {
 800364c:	2102      	movs	r1, #2
 800364e:	0018      	movs	r0, r3
 8003650:	4388      	bics	r0, r1
 8003652:	2801      	cmp	r0, #1
 8003654:	d007      	beq.n	8003666 <commutate+0xf6>
 8003656:	2b05      	cmp	r3, #5
 8003658:	d0e6      	beq.n	8003628 <commutate+0xb8>
 800365a:	2204      	movs	r2, #4
 800365c:	0019      	movs	r1, r3
 800365e:	4391      	bics	r1, r2
 8003660:	000a      	movs	r2, r1
 8003662:	4d04      	ldr	r5, [pc, #16]	; (8003674 <commutate+0x104>)
 8003664:	e7e3      	b.n	800362e <commutate+0xbe>
 8003666:	001a      	movs	r2, r3
 8003668:	e7de      	b.n	8003628 <commutate+0xb8>
 800366a:	46c0      	nop			; (mov r8, r8)
 800366c:	2000001c 	.word	0x2000001c
 8003670:	20000044 	.word	0x20000044
 8003674:	20000030 	.word	0x20000030
 8003678:	20000110 	.word	0x20000110
 800367c:	200001f8 	.word	0x200001f8

08003680 <startMotor>:
	{

	}
}

void startMotor() {
 8003680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003682:	464f      	mov	r7, r9
 8003684:	46d6      	mov	lr, sl
 8003686:	4646      	mov	r6, r8
 8003688:	b5c0      	push	{r6, r7, lr}

    char decaystate = slow_decay;
 800368a:	4f57      	ldr	r7, [pc, #348]	; (80037e8 <startMotor+0x168>)
 800368c:	783b      	ldrb	r3, [r7, #0]
 800368e:	469a      	mov	sl, r3
    sensorless = 0;
 8003690:	4b56      	ldr	r3, [pc, #344]	; (80037ec <startMotor+0x16c>)
 8003692:	4698      	mov	r8, r3
 8003694:	2300      	movs	r3, #0
 8003696:	4642      	mov	r2, r8
 8003698:	6013      	str	r3, [r2, #0]
	if (running == 0){
 800369a:	4b55      	ldr	r3, [pc, #340]	; (80037f0 <startMotor+0x170>)
 800369c:	4699      	mov	r9, r3
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00e      	beq.n	80036c2 <startMotor+0x42>
			/* Initialization Error */
			Error_Handler();
		}
	}

	slow_decay = decaystate;    // return to normal
 80036a4:	4653      	mov	r3, sl
	sensorless = 1;
 80036a6:	4642      	mov	r2, r8
	slow_decay = decaystate;    // return to normal
 80036a8:	703b      	strb	r3, [r7, #0]
	sensorless = 1;
 80036aa:	2301      	movs	r3, #1
 80036ac:	6013      	str	r3, [r2, #0]
	startupcountdown =0;
 80036ae:	2300      	movs	r3, #0
 80036b0:	4a50      	ldr	r2, [pc, #320]	; (80037f4 <startMotor+0x174>)
 80036b2:	6013      	str	r3, [r2, #0]
	bemf_counts = 0;
 80036b4:	4a50      	ldr	r2, [pc, #320]	; (80037f8 <startMotor+0x178>)
 80036b6:	6013      	str	r3, [r2, #0]

}
 80036b8:	bc1c      	pop	{r2, r3, r4}
 80036ba:	4690      	mov	r8, r2
 80036bc:	4699      	mov	r9, r3
 80036be:	46a2      	mov	sl, r4
 80036c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_COMP_Stop_IT(&hcomp1);
 80036c2:	4e4e      	ldr	r6, [pc, #312]	; (80037fc <startMotor+0x17c>)
 80036c4:	0030      	movs	r0, r6
 80036c6:	f7fd f921 	bl	800090c <HAL_COMP_Stop_IT>
		slow_decay = 1;
 80036ca:	2301      	movs	r3, #1
 80036cc:	703b      	strb	r3, [r7, #0]
	if (forward == 1){
 80036ce:	4b4c      	ldr	r3, [pc, #304]	; (8003800 <startMotor+0x180>)
		step++;
 80036d0:	4c4c      	ldr	r4, [pc, #304]	; (8003804 <startMotor+0x184>)
	if (forward == 1){
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	2a01      	cmp	r2, #1
 80036d6:	d04c      	beq.n	8003772 <startMotor+0xf2>
	if (forward == 0){
 80036d8:	2a00      	cmp	r2, #0
 80036da:	d032      	beq.n	8003742 <startMotor+0xc2>
 80036dc:	6820      	ldr	r0, [r4, #0]
 80036de:	4d4a      	ldr	r5, [pc, #296]	; (8003808 <startMotor+0x188>)
	if (input > 47){
 80036e0:	4b4a      	ldr	r3, [pc, #296]	; (800380c <startMotor+0x18c>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2b2f      	cmp	r3, #47	; 0x2f
 80036e6:	dd02      	ble.n	80036ee <startMotor+0x6e>
comStep(step);
 80036e8:	f7ff fba4 	bl	8002e34 <comStep>
 80036ec:	6820      	ldr	r0, [r4, #0]
	if (step == 1 || step == 4) {   // c floating
 80036ee:	2801      	cmp	r0, #1
 80036f0:	d04f      	beq.n	8003792 <startMotor+0x112>
 80036f2:	2804      	cmp	r0, #4
 80036f4:	d04d      	beq.n	8003792 <startMotor+0x112>
	if (step == 2 || step == 5) {     // a floating
 80036f6:	2802      	cmp	r0, #2
 80036f8:	d04f      	beq.n	800379a <startMotor+0x11a>
 80036fa:	2805      	cmp	r0, #5
 80036fc:	d04d      	beq.n	800379a <startMotor+0x11a>
	if (step == 3 || step == 6) {      // b floating
 80036fe:	2803      	cmp	r0, #3
 8003700:	d04f      	beq.n	80037a2 <startMotor+0x122>
 8003702:	2806      	cmp	r0, #6
 8003704:	d04d      	beq.n	80037a2 <startMotor+0x122>
	if (rising){
 8003706:	682b      	ldr	r3, [r5, #0]
	if (HAL_COMP_Init(&hcomp1) != HAL_OK) {
 8003708:	0030      	movs	r0, r6
		hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_FALLING;   // polarity of comp output reversed
 800370a:	1e5a      	subs	r2, r3, #1
 800370c:	4193      	sbcs	r3, r2
 800370e:	3301      	adds	r3, #1
 8003710:	6233      	str	r3, [r6, #32]
	if (HAL_COMP_Init(&hcomp1) != HAL_OK) {
 8003712:	f7fd f857 	bl	80007c4 <HAL_COMP_Init>
 8003716:	2800      	cmp	r0, #0
 8003718:	d000      	beq.n	800371c <startMotor+0x9c>
 800371a:	e7fe      	b.n	800371a <startMotor+0x9a>
	commutation_interval = 20000;
 800371c:	4a3c      	ldr	r2, [pc, #240]	; (8003810 <startMotor+0x190>)
 800371e:	4b3d      	ldr	r3, [pc, #244]	; (8003814 <startMotor+0x194>)
 8003720:	601a      	str	r2, [r3, #0]
	TIM3->CNT = 0;
 8003722:	4b3d      	ldr	r3, [pc, #244]	; (8003818 <startMotor+0x198>)
	TIM2->ARR = commutation_interval * 2;
 8003724:	4a3d      	ldr	r2, [pc, #244]	; (800381c <startMotor+0x19c>)
	TIM3->CNT = 0;
 8003726:	6258      	str	r0, [r3, #36]	; 0x24
	TIM2->CNT = 0;
 8003728:	2380      	movs	r3, #128	; 0x80
 800372a:	05db      	lsls	r3, r3, #23
 800372c:	6258      	str	r0, [r3, #36]	; 0x24
	TIM2->ARR = commutation_interval * 2;
 800372e:	62da      	str	r2, [r3, #44]	; 0x2c
	running = 1;
 8003730:	2301      	movs	r3, #1
 8003732:	464a      	mov	r2, r9
	if (HAL_COMP_Start_IT(&hcomp1) != HAL_OK) {
 8003734:	0030      	movs	r0, r6
	running = 1;
 8003736:	6013      	str	r3, [r2, #0]
	if (HAL_COMP_Start_IT(&hcomp1) != HAL_OK) {
 8003738:	f7fd f894 	bl	8000864 <HAL_COMP_Start_IT>
 800373c:	2800      	cmp	r0, #0
 800373e:	d0b1      	beq.n	80036a4 <startMotor+0x24>
 8003740:	e7fe      	b.n	8003740 <startMotor+0xc0>
		step--;
 8003742:	6823      	ldr	r3, [r4, #0]
 8003744:	1e58      	subs	r0, r3, #1
 8003746:	6020      	str	r0, [r4, #0]
		if (step < 1) {
 8003748:	2800      	cmp	r0, #0
 800374a:	dd35      	ble.n	80037b8 <startMotor+0x138>
		if (step == 1 || step == 3 || step == 5) {
 800374c:	2302      	movs	r3, #2
 800374e:	0002      	movs	r2, r0
 8003750:	439a      	bics	r2, r3
 8003752:	2a01      	cmp	r2, #1
 8003754:	d028      	beq.n	80037a8 <startMotor+0x128>
 8003756:	2805      	cmp	r0, #5
 8003758:	d026      	beq.n	80037a8 <startMotor+0x128>
 800375a:	2304      	movs	r3, #4
 800375c:	0002      	movs	r2, r0
 800375e:	439a      	bics	r2, r3
 8003760:	0013      	movs	r3, r2
 8003762:	4d29      	ldr	r5, [pc, #164]	; (8003808 <startMotor+0x188>)
		if (step == 2 || step == 4 || step == 6) {
 8003764:	2b02      	cmp	r3, #2
 8003766:	d001      	beq.n	800376c <startMotor+0xec>
 8003768:	2804      	cmp	r0, #4
 800376a:	d1b9      	bne.n	80036e0 <startMotor+0x60>
			rising = 1;
 800376c:	2301      	movs	r3, #1
 800376e:	602b      	str	r3, [r5, #0]
 8003770:	e7b6      	b.n	80036e0 <startMotor+0x60>
		step++;
 8003772:	6823      	ldr	r3, [r4, #0]
 8003774:	3301      	adds	r3, #1
 8003776:	6023      	str	r3, [r4, #0]
		if (step > 6) {
 8003778:	2b06      	cmp	r3, #6
 800377a:	dd25      	ble.n	80037c8 <startMotor+0x148>
		if (step == 1 || step == 3 || step == 5) {
 800377c:	2301      	movs	r3, #1
			step = 1;
 800377e:	6022      	str	r2, [r4, #0]
			rising = 1;                                // is back emf rising or falling
 8003780:	2101      	movs	r1, #1
 8003782:	4d21      	ldr	r5, [pc, #132]	; (8003808 <startMotor+0x188>)
 8003784:	6029      	str	r1, [r5, #0]
		if (step == 2 || step == 4 || step == 6) {
 8003786:	2a02      	cmp	r2, #2
 8003788:	d01b      	beq.n	80037c2 <startMotor+0x142>
 800378a:	2b04      	cmp	r3, #4
 800378c:	d019      	beq.n	80037c2 <startMotor+0x142>
 800378e:	6820      	ldr	r0, [r4, #0]
 8003790:	e7a6      	b.n	80036e0 <startMotor+0x60>
		hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_IO1;
 8003792:	2360      	movs	r3, #96	; 0x60
 8003794:	6073      	str	r3, [r6, #4]
	if (step == 2 || step == 5) {     // a floating
 8003796:	2802      	cmp	r0, #2
 8003798:	d1af      	bne.n	80036fa <startMotor+0x7a>
		hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1;                      /// if f051k6  step 2 , 5 is dac 1 ( swap comp input)
 800379a:	2340      	movs	r3, #64	; 0x40
 800379c:	6073      	str	r3, [r6, #4]
	if (step == 3 || step == 6) {      // b floating
 800379e:	2803      	cmp	r0, #3
 80037a0:	d1af      	bne.n	8003702 <startMotor+0x82>
		hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_DAC2;
 80037a2:	2350      	movs	r3, #80	; 0x50
 80037a4:	6073      	str	r3, [r6, #4]
 80037a6:	e7ae      	b.n	8003706 <startMotor+0x86>
			rising = 0;
 80037a8:	2300      	movs	r3, #0
 80037aa:	0002      	movs	r2, r0
 80037ac:	4d16      	ldr	r5, [pc, #88]	; (8003808 <startMotor+0x188>)
 80037ae:	602b      	str	r3, [r5, #0]
 80037b0:	3304      	adds	r3, #4
 80037b2:	439a      	bics	r2, r3
 80037b4:	0013      	movs	r3, r2
 80037b6:	e7d5      	b.n	8003764 <startMotor+0xe4>
			step = 6;
 80037b8:	2306      	movs	r3, #6
		if (step == 1 || step == 3 || step == 5) {
 80037ba:	2006      	movs	r0, #6
			step = 6;
 80037bc:	6023      	str	r3, [r4, #0]
 80037be:	4d12      	ldr	r5, [pc, #72]	; (8003808 <startMotor+0x188>)
 80037c0:	e7d4      	b.n	800376c <startMotor+0xec>
			rising = 0;
 80037c2:	2300      	movs	r3, #0
 80037c4:	602b      	str	r3, [r5, #0]
 80037c6:	e7e2      	b.n	800378e <startMotor+0x10e>
		if (step == 1 || step == 3 || step == 5) {
 80037c8:	2102      	movs	r1, #2
 80037ca:	0018      	movs	r0, r3
 80037cc:	4388      	bics	r0, r1
 80037ce:	2801      	cmp	r0, #1
 80037d0:	d007      	beq.n	80037e2 <startMotor+0x162>
 80037d2:	2b05      	cmp	r3, #5
 80037d4:	d0d4      	beq.n	8003780 <startMotor+0x100>
 80037d6:	2204      	movs	r2, #4
 80037d8:	0019      	movs	r1, r3
 80037da:	4391      	bics	r1, r2
 80037dc:	000a      	movs	r2, r1
 80037de:	4d0a      	ldr	r5, [pc, #40]	; (8003808 <startMotor+0x188>)
 80037e0:	e7d1      	b.n	8003786 <startMotor+0x106>
 80037e2:	001a      	movs	r2, r3
 80037e4:	e7cc      	b.n	8003780 <startMotor+0x100>
 80037e6:	46c0      	nop			; (mov r8, r8)
 80037e8:	20000038 	.word	0x20000038
 80037ec:	20000140 	.word	0x20000140
 80037f0:	2000013c 	.word	0x2000013c
 80037f4:	20000150 	.word	0x20000150
 80037f8:	20000268 	.word	0x20000268
 80037fc:	200001f8 	.word	0x200001f8
 8003800:	2000001c 	.word	0x2000001c
 8003804:	20000044 	.word	0x20000044
 8003808:	20000030 	.word	0x20000030
 800380c:	20000110 	.word	0x20000110
 8003810:	00004e20 	.word	0x00004e20
 8003814:	200000a8 	.word	0x200000a8
 8003818:	40000400 	.word	0x40000400
 800381c:	00009c40 	.word	0x00009c40

08003820 <forcedCommutation>:

void forcedCommutation(){
 8003820:	b570      	push	{r4, r5, r6, lr}
	HAL_COMP_Stop_IT(&hcomp1);
 8003822:	4d0f      	ldr	r5, [pc, #60]	; (8003860 <forcedCommutation+0x40>)
    TIM3->CNT = commutation_interval / 2;
 8003824:	4c0f      	ldr	r4, [pc, #60]	; (8003864 <forcedCommutation+0x44>)
	HAL_COMP_Stop_IT(&hcomp1);
 8003826:	0028      	movs	r0, r5
 8003828:	f7fd f870 	bl	800090c <HAL_COMP_Stop_IT>
    TIM3->CNT = commutation_interval / 2;
 800382c:	4e0e      	ldr	r6, [pc, #56]	; (8003868 <forcedCommutation+0x48>)
 800382e:	6832      	ldr	r2, [r6, #0]
 8003830:	0fd3      	lsrs	r3, r2, #31
 8003832:	189b      	adds	r3, r3, r2
 8003834:	105b      	asrs	r3, r3, #1
 8003836:	6263      	str	r3, [r4, #36]	; 0x24
    commutate();
 8003838:	f7ff fe9a 	bl	8003570 <commutate>
 800383c:	6832      	ldr	r2, [r6, #0]
 800383e:	0fd3      	lsrs	r3, r2, #31
 8003840:	189b      	adds	r3, r3, r2
 8003842:	4a0a      	ldr	r2, [pc, #40]	; (800386c <forcedCommutation+0x4c>)
 8003844:	105b      	asrs	r3, r3, #1
 8003846:	6811      	ldr	r1, [r2, #0]
    while (TIM3->CNT - commutation_interval / 2  <  blanktime){}
 8003848:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800384a:	1ad2      	subs	r2, r2, r3
 800384c:	428a      	cmp	r2, r1
 800384e:	d3fb      	bcc.n	8003848 <forcedCommutation+0x28>
	if (HAL_COMP_Start_IT(&hcomp1) != HAL_OK) {
 8003850:	0028      	movs	r0, r5
 8003852:	f7fd f807 	bl	8000864 <HAL_COMP_Start_IT>
 8003856:	2800      	cmp	r0, #0
 8003858:	d000      	beq.n	800385c <forcedCommutation+0x3c>
 800385a:	e7fe      	b.n	800385a <forcedCommutation+0x3a>
		/* Initialization Error */
		Error_Handler();
	}

}
 800385c:	bd70      	pop	{r4, r5, r6, pc}
 800385e:	46c0      	nop			; (mov r8, r8)
 8003860:	200001f8 	.word	0x200001f8
 8003864:	40000400 	.word	0x40000400
 8003868:	200000a8 	.word	0x200000a8
 800386c:	2000036c 	.word	0x2000036c

08003870 <HAL_COMP_TriggerCallback>:



void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp) {
 8003870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003872:	46de      	mov	lr, fp
 8003874:	4657      	mov	r7, sl
 8003876:	464e      	mov	r6, r9
 8003878:	4645      	mov	r5, r8
 800387a:	b5e0      	push	{r5, r6, r7, lr}
	/* Turn On LED3 */
	if( bemf_counts > 100 && commutation_interval < 300){
 800387c:	4b8f      	ldr	r3, [pc, #572]	; (8003abc <HAL_COMP_TriggerCallback+0x24c>)
void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp) {
 800387e:	b083      	sub	sp, #12
	if( bemf_counts > 100 && commutation_interval < 300){
 8003880:	469b      	mov	fp, r3
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2b64      	cmp	r3, #100	; 0x64
 8003886:	dd05      	ble.n	8003894 <HAL_COMP_TriggerCallback+0x24>
 8003888:	232c      	movs	r3, #44	; 0x2c
 800388a:	4f8d      	ldr	r7, [pc, #564]	; (8003ac0 <HAL_COMP_TriggerCallback+0x250>)
 800388c:	33ff      	adds	r3, #255	; 0xff
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	429a      	cmp	r2, r3
 8003892:	dd40      	ble.n	8003916 <HAL_COMP_TriggerCallback+0xa6>
								while (TIM3->CNT  < waitTime + blanktime){
								}

	}else{

		timestamp = TIM3->CNT;
 8003894:	4a8b      	ldr	r2, [pc, #556]	; (8003ac4 <HAL_COMP_TriggerCallback+0x254>)
	//	GPIOA->BSRR = GPIO_PIN_15;

	if (compit > 200){
 8003896:	4b8c      	ldr	r3, [pc, #560]	; (8003ac8 <HAL_COMP_TriggerCallback+0x258>)
		timestamp = TIM3->CNT;
 8003898:	6a50      	ldr	r0, [r2, #36]	; 0x24
 800389a:	4e8c      	ldr	r6, [pc, #560]	; (8003acc <HAL_COMP_TriggerCallback+0x25c>)
	if (compit > 200){
 800389c:	781b      	ldrb	r3, [r3, #0]
		timestamp = TIM3->CNT;
 800389e:	0001      	movs	r1, r0
 80038a0:	6030      	str	r0, [r6, #0]
	if (compit > 200){
 80038a2:	2bc8      	cmp	r3, #200	; 0xc8
 80038a4:	d900      	bls.n	80038a8 <HAL_COMP_TriggerCallback+0x38>
 80038a6:	e102      	b.n	8003aae <HAL_COMP_TriggerCallback+0x23e>
		HAL_COMP_Stop_IT(&hcomp1);
	//	error = 1;
		return;
	}
	compit +=1;
 80038a8:	4c87      	ldr	r4, [pc, #540]	; (8003ac8 <HAL_COMP_TriggerCallback+0x258>)
 80038aa:	3301      	adds	r3, #1
 80038ac:	7023      	strb	r3, [r4, #0]
 80038ae:	4b88      	ldr	r3, [pc, #544]	; (8003ad0 <HAL_COMP_TriggerCallback+0x260>)
 80038b0:	681c      	ldr	r4, [r3, #0]
	while (TIM3->CNT - timestamp < filter_delay){
 80038b2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80038b4:	1a1b      	subs	r3, r3, r0
 80038b6:	429c      	cmp	r4, r3
 80038b8:	d8fb      	bhi.n	80038b2 <HAL_COMP_TriggerCallback+0x42>

	}

	if (rising){
 80038ba:	4b86      	ldr	r3, [pc, #536]	; (8003ad4 <HAL_COMP_TriggerCallback+0x264>)
	//	advancedivisor = advancedivisorup;
		for (int i = 0; i < filter_level; i++){
 80038bc:	4d86      	ldr	r5, [pc, #536]	; (8003ad8 <HAL_COMP_TriggerCallback+0x268>)
	if (rising){
 80038be:	681f      	ldr	r7, [r3, #0]
		for (int i = 0; i < filter_level; i++){
 80038c0:	782b      	ldrb	r3, [r5, #0]
	if (rising){
 80038c2:	2f00      	cmp	r7, #0
 80038c4:	d019      	beq.n	80038fa <HAL_COMP_TriggerCallback+0x8a>
		for (int i = 0; i < filter_level; i++){
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d100      	bne.n	80038cc <HAL_COMP_TriggerCallback+0x5c>
 80038ca:	e0f5      	b.n	8003ab8 <HAL_COMP_TriggerCallback+0x248>
		if (HAL_COMP_GetOutputLevel(&hcomp1) == COMP_OUTPUTLEVEL_HIGH){
 80038cc:	2380      	movs	r3, #128	; 0x80
 80038ce:	01db      	lsls	r3, r3, #7
		for (int i = 0; i < filter_level; i++){
 80038d0:	2700      	movs	r7, #0
 80038d2:	4c82      	ldr	r4, [pc, #520]	; (8003adc <HAL_COMP_TriggerCallback+0x26c>)
		if (HAL_COMP_GetOutputLevel(&hcomp1) == COMP_OUTPUTLEVEL_HIGH){
 80038d4:	4698      	mov	r8, r3
 80038d6:	e004      	b.n	80038e2 <HAL_COMP_TriggerCallback+0x72>
		for (int i = 0; i < filter_level; i++){
 80038d8:	782b      	ldrb	r3, [r5, #0]
 80038da:	3701      	adds	r7, #1
 80038dc:	42bb      	cmp	r3, r7
 80038de:	dc00      	bgt.n	80038e2 <HAL_COMP_TriggerCallback+0x72>
 80038e0:	e071      	b.n	80039c6 <HAL_COMP_TriggerCallback+0x156>
		if (HAL_COMP_GetOutputLevel(&hcomp1) == COMP_OUTPUTLEVEL_HIGH){
 80038e2:	0020      	movs	r0, r4
 80038e4:	f7fd f842 	bl	800096c <HAL_COMP_GetOutputLevel>
 80038e8:	4540      	cmp	r0, r8
 80038ea:	d1f5      	bne.n	80038d8 <HAL_COMP_TriggerCallback+0x68>
	if (HAL_COMP_Start_IT(&hcomp1) != HAL_OK) {
		/* Initialization Error */
		Error_Handler();
	}
//	GPIOA->BRR = GPIO_PIN_15;
}
 80038ec:	b003      	add	sp, #12
 80038ee:	bc3c      	pop	{r2, r3, r4, r5}
 80038f0:	4690      	mov	r8, r2
 80038f2:	4699      	mov	r9, r3
 80038f4:	46a2      	mov	sl, r4
 80038f6:	46ab      	mov	fp, r5
 80038f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038fa:	4c78      	ldr	r4, [pc, #480]	; (8003adc <HAL_COMP_TriggerCallback+0x26c>)
		for (int i = 0; i < filter_level; i++){
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d104      	bne.n	800390a <HAL_COMP_TriggerCallback+0x9a>
 8003900:	e062      	b.n	80039c8 <HAL_COMP_TriggerCallback+0x158>
 8003902:	782b      	ldrb	r3, [r5, #0]
 8003904:	3701      	adds	r7, #1
 8003906:	42bb      	cmp	r3, r7
 8003908:	dd5d      	ble.n	80039c6 <HAL_COMP_TriggerCallback+0x156>
		if (HAL_COMP_GetOutputLevel(&hcomp1) == COMP_OUTPUTLEVEL_LOW){
 800390a:	0020      	movs	r0, r4
 800390c:	f7fd f82e 	bl	800096c <HAL_COMP_GetOutputLevel>
 8003910:	2800      	cmp	r0, #0
 8003912:	d1f6      	bne.n	8003902 <HAL_COMP_TriggerCallback+0x92>
 8003914:	e7ea      	b.n	80038ec <HAL_COMP_TriggerCallback+0x7c>
		thiszctime = TIM3->CNT;
 8003916:	4d6b      	ldr	r5, [pc, #428]	; (8003ac4 <HAL_COMP_TriggerCallback+0x254>)
 8003918:	4b6d      	ldr	r3, [pc, #436]	; (8003ad0 <HAL_COMP_TriggerCallback+0x260>)
 800391a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800391c:	4e70      	ldr	r6, [pc, #448]	; (8003ae0 <HAL_COMP_TriggerCallback+0x270>)
 800391e:	6819      	ldr	r1, [r3, #0]
 8003920:	6032      	str	r2, [r6, #0]
		while (TIM3->CNT - thiszctime < filter_delay){
 8003922:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003924:	1a9b      	subs	r3, r3, r2
 8003926:	428b      	cmp	r3, r1
 8003928:	d3fb      	bcc.n	8003922 <HAL_COMP_TriggerCallback+0xb2>
		if (HAL_COMP_GetOutputLevel(&hcomp1) == rising){
 800392a:	4c6c      	ldr	r4, [pc, #432]	; (8003adc <HAL_COMP_TriggerCallback+0x26c>)
 800392c:	0020      	movs	r0, r4
 800392e:	f7fd f81d 	bl	800096c <HAL_COMP_GetOutputLevel>
 8003932:	4b68      	ldr	r3, [pc, #416]	; (8003ad4 <HAL_COMP_TriggerCallback+0x264>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4298      	cmp	r0, r3
 8003938:	d0d8      	beq.n	80038ec <HAL_COMP_TriggerCallback+0x7c>
		TIM3->CNT = 0;
 800393a:	2300      	movs	r3, #0
 800393c:	4698      	mov	r8, r3
 800393e:	626b      	str	r3, [r5, #36]	; 0x24
		HAL_COMP_Stop_IT(&hcomp1);
 8003940:	0020      	movs	r0, r4
 8003942:	f7fc ffe3 	bl	800090c <HAL_COMP_Stop_IT>
        zctimeout = 0;
 8003946:	4642      	mov	r2, r8
 8003948:	4b66      	ldr	r3, [pc, #408]	; (8003ae4 <HAL_COMP_TriggerCallback+0x274>)
        commutation_interval = ((2 *commutation_interval) + thiszctime) / 3;     // TEST!   divide by two when tracking up down time independant
 800394a:	2103      	movs	r1, #3
        zctimeout = 0;
 800394c:	601a      	str	r2, [r3, #0]
        commutation_interval = ((2 *commutation_interval) + thiszctime) / 3;     // TEST!   divide by two when tracking up down time independant
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	005d      	lsls	r5, r3, #1
 8003952:	6833      	ldr	r3, [r6, #0]
 8003954:	18ed      	adds	r5, r5, r3
 8003956:	0028      	movs	r0, r5
 8003958:	f7fc fc60 	bl	800021c <__divsi3>
		bad_commutation = 0;
 800395c:	4642      	mov	r2, r8
 800395e:	4b62      	ldr	r3, [pc, #392]	; (8003ae8 <HAL_COMP_TriggerCallback+0x278>)
        commutation_interval = ((2 *commutation_interval) + thiszctime) / 3;     // TEST!   divide by two when tracking up down time independant
 8003960:	6038      	str	r0, [r7, #0]
		bad_commutation = 0;
 8003962:	701a      	strb	r2, [r3, #0]
					advance = commutation_interval / advancedivisor;
 8003964:	4b61      	ldr	r3, [pc, #388]	; (8003aec <HAL_COMP_TriggerCallback+0x27c>)
 8003966:	7819      	ldrb	r1, [r3, #0]
 8003968:	f7fc fc58 	bl	800021c <__divsi3>
 800396c:	4b60      	ldr	r3, [pc, #384]	; (8003af0 <HAL_COMP_TriggerCallback+0x280>)
 800396e:	0006      	movs	r6, r0
 8003970:	6018      	str	r0, [r3, #0]
					waitTime = commutation_interval /2  - advance;
 8003972:	2106      	movs	r1, #6
 8003974:	0028      	movs	r0, r5
 8003976:	f7fc fc51 	bl	800021c <__divsi3>
 800397a:	4b5e      	ldr	r3, [pc, #376]	; (8003af4 <HAL_COMP_TriggerCallback+0x284>)
 800397c:	1b86      	subs	r6, r0, r6
 800397e:	601e      	str	r6, [r3, #0]
 8003980:	4698      	mov	r8, r3
					blanktime = commutation_interval / 3;
 8003982:	4b5d      	ldr	r3, [pc, #372]	; (8003af8 <HAL_COMP_TriggerCallback+0x288>)
 8003984:	2109      	movs	r1, #9
 8003986:	4699      	mov	r9, r3
 8003988:	0028      	movs	r0, r5
 800398a:	f7fc fc47 	bl	800021c <__divsi3>
 800398e:	464b      	mov	r3, r9
 8003990:	6018      	str	r0, [r3, #0]
					while (TIM3->CNT  < waitTime){
 8003992:	4b4c      	ldr	r3, [pc, #304]	; (8003ac4 <HAL_COMP_TriggerCallback+0x254>)
 8003994:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003996:	42b2      	cmp	r2, r6
 8003998:	d3fc      	bcc.n	8003994 <HAL_COMP_TriggerCallback+0x124>
                                forcedcount = 0;
 800399a:	2300      	movs	r3, #0
 800399c:	4a57      	ldr	r2, [pc, #348]	; (8003afc <HAL_COMP_TriggerCallback+0x28c>)
 800399e:	6013      	str	r3, [r2, #0]
								compit = 0;
 80039a0:	4a49      	ldr	r2, [pc, #292]	; (8003ac8 <HAL_COMP_TriggerCallback+0x258>)
 80039a2:	7013      	strb	r3, [r2, #0]
								commutate();
 80039a4:	f7ff fde4 	bl	8003570 <commutate>
 80039a8:	4643      	mov	r3, r8
 80039aa:	464a      	mov	r2, r9
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6812      	ldr	r2, [r2, #0]
 80039b0:	189b      	adds	r3, r3, r2
								while (TIM3->CNT  < waitTime + blanktime){
 80039b2:	4a44      	ldr	r2, [pc, #272]	; (8003ac4 <HAL_COMP_TriggerCallback+0x254>)
 80039b4:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80039b6:	4299      	cmp	r1, r3
 80039b8:	d3fc      	bcc.n	80039b4 <HAL_COMP_TriggerCallback+0x144>
	if (HAL_COMP_Start_IT(&hcomp1) != HAL_OK) {
 80039ba:	0020      	movs	r0, r4
 80039bc:	f7fc ff52 	bl	8000864 <HAL_COMP_Start_IT>
 80039c0:	2800      	cmp	r0, #0
 80039c2:	d093      	beq.n	80038ec <HAL_COMP_TriggerCallback+0x7c>
 80039c4:	e7fe      	b.n	80039c4 <HAL_COMP_TriggerCallback+0x154>
 80039c6:	6831      	ldr	r1, [r6, #0]
	TIM3->CNT = TIM3->CNT - timestamp;
 80039c8:	4f3e      	ldr	r7, [pc, #248]	; (8003ac4 <HAL_COMP_TriggerCallback+0x254>)
	thiszctime = timestamp;
 80039ca:	4e45      	ldr	r6, [pc, #276]	; (8003ae0 <HAL_COMP_TriggerCallback+0x270>)
	TIM3->CNT = TIM3->CNT - timestamp;
 80039cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	thiszctime = timestamp;
 80039ce:	6031      	str	r1, [r6, #0]
	TIM3->CNT = TIM3->CNT - timestamp;
 80039d0:	1a59      	subs	r1, r3, r1
 80039d2:	6279      	str	r1, [r7, #36]	; 0x24
	HAL_COMP_Stop_IT(&hcomp1);
 80039d4:	0020      	movs	r0, r4
 80039d6:	f7fc ff99 	bl	800090c <HAL_COMP_Stop_IT>
	zctimeout = 0;
 80039da:	2300      	movs	r3, #0
 80039dc:	4699      	mov	r9, r3
 80039de:	464a      	mov	r2, r9
 80039e0:	4b40      	ldr	r3, [pc, #256]	; (8003ae4 <HAL_COMP_TriggerCallback+0x274>)
				commutation_interval = ((4 *commutation_interval) + thiszctime) / 5;    // TEST!   divide by two when tracking up down time independant
 80039e2:	2105      	movs	r1, #5
	zctimeout = 0;
 80039e4:	601a      	str	r2, [r3, #0]
				commutation_interval = ((4 *commutation_interval) + thiszctime) / 5;    // TEST!   divide by two when tracking up down time independant
 80039e6:	6833      	ldr	r3, [r6, #0]
 80039e8:	4a35      	ldr	r2, [pc, #212]	; (8003ac0 <HAL_COMP_TriggerCallback+0x250>)
 80039ea:	469c      	mov	ip, r3
 80039ec:	4690      	mov	r8, r2
 80039ee:	6812      	ldr	r2, [r2, #0]
 80039f0:	9301      	str	r3, [sp, #4]
 80039f2:	0095      	lsls	r5, r2, #2
 80039f4:	4465      	add	r5, ip
 80039f6:	0028      	movs	r0, r5
 80039f8:	f7fc fc10 	bl	800021c <__divsi3>
 80039fc:	4643      	mov	r3, r8
				bad_commutation = 0;
 80039fe:	464a      	mov	r2, r9
				commutation_interval = ((4 *commutation_interval) + thiszctime) / 5;    // TEST!   divide by two when tracking up down time independant
 8003a00:	6018      	str	r0, [r3, #0]
				bad_commutation = 0;
 8003a02:	4b39      	ldr	r3, [pc, #228]	; (8003ae8 <HAL_COMP_TriggerCallback+0x278>)
 8003a04:	701a      	strb	r2, [r3, #0]
			advance = commutation_interval / advancedivisor;
 8003a06:	4b39      	ldr	r3, [pc, #228]	; (8003aec <HAL_COMP_TriggerCallback+0x27c>)
 8003a08:	7819      	ldrb	r1, [r3, #0]
 8003a0a:	f7fc fc07 	bl	800021c <__divsi3>
 8003a0e:	4682      	mov	sl, r0
 8003a10:	4b37      	ldr	r3, [pc, #220]	; (8003af0 <HAL_COMP_TriggerCallback+0x280>)
			waitTime = commutation_interval /2   - advance ;
 8003a12:	210a      	movs	r1, #10
			advance = commutation_interval / advancedivisor;
 8003a14:	6018      	str	r0, [r3, #0]
			waitTime = commutation_interval /2   - advance ;
 8003a16:	0028      	movs	r0, r5
 8003a18:	f7fc fc00 	bl	800021c <__divsi3>
 8003a1c:	4653      	mov	r3, sl
 8003a1e:	1ac3      	subs	r3, r0, r3
 8003a20:	469a      	mov	sl, r3
 8003a22:	4652      	mov	r2, sl
 8003a24:	4b33      	ldr	r3, [pc, #204]	; (8003af4 <HAL_COMP_TriggerCallback+0x284>)
			blanktime = commutation_interval / 4;
 8003a26:	2114      	movs	r1, #20
			waitTime = commutation_interval /2   - advance ;
 8003a28:	601a      	str	r2, [r3, #0]
 8003a2a:	4698      	mov	r8, r3
			blanktime = commutation_interval / 4;
 8003a2c:	4b32      	ldr	r3, [pc, #200]	; (8003af8 <HAL_COMP_TriggerCallback+0x288>)
 8003a2e:	0028      	movs	r0, r5
 8003a30:	4699      	mov	r9, r3
 8003a32:	f7fc fbf3 	bl	800021c <__divsi3>
 8003a36:	464b      	mov	r3, r9
 8003a38:	6018      	str	r0, [r3, #0]
		if(tempbrake){
 8003a3a:	4b31      	ldr	r3, [pc, #196]	; (8003b00 <HAL_COMP_TriggerCallback+0x290>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d136      	bne.n	8003ab0 <HAL_COMP_TriggerCallback+0x240>
		if (sensorless){
 8003a42:	4b30      	ldr	r3, [pc, #192]	; (8003b04 <HAL_COMP_TriggerCallback+0x294>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d021      	beq.n	8003a8e <HAL_COMP_TriggerCallback+0x21e>
			while (TIM3->CNT  < waitTime){
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4c:	459a      	cmp	sl, r3
 8003a4e:	d907      	bls.n	8003a60 <HAL_COMP_TriggerCallback+0x1f0>
				GPIOA->BSRR = GPIO_PIN_15;
 8003a50:	2290      	movs	r2, #144	; 0x90
 8003a52:	2380      	movs	r3, #128	; 0x80
 8003a54:	05d2      	lsls	r2, r2, #23
 8003a56:	021b      	lsls	r3, r3, #8
 8003a58:	6193      	str	r3, [r2, #24]
			while (TIM3->CNT  < waitTime){
 8003a5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a5c:	4551      	cmp	r1, sl
 8003a5e:	d3fb      	bcc.n	8003a58 <HAL_COMP_TriggerCallback+0x1e8>
			GPIOA->BRR = GPIO_PIN_15;
 8003a60:	2280      	movs	r2, #128	; 0x80
 8003a62:	2390      	movs	r3, #144	; 0x90
 8003a64:	0212      	lsls	r2, r2, #8
 8003a66:	05db      	lsls	r3, r3, #23
 8003a68:	629a      	str	r2, [r3, #40]	; 0x28
			forcedcount = 0;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	4a23      	ldr	r2, [pc, #140]	; (8003afc <HAL_COMP_TriggerCallback+0x28c>)
 8003a6e:	6013      	str	r3, [r2, #0]
			compit = 0;
 8003a70:	4a15      	ldr	r2, [pc, #84]	; (8003ac8 <HAL_COMP_TriggerCallback+0x258>)
 8003a72:	7013      	strb	r3, [r2, #0]
			commutate();
 8003a74:	f7ff fd7c 	bl	8003570 <commutate>
 8003a78:	4643      	mov	r3, r8
 8003a7a:	464a      	mov	r2, r9
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	6812      	ldr	r2, [r2, #0]
 8003a80:	189b      	adds	r3, r3, r2
			while (TIM3->CNT  < waitTime + blanktime){
 8003a82:	4a10      	ldr	r2, [pc, #64]	; (8003ac4 <HAL_COMP_TriggerCallback+0x254>)
 8003a84:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8003a86:	4299      	cmp	r1, r3
 8003a88:	d3fc      	bcc.n	8003a84 <HAL_COMP_TriggerCallback+0x214>
 8003a8a:	6833      	ldr	r3, [r6, #0]
 8003a8c:	9301      	str	r3, [sp, #4]
		lastzctime = thiszctime;
 8003a8e:	4b1e      	ldr	r3, [pc, #120]	; (8003b08 <HAL_COMP_TriggerCallback+0x298>)
 8003a90:	9a01      	ldr	r2, [sp, #4]
 8003a92:	601a      	str	r2, [r3, #0]
		if (bemf_counts < 200){
 8003a94:	465b      	mov	r3, fp
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2bc7      	cmp	r3, #199	; 0xc7
 8003a9a:	dc8e      	bgt.n	80039ba <HAL_COMP_TriggerCallback+0x14a>
        bemf_counts++;
 8003a9c:	465a      	mov	r2, fp
 8003a9e:	3301      	adds	r3, #1
	if (HAL_COMP_Start_IT(&hcomp1) != HAL_OK) {
 8003aa0:	0020      	movs	r0, r4
        bemf_counts++;
 8003aa2:	6013      	str	r3, [r2, #0]
	if (HAL_COMP_Start_IT(&hcomp1) != HAL_OK) {
 8003aa4:	f7fc fede 	bl	8000864 <HAL_COMP_Start_IT>
 8003aa8:	2800      	cmp	r0, #0
 8003aaa:	d18b      	bne.n	80039c4 <HAL_COMP_TriggerCallback+0x154>
 8003aac:	e71e      	b.n	80038ec <HAL_COMP_TriggerCallback+0x7c>
 8003aae:	4c0b      	ldr	r4, [pc, #44]	; (8003adc <HAL_COMP_TriggerCallback+0x26c>)
		HAL_COMP_Stop_IT(&hcomp1);
 8003ab0:	0020      	movs	r0, r4
 8003ab2:	f7fc ff2b 	bl	800090c <HAL_COMP_Stop_IT>
		return;
 8003ab6:	e719      	b.n	80038ec <HAL_COMP_TriggerCallback+0x7c>
 8003ab8:	4c08      	ldr	r4, [pc, #32]	; (8003adc <HAL_COMP_TriggerCallback+0x26c>)
 8003aba:	e785      	b.n	80039c8 <HAL_COMP_TriggerCallback+0x158>
 8003abc:	20000268 	.word	0x20000268
 8003ac0:	200000a8 	.word	0x200000a8
 8003ac4:	40000400 	.word	0x40000400
 8003ac8:	200000ac 	.word	0x200000ac
 8003acc:	20000194 	.word	0x20000194
 8003ad0:	20000010 	.word	0x20000010
 8003ad4:	20000030 	.word	0x20000030
 8003ad8:	20000014 	.word	0x20000014
 8003adc:	200001f8 	.word	0x200001f8
 8003ae0:	20000158 	.word	0x20000158
 8003ae4:	20000164 	.word	0x20000164
 8003ae8:	2000009c 	.word	0x2000009c
 8003aec:	20000006 	.word	0x20000006
 8003af0:	20000090 	.word	0x20000090
 8003af4:	20000160 	.word	0x20000160
 8003af8:	2000036c 	.word	0x2000036c
 8003afc:	2000010c 	.word	0x2000010c
 8003b00:	20000154 	.word	0x20000154
 8003b04:	20000140 	.word	0x20000140
 8003b08:	20000118 	.word	0x20000118

08003b0c <playStartupTune>:





void playStartupTune(){
 8003b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b0e:	46de      	mov	lr, fp
 8003b10:	4657      	mov	r7, sl
 8003b12:	464e      	mov	r6, r9
 8003b14:	4645      	mov	r5, r8
	TIM1->PSC = 75;
 8003b16:	234b      	movs	r3, #75	; 0x4b
 8003b18:	4c92      	ldr	r4, [pc, #584]	; (8003d64 <playStartupTune+0x258>)
void playStartupTune(){
 8003b1a:	b5e0      	push	{r5, r6, r7, lr}
		phaseA(floating);
 8003b1c:	4d92      	ldr	r5, [pc, #584]	; (8003d68 <playStartupTune+0x25c>)
	TIM1->PSC = 75;
 8003b1e:	62a3      	str	r3, [r4, #40]	; 0x28
	TIM1->CCR1 = 5;
 8003b20:	3b46      	subs	r3, #70	; 0x46
 8003b22:	6363      	str	r3, [r4, #52]	; 0x34
		phaseA(floating);
 8003b24:	6828      	ldr	r0, [r5, #0]
	TIM1->CCR2 = 5;
 8003b26:	63a3      	str	r3, [r4, #56]	; 0x38
	TIM1->CCR3 = 5;
 8003b28:	63e3      	str	r3, [r4, #60]	; 0x3c
		phaseA(floating);
 8003b2a:	f7ff f847 	bl	8002bbc <phaseA>
		phaseB(lowside);
 8003b2e:	4e8f      	ldr	r6, [pc, #572]	; (8003d6c <playStartupTune+0x260>)
 8003b30:	6830      	ldr	r0, [r6, #0]
 8003b32:	f7ff f8a9 	bl	8002c88 <phaseB>
		phaseC(pwm);
 8003b36:	4f8e      	ldr	r7, [pc, #568]	; (8003d70 <playStartupTune+0x264>)
 8003b38:	6838      	ldr	r0, [r7, #0]
 8003b3a:	f7ff f913 	bl	8002d64 <phaseC>
	comStep(2);
	HAL_Delay(100);
 8003b3e:	2064      	movs	r0, #100	; 0x64
 8003b40:	f7fc fc88 	bl	8000454 <HAL_Delay>
	TIM1->PSC = 50;
 8003b44:	2332      	movs	r3, #50	; 0x32
	HAL_Delay(100);
 8003b46:	2064      	movs	r0, #100	; 0x64
	TIM1->PSC = 50;
 8003b48:	62a3      	str	r3, [r4, #40]	; 0x28
	HAL_Delay(100);
 8003b4a:	f7fc fc83 	bl	8000454 <HAL_Delay>
	TIM1->PSC = 25;
 8003b4e:	2319      	movs	r3, #25
	HAL_Delay(100);
 8003b50:	2064      	movs	r0, #100	; 0x64
	TIM1->PSC = 25;
 8003b52:	62a3      	str	r3, [r4, #40]	; 0x28
	HAL_Delay(100);
 8003b54:	f7fc fc7e 	bl	8000454 <HAL_Delay>
	phaseA(floating);
 8003b58:	682a      	ldr	r2, [r5, #0]
	if (newPhase == pwm) {
 8003b5a:	6838      	ldr	r0, [r7, #0]
 8003b5c:	4282      	cmp	r2, r0
 8003b5e:	d100      	bne.n	8003b62 <playStartupTune+0x56>
 8003b60:	e0c5      	b.n	8003cee <playStartupTune+0x1e2>
 8003b62:	2403      	movs	r4, #3
 8003b64:	2790      	movs	r7, #144	; 0x90
 8003b66:	4983      	ldr	r1, [pc, #524]	; (8003d74 <playStartupTune+0x268>)
 8003b68:	46a0      	mov	r8, r4
 8003b6a:	680b      	ldr	r3, [r1, #0]
 8003b6c:	05ff      	lsls	r7, r7, #23
 8003b6e:	43a3      	bics	r3, r4
 8003b70:	3c02      	subs	r4, #2
 8003b72:	4323      	orrs	r3, r4
 8003b74:	600b      	str	r3, [r1, #0]
		GPIOB->BRR = GPIO_PIN_0;
 8003b76:	628c      	str	r4, [r1, #40]	; 0x28
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	46a4      	mov	ip, r4
 8003b7c:	4c7e      	ldr	r4, [pc, #504]	; (8003d78 <playStartupTune+0x26c>)
 8003b7e:	4023      	ands	r3, r4
 8003b80:	46a1      	mov	r9, r4
 8003b82:	2480      	movs	r4, #128	; 0x80
 8003b84:	02e4      	lsls	r4, r4, #11
 8003b86:	4323      	orrs	r3, r4
 8003b88:	603b      	str	r3, [r7, #0]
		GPIOA->BRR = GPIO_PIN_9;
 8003b8a:	2380      	movs	r3, #128	; 0x80
 8003b8c:	46a2      	mov	sl, r4
	if (newPhase == lowside) {          // low mosfet on
 8003b8e:	6834      	ldr	r4, [r6, #0]
		GPIOA->BRR = GPIO_PIN_9;
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	469b      	mov	fp, r3
 8003b94:	62bb      	str	r3, [r7, #40]	; 0x28
	if (newPhase == lowside) {          // low mosfet on
 8003b96:	42a2      	cmp	r2, r4
 8003b98:	d10e      	bne.n	8003bb8 <playStartupTune+0xac>
 8003b9a:	4646      	mov	r6, r8
 8003b9c:	680b      	ldr	r3, [r1, #0]
 8003b9e:	43b3      	bics	r3, r6
 8003ba0:	4666      	mov	r6, ip
 8003ba2:	4333      	orrs	r3, r6
 8003ba4:	600b      	str	r3, [r1, #0]
		GPIOB->BSRR = GPIO_PIN_0;
 8003ba6:	618e      	str	r6, [r1, #24]
 8003ba8:	4649      	mov	r1, r9
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	400b      	ands	r3, r1
 8003bae:	4651      	mov	r1, sl
 8003bb0:	4319      	orrs	r1, r3
		GPIOA->BRR = GPIO_PIN_9;
 8003bb2:	465b      	mov	r3, fp
 8003bb4:	6039      	str	r1, [r7, #0]
 8003bb6:	62bb      	str	r3, [r7, #40]	; 0x28
	if (newPhase == pwm) {  // pwm
 8003bb8:	0016      	movs	r6, r2
 8003bba:	4282      	cmp	r2, r0
 8003bbc:	d100      	bne.n	8003bc0 <playStartupTune+0xb4>
 8003bbe:	e07b      	b.n	8003cb8 <playStartupTune+0x1ac>
 8003bc0:	2390      	movs	r3, #144	; 0x90
 8003bc2:	05db      	lsls	r3, r3, #23
 8003bc4:	6819      	ldr	r1, [r3, #0]
 8003bc6:	4f6d      	ldr	r7, [pc, #436]	; (8003d7c <playStartupTune+0x270>)
 8003bc8:	4039      	ands	r1, r7
 8003bca:	46bb      	mov	fp, r7
 8003bcc:	2780      	movs	r7, #128	; 0x80
 8003bce:	01ff      	lsls	r7, r7, #7
 8003bd0:	4339      	orrs	r1, r7
 8003bd2:	6019      	str	r1, [r3, #0]
		GPIOA->BRR = GPIO_PIN_7;
 8003bd4:	2180      	movs	r1, #128	; 0x80
 8003bd6:	6299      	str	r1, [r3, #40]	; 0x28
 8003bd8:	46bc      	mov	ip, r7
 8003bda:	4689      	mov	r9, r1
 8003bdc:	4f68      	ldr	r7, [pc, #416]	; (8003d80 <playStartupTune+0x274>)
 8003bde:	6819      	ldr	r1, [r3, #0]
 8003be0:	46b8      	mov	r8, r7
 8003be2:	4039      	ands	r1, r7
 8003be4:	2780      	movs	r7, #128	; 0x80
 8003be6:	027f      	lsls	r7, r7, #9
 8003be8:	4339      	orrs	r1, r7
 8003bea:	6019      	str	r1, [r3, #0]
		GPIOA->BRR = GPIO_PIN_8;
 8003bec:	2180      	movs	r1, #128	; 0x80
 8003bee:	0049      	lsls	r1, r1, #1
 8003bf0:	46ba      	mov	sl, r7
 8003bf2:	6299      	str	r1, [r3, #40]	; 0x28
	if (newPhase == lowside) {              // lowside
 8003bf4:	42a2      	cmp	r2, r4
 8003bf6:	d10e      	bne.n	8003c16 <playStartupTune+0x10a>
 8003bf8:	465f      	mov	r7, fp
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	4017      	ands	r7, r2
 8003bfe:	4662      	mov	r2, ip
 8003c00:	433a      	orrs	r2, r7
 8003c02:	601a      	str	r2, [r3, #0]
		GPIOA->BSRR = GPIO_PIN_7;
 8003c04:	464a      	mov	r2, r9
 8003c06:	4647      	mov	r7, r8
 8003c08:	619a      	str	r2, [r3, #24]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	403a      	ands	r2, r7
 8003c0e:	4657      	mov	r7, sl
 8003c10:	4317      	orrs	r7, r2
 8003c12:	601f      	str	r7, [r3, #0]
		GPIOA->BRR = GPIO_PIN_8;
 8003c14:	6299      	str	r1, [r3, #40]	; 0x28
	if (newPhase == pwm) {
 8003c16:	4286      	cmp	r6, r0
 8003c18:	d034      	beq.n	8003c84 <playStartupTune+0x178>
 8003c1a:	210c      	movs	r1, #12
 8003c1c:	4a55      	ldr	r2, [pc, #340]	; (8003d74 <playStartupTune+0x268>)
 8003c1e:	6813      	ldr	r3, [r2, #0]
 8003c20:	438b      	bics	r3, r1
 8003c22:	3908      	subs	r1, #8
 8003c24:	430b      	orrs	r3, r1
 8003c26:	6013      	str	r3, [r2, #0]
		GPIOB->BRR = GPIO_PIN_1;
 8003c28:	2302      	movs	r3, #2
 8003c2a:	6293      	str	r3, [r2, #40]	; 0x28
 8003c2c:	2390      	movs	r3, #144	; 0x90
 8003c2e:	05db      	lsls	r3, r3, #23
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	4954      	ldr	r1, [pc, #336]	; (8003d84 <playStartupTune+0x278>)
 8003c34:	4011      	ands	r1, r2
 8003c36:	2280      	movs	r2, #128	; 0x80
 8003c38:	0352      	lsls	r2, r2, #13
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_10;
 8003c3e:	2280      	movs	r2, #128	; 0x80
 8003c40:	00d2      	lsls	r2, r2, #3
 8003c42:	629a      	str	r2, [r3, #40]	; 0x28
	if (newPhase == lowside) {
 8003c44:	42a6      	cmp	r6, r4
 8003c46:	d114      	bne.n	8003c72 <playStartupTune+0x166>
 8003c48:	210c      	movs	r1, #12
 8003c4a:	4a4a      	ldr	r2, [pc, #296]	; (8003d74 <playStartupTune+0x268>)
 8003c4c:	6813      	ldr	r3, [r2, #0]
 8003c4e:	438b      	bics	r3, r1
 8003c50:	3908      	subs	r1, #8
 8003c52:	430b      	orrs	r3, r1
 8003c54:	6013      	str	r3, [r2, #0]
		GPIOB->BSRR = GPIO_PIN_1;
 8003c56:	2302      	movs	r3, #2
 8003c58:	6193      	str	r3, [r2, #24]
 8003c5a:	2390      	movs	r3, #144	; 0x90
 8003c5c:	05db      	lsls	r3, r3, #23
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	4948      	ldr	r1, [pc, #288]	; (8003d84 <playStartupTune+0x278>)
 8003c62:	4011      	ands	r1, r2
 8003c64:	2280      	movs	r2, #128	; 0x80
 8003c66:	0352      	lsls	r2, r2, #13
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_10;
 8003c6c:	2280      	movs	r2, #128	; 0x80
 8003c6e:	00d2      	lsls	r2, r2, #3
 8003c70:	629a      	str	r2, [r3, #40]	; 0x28
	allOff();
	TIM1->PSC = 0;
 8003c72:	2200      	movs	r2, #0
 8003c74:	4b3b      	ldr	r3, [pc, #236]	; (8003d64 <playStartupTune+0x258>)
 8003c76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c78:	bc3c      	pop	{r2, r3, r4, r5}
 8003c7a:	4690      	mov	r8, r2
 8003c7c:	4699      	mov	r9, r3
 8003c7e:	46a2      	mov	sl, r4
 8003c80:	46ab      	mov	fp, r5
 8003c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!slow_decay || prop_brake_active){
 8003c84:	4b40      	ldr	r3, [pc, #256]	; (8003d88 <playStartupTune+0x27c>)
 8003c86:	4a3b      	ldr	r2, [pc, #236]	; (8003d74 <playStartupTune+0x268>)
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d15e      	bne.n	8003d4c <playStartupTune+0x240>
 8003c8e:	210c      	movs	r1, #12
 8003c90:	6813      	ldr	r3, [r2, #0]
 8003c92:	438b      	bics	r3, r1
 8003c94:	3908      	subs	r1, #8
 8003c96:	430b      	orrs	r3, r1
 8003c98:	6013      	str	r3, [r2, #0]
			GPIOB->BRR = GPIO_PIN_1;
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	6293      	str	r3, [r2, #40]	; 0x28
 8003c9e:	2190      	movs	r1, #144	; 0x90
 8003ca0:	05c9      	lsls	r1, r1, #23
 8003ca2:	680b      	ldr	r3, [r1, #0]
 8003ca4:	4a37      	ldr	r2, [pc, #220]	; (8003d84 <playStartupTune+0x278>)
 8003ca6:	401a      	ands	r2, r3
 8003ca8:	2380      	movs	r3, #128	; 0x80
 8003caa:	039b      	lsls	r3, r3, #14
 8003cac:	4313      	orrs	r3, r2
 8003cae:	600b      	str	r3, [r1, #0]
	if (newPhase == floating) {
 8003cb0:	682b      	ldr	r3, [r5, #0]
 8003cb2:	429e      	cmp	r6, r3
 8003cb4:	d1c6      	bne.n	8003c44 <playStartupTune+0x138>
 8003cb6:	e7b0      	b.n	8003c1a <playStartupTune+0x10e>
		if (!slow_decay || prop_brake_active){
 8003cb8:	4b33      	ldr	r3, [pc, #204]	; (8003d88 <playStartupTune+0x27c>)
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d137      	bne.n	8003d30 <playStartupTune+0x224>
 8003cc0:	2390      	movs	r3, #144	; 0x90
 8003cc2:	05db      	lsls	r3, r3, #23
 8003cc4:	6819      	ldr	r1, [r3, #0]
 8003cc6:	4e2d      	ldr	r6, [pc, #180]	; (8003d7c <playStartupTune+0x270>)
 8003cc8:	400e      	ands	r6, r1
 8003cca:	2180      	movs	r1, #128	; 0x80
 8003ccc:	01c9      	lsls	r1, r1, #7
 8003cce:	4331      	orrs	r1, r6
 8003cd0:	6019      	str	r1, [r3, #0]
			GPIOA->BRR = GPIO_PIN_7;
 8003cd2:	2180      	movs	r1, #128	; 0x80
 8003cd4:	6299      	str	r1, [r3, #40]	; 0x28
 8003cd6:	2690      	movs	r6, #144	; 0x90
 8003cd8:	05f6      	lsls	r6, r6, #23
 8003cda:	6833      	ldr	r3, [r6, #0]
 8003cdc:	4928      	ldr	r1, [pc, #160]	; (8003d80 <playStartupTune+0x274>)
 8003cde:	4019      	ands	r1, r3
 8003ce0:	2380      	movs	r3, #128	; 0x80
 8003ce2:	029b      	lsls	r3, r3, #10
 8003ce4:	430b      	orrs	r3, r1
 8003ce6:	6033      	str	r3, [r6, #0]
 8003ce8:	0006      	movs	r6, r0
 8003cea:	0010      	movs	r0, r2
 8003cec:	e768      	b.n	8003bc0 <playStartupTune+0xb4>
		if(!slow_decay  || prop_brake_active){            // for future
 8003cee:	4b26      	ldr	r3, [pc, #152]	; (8003d88 <playStartupTune+0x27c>)
 8003cf0:	4920      	ldr	r1, [pc, #128]	; (8003d74 <playStartupTune+0x268>)
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d110      	bne.n	8003d1a <playStartupTune+0x20e>
 8003cf8:	2403      	movs	r4, #3
 8003cfa:	680b      	ldr	r3, [r1, #0]
 8003cfc:	43a3      	bics	r3, r4
 8003cfe:	3c02      	subs	r4, #2
 8003d00:	4323      	orrs	r3, r4
 8003d02:	600b      	str	r3, [r1, #0]
		GPIOB->BRR = GPIO_PIN_0;
 8003d04:	628c      	str	r4, [r1, #40]	; 0x28
 8003d06:	2490      	movs	r4, #144	; 0x90
 8003d08:	05e4      	lsls	r4, r4, #23
 8003d0a:	6823      	ldr	r3, [r4, #0]
 8003d0c:	491a      	ldr	r1, [pc, #104]	; (8003d78 <playStartupTune+0x26c>)
 8003d0e:	4019      	ands	r1, r3
 8003d10:	2380      	movs	r3, #128	; 0x80
 8003d12:	031b      	lsls	r3, r3, #12
 8003d14:	430b      	orrs	r3, r1
 8003d16:	6023      	str	r3, [r4, #0]
 8003d18:	e723      	b.n	8003b62 <playStartupTune+0x56>
		if(!slow_decay  || prop_brake_active){            // for future
 8003d1a:	4b1c      	ldr	r3, [pc, #112]	; (8003d8c <playStartupTune+0x280>)
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1ea      	bne.n	8003cf8 <playStartupTune+0x1ec>
 8003d22:	2403      	movs	r4, #3
 8003d24:	680b      	ldr	r3, [r1, #0]
 8003d26:	43a3      	bics	r3, r4
 8003d28:	3c01      	subs	r4, #1
 8003d2a:	4323      	orrs	r3, r4
 8003d2c:	600b      	str	r3, [r1, #0]
 8003d2e:	e7ea      	b.n	8003d06 <playStartupTune+0x1fa>
		if (!slow_decay || prop_brake_active){
 8003d30:	4b16      	ldr	r3, [pc, #88]	; (8003d8c <playStartupTune+0x280>)
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1c3      	bne.n	8003cc0 <playStartupTune+0x1b4>
 8003d38:	2690      	movs	r6, #144	; 0x90
 8003d3a:	05f6      	lsls	r6, r6, #23
 8003d3c:	6833      	ldr	r3, [r6, #0]
 8003d3e:	490f      	ldr	r1, [pc, #60]	; (8003d7c <playStartupTune+0x270>)
 8003d40:	4019      	ands	r1, r3
 8003d42:	2380      	movs	r3, #128	; 0x80
 8003d44:	021b      	lsls	r3, r3, #8
 8003d46:	430b      	orrs	r3, r1
 8003d48:	6033      	str	r3, [r6, #0]
 8003d4a:	e7c4      	b.n	8003cd6 <playStartupTune+0x1ca>
		if (!slow_decay || prop_brake_active){
 8003d4c:	4b0f      	ldr	r3, [pc, #60]	; (8003d8c <playStartupTune+0x280>)
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d19c      	bne.n	8003c8e <playStartupTune+0x182>
 8003d54:	210c      	movs	r1, #12
 8003d56:	6813      	ldr	r3, [r2, #0]
 8003d58:	438b      	bics	r3, r1
 8003d5a:	3904      	subs	r1, #4
 8003d5c:	430b      	orrs	r3, r1
 8003d5e:	6013      	str	r3, [r2, #0]
 8003d60:	e79d      	b.n	8003c9e <playStartupTune+0x192>
 8003d62:	46c0      	nop			; (mov r8, r8)
 8003d64:	40012c00 	.word	0x40012c00
 8003d68:	20000018 	.word	0x20000018
 8003d6c:	20000024 	.word	0x20000024
 8003d70:	2000002c 	.word	0x2000002c
 8003d74:	48000400 	.word	0x48000400
 8003d78:	fff3ffff 	.word	0xfff3ffff
 8003d7c:	ffff3fff 	.word	0xffff3fff
 8003d80:	fffcffff 	.word	0xfffcffff
 8003d84:	ffcfffff 	.word	0xffcfffff
 8003d88:	20000038 	.word	0x20000038
 8003d8c:	20000127 	.word	0x20000127

08003d90 <playInputTune>:

void playInputTune(){
 8003d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d92:	46de      	mov	lr, fp
 8003d94:	4657      	mov	r7, sl
 8003d96:	464e      	mov	r6, r9
 8003d98:	4645      	mov	r5, r8
	TIM1->PSC = 100;
 8003d9a:	2364      	movs	r3, #100	; 0x64
void playInputTune(){
 8003d9c:	b5e0      	push	{r5, r6, r7, lr}
	TIM1->PSC = 100;
 8003d9e:	4e8f      	ldr	r6, [pc, #572]	; (8003fdc <playInputTune+0x24c>)
 8003da0:	62b3      	str	r3, [r6, #40]	; 0x28
	TIM1->CCR1 = 5;
 8003da2:	3b5f      	subs	r3, #95	; 0x5f
 8003da4:	6373      	str	r3, [r6, #52]	; 0x34
	TIM1->CCR2 = 5;
 8003da6:	63b3      	str	r3, [r6, #56]	; 0x38
	TIM1->CCR3 = 5;
 8003da8:	63f3      	str	r3, [r6, #60]	; 0x3c
		phaseA(floating);
 8003daa:	4b8d      	ldr	r3, [pc, #564]	; (8003fe0 <playInputTune+0x250>)
 8003dac:	6818      	ldr	r0, [r3, #0]
 8003dae:	469b      	mov	fp, r3
 8003db0:	f7fe ff04 	bl	8002bbc <phaseA>
		phaseB(lowside);
 8003db4:	4d8b      	ldr	r5, [pc, #556]	; (8003fe4 <playInputTune+0x254>)
 8003db6:	6828      	ldr	r0, [r5, #0]
 8003db8:	f7fe ff66 	bl	8002c88 <phaseB>
		phaseC(pwm);
 8003dbc:	4f8a      	ldr	r7, [pc, #552]	; (8003fe8 <playInputTune+0x258>)
 8003dbe:	6838      	ldr	r0, [r7, #0]
 8003dc0:	f7fe ffd0 	bl	8002d64 <phaseC>
	comStep(2);
	HAL_Delay(100);
 8003dc4:	2064      	movs	r0, #100	; 0x64
 8003dc6:	f7fc fb45 	bl	8000454 <HAL_Delay>
	TIM1->PSC = 50;
 8003dca:	2332      	movs	r3, #50	; 0x32
	HAL_Delay(100);
 8003dcc:	2064      	movs	r0, #100	; 0x64
	TIM1->PSC = 50;
 8003dce:	62b3      	str	r3, [r6, #40]	; 0x28
	HAL_Delay(100);
 8003dd0:	f7fc fb40 	bl	8000454 <HAL_Delay>
	phaseA(floating);
 8003dd4:	465b      	mov	r3, fp
	if (newPhase == pwm) {
 8003dd6:	6838      	ldr	r0, [r7, #0]
	phaseA(floating);
 8003dd8:	681a      	ldr	r2, [r3, #0]
	if (newPhase == pwm) {
 8003dda:	4282      	cmp	r2, r0
 8003ddc:	d100      	bne.n	8003de0 <playInputTune+0x50>
 8003dde:	e0c2      	b.n	8003f66 <playInputTune+0x1d6>
 8003de0:	2603      	movs	r6, #3
 8003de2:	4982      	ldr	r1, [pc, #520]	; (8003fec <playInputTune+0x25c>)
 8003de4:	2701      	movs	r7, #1
 8003de6:	680b      	ldr	r3, [r1, #0]
 8003de8:	46b4      	mov	ip, r6
 8003dea:	43b3      	bics	r3, r6
 8003dec:	2690      	movs	r6, #144	; 0x90
 8003dee:	433b      	orrs	r3, r7
 8003df0:	600b      	str	r3, [r1, #0]
 8003df2:	05f6      	lsls	r6, r6, #23
		GPIOB->BRR = GPIO_PIN_0;
 8003df4:	628f      	str	r7, [r1, #40]	; 0x28
 8003df6:	6833      	ldr	r3, [r6, #0]
 8003df8:	4c7d      	ldr	r4, [pc, #500]	; (8003ff0 <playInputTune+0x260>)
	if (newPhase == lowside) {          // low mosfet on
 8003dfa:	682d      	ldr	r5, [r5, #0]
 8003dfc:	4023      	ands	r3, r4
 8003dfe:	46a0      	mov	r8, r4
 8003e00:	2480      	movs	r4, #128	; 0x80
 8003e02:	02e4      	lsls	r4, r4, #11
 8003e04:	4323      	orrs	r3, r4
 8003e06:	6033      	str	r3, [r6, #0]
		GPIOA->BRR = GPIO_PIN_9;
 8003e08:	2380      	movs	r3, #128	; 0x80
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	46a1      	mov	r9, r4
 8003e0e:	469a      	mov	sl, r3
 8003e10:	62b3      	str	r3, [r6, #40]	; 0x28
	if (newPhase == lowside) {          // low mosfet on
 8003e12:	42aa      	cmp	r2, r5
 8003e14:	d10d      	bne.n	8003e32 <playInputTune+0xa2>
 8003e16:	4664      	mov	r4, ip
 8003e18:	680b      	ldr	r3, [r1, #0]
 8003e1a:	43a3      	bics	r3, r4
 8003e1c:	433b      	orrs	r3, r7
 8003e1e:	600b      	str	r3, [r1, #0]
		GPIOB->BSRR = GPIO_PIN_0;
 8003e20:	618f      	str	r7, [r1, #24]
 8003e22:	4641      	mov	r1, r8
 8003e24:	6833      	ldr	r3, [r6, #0]
 8003e26:	400b      	ands	r3, r1
 8003e28:	4649      	mov	r1, r9
 8003e2a:	4319      	orrs	r1, r3
		GPIOA->BRR = GPIO_PIN_9;
 8003e2c:	4653      	mov	r3, sl
 8003e2e:	6031      	str	r1, [r6, #0]
 8003e30:	62b3      	str	r3, [r6, #40]	; 0x28
	if (newPhase == pwm) {  // pwm
 8003e32:	0016      	movs	r6, r2
 8003e34:	4282      	cmp	r2, r0
 8003e36:	d100      	bne.n	8003e3a <playInputTune+0xaa>
 8003e38:	e07a      	b.n	8003f30 <playInputTune+0x1a0>
 8003e3a:	2390      	movs	r3, #144	; 0x90
 8003e3c:	2480      	movs	r4, #128	; 0x80
 8003e3e:	05db      	lsls	r3, r3, #23
 8003e40:	6819      	ldr	r1, [r3, #0]
 8003e42:	4f6c      	ldr	r7, [pc, #432]	; (8003ff4 <playInputTune+0x264>)
 8003e44:	01e4      	lsls	r4, r4, #7
 8003e46:	4039      	ands	r1, r7
 8003e48:	4321      	orrs	r1, r4
 8003e4a:	6019      	str	r1, [r3, #0]
		GPIOA->BRR = GPIO_PIN_7;
 8003e4c:	2180      	movs	r1, #128	; 0x80
 8003e4e:	6299      	str	r1, [r3, #40]	; 0x28
 8003e50:	46a4      	mov	ip, r4
 8003e52:	4689      	mov	r9, r1
 8003e54:	4c68      	ldr	r4, [pc, #416]	; (8003ff8 <playInputTune+0x268>)
 8003e56:	6819      	ldr	r1, [r3, #0]
 8003e58:	46a0      	mov	r8, r4
 8003e5a:	4021      	ands	r1, r4
 8003e5c:	2480      	movs	r4, #128	; 0x80
 8003e5e:	0264      	lsls	r4, r4, #9
 8003e60:	4321      	orrs	r1, r4
 8003e62:	6019      	str	r1, [r3, #0]
		GPIOA->BRR = GPIO_PIN_8;
 8003e64:	2180      	movs	r1, #128	; 0x80
 8003e66:	0049      	lsls	r1, r1, #1
 8003e68:	46a2      	mov	sl, r4
 8003e6a:	6299      	str	r1, [r3, #40]	; 0x28
	if (newPhase == lowside) {              // lowside
 8003e6c:	42aa      	cmp	r2, r5
 8003e6e:	d10d      	bne.n	8003e8c <playInputTune+0xfc>
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	4644      	mov	r4, r8
 8003e74:	4017      	ands	r7, r2
 8003e76:	4662      	mov	r2, ip
 8003e78:	433a      	orrs	r2, r7
 8003e7a:	601a      	str	r2, [r3, #0]
		GPIOA->BSRR = GPIO_PIN_7;
 8003e7c:	464a      	mov	r2, r9
 8003e7e:	619a      	str	r2, [r3, #24]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	4022      	ands	r2, r4
 8003e84:	4654      	mov	r4, sl
 8003e86:	4314      	orrs	r4, r2
 8003e88:	601c      	str	r4, [r3, #0]
		GPIOA->BRR = GPIO_PIN_8;
 8003e8a:	6299      	str	r1, [r3, #40]	; 0x28
	if (newPhase == pwm) {
 8003e8c:	4286      	cmp	r6, r0
 8003e8e:	d034      	beq.n	8003efa <playInputTune+0x16a>
 8003e90:	210c      	movs	r1, #12
 8003e92:	4a56      	ldr	r2, [pc, #344]	; (8003fec <playInputTune+0x25c>)
 8003e94:	6813      	ldr	r3, [r2, #0]
 8003e96:	438b      	bics	r3, r1
 8003e98:	3908      	subs	r1, #8
 8003e9a:	430b      	orrs	r3, r1
 8003e9c:	6013      	str	r3, [r2, #0]
		GPIOB->BRR = GPIO_PIN_1;
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	6293      	str	r3, [r2, #40]	; 0x28
 8003ea2:	2390      	movs	r3, #144	; 0x90
 8003ea4:	05db      	lsls	r3, r3, #23
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	4954      	ldr	r1, [pc, #336]	; (8003ffc <playInputTune+0x26c>)
 8003eaa:	4011      	ands	r1, r2
 8003eac:	2280      	movs	r2, #128	; 0x80
 8003eae:	0352      	lsls	r2, r2, #13
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_10;
 8003eb4:	2280      	movs	r2, #128	; 0x80
 8003eb6:	00d2      	lsls	r2, r2, #3
 8003eb8:	629a      	str	r2, [r3, #40]	; 0x28
	if (newPhase == lowside) {
 8003eba:	42ae      	cmp	r6, r5
 8003ebc:	d114      	bne.n	8003ee8 <playInputTune+0x158>
 8003ebe:	210c      	movs	r1, #12
 8003ec0:	4a4a      	ldr	r2, [pc, #296]	; (8003fec <playInputTune+0x25c>)
 8003ec2:	6813      	ldr	r3, [r2, #0]
 8003ec4:	438b      	bics	r3, r1
 8003ec6:	3908      	subs	r1, #8
 8003ec8:	430b      	orrs	r3, r1
 8003eca:	6013      	str	r3, [r2, #0]
		GPIOB->BSRR = GPIO_PIN_1;
 8003ecc:	2302      	movs	r3, #2
 8003ece:	6193      	str	r3, [r2, #24]
 8003ed0:	2390      	movs	r3, #144	; 0x90
 8003ed2:	05db      	lsls	r3, r3, #23
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	4949      	ldr	r1, [pc, #292]	; (8003ffc <playInputTune+0x26c>)
 8003ed8:	4011      	ands	r1, r2
 8003eda:	2280      	movs	r2, #128	; 0x80
 8003edc:	0352      	lsls	r2, r2, #13
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_10;
 8003ee2:	2280      	movs	r2, #128	; 0x80
 8003ee4:	00d2      	lsls	r2, r2, #3
 8003ee6:	629a      	str	r2, [r3, #40]	; 0x28
	allOff();
	TIM1->PSC = 0;
 8003ee8:	2200      	movs	r2, #0
 8003eea:	4b3c      	ldr	r3, [pc, #240]	; (8003fdc <playInputTune+0x24c>)
 8003eec:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003eee:	bc3c      	pop	{r2, r3, r4, r5}
 8003ef0:	4690      	mov	r8, r2
 8003ef2:	4699      	mov	r9, r3
 8003ef4:	46a2      	mov	sl, r4
 8003ef6:	46ab      	mov	fp, r5
 8003ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!slow_decay || prop_brake_active){
 8003efa:	4b41      	ldr	r3, [pc, #260]	; (8004000 <playInputTune+0x270>)
 8003efc:	4a3b      	ldr	r2, [pc, #236]	; (8003fec <playInputTune+0x25c>)
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d15f      	bne.n	8003fc4 <playInputTune+0x234>
 8003f04:	210c      	movs	r1, #12
 8003f06:	6813      	ldr	r3, [r2, #0]
 8003f08:	438b      	bics	r3, r1
 8003f0a:	3908      	subs	r1, #8
 8003f0c:	430b      	orrs	r3, r1
 8003f0e:	6013      	str	r3, [r2, #0]
			GPIOB->BRR = GPIO_PIN_1;
 8003f10:	2302      	movs	r3, #2
 8003f12:	6293      	str	r3, [r2, #40]	; 0x28
 8003f14:	2190      	movs	r1, #144	; 0x90
 8003f16:	05c9      	lsls	r1, r1, #23
 8003f18:	680b      	ldr	r3, [r1, #0]
 8003f1a:	4a38      	ldr	r2, [pc, #224]	; (8003ffc <playInputTune+0x26c>)
 8003f1c:	401a      	ands	r2, r3
 8003f1e:	2380      	movs	r3, #128	; 0x80
 8003f20:	039b      	lsls	r3, r3, #14
 8003f22:	4313      	orrs	r3, r2
 8003f24:	600b      	str	r3, [r1, #0]
	if (newPhase == floating) {
 8003f26:	465b      	mov	r3, fp
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	429e      	cmp	r6, r3
 8003f2c:	d1c5      	bne.n	8003eba <playInputTune+0x12a>
 8003f2e:	e7af      	b.n	8003e90 <playInputTune+0x100>
		if (!slow_decay || prop_brake_active){
 8003f30:	4b33      	ldr	r3, [pc, #204]	; (8004000 <playInputTune+0x270>)
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d137      	bne.n	8003fa8 <playInputTune+0x218>
 8003f38:	2390      	movs	r3, #144	; 0x90
 8003f3a:	05db      	lsls	r3, r3, #23
 8003f3c:	6819      	ldr	r1, [r3, #0]
 8003f3e:	4e2d      	ldr	r6, [pc, #180]	; (8003ff4 <playInputTune+0x264>)
 8003f40:	400e      	ands	r6, r1
 8003f42:	2180      	movs	r1, #128	; 0x80
 8003f44:	01c9      	lsls	r1, r1, #7
 8003f46:	4331      	orrs	r1, r6
 8003f48:	6019      	str	r1, [r3, #0]
			GPIOA->BRR = GPIO_PIN_7;
 8003f4a:	2180      	movs	r1, #128	; 0x80
 8003f4c:	6299      	str	r1, [r3, #40]	; 0x28
 8003f4e:	2690      	movs	r6, #144	; 0x90
 8003f50:	05f6      	lsls	r6, r6, #23
 8003f52:	6833      	ldr	r3, [r6, #0]
 8003f54:	4928      	ldr	r1, [pc, #160]	; (8003ff8 <playInputTune+0x268>)
 8003f56:	4019      	ands	r1, r3
 8003f58:	2380      	movs	r3, #128	; 0x80
 8003f5a:	029b      	lsls	r3, r3, #10
 8003f5c:	430b      	orrs	r3, r1
 8003f5e:	6033      	str	r3, [r6, #0]
 8003f60:	0006      	movs	r6, r0
 8003f62:	0010      	movs	r0, r2
 8003f64:	e769      	b.n	8003e3a <playInputTune+0xaa>
		if(!slow_decay  || prop_brake_active){            // for future
 8003f66:	4b26      	ldr	r3, [pc, #152]	; (8004000 <playInputTune+0x270>)
 8003f68:	4920      	ldr	r1, [pc, #128]	; (8003fec <playInputTune+0x25c>)
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d110      	bne.n	8003f92 <playInputTune+0x202>
 8003f70:	2603      	movs	r6, #3
 8003f72:	680b      	ldr	r3, [r1, #0]
 8003f74:	43b3      	bics	r3, r6
 8003f76:	3e02      	subs	r6, #2
 8003f78:	4333      	orrs	r3, r6
 8003f7a:	600b      	str	r3, [r1, #0]
		GPIOB->BRR = GPIO_PIN_0;
 8003f7c:	628e      	str	r6, [r1, #40]	; 0x28
 8003f7e:	2690      	movs	r6, #144	; 0x90
 8003f80:	05f6      	lsls	r6, r6, #23
 8003f82:	6833      	ldr	r3, [r6, #0]
 8003f84:	491a      	ldr	r1, [pc, #104]	; (8003ff0 <playInputTune+0x260>)
 8003f86:	4019      	ands	r1, r3
 8003f88:	2380      	movs	r3, #128	; 0x80
 8003f8a:	031b      	lsls	r3, r3, #12
 8003f8c:	430b      	orrs	r3, r1
 8003f8e:	6033      	str	r3, [r6, #0]
 8003f90:	e726      	b.n	8003de0 <playInputTune+0x50>
		if(!slow_decay  || prop_brake_active){            // for future
 8003f92:	4b1c      	ldr	r3, [pc, #112]	; (8004004 <playInputTune+0x274>)
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1ea      	bne.n	8003f70 <playInputTune+0x1e0>
 8003f9a:	2603      	movs	r6, #3
 8003f9c:	680b      	ldr	r3, [r1, #0]
 8003f9e:	43b3      	bics	r3, r6
 8003fa0:	3e01      	subs	r6, #1
 8003fa2:	4333      	orrs	r3, r6
 8003fa4:	600b      	str	r3, [r1, #0]
 8003fa6:	e7ea      	b.n	8003f7e <playInputTune+0x1ee>
		if (!slow_decay || prop_brake_active){
 8003fa8:	4b16      	ldr	r3, [pc, #88]	; (8004004 <playInputTune+0x274>)
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1c3      	bne.n	8003f38 <playInputTune+0x1a8>
 8003fb0:	2690      	movs	r6, #144	; 0x90
 8003fb2:	05f6      	lsls	r6, r6, #23
 8003fb4:	6833      	ldr	r3, [r6, #0]
 8003fb6:	490f      	ldr	r1, [pc, #60]	; (8003ff4 <playInputTune+0x264>)
 8003fb8:	4019      	ands	r1, r3
 8003fba:	2380      	movs	r3, #128	; 0x80
 8003fbc:	021b      	lsls	r3, r3, #8
 8003fbe:	430b      	orrs	r3, r1
 8003fc0:	6033      	str	r3, [r6, #0]
 8003fc2:	e7c4      	b.n	8003f4e <playInputTune+0x1be>
		if (!slow_decay || prop_brake_active){
 8003fc4:	4b0f      	ldr	r3, [pc, #60]	; (8004004 <playInputTune+0x274>)
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d19b      	bne.n	8003f04 <playInputTune+0x174>
 8003fcc:	210c      	movs	r1, #12
 8003fce:	6813      	ldr	r3, [r2, #0]
 8003fd0:	438b      	bics	r3, r1
 8003fd2:	3904      	subs	r1, #4
 8003fd4:	430b      	orrs	r3, r1
 8003fd6:	6013      	str	r3, [r2, #0]
 8003fd8:	e79c      	b.n	8003f14 <playInputTune+0x184>
 8003fda:	46c0      	nop			; (mov r8, r8)
 8003fdc:	40012c00 	.word	0x40012c00
 8003fe0:	20000018 	.word	0x20000018
 8003fe4:	20000024 	.word	0x20000024
 8003fe8:	2000002c 	.word	0x2000002c
 8003fec:	48000400 	.word	0x48000400
 8003ff0:	fff3ffff 	.word	0xfff3ffff
 8003ff4:	ffff3fff 	.word	0xffff3fff
 8003ff8:	fffcffff 	.word	0xfffcffff
 8003ffc:	ffcfffff 	.word	0xffcfffff
 8004000:	20000038 	.word	0x20000038
 8004004:	20000127 	.word	0x20000127

08004008 <HAL_ADC_ConvCpltCallback>:

void getADCs(){
	voltageraw = ADC1ConvertedValues[0];
 8004008:	4b03      	ldr	r3, [pc, #12]	; (8004018 <HAL_ADC_ConvCpltCallback+0x10>)
 800400a:	4a04      	ldr	r2, [pc, #16]	; (800401c <HAL_ADC_ConvCpltCallback+0x14>)
 800400c:	6819      	ldr	r1, [r3, #0]
 800400e:	6011      	str	r1, [r2, #0]
	currentraw = ADC1ConvertedValues[1];
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	4b03      	ldr	r3, [pc, #12]	; (8004020 <HAL_ADC_ConvCpltCallback+0x18>)
 8004014:	601a      	str	r2, [r3, #0]


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
	getADCs();
}
 8004016:	4770      	bx	lr
 8004018:	20000080 	.word	0x20000080
 800401c:	2000015c 	.word	0x2000015c
 8004020:	200000b4 	.word	0x200000b4

08004024 <detectInput>:


void detectInput(){
 8004024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004026:	464e      	mov	r6, r9
 8004028:	46de      	mov	lr, fp
 800402a:	4657      	mov	r7, sl
 800402c:	4645      	mov	r5, r8
	smallestnumber = 20000;
 800402e:	4b3c      	ldr	r3, [pc, #240]	; (8004120 <detectInput+0xfc>)
void detectInput(){
 8004030:	b5e0      	push	{r5, r6, r7, lr}
	smallestnumber = 20000;
 8004032:	4e3c      	ldr	r6, [pc, #240]	; (8004124 <detectInput+0x100>)
 8004034:	4699      	mov	r9, r3
 8004036:	601e      	str	r6, [r3, #0]
	dshot = 0;
 8004038:	4b3b      	ldr	r3, [pc, #236]	; (8004128 <detectInput+0x104>)
 800403a:	469b      	mov	fp, r3
 800403c:	2300      	movs	r3, #0
 800403e:	465a      	mov	r2, fp
 8004040:	7013      	strb	r3, [r2, #0]
	proshot = 0;
 8004042:	4a3a      	ldr	r2, [pc, #232]	; (800412c <detectInput+0x108>)
 8004044:	7013      	strb	r3, [r2, #0]
 8004046:	4692      	mov	sl, r2
	multishot = 0;
 8004048:	4a39      	ldr	r2, [pc, #228]	; (8004130 <detectInput+0x10c>)
 800404a:	7013      	strb	r3, [r2, #0]
	oneshot42 = 0;
 800404c:	4a39      	ldr	r2, [pc, #228]	; (8004134 <detectInput+0x110>)
 800404e:	7013      	strb	r3, [r2, #0]
	oneshot125 = 0;
 8004050:	4a39      	ldr	r2, [pc, #228]	; (8004138 <detectInput+0x114>)
 8004052:	7013      	strb	r3, [r2, #0]
	servoPwm = 0;
 8004054:	4a39      	ldr	r2, [pc, #228]	; (800413c <detectInput+0x118>)
 8004056:	7013      	strb	r3, [r2, #0]
	int lastnumber = dma_buffer[0];
 8004058:	4b39      	ldr	r3, [pc, #228]	; (8004140 <detectInput+0x11c>)
 800405a:	681a      	ldr	r2, [r3, #0]
	for ( int j = 1 ; j < input_buffer_size; j++){
 800405c:	4b39      	ldr	r3, [pc, #228]	; (8004144 <detectInput+0x120>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2b01      	cmp	r3, #1
 8004062:	dd40      	ble.n	80040e6 <detectInput+0xc2>
 8004064:	4836      	ldr	r0, [pc, #216]	; (8004140 <detectInput+0x11c>)
 8004066:	0035      	movs	r5, r6
 8004068:	4680      	mov	r8, r0
 800406a:	4935      	ldr	r1, [pc, #212]	; (8004140 <detectInput+0x11c>)
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	3104      	adds	r1, #4
 8004070:	4498      	add	r8, r3

		if((dma_buffer[j] - lastnumber) < smallestnumber){ // blank space
 8004072:	6808      	ldr	r0, [r1, #0]
 8004074:	1a83      	subs	r3, r0, r2
 8004076:	001c      	movs	r4, r3
 8004078:	002a      	movs	r2, r5
 800407a:	42ab      	cmp	r3, r5
 800407c:	d300      	bcc.n	8004080 <detectInput+0x5c>
 800407e:	002c      	movs	r4, r5
 8004080:	0025      	movs	r5, r4
 8004082:	001f      	movs	r7, r3
 8004084:	4293      	cmp	r3, r2
 8004086:	d900      	bls.n	800408a <detectInput+0x66>
 8004088:	0017      	movs	r7, r2
 800408a:	4293      	cmp	r3, r2
 800408c:	d300      	bcc.n	8004090 <detectInput+0x6c>
 800408e:	0033      	movs	r3, r6
 8004090:	3104      	adds	r1, #4
 8004092:	001e      	movs	r6, r3
			smallestnumber = dma_buffer[j] - lastnumber;

		}
		lastnumber = dma_buffer[j];
 8004094:	0002      	movs	r2, r0
	for ( int j = 1 ; j < input_buffer_size; j++){
 8004096:	4541      	cmp	r1, r8
 8004098:	d1eb      	bne.n	8004072 <detectInput+0x4e>
 800409a:	464a      	mov	r2, r9
 800409c:	6013      	str	r3, [r2, #0]
	}

	if ((smallestnumber > 3)&&(smallestnumber < 22)){
 800409e:	1f3b      	subs	r3, r7, #4
 80040a0:	2b11      	cmp	r3, #17
 80040a2:	d82f      	bhi.n	8004104 <detectInput+0xe0>
		dshot = 1;
 80040a4:	465a      	mov	r2, fp
 80040a6:	2301      	movs	r3, #1
 80040a8:	7013      	strb	r3, [r2, #0]
 80040aa:	003a      	movs	r2, r7
 80040ac:	3a65      	subs	r2, #101	; 0x65
	if ((smallestnumber > 40 )&&(smallestnumber < 80)){
		proshot = 1;
		TIM15->PSC=1;
		TIM15->CNT = 0xffff;
	}
	if ((smallestnumber > 100 )&&(smallestnumber < 400)){
 80040ae:	2395      	movs	r3, #149	; 0x95
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d813      	bhi.n	80040de <detectInput+0xba>
		multishot = 1;
 80040b6:	3b2a      	subs	r3, #42	; 0x2a
 80040b8:	4a1d      	ldr	r2, [pc, #116]	; (8004130 <detectInput+0x10c>)
 80040ba:	3bff      	subs	r3, #255	; 0xff
 80040bc:	7013      	strb	r3, [r2, #0]
		servoPwm = 1;
		TIM15->PSC = 47;
		TIM15->CNT = 0xffff;
	}

	if (smallestnumber == 0){
 80040be:	2c00      	cmp	r4, #0
 80040c0:	d119      	bne.n	80040f6 <detectInput+0xd2>
		inputSet = 0;
 80040c2:	4b21      	ldr	r3, [pc, #132]	; (8004148 <detectInput+0x124>)
 80040c4:	701c      	strb	r4, [r3, #0]
		inputSet = 1;

		HAL_Delay(50);
		//	playInputTune();
	}
	HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , 64);
 80040c6:	2340      	movs	r3, #64	; 0x40
 80040c8:	4a1d      	ldr	r2, [pc, #116]	; (8004140 <detectInput+0x11c>)
 80040ca:	2100      	movs	r1, #0
 80040cc:	481f      	ldr	r0, [pc, #124]	; (800414c <detectInput+0x128>)
 80040ce:	f7fd fd5f 	bl	8001b90 <HAL_TIM_IC_Start_DMA>
}
 80040d2:	bc3c      	pop	{r2, r3, r4, r5}
 80040d4:	4690      	mov	r8, r2
 80040d6:	4699      	mov	r9, r3
 80040d8:	46a2      	mov	sl, r4
 80040da:	46ab      	mov	fp, r5
 80040dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (smallestnumber > 2000){
 80040de:	23fa      	movs	r3, #250	; 0xfa
 80040e0:	00db      	lsls	r3, r3, #3
 80040e2:	429c      	cmp	r4, r3
 80040e4:	ddeb      	ble.n	80040be <detectInput+0x9a>
		servoPwm = 1;
 80040e6:	2301      	movs	r3, #1
 80040e8:	4a14      	ldr	r2, [pc, #80]	; (800413c <detectInput+0x118>)
 80040ea:	7013      	strb	r3, [r2, #0]
		TIM15->PSC = 47;
 80040ec:	222f      	movs	r2, #47	; 0x2f
 80040ee:	4b18      	ldr	r3, [pc, #96]	; (8004150 <detectInput+0x12c>)
 80040f0:	629a      	str	r2, [r3, #40]	; 0x28
		TIM15->CNT = 0xffff;
 80040f2:	4a18      	ldr	r2, [pc, #96]	; (8004154 <detectInput+0x130>)
 80040f4:	625a      	str	r2, [r3, #36]	; 0x24
		inputSet = 1;
 80040f6:	2201      	movs	r2, #1
 80040f8:	4b13      	ldr	r3, [pc, #76]	; (8004148 <detectInput+0x124>)
		HAL_Delay(50);
 80040fa:	2032      	movs	r0, #50	; 0x32
		inputSet = 1;
 80040fc:	701a      	strb	r2, [r3, #0]
		HAL_Delay(50);
 80040fe:	f7fc f9a9 	bl	8000454 <HAL_Delay>
 8004102:	e7e0      	b.n	80040c6 <detectInput+0xa2>
 8004104:	003a      	movs	r2, r7
	if ((smallestnumber > 40 )&&(smallestnumber < 80)){
 8004106:	3f29      	subs	r7, #41	; 0x29
 8004108:	3a65      	subs	r2, #101	; 0x65
 800410a:	2f26      	cmp	r7, #38	; 0x26
 800410c:	d8cf      	bhi.n	80040ae <detectInput+0x8a>
		proshot = 1;
 800410e:	2101      	movs	r1, #1
 8004110:	4653      	mov	r3, sl
 8004112:	7019      	strb	r1, [r3, #0]
		TIM15->PSC=1;
 8004114:	4b0e      	ldr	r3, [pc, #56]	; (8004150 <detectInput+0x12c>)
 8004116:	6299      	str	r1, [r3, #40]	; 0x28
		TIM15->CNT = 0xffff;
 8004118:	490e      	ldr	r1, [pc, #56]	; (8004154 <detectInput+0x130>)
 800411a:	6259      	str	r1, [r3, #36]	; 0x24
 800411c:	e7c7      	b.n	80040ae <detectInput+0x8a>
 800411e:	46c0      	nop			; (mov r8, r8)
 8004120:	2000003c 	.word	0x2000003c
 8004124:	00004e20 	.word	0x00004e20
 8004128:	200000fc 	.word	0x200000fc
 800412c:	20000138 	.word	0x20000138
 8004130:	2000011c 	.word	0x2000011c
 8004134:	20000125 	.word	0x20000125
 8004138:	20000124 	.word	0x20000124
 800413c:	20000144 	.word	0x20000144
 8004140:	2000026c 	.word	0x2000026c
 8004144:	20000020 	.word	0x20000020
 8004148:	20000114 	.word	0x20000114
 800414c:	20000198 	.word	0x20000198
 8004150:	40014000 	.word	0x40014000
 8004154:	0000ffff 	.word	0x0000ffff

08004158 <computeProshotDMA>:

void computeProshotDMA(){
 8004158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800415a:	46d6      	mov	lr, sl
 800415c:	464f      	mov	r7, r9
 800415e:	4646      	mov	r6, r8
	int lastnumber = dma_buffer[0];
	for ( int j = 1 ; j < 9; j++){

		if(((dma_buffer[j] - lastnumber) > 1500) && ((dma_buffer[j] - lastnumber) < 50000)){ // blank space
 8004160:	4c72      	ldr	r4, [pc, #456]	; (800432c <computeProshotDMA+0x1d4>)
 8004162:	4a73      	ldr	r2, [pc, #460]	; (8004330 <computeProshotDMA+0x1d8>)
 8004164:	6863      	ldr	r3, [r4, #4]
void computeProshotDMA(){
 8004166:	b5c0      	push	{r6, r7, lr}
		if(((dma_buffer[j] - lastnumber) > 1500) && ((dma_buffer[j] - lastnumber) < 50000)){ // blank space
 8004168:	1899      	adds	r1, r3, r2
 800416a:	6822      	ldr	r2, [r4, #0]
 800416c:	1a89      	subs	r1, r1, r2
 800416e:	4a71      	ldr	r2, [pc, #452]	; (8004334 <computeProshotDMA+0x1dc>)
 8004170:	4291      	cmp	r1, r2
 8004172:	d935      	bls.n	80041e0 <computeProshotDMA+0x88>
 8004174:	68a0      	ldr	r0, [r4, #8]
 8004176:	496e      	ldr	r1, [pc, #440]	; (8004330 <computeProshotDMA+0x1d8>)
 8004178:	1841      	adds	r1, r0, r1
 800417a:	1acb      	subs	r3, r1, r3
 800417c:	4293      	cmp	r3, r2
 800417e:	d800      	bhi.n	8004182 <computeProshotDMA+0x2a>
 8004180:	e0a1      	b.n	80042c6 <computeProshotDMA+0x16e>
 8004182:	68e3      	ldr	r3, [r4, #12]
 8004184:	496a      	ldr	r1, [pc, #424]	; (8004330 <computeProshotDMA+0x1d8>)
 8004186:	1859      	adds	r1, r3, r1
 8004188:	1a09      	subs	r1, r1, r0
 800418a:	4291      	cmp	r1, r2
 800418c:	d800      	bhi.n	8004190 <computeProshotDMA+0x38>
 800418e:	e09d      	b.n	80042cc <computeProshotDMA+0x174>
 8004190:	6920      	ldr	r0, [r4, #16]
 8004192:	4967      	ldr	r1, [pc, #412]	; (8004330 <computeProshotDMA+0x1d8>)
 8004194:	1841      	adds	r1, r0, r1
 8004196:	1acb      	subs	r3, r1, r3
 8004198:	4293      	cmp	r3, r2
 800419a:	d800      	bhi.n	800419e <computeProshotDMA+0x46>
 800419c:	e098      	b.n	80042d0 <computeProshotDMA+0x178>
 800419e:	6963      	ldr	r3, [r4, #20]
 80041a0:	4963      	ldr	r1, [pc, #396]	; (8004330 <computeProshotDMA+0x1d8>)
 80041a2:	1859      	adds	r1, r3, r1
 80041a4:	1a09      	subs	r1, r1, r0
 80041a6:	4291      	cmp	r1, r2
 80041a8:	d800      	bhi.n	80041ac <computeProshotDMA+0x54>
 80041aa:	e094      	b.n	80042d6 <computeProshotDMA+0x17e>
 80041ac:	69a0      	ldr	r0, [r4, #24]
 80041ae:	4960      	ldr	r1, [pc, #384]	; (8004330 <computeProshotDMA+0x1d8>)
 80041b0:	1841      	adds	r1, r0, r1
 80041b2:	1acb      	subs	r3, r1, r3
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d800      	bhi.n	80041ba <computeProshotDMA+0x62>
 80041b8:	e08f      	b.n	80042da <computeProshotDMA+0x182>
 80041ba:	69e3      	ldr	r3, [r4, #28]
 80041bc:	495c      	ldr	r1, [pc, #368]	; (8004330 <computeProshotDMA+0x1d8>)
 80041be:	1859      	adds	r1, r3, r1
 80041c0:	1a09      	subs	r1, r1, r0
 80041c2:	4291      	cmp	r1, r2
 80041c4:	d800      	bhi.n	80041c8 <computeProshotDMA+0x70>
 80041c6:	e08b      	b.n	80042e0 <computeProshotDMA+0x188>
 80041c8:	6a20      	ldr	r0, [r4, #32]
 80041ca:	4959      	ldr	r1, [pc, #356]	; (8004330 <computeProshotDMA+0x1d8>)
 80041cc:	1841      	adds	r1, r0, r1
 80041ce:	1acb      	subs	r3, r1, r3
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d800      	bhi.n	80041d6 <computeProshotDMA+0x7e>
 80041d4:	e086      	b.n	80042e4 <computeProshotDMA+0x18c>
            }
			break;
		}
		lastnumber = dma_buffer[j];
	}
}
 80041d6:	bc1c      	pop	{r2, r3, r4}
 80041d8:	4690      	mov	r8, r2
 80041da:	4699      	mov	r9, r3
 80041dc:	46a2      	mov	sl, r4
 80041de:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for ( int j = 1 ; j < 9; j++){
 80041e0:	2601      	movs	r6, #1
			if ((dma_buffer[j+7] - dma_buffer[j])<10000){
 80041e2:	1df2      	adds	r2, r6, #7
 80041e4:	0092      	lsls	r2, r2, #2
 80041e6:	58a2      	ldr	r2, [r4, r2]
 80041e8:	4690      	mov	r8, r2
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	4a52      	ldr	r2, [pc, #328]	; (8004338 <computeProshotDMA+0x1e0>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d920      	bls.n	8004234 <computeProshotDMA+0xdc>
 80041f2:	4b52      	ldr	r3, [pc, #328]	; (800433c <computeProshotDMA+0x1e4>)
 80041f4:	685a      	ldr	r2, [r3, #4]
 80041f6:	681d      	ldr	r5, [r3, #0]
 80041f8:	4691      	mov	r9, r2
 80041fa:	689f      	ldr	r7, [r3, #8]
			int tocheck = ((propulse[0]<<7 | propulse[1]<<3 | propulse[2]>>1));
 80041fc:	464b      	mov	r3, r9
 80041fe:	01ed      	lsls	r5, r5, #7
 8004200:	00db      	lsls	r3, r3, #3
 8004202:	431d      	orrs	r5, r3
			if (tocheck > 2047 || tocheck < 0){
 8004204:	4b4e      	ldr	r3, [pc, #312]	; (8004340 <computeProshotDMA+0x1e8>)
			int tocheck = ((propulse[0]<<7 | propulse[1]<<3 | propulse[2]>>1));
 8004206:	107f      	asrs	r7, r7, #1
 8004208:	433d      	orrs	r5, r7
			if (tocheck > 2047 || tocheck < 0){
 800420a:	429d      	cmp	r5, r3
 800420c:	d8e3      	bhi.n	80041d6 <computeProshotDMA+0x7e>
				if(calcCRC == checkCRC){
 800420e:	4b4d      	ldr	r3, [pc, #308]	; (8004344 <computeProshotDMA+0x1ec>)
 8004210:	781a      	ldrb	r2, [r3, #0]
 8004212:	4b4d      	ldr	r3, [pc, #308]	; (8004348 <computeProshotDMA+0x1f0>)
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	429a      	cmp	r2, r3
 8004218:	d1dd      	bne.n	80041d6 <computeProshotDMA+0x7e>
				if (tocheck > 47 && tocheck <= 2047){
 800421a:	002b      	movs	r3, r5
 800421c:	4a4b      	ldr	r2, [pc, #300]	; (800434c <computeProshotDMA+0x1f4>)
 800421e:	3b30      	subs	r3, #48	; 0x30
 8004220:	4293      	cmp	r3, r2
 8004222:	d862      	bhi.n	80042ea <computeProshotDMA+0x192>
				newinput = tocheck;
 8004224:	4b4a      	ldr	r3, [pc, #296]	; (8004350 <computeProshotDMA+0x1f8>)
				  dshotcommand = 0;
 8004226:	4a4b      	ldr	r2, [pc, #300]	; (8004354 <computeProshotDMA+0x1fc>)
				newinput = tocheck;
 8004228:	601d      	str	r5, [r3, #0]
				  dshotcommand = 0;
 800422a:	2300      	movs	r3, #0
 800422c:	6013      	str	r3, [r2, #0]
		          commandcount = 0;
 800422e:	4a4a      	ldr	r2, [pc, #296]	; (8004358 <computeProshotDMA+0x200>)
 8004230:	6013      	str	r3, [r2, #0]
 8004232:	e7d0      	b.n	80041d6 <computeProshotDMA+0x7e>
					propulse[i] = (((dma_buffer[j + i*2 +1] - dma_buffer[j + i*2])) - 23)/3;
 8004234:	1c73      	adds	r3, r6, #1
 8004236:	00b2      	lsls	r2, r6, #2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	58e0      	ldr	r0, [r4, r3]
 800423c:	58a3      	ldr	r3, [r4, r2]
 800423e:	2103      	movs	r1, #3
 8004240:	1ac0      	subs	r0, r0, r3
 8004242:	3817      	subs	r0, #23
 8004244:	f7fb ff60 	bl	8000108 <__udivsi3>
 8004248:	4b3c      	ldr	r3, [pc, #240]	; (800433c <computeProshotDMA+0x1e4>)
 800424a:	1cf2      	adds	r2, r6, #3
 800424c:	469a      	mov	sl, r3
 800424e:	6018      	str	r0, [r3, #0]
 8004250:	1cb3      	adds	r3, r6, #2
 8004252:	0092      	lsls	r2, r2, #2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	58e3      	ldr	r3, [r4, r3]
 8004258:	0005      	movs	r5, r0
 800425a:	58a0      	ldr	r0, [r4, r2]
 800425c:	2103      	movs	r1, #3
 800425e:	1ac0      	subs	r0, r0, r3
 8004260:	3817      	subs	r0, #23
 8004262:	f7fb ff51 	bl	8000108 <__udivsi3>
 8004266:	4653      	mov	r3, sl
 8004268:	1d72      	adds	r2, r6, #5
 800426a:	6058      	str	r0, [r3, #4]
 800426c:	1d33      	adds	r3, r6, #4
 800426e:	0092      	lsls	r2, r2, #2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	58e3      	ldr	r3, [r4, r3]
 8004274:	4681      	mov	r9, r0
 8004276:	58a0      	ldr	r0, [r4, r2]
 8004278:	2103      	movs	r1, #3
 800427a:	1ac0      	subs	r0, r0, r3
 800427c:	3817      	subs	r0, #23
 800427e:	f7fb ff43 	bl	8000108 <__udivsi3>
 8004282:	4653      	mov	r3, sl
 8004284:	6098      	str	r0, [r3, #8]
 8004286:	4643      	mov	r3, r8
 8004288:	3606      	adds	r6, #6
 800428a:	00b6      	lsls	r6, r6, #2
 800428c:	0007      	movs	r7, r0
 800428e:	59a0      	ldr	r0, [r4, r6]
 8004290:	2103      	movs	r1, #3
 8004292:	1a18      	subs	r0, r3, r0
 8004294:	3817      	subs	r0, #23
 8004296:	f7fb ff37 	bl	8000108 <__udivsi3>
 800429a:	4653      	mov	r3, sl
 800429c:	60d8      	str	r0, [r3, #12]
				calcCRC = ((propulse[0]^propulse[1]^propulse[2])<<3
 800429e:	464b      	mov	r3, r9
 80042a0:	406b      	eors	r3, r5
 80042a2:	407b      	eors	r3, r7
 80042a4:	00da      	lsls	r2, r3, #3
						|(propulse[0]^propulse[1]^propulse[2])<<2
 80042a6:	0099      	lsls	r1, r3, #2
 80042a8:	430a      	orrs	r2, r1
						|(propulse[0]^propulse[1]^propulse[2]));
 80042aa:	431a      	orrs	r2, r3
						|(propulse[0]^propulse[1]^propulse[2])<<1
 80042ac:	005b      	lsls	r3, r3, #1
						|(propulse[0]^propulse[1]^propulse[2]));
 80042ae:	4313      	orrs	r3, r2
				calcCRC = ((propulse[0]^propulse[1]^propulse[2])<<3
 80042b0:	4a24      	ldr	r2, [pc, #144]	; (8004344 <computeProshotDMA+0x1ec>)
 80042b2:	7013      	strb	r3, [r2, #0]
				checkCRC = (propulse[3]<<3 | propulse[3]<<2 | propulse[3]<<1 | propulse[3]);
 80042b4:	00c3      	lsls	r3, r0, #3
 80042b6:	0082      	lsls	r2, r0, #2
 80042b8:	4313      	orrs	r3, r2
 80042ba:	4303      	orrs	r3, r0
 80042bc:	0040      	lsls	r0, r0, #1
 80042be:	4318      	orrs	r0, r3
 80042c0:	4b21      	ldr	r3, [pc, #132]	; (8004348 <computeProshotDMA+0x1f0>)
 80042c2:	7018      	strb	r0, [r3, #0]
 80042c4:	e79a      	b.n	80041fc <computeProshotDMA+0xa4>
		if(((dma_buffer[j] - lastnumber) > 1500) && ((dma_buffer[j] - lastnumber) < 50000)){ // blank space
 80042c6:	0003      	movs	r3, r0
	for ( int j = 1 ; j < 9; j++){
 80042c8:	2602      	movs	r6, #2
 80042ca:	e78a      	b.n	80041e2 <computeProshotDMA+0x8a>
 80042cc:	2603      	movs	r6, #3
 80042ce:	e788      	b.n	80041e2 <computeProshotDMA+0x8a>
		if(((dma_buffer[j] - lastnumber) > 1500) && ((dma_buffer[j] - lastnumber) < 50000)){ // blank space
 80042d0:	0003      	movs	r3, r0
	for ( int j = 1 ; j < 9; j++){
 80042d2:	2604      	movs	r6, #4
 80042d4:	e785      	b.n	80041e2 <computeProshotDMA+0x8a>
 80042d6:	2605      	movs	r6, #5
 80042d8:	e783      	b.n	80041e2 <computeProshotDMA+0x8a>
		if(((dma_buffer[j] - lastnumber) > 1500) && ((dma_buffer[j] - lastnumber) < 50000)){ // blank space
 80042da:	0003      	movs	r3, r0
	for ( int j = 1 ; j < 9; j++){
 80042dc:	2606      	movs	r6, #6
 80042de:	e780      	b.n	80041e2 <computeProshotDMA+0x8a>
 80042e0:	2607      	movs	r6, #7
 80042e2:	e77e      	b.n	80041e2 <computeProshotDMA+0x8a>
		if(((dma_buffer[j] - lastnumber) > 1500) && ((dma_buffer[j] - lastnumber) < 50000)){ // blank space
 80042e4:	0003      	movs	r3, r0
	for ( int j = 1 ; j < 9; j++){
 80042e6:	2608      	movs	r6, #8
 80042e8:	e77b      	b.n	80041e2 <computeProshotDMA+0x8a>
			if ((tocheck <= 47)&& (tocheck > 0)){
 80042ea:	1e6b      	subs	r3, r5, #1
 80042ec:	2b2e      	cmp	r3, #46	; 0x2e
 80042ee:	d80d      	bhi.n	800430c <computeProshotDMA+0x1b4>
				commandcount++;
 80042f0:	4a19      	ldr	r2, [pc, #100]	; (8004358 <computeProshotDMA+0x200>)
 80042f2:	6813      	ldr	r3, [r2, #0]
 80042f4:	3301      	adds	r3, #1
 80042f6:	6013      	str	r3, [r2, #0]
				if (commandcount > 1){
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	dc00      	bgt.n	80042fe <computeProshotDMA+0x1a6>
 80042fc:	e76b      	b.n	80041d6 <computeProshotDMA+0x7e>
				newinput = 0;
 80042fe:	2300      	movs	r3, #0
 8004300:	4913      	ldr	r1, [pc, #76]	; (8004350 <computeProshotDMA+0x1f8>)
				commandcount = 0;
 8004302:	6013      	str	r3, [r2, #0]
				newinput = 0;
 8004304:	600b      	str	r3, [r1, #0]
				dshotcommand = tocheck;    //  todo
 8004306:	4913      	ldr	r1, [pc, #76]	; (8004354 <computeProshotDMA+0x1fc>)
 8004308:	600d      	str	r5, [r1, #0]
 800430a:	e764      	b.n	80041d6 <computeProshotDMA+0x7e>
			if (tocheck == 0){
 800430c:	2d00      	cmp	r5, #0
 800430e:	d000      	beq.n	8004312 <computeProshotDMA+0x1ba>
 8004310:	e761      	b.n	80041d6 <computeProshotDMA+0x7e>
	           commandcount++;
 8004312:	4a11      	ldr	r2, [pc, #68]	; (8004358 <computeProshotDMA+0x200>)
 8004314:	6813      	ldr	r3, [r2, #0]
 8004316:	3301      	adds	r3, #1
 8004318:	6013      	str	r3, [r2, #0]
			if (commandcount > 1){
 800431a:	2b01      	cmp	r3, #1
 800431c:	dc00      	bgt.n	8004320 <computeProshotDMA+0x1c8>
 800431e:	e75a      	b.n	80041d6 <computeProshotDMA+0x7e>
				newinput = 0;
 8004320:	4b0b      	ldr	r3, [pc, #44]	; (8004350 <computeProshotDMA+0x1f8>)
				commandcount = 0;
 8004322:	6015      	str	r5, [r2, #0]
				newinput = 0;
 8004324:	601d      	str	r5, [r3, #0]
				dshotcommand = 0;
 8004326:	4b0b      	ldr	r3, [pc, #44]	; (8004354 <computeProshotDMA+0x1fc>)
 8004328:	601d      	str	r5, [r3, #0]
}
 800432a:	e754      	b.n	80041d6 <computeProshotDMA+0x7e>
 800432c:	2000026c 	.word	0x2000026c
 8004330:	fffffa23 	.word	0xfffffa23
 8004334:	0000bd72 	.word	0x0000bd72
 8004338:	0000270f 	.word	0x0000270f
 800433c:	20000128 	.word	0x20000128
 8004340:	000007ff 	.word	0x000007ff
 8004344:	200001d8 	.word	0x200001d8
 8004348:	200001ec 	.word	0x200001ec
 800434c:	000007cf 	.word	0x000007cf
 8004350:	20000120 	.word	0x20000120
 8004354:	20000100 	.word	0x20000100
 8004358:	200000a4 	.word	0x200000a4

0800435c <computeDshotDMA>:
		lastnumber = dma_buffer[j];
	}
}


void computeDshotDMA(){
 800435c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800435e:	464e      	mov	r6, r9
 8004360:	4645      	mov	r5, r8
 8004362:	46de      	mov	lr, fp
 8004364:	4657      	mov	r7, sl
 8004366:	b5e0      	push	{r5, r6, r7, lr}

	int lastnumber = dma_buffer[0];
	for ( int j = 1 ; j < input_buffer_size; j++){
 8004368:	4bbc      	ldr	r3, [pc, #752]	; (800465c <computeDshotDMA+0x300>)
	int lastnumber = dma_buffer[0];
 800436a:	4dbd      	ldr	r5, [pc, #756]	; (8004660 <computeDshotDMA+0x304>)
	for ( int j = 1 ; j < input_buffer_size; j++){
 800436c:	681e      	ldr	r6, [r3, #0]
void computeDshotDMA(){
 800436e:	b08b      	sub	sp, #44	; 0x2c
	int lastnumber = dma_buffer[0];
 8004370:	6829      	ldr	r1, [r5, #0]
	for ( int j = 1 ; j < input_buffer_size; j++){
 8004372:	2e01      	cmp	r6, #1
 8004374:	dd15      	ble.n	80043a2 <computeDshotDMA+0x46>

		if(((dma_buffer[j] - lastnumber) > 50) && ((dma_buffer[j] - lastnumber) < 65000)){ // blank space
 8004376:	686b      	ldr	r3, [r5, #4]
 8004378:	48ba      	ldr	r0, [pc, #744]	; (8004664 <computeDshotDMA+0x308>)
 800437a:	001a      	movs	r2, r3
 800437c:	3a33      	subs	r2, #51	; 0x33
 800437e:	1a52      	subs	r2, r2, r1
 8004380:	4282      	cmp	r2, r0
 8004382:	d915      	bls.n	80043b0 <computeDshotDMA+0x54>
 8004384:	0029      	movs	r1, r5
 8004386:	2733      	movs	r7, #51	; 0x33
 8004388:	3108      	adds	r1, #8
 800438a:	2401      	movs	r4, #1
 800438c:	427f      	negs	r7, r7
 800438e:	e005      	b.n	800439c <computeDshotDMA+0x40>
 8004390:	c904      	ldmia	r1!, {r2}
 8004392:	1afb      	subs	r3, r7, r3
 8004394:	189b      	adds	r3, r3, r2
 8004396:	4283      	cmp	r3, r0
 8004398:	d90b      	bls.n	80043b2 <computeDshotDMA+0x56>
 800439a:	0013      	movs	r3, r2
	for ( int j = 1 ; j < input_buffer_size; j++){
 800439c:	3401      	adds	r4, #1
 800439e:	42b4      	cmp	r4, r6
 80043a0:	d1f6      	bne.n	8004390 <computeDshotDMA+0x34>

			break;
		}
		lastnumber = dma_buffer[j];
	}
}
 80043a2:	b00b      	add	sp, #44	; 0x2c
 80043a4:	bc3c      	pop	{r2, r3, r4, r5}
 80043a6:	4690      	mov	r8, r2
 80043a8:	4699      	mov	r9, r3
 80043aa:	46a2      	mov	sl, r4
 80043ac:	46ab      	mov	fp, r5
 80043ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for ( int j = 1 ; j < input_buffer_size; j++){
 80043b0:	2401      	movs	r4, #1
				dpulse[i] = ((dma_buffer[j + i*2 +1] - dma_buffer[j + i*2]) / 13) - 1;
 80043b2:	1c63      	adds	r3, r4, #1
 80043b4:	00a2      	lsls	r2, r4, #2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	58e8      	ldr	r0, [r5, r3]
 80043ba:	58ab      	ldr	r3, [r5, r2]
 80043bc:	210d      	movs	r1, #13
 80043be:	1ac0      	subs	r0, r0, r3
 80043c0:	f7fb fea2 	bl	8000108 <__udivsi3>
 80043c4:	4ea8      	ldr	r6, [pc, #672]	; (8004668 <computeDshotDMA+0x30c>)
 80043c6:	1e43      	subs	r3, r0, #1
 80043c8:	9302      	str	r3, [sp, #8]
 80043ca:	6033      	str	r3, [r6, #0]
 80043cc:	1ce2      	adds	r2, r4, #3
 80043ce:	1ca3      	adds	r3, r4, #2
 80043d0:	0092      	lsls	r2, r2, #2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	58a8      	ldr	r0, [r5, r2]
 80043d6:	58eb      	ldr	r3, [r5, r3]
 80043d8:	210d      	movs	r1, #13
 80043da:	1ac0      	subs	r0, r0, r3
 80043dc:	f7fb fe94 	bl	8000108 <__udivsi3>
 80043e0:	1e42      	subs	r2, r0, #1
 80043e2:	9201      	str	r2, [sp, #4]
 80043e4:	6072      	str	r2, [r6, #4]
 80043e6:	1d23      	adds	r3, r4, #4
 80043e8:	1d62      	adds	r2, r4, #5
 80043ea:	0092      	lsls	r2, r2, #2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	58a8      	ldr	r0, [r5, r2]
 80043f0:	58eb      	ldr	r3, [r5, r3]
 80043f2:	210d      	movs	r1, #13
 80043f4:	1ac0      	subs	r0, r0, r3
 80043f6:	f7fb fe87 	bl	8000108 <__udivsi3>
 80043fa:	1de2      	adds	r2, r4, #7
 80043fc:	1da3      	adds	r3, r4, #6
 80043fe:	0092      	lsls	r2, r2, #2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	58eb      	ldr	r3, [r5, r3]
 8004404:	1e41      	subs	r1, r0, #1
 8004406:	58a8      	ldr	r0, [r5, r2]
 8004408:	0027      	movs	r7, r4
 800440a:	9100      	str	r1, [sp, #0]
 800440c:	60b1      	str	r1, [r6, #8]
 800440e:	1ac0      	subs	r0, r0, r3
 8004410:	210d      	movs	r1, #13
 8004412:	f7fb fe79 	bl	8000108 <__udivsi3>
 8004416:	3709      	adds	r7, #9
 8004418:	00ba      	lsls	r2, r7, #2
 800441a:	3f01      	subs	r7, #1
 800441c:	3801      	subs	r0, #1
 800441e:	00bb      	lsls	r3, r7, #2
 8004420:	58eb      	ldr	r3, [r5, r3]
 8004422:	9003      	str	r0, [sp, #12]
 8004424:	60f0      	str	r0, [r6, #12]
 8004426:	58a8      	ldr	r0, [r5, r2]
 8004428:	210d      	movs	r1, #13
 800442a:	1ac0      	subs	r0, r0, r3
 800442c:	f7fb fe6c 	bl	8000108 <__udivsi3>
 8004430:	0021      	movs	r1, r4
 8004432:	0023      	movs	r3, r4
 8004434:	310b      	adds	r1, #11
 8004436:	330a      	adds	r3, #10
 8004438:	008a      	lsls	r2, r1, #2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	58eb      	ldr	r3, [r5, r3]
 800443e:	1e47      	subs	r7, r0, #1
 8004440:	58a8      	ldr	r0, [r5, r2]
 8004442:	6137      	str	r7, [r6, #16]
 8004444:	1ac0      	subs	r0, r0, r3
 8004446:	210d      	movs	r1, #13
 8004448:	9704      	str	r7, [sp, #16]
 800444a:	f7fb fe5d 	bl	8000108 <__udivsi3>
 800444e:	0023      	movs	r3, r4
 8004450:	1e41      	subs	r1, r0, #1
 8004452:	0020      	movs	r0, r4
 8004454:	330c      	adds	r3, #12
 8004456:	300d      	adds	r0, #13
 8004458:	0082      	lsls	r2, r0, #2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	58a8      	ldr	r0, [r5, r2]
 800445e:	58eb      	ldr	r3, [r5, r3]
 8004460:	9105      	str	r1, [sp, #20]
 8004462:	6171      	str	r1, [r6, #20]
 8004464:	1ac0      	subs	r0, r0, r3
 8004466:	210d      	movs	r1, #13
 8004468:	f7fb fe4e 	bl	8000108 <__udivsi3>
 800446c:	0027      	movs	r7, r4
 800446e:	0023      	movs	r3, r4
 8004470:	370f      	adds	r7, #15
 8004472:	330e      	adds	r3, #14
 8004474:	00ba      	lsls	r2, r7, #2
 8004476:	3801      	subs	r0, #1
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	58eb      	ldr	r3, [r5, r3]
 800447c:	9006      	str	r0, [sp, #24]
 800447e:	61b0      	str	r0, [r6, #24]
 8004480:	58a8      	ldr	r0, [r5, r2]
 8004482:	210d      	movs	r1, #13
 8004484:	1ac0      	subs	r0, r0, r3
 8004486:	f7fb fe3f 	bl	8000108 <__udivsi3>
 800448a:	1e47      	subs	r7, r0, #1
 800448c:	46bb      	mov	fp, r7
 800448e:	61f7      	str	r7, [r6, #28]
 8004490:	0023      	movs	r3, r4
 8004492:	0027      	movs	r7, r4
 8004494:	3310      	adds	r3, #16
 8004496:	3711      	adds	r7, #17
 8004498:	00ba      	lsls	r2, r7, #2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	58a8      	ldr	r0, [r5, r2]
 800449e:	58eb      	ldr	r3, [r5, r3]
 80044a0:	210d      	movs	r1, #13
 80044a2:	1ac0      	subs	r0, r0, r3
 80044a4:	f7fb fe30 	bl	8000108 <__udivsi3>
 80044a8:	1e47      	subs	r7, r0, #1
 80044aa:	46b9      	mov	r9, r7
 80044ac:	6237      	str	r7, [r6, #32]
 80044ae:	0023      	movs	r3, r4
 80044b0:	0027      	movs	r7, r4
 80044b2:	3312      	adds	r3, #18
 80044b4:	3713      	adds	r7, #19
 80044b6:	00ba      	lsls	r2, r7, #2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	58a8      	ldr	r0, [r5, r2]
 80044bc:	58eb      	ldr	r3, [r5, r3]
 80044be:	210d      	movs	r1, #13
 80044c0:	1ac0      	subs	r0, r0, r3
 80044c2:	f7fb fe21 	bl	8000108 <__udivsi3>
 80044c6:	1e47      	subs	r7, r0, #1
 80044c8:	46b8      	mov	r8, r7
 80044ca:	6277      	str	r7, [r6, #36]	; 0x24
 80044cc:	0023      	movs	r3, r4
 80044ce:	0027      	movs	r7, r4
 80044d0:	3314      	adds	r3, #20
 80044d2:	3715      	adds	r7, #21
 80044d4:	00ba      	lsls	r2, r7, #2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	58a8      	ldr	r0, [r5, r2]
 80044da:	58eb      	ldr	r3, [r5, r3]
 80044dc:	210d      	movs	r1, #13
 80044de:	1ac0      	subs	r0, r0, r3
 80044e0:	f7fb fe12 	bl	8000108 <__udivsi3>
 80044e4:	1e47      	subs	r7, r0, #1
 80044e6:	46ba      	mov	sl, r7
 80044e8:	62b7      	str	r7, [r6, #40]	; 0x28
 80044ea:	0023      	movs	r3, r4
 80044ec:	0027      	movs	r7, r4
 80044ee:	3316      	adds	r3, #22
 80044f0:	3717      	adds	r7, #23
 80044f2:	00ba      	lsls	r2, r7, #2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	58a8      	ldr	r0, [r5, r2]
 80044f8:	58eb      	ldr	r3, [r5, r3]
 80044fa:	210d      	movs	r1, #13
 80044fc:	1ac0      	subs	r0, r0, r3
 80044fe:	f7fb fe03 	bl	8000108 <__udivsi3>
 8004502:	0023      	movs	r3, r4
 8004504:	3319      	adds	r3, #25
 8004506:	009a      	lsls	r2, r3, #2
 8004508:	3b01      	subs	r3, #1
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	1e47      	subs	r7, r0, #1
 800450e:	58eb      	ldr	r3, [r5, r3]
 8004510:	58a8      	ldr	r0, [r5, r2]
 8004512:	62f7      	str	r7, [r6, #44]	; 0x2c
 8004514:	1ac0      	subs	r0, r0, r3
 8004516:	210d      	movs	r1, #13
 8004518:	9707      	str	r7, [sp, #28]
 800451a:	f7fb fdf5 	bl	8000108 <__udivsi3>
 800451e:	1e43      	subs	r3, r0, #1
 8004520:	9308      	str	r3, [sp, #32]
 8004522:	6333      	str	r3, [r6, #48]	; 0x30
 8004524:	0020      	movs	r0, r4
 8004526:	0023      	movs	r3, r4
 8004528:	301b      	adds	r0, #27
 800452a:	331a      	adds	r3, #26
 800452c:	0082      	lsls	r2, r0, #2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	58a8      	ldr	r0, [r5, r2]
 8004532:	58eb      	ldr	r3, [r5, r3]
 8004534:	210d      	movs	r1, #13
 8004536:	1ac0      	subs	r0, r0, r3
 8004538:	f7fb fde6 	bl	8000108 <__udivsi3>
 800453c:	0023      	movs	r3, r4
 800453e:	1e47      	subs	r7, r0, #1
 8004540:	0020      	movs	r0, r4
 8004542:	331c      	adds	r3, #28
 8004544:	301d      	adds	r0, #29
 8004546:	0082      	lsls	r2, r0, #2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	58a8      	ldr	r0, [r5, r2]
 800454c:	58eb      	ldr	r3, [r5, r3]
 800454e:	6377      	str	r7, [r6, #52]	; 0x34
 8004550:	1ac0      	subs	r0, r0, r3
 8004552:	210d      	movs	r1, #13
 8004554:	f7fb fdd8 	bl	8000108 <__udivsi3>
 8004558:	0023      	movs	r3, r4
 800455a:	341e      	adds	r4, #30
 800455c:	331f      	adds	r3, #31
 800455e:	3801      	subs	r0, #1
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	00a4      	lsls	r4, r4, #2
 8004564:	9009      	str	r0, [sp, #36]	; 0x24
 8004566:	63b0      	str	r0, [r6, #56]	; 0x38
 8004568:	58e8      	ldr	r0, [r5, r3]
 800456a:	592b      	ldr	r3, [r5, r4]
			uint8_t calcCRC = ((dpulse[0]^dpulse[4]^dpulse[8])<<3
 800456c:	464d      	mov	r5, r9
				dpulse[i] = ((dma_buffer[j + i*2 +1] - dma_buffer[j + i*2]) / 13) - 1;
 800456e:	1ac0      	subs	r0, r0, r3
 8004570:	210d      	movs	r1, #13
 8004572:	f7fb fdc9 	bl	8000108 <__udivsi3>
			uint8_t calcCRC = ((dpulse[0]^dpulse[4]^dpulse[8])<<3
 8004576:	9c04      	ldr	r4, [sp, #16]
 8004578:	9b02      	ldr	r3, [sp, #8]
					|(dpulse[1]^dpulse[5]^dpulse[9])<<2
 800457a:	9a01      	ldr	r2, [sp, #4]
			uint8_t calcCRC = ((dpulse[0]^dpulse[4]^dpulse[8])<<3
 800457c:	4063      	eors	r3, r4
 800457e:	406b      	eors	r3, r5
					|(dpulse[1]^dpulse[5]^dpulse[9])<<2
 8004580:	4645      	mov	r5, r8
 8004582:	9c05      	ldr	r4, [sp, #20]
			uint8_t calcCRC = ((dpulse[0]^dpulse[4]^dpulse[8])<<3
 8004584:	00db      	lsls	r3, r3, #3
					|(dpulse[1]^dpulse[5]^dpulse[9])<<2
 8004586:	4062      	eors	r2, r4
 8004588:	406a      	eors	r2, r5
					|(dpulse[3]^dpulse[7]^dpulse[11])
 800458a:	465d      	mov	r5, fp
					|(dpulse[1]^dpulse[5]^dpulse[9])<<2
 800458c:	0092      	lsls	r2, r2, #2
 800458e:	4313      	orrs	r3, r2
					|(dpulse[3]^dpulse[7]^dpulse[11])
 8004590:	9a03      	ldr	r2, [sp, #12]
 8004592:	9c07      	ldr	r4, [sp, #28]
 8004594:	406a      	eors	r2, r5
 8004596:	4062      	eors	r2, r4
 8004598:	4313      	orrs	r3, r2
					|(dpulse[2]^dpulse[6]^dpulse[10])<<1
 800459a:	9906      	ldr	r1, [sp, #24]
 800459c:	9a00      	ldr	r2, [sp, #0]
			uint8_t checkCRC = (dpulse[12]<<3 | dpulse[13]<<2 | dpulse[14]<<1 | dpulse[15]);
 800459e:	00bf      	lsls	r7, r7, #2
					|(dpulse[2]^dpulse[6]^dpulse[10])<<1
 80045a0:	404a      	eors	r2, r1
 80045a2:	4651      	mov	r1, sl
 80045a4:	404a      	eors	r2, r1
 80045a6:	0052      	lsls	r2, r2, #1
					|(dpulse[3]^dpulse[7]^dpulse[11])
 80045a8:	4313      	orrs	r3, r2
			uint8_t checkCRC = (dpulse[12]<<3 | dpulse[13]<<2 | dpulse[14]<<1 | dpulse[15]);
 80045aa:	9a08      	ldr	r2, [sp, #32]
				dpulse[i] = ((dma_buffer[j + i*2 +1] - dma_buffer[j + i*2]) / 13) - 1;
 80045ac:	3801      	subs	r0, #1
			uint8_t checkCRC = (dpulse[12]<<3 | dpulse[13]<<2 | dpulse[14]<<1 | dpulse[15]);
 80045ae:	00d2      	lsls	r2, r2, #3
 80045b0:	433a      	orrs	r2, r7
 80045b2:	4302      	orrs	r2, r0
				dpulse[i] = ((dma_buffer[j + i*2 +1] - dma_buffer[j + i*2]) / 13) - 1;
 80045b4:	63f0      	str	r0, [r6, #60]	; 0x3c
			uint8_t checkCRC = (dpulse[12]<<3 | dpulse[13]<<2 | dpulse[14]<<1 | dpulse[15]);
 80045b6:	9809      	ldr	r0, [sp, #36]	; 0x24
			if(calcCRC == checkCRC){
 80045b8:	b25b      	sxtb	r3, r3
			uint8_t checkCRC = (dpulse[12]<<3 | dpulse[13]<<2 | dpulse[14]<<1 | dpulse[15]);
 80045ba:	0040      	lsls	r0, r0, #1
 80045bc:	4302      	orrs	r2, r0
			if(calcCRC == checkCRC){
 80045be:	b252      	sxtb	r2, r2
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d000      	beq.n	80045c6 <computeDshotDMA+0x26a>
 80045c4:	e6ed      	b.n	80043a2 <computeDshotDMA+0x46>
					dpulse[0]<<10 | dpulse[1]<<9 | dpulse[2]<<8 | dpulse[3]<<7
 80045c6:	9b02      	ldr	r3, [sp, #8]
 80045c8:	0298      	lsls	r0, r3, #10
 80045ca:	9b01      	ldr	r3, [sp, #4]
 80045cc:	025b      	lsls	r3, r3, #9
 80045ce:	4318      	orrs	r0, r3
 80045d0:	9b00      	ldr	r3, [sp, #0]
			int tocheck = (
 80045d2:	4308      	orrs	r0, r1
					dpulse[0]<<10 | dpulse[1]<<9 | dpulse[2]<<8 | dpulse[3]<<7
 80045d4:	021b      	lsls	r3, r3, #8
			int tocheck = (
 80045d6:	4318      	orrs	r0, r3
					dpulse[0]<<10 | dpulse[1]<<9 | dpulse[2]<<8 | dpulse[3]<<7
 80045d8:	9b03      	ldr	r3, [sp, #12]
 80045da:	01db      	lsls	r3, r3, #7
			int tocheck = (
 80045dc:	4318      	orrs	r0, r3
					| dpulse[4]<<6 | dpulse[5]<<5 | dpulse[6]<<4 | dpulse[7]<<3
 80045de:	9b04      	ldr	r3, [sp, #16]
 80045e0:	019b      	lsls	r3, r3, #6
			int tocheck = (
 80045e2:	4318      	orrs	r0, r3
					| dpulse[4]<<6 | dpulse[5]<<5 | dpulse[6]<<4 | dpulse[7]<<3
 80045e4:	9b05      	ldr	r3, [sp, #20]
 80045e6:	015b      	lsls	r3, r3, #5
			int tocheck = (
 80045e8:	4318      	orrs	r0, r3
					| dpulse[4]<<6 | dpulse[5]<<5 | dpulse[6]<<4 | dpulse[7]<<3
 80045ea:	9b06      	ldr	r3, [sp, #24]
 80045ec:	011b      	lsls	r3, r3, #4
			int tocheck = (
 80045ee:	4318      	orrs	r0, r3
					| dpulse[4]<<6 | dpulse[5]<<5 | dpulse[6]<<4 | dpulse[7]<<3
 80045f0:	00eb      	lsls	r3, r5, #3
			int tocheck = (
 80045f2:	4318      	orrs	r0, r3
					| dpulse[8]<<2 | dpulse[9]<<1 | dpulse[10]);
 80045f4:	464b      	mov	r3, r9
 80045f6:	009b      	lsls	r3, r3, #2
			int tocheck = (
 80045f8:	4318      	orrs	r0, r3
					| dpulse[8]<<2 | dpulse[9]<<1 | dpulse[10]);
 80045fa:	4643      	mov	r3, r8
 80045fc:	005b      	lsls	r3, r3, #1
			int tocheck = (
 80045fe:	4318      	orrs	r0, r3
				if (tocheck > 47 && tocheck <= 2047){
 8004600:	0002      	movs	r2, r0
 8004602:	4b1a      	ldr	r3, [pc, #104]	; (800466c <computeDshotDMA+0x310>)
 8004604:	3a30      	subs	r2, #48	; 0x30
 8004606:	429a      	cmp	r2, r3
 8004608:	d807      	bhi.n	800461a <computeDshotDMA+0x2be>
					newinput = tocheck;
 800460a:	4b19      	ldr	r3, [pc, #100]	; (8004670 <computeDshotDMA+0x314>)
                    dshotcommand = 0;
 800460c:	4a19      	ldr	r2, [pc, #100]	; (8004674 <computeDshotDMA+0x318>)
					newinput = tocheck;
 800460e:	6018      	str	r0, [r3, #0]
                    dshotcommand = 0;
 8004610:	2300      	movs	r3, #0
 8004612:	6013      	str	r3, [r2, #0]
                    commandcount = 0;
 8004614:	4a18      	ldr	r2, [pc, #96]	; (8004678 <computeDshotDMA+0x31c>)
 8004616:	6013      	str	r3, [r2, #0]
 8004618:	e6c3      	b.n	80043a2 <computeDshotDMA+0x46>
			if ((tocheck <= 47)&& (tocheck > 0)){
 800461a:	1e43      	subs	r3, r0, #1
 800461c:	2b2e      	cmp	r3, #46	; 0x2e
 800461e:	d80d      	bhi.n	800463c <computeDshotDMA+0x2e0>
				commandcount++;
 8004620:	4a15      	ldr	r2, [pc, #84]	; (8004678 <computeDshotDMA+0x31c>)
 8004622:	6813      	ldr	r3, [r2, #0]
 8004624:	3301      	adds	r3, #1
 8004626:	6013      	str	r3, [r2, #0]
				if (commandcount > 1){
 8004628:	2b01      	cmp	r3, #1
 800462a:	dc00      	bgt.n	800462e <computeDshotDMA+0x2d2>
 800462c:	e6b9      	b.n	80043a2 <computeDshotDMA+0x46>
				newinput = 0;
 800462e:	2300      	movs	r3, #0
 8004630:	490f      	ldr	r1, [pc, #60]	; (8004670 <computeDshotDMA+0x314>)
				commandcount = 0;
 8004632:	6013      	str	r3, [r2, #0]
				newinput = 0;
 8004634:	600b      	str	r3, [r1, #0]
				dshotcommand = tocheck;    //  todo
 8004636:	490f      	ldr	r1, [pc, #60]	; (8004674 <computeDshotDMA+0x318>)
 8004638:	6008      	str	r0, [r1, #0]
 800463a:	e6b2      	b.n	80043a2 <computeDshotDMA+0x46>
			if (tocheck == 0){
 800463c:	2800      	cmp	r0, #0
 800463e:	d000      	beq.n	8004642 <computeDshotDMA+0x2e6>
 8004640:	e6af      	b.n	80043a2 <computeDshotDMA+0x46>
			    commandcount++;
 8004642:	4a0d      	ldr	r2, [pc, #52]	; (8004678 <computeDshotDMA+0x31c>)
 8004644:	6813      	ldr	r3, [r2, #0]
 8004646:	3301      	adds	r3, #1
 8004648:	6013      	str	r3, [r2, #0]
				if (commandcount > 1){
 800464a:	2b01      	cmp	r3, #1
 800464c:	dc00      	bgt.n	8004650 <computeDshotDMA+0x2f4>
 800464e:	e6a8      	b.n	80043a2 <computeDshotDMA+0x46>
				newinput = 0;
 8004650:	4b07      	ldr	r3, [pc, #28]	; (8004670 <computeDshotDMA+0x314>)
				commandcount = 0;
 8004652:	6010      	str	r0, [r2, #0]
				newinput = 0;
 8004654:	6018      	str	r0, [r3, #0]
				dshotcommand = 0;
 8004656:	4b07      	ldr	r3, [pc, #28]	; (8004674 <computeDshotDMA+0x318>)
 8004658:	6018      	str	r0, [r3, #0]
 800465a:	e6a2      	b.n	80043a2 <computeDshotDMA+0x46>
 800465c:	20000020 	.word	0x20000020
 8004660:	2000026c 	.word	0x2000026c
 8004664:	0000fdb4 	.word	0x0000fdb4
 8004668:	200000bc 	.word	0x200000bc
 800466c:	000007cf 	.word	0x000007cf
 8004670:	20000120 	.word	0x20000120
 8004674:	20000100 	.word	0x20000100
 8004678:	200000a4 	.word	0x200000a4

0800467c <transferComplete>:

void transferComplete(){
	//	TIM15->CNT = 1;
//	compit = 0;
	signaltimeout = 0;
 800467c:	2200      	movs	r2, #0
 800467e:	4b66      	ldr	r3, [pc, #408]	; (8004818 <transferComplete+0x19c>)
void transferComplete(){
 8004680:	b510      	push	{r4, lr}
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 8004682:	2108      	movs	r1, #8
 8004684:	4865      	ldr	r0, [pc, #404]	; (800481c <transferComplete+0x1a0>)
	signaltimeout = 0;
 8004686:	601a      	str	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 8004688:	f7fc fd52 	bl	8001130 <HAL_GPIO_TogglePin>


	if (inputSet == 1){
 800468c:	4b64      	ldr	r3, [pc, #400]	; (8004820 <transferComplete+0x1a4>)
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d000      	beq.n	8004696 <transferComplete+0x1a>
			computeOS42Input();
			HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , 3);

		}
	}
}
 8004694:	bd10      	pop	{r4, pc}
		if (dshot == 1){
 8004696:	4b63      	ldr	r3, [pc, #396]	; (8004824 <transferComplete+0x1a8>)
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d063      	beq.n	8004766 <transferComplete+0xea>
		if (proshot == 1){
 800469e:	4b62      	ldr	r3, [pc, #392]	; (8004828 <transferComplete+0x1ac>)
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d056      	beq.n	8004754 <transferComplete+0xd8>
		if  (servoPwm == 1){
 80046a6:	4b61      	ldr	r3, [pc, #388]	; (800482c <transferComplete+0x1b0>)
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d03b      	beq.n	8004726 <transferComplete+0xaa>
		if  (multishot){
 80046ae:	4b60      	ldr	r3, [pc, #384]	; (8004830 <transferComplete+0x1b4>)
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d127      	bne.n	8004706 <transferComplete+0x8a>
		if  (oneshot125){
 80046b6:	4b5f      	ldr	r3, [pc, #380]	; (8004834 <transferComplete+0x1b8>)
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d113      	bne.n	80046e6 <transferComplete+0x6a>
		if  (oneshot42){
 80046be:	4b5e      	ldr	r3, [pc, #376]	; (8004838 <transferComplete+0x1bc>)
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d0e6      	beq.n	8004694 <transferComplete+0x18>
	int lastnumber = dma_buffer[0];
 80046c6:	4c5d      	ldr	r4, [pc, #372]	; (800483c <transferComplete+0x1c0>)
		if(((dma_buffer[j] - lastnumber) < 4500) && ((dma_buffer[j] - lastnumber) > 0)){ // blank space
 80046c8:	485d      	ldr	r0, [pc, #372]	; (8004840 <transferComplete+0x1c4>)
	int lastnumber = dma_buffer[0];
 80046ca:	6823      	ldr	r3, [r4, #0]
		if(((dma_buffer[j] - lastnumber) < 4500) && ((dma_buffer[j] - lastnumber) > 0)){ // blank space
 80046cc:	6862      	ldr	r2, [r4, #4]
 80046ce:	1ad1      	subs	r1, r2, r3
 80046d0:	4281      	cmp	r1, r0
 80046d2:	d801      	bhi.n	80046d8 <transferComplete+0x5c>
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d164      	bne.n	80047a2 <transferComplete+0x126>
			HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , 3);
 80046d8:	2303      	movs	r3, #3
 80046da:	0022      	movs	r2, r4
 80046dc:	2100      	movs	r1, #0
 80046de:	4859      	ldr	r0, [pc, #356]	; (8004844 <transferComplete+0x1c8>)
 80046e0:	f7fd fa56 	bl	8001b90 <HAL_TIM_IC_Start_DMA>
}
 80046e4:	e7d6      	b.n	8004694 <transferComplete+0x18>
	int lastnumber = dma_buffer[0];
 80046e6:	4c55      	ldr	r4, [pc, #340]	; (800483c <transferComplete+0x1c0>)
		if(((dma_buffer[j] - lastnumber) < 12300) && ((dma_buffer[j] - lastnumber) > 0)){ // blank space
 80046e8:	4857      	ldr	r0, [pc, #348]	; (8004848 <transferComplete+0x1cc>)
	int lastnumber = dma_buffer[0];
 80046ea:	6822      	ldr	r2, [r4, #0]
		if(((dma_buffer[j] - lastnumber) < 12300) && ((dma_buffer[j] - lastnumber) > 0)){ // blank space
 80046ec:	6863      	ldr	r3, [r4, #4]
 80046ee:	1a99      	subs	r1, r3, r2
 80046f0:	4281      	cmp	r1, r0
 80046f2:	d801      	bhi.n	80046f8 <transferComplete+0x7c>
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d17b      	bne.n	80047f0 <transferComplete+0x174>
			HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , 3);
 80046f8:	2303      	movs	r3, #3
 80046fa:	0022      	movs	r2, r4
 80046fc:	2100      	movs	r1, #0
 80046fe:	4851      	ldr	r0, [pc, #324]	; (8004844 <transferComplete+0x1c8>)
 8004700:	f7fd fa46 	bl	8001b90 <HAL_TIM_IC_Start_DMA>
 8004704:	e7db      	b.n	80046be <transferComplete+0x42>
	int lastnumber = dma_buffer[0];
 8004706:	4c4d      	ldr	r4, [pc, #308]	; (800483c <transferComplete+0x1c0>)
		if(((dma_buffer[j] - lastnumber) < 1500) && ((dma_buffer[j] - lastnumber) > 0)){ // blank space
 8004708:	4850      	ldr	r0, [pc, #320]	; (800484c <transferComplete+0x1d0>)
	int lastnumber = dma_buffer[0];
 800470a:	6822      	ldr	r2, [r4, #0]
		if(((dma_buffer[j] - lastnumber) < 1500) && ((dma_buffer[j] - lastnumber) > 0)){ // blank space
 800470c:	6863      	ldr	r3, [r4, #4]
 800470e:	1a99      	subs	r1, r3, r2
 8004710:	4281      	cmp	r1, r0
 8004712:	d801      	bhi.n	8004718 <transferComplete+0x9c>
 8004714:	429a      	cmp	r2, r3
 8004716:	d159      	bne.n	80047cc <transferComplete+0x150>
			HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , 3);
 8004718:	2303      	movs	r3, #3
 800471a:	0022      	movs	r2, r4
 800471c:	2100      	movs	r1, #0
 800471e:	4849      	ldr	r0, [pc, #292]	; (8004844 <transferComplete+0x1c8>)
 8004720:	f7fd fa36 	bl	8001b90 <HAL_TIM_IC_Start_DMA>
 8004724:	e7c7      	b.n	80046b6 <transferComplete+0x3a>
		if(((dma_buffer[j] - lastnumber) >1000 ) && ((dma_buffer[j] - lastnumber) < 2010)){ // blank space
 8004726:	4c45      	ldr	r4, [pc, #276]	; (800483c <transferComplete+0x1c0>)
 8004728:	4a49      	ldr	r2, [pc, #292]	; (8004850 <transferComplete+0x1d4>)
 800472a:	6861      	ldr	r1, [r4, #4]
 800472c:	6823      	ldr	r3, [r4, #0]
 800472e:	1acb      	subs	r3, r1, r3
 8004730:	1898      	adds	r0, r3, r2
 8004732:	22fc      	movs	r2, #252	; 0xfc
 8004734:	0092      	lsls	r2, r2, #2
 8004736:	4290      	cmp	r0, r2
 8004738:	d91e      	bls.n	8004778 <transferComplete+0xfc>
 800473a:	68a3      	ldr	r3, [r4, #8]
 800473c:	1a5b      	subs	r3, r3, r1
 800473e:	4944      	ldr	r1, [pc, #272]	; (8004850 <transferComplete+0x1d4>)
 8004740:	1859      	adds	r1, r3, r1
 8004742:	4291      	cmp	r1, r2
 8004744:	d918      	bls.n	8004778 <transferComplete+0xfc>
			HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , 3);
 8004746:	2303      	movs	r3, #3
 8004748:	0022      	movs	r2, r4
 800474a:	2100      	movs	r1, #0
 800474c:	483d      	ldr	r0, [pc, #244]	; (8004844 <transferComplete+0x1c8>)
 800474e:	f7fd fa1f 	bl	8001b90 <HAL_TIM_IC_Start_DMA>
 8004752:	e7ac      	b.n	80046ae <transferComplete+0x32>
			computeProshotDMA();
 8004754:	f7ff fd00 	bl	8004158 <computeProshotDMA>
			HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , 16);
 8004758:	2310      	movs	r3, #16
 800475a:	4a38      	ldr	r2, [pc, #224]	; (800483c <transferComplete+0x1c0>)
 800475c:	2100      	movs	r1, #0
 800475e:	4839      	ldr	r0, [pc, #228]	; (8004844 <transferComplete+0x1c8>)
 8004760:	f7fd fa16 	bl	8001b90 <HAL_TIM_IC_Start_DMA>
 8004764:	e79f      	b.n	80046a6 <transferComplete+0x2a>
			computeDshotDMA();
 8004766:	f7ff fdf9 	bl	800435c <computeDshotDMA>
			HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , 64);
 800476a:	2340      	movs	r3, #64	; 0x40
 800476c:	4a33      	ldr	r2, [pc, #204]	; (800483c <transferComplete+0x1c0>)
 800476e:	2100      	movs	r1, #0
 8004770:	4834      	ldr	r0, [pc, #208]	; (8004844 <transferComplete+0x1c8>)
 8004772:	f7fd fa0d 	bl	8001b90 <HAL_TIM_IC_Start_DMA>
 8004776:	e792      	b.n	800469e <transferComplete+0x22>
	if (x < in_min){
 8004778:	4a36      	ldr	r2, [pc, #216]	; (8004854 <transferComplete+0x1d8>)
 800477a:	2000      	movs	r0, #0
 800477c:	4293      	cmp	r3, r2
 800477e:	d90d      	bls.n	800479c <transferComplete+0x120>
 8004780:	22fa      	movs	r2, #250	; 0xfa
 8004782:	00d2      	lsls	r2, r2, #3
 8004784:	4293      	cmp	r3, r2
 8004786:	dd00      	ble.n	800478a <transferComplete+0x10e>
 8004788:	0013      	movs	r3, r2
 800478a:	4a33      	ldr	r2, [pc, #204]	; (8004858 <transferComplete+0x1dc>)
 800478c:	20fa      	movs	r0, #250	; 0xfa
 800478e:	4694      	mov	ip, r2
 8004790:	00c0      	lsls	r0, r0, #3
 8004792:	4463      	add	r3, ip
 8004794:	4358      	muls	r0, r3
 8004796:	4931      	ldr	r1, [pc, #196]	; (800485c <transferComplete+0x1e0>)
 8004798:	f7fb fd40 	bl	800021c <__divsi3>
			newinput = map((dma_buffer[j] - lastnumber), 1090, 2000, 0, 2000);
 800479c:	4b30      	ldr	r3, [pc, #192]	; (8004860 <transferComplete+0x1e4>)
 800479e:	6018      	str	r0, [r3, #0]
 80047a0:	e7d1      	b.n	8004746 <transferComplete+0xca>
	if (x < in_min){
 80047a2:	4b30      	ldr	r3, [pc, #192]	; (8004864 <transferComplete+0x1e8>)
 80047a4:	2000      	movs	r0, #0
 80047a6:	4299      	cmp	r1, r3
 80047a8:	d90d      	bls.n	80047c6 <transferComplete+0x14a>
 80047aa:	23fc      	movs	r3, #252	; 0xfc
 80047ac:	011b      	lsls	r3, r3, #4
 80047ae:	4299      	cmp	r1, r3
 80047b0:	dd00      	ble.n	80047b4 <transferComplete+0x138>
 80047b2:	0019      	movs	r1, r3
 80047b4:	4b2c      	ldr	r3, [pc, #176]	; (8004868 <transferComplete+0x1ec>)
 80047b6:	20fa      	movs	r0, #250	; 0xfa
 80047b8:	469c      	mov	ip, r3
 80047ba:	00c0      	lsls	r0, r0, #3
 80047bc:	4461      	add	r1, ip
 80047be:	4348      	muls	r0, r1
 80047c0:	492a      	ldr	r1, [pc, #168]	; (800486c <transferComplete+0x1f0>)
 80047c2:	f7fb fd2b 	bl	800021c <__divsi3>
			newinput = map((dma_buffer[j] - lastnumber),2020, 4032, 0, 2000);
 80047c6:	4b26      	ldr	r3, [pc, #152]	; (8004860 <transferComplete+0x1e4>)
 80047c8:	6018      	str	r0, [r3, #0]
 80047ca:	e785      	b.n	80046d8 <transferComplete+0x5c>
	if (x < in_min){
 80047cc:	2000      	movs	r0, #0
 80047ce:	29f2      	cmp	r1, #242	; 0xf2
 80047d0:	d90b      	bls.n	80047ea <transferComplete+0x16e>
 80047d2:	2396      	movs	r3, #150	; 0x96
 80047d4:	00db      	lsls	r3, r3, #3
 80047d6:	4299      	cmp	r1, r3
 80047d8:	dd00      	ble.n	80047dc <transferComplete+0x160>
 80047da:	0019      	movs	r1, r3
 80047dc:	20fa      	movs	r0, #250	; 0xfa
 80047de:	39f3      	subs	r1, #243	; 0xf3
 80047e0:	00c0      	lsls	r0, r0, #3
 80047e2:	4348      	muls	r0, r1
 80047e4:	4922      	ldr	r1, [pc, #136]	; (8004870 <transferComplete+0x1f4>)
 80047e6:	f7fb fd19 	bl	800021c <__divsi3>
			newinput = map((dma_buffer[j] - lastnumber),243,1200, 0, 2000);
 80047ea:	4b1d      	ldr	r3, [pc, #116]	; (8004860 <transferComplete+0x1e4>)
 80047ec:	6018      	str	r0, [r3, #0]
 80047ee:	e793      	b.n	8004718 <transferComplete+0x9c>
	if (x < in_min){
 80047f0:	4b20      	ldr	r3, [pc, #128]	; (8004874 <transferComplete+0x1f8>)
 80047f2:	2000      	movs	r0, #0
 80047f4:	4299      	cmp	r1, r3
 80047f6:	d90c      	bls.n	8004812 <transferComplete+0x196>
 80047f8:	4b1f      	ldr	r3, [pc, #124]	; (8004878 <transferComplete+0x1fc>)
 80047fa:	4299      	cmp	r1, r3
 80047fc:	dd00      	ble.n	8004800 <transferComplete+0x184>
 80047fe:	0019      	movs	r1, r3
 8004800:	4b1e      	ldr	r3, [pc, #120]	; (800487c <transferComplete+0x200>)
 8004802:	20fa      	movs	r0, #250	; 0xfa
 8004804:	469c      	mov	ip, r3
 8004806:	00c0      	lsls	r0, r0, #3
 8004808:	4461      	add	r1, ip
 800480a:	4348      	muls	r0, r1
 800480c:	491c      	ldr	r1, [pc, #112]	; (8004880 <transferComplete+0x204>)
 800480e:	f7fb fd05 	bl	800021c <__divsi3>
			newinput = map((dma_buffer[j] - lastnumber),6500,12000, 0, 2000);
 8004812:	4b13      	ldr	r3, [pc, #76]	; (8004860 <transferComplete+0x1e4>)
 8004814:	6018      	str	r0, [r3, #0]
 8004816:	e76f      	b.n	80046f8 <transferComplete+0x7c>
 8004818:	20000148 	.word	0x20000148
 800481c:	48000800 	.word	0x48000800
 8004820:	20000114 	.word	0x20000114
 8004824:	200000fc 	.word	0x200000fc
 8004828:	20000138 	.word	0x20000138
 800482c:	20000144 	.word	0x20000144
 8004830:	2000011c 	.word	0x2000011c
 8004834:	20000124 	.word	0x20000124
 8004838:	20000125 	.word	0x20000125
 800483c:	2000026c 	.word	0x2000026c
 8004840:	00001193 	.word	0x00001193
 8004844:	20000198 	.word	0x20000198
 8004848:	0000300b 	.word	0x0000300b
 800484c:	000005db 	.word	0x000005db
 8004850:	fffffc17 	.word	0xfffffc17
 8004854:	00000441 	.word	0x00000441
 8004858:	fffffbbe 	.word	0xfffffbbe
 800485c:	0000038e 	.word	0x0000038e
 8004860:	20000120 	.word	0x20000120
 8004864:	000007e3 	.word	0x000007e3
 8004868:	fffff81c 	.word	0xfffff81c
 800486c:	000007dc 	.word	0x000007dc
 8004870:	000003bd 	.word	0x000003bd
 8004874:	00001963 	.word	0x00001963
 8004878:	00002ee0 	.word	0x00002ee0
 800487c:	ffffe69c 	.word	0xffffe69c
 8004880:	0000157c 	.word	0x0000157c

08004884 <SystemClock_Config>:
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8004884:	2210      	movs	r2, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8004886:	231a      	movs	r3, #26
{
 8004888:	b510      	push	{r4, lr}
 800488a:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 800488c:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800488e:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004890:	3b19      	subs	r3, #25
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8004892:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8004894:	22a0      	movs	r2, #160	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004896:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8004898:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800489a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800489c:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800489e:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80048a0:	0392      	lsls	r2, r2, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80048a2:	a804      	add	r0, sp, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80048a4:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80048a6:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80048a8:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80048aa:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80048ac:	f7fc fc7a 	bl	80011a4 <HAL_RCC_OscConfig>
 80048b0:	2800      	cmp	r0, #0
 80048b2:	d000      	beq.n	80048b6 <SystemClock_Config+0x32>
 80048b4:	e7fe      	b.n	80048b4 <SystemClock_Config+0x30>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80048b6:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80048b8:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80048ba:	9003      	str	r0, [sp, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80048bc:	2101      	movs	r1, #1
 80048be:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80048c0:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80048c2:	9401      	str	r4, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80048c4:	f7fc fea6 	bl	8001614 <HAL_RCC_ClockConfig>
 80048c8:	2800      	cmp	r0, #0
 80048ca:	d000      	beq.n	80048ce <SystemClock_Config+0x4a>
 80048cc:	e7fe      	b.n	80048cc <SystemClock_Config+0x48>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80048ce:	f7fc ff73 	bl	80017b8 <HAL_RCC_GetHCLKFreq>
 80048d2:	21fa      	movs	r1, #250	; 0xfa
 80048d4:	0089      	lsls	r1, r1, #2
 80048d6:	f7fb fc17 	bl	8000108 <__udivsi3>
 80048da:	f7fc f8af 	bl	8000a3c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80048de:	2004      	movs	r0, #4
 80048e0:	f7fc f8c8 	bl	8000a74 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80048e4:	2001      	movs	r0, #1
 80048e6:	2200      	movs	r2, #0
 80048e8:	2100      	movs	r1, #0
 80048ea:	4240      	negs	r0, r0
 80048ec:	f7fc f868 	bl	80009c0 <HAL_NVIC_SetPriority>
}
 80048f0:	b010      	add	sp, #64	; 0x40
 80048f2:	bd10      	pop	{r4, pc}

080048f4 <main>:
{
 80048f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048f6:	46de      	mov	lr, fp
 80048f8:	464e      	mov	r6, r9
 80048fa:	4645      	mov	r5, r8
 80048fc:	4657      	mov	r7, sl
 80048fe:	b5e0      	push	{r5, r6, r7, lr}
 8004900:	b09f      	sub	sp, #124	; 0x7c
  HAL_Init();
 8004902:	f7fb fd89 	bl	8000418 <HAL_Init>
  SystemClock_Config();
 8004906:	f7ff ffbd 	bl	8004884 <SystemClock_Config>
  HAL_FLASH_Unlock();
 800490a:	f7fc fa67 	bl	8000ddc <HAL_FLASH_Unlock>
  EE_Init();
 800490e:	f7fd fdab 	bl	8002468 <EE_Init>
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8004912:	2180      	movs	r1, #128	; 0x80
 8004914:	4cd1      	ldr	r4, [pc, #836]	; (8004c5c <main+0x368>)
 8004916:	0289      	lsls	r1, r1, #10
 8004918:	6962      	ldr	r2, [r4, #20]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 800491a:	2090      	movs	r0, #144	; 0x90
 800491c:	430a      	orrs	r2, r1
 800491e:	6162      	str	r2, [r4, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8004920:	6963      	ldr	r3, [r4, #20]
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_15);

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004922:	2500      	movs	r5, #0
 8004924:	400b      	ands	r3, r1
  SET_BIT(RCC->AHBENR, Periphs);
 8004926:	2180      	movs	r1, #128	; 0x80
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8004928:	9308      	str	r3, [sp, #32]
  (void)tmpreg;
 800492a:	9b08      	ldr	r3, [sp, #32]
  SET_BIT(RCC->AHBENR, Periphs);
 800492c:	6962      	ldr	r2, [r4, #20]
 800492e:	02c9      	lsls	r1, r1, #11
 8004930:	430a      	orrs	r2, r1
 8004932:	6162      	str	r2, [r4, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8004934:	6963      	ldr	r3, [r4, #20]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004936:	2601      	movs	r6, #1
 8004938:	400b      	ands	r3, r1
 800493a:	9309      	str	r3, [sp, #36]	; 0x24
  (void)tmpreg;
 800493c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800493e:	2380      	movs	r3, #128	; 0x80
 8004940:	05c0      	lsls	r0, r0, #23
 8004942:	021b      	lsls	r3, r3, #8
 8004944:	6283      	str	r3, [r0, #40]	; 0x28
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004946:	a917      	add	r1, sp, #92	; 0x5c
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8004948:	9317      	str	r3, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800494a:	9618      	str	r6, [sp, #96]	; 0x60
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800494c:	9519      	str	r5, [sp, #100]	; 0x64
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800494e:	951a      	str	r5, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004950:	951b      	str	r5, [sp, #108]	; 0x6c
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004952:	f7fd fd05 	bl	8002360 <LL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004956:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8004958:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 800495a:	4333      	orrs	r3, r6
 800495c:	6163      	str	r3, [r4, #20]
 800495e:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8004960:	2102      	movs	r1, #2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004962:	4033      	ands	r3, r6
 8004964:	9307      	str	r3, [sp, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8004966:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004968:	9b07      	ldr	r3, [sp, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 800496a:	f7fc f829 	bl	80009c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800496e:	2009      	movs	r0, #9
 8004970:	f7fc f85a 	bl	8000a28 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 2, 0);
 8004974:	2200      	movs	r2, #0
 8004976:	2102      	movs	r1, #2
 8004978:	200b      	movs	r0, #11
 800497a:	f7fc f821 	bl	80009c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 800497e:	200b      	movs	r0, #11
 8004980:	f7fc f852 	bl	8000a28 <HAL_NVIC_EnableIRQ>
  hadc.Instance = ADC1;
 8004984:	4cb6      	ldr	r4, [pc, #728]	; (8004c60 <main+0x36c>)
 8004986:	4bb7      	ldr	r3, [pc, #732]	; (8004c64 <main+0x370>)
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8004988:	0020      	movs	r0, r4
  hadc.Instance = ADC1;
 800498a:	6023      	str	r3, [r4, #0]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800498c:	2308      	movs	r3, #8
 800498e:	6163      	str	r3, [r4, #20]
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC4;
 8004990:	3338      	adds	r3, #56	; 0x38
 8004992:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8004994:	2380      	movs	r3, #128	; 0x80
 8004996:	00db      	lsls	r3, r3, #3
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8004998:	6065      	str	r5, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800499a:	60a5      	str	r5, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800499c:	60e5      	str	r5, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800499e:	6126      	str	r6, [r4, #16]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80049a0:	61a5      	str	r5, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80049a2:	61e5      	str	r5, [r4, #28]
  hadc.Init.ContinuousConvMode = DISABLE;
 80049a4:	6225      	str	r5, [r4, #32]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 80049a6:	6266      	str	r6, [r4, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80049a8:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = ENABLE;
 80049aa:	6326      	str	r6, [r4, #48]	; 0x30
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80049ac:	6366      	str	r6, [r4, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80049ae:	f7fb fd63 	bl	8000478 <HAL_ADC_Init>
 80049b2:	2800      	cmp	r0, #0
 80049b4:	d000      	beq.n	80049b8 <main+0xc4>
 80049b6:	e7fe      	b.n	80049b6 <main+0xc2>
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80049b8:	2580      	movs	r5, #128	; 0x80
  sConfig.Channel = ADC_CHANNEL_3;
 80049ba:	2703      	movs	r7, #3
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80049bc:	2307      	movs	r3, #7
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80049be:	016d      	lsls	r5, r5, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80049c0:	a917      	add	r1, sp, #92	; 0x5c
 80049c2:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_3;
 80049c4:	9717      	str	r7, [sp, #92]	; 0x5c
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80049c6:	9518      	str	r5, [sp, #96]	; 0x60
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80049c8:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80049ca:	f7fb fe71 	bl	80006b0 <HAL_ADC_ConfigChannel>
 80049ce:	2800      	cmp	r0, #0
 80049d0:	d000      	beq.n	80049d4 <main+0xe0>
 80049d2:	e7fe      	b.n	80049d2 <main+0xde>
  sConfig.Channel = ADC_CHANNEL_6;
 80049d4:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80049d6:	a917      	add	r1, sp, #92	; 0x5c
 80049d8:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_6;
 80049da:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80049dc:	f7fb fe68 	bl	80006b0 <HAL_ADC_ConfigChannel>
 80049e0:	2800      	cmp	r0, #0
 80049e2:	d000      	beq.n	80049e6 <main+0xf2>
 80049e4:	e7fe      	b.n	80049e4 <main+0xf0>
  hcomp1.Instance = COMP1;
 80049e6:	4ea0      	ldr	r6, [pc, #640]	; (8004c68 <main+0x374>)
 80049e8:	4ba0      	ldr	r3, [pc, #640]	; (8004c6c <main+0x378>)
  hcomp1.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 80049ea:	60b0      	str	r0, [r6, #8]
  hcomp1.Instance = COMP1;
 80049ec:	6033      	str	r3, [r6, #0]
  hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_DAC2;
 80049ee:	2350      	movs	r3, #80	; 0x50
  hcomp1.Init.Output = COMP_OUTPUT_NONE;
 80049f0:	60f0      	str	r0, [r6, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80049f2:	6130      	str	r0, [r6, #16]
  hcomp1.Init.Mode = COMP_MODE_HIGHSPEED;
 80049f4:	61b0      	str	r0, [r6, #24]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80049f6:	61f0      	str	r0, [r6, #28]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80049f8:	0030      	movs	r0, r6
  hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_DAC2;
 80049fa:	6073      	str	r3, [r6, #4]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_LOW;
 80049fc:	6175      	str	r5, [r6, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 80049fe:	6237      	str	r7, [r6, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8004a00:	f7fb fee0 	bl	80007c4 <HAL_COMP_Init>
 8004a04:	2800      	cmp	r0, #0
 8004a06:	d000      	beq.n	8004a0a <main+0x116>
 8004a08:	e7fe      	b.n	8004a08 <main+0x114>
  htim1.Instance = TIM1;
 8004a0a:	4c99      	ldr	r4, [pc, #612]	; (8004c70 <main+0x37c>)
 8004a0c:	4b99      	ldr	r3, [pc, #612]	; (8004c74 <main+0x380>)
  htim1.Init.Prescaler = 0;
 8004a0e:	6060      	str	r0, [r4, #4]
  htim1.Instance = TIM1;
 8004a10:	6023      	str	r3, [r4, #0]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8004a12:	2320      	movs	r3, #32
 8004a14:	60a3      	str	r3, [r4, #8]
  htim1.Init.Period = 999;
 8004a16:	4b98      	ldr	r3, [pc, #608]	; (8004c78 <main+0x384>)
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a18:	6120      	str	r0, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 8004a1a:	6160      	str	r0, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a1c:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004a1e:	0020      	movs	r0, r4
  htim1.Init.Period = 999;
 8004a20:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004a22:	f7fc fecf 	bl	80017c4 <HAL_TIM_Base_Init>
 8004a26:	2800      	cmp	r0, #0
 8004a28:	d000      	beq.n	8004a2c <main+0x138>
 8004a2a:	e7fe      	b.n	8004a2a <main+0x136>
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004a2c:	a90c      	add	r1, sp, #48	; 0x30
 8004a2e:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004a30:	950c      	str	r5, [sp, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004a32:	f7fd fb35 	bl	80020a0 <HAL_TIM_ConfigClockSource>
 8004a36:	2800      	cmp	r0, #0
 8004a38:	d000      	beq.n	8004a3c <main+0x148>
 8004a3a:	e7fe      	b.n	8004a3a <main+0x146>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004a3c:	0020      	movs	r0, r4
 8004a3e:	f7fc ff8b 	bl	8001958 <HAL_TIM_PWM_Init>
 8004a42:	2800      	cmp	r0, #0
 8004a44:	d000      	beq.n	8004a48 <main+0x154>
 8004a46:	e7fe      	b.n	8004a46 <main+0x152>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a48:	900a      	str	r0, [sp, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a4a:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004a4c:	a90a      	add	r1, sp, #40	; 0x28
 8004a4e:	0020      	movs	r0, r4
 8004a50:	f7fd fc2a 	bl	80022a8 <HAL_TIMEx_MasterConfigSynchronization>
 8004a54:	2800      	cmp	r0, #0
 8004a56:	d000      	beq.n	8004a5a <main+0x166>
 8004a58:	e7fe      	b.n	8004a58 <main+0x164>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a5a:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 8004a5c:	9011      	str	r0, [sp, #68]	; 0x44
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a5e:	9012      	str	r0, [sp, #72]	; 0x48
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004a60:	9013      	str	r0, [sp, #76]	; 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004a62:	9014      	str	r0, [sp, #80]	; 0x50
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004a64:	9015      	str	r0, [sp, #84]	; 0x54
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004a66:	9016      	str	r0, [sp, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	a910      	add	r1, sp, #64	; 0x40
 8004a6c:	0020      	movs	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a6e:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004a70:	f7fd f9e0 	bl	8001e34 <HAL_TIM_PWM_ConfigChannel>
 8004a74:	2800      	cmp	r0, #0
 8004a76:	d000      	beq.n	8004a7a <main+0x186>
 8004a78:	e7fe      	b.n	8004a78 <main+0x184>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004a7a:	2204      	movs	r2, #4
 8004a7c:	a910      	add	r1, sp, #64	; 0x40
 8004a7e:	0020      	movs	r0, r4
 8004a80:	f7fd f9d8 	bl	8001e34 <HAL_TIM_PWM_ConfigChannel>
 8004a84:	2800      	cmp	r0, #0
 8004a86:	d000      	beq.n	8004a8a <main+0x196>
 8004a88:	e7fe      	b.n	8004a88 <main+0x194>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004a8a:	2208      	movs	r2, #8
 8004a8c:	a910      	add	r1, sp, #64	; 0x40
 8004a8e:	0020      	movs	r0, r4
 8004a90:	f7fd f9d0 	bl	8001e34 <HAL_TIM_PWM_ConfigChannel>
 8004a94:	2800      	cmp	r0, #0
 8004a96:	d000      	beq.n	8004a9a <main+0x1a6>
 8004a98:	e7fe      	b.n	8004a98 <main+0x1a4>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004a9a:	220c      	movs	r2, #12
 8004a9c:	a910      	add	r1, sp, #64	; 0x40
 8004a9e:	0020      	movs	r0, r4
 8004aa0:	f7fd f9c8 	bl	8001e34 <HAL_TIM_PWM_ConfigChannel>
 8004aa4:	2800      	cmp	r0, #0
 8004aa6:	d000      	beq.n	8004aaa <main+0x1b6>
 8004aa8:	e7fe      	b.n	8004aa8 <main+0x1b4>
  sBreakDeadTimeConfig.DeadTime = 60;
 8004aaa:	233c      	movs	r3, #60	; 0x3c
 8004aac:	931a      	str	r3, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004aae:	2380      	movs	r3, #128	; 0x80
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004ab0:	9017      	str	r0, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004ab2:	9018      	str	r0, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004ab4:	9019      	str	r0, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004ab6:	901b      	str	r0, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004ab8:	019b      	lsls	r3, r3, #6
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004aba:	901d      	str	r0, [sp, #116]	; 0x74
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004abc:	a917      	add	r1, sp, #92	; 0x5c
 8004abe:	0020      	movs	r0, r4
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004ac0:	931c      	str	r3, [sp, #112]	; 0x70
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004ac2:	f7fd fc11 	bl	80022e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8004ac6:	1e07      	subs	r7, r0, #0
 8004ac8:	d000      	beq.n	8004acc <main+0x1d8>
 8004aca:	e7fe      	b.n	8004aca <main+0x1d6>
  HAL_TIM_MspPostInit(&htim1);
 8004acc:	0020      	movs	r0, r4
 8004ace:	f000 fdb3 	bl	8005638 <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 8004ad2:	2380      	movs	r3, #128	; 0x80
 8004ad4:	4d69      	ldr	r5, [pc, #420]	; (8004c7c <main+0x388>)
 8004ad6:	05db      	lsls	r3, r3, #23
 8004ad8:	602b      	str	r3, [r5, #0]
  htim2.Init.Prescaler = 100;
 8004ada:	2364      	movs	r3, #100	; 0x64
 8004adc:	606b      	str	r3, [r5, #4]
  htim2.Init.Period = 5000;
 8004ade:	4b68      	ldr	r3, [pc, #416]	; (8004c80 <main+0x38c>)
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004ae0:	0028      	movs	r0, r5
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ae2:	60af      	str	r7, [r5, #8]
  htim2.Init.Period = 5000;
 8004ae4:	60eb      	str	r3, [r5, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ae6:	612f      	str	r7, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ae8:	61af      	str	r7, [r5, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004aea:	f7fc fe6b 	bl	80017c4 <HAL_TIM_Base_Init>
 8004aee:	2800      	cmp	r0, #0
 8004af0:	d000      	beq.n	8004af4 <main+0x200>
 8004af2:	e7fe      	b.n	8004af2 <main+0x1fe>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004af4:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004af6:	a917      	add	r1, sp, #92	; 0x5c
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004af8:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004afa:	0028      	movs	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004afc:	4699      	mov	r9, r3
 8004afe:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004b00:	f7fd face 	bl	80020a0 <HAL_TIM_ConfigClockSource>
 8004b04:	2800      	cmp	r0, #0
 8004b06:	d000      	beq.n	8004b0a <main+0x216>
 8004b08:	e7fe      	b.n	8004b08 <main+0x214>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b0a:	9010      	str	r0, [sp, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b0c:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004b0e:	a910      	add	r1, sp, #64	; 0x40
 8004b10:	0028      	movs	r0, r5
 8004b12:	f7fd fbc9 	bl	80022a8 <HAL_TIMEx_MasterConfigSynchronization>
 8004b16:	2800      	cmp	r0, #0
 8004b18:	d000      	beq.n	8004b1c <main+0x228>
 8004b1a:	e7fe      	b.n	8004b1a <main+0x226>
  htim3.Instance = TIM3;
 8004b1c:	4f59      	ldr	r7, [pc, #356]	; (8004c84 <main+0x390>)
 8004b1e:	4b5a      	ldr	r3, [pc, #360]	; (8004c88 <main+0x394>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b20:	60b8      	str	r0, [r7, #8]
  htim3.Instance = TIM3;
 8004b22:	603b      	str	r3, [r7, #0]
  htim3.Init.Prescaler = 10;
 8004b24:	230a      	movs	r3, #10
 8004b26:	607b      	str	r3, [r7, #4]
  htim3.Init.Period = 65535;
 8004b28:	4b58      	ldr	r3, [pc, #352]	; (8004c8c <main+0x398>)
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b2a:	6138      	str	r0, [r7, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b2c:	61b8      	str	r0, [r7, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004b2e:	0038      	movs	r0, r7
  htim3.Init.Period = 65535;
 8004b30:	4698      	mov	r8, r3
 8004b32:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004b34:	f7fc fe46 	bl	80017c4 <HAL_TIM_Base_Init>
 8004b38:	2800      	cmp	r0, #0
 8004b3a:	d000      	beq.n	8004b3e <main+0x24a>
 8004b3c:	e7fe      	b.n	8004b3c <main+0x248>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b3e:	464b      	mov	r3, r9
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004b40:	a917      	add	r1, sp, #92	; 0x5c
 8004b42:	0038      	movs	r0, r7
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b44:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004b46:	f7fd faab 	bl	80020a0 <HAL_TIM_ConfigClockSource>
 8004b4a:	2800      	cmp	r0, #0
 8004b4c:	d000      	beq.n	8004b50 <main+0x25c>
 8004b4e:	e7fe      	b.n	8004b4e <main+0x25a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b50:	9010      	str	r0, [sp, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b52:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004b54:	a910      	add	r1, sp, #64	; 0x40
 8004b56:	0038      	movs	r0, r7
 8004b58:	f7fd fba6 	bl	80022a8 <HAL_TIMEx_MasterConfigSynchronization>
 8004b5c:	2800      	cmp	r0, #0
 8004b5e:	d000      	beq.n	8004b62 <main+0x26e>
 8004b60:	e7fe      	b.n	8004b60 <main+0x26c>
  htim15.Instance = TIM15;
 8004b62:	4d4b      	ldr	r5, [pc, #300]	; (8004c90 <main+0x39c>)
 8004b64:	4b4b      	ldr	r3, [pc, #300]	; (8004c94 <main+0x3a0>)
  htim15.Init.Prescaler = 0;
 8004b66:	6068      	str	r0, [r5, #4]
  htim15.Instance = TIM15;
 8004b68:	602b      	str	r3, [r5, #0]
  htim15.Init.Period = 0xffff;
 8004b6a:	4643      	mov	r3, r8
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b6c:	60a8      	str	r0, [r5, #8]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b6e:	6128      	str	r0, [r5, #16]
  htim15.Init.RepetitionCounter = 0;
 8004b70:	6168      	str	r0, [r5, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b72:	61a8      	str	r0, [r5, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8004b74:	0028      	movs	r0, r5
  htim15.Init.Period = 0xffff;
 8004b76:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8004b78:	f7fc fe24 	bl	80017c4 <HAL_TIM_Base_Init>
 8004b7c:	2800      	cmp	r0, #0
 8004b7e:	d000      	beq.n	8004b82 <main+0x28e>
 8004b80:	e7fe      	b.n	8004b80 <main+0x28c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b82:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8004b84:	a910      	add	r1, sp, #64	; 0x40
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b86:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8004b88:	0028      	movs	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b8a:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8004b8c:	f7fd fa88 	bl	80020a0 <HAL_TIM_ConfigClockSource>
 8004b90:	2800      	cmp	r0, #0
 8004b92:	d000      	beq.n	8004b96 <main+0x2a2>
 8004b94:	e7fe      	b.n	8004b94 <main+0x2a0>
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8004b96:	0028      	movs	r0, r5
 8004b98:	f7fc ff82 	bl	8001aa0 <HAL_TIM_IC_Init>
 8004b9c:	2800      	cmp	r0, #0
 8004b9e:	d000      	beq.n	8004ba2 <main+0x2ae>
 8004ba0:	e7fe      	b.n	8004ba0 <main+0x2ac>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ba2:	900c      	str	r0, [sp, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ba4:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8004ba6:	a90c      	add	r1, sp, #48	; 0x30
 8004ba8:	0028      	movs	r0, r5
 8004baa:	f7fd fb7d 	bl	80022a8 <HAL_TIMEx_MasterConfigSynchronization>
 8004bae:	2800      	cmp	r0, #0
 8004bb0:	d000      	beq.n	8004bb4 <main+0x2c0>
 8004bb2:	e7fe      	b.n	8004bb2 <main+0x2be>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8004bb4:	230a      	movs	r3, #10
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004bb6:	9019      	str	r0, [sp, #100]	; 0x64
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8004bb8:	9317      	str	r3, [sp, #92]	; 0x5c
  sConfigIC.ICFilter = 0;
 8004bba:	901a      	str	r0, [sp, #104]	; 0x68
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004bbc:	3b09      	subs	r3, #9
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	a917      	add	r1, sp, #92	; 0x5c
 8004bc2:	0028      	movs	r0, r5
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004bc4:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004bc6:	f7fd f857 	bl	8001c78 <HAL_TIM_IC_ConfigChannel>
 8004bca:	2800      	cmp	r0, #0
 8004bcc:	d000      	beq.n	8004bd0 <main+0x2dc>
 8004bce:	e7fe      	b.n	8004bce <main+0x2da>
	hiwdg.Instance = IWDG;
 8004bd0:	4a31      	ldr	r2, [pc, #196]	; (8004c98 <main+0x3a4>)
 8004bd2:	4b32      	ldr	r3, [pc, #200]	; (8004c9c <main+0x3a8>)
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8004bd4:	0010      	movs	r0, r2
	hiwdg.Instance = IWDG;
 8004bd6:	6013      	str	r3, [r2, #0]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_16;
 8004bd8:	2302      	movs	r3, #2
 8004bda:	6053      	str	r3, [r2, #4]
	hiwdg.Init.Window = IWDG_WINDOW_DISABLE;
 8004bdc:	4b30      	ldr	r3, [pc, #192]	; (8004ca0 <main+0x3ac>)
 8004bde:	60d3      	str	r3, [r2, #12]
	hiwdg.Init.Reload = 2000;
 8004be0:	23fa      	movs	r3, #250	; 0xfa
 8004be2:	00db      	lsls	r3, r3, #3
 8004be4:	6093      	str	r3, [r2, #8]
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8004be6:	f7fc faa7 	bl	8001138 <HAL_IWDG_Init>
 8004bea:	2800      	cmp	r0, #0
 8004bec:	d000      	beq.n	8004bf0 <main+0x2fc>
 8004bee:	e7fe      	b.n	8004bee <main+0x2fa>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8004bf0:	2100      	movs	r1, #0
 8004bf2:	0020      	movs	r0, r4
 8004bf4:	f7fc ff28 	bl	8001a48 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8004bf8:	2100      	movs	r1, #0
 8004bfa:	0020      	movs	r0, r4
 8004bfc:	f7fd fb40 	bl	8002280 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8004c00:	2104      	movs	r1, #4
 8004c02:	0020      	movs	r0, r4
 8004c04:	f7fc ff20 	bl	8001a48 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8004c08:	2104      	movs	r1, #4
 8004c0a:	0020      	movs	r0, r4
 8004c0c:	f7fd fb38 	bl	8002280 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8004c10:	2108      	movs	r1, #8
 8004c12:	0020      	movs	r0, r4
 8004c14:	f7fc ff18 	bl	8001a48 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8004c18:	2108      	movs	r1, #8
 8004c1a:	0020      	movs	r0, r4
 8004c1c:	f7fd fb30 	bl	8002280 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_Base_Start(&htim3);
 8004c20:	0038      	movs	r0, r7
 8004c22:	f7fc fe47 	bl	80018b4 <HAL_TIM_Base_Start>
	playStartupTune();
 8004c26:	f7fe ff71 	bl	8003b0c <playStartupTune>
	if (HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_4) != HAL_OK)
 8004c2a:	210c      	movs	r1, #12
 8004c2c:	0020      	movs	r0, r4
 8004c2e:	f7fc fe4d 	bl	80018cc <HAL_TIM_OC_Start_IT>
 8004c32:	2800      	cmp	r0, #0
 8004c34:	d000      	beq.n	8004c38 <main+0x344>
 8004c36:	e7fe      	b.n	8004c36 <main+0x342>
	HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , 64);
 8004c38:	2340      	movs	r3, #64	; 0x40
 8004c3a:	4a1a      	ldr	r2, [pc, #104]	; (8004ca4 <main+0x3b0>)
 8004c3c:	2100      	movs	r1, #0
 8004c3e:	0028      	movs	r0, r5
 8004c40:	f7fc ffa6 	bl	8001b90 <HAL_TIM_IC_Start_DMA>
		if(HAL_COMP_Start_IT(&hcomp1) != HAL_OK)
 8004c44:	0030      	movs	r0, r6
 8004c46:	f7fb fe0d 	bl	8000864 <HAL_COMP_Start_IT>
 8004c4a:	2800      	cmp	r0, #0
 8004c4c:	d000      	beq.n	8004c50 <main+0x35c>
 8004c4e:	e7fe      	b.n	8004c4e <main+0x35a>
	if(HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8004c50:	4811      	ldr	r0, [pc, #68]	; (8004c98 <main+0x3a4>)
 8004c52:	f7fc fa71 	bl	8001138 <HAL_IWDG_Init>
 8004c56:	2800      	cmp	r0, #0
 8004c58:	d026      	beq.n	8004ca8 <main+0x3b4>
 8004c5a:	e7fe      	b.n	8004c5a <main+0x366>
 8004c5c:	40021000 	.word	0x40021000
 8004c60:	20000480 	.word	0x20000480
 8004c64:	40012400 	.word	0x40012400
 8004c68:	200001f8 	.word	0x200001f8
 8004c6c:	4001001c 	.word	0x4001001c
 8004c70:	200003b4 	.word	0x200003b4
 8004c74:	40012c00 	.word	0x40012c00
 8004c78:	000003e7 	.word	0x000003e7
 8004c7c:	200003f4 	.word	0x200003f4
 8004c80:	00001388 	.word	0x00001388
 8004c84:	20000224 	.word	0x20000224
 8004c88:	40000400 	.word	0x40000400
 8004c8c:	0000ffff 	.word	0x0000ffff
 8004c90:	20000198 	.word	0x20000198
 8004c94:	40014000 	.word	0x40014000
 8004c98:	200001dc 	.word	0x200001dc
 8004c9c:	40003000 	.word	0x40003000
 8004ca0:	00000fff 	.word	0x00000fff
 8004ca4:	2000026c 	.word	0x2000026c
	if (vehicle_mode == 1){                    // quad single direction
 8004ca8:	4bcf      	ldr	r3, [pc, #828]	; (8004fe8 <main+0x6f4>)
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d103      	bne.n	8004cb8 <main+0x3c4>
		loadEEpromConfig();
 8004cb0:	f7fd ff4e 	bl	8002b50 <loadEEpromConfig>
 8004cb4:	4bcc      	ldr	r3, [pc, #816]	; (8004fe8 <main+0x6f4>)
 8004cb6:	781b      	ldrb	r3, [r3, #0]
	if (vehicle_mode == 2){                   // crawler or thruster
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d100      	bne.n	8004cbe <main+0x3ca>
 8004cbc:	e363      	b.n	8005386 <main+0xa92>
	if (vehicle_mode == 3){                 // rc car 50 percent brake on reverse.
 8004cbe:	2b03      	cmp	r3, #3
 8004cc0:	d100      	bne.n	8004cc4 <main+0x3d0>
 8004cc2:	e34b      	b.n	800535c <main+0xa68>
	if (vehicle_mode == 4){                 // rc car 50 percent brake on reverse.
 8004cc4:	2b04      	cmp	r3, #4
 8004cc6:	d100      	bne.n	8004cca <main+0x3d6>
 8004cc8:	e333      	b.n	8005332 <main+0xa3e>
	if(bi_direction){
 8004cca:	4bc8      	ldr	r3, [pc, #800]	; (8004fec <main+0x6f8>)
 8004ccc:	4698      	mov	r8, r3
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d000      	beq.n	8004cd6 <main+0x3e2>
 8004cd4:	e321      	b.n	800531a <main+0xa26>
 8004cd6:	4bc6      	ldr	r3, [pc, #792]	; (8004ff0 <main+0x6fc>)
 8004cd8:	9300      	str	r3, [sp, #0]
 8004cda:	4bc6      	ldr	r3, [pc, #792]	; (8004ff4 <main+0x700>)
 8004cdc:	9301      	str	r3, [sp, #4]
 8004cde:	4bc6      	ldr	r3, [pc, #792]	; (8004ff8 <main+0x704>)
 8004ce0:	9302      	str	r3, [sp, #8]
 8004ce2:	4bc6      	ldr	r3, [pc, #792]	; (8004ffc <main+0x708>)
 8004ce4:	9303      	str	r3, [sp, #12]
	TIM1->CCR1 = 1;
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	4bc5      	ldr	r3, [pc, #788]	; (8005000 <main+0x70c>)
			count = 0;
 8004cea:	2400      	movs	r4, #0
	TIM1->CCR1 = 1;
 8004cec:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 1;
 8004cee:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 1;
 8004cf0:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = 800;
 8004cf2:	22c8      	movs	r2, #200	; 0xc8
 8004cf4:	0092      	lsls	r2, r2, #2
 8004cf6:	641a      	str	r2, [r3, #64]	; 0x40
 8004cf8:	4bc2      	ldr	r3, [pc, #776]	; (8005004 <main+0x710>)
 8004cfa:	4fc3      	ldr	r7, [pc, #780]	; (8005008 <main+0x714>)
 8004cfc:	4699      	mov	r9, r3
 8004cfe:	4bc3      	ldr	r3, [pc, #780]	; (800500c <main+0x718>)
 8004d00:	4dc3      	ldr	r5, [pc, #780]	; (8005010 <main+0x71c>)
 8004d02:	469a      	mov	sl, r3
 8004d04:	4bc3      	ldr	r3, [pc, #780]	; (8005014 <main+0x720>)
 8004d06:	469b      	mov	fp, r3
		count++;
 8004d08:	4bc3      	ldr	r3, [pc, #780]	; (8005018 <main+0x724>)
 8004d0a:	4ac3      	ldr	r2, [pc, #780]	; (8005018 <main+0x724>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	9304      	str	r3, [sp, #16]
 8004d10:	3301      	adds	r3, #1
 8004d12:	6013      	str	r3, [r2, #0]
		if (count > 100000) {
 8004d14:	4ac1      	ldr	r2, [pc, #772]	; (800501c <main+0x728>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	dd01      	ble.n	8004d1e <main+0x42a>
			count = 0;
 8004d1a:	4bbf      	ldr	r3, [pc, #764]	; (8005018 <main+0x724>)
 8004d1c:	601c      	str	r4, [r3, #0]
		compit = 0;
 8004d1e:	4bc0      	ldr	r3, [pc, #768]	; (8005020 <main+0x72c>)
		if (HAL_IWDG_Refresh(&hiwdg) != HAL_OK)              // watchdog refresh
 8004d20:	48c0      	ldr	r0, [pc, #768]	; (8005024 <main+0x730>)
		compit = 0;
 8004d22:	701c      	strb	r4, [r3, #0]
		if (HAL_IWDG_Refresh(&hiwdg) != HAL_OK)              // watchdog refresh
 8004d24:	f7fc fa36 	bl	8001194 <HAL_IWDG_Refresh>
 8004d28:	2800      	cmp	r0, #0
 8004d2a:	d000      	beq.n	8004d2e <main+0x43a>
 8004d2c:	e260      	b.n	80051f0 <main+0x8fc>
		control_loop_count++;
 8004d2e:	4bbe      	ldr	r3, [pc, #760]	; (8005028 <main+0x734>)
 8004d30:	4abd      	ldr	r2, [pc, #756]	; (8005028 <main+0x734>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	9304      	str	r3, [sp, #16]
 8004d36:	3301      	adds	r3, #1
 8004d38:	6013      	str	r3, [r2, #0]
		if (control_loop_count > 1) {
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	dd71      	ble.n	8004e22 <main+0x52e>
			if (dshotcommand > 0) {
 8004d3e:	4bbb      	ldr	r3, [pc, #748]	; (800502c <main+0x738>)
			control_loop_count = 0;
 8004d40:	6010      	str	r0, [r2, #0]
			if (dshotcommand > 0) {
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	dd1a      	ble.n	8004d7e <main+0x48a>
				if (dshotcommand == 2) {
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d103      	bne.n	8004d54 <main+0x460>
					playInputTune();
 8004d4c:	f7ff f820 	bl	8003d90 <playInputTune>
 8004d50:	4bb6      	ldr	r3, [pc, #728]	; (800502c <main+0x738>)
 8004d52:	681b      	ldr	r3, [r3, #0]
				if (dshotcommand == 21) {
 8004d54:	2b15      	cmp	r3, #21
 8004d56:	d100      	bne.n	8004d5a <main+0x466>
 8004d58:	e2d3      	b.n	8005302 <main+0xa0e>
				if (dshotcommand == 20) {     // forward = 1 if dir_reversed = 0
 8004d5a:	2b14      	cmp	r3, #20
 8004d5c:	d100      	bne.n	8004d60 <main+0x46c>
 8004d5e:	e2c9      	b.n	80052f4 <main+0xa00>
				if (dshotcommand == 7) {
 8004d60:	2b07      	cmp	r3, #7
 8004d62:	d100      	bne.n	8004d66 <main+0x472>
 8004d64:	e2d6      	b.n	8005314 <main+0xa20>
				if (dshotcommand == 8) {
 8004d66:	2b08      	cmp	r3, #8
 8004d68:	d100      	bne.n	8004d6c <main+0x478>
 8004d6a:	e2cf      	b.n	800530c <main+0xa18>
				if (dshotcommand == 9) {
 8004d6c:	2b09      	cmp	r3, #9
 8004d6e:	d100      	bne.n	8004d72 <main+0x47e>
 8004d70:	e2ac      	b.n	80052cc <main+0x9d8>
				if (dshotcommand == 10) {
 8004d72:	2b0a      	cmp	r3, #10
 8004d74:	d100      	bne.n	8004d78 <main+0x484>
 8004d76:	e242      	b.n	80051fe <main+0x90a>
				if (dshotcommand == 12) {
 8004d78:	2b0c      	cmp	r3, #12
 8004d7a:	d100      	bne.n	8004d7e <main+0x48a>
 8004d7c:	e2a3      	b.n	80052c6 <main+0x9d2>
 8004d7e:	4643      	mov	r3, r8
 8004d80:	681b      	ldr	r3, [r3, #0]
			if (bi_direction == 1 && (proshot == 0 && dshot == 0)) {
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d100      	bne.n	8004d88 <main+0x494>
 8004d86:	e23f      	b.n	8005208 <main+0x914>
			} else if ((proshot || dshot) && bi_direction) {
 8004d88:	4aa9      	ldr	r2, [pc, #676]	; (8005030 <main+0x73c>)
 8004d8a:	7812      	ldrb	r2, [r2, #0]
 8004d8c:	2a00      	cmp	r2, #0
 8004d8e:	d104      	bne.n	8004d9a <main+0x4a6>
 8004d90:	4aa8      	ldr	r2, [pc, #672]	; (8005034 <main+0x740>)
 8004d92:	7812      	ldrb	r2, [r2, #0]
 8004d94:	2a00      	cmp	r2, #0
 8004d96:	d100      	bne.n	8004d9a <main+0x4a6>
 8004d98:	e2a1      	b.n	80052de <main+0x9ea>
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d100      	bne.n	8004da0 <main+0x4ac>
 8004d9e:	e29e      	b.n	80052de <main+0x9ea>
				if (newinput > 1097) {
 8004da0:	9b03      	ldr	r3, [sp, #12]
 8004da2:	4aa5      	ldr	r2, [pc, #660]	; (8005038 <main+0x744>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4293      	cmp	r3, r2
 8004da8:	dd0f      	ble.n	8004dca <main+0x4d6>
					if (forward == dir_reversed) {
 8004daa:	464a      	mov	r2, r9
 8004dac:	6811      	ldr	r1, [r2, #0]
 8004dae:	4652      	mov	r2, sl
 8004db0:	6812      	ldr	r2, [r2, #0]
 8004db2:	4291      	cmp	r1, r2
 8004db4:	d105      	bne.n	8004dc2 <main+0x4ce>
						forward = 1 - dir_reversed;
 8004db6:	2201      	movs	r2, #1
 8004db8:	1a52      	subs	r2, r2, r1
 8004dba:	4649      	mov	r1, r9
 8004dbc:	600a      	str	r2, [r1, #0]
						bemf_counts = 0;
 8004dbe:	4a9f      	ldr	r2, [pc, #636]	; (800503c <main+0x748>)
 8004dc0:	6014      	str	r4, [r2, #0]
					adjusted_input = (newinput - 1100) * 2 + 100;
 8004dc2:	4a9f      	ldr	r2, [pc, #636]	; (8005040 <main+0x74c>)
 8004dc4:	189a      	adds	r2, r3, r2
 8004dc6:	0052      	lsls	r2, r2, #1
 8004dc8:	603a      	str	r2, [r7, #0]
				if (newinput <= 1047 && newinput > 0) {
 8004dca:	499e      	ldr	r1, [pc, #632]	; (8005044 <main+0x750>)
 8004dcc:	1e5a      	subs	r2, r3, #1
 8004dce:	428a      	cmp	r2, r1
 8004dd0:	d80f      	bhi.n	8004df2 <main+0x4fe>
					if (forward == (1 - dir_reversed)) {
 8004dd2:	4652      	mov	r2, sl
 8004dd4:	4648      	mov	r0, r9
 8004dd6:	6811      	ldr	r1, [r2, #0]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	6800      	ldr	r0, [r0, #0]
 8004ddc:	1a52      	subs	r2, r2, r1
 8004dde:	4282      	cmp	r2, r0
 8004de0:	d103      	bne.n	8004dea <main+0x4f6>
						bemf_counts = 0;
 8004de2:	4a96      	ldr	r2, [pc, #600]	; (800503c <main+0x748>)
 8004de4:	6014      	str	r4, [r2, #0]
						forward = dir_reversed;
 8004de6:	464a      	mov	r2, r9
 8004de8:	6011      	str	r1, [r2, #0]
					adjusted_input = (newinput - 90) * 2;
 8004dea:	001a      	movs	r2, r3
 8004dec:	3a5a      	subs	r2, #90	; 0x5a
 8004dee:	0052      	lsls	r2, r2, #1
 8004df0:	603a      	str	r2, [r7, #0]
				if ((newinput > 1047 && newinput < 1098) || newinput <= 120) {
 8004df2:	4a95      	ldr	r2, [pc, #596]	; (8005048 <main+0x754>)
 8004df4:	189a      	adds	r2, r3, r2
 8004df6:	2a31      	cmp	r2, #49	; 0x31
 8004df8:	d800      	bhi.n	8004dfc <main+0x508>
 8004dfa:	e1fd      	b.n	80051f8 <main+0x904>
 8004dfc:	2b78      	cmp	r3, #120	; 0x78
 8004dfe:	dc00      	bgt.n	8004e02 <main+0x50e>
 8004e00:	e1fa      	b.n	80051f8 <main+0x904>
 8004e02:	683b      	ldr	r3, [r7, #0]
			if (adjusted_input > 2000) {
 8004e04:	22fa      	movs	r2, #250	; 0xfa
 8004e06:	00d2      	lsls	r2, r2, #3
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	dd01      	ble.n	8004e10 <main+0x51c>
				adjusted_input = 2000;
 8004e0c:	0013      	movs	r3, r2
 8004e0e:	603a      	str	r2, [r7, #0]
			if (adjusted_input - input > 25) {
 8004e10:	4a8e      	ldr	r2, [pc, #568]	; (800504c <main+0x758>)
 8004e12:	6812      	ldr	r2, [r2, #0]
 8004e14:	1a99      	subs	r1, r3, r2
 8004e16:	2919      	cmp	r1, #25
 8004e18:	dc00      	bgt.n	8004e1c <main+0x528>
 8004e1a:	e1e2      	b.n	80051e2 <main+0x8ee>
				input = input + 5;
 8004e1c:	4b8b      	ldr	r3, [pc, #556]	; (800504c <main+0x758>)
 8004e1e:	3205      	adds	r2, #5
 8004e20:	601a      	str	r2, [r3, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8004e22:	4b8b      	ldr	r3, [pc, #556]	; (8005050 <main+0x75c>)
 8004e24:	4a8b      	ldr	r2, [pc, #556]	; (8005054 <main+0x760>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	dc00      	bgt.n	8004e2e <main+0x53a>
 8004e2c:	e1b9      	b.n	80051a2 <main+0x8ae>
 8004e2e:	0013      	movs	r3, r2
 8004e30:	3b64      	subs	r3, #100	; 0x64
 8004e32:	0118      	lsls	r0, r3, #4
 8004e34:	18c0      	adds	r0, r0, r3
 8004e36:	4988      	ldr	r1, [pc, #544]	; (8005058 <main+0x764>)
 8004e38:	f7fb f9f0 	bl	800021c <__divsi3>
		advancedivisor = map((commutation_interval), 100, 5000, 3, 20);
 8004e3c:	4b87      	ldr	r3, [pc, #540]	; (800505c <main+0x768>)
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8004e3e:	3003      	adds	r0, #3
		advancedivisor = map((commutation_interval), 100, 5000, 3, 20);
 8004e40:	7018      	strb	r0, [r3, #0]
		if (inputSet == 0) {
 8004e42:	4b87      	ldr	r3, [pc, #540]	; (8005060 <main+0x76c>)
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d104      	bne.n	8004e54 <main+0x560>
			HAL_Delay(10);
 8004e4a:	200a      	movs	r0, #10
 8004e4c:	f7fb fb02 	bl	8000454 <HAL_Delay>
			detectInput();
 8004e50:	f7ff f8e8 	bl	8004024 <detectInput>
		if (!armed) {
 8004e54:	4b83      	ldr	r3, [pc, #524]	; (8005064 <main+0x770>)
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d100      	bne.n	8004e5e <main+0x56a>
 8004e5c:	e195      	b.n	800518a <main+0x896>
 8004e5e:	4b7b      	ldr	r3, [pc, #492]	; (800504c <main+0x758>)
 8004e60:	681b      	ldr	r3, [r3, #0]
		if ((input > 47) && (armed == 1)) {
 8004e62:	2b2f      	cmp	r3, #47	; 0x2f
 8004e64:	dc00      	bgt.n	8004e68 <main+0x574>
 8004e66:	e157      	b.n	8005118 <main+0x824>
 8004e68:	4a7e      	ldr	r2, [pc, #504]	; (8005064 <main+0x770>)
 8004e6a:	7812      	ldrb	r2, [r2, #0]
 8004e6c:	2a01      	cmp	r2, #1
 8004e6e:	d100      	bne.n	8004e72 <main+0x57e>
 8004e70:	e137      	b.n	80050e2 <main+0x7ee>
		signaltimeout++;
 8004e72:	4b7d      	ldr	r3, [pc, #500]	; (8005068 <main+0x774>)
 8004e74:	4a7c      	ldr	r2, [pc, #496]	; (8005068 <main+0x774>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	3301      	adds	r3, #1
 8004e7a:	6013      	str	r3, [r2, #0]
		if (signaltimeout > signal_timeout_threshold) {
 8004e7c:	4a7b      	ldr	r2, [pc, #492]	; (800506c <main+0x778>)
 8004e7e:	6812      	ldr	r2, [r2, #0]
 8004e80:	9204      	str	r2, [sp, #16]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	da34      	bge.n	8004ef0 <main+0x5fc>
			input = 0;
 8004e86:	4b71      	ldr	r3, [pc, #452]	; (800504c <main+0x758>)
 8004e88:	601c      	str	r4, [r3, #0]
			armed = 0;
 8004e8a:	4b76      	ldr	r3, [pc, #472]	; (8005064 <main+0x770>)
 8004e8c:	701c      	strb	r4, [r3, #0]
			armedcount = 0;
 8004e8e:	4b78      	ldr	r3, [pc, #480]	; (8005070 <main+0x77c>)
 8004e90:	601c      	str	r4, [r3, #0]
			error = 1;
 8004e92:	2301      	movs	r3, #1
 8004e94:	4a77      	ldr	r2, [pc, #476]	; (8005074 <main+0x780>)
 8004e96:	7013      	strb	r3, [r2, #0]
			forcedcomcount = 0;
 8004e98:	4b77      	ldr	r3, [pc, #476]	; (8005078 <main+0x784>)
 8004e9a:	601c      	str	r4, [r3, #0]
			started = 0;
 8004e9c:	4b77      	ldr	r3, [pc, #476]	; (800507c <main+0x788>)
 8004e9e:	601c      	str	r4, [r3, #0]
			if (!brake && !prop_brake_active) {
 8004ea0:	9b00      	ldr	r3, [sp, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d000      	beq.n	8004eaa <main+0x5b6>
 8004ea8:	e119      	b.n	80050de <main+0x7ea>
 8004eaa:	4a75      	ldr	r2, [pc, #468]	; (8005080 <main+0x78c>)
 8004eac:	7812      	ldrb	r2, [r2, #0]
 8004eae:	9205      	str	r2, [sp, #20]
 8004eb0:	2a00      	cmp	r2, #0
 8004eb2:	d100      	bne.n	8004eb6 <main+0x5c2>
 8004eb4:	e100      	b.n	80050b8 <main+0x7c4>
			duty_cycle = 0;
 8004eb6:	602b      	str	r3, [r5, #0]
			if (brake || tempbrake) {
 8004eb8:	4b72      	ldr	r3, [pc, #456]	; (8005084 <main+0x790>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	9304      	str	r3, [sp, #16]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d002      	beq.n	8004ec8 <main+0x5d4>
				fullBrake();
 8004ec2:	f7fe f923 	bl	800310c <fullBrake>
				duty_cycle = 0;
 8004ec6:	602c      	str	r4, [r5, #0]
			if (prop_brake && prop_brake_active) {
 8004ec8:	9b01      	ldr	r3, [sp, #4]
 8004eca:	781a      	ldrb	r2, [r3, #0]
 8004ecc:	2300      	movs	r3, #0
 8004ece:	2a00      	cmp	r2, #0
 8004ed0:	d00a      	beq.n	8004ee8 <main+0x5f4>
 8004ed2:	4a6b      	ldr	r2, [pc, #428]	; (8005080 <main+0x78c>)
 8004ed4:	7812      	ldrb	r2, [r2, #0]
 8004ed6:	2a00      	cmp	r2, #0
 8004ed8:	d006      	beq.n	8004ee8 <main+0x5f4>
				duty_cycle = prop_brake_strength;
 8004eda:	9b02      	ldr	r3, [sp, #8]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	9304      	str	r3, [sp, #16]
 8004ee0:	602b      	str	r3, [r5, #0]
				proBrake();
 8004ee2:	f7fe fa3f 	bl	8003364 <proBrake>
 8004ee6:	682b      	ldr	r3, [r5, #0]
			TIM1->CCR1 = duty_cycle;// set duty cycle to 50 out of 768 to start.
 8004ee8:	4a45      	ldr	r2, [pc, #276]	; (8005000 <main+0x70c>)
 8004eea:	6353      	str	r3, [r2, #52]	; 0x34
			TIM1->CCR2 = duty_cycle;
 8004eec:	6393      	str	r3, [r2, #56]	; 0x38
			TIM1->CCR3 = duty_cycle;
 8004eee:	63d3      	str	r3, [r2, #60]	; 0x3c
 8004ef0:	4b52      	ldr	r3, [pc, #328]	; (800503c <main+0x748>)
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	4b61      	ldr	r3, [pc, #388]	; (800507c <main+0x788>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
		if (bemf_counts < 100 || commutation_interval > 10000) {
 8004ef8:	2a63      	cmp	r2, #99	; 0x63
 8004efa:	dc6c      	bgt.n	8004fd6 <main+0x6e2>
			filter_delay = 15;
 8004efc:	210f      	movs	r1, #15
			filter_level = 10;
 8004efe:	200a      	movs	r0, #10
			filter_delay = 15;
 8004f00:	468c      	mov	ip, r1
 8004f02:	4a53      	ldr	r2, [pc, #332]	; (8005050 <main+0x75c>)
 8004f04:	6812      	ldr	r2, [r2, #0]
 8004f06:	4960      	ldr	r1, [pc, #384]	; (8005088 <main+0x794>)
 8004f08:	7008      	strb	r0, [r1, #0]
 8004f0a:	4660      	mov	r0, ip
 8004f0c:	495f      	ldr	r1, [pc, #380]	; (800508c <main+0x798>)
 8004f0e:	6008      	str	r0, [r1, #0]
		if (commutation_interval < 200 && duty_cycle > 500) {
 8004f10:	2ac7      	cmp	r2, #199	; 0xc7
 8004f12:	dc0a      	bgt.n	8004f2a <main+0x636>
 8004f14:	22fa      	movs	r2, #250	; 0xfa
 8004f16:	6829      	ldr	r1, [r5, #0]
 8004f18:	0052      	lsls	r2, r2, #1
 8004f1a:	4291      	cmp	r1, r2
 8004f1c:	dd05      	ble.n	8004f2a <main+0x636>
			filter_delay = 1;
 8004f1e:	3af4      	subs	r2, #244	; 0xf4
 8004f20:	495a      	ldr	r1, [pc, #360]	; (800508c <main+0x798>)
 8004f22:	3aff      	subs	r2, #255	; 0xff
 8004f24:	600a      	str	r2, [r1, #0]
			filter_level = 0;
 8004f26:	4a58      	ldr	r2, [pc, #352]	; (8005088 <main+0x794>)
 8004f28:	7014      	strb	r4, [r2, #0]
		if (started == 1) {
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d045      	beq.n	8004fba <main+0x6c6>
		if (duty_cycle < 300) {
 8004f2e:	232c      	movs	r3, #44	; 0x2c
 8004f30:	682a      	ldr	r2, [r5, #0]
 8004f32:	33ff      	adds	r3, #255	; 0xff
 8004f34:	429a      	cmp	r2, r3
 8004f36:	dc3d      	bgt.n	8004fb4 <main+0x6c0>
			zc_timeout_threshold = 3500;
 8004f38:	4955      	ldr	r1, [pc, #340]	; (8005090 <main+0x79c>)
 8004f3a:	4b56      	ldr	r3, [pc, #344]	; (8005094 <main+0x7a0>)
		zctimeout++;
 8004f3c:	4856      	ldr	r0, [pc, #344]	; (8005098 <main+0x7a4>)
 8004f3e:	6019      	str	r1, [r3, #0]
 8004f40:	4b55      	ldr	r3, [pc, #340]	; (8005098 <main+0x7a4>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	9304      	str	r3, [sp, #16]
 8004f46:	3301      	adds	r3, #1
 8004f48:	6003      	str	r3, [r0, #0]
		if (zctimeout > zc_timeout_threshold) {
 8004f4a:	428b      	cmp	r3, r1
 8004f4c:	dd10      	ble.n	8004f70 <main+0x67c>
			bad_commutation = 0;
 8004f4e:	4b53      	ldr	r3, [pc, #332]	; (800509c <main+0x7a8>)
			HAL_COMP_Stop_IT(&hcomp1);
 8004f50:	0030      	movs	r0, r6
			bad_commutation = 0;
 8004f52:	701c      	strb	r4, [r3, #0]
			sensorless = 0;
 8004f54:	4b52      	ldr	r3, [pc, #328]	; (80050a0 <main+0x7ac>)
 8004f56:	601c      	str	r4, [r3, #0]
			HAL_COMP_Stop_IT(&hcomp1);
 8004f58:	f7fb fcd8 	bl	800090c <HAL_COMP_Stop_IT>
			running = 0;
 8004f5c:	465b      	mov	r3, fp
 8004f5e:	601c      	str	r4, [r3, #0]
			zctimeout = zc_timeout_threshold + 1;
 8004f60:	4b4c      	ldr	r3, [pc, #304]	; (8005094 <main+0x7a0>)
 8004f62:	4a4d      	ldr	r2, [pc, #308]	; (8005098 <main+0x7a4>)
 8004f64:	681b      	ldr	r3, [r3, #0]
			duty_cycle = 0;
 8004f66:	602c      	str	r4, [r5, #0]
			zctimeout = zc_timeout_threshold + 1;
 8004f68:	9304      	str	r3, [sp, #16]
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	6013      	str	r3, [r2, #0]
			duty_cycle = 0;
 8004f6e:	2200      	movs	r2, #0
		if ((bemf_counts > 15
 8004f70:	4b32      	ldr	r3, [pc, #200]	; (800503c <main+0x748>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	9304      	str	r3, [sp, #16]
 8004f76:	2b0f      	cmp	r3, #15
 8004f78:	dc00      	bgt.n	8004f7c <main+0x688>
 8004f7a:	e6c5      	b.n	8004d08 <main+0x414>
				&& TIM3->CNT > commutation_interval + commutation_interval / 2)
 8004f7c:	4b49      	ldr	r3, [pc, #292]	; (80050a4 <main+0x7b0>)
 8004f7e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004f80:	4b33      	ldr	r3, [pc, #204]	; (8005050 <main+0x75c>)
 8004f82:	6819      	ldr	r1, [r3, #0]
 8004f84:	0fcb      	lsrs	r3, r1, #31
 8004f86:	185b      	adds	r3, r3, r1
 8004f88:	105b      	asrs	r3, r3, #1
 8004f8a:	185b      	adds	r3, r3, r1
 8004f8c:	4298      	cmp	r0, r3
 8004f8e:	d800      	bhi.n	8004f92 <main+0x69e>
 8004f90:	e6ba      	b.n	8004d08 <main+0x414>
				&& duty_cycle < 300) {
 8004f92:	232c      	movs	r3, #44	; 0x2c
 8004f94:	33ff      	adds	r3, #255	; 0xff
 8004f96:	429a      	cmp	r2, r3
 8004f98:	dd00      	ble.n	8004f9c <main+0x6a8>
 8004f9a:	e6b5      	b.n	8004d08 <main+0x414>
			if (forcedcount < 1) {
 8004f9c:	4b42      	ldr	r3, [pc, #264]	; (80050a8 <main+0x7b4>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	dc04      	bgt.n	8004fae <main+0x6ba>
				forcedcount++;
 8004fa4:	4a40      	ldr	r2, [pc, #256]	; (80050a8 <main+0x7b4>)
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	6013      	str	r3, [r2, #0]
				forcedCommutation();
 8004faa:	f7fe fc39 	bl	8003820 <forcedCommutation>
			bemf_counts = 0;
 8004fae:	4b23      	ldr	r3, [pc, #140]	; (800503c <main+0x748>)
 8004fb0:	601c      	str	r4, [r3, #0]
 8004fb2:	e6a9      	b.n	8004d08 <main+0x414>
			zc_timeout_threshold = 2000;
 8004fb4:	21fa      	movs	r1, #250	; 0xfa
 8004fb6:	00c9      	lsls	r1, r1, #3
 8004fb8:	e7bf      	b.n	8004f3a <main+0x646>
			if (running == 0) {
 8004fba:	465b      	mov	r3, fp
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1b5      	bne.n	8004f2e <main+0x63a>
				upthreshold = 2;
 8004fc2:	2202      	movs	r2, #2
 8004fc4:	4939      	ldr	r1, [pc, #228]	; (80050ac <main+0x7b8>)
 8004fc6:	600a      	str	r2, [r1, #0]
				threshold = 2;
 8004fc8:	4939      	ldr	r1, [pc, #228]	; (80050b0 <main+0x7bc>)
 8004fca:	600a      	str	r2, [r1, #0]
				zctimeout = 0;
 8004fcc:	4a32      	ldr	r2, [pc, #200]	; (8005098 <main+0x7a4>)
 8004fce:	6013      	str	r3, [r2, #0]
				startMotor(); // safety on for input testing   ************************************************
 8004fd0:	f7fe fb56 	bl	8003680 <startMotor>
 8004fd4:	e7ab      	b.n	8004f2e <main+0x63a>
		if (bemf_counts < 100 || commutation_interval > 10000) {
 8004fd6:	4a1e      	ldr	r2, [pc, #120]	; (8005050 <main+0x75c>)
 8004fd8:	4936      	ldr	r1, [pc, #216]	; (80050b4 <main+0x7c0>)
 8004fda:	6812      	ldr	r2, [r2, #0]
 8004fdc:	428a      	cmp	r2, r1
 8004fde:	dc77      	bgt.n	80050d0 <main+0x7dc>
			filter_delay = 3;
 8004fe0:	2103      	movs	r1, #3
			filter_level = 3;
 8004fe2:	2003      	movs	r0, #3
			filter_delay = 3;
 8004fe4:	468c      	mov	ip, r1
 8004fe6:	e78e      	b.n	8004f06 <main+0x612>
 8004fe8:	20000050 	.word	0x20000050
 8004fec:	200000a0 	.word	0x200000a0
 8004ff0:	20000008 	.word	0x20000008
 8004ff4:	20000126 	.word	0x20000126
 8004ff8:	20000028 	.word	0x20000028
 8004ffc:	20000120 	.word	0x20000120
 8005000:	40012c00 	.word	0x40012c00
 8005004:	2000001c 	.word	0x2000001c
 8005008:	20000438 	.word	0x20000438
 800500c:	200000b8 	.word	0x200000b8
 8005010:	2000000c 	.word	0x2000000c
 8005014:	2000013c 	.word	0x2000013c
 8005018:	200000b0 	.word	0x200000b0
 800501c:	000186a0 	.word	0x000186a0
 8005020:	200000ac 	.word	0x200000ac
 8005024:	200001dc 	.word	0x200001dc
 8005028:	200001f0 	.word	0x200001f0
 800502c:	20000100 	.word	0x20000100
 8005030:	20000138 	.word	0x20000138
 8005034:	200000fc 	.word	0x200000fc
 8005038:	00000449 	.word	0x00000449
 800503c:	20000268 	.word	0x20000268
 8005040:	fffffbe6 	.word	0xfffffbe6
 8005044:	00000416 	.word	0x00000416
 8005048:	fffffbe8 	.word	0xfffffbe8
 800504c:	20000110 	.word	0x20000110
 8005050:	200000a8 	.word	0x200000a8
 8005054:	00001388 	.word	0x00001388
 8005058:	00001324 	.word	0x00001324
 800505c:	20000006 	.word	0x20000006
 8005060:	20000114 	.word	0x20000114
 8005064:	20000094 	.word	0x20000094
 8005068:	20000148 	.word	0x20000148
 800506c:	20000034 	.word	0x20000034
 8005070:	20000098 	.word	0x20000098
 8005074:	20000104 	.word	0x20000104
 8005078:	20000108 	.word	0x20000108
 800507c:	2000014c 	.word	0x2000014c
 8005080:	20000127 	.word	0x20000127
 8005084:	20000154 	.word	0x20000154
 8005088:	20000014 	.word	0x20000014
 800508c:	20000010 	.word	0x20000010
 8005090:	00000dac 	.word	0x00000dac
 8005094:	20000054 	.word	0x20000054
 8005098:	20000164 	.word	0x20000164
 800509c:	2000009c 	.word	0x2000009c
 80050a0:	20000140 	.word	0x20000140
 80050a4:	40000400 	.word	0x40000400
 80050a8:	2000010c 	.word	0x2000010c
 80050ac:	2000004c 	.word	0x2000004c
 80050b0:	20000048 	.word	0x20000048
 80050b4:	00002710 	.word	0x00002710
				allOff();
 80050b8:	f7fd ff0a 	bl	8002ed0 <allOff>
 80050bc:	9b00      	ldr	r3, [sp, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	9304      	str	r3, [sp, #16]
			duty_cycle = 0;
 80050c2:	9b05      	ldr	r3, [sp, #20]
 80050c4:	602b      	str	r3, [r5, #0]
			if (brake || tempbrake) {
 80050c6:	9b04      	ldr	r3, [sp, #16]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d100      	bne.n	80050ce <main+0x7da>
 80050cc:	e6f4      	b.n	8004eb8 <main+0x5c4>
 80050ce:	e6f8      	b.n	8004ec2 <main+0x5ce>
 80050d0:	220a      	movs	r2, #10
 80050d2:	49b6      	ldr	r1, [pc, #728]	; (80053ac <main+0xab8>)
 80050d4:	700a      	strb	r2, [r1, #0]
 80050d6:	49b6      	ldr	r1, [pc, #728]	; (80053b0 <main+0xabc>)
 80050d8:	3205      	adds	r2, #5
 80050da:	600a      	str	r2, [r1, #0]
 80050dc:	e725      	b.n	8004f2a <main+0x636>
			duty_cycle = 0;
 80050de:	602c      	str	r4, [r5, #0]
 80050e0:	e6ef      	b.n	8004ec2 <main+0x5ce>
			prop_brake_active = 0;
 80050e2:	49b4      	ldr	r1, [pc, #720]	; (80053b4 <main+0xac0>)
			duty_cycle = input / 2 - 20;
 80050e4:	105b      	asrs	r3, r3, #1
			prop_brake_active = 0;
 80050e6:	700c      	strb	r4, [r1, #0]
			started = 1;
 80050e8:	49b3      	ldr	r1, [pc, #716]	; (80053b8 <main+0xac4>)
			duty_cycle = input / 2 - 20;
 80050ea:	3b14      	subs	r3, #20
			started = 1;
 80050ec:	600a      	str	r2, [r1, #0]
			if (bemf_counts < 15) {
 80050ee:	4ab3      	ldr	r2, [pc, #716]	; (80053bc <main+0xac8>)
			duty_cycle = input / 2 - 20;
 80050f0:	602b      	str	r3, [r5, #0]
			if (bemf_counts < 15) {
 80050f2:	6812      	ldr	r2, [r2, #0]
 80050f4:	9204      	str	r2, [sp, #16]
 80050f6:	2a0e      	cmp	r2, #14
 80050f8:	dc25      	bgt.n	8005146 <main+0x852>
				if (duty_cycle < 40) {
 80050fa:	2b27      	cmp	r3, #39	; 0x27
 80050fc:	dc18      	bgt.n	8005130 <main+0x83c>
					duty_cycle = 40;
 80050fe:	2328      	movs	r3, #40	; 0x28
 8005100:	602b      	str	r3, [r5, #0]
			if (running) {
 8005102:	465b      	mov	r3, fp
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d100      	bne.n	800510c <main+0x818>
 800510a:	e6b2      	b.n	8004e72 <main+0x57e>
 800510c:	2328      	movs	r3, #40	; 0x28
				TIM1->CCR1 = duty_cycle;// set duty cycle to 50 out of 768 to start.
 800510e:	4aac      	ldr	r2, [pc, #688]	; (80053c0 <main+0xacc>)
 8005110:	6353      	str	r3, [r2, #52]	; 0x34
				TIM1->CCR2 = duty_cycle;
 8005112:	6393      	str	r3, [r2, #56]	; 0x38
				TIM1->CCR3 = duty_cycle;
 8005114:	63d3      	str	r3, [r2, #60]	; 0x3c
 8005116:	e6ac      	b.n	8004e72 <main+0x57e>
		signaltimeout++;
 8005118:	4baa      	ldr	r3, [pc, #680]	; (80053c4 <main+0xad0>)
 800511a:	4aaa      	ldr	r2, [pc, #680]	; (80053c4 <main+0xad0>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	3301      	adds	r3, #1
 8005120:	6013      	str	r3, [r2, #0]
		if (signaltimeout > signal_timeout_threshold) {
 8005122:	4aa9      	ldr	r2, [pc, #676]	; (80053c8 <main+0xad4>)
 8005124:	6812      	ldr	r2, [r2, #0]
 8005126:	9204      	str	r2, [sp, #16]
 8005128:	429a      	cmp	r2, r3
 800512a:	da00      	bge.n	800512e <main+0x83a>
 800512c:	e6ab      	b.n	8004e86 <main+0x592>
 800512e:	e6b0      	b.n	8004e92 <main+0x59e>
				if (duty_cycle > 400) {
 8005130:	22c8      	movs	r2, #200	; 0xc8
 8005132:	0052      	lsls	r2, r2, #1
 8005134:	4293      	cmp	r3, r2
 8005136:	dd1e      	ble.n	8005176 <main+0x882>
			if (running) {
 8005138:	465b      	mov	r3, fp
 800513a:	681b      	ldr	r3, [r3, #0]
					duty_cycle = 400;
 800513c:	602a      	str	r2, [r5, #0]
			if (running) {
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00c      	beq.n	800515c <main+0x868>
 8005142:	0013      	movs	r3, r2
 8005144:	e7e3      	b.n	800510e <main+0x81a>
 8005146:	465a      	mov	r2, fp
 8005148:	6812      	ldr	r2, [r2, #0]
 800514a:	2a00      	cmp	r2, #0
 800514c:	d100      	bne.n	8005150 <main+0x85c>
 800514e:	e690      	b.n	8004e72 <main+0x57e>
				if (duty_cycle > 998) {                             // safety!!!
 8005150:	4a9e      	ldr	r2, [pc, #632]	; (80053cc <main+0xad8>)
 8005152:	4293      	cmp	r3, r2
 8005154:	dd14      	ble.n	8005180 <main+0x88c>
					duty_cycle = 999;
 8005156:	4b9e      	ldr	r3, [pc, #632]	; (80053d0 <main+0xadc>)
 8005158:	602b      	str	r3, [r5, #0]
 800515a:	e7d8      	b.n	800510e <main+0x81a>
		signaltimeout++;
 800515c:	4b99      	ldr	r3, [pc, #612]	; (80053c4 <main+0xad0>)
 800515e:	4a99      	ldr	r2, [pc, #612]	; (80053c4 <main+0xad0>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	3301      	adds	r3, #1
 8005164:	6013      	str	r3, [r2, #0]
		if (signaltimeout > signal_timeout_threshold) {
 8005166:	4a98      	ldr	r2, [pc, #608]	; (80053c8 <main+0xad4>)
 8005168:	6812      	ldr	r2, [r2, #0]
 800516a:	9204      	str	r2, [sp, #16]
 800516c:	4293      	cmp	r3, r2
 800516e:	dd00      	ble.n	8005172 <main+0x87e>
 8005170:	e689      	b.n	8004e86 <main+0x592>
 8005172:	2301      	movs	r3, #1
 8005174:	e6c2      	b.n	8004efc <main+0x608>
			if (running) {
 8005176:	465a      	mov	r2, fp
 8005178:	6812      	ldr	r2, [r2, #0]
 800517a:	2a00      	cmp	r2, #0
 800517c:	d100      	bne.n	8005180 <main+0x88c>
 800517e:	e678      	b.n	8004e72 <main+0x57e>
				if (duty_cycle < 35) {
 8005180:	2b22      	cmp	r3, #34	; 0x22
 8005182:	dcc4      	bgt.n	800510e <main+0x81a>
					duty_cycle = 35;
 8005184:	2323      	movs	r3, #35	; 0x23
 8005186:	602b      	str	r3, [r5, #0]
 8005188:	e7c1      	b.n	800510e <main+0x81a>
			if ((inputSet == 1) && (input == 0)) {
 800518a:	4b92      	ldr	r3, [pc, #584]	; (80053d4 <main+0xae0>)
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	9304      	str	r3, [sp, #16]
 8005190:	2b01      	cmp	r3, #1
 8005192:	d00b      	beq.n	80051ac <main+0x8b8>
 8005194:	4b90      	ldr	r3, [pc, #576]	; (80053d8 <main+0xae4>)
 8005196:	681b      	ldr	r3, [r3, #0]
			if (input > 1) {
 8005198:	2b01      	cmp	r3, #1
 800519a:	ddbd      	ble.n	8005118 <main+0x824>
				armedcount = 0;
 800519c:	4a8f      	ldr	r2, [pc, #572]	; (80053dc <main+0xae8>)
 800519e:	6014      	str	r4, [r2, #0]
 80051a0:	e65f      	b.n	8004e62 <main+0x56e>
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80051a2:	2b64      	cmp	r3, #100	; 0x64
 80051a4:	db00      	blt.n	80051a8 <main+0x8b4>
 80051a6:	e643      	b.n	8004e30 <main+0x53c>
 80051a8:	2364      	movs	r3, #100	; 0x64
 80051aa:	e641      	b.n	8004e30 <main+0x53c>
			if ((inputSet == 1) && (input == 0)) {
 80051ac:	4b8a      	ldr	r3, [pc, #552]	; (80053d8 <main+0xae4>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1f1      	bne.n	8005198 <main+0x8a4>
				armedcount++;
 80051b4:	4b89      	ldr	r3, [pc, #548]	; (80053dc <main+0xae8>)
 80051b6:	4a89      	ldr	r2, [pc, #548]	; (80053dc <main+0xae8>)
 80051b8:	681b      	ldr	r3, [r3, #0]
				HAL_Delay(1);
 80051ba:	2001      	movs	r0, #1
				armedcount++;
 80051bc:	9305      	str	r3, [sp, #20]
 80051be:	3301      	adds	r3, #1
 80051c0:	6013      	str	r3, [r2, #0]
				HAL_Delay(1);
 80051c2:	f7fb f947 	bl	8000454 <HAL_Delay>
				if (armedcount > 1000) {
 80051c6:	23fa      	movs	r3, #250	; 0xfa
 80051c8:	4a84      	ldr	r2, [pc, #528]	; (80053dc <main+0xae8>)
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	6812      	ldr	r2, [r2, #0]
 80051ce:	9205      	str	r2, [sp, #20]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	dddf      	ble.n	8005194 <main+0x8a0>
					armed = 1;
 80051d4:	466a      	mov	r2, sp
 80051d6:	4b82      	ldr	r3, [pc, #520]	; (80053e0 <main+0xaec>)
 80051d8:	7c12      	ldrb	r2, [r2, #16]
 80051da:	701a      	strb	r2, [r3, #0]
					playInputTune();
 80051dc:	f7fe fdd8 	bl	8003d90 <playInputTune>
 80051e0:	e7d8      	b.n	8005194 <main+0x8a0>
			} else if (input - adjusted_input > 25) {
 80051e2:	1ad1      	subs	r1, r2, r3
 80051e4:	2919      	cmp	r1, #25
 80051e6:	dd04      	ble.n	80051f2 <main+0x8fe>
				input = input - 5;
 80051e8:	4b7b      	ldr	r3, [pc, #492]	; (80053d8 <main+0xae4>)
 80051ea:	3a05      	subs	r2, #5
 80051ec:	601a      	str	r2, [r3, #0]
 80051ee:	e618      	b.n	8004e22 <main+0x52e>
 80051f0:	e7fe      	b.n	80051f0 <main+0x8fc>
				input = adjusted_input;
 80051f2:	4a79      	ldr	r2, [pc, #484]	; (80053d8 <main+0xae4>)
 80051f4:	6013      	str	r3, [r2, #0]
 80051f6:	e614      	b.n	8004e22 <main+0x52e>
					adjusted_input = 0;
 80051f8:	603c      	str	r4, [r7, #0]
				adjusted_input = 2000;
 80051fa:	2300      	movs	r3, #0
 80051fc:	e608      	b.n	8004e10 <main+0x51c>
					bi_direction = 1;
 80051fe:	4642      	mov	r2, r8
 8005200:	3b09      	subs	r3, #9
 8005202:	6013      	str	r3, [r2, #0]
					armed = 0;
 8005204:	4b76      	ldr	r3, [pc, #472]	; (80053e0 <main+0xaec>)
 8005206:	701c      	strb	r4, [r3, #0]
			if (bi_direction == 1 && (proshot == 0 && dshot == 0)) {
 8005208:	4b76      	ldr	r3, [pc, #472]	; (80053e4 <main+0xaf0>)
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d000      	beq.n	8005212 <main+0x91e>
 8005210:	e5c6      	b.n	8004da0 <main+0x4ac>
 8005212:	4b75      	ldr	r3, [pc, #468]	; (80053e8 <main+0xaf4>)
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	9304      	str	r3, [sp, #16]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d000      	beq.n	800521e <main+0x92a>
 800521c:	e5c0      	b.n	8004da0 <main+0x4ac>
				if (newinput > 1100) {
 800521e:	9b03      	ldr	r3, [sp, #12]
 8005220:	4a72      	ldr	r2, [pc, #456]	; (80053ec <main+0xaf8>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4293      	cmp	r3, r2
 8005226:	dd37      	ble.n	8005298 <main+0x9a4>
					if (forward == dir_reversed) {
 8005228:	464a      	mov	r2, r9
 800522a:	6810      	ldr	r0, [r2, #0]
 800522c:	4652      	mov	r2, sl
 800522e:	6812      	ldr	r2, [r2, #0]
 8005230:	4290      	cmp	r0, r2
 8005232:	d028      	beq.n	8005286 <main+0x992>
					if (prop_brake_active == 0) {
 8005234:	4a5f      	ldr	r2, [pc, #380]	; (80053b4 <main+0xac0>)
 8005236:	7812      	ldrb	r2, [r2, #0]
 8005238:	2a00      	cmp	r2, #0
 800523a:	d104      	bne.n	8005246 <main+0x952>
						adjusted_input = (newinput - 1050) * 3;
 800523c:	4a6c      	ldr	r2, [pc, #432]	; (80053f0 <main+0xafc>)
 800523e:	1899      	adds	r1, r3, r2
 8005240:	004a      	lsls	r2, r1, #1
 8005242:	1852      	adds	r2, r2, r1
 8005244:	603a      	str	r2, [r7, #0]
				if (zctimeout >= zc_timeout_threshold) {
 8005246:	4a6b      	ldr	r2, [pc, #428]	; (80053f4 <main+0xb00>)
 8005248:	6812      	ldr	r2, [r2, #0]
 800524a:	9204      	str	r2, [sp, #16]
 800524c:	4a6a      	ldr	r2, [pc, #424]	; (80053f8 <main+0xb04>)
 800524e:	6812      	ldr	r2, [r2, #0]
 8005250:	9205      	str	r2, [sp, #20]
 8005252:	9905      	ldr	r1, [sp, #20]
 8005254:	9a04      	ldr	r2, [sp, #16]
 8005256:	428a      	cmp	r2, r1
 8005258:	db09      	blt.n	800526e <main+0x97a>
					if (vehicle_mode != 3) { // car mode requires throttle return to center before direction change
 800525a:	4a68      	ldr	r2, [pc, #416]	; (80053fc <main+0xb08>)
 800525c:	7812      	ldrb	r2, [r2, #0]
 800525e:	2a03      	cmp	r2, #3
 8005260:	d001      	beq.n	8005266 <main+0x972>
						prop_brake_active = 0;
 8005262:	4a54      	ldr	r2, [pc, #336]	; (80053b4 <main+0xac0>)
 8005264:	7014      	strb	r4, [r2, #0]
					startupcountdown = 0;
 8005266:	4a66      	ldr	r2, [pc, #408]	; (8005400 <main+0xb0c>)
 8005268:	6014      	str	r4, [r2, #0]
					bemf_counts = 0;
 800526a:	4a54      	ldr	r2, [pc, #336]	; (80053bc <main+0xac8>)
 800526c:	6014      	str	r4, [r2, #0]
				if (newinput > 800 && newinput < 1100) {
 800526e:	4a65      	ldr	r2, [pc, #404]	; (8005404 <main+0xb10>)
 8005270:	4694      	mov	ip, r2
 8005272:	2295      	movs	r2, #149	; 0x95
 8005274:	4463      	add	r3, ip
 8005276:	0052      	lsls	r2, r2, #1
 8005278:	4293      	cmp	r3, r2
 800527a:	d900      	bls.n	800527e <main+0x98a>
 800527c:	e5c1      	b.n	8004e02 <main+0x50e>
					prop_brake_active = 0;
 800527e:	4b4d      	ldr	r3, [pc, #308]	; (80053b4 <main+0xac0>)
					adjusted_input = 0;
 8005280:	603c      	str	r4, [r7, #0]
					prop_brake_active = 0;
 8005282:	701c      	strb	r4, [r3, #0]
 8005284:	e7b9      	b.n	80051fa <main+0x906>
						adjusted_input = 0;
 8005286:	9a04      	ldr	r2, [sp, #16]
						prop_brake_active = 1;
 8005288:	494a      	ldr	r1, [pc, #296]	; (80053b4 <main+0xac0>)
						adjusted_input = 0;
 800528a:	603a      	str	r2, [r7, #0]
						prop_brake_active = 1;
 800528c:	2201      	movs	r2, #1
 800528e:	700a      	strb	r2, [r1, #0]
						forward = 1 - dir_reversed;
 8005290:	4649      	mov	r1, r9
 8005292:	1a12      	subs	r2, r2, r0
 8005294:	600a      	str	r2, [r1, #0]
 8005296:	e7d6      	b.n	8005246 <main+0x952>
				if (newinput < 800) {
 8005298:	4a5b      	ldr	r2, [pc, #364]	; (8005408 <main+0xb14>)
 800529a:	4293      	cmp	r3, r2
 800529c:	dcd3      	bgt.n	8005246 <main+0x952>
					if (forward == (1 - dir_reversed)) {
 800529e:	4652      	mov	r2, sl
 80052a0:	2001      	movs	r0, #1
 80052a2:	6812      	ldr	r2, [r2, #0]
 80052a4:	1a81      	subs	r1, r0, r2
 80052a6:	468c      	mov	ip, r1
 80052a8:	4649      	mov	r1, r9
 80052aa:	6809      	ldr	r1, [r1, #0]
 80052ac:	458c      	cmp	ip, r1
 80052ae:	d01a      	beq.n	80052e6 <main+0x9f2>
					if (prop_brake_active == 0) {
 80052b0:	4a40      	ldr	r2, [pc, #256]	; (80053b4 <main+0xac0>)
 80052b2:	7812      	ldrb	r2, [r2, #0]
 80052b4:	2a00      	cmp	r2, #0
 80052b6:	d1c6      	bne.n	8005246 <main+0x952>
						adjusted_input = (800 - newinput) * 3;
 80052b8:	22c8      	movs	r2, #200	; 0xc8
 80052ba:	0092      	lsls	r2, r2, #2
 80052bc:	1ad2      	subs	r2, r2, r3
 80052be:	0051      	lsls	r1, r2, #1
 80052c0:	188a      	adds	r2, r1, r2
 80052c2:	603a      	str	r2, [r7, #0]
 80052c4:	e7bf      	b.n	8005246 <main+0x952>
					storeEEpromConfig();
 80052c6:	f7fd fc29 	bl	8002b1c <storeEEpromConfig>
 80052ca:	e7fe      	b.n	80052ca <main+0x9d6>
					bi_direction = 0;
 80052cc:	4643      	mov	r3, r8
 80052ce:	601c      	str	r4, [r3, #0]
					armed = 0;
 80052d0:	4b43      	ldr	r3, [pc, #268]	; (80053e0 <main+0xaec>)
 80052d2:	701c      	strb	r4, [r3, #0]
			} else if ((proshot || dshot) && bi_direction) {
 80052d4:	4b43      	ldr	r3, [pc, #268]	; (80053e4 <main+0xaf0>)
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d100      	bne.n	80052de <main+0x9ea>
 80052dc:	e558      	b.n	8004d90 <main+0x49c>
				adjusted_input = newinput;
 80052de:	9b03      	ldr	r3, [sp, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	603b      	str	r3, [r7, #0]
 80052e4:	e58e      	b.n	8004e04 <main+0x510>
						prop_brake_active = 1;
 80052e6:	4933      	ldr	r1, [pc, #204]	; (80053b4 <main+0xac0>)
 80052e8:	7008      	strb	r0, [r1, #0]
						adjusted_input = 0;
 80052ea:	9904      	ldr	r1, [sp, #16]
 80052ec:	6039      	str	r1, [r7, #0]
						forward = dir_reversed;
 80052ee:	4649      	mov	r1, r9
 80052f0:	600a      	str	r2, [r1, #0]
 80052f2:	e7a8      	b.n	8005246 <main+0x952>
					forward = 1 - dir_reversed;
 80052f4:	4652      	mov	r2, sl
 80052f6:	6812      	ldr	r2, [r2, #0]
 80052f8:	3b13      	subs	r3, #19
 80052fa:	1a9b      	subs	r3, r3, r2
 80052fc:	464a      	mov	r2, r9
 80052fe:	6013      	str	r3, [r2, #0]
 8005300:	e53d      	b.n	8004d7e <main+0x48a>
					forward = dir_reversed;
 8005302:	4652      	mov	r2, sl
 8005304:	464b      	mov	r3, r9
 8005306:	6812      	ldr	r2, [r2, #0]
 8005308:	601a      	str	r2, [r3, #0]
 800530a:	e538      	b.n	8004d7e <main+0x48a>
					dir_reversed = 1;
 800530c:	4652      	mov	r2, sl
 800530e:	3b07      	subs	r3, #7
 8005310:	6013      	str	r3, [r2, #0]
 8005312:	e534      	b.n	8004d7e <main+0x48a>
					dir_reversed = 0;
 8005314:	4653      	mov	r3, sl
 8005316:	601c      	str	r4, [r3, #0]
 8005318:	e531      	b.n	8004d7e <main+0x48a>
 800531a:	4b3c      	ldr	r3, [pc, #240]	; (800540c <main+0xb18>)
 800531c:	9300      	str	r3, [sp, #0]
 800531e:	4b3c      	ldr	r3, [pc, #240]	; (8005410 <main+0xb1c>)
 8005320:	9301      	str	r3, [sp, #4]
 8005322:	4b3c      	ldr	r3, [pc, #240]	; (8005414 <main+0xb20>)
 8005324:	9302      	str	r3, [sp, #8]
		newinput = 1001;
 8005326:	4b3c      	ldr	r3, [pc, #240]	; (8005418 <main+0xb24>)
 8005328:	001a      	movs	r2, r3
 800532a:	9303      	str	r3, [sp, #12]
 800532c:	4b3b      	ldr	r3, [pc, #236]	; (800541c <main+0xb28>)
 800532e:	6013      	str	r3, [r2, #0]
 8005330:	e4d9      	b.n	8004ce6 <main+0x3f2>
			 bi_direction = 1;
 8005332:	4b3b      	ldr	r3, [pc, #236]	; (8005420 <main+0xb2c>)
			 slow_decay = 0;                      // for complementary pwm , 0 for diode freewheeling
 8005334:	493b      	ldr	r1, [pc, #236]	; (8005424 <main+0xb30>)
			 bi_direction = 1;
 8005336:	4698      	mov	r8, r3
 8005338:	2301      	movs	r3, #1
 800533a:	4642      	mov	r2, r8
 800533c:	6013      	str	r3, [r2, #0]
			 slow_decay = 0;                      // for complementary pwm , 0 for diode freewheeling
 800533e:	2200      	movs	r2, #0
 8005340:	700a      	strb	r2, [r1, #0]
			 brake = 0;                          // apply full motor brake on stop
 8005342:	4932      	ldr	r1, [pc, #200]	; (800540c <main+0xb18>)
 8005344:	600a      	str	r2, [r1, #0]
			 prop_brake = 1;
 8005346:	4a32      	ldr	r2, [pc, #200]	; (8005410 <main+0xb1c>)
			 brake = 0;                          // apply full motor brake on stop
 8005348:	9100      	str	r1, [sp, #0]
			 prop_brake = 1;
 800534a:	7013      	strb	r3, [r2, #0]
			 prop_brake_strength = 800;
 800534c:	4b31      	ldr	r3, [pc, #196]	; (8005414 <main+0xb20>)
			 prop_brake = 1;
 800534e:	9201      	str	r2, [sp, #4]
			 prop_brake_strength = 800;
 8005350:	9302      	str	r3, [sp, #8]
 8005352:	001a      	movs	r2, r3
 8005354:	23c8      	movs	r3, #200	; 0xc8
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	6013      	str	r3, [r2, #0]
 800535a:	e7e4      	b.n	8005326 <main+0xa32>
		 bi_direction = 1;
 800535c:	4b30      	ldr	r3, [pc, #192]	; (8005420 <main+0xb2c>)
		 slow_decay = 0;                      // for complementary pwm , 0 for diode freewheeling
 800535e:	4931      	ldr	r1, [pc, #196]	; (8005424 <main+0xb30>)
		 bi_direction = 1;
 8005360:	4698      	mov	r8, r3
 8005362:	2301      	movs	r3, #1
 8005364:	4642      	mov	r2, r8
 8005366:	6013      	str	r3, [r2, #0]
		 slow_decay = 0;                      // for complementary pwm , 0 for diode freewheeling
 8005368:	2200      	movs	r2, #0
 800536a:	700a      	strb	r2, [r1, #0]
		 brake = 0;                          // apply full motor brake on stop
 800536c:	4927      	ldr	r1, [pc, #156]	; (800540c <main+0xb18>)
 800536e:	600a      	str	r2, [r1, #0]
		 prop_brake = 1;
 8005370:	4a27      	ldr	r2, [pc, #156]	; (8005410 <main+0xb1c>)
		 brake = 0;                          // apply full motor brake on stop
 8005372:	9100      	str	r1, [sp, #0]
		 prop_brake = 1;
 8005374:	7013      	strb	r3, [r2, #0]
		 prop_brake_strength = 900;
 8005376:	4b27      	ldr	r3, [pc, #156]	; (8005414 <main+0xb20>)
		 prop_brake = 1;
 8005378:	9201      	str	r2, [sp, #4]
		 prop_brake_strength = 900;
 800537a:	9302      	str	r3, [sp, #8]
 800537c:	001a      	movs	r2, r3
 800537e:	23e1      	movs	r3, #225	; 0xe1
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	6013      	str	r3, [r2, #0]
 8005384:	e7cf      	b.n	8005326 <main+0xa32>
		 bi_direction = 1;
 8005386:	4b26      	ldr	r3, [pc, #152]	; (8005420 <main+0xb2c>)
 8005388:	4698      	mov	r8, r3
 800538a:	2301      	movs	r3, #1
 800538c:	4642      	mov	r2, r8
 800538e:	6013      	str	r3, [r2, #0]
		 slow_decay = 1;                      // for complementary pwm , 0 for diode freewheeling
 8005390:	4a24      	ldr	r2, [pc, #144]	; (8005424 <main+0xb30>)
 8005392:	7013      	strb	r3, [r2, #0]
		 brake = 1;                          // apply full motor brake on stop
 8005394:	4a1d      	ldr	r2, [pc, #116]	; (800540c <main+0xb18>)
 8005396:	6013      	str	r3, [r2, #0]
 8005398:	9200      	str	r2, [sp, #0]
		 start_power = 150;
 800539a:	2296      	movs	r2, #150	; 0x96
 800539c:	4b22      	ldr	r3, [pc, #136]	; (8005428 <main+0xb34>)
 800539e:	601a      	str	r2, [r3, #0]
 80053a0:	4b1b      	ldr	r3, [pc, #108]	; (8005410 <main+0xb1c>)
 80053a2:	9301      	str	r3, [sp, #4]
 80053a4:	4b1b      	ldr	r3, [pc, #108]	; (8005414 <main+0xb20>)
 80053a6:	9302      	str	r3, [sp, #8]
 80053a8:	e7bd      	b.n	8005326 <main+0xa32>
 80053aa:	46c0      	nop			; (mov r8, r8)
 80053ac:	20000014 	.word	0x20000014
 80053b0:	20000010 	.word	0x20000010
 80053b4:	20000127 	.word	0x20000127
 80053b8:	2000014c 	.word	0x2000014c
 80053bc:	20000268 	.word	0x20000268
 80053c0:	40012c00 	.word	0x40012c00
 80053c4:	20000148 	.word	0x20000148
 80053c8:	20000034 	.word	0x20000034
 80053cc:	000003e6 	.word	0x000003e6
 80053d0:	000003e7 	.word	0x000003e7
 80053d4:	20000114 	.word	0x20000114
 80053d8:	20000110 	.word	0x20000110
 80053dc:	20000098 	.word	0x20000098
 80053e0:	20000094 	.word	0x20000094
 80053e4:	20000138 	.word	0x20000138
 80053e8:	200000fc 	.word	0x200000fc
 80053ec:	0000044c 	.word	0x0000044c
 80053f0:	fffffbe6 	.word	0xfffffbe6
 80053f4:	20000164 	.word	0x20000164
 80053f8:	20000054 	.word	0x20000054
 80053fc:	20000050 	.word	0x20000050
 8005400:	20000150 	.word	0x20000150
 8005404:	fffffcdf 	.word	0xfffffcdf
 8005408:	0000031f 	.word	0x0000031f
 800540c:	20000008 	.word	0x20000008
 8005410:	20000126 	.word	0x20000126
 8005414:	20000028 	.word	0x20000028
 8005418:	20000120 	.word	0x20000120
 800541c:	000003e9 	.word	0x000003e9
 8005420:	200000a0 	.word	0x200000a0
 8005424:	20000038 	.word	0x20000038
 8005428:	20000040 	.word	0x20000040

0800542c <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 800542c:	e7fe      	b.n	800542c <_Error_Handler>
 800542e:	46c0      	nop			; (mov r8, r8)

08005430 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005430:	2301      	movs	r3, #1

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8005432:	2005      	movs	r0, #5
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005434:	4a0e      	ldr	r2, [pc, #56]	; (8005470 <HAL_MspInit+0x40>)
{
 8005436:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005438:	6991      	ldr	r1, [r2, #24]
{
 800543a:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800543c:	4319      	orrs	r1, r3
 800543e:	6191      	str	r1, [r2, #24]
 8005440:	6992      	ldr	r2, [r2, #24]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8005442:	2100      	movs	r1, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005444:	4013      	ands	r3, r2
 8005446:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8005448:	2200      	movs	r2, #0
 800544a:	4240      	negs	r0, r0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800544c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 800544e:	f7fb fab7 	bl	80009c0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8005452:	2002      	movs	r0, #2
 8005454:	2200      	movs	r2, #0
 8005456:	2100      	movs	r1, #0
 8005458:	4240      	negs	r0, r0
 800545a:	f7fb fab1 	bl	80009c0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800545e:	2001      	movs	r0, #1
 8005460:	2200      	movs	r2, #0
 8005462:	2100      	movs	r1, #0
 8005464:	4240      	negs	r0, r0
 8005466:	f7fb faab 	bl	80009c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800546a:	b003      	add	sp, #12
 800546c:	bd00      	pop	{pc}
 800546e:	46c0      	nop			; (mov r8, r8)
 8005470:	40021000 	.word	0x40021000

08005474 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005474:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8005476:	4b21      	ldr	r3, [pc, #132]	; (80054fc <HAL_ADC_MspInit+0x88>)
 8005478:	6802      	ldr	r2, [r0, #0]
{
 800547a:	b087      	sub	sp, #28
 800547c:	0004      	movs	r4, r0
  if(hadc->Instance==ADC1)
 800547e:	429a      	cmp	r2, r3
 8005480:	d001      	beq.n	8005486 <HAL_ADC_MspInit+0x12>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005482:	b007      	add	sp, #28
 8005484:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005486:	2680      	movs	r6, #128	; 0x80
 8005488:	4b1d      	ldr	r3, [pc, #116]	; (8005500 <HAL_ADC_MspInit+0x8c>)
 800548a:	00b6      	lsls	r6, r6, #2
 800548c:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800548e:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005490:	4332      	orrs	r2, r6
 8005492:	619a      	str	r2, [r3, #24]
 8005494:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005496:	2700      	movs	r7, #0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005498:	4033      	ands	r3, r6
 800549a:	9300      	str	r3, [sp, #0]
 800549c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 800549e:	2348      	movs	r3, #72	; 0x48
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054a0:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 80054a2:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054a4:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80054a6:	3b45      	subs	r3, #69	; 0x45
 80054a8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054aa:	9703      	str	r7, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054ac:	f7fb fd5c 	bl	8000f68 <HAL_GPIO_Init>
    hdma_adc.Instance = DMA1_Channel1;
 80054b0:	4d14      	ldr	r5, [pc, #80]	; (8005504 <HAL_ADC_MspInit+0x90>)
 80054b2:	4b15      	ldr	r3, [pc, #84]	; (8005508 <HAL_ADC_MspInit+0x94>)
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80054b4:	0028      	movs	r0, r5
    hdma_adc.Instance = DMA1_Channel1;
 80054b6:	602b      	str	r3, [r5, #0]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80054b8:	2380      	movs	r3, #128	; 0x80
 80054ba:	60eb      	str	r3, [r5, #12]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80054bc:	2380      	movs	r3, #128	; 0x80
 80054be:	011b      	lsls	r3, r3, #4
 80054c0:	616b      	str	r3, [r5, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80054c2:	2320      	movs	r3, #32
 80054c4:	61ab      	str	r3, [r5, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_MEDIUM;
 80054c6:	2380      	movs	r3, #128	; 0x80
 80054c8:	015b      	lsls	r3, r3, #5
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80054ca:	606f      	str	r7, [r5, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80054cc:	60af      	str	r7, [r5, #8]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80054ce:	612e      	str	r6, [r5, #16]
    hdma_adc.Init.Priority = DMA_PRIORITY_MEDIUM;
 80054d0:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80054d2:	f7fb fae3 	bl	8000a9c <HAL_DMA_Init>
 80054d6:	2800      	cmp	r0, #0
 80054d8:	d10a      	bne.n	80054f0 <HAL_ADC_MspInit+0x7c>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80054da:	63e5      	str	r5, [r4, #60]	; 0x3c
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 1, 0);
 80054dc:	2200      	movs	r2, #0
 80054de:	2101      	movs	r1, #1
 80054e0:	200c      	movs	r0, #12
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80054e2:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 1, 0);
 80054e4:	f7fb fa6c 	bl	80009c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 80054e8:	200c      	movs	r0, #12
 80054ea:	f7fb fa9d 	bl	8000a28 <HAL_NVIC_EnableIRQ>
}
 80054ee:	e7c8      	b.n	8005482 <HAL_ADC_MspInit+0xe>
      _Error_Handler(__FILE__, __LINE__);
 80054f0:	216b      	movs	r1, #107	; 0x6b
 80054f2:	4806      	ldr	r0, [pc, #24]	; (800550c <HAL_ADC_MspInit+0x98>)
 80054f4:	f7ff ff9a 	bl	800542c <_Error_Handler>
 80054f8:	e7ef      	b.n	80054da <HAL_ADC_MspInit+0x66>
 80054fa:	46c0      	nop			; (mov r8, r8)
 80054fc:	40012400 	.word	0x40012400
 8005500:	40021000 	.word	0x40021000
 8005504:	2000043c 	.word	0x2000043c
 8005508:	40020008 	.word	0x40020008
 800550c:	08005810 	.word	0x08005810

08005510 <HAL_COMP_MspInit>:
  }

}

void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8005510:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcomp->Instance==COMP1)
 8005512:	4b0d      	ldr	r3, [pc, #52]	; (8005548 <HAL_COMP_MspInit+0x38>)
 8005514:	6802      	ldr	r2, [r0, #0]
{
 8005516:	b087      	sub	sp, #28
  if(hcomp->Instance==COMP1)
 8005518:	429a      	cmp	r2, r3
 800551a:	d001      	beq.n	8005520 <HAL_COMP_MspInit+0x10>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 800551c:	b007      	add	sp, #28
 800551e:	bd00      	pop	{pc}
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8005520:	2322      	movs	r3, #34	; 0x22
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005522:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8005524:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005526:	3b1f      	subs	r3, #31
 8005528:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800552a:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800552c:	a901      	add	r1, sp, #4
 800552e:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005530:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005532:	f7fb fd19 	bl	8000f68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 1, 0);
 8005536:	2200      	movs	r2, #0
 8005538:	2101      	movs	r1, #1
 800553a:	200c      	movs	r0, #12
 800553c:	f7fb fa40 	bl	80009c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8005540:	200c      	movs	r0, #12
 8005542:	f7fb fa71 	bl	8000a28 <HAL_NVIC_EnableIRQ>
}
 8005546:	e7e9      	b.n	800551c <HAL_COMP_MspInit+0xc>
 8005548:	4001001c 	.word	0x4001001c

0800554c <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800554c:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_base->Instance==TIM1)
 800554e:	6803      	ldr	r3, [r0, #0]
 8005550:	4a32      	ldr	r2, [pc, #200]	; (800561c <HAL_TIM_Base_MspInit+0xd0>)
{
 8005552:	b088      	sub	sp, #32
 8005554:	0004      	movs	r4, r0
  if(htim_base->Instance==TIM1)
 8005556:	4293      	cmp	r3, r2
 8005558:	d00b      	beq.n	8005572 <HAL_TIM_Base_MspInit+0x26>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 800555a:	2280      	movs	r2, #128	; 0x80
 800555c:	05d2      	lsls	r2, r2, #23
 800555e:	4293      	cmp	r3, r2
 8005560:	d012      	beq.n	8005588 <HAL_TIM_Base_MspInit+0x3c>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8005562:	4a2f      	ldr	r2, [pc, #188]	; (8005620 <HAL_TIM_Base_MspInit+0xd4>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d019      	beq.n	800559c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM15)
 8005568:	4a2e      	ldr	r2, [pc, #184]	; (8005624 <HAL_TIM_Base_MspInit+0xd8>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d020      	beq.n	80055b0 <HAL_TIM_Base_MspInit+0x64>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800556e:	b008      	add	sp, #32
 8005570:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005572:	2080      	movs	r0, #128	; 0x80
 8005574:	4a2c      	ldr	r2, [pc, #176]	; (8005628 <HAL_TIM_Base_MspInit+0xdc>)
 8005576:	0100      	lsls	r0, r0, #4
 8005578:	6991      	ldr	r1, [r2, #24]
 800557a:	4301      	orrs	r1, r0
 800557c:	6191      	str	r1, [r2, #24]
 800557e:	6993      	ldr	r3, [r2, #24]
 8005580:	4003      	ands	r3, r0
 8005582:	9300      	str	r3, [sp, #0]
 8005584:	9b00      	ldr	r3, [sp, #0]
 8005586:	e7f2      	b.n	800556e <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005588:	2301      	movs	r3, #1
 800558a:	4a27      	ldr	r2, [pc, #156]	; (8005628 <HAL_TIM_Base_MspInit+0xdc>)
 800558c:	69d1      	ldr	r1, [r2, #28]
 800558e:	4319      	orrs	r1, r3
 8005590:	61d1      	str	r1, [r2, #28]
 8005592:	69d2      	ldr	r2, [r2, #28]
 8005594:	4013      	ands	r3, r2
 8005596:	9301      	str	r3, [sp, #4]
 8005598:	9b01      	ldr	r3, [sp, #4]
 800559a:	e7e8      	b.n	800556e <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800559c:	2302      	movs	r3, #2
 800559e:	4a22      	ldr	r2, [pc, #136]	; (8005628 <HAL_TIM_Base_MspInit+0xdc>)
 80055a0:	69d1      	ldr	r1, [r2, #28]
 80055a2:	4319      	orrs	r1, r3
 80055a4:	61d1      	str	r1, [r2, #28]
 80055a6:	69d2      	ldr	r2, [r2, #28]
 80055a8:	4013      	ands	r3, r2
 80055aa:	9303      	str	r3, [sp, #12]
 80055ac:	9b03      	ldr	r3, [sp, #12]
 80055ae:	e7de      	b.n	800556e <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80055b0:	2080      	movs	r0, #128	; 0x80
 80055b2:	4a1d      	ldr	r2, [pc, #116]	; (8005628 <HAL_TIM_Base_MspInit+0xdc>)
 80055b4:	0240      	lsls	r0, r0, #9
 80055b6:	6991      	ldr	r1, [r2, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055b8:	2600      	movs	r6, #0
    __HAL_RCC_TIM15_CLK_ENABLE();
 80055ba:	4301      	orrs	r1, r0
 80055bc:	6191      	str	r1, [r2, #24]
 80055be:	6993      	ldr	r3, [r2, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055c0:	a903      	add	r1, sp, #12
    __HAL_RCC_TIM15_CLK_ENABLE();
 80055c2:	4003      	ands	r3, r0
 80055c4:	9302      	str	r3, [sp, #8]
 80055c6:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055c8:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80055ca:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055cc:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80055ce:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055d0:	3b02      	subs	r3, #2
 80055d2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055d4:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055d6:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM15;
 80055d8:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055da:	f7fb fcc5 	bl	8000f68 <HAL_GPIO_Init>
    hdma_tim15_ch1_up_trig_com.Instance = DMA1_Channel5;
 80055de:	4d13      	ldr	r5, [pc, #76]	; (800562c <HAL_TIM_Base_MspInit+0xe0>)
 80055e0:	4b13      	ldr	r3, [pc, #76]	; (8005630 <HAL_TIM_Base_MspInit+0xe4>)
    if (HAL_DMA_Init(&hdma_tim15_ch1_up_trig_com) != HAL_OK)
 80055e2:	0028      	movs	r0, r5
    hdma_tim15_ch1_up_trig_com.Instance = DMA1_Channel5;
 80055e4:	602b      	str	r3, [r5, #0]
    hdma_tim15_ch1_up_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 80055e6:	2380      	movs	r3, #128	; 0x80
 80055e8:	60eb      	str	r3, [r5, #12]
    hdma_tim15_ch1_up_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80055ea:	3380      	adds	r3, #128	; 0x80
 80055ec:	612b      	str	r3, [r5, #16]
    hdma_tim15_ch1_up_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80055ee:	2380      	movs	r3, #128	; 0x80
 80055f0:	011b      	lsls	r3, r3, #4
    hdma_tim15_ch1_up_trig_com.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80055f2:	606e      	str	r6, [r5, #4]
    hdma_tim15_ch1_up_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 80055f4:	60ae      	str	r6, [r5, #8]
    hdma_tim15_ch1_up_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80055f6:	616b      	str	r3, [r5, #20]
    hdma_tim15_ch1_up_trig_com.Init.Mode = DMA_NORMAL;
 80055f8:	61ae      	str	r6, [r5, #24]
    hdma_tim15_ch1_up_trig_com.Init.Priority = DMA_PRIORITY_LOW;
 80055fa:	61ee      	str	r6, [r5, #28]
    if (HAL_DMA_Init(&hdma_tim15_ch1_up_trig_com) != HAL_OK)
 80055fc:	f7fb fa4e 	bl	8000a9c <HAL_DMA_Init>
 8005600:	2800      	cmp	r0, #0
 8005602:	d105      	bne.n	8005610 <HAL_TIM_Base_MspInit+0xc4>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim15_ch1_up_trig_com);
 8005604:	6265      	str	r5, [r4, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim15_ch1_up_trig_com);
 8005606:	6225      	str	r5, [r4, #32]
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim15_ch1_up_trig_com);
 8005608:	63a5      	str	r5, [r4, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim15_ch1_up_trig_com);
 800560a:	626c      	str	r4, [r5, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim15_ch1_up_trig_com);
 800560c:	6365      	str	r5, [r4, #52]	; 0x34
}
 800560e:	e7ae      	b.n	800556e <HAL_TIM_Base_MspInit+0x22>
      _Error_Handler(__FILE__, __LINE__);
 8005610:	211e      	movs	r1, #30
 8005612:	4808      	ldr	r0, [pc, #32]	; (8005634 <HAL_TIM_Base_MspInit+0xe8>)
 8005614:	31ff      	adds	r1, #255	; 0xff
 8005616:	f7ff ff09 	bl	800542c <_Error_Handler>
 800561a:	e7f3      	b.n	8005604 <HAL_TIM_Base_MspInit+0xb8>
 800561c:	40012c00 	.word	0x40012c00
 8005620:	40000400 	.word	0x40000400
 8005624:	40014000 	.word	0x40014000
 8005628:	40021000 	.word	0x40021000
 800562c:	20000370 	.word	0x20000370
 8005630:	40020058 	.word	0x40020058
 8005634:	08005810 	.word	0x08005810

08005638 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005638:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 800563a:	4b10      	ldr	r3, [pc, #64]	; (800567c <HAL_TIM_MspPostInit+0x44>)
 800563c:	6802      	ldr	r2, [r0, #0]
{
 800563e:	b087      	sub	sp, #28
  if(htim->Instance==TIM1)
 8005640:	429a      	cmp	r2, r3
 8005642:	d001      	beq.n	8005648 <HAL_TIM_MspPostInit+0x10>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005644:	b007      	add	sp, #28
 8005646:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8005648:	23f8      	movs	r3, #248	; 0xf8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800564a:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800564c:	2402      	movs	r4, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800564e:	2500      	movs	r5, #0
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8005650:	011b      	lsls	r3, r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005652:	a901      	add	r1, sp, #4
 8005654:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8005656:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005658:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800565a:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800565c:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800565e:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005660:	f7fb fc82 	bl	8000f68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005664:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005666:	a901      	add	r1, sp, #4
 8005668:	4805      	ldr	r0, [pc, #20]	; (8005680 <HAL_TIM_MspPostInit+0x48>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800566a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800566c:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800566e:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005670:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8005672:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005674:	f7fb fc78 	bl	8000f68 <HAL_GPIO_Init>
}
 8005678:	e7e4      	b.n	8005644 <HAL_TIM_MspPostInit+0xc>
 800567a:	46c0      	nop			; (mov r8, r8)
 800567c:	40012c00 	.word	0x40012c00
 8005680:	48000400 	.word	0x48000400

08005684 <NMI_Handler>:
 8005684:	4770      	bx	lr
 8005686:	46c0      	nop			; (mov r8, r8)

08005688 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8005688:	e7fe      	b.n	8005688 <HardFault_Handler>
 800568a:	46c0      	nop			; (mov r8, r8)

0800568c <SVC_Handler>:
 800568c:	4770      	bx	lr
 800568e:	46c0      	nop			; (mov r8, r8)

08005690 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005690:	4770      	bx	lr
 8005692:	46c0      	nop			; (mov r8, r8)

08005694 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8005694:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005696:	f7fa fecf 	bl	8000438 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800569a:	f7fb f9fb 	bl	8000a94 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800569e:	bd10      	pop	{r4, pc}

080056a0 <DMA1_Channel1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt.
*/
void DMA1_Channel1_IRQHandler(void)
{
 80056a0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80056a2:	4802      	ldr	r0, [pc, #8]	; (80056ac <DMA1_Channel1_IRQHandler+0xc>)
 80056a4:	f7fb fa6e 	bl	8000b84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80056a8:	bd10      	pop	{r4, pc}
 80056aa:	46c0      	nop			; (mov r8, r8)
 80056ac:	2000043c 	.word	0x2000043c

080056b0 <DMA1_Channel4_5_IRQHandler>:

/**
* @brief This function handles DMA1 channel 4 and 5 interrupts.
*/
void DMA1_Channel4_5_IRQHandler(void)
{
 80056b0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim15_ch1_up_trig_com);
 80056b2:	4803      	ldr	r0, [pc, #12]	; (80056c0 <DMA1_Channel4_5_IRQHandler+0x10>)
 80056b4:	f7fb fa66 	bl	8000b84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */
  transferComplete();
 80056b8:	f7fe ffe0 	bl	800467c <transferComplete>
  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 80056bc:	bd10      	pop	{r4, pc}
 80056be:	46c0      	nop			; (mov r8, r8)
 80056c0:	20000370 	.word	0x20000370

080056c4 <ADC1_COMP_IRQHandler>:

/**
* @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
*/
void ADC1_COMP_IRQHandler(void)
{
 80056c4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */
//	HAL_COMP_IRQHandler(&hcomp1);
  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80056c6:	4803      	ldr	r0, [pc, #12]	; (80056d4 <ADC1_COMP_IRQHandler+0x10>)
 80056c8:	f7fa ff82 	bl	80005d0 <HAL_ADC_IRQHandler>
  HAL_COMP_IRQHandler(&hcomp1);
 80056cc:	4802      	ldr	r0, [pc, #8]	; (80056d8 <ADC1_COMP_IRQHandler+0x14>)
 80056ce:	f7fb f961 	bl	8000994 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 80056d2:	bd10      	pop	{r4, pc}
 80056d4:	20000480 	.word	0x20000480
 80056d8:	200001f8 	.word	0x200001f8

080056dc <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 80056dc:	2101      	movs	r1, #1
 80056de:	4b11      	ldr	r3, [pc, #68]	; (8005724 <SystemInit+0x48>)

#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 80056e0:	4811      	ldr	r0, [pc, #68]	; (8005728 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	430a      	orrs	r2, r1
 80056e6:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 80056e8:	685a      	ldr	r2, [r3, #4]
 80056ea:	4002      	ands	r2, r0
 80056ec:	605a      	str	r2, [r3, #4]
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	480e      	ldr	r0, [pc, #56]	; (800572c <SystemInit+0x50>)
 80056f2:	4002      	ands	r2, r0
 80056f4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	480d      	ldr	r0, [pc, #52]	; (8005730 <SystemInit+0x54>)
 80056fa:	4002      	ands	r2, r0
 80056fc:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80056fe:	685a      	ldr	r2, [r3, #4]
 8005700:	480c      	ldr	r0, [pc, #48]	; (8005734 <SystemInit+0x58>)
 8005702:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8005704:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8005706:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8005708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800570a:	4382      	bics	r2, r0
 800570c:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
#elif defined (STM32F051x8) || defined (STM32F058xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
 800570e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005710:	4809      	ldr	r0, [pc, #36]	; (8005738 <SystemInit+0x5c>)
 8005712:	4002      	ands	r2, r0
 8005714:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8005716:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005718:	438a      	bics	r2, r1
 800571a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800571c:	2200      	movs	r2, #0
 800571e:	609a      	str	r2, [r3, #8]

}
 8005720:	4770      	bx	lr
 8005722:	46c0      	nop			; (mov r8, r8)
 8005724:	40021000 	.word	0x40021000
 8005728:	f8ffb80c 	.word	0xf8ffb80c
 800572c:	fef6ffff 	.word	0xfef6ffff
 8005730:	fffbffff 	.word	0xfffbffff
 8005734:	ffc0ffff 	.word	0xffc0ffff
 8005738:	fffffeac 	.word	0xfffffeac

0800573c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800573c:	480d      	ldr	r0, [pc, #52]	; (8005774 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800573e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005740:	480d      	ldr	r0, [pc, #52]	; (8005778 <LoopForever+0x6>)
  ldr r1, =_edata
 8005742:	490e      	ldr	r1, [pc, #56]	; (800577c <LoopForever+0xa>)
  ldr r2, =_sidata
 8005744:	4a0e      	ldr	r2, [pc, #56]	; (8005780 <LoopForever+0xe>)
  movs r3, #0
 8005746:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005748:	e002      	b.n	8005750 <LoopCopyDataInit>

0800574a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800574a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800574c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800574e:	3304      	adds	r3, #4

08005750 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005750:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005752:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005754:	d3f9      	bcc.n	800574a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005756:	4a0b      	ldr	r2, [pc, #44]	; (8005784 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005758:	4c0b      	ldr	r4, [pc, #44]	; (8005788 <LoopForever+0x16>)
  movs r3, #0
 800575a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800575c:	e001      	b.n	8005762 <LoopFillZerobss>

0800575e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800575e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005760:	3204      	adds	r2, #4

08005762 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005762:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005764:	d3fb      	bcc.n	800575e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005766:	f7ff ffb9 	bl	80056dc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800576a:	f000 f811 	bl	8005790 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800576e:	f7ff f8c1 	bl	80048f4 <main>

08005772 <LoopForever>:

LoopForever:
    b LoopForever
 8005772:	e7fe      	b.n	8005772 <LoopForever>
  ldr   r0, =_estack
 8005774:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8005778:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800577c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8005780:	08005844 	.word	0x08005844
  ldr r2, =_sbss
 8005784:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8005788:	200004cc 	.word	0x200004cc

0800578c <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800578c:	e7fe      	b.n	800578c <CEC_CAN_IRQHandler>
	...

08005790 <__libc_init_array>:
 8005790:	b570      	push	{r4, r5, r6, lr}
 8005792:	2600      	movs	r6, #0
 8005794:	4d0c      	ldr	r5, [pc, #48]	; (80057c8 <__libc_init_array+0x38>)
 8005796:	4c0d      	ldr	r4, [pc, #52]	; (80057cc <__libc_init_array+0x3c>)
 8005798:	1b64      	subs	r4, r4, r5
 800579a:	10a4      	asrs	r4, r4, #2
 800579c:	42a6      	cmp	r6, r4
 800579e:	d109      	bne.n	80057b4 <__libc_init_array+0x24>
 80057a0:	2600      	movs	r6, #0
 80057a2:	f000 f819 	bl	80057d8 <_init>
 80057a6:	4d0a      	ldr	r5, [pc, #40]	; (80057d0 <__libc_init_array+0x40>)
 80057a8:	4c0a      	ldr	r4, [pc, #40]	; (80057d4 <__libc_init_array+0x44>)
 80057aa:	1b64      	subs	r4, r4, r5
 80057ac:	10a4      	asrs	r4, r4, #2
 80057ae:	42a6      	cmp	r6, r4
 80057b0:	d105      	bne.n	80057be <__libc_init_array+0x2e>
 80057b2:	bd70      	pop	{r4, r5, r6, pc}
 80057b4:	00b3      	lsls	r3, r6, #2
 80057b6:	58eb      	ldr	r3, [r5, r3]
 80057b8:	4798      	blx	r3
 80057ba:	3601      	adds	r6, #1
 80057bc:	e7ee      	b.n	800579c <__libc_init_array+0xc>
 80057be:	00b3      	lsls	r3, r6, #2
 80057c0:	58eb      	ldr	r3, [r5, r3]
 80057c2:	4798      	blx	r3
 80057c4:	3601      	adds	r6, #1
 80057c6:	e7f2      	b.n	80057ae <__libc_init_array+0x1e>
 80057c8:	0800583c 	.word	0x0800583c
 80057cc:	0800583c 	.word	0x0800583c
 80057d0:	0800583c 	.word	0x0800583c
 80057d4:	08005840 	.word	0x08005840

080057d8 <_init>:
 80057d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057da:	46c0      	nop			; (mov r8, r8)
 80057dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057de:	bc08      	pop	{r3}
 80057e0:	469e      	mov	lr, r3
 80057e2:	4770      	bx	lr

080057e4 <_fini>:
 80057e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057e6:	46c0      	nop			; (mov r8, r8)
 80057e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ea:	bc08      	pop	{r3}
 80057ec:	469e      	mov	lr, r3
 80057ee:	4770      	bx	lr
