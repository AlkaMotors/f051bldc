
f051bldc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005734  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080057f4  080057f4  000157f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005840  08005840  00015840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005844  08005844  00015844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000064  20000000  08005848  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000045c  20000068  080058ac  00020068  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  200004c4  080058ac  000204c4  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001b2d9  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000367f  00000000  00000000  0003b365  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000f0b0  00000000  00000000  0003e9e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000a48  00000000  00000000  0004da98  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000025a8  00000000  00000000  0004e4e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007e0f  00000000  00000000  00050a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000401d  00000000  00000000  00058897  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0005c8b4  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001e04  00000000  00000000  0005c930  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080057dc 	.word	0x080057dc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	080057dc 	.word	0x080057dc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003f4:	b510      	push	{r4, lr}
 80003f6:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 80003f8:	f001 f9de 	bl	80017b8 <HAL_RCC_GetHCLKFreq>
 80003fc:	21fa      	movs	r1, #250	; 0xfa
 80003fe:	0089      	lsls	r1, r1, #2
 8000400:	f7ff fe82 	bl	8000108 <__udivsi3>
 8000404:	f000 fb1a 	bl	8000a3c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000408:	2001      	movs	r0, #1
 800040a:	2200      	movs	r2, #0
 800040c:	0021      	movs	r1, r4
 800040e:	4240      	negs	r0, r0
 8000410:	f000 fad6 	bl	80009c0 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000414:	2000      	movs	r0, #0
 8000416:	bd10      	pop	{r4, pc}

08000418 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000418:	2110      	movs	r1, #16
 800041a:	4a06      	ldr	r2, [pc, #24]	; (8000434 <HAL_Init+0x1c>)
{
 800041c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800041e:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000420:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000422:	430b      	orrs	r3, r1
 8000424:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000426:	f7ff ffe5 	bl	80003f4 <HAL_InitTick>
  HAL_MspInit();
 800042a:	f004 ffe1 	bl	80053f0 <HAL_MspInit>
}
 800042e:	2000      	movs	r0, #0
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			; (mov r8, r8)
 8000434:	40022000 	.word	0x40022000

08000438 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000438:	4a02      	ldr	r2, [pc, #8]	; (8000444 <HAL_IncTick+0xc>)
 800043a:	6813      	ldr	r3, [r2, #0]
 800043c:	3301      	adds	r3, #1
 800043e:	6013      	str	r3, [r2, #0]
}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	20000164 	.word	0x20000164

08000448 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000448:	4b01      	ldr	r3, [pc, #4]	; (8000450 <HAL_GetTick+0x8>)
 800044a:	6818      	ldr	r0, [r3, #0]
}
 800044c:	4770      	bx	lr
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	20000164 	.word	0x20000164

08000454 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000454:	b530      	push	{r4, r5, lr}
 8000456:	b083      	sub	sp, #12
 8000458:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 800045a:	f7ff fff5 	bl	8000448 <HAL_GetTick>
  uint32_t wait = Delay;
 800045e:	9c01      	ldr	r4, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000460:	0005      	movs	r5, r0
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
     wait++;
 8000462:	1c63      	adds	r3, r4, #1
 8000464:	1e5a      	subs	r2, r3, #1
 8000466:	4193      	sbcs	r3, r2
 8000468:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800046a:	f7ff ffed 	bl	8000448 <HAL_GetTick>
 800046e:	1b40      	subs	r0, r0, r5
 8000470:	42a0      	cmp	r0, r4
 8000472:	d3fa      	bcc.n	800046a <HAL_Delay+0x16>
  {
  }
}
 8000474:	b003      	add	sp, #12
 8000476:	bd30      	pop	{r4, r5, pc}

08000478 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800047a:	1e04      	subs	r4, r0, #0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0U;

  /* Check ADC handle */
  if(hadc == NULL)
 800047c:	d100      	bne.n	8000480 <HAL_ADC_Init+0x8>
 800047e:	e080      	b.n	8000582 <HAL_ADC_Init+0x10a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000480:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000482:	2b00      	cmp	r3, #0
 8000484:	d067      	beq.n	8000556 <HAL_ADC_Init+0xde>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000486:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000488:	06db      	lsls	r3, r3, #27
 800048a:	d45e      	bmi.n	800054a <HAL_ADC_Init+0xd2>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800048c:	2004      	movs	r0, #4
 800048e:	6823      	ldr	r3, [r4, #0]
 8000490:	689a      	ldr	r2, [r3, #8]
 8000492:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000494:	d159      	bne.n	800054a <HAL_ADC_Init+0xd2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000496:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000498:	4948      	ldr	r1, [pc, #288]	; (80005bc <HAL_ADC_Init+0x144>)
 800049a:	400a      	ands	r2, r1
 800049c:	3106      	adds	r1, #6
 800049e:	31ff      	adds	r1, #255	; 0xff
 80004a0:	430a      	orrs	r2, r1
 80004a2:	6462      	str	r2, [r4, #68]	; 0x44
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80004a4:	2203      	movs	r2, #3
 80004a6:	6899      	ldr	r1, [r3, #8]
 80004a8:	400a      	ands	r2, r1
 80004aa:	2a01      	cmp	r2, #1
 80004ac:	d059      	beq.n	8000562 <HAL_ADC_Init+0xea>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80004ae:	2118      	movs	r1, #24
 80004b0:	68da      	ldr	r2, [r3, #12]
 80004b2:	438a      	bics	r2, r1
 80004b4:	68a1      	ldr	r1, [r4, #8]
 80004b6:	430a      	orrs	r2, r1
 80004b8:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80004ba:	691a      	ldr	r2, [r3, #16]
 80004bc:	6861      	ldr	r1, [r4, #4]
 80004be:	0092      	lsls	r2, r2, #2
 80004c0:	0892      	lsrs	r2, r2, #2
 80004c2:	430a      	orrs	r2, r1
 80004c4:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80004c6:	68da      	ldr	r2, [r3, #12]
 80004c8:	493d      	ldr	r1, [pc, #244]	; (80005c0 <HAL_ADC_Init+0x148>)
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80004ca:	6a26      	ldr	r6, [r4, #32]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80004cc:	400a      	ands	r2, r1
 80004ce:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80004d0:	69a2      	ldr	r2, [r4, #24]
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80004d2:	0377      	lsls	r7, r6, #13
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80004d4:	0391      	lsls	r1, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 80004d6:	69e2      	ldr	r2, [r4, #28]
 80004d8:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80004da:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 80004dc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80004de:	3a01      	subs	r2, #1
 80004e0:	1e55      	subs	r5, r2, #1
 80004e2:	41aa      	sbcs	r2, r5
 80004e4:	0315      	lsls	r5, r2, #12
 80004e6:	68e2      	ldr	r2, [r4, #12]
 80004e8:	4311      	orrs	r1, r2
                 hadc->Init.DataAlign                                   |
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80004ea:	6922      	ldr	r2, [r4, #16]
 80004ec:	4339      	orrs	r1, r7
 80004ee:	2a02      	cmp	r2, #2
 80004f0:	d059      	beq.n	80005a6 <HAL_ADC_Init+0x12e>
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 80004f2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80004f4:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80004f6:	430a      	orrs	r2, r1
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80004f8:	6a61      	ldr	r1, [r4, #36]	; 0x24
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80004fa:	432a      	orrs	r2, r5
 80004fc:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80004fe:	2901      	cmp	r1, #1
 8000500:	d04b      	beq.n	800059a <HAL_ADC_Init+0x122>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000502:	20c2      	movs	r0, #194	; 0xc2
 8000504:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000506:	30ff      	adds	r0, #255	; 0xff
 8000508:	4281      	cmp	r1, r0
 800050a:	d002      	beq.n	8000512 <HAL_ADC_Init+0x9a>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800050c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800050e:	4301      	orrs	r1, r0
 8000510:	430a      	orrs	r2, r1
                    hadc->Init.ExternalTrigConvEdge );
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000512:	68d9      	ldr	r1, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000514:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000516:	4311      	orrs	r1, r2
 8000518:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800051a:	2180      	movs	r1, #128	; 0x80
 800051c:	0549      	lsls	r1, r1, #21
 800051e:	428d      	cmp	r5, r1
 8000520:	d026      	beq.n	8000570 <HAL_ADC_Init+0xf8>
 8000522:	1e69      	subs	r1, r5, #1
 8000524:	2906      	cmp	r1, #6
 8000526:	d923      	bls.n	8000570 <HAL_ADC_Init+0xf8>
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000528:	68db      	ldr	r3, [r3, #12]
 800052a:	4926      	ldr	r1, [pc, #152]	; (80005c4 <HAL_ADC_Init+0x14c>)
 800052c:	400b      	ands	r3, r1
 800052e:	429a      	cmp	r2, r3
 8000530:	d029      	beq.n	8000586 <HAL_ADC_Init+0x10e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000532:	2212      	movs	r2, #18
 8000534:	6c63      	ldr	r3, [r4, #68]	; 0x44
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
      
      tmp_hal_status = HAL_ERROR;
 8000536:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8000538:	4393      	bics	r3, r2
 800053a:	3a02      	subs	r2, #2
 800053c:	4313      	orrs	r3, r2
 800053e:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000540:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000542:	3a0f      	subs	r2, #15
 8000544:	4313      	orrs	r3, r2
 8000546:	64a3      	str	r3, [r4, #72]	; 0x48
 8000548:	e004      	b.n	8000554 <HAL_ADC_Init+0xdc>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800054a:	2210      	movs	r2, #16
        
    tmp_hal_status = HAL_ERROR;
 800054c:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800054e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000550:	4313      	orrs	r3, r2
 8000552:	6463      	str	r3, [r4, #68]	; 0x44
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8000554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hadc->Lock = HAL_UNLOCKED;
 8000556:	2240      	movs	r2, #64	; 0x40
    ADC_CLEAR_ERRORCODE(hadc);
 8000558:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 800055a:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 800055c:	f004 ff6a 	bl	8005434 <HAL_ADC_MspInit>
 8000560:	e791      	b.n	8000486 <HAL_ADC_Init+0xe>
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000562:	6819      	ldr	r1, [r3, #0]
 8000564:	420a      	tst	r2, r1
 8000566:	d1ae      	bne.n	80004c6 <HAL_ADC_Init+0x4e>
 8000568:	68da      	ldr	r2, [r3, #12]
 800056a:	0412      	lsls	r2, r2, #16
 800056c:	d59f      	bpl.n	80004ae <HAL_ADC_Init+0x36>
 800056e:	e7aa      	b.n	80004c6 <HAL_ADC_Init+0x4e>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000570:	2107      	movs	r1, #7
 8000572:	6958      	ldr	r0, [r3, #20]
 8000574:	4388      	bics	r0, r1
 8000576:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000578:	6958      	ldr	r0, [r3, #20]
 800057a:	4029      	ands	r1, r5
 800057c:	4301      	orrs	r1, r0
 800057e:	6159      	str	r1, [r3, #20]
 8000580:	e7d2      	b.n	8000528 <HAL_ADC_Init+0xb0>
    return HAL_ERROR;
 8000582:	2001      	movs	r0, #1
 8000584:	e7e6      	b.n	8000554 <HAL_ADC_Init+0xdc>
      ADC_CLEAR_ERRORCODE(hadc);
 8000586:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 8000588:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 800058a:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 800058c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800058e:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8000590:	4393      	bics	r3, r2
 8000592:	3a02      	subs	r2, #2
 8000594:	4313      	orrs	r3, r2
 8000596:	6463      	str	r3, [r4, #68]	; 0x44
 8000598:	e7dc      	b.n	8000554 <HAL_ADC_Init+0xdc>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800059a:	2e00      	cmp	r6, #0
 800059c:	d105      	bne.n	80005aa <HAL_ADC_Init+0x132>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800059e:	2180      	movs	r1, #128	; 0x80
 80005a0:	0249      	lsls	r1, r1, #9
 80005a2:	430a      	orrs	r2, r1
 80005a4:	e7ad      	b.n	8000502 <HAL_ADC_Init+0x8a>
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80005a6:	2004      	movs	r0, #4
 80005a8:	e7a3      	b.n	80004f2 <HAL_ADC_Init+0x7a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80005aa:	2520      	movs	r5, #32
 80005ac:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80005ae:	4328      	orrs	r0, r5
 80005b0:	6460      	str	r0, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80005b2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80005b4:	4301      	orrs	r1, r0
 80005b6:	64a1      	str	r1, [r4, #72]	; 0x48
 80005b8:	e7a3      	b.n	8000502 <HAL_ADC_Init+0x8a>
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	fffffefd 	.word	0xfffffefd
 80005c0:	fffe0219 	.word	0xfffe0219
 80005c4:	833fffe7 	.word	0x833fffe7

080005c8 <HAL_ADC_LevelOutOfWindowCallback>:
 80005c8:	4770      	bx	lr
 80005ca:	46c0      	nop			; (mov r8, r8)

080005cc <HAL_ADC_ErrorCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80005cc:	4770      	bx	lr
 80005ce:	46c0      	nop			; (mov r8, r8)

080005d0 <HAL_ADC_IRQHandler>:
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80005d0:	2204      	movs	r2, #4
 80005d2:	6803      	ldr	r3, [r0, #0]
{
 80005d4:	b570      	push	{r4, r5, r6, lr}
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80005d6:	6819      	ldr	r1, [r3, #0]
{
 80005d8:	0004      	movs	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80005da:	420a      	tst	r2, r1
 80005dc:	d04a      	beq.n	8000674 <HAL_ADC_IRQHandler+0xa4>
 80005de:	6859      	ldr	r1, [r3, #4]
 80005e0:	420a      	tst	r2, r1
 80005e2:	d047      	beq.n	8000674 <HAL_ADC_IRQHandler+0xa4>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80005e4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80005e6:	06d2      	lsls	r2, r2, #27
 80005e8:	d404      	bmi.n	80005f4 <HAL_ADC_IRQHandler+0x24>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80005ea:	2280      	movs	r2, #128	; 0x80
 80005ec:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80005ee:	0092      	lsls	r2, r2, #2
 80005f0:	430a      	orrs	r2, r1
 80005f2:	6462      	str	r2, [r4, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80005f4:	22c0      	movs	r2, #192	; 0xc0
 80005f6:	68d9      	ldr	r1, [r3, #12]
 80005f8:	0112      	lsls	r2, r2, #4
 80005fa:	4211      	tst	r1, r2
 80005fc:	d113      	bne.n	8000626 <HAL_ADC_IRQHandler+0x56>
 80005fe:	6a22      	ldr	r2, [r4, #32]
 8000600:	2a00      	cmp	r2, #0
 8000602:	d110      	bne.n	8000626 <HAL_ADC_IRQHandler+0x56>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	0712      	lsls	r2, r2, #28
 8000608:	d50d      	bpl.n	8000626 <HAL_ADC_IRQHandler+0x56>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800060a:	689a      	ldr	r2, [r3, #8]
 800060c:	0752      	lsls	r2, r2, #29
 800060e:	d444      	bmi.n	800069a <HAL_ADC_IRQHandler+0xca>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000610:	210c      	movs	r1, #12
 8000612:	685a      	ldr	r2, [r3, #4]
 8000614:	438a      	bics	r2, r1
 8000616:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8000618:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800061a:	4a24      	ldr	r2, [pc, #144]	; (80006ac <HAL_ADC_IRQHandler+0xdc>)
 800061c:	4013      	ands	r3, r2
 800061e:	3204      	adds	r2, #4
 8000620:	32ff      	adds	r2, #255	; 0xff
 8000622:	4313      	orrs	r3, r2
 8000624:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ConvCpltCallback(hadc);
 8000626:	0020      	movs	r0, r4
 8000628:	f003 fd12 	bl	8004050 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800062c:	220c      	movs	r2, #12
 800062e:	6823      	ldr	r3, [r4, #0]
 8000630:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000632:	2580      	movs	r5, #128	; 0x80
 8000634:	681a      	ldr	r2, [r3, #0]
 8000636:	4215      	tst	r5, r2
 8000638:	d002      	beq.n	8000640 <HAL_ADC_IRQHandler+0x70>
 800063a:	685a      	ldr	r2, [r3, #4]
 800063c:	4215      	tst	r5, r2
 800063e:	d121      	bne.n	8000684 <HAL_ADC_IRQHandler+0xb4>
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8000640:	2210      	movs	r2, #16
 8000642:	6819      	ldr	r1, [r3, #0]
 8000644:	420a      	tst	r2, r1
 8000646:	d014      	beq.n	8000672 <HAL_ADC_IRQHandler+0xa2>
 8000648:	6859      	ldr	r1, [r3, #4]
 800064a:	420a      	tst	r2, r1
 800064c:	d011      	beq.n	8000672 <HAL_ADC_IRQHandler+0xa2>
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800064e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000650:	2a01      	cmp	r2, #1
 8000652:	d002      	beq.n	800065a <HAL_ADC_IRQHandler+0x8a>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8000654:	68da      	ldr	r2, [r3, #12]
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8000656:	07d2      	lsls	r2, r2, #31
 8000658:	d509      	bpl.n	800066e <HAL_ADC_IRQHandler+0x9e>
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800065a:	2102      	movs	r1, #2
 800065c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
      HAL_ADC_ErrorCallback(hadc);
 800065e:	0020      	movs	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000660:	430a      	orrs	r2, r1
 8000662:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000664:	2210      	movs	r2, #16
 8000666:	601a      	str	r2, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 8000668:	f7ff ffb0 	bl	80005cc <HAL_ADC_ErrorCallback>
 800066c:	6823      	ldr	r3, [r4, #0]
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800066e:	2210      	movs	r2, #16
 8000670:	601a      	str	r2, [r3, #0]
}
 8000672:	bd70      	pop	{r4, r5, r6, pc}
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000674:	2208      	movs	r2, #8
 8000676:	6819      	ldr	r1, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000678:	420a      	tst	r2, r1
 800067a:	d0da      	beq.n	8000632 <HAL_ADC_IRQHandler+0x62>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800067c:	6859      	ldr	r1, [r3, #4]
 800067e:	420a      	tst	r2, r1
 8000680:	d0d7      	beq.n	8000632 <HAL_ADC_IRQHandler+0x62>
 8000682:	e7af      	b.n	80005e4 <HAL_ADC_IRQHandler+0x14>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000684:	2380      	movs	r3, #128	; 0x80
 8000686:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000688:	025b      	lsls	r3, r3, #9
 800068a:	4313      	orrs	r3, r2
 800068c:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800068e:	0020      	movs	r0, r4
 8000690:	f7ff ff9a 	bl	80005c8 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000694:	6823      	ldr	r3, [r4, #0]
 8000696:	601d      	str	r5, [r3, #0]
 8000698:	e7d2      	b.n	8000640 <HAL_ADC_IRQHandler+0x70>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800069a:	2220      	movs	r2, #32
 800069c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800069e:	4313      	orrs	r3, r2
 80006a0:	6463      	str	r3, [r4, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80006a2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80006a4:	3a1f      	subs	r2, #31
 80006a6:	4313      	orrs	r3, r2
 80006a8:	64a3      	str	r3, [r4, #72]	; 0x48
 80006aa:	e7bc      	b.n	8000626 <HAL_ADC_IRQHandler+0x56>
 80006ac:	fffffefe 	.word	0xfffffefe

080006b0 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80006b0:	2300      	movs	r3, #0
{
 80006b2:	b570      	push	{r4, r5, r6, lr}
 80006b4:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 80006b6:	9301      	str	r3, [sp, #4]
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80006b8:	3340      	adds	r3, #64	; 0x40
 80006ba:	5cc2      	ldrb	r2, [r0, r3]
{
 80006bc:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80006be:	2002      	movs	r0, #2
 80006c0:	2a01      	cmp	r2, #1
 80006c2:	d03c      	beq.n	800073e <HAL_ADC_ConfigChannel+0x8e>
 80006c4:	2201      	movs	r2, #1
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80006c6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  __HAL_LOCK(hadc);
 80006c8:	54e2      	strb	r2, [r4, r3]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80006ca:	6823      	ldr	r3, [r4, #0]
 80006cc:	689d      	ldr	r5, [r3, #8]
 80006ce:	076d      	lsls	r5, r5, #29
 80006d0:	d42d      	bmi.n	800072e <HAL_ADC_ConfigChannel+0x7e>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80006d2:	4d35      	ldr	r5, [pc, #212]	; (80007a8 <HAL_ADC_ConfigChannel+0xf8>)
 80006d4:	684e      	ldr	r6, [r1, #4]
 80006d6:	42ae      	cmp	r6, r5
 80006d8:	d033      	beq.n	8000742 <HAL_ADC_ConfigChannel+0x92>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80006da:	680d      	ldr	r5, [r1, #0]
 80006dc:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 80006de:	40aa      	lsls	r2, r5
 80006e0:	4332      	orrs	r2, r6
 80006e2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80006e4:	2280      	movs	r2, #128	; 0x80
 80006e6:	0552      	lsls	r2, r2, #21
 80006e8:	4290      	cmp	r0, r2
 80006ea:	d00f      	beq.n	800070c <HAL_ADC_ConfigChannel+0x5c>
 80006ec:	3801      	subs	r0, #1
 80006ee:	2806      	cmp	r0, #6
 80006f0:	d90c      	bls.n	800070c <HAL_ADC_ConfigChannel+0x5c>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80006f2:	2207      	movs	r2, #7
 80006f4:	6888      	ldr	r0, [r1, #8]
 80006f6:	6959      	ldr	r1, [r3, #20]
 80006f8:	4011      	ands	r1, r2
 80006fa:	4288      	cmp	r0, r1
 80006fc:	d006      	beq.n	800070c <HAL_ADC_ConfigChannel+0x5c>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80006fe:	6959      	ldr	r1, [r3, #20]
 8000700:	4391      	bics	r1, r2
 8000702:	6159      	str	r1, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000704:	6959      	ldr	r1, [r3, #20]
 8000706:	4002      	ands	r2, r0
 8000708:	430a      	orrs	r2, r1
 800070a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800070c:	002b      	movs	r3, r5
 800070e:	3b10      	subs	r3, #16
 8000710:	2b02      	cmp	r3, #2
 8000712:	d829      	bhi.n	8000768 <HAL_ADC_ConfigChannel+0xb8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000714:	4a25      	ldr	r2, [pc, #148]	; (80007ac <HAL_ADC_ConfigChannel+0xfc>)
 8000716:	6813      	ldr	r3, [r2, #0]
 8000718:	2d10      	cmp	r5, #16
 800071a:	d027      	beq.n	800076c <HAL_ADC_ConfigChannel+0xbc>
 800071c:	2280      	movs	r2, #128	; 0x80
 800071e:	2d11      	cmp	r5, #17
 8000720:	d03c      	beq.n	800079c <HAL_ADC_ConfigChannel+0xec>
 8000722:	0452      	lsls	r2, r2, #17
 8000724:	4313      	orrs	r3, r2
 8000726:	4a21      	ldr	r2, [pc, #132]	; (80007ac <HAL_ADC_ConfigChannel+0xfc>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000728:	2000      	movs	r0, #0
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800072a:	6013      	str	r3, [r2, #0]
 800072c:	e004      	b.n	8000738 <HAL_ADC_ConfigChannel+0x88>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800072e:	2220      	movs	r2, #32
    
    tmp_hal_status = HAL_ERROR;
 8000730:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000732:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000734:	4313      	orrs	r3, r2
 8000736:	6463      	str	r3, [r4, #68]	; 0x44
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000738:	2200      	movs	r2, #0
 800073a:	2340      	movs	r3, #64	; 0x40
 800073c:	54e2      	strb	r2, [r4, r3]
  
  /* Return function status */
  return tmp_hal_status;
}
 800073e:	b002      	add	sp, #8
 8000740:	bd70      	pop	{r4, r5, r6, pc}
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000742:	6809      	ldr	r1, [r1, #0]
 8000744:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000746:	408a      	lsls	r2, r1
 8000748:	4390      	bics	r0, r2
 800074a:	6298      	str	r0, [r3, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800074c:	000b      	movs	r3, r1
 800074e:	3b10      	subs	r3, #16
 8000750:	2b02      	cmp	r3, #2
 8000752:	d809      	bhi.n	8000768 <HAL_ADC_ConfigChannel+0xb8>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000754:	4b15      	ldr	r3, [pc, #84]	; (80007ac <HAL_ADC_ConfigChannel+0xfc>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2910      	cmp	r1, #16
 800075a:	d021      	beq.n	80007a0 <HAL_ADC_ConfigChannel+0xf0>
 800075c:	2911      	cmp	r1, #17
 800075e:	d021      	beq.n	80007a4 <HAL_ADC_ConfigChannel+0xf4>
 8000760:	4a13      	ldr	r2, [pc, #76]	; (80007b0 <HAL_ADC_ConfigChannel+0x100>)
 8000762:	4013      	ands	r3, r2
 8000764:	4a11      	ldr	r2, [pc, #68]	; (80007ac <HAL_ADC_ConfigChannel+0xfc>)
 8000766:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000768:	2000      	movs	r0, #0
 800076a:	e7e5      	b.n	8000738 <HAL_ADC_ConfigChannel+0x88>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800076c:	2180      	movs	r1, #128	; 0x80
 800076e:	0409      	lsls	r1, r1, #16
 8000770:	430b      	orrs	r3, r1
 8000772:	6013      	str	r3, [r2, #0]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000774:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <HAL_ADC_ConfigChannel+0x104>)
 8000776:	4910      	ldr	r1, [pc, #64]	; (80007b8 <HAL_ADC_ConfigChannel+0x108>)
 8000778:	6818      	ldr	r0, [r3, #0]
 800077a:	f7ff fcc5 	bl	8000108 <__udivsi3>
 800077e:	0083      	lsls	r3, r0, #2
 8000780:	1818      	adds	r0, r3, r0
 8000782:	0040      	lsls	r0, r0, #1
 8000784:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 8000786:	9b01      	ldr	r3, [sp, #4]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d0ed      	beq.n	8000768 <HAL_ADC_ConfigChannel+0xb8>
            wait_loop_index--;
 800078c:	9b01      	ldr	r3, [sp, #4]
 800078e:	3b01      	subs	r3, #1
 8000790:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000792:	9b01      	ldr	r3, [sp, #4]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d1f9      	bne.n	800078c <HAL_ADC_ConfigChannel+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000798:	2000      	movs	r0, #0
 800079a:	e7cd      	b.n	8000738 <HAL_ADC_ConfigChannel+0x88>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800079c:	03d2      	lsls	r2, r2, #15
 800079e:	e7c1      	b.n	8000724 <HAL_ADC_ConfigChannel+0x74>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80007a0:	4a06      	ldr	r2, [pc, #24]	; (80007bc <HAL_ADC_ConfigChannel+0x10c>)
 80007a2:	e7de      	b.n	8000762 <HAL_ADC_ConfigChannel+0xb2>
 80007a4:	4a06      	ldr	r2, [pc, #24]	; (80007c0 <HAL_ADC_ConfigChannel+0x110>)
 80007a6:	e7dc      	b.n	8000762 <HAL_ADC_ConfigChannel+0xb2>
 80007a8:	00001001 	.word	0x00001001
 80007ac:	40012708 	.word	0x40012708
 80007b0:	feffffff 	.word	0xfeffffff
 80007b4:	20000060 	.word	0x20000060
 80007b8:	000f4240 	.word	0x000f4240
 80007bc:	ff7fffff 	.word	0xff7fffff
 80007c0:	ffbfffff 	.word	0xffbfffff

080007c4 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80007c4:	b570      	push	{r4, r5, r6, lr}
 80007c6:	0004      	movs	r4, r0
 80007c8:	b082      	sub	sp, #8
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t regshift = COMP_CSR_COMP1_SHIFT;
  
  /* Check the COMP handle allocation and lock status */
  if((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 80007ca:	2800      	cmp	r0, #0
 80007cc:	d03b      	beq.n	8000846 <HAL_COMP_Init+0x82>
 80007ce:	6a83      	ldr	r3, [r0, #40]	; 0x28
  {
    status = HAL_ERROR;
 80007d0:	2001      	movs	r0, #1
  if((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 80007d2:	06db      	lsls	r3, r3, #27
 80007d4:	d501      	bpl.n	80007da <HAL_COMP_Init+0x16>
    /* Initialize the COMP state*/
    hcomp->State = HAL_COMP_STATE_READY;
  }
  
  return status;
}
 80007d6:	b002      	add	sp, #8
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SYSCFG_CLK_ENABLE();  
 80007da:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <HAL_COMP_Init+0x8c>)
 80007dc:	699a      	ldr	r2, [r3, #24]
 80007de:	4302      	orrs	r2, r0
 80007e0:	619a      	str	r2, [r3, #24]
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4018      	ands	r0, r3
 80007e6:	9001      	str	r0, [sp, #4]
    HAL_COMP_MspInit(hcomp);
 80007e8:	0020      	movs	r0, r4
    __HAL_RCC_SYSCFG_CLK_ENABLE();  
 80007ea:	9b01      	ldr	r3, [sp, #4]
    HAL_COMP_MspInit(hcomp);
 80007ec:	f004 fe70 	bl	80054d0 <HAL_COMP_MspInit>
    if(hcomp->State == HAL_COMP_STATE_RESET)
 80007f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d024      	beq.n	8000840 <HAL_COMP_Init+0x7c>
    hcomp->State = HAL_COMP_STATE_BUSY;
 80007f6:	2302      	movs	r3, #2
    if(hcomp->Instance == COMP2)
 80007f8:	6822      	ldr	r2, [r4, #0]
    hcomp->State = HAL_COMP_STATE_BUSY;
 80007fa:	62a3      	str	r3, [r4, #40]	; 0x28
    if(hcomp->Instance == COMP2)
 80007fc:	4b15      	ldr	r3, [pc, #84]	; (8000854 <HAL_COMP_Init+0x90>)
 80007fe:	429a      	cmp	r2, r3
 8000800:	d023      	beq.n	800084a <HAL_COMP_Init+0x86>
  uint32_t regshift = COMP_CSR_COMP1_SHIFT;
 8000802:	2500      	movs	r5, #0
    if(hcomp->Instance == COMP2)
 8000804:	4914      	ldr	r1, [pc, #80]	; (8000858 <HAL_COMP_Init+0x94>)
    MODIFY_REG(COMP->CSR, 
 8000806:	68a6      	ldr	r6, [r4, #8]
 8000808:	6863      	ldr	r3, [r4, #4]
 800080a:	4a14      	ldr	r2, [pc, #80]	; (800085c <HAL_COMP_Init+0x98>)
 800080c:	4333      	orrs	r3, r6
 800080e:	68e6      	ldr	r6, [r4, #12]
 8000810:	6810      	ldr	r0, [r2, #0]
 8000812:	4333      	orrs	r3, r6
 8000814:	6926      	ldr	r6, [r4, #16]
 8000816:	4001      	ands	r1, r0
 8000818:	4333      	orrs	r3, r6
 800081a:	6966      	ldr	r6, [r4, #20]
 800081c:	4333      	orrs	r3, r6
 800081e:	69a6      	ldr	r6, [r4, #24]
 8000820:	4333      	orrs	r3, r6
 8000822:	40ab      	lsls	r3, r5
 8000824:	430b      	orrs	r3, r1
 8000826:	6013      	str	r3, [r2, #0]
    if(hcomp->Init.WindowMode != COMP_WINDOWMODE_DISABLE)
 8000828:	69e3      	ldr	r3, [r4, #28]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d004      	beq.n	8000838 <HAL_COMP_Init+0x74>
      COMP->CSR |= COMP_CSR_WNDWEN;
 800082e:	2380      	movs	r3, #128	; 0x80
 8000830:	6811      	ldr	r1, [r2, #0]
 8000832:	041b      	lsls	r3, r3, #16
 8000834:	430b      	orrs	r3, r1
 8000836:	6013      	str	r3, [r2, #0]
    hcomp->State = HAL_COMP_STATE_READY;
 8000838:	2301      	movs	r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 800083a:	2000      	movs	r0, #0
    hcomp->State = HAL_COMP_STATE_READY;
 800083c:	62a3      	str	r3, [r4, #40]	; 0x28
 800083e:	e7ca      	b.n	80007d6 <HAL_COMP_Init+0x12>
      hcomp->Lock = HAL_UNLOCKED;
 8000840:	2224      	movs	r2, #36	; 0x24
 8000842:	54a3      	strb	r3, [r4, r2]
 8000844:	e7d7      	b.n	80007f6 <HAL_COMP_Init+0x32>
    status = HAL_ERROR;
 8000846:	2001      	movs	r0, #1
 8000848:	e7c5      	b.n	80007d6 <HAL_COMP_Init+0x12>
 800084a:	4905      	ldr	r1, [pc, #20]	; (8000860 <HAL_COMP_Init+0x9c>)
      regshift = COMP_CSR_COMP2_SHIFT;
 800084c:	2510      	movs	r5, #16
 800084e:	e7da      	b.n	8000806 <HAL_COMP_Init+0x42>
 8000850:	40021000 	.word	0x40021000
 8000854:	4001001e 	.word	0x4001001e
 8000858:	ffffc081 	.word	0xffffc081
 800085c:	4001001c 	.word	0x4001001c
 8000860:	c081ffff 	.word	0xc081ffff

08000864 <HAL_COMP_Start_IT>:
  * @brief  Enables the interrupt and starts the comparator
  * @param  hcomp COMP handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_COMP_Start_IT(COMP_HandleTypeDef *hcomp)
{
 8000864:	b510      	push	{r4, lr}
 8000866:	1e03      	subs	r3, r0, #0
  if((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8000868:	d034      	beq.n	80008d4 <HAL_COMP_Start_IT+0x70>
 800086a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800086c:	2001      	movs	r0, #1
 800086e:	06d2      	lsls	r2, r2, #27
 8000870:	d402      	bmi.n	8000878 <HAL_COMP_Start_IT+0x14>
    if(hcomp->State == HAL_COMP_STATE_READY)
 8000872:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8000874:	2c01      	cmp	r4, #1
 8000876:	d000      	beq.n	800087a <HAL_COMP_Start_IT+0x16>
    /* Enable Exti interrupt mode */
    SET_BIT(EXTI->IMR, extiline);
  }

  return status;
}
 8000878:	bd10      	pop	{r4, pc}
      if(hcomp->Instance == COMP2)
 800087a:	6818      	ldr	r0, [r3, #0]
 800087c:	4a1e      	ldr	r2, [pc, #120]	; (80008f8 <HAL_COMP_Start_IT+0x94>)
 800087e:	4290      	cmp	r0, r2
 8000880:	d02e      	beq.n	80008e0 <HAL_COMP_Start_IT+0x7c>
      SET_BIT(COMP->CSR, COMP_CSR_COMPxEN << regshift);
 8000882:	4a1e      	ldr	r2, [pc, #120]	; (80008fc <HAL_COMP_Start_IT+0x98>)
 8000884:	6811      	ldr	r1, [r2, #0]
 8000886:	4321      	orrs	r1, r4
 8000888:	6011      	str	r1, [r2, #0]
      hcomp->State = HAL_COMP_STATE_BUSY;
 800088a:	2102      	movs	r1, #2
 800088c:	6299      	str	r1, [r3, #40]	; 0x28
    extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 800088e:	4290      	cmp	r0, r2
 8000890:	d022      	beq.n	80008d8 <HAL_COMP_Start_IT+0x74>
 8000892:	2180      	movs	r1, #128	; 0x80
 8000894:	4a1a      	ldr	r2, [pc, #104]	; (8000900 <HAL_COMP_Start_IT+0x9c>)
 8000896:	03c9      	lsls	r1, r1, #15
    if((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_IT_RISING) != RESET)
 8000898:	6a1b      	ldr	r3, [r3, #32]
      SET_BIT(EXTI->RTSR, extiline);
 800089a:	4c1a      	ldr	r4, [pc, #104]	; (8000904 <HAL_COMP_Start_IT+0xa0>)
    if((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_IT_RISING) != RESET)
 800089c:	07d8      	lsls	r0, r3, #31
 800089e:	d50f      	bpl.n	80008c0 <HAL_COMP_Start_IT+0x5c>
      SET_BIT(EXTI->RTSR, extiline);
 80008a0:	68a0      	ldr	r0, [r4, #8]
 80008a2:	4308      	orrs	r0, r1
 80008a4:	60a0      	str	r0, [r4, #8]
    if((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_IT_FALLING) != RESET)
 80008a6:	079b      	lsls	r3, r3, #30
 80008a8:	d50f      	bpl.n	80008ca <HAL_COMP_Start_IT+0x66>
      SET_BIT(EXTI->FTSR, extiline);
 80008aa:	4a16      	ldr	r2, [pc, #88]	; (8000904 <HAL_COMP_Start_IT+0xa0>)
 80008ac:	68d3      	ldr	r3, [r2, #12]
 80008ae:	430b      	orrs	r3, r1
 80008b0:	60d3      	str	r3, [r2, #12]
    WRITE_REG(EXTI->PR, extiline);
 80008b2:	4b14      	ldr	r3, [pc, #80]	; (8000904 <HAL_COMP_Start_IT+0xa0>)
    SET_BIT(EXTI->IMR, extiline);
 80008b4:	2000      	movs	r0, #0
    WRITE_REG(EXTI->PR, extiline);
 80008b6:	6159      	str	r1, [r3, #20]
    SET_BIT(EXTI->IMR, extiline);
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	430a      	orrs	r2, r1
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	e7db      	b.n	8000878 <HAL_COMP_Start_IT+0x14>
      CLEAR_BIT(EXTI->RTSR, extiline);
 80008c0:	68a0      	ldr	r0, [r4, #8]
 80008c2:	4010      	ands	r0, r2
 80008c4:	60a0      	str	r0, [r4, #8]
    if((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_IT_FALLING) != RESET)
 80008c6:	079b      	lsls	r3, r3, #30
 80008c8:	d4ef      	bmi.n	80008aa <HAL_COMP_Start_IT+0x46>
      CLEAR_BIT(EXTI->FTSR, extiline);
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <HAL_COMP_Start_IT+0xa0>)
 80008cc:	68d8      	ldr	r0, [r3, #12]
 80008ce:	4002      	ands	r2, r0
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	e7ee      	b.n	80008b2 <HAL_COMP_Start_IT+0x4e>
  if((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 80008d4:	2001      	movs	r0, #1
 80008d6:	e7cf      	b.n	8000878 <HAL_COMP_Start_IT+0x14>
    extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 80008d8:	2180      	movs	r1, #128	; 0x80
 80008da:	4a0b      	ldr	r2, [pc, #44]	; (8000908 <HAL_COMP_Start_IT+0xa4>)
 80008dc:	0389      	lsls	r1, r1, #14
 80008de:	e7db      	b.n	8000898 <HAL_COMP_Start_IT+0x34>
      SET_BIT(COMP->CSR, COMP_CSR_COMPxEN << regshift);
 80008e0:	2280      	movs	r2, #128	; 0x80
 80008e2:	4906      	ldr	r1, [pc, #24]	; (80008fc <HAL_COMP_Start_IT+0x98>)
 80008e4:	0252      	lsls	r2, r2, #9
 80008e6:	6808      	ldr	r0, [r1, #0]
 80008e8:	4302      	orrs	r2, r0
 80008ea:	600a      	str	r2, [r1, #0]
      hcomp->State = HAL_COMP_STATE_BUSY;
 80008ec:	2202      	movs	r2, #2
    extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 80008ee:	2180      	movs	r1, #128	; 0x80
      hcomp->State = HAL_COMP_STATE_BUSY;
 80008f0:	629a      	str	r2, [r3, #40]	; 0x28
    extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 80008f2:	03c9      	lsls	r1, r1, #15
      hcomp->State = HAL_COMP_STATE_BUSY;
 80008f4:	4a02      	ldr	r2, [pc, #8]	; (8000900 <HAL_COMP_Start_IT+0x9c>)
 80008f6:	e7cf      	b.n	8000898 <HAL_COMP_Start_IT+0x34>
 80008f8:	4001001e 	.word	0x4001001e
 80008fc:	4001001c 	.word	0x4001001c
 8000900:	ffbfffff 	.word	0xffbfffff
 8000904:	40010400 	.word	0x40010400
 8000908:	ffdfffff 	.word	0xffdfffff

0800090c <HAL_COMP_Stop_IT>:
  * @brief  Disable the interrupt and Stop the comparator 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Stop_IT(COMP_HandleTypeDef *hcomp)
{ 
 800090c:	0002      	movs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Disable the Exti Line interrupt mode */
  CLEAR_BIT(EXTI->IMR, COMP_GET_EXTI_LINE(hcomp->Instance));
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <HAL_COMP_Stop_IT+0x48>)
 8000910:	6801      	ldr	r1, [r0, #0]
 8000912:	4811      	ldr	r0, [pc, #68]	; (8000958 <HAL_COMP_Stop_IT+0x4c>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4281      	cmp	r1, r0
 8000918:	d018      	beq.n	800094c <HAL_COMP_Stop_IT+0x40>
 800091a:	4810      	ldr	r0, [pc, #64]	; (800095c <HAL_COMP_Stop_IT+0x50>)
 800091c:	4003      	ands	r3, r0
 800091e:	480d      	ldr	r0, [pc, #52]	; (8000954 <HAL_COMP_Stop_IT+0x48>)
 8000920:	6003      	str	r3, [r0, #0]
  if((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8000922:	6a93      	ldr	r3, [r2, #40]	; 0x28
    status = HAL_ERROR;
 8000924:	2001      	movs	r0, #1
  if((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8000926:	06db      	lsls	r3, r3, #27
 8000928:	d402      	bmi.n	8000930 <HAL_COMP_Stop_IT+0x24>
    if(hcomp->State == HAL_COMP_STATE_BUSY)
 800092a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800092c:	2b02      	cmp	r3, #2
 800092e:	d000      	beq.n	8000932 <HAL_COMP_Stop_IT+0x26>
  
  status = HAL_COMP_Stop(hcomp);
  
  return status;
}
 8000930:	4770      	bx	lr
      if(hcomp->Instance == COMP2)
 8000932:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <HAL_COMP_Stop_IT+0x54>)
 8000934:	4299      	cmp	r1, r3
 8000936:	d00b      	beq.n	8000950 <HAL_COMP_Stop_IT+0x44>
 8000938:	2302      	movs	r3, #2
 800093a:	425b      	negs	r3, r3
      CLEAR_BIT(COMP->CSR, COMP_CSR_COMPxEN << regshift);
 800093c:	4906      	ldr	r1, [pc, #24]	; (8000958 <HAL_COMP_Stop_IT+0x4c>)
 800093e:	6808      	ldr	r0, [r1, #0]
 8000940:	4003      	ands	r3, r0
 8000942:	600b      	str	r3, [r1, #0]
      hcomp->State = HAL_COMP_STATE_READY;
 8000944:	2301      	movs	r3, #1
 8000946:	2000      	movs	r0, #0
 8000948:	6293      	str	r3, [r2, #40]	; 0x28
 800094a:	e7f1      	b.n	8000930 <HAL_COMP_Stop_IT+0x24>
  CLEAR_BIT(EXTI->IMR, COMP_GET_EXTI_LINE(hcomp->Instance));
 800094c:	4805      	ldr	r0, [pc, #20]	; (8000964 <HAL_COMP_Stop_IT+0x58>)
 800094e:	e7e5      	b.n	800091c <HAL_COMP_Stop_IT+0x10>
      if(hcomp->Instance == COMP2)
 8000950:	4b05      	ldr	r3, [pc, #20]	; (8000968 <HAL_COMP_Stop_IT+0x5c>)
 8000952:	e7f3      	b.n	800093c <HAL_COMP_Stop_IT+0x30>
 8000954:	40010400 	.word	0x40010400
 8000958:	4001001c 	.word	0x4001001c
 800095c:	ffbfffff 	.word	0xffbfffff
 8000960:	4001001e 	.word	0x4001001e
 8000964:	ffdfffff 	.word	0xffdfffff
 8000968:	fffeffff 	.word	0xfffeffff

0800096c <HAL_COMP_GetOutputLevel>:
  uint32_t regshift = COMP_CSR_COMP1_SHIFT;
  
  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));
  
  if(hcomp->Instance == COMP2)
 800096c:	6802      	ldr	r2, [r0, #0]
 800096e:	4b07      	ldr	r3, [pc, #28]	; (800098c <HAL_COMP_GetOutputLevel+0x20>)
 8000970:	2080      	movs	r0, #128	; 0x80
 8000972:	429a      	cmp	r2, r3
 8000974:	d007      	beq.n	8000986 <HAL_COMP_GetOutputLevel+0x1a>
 8000976:	01c0      	lsls	r0, r0, #7
  {
    regshift = COMP_CSR_COMP2_SHIFT;
  }
  level = READ_BIT(COMP->CSR, COMP_CSR_COMPxOUT << regshift);
 8000978:	4b05      	ldr	r3, [pc, #20]	; (8000990 <HAL_COMP_GetOutputLevel+0x24>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4018      	ands	r0, r3
  
  if(level != 0U)
 800097e:	d001      	beq.n	8000984 <HAL_COMP_GetOutputLevel+0x18>
  {
    return(COMP_OUTPUTLEVEL_HIGH);
 8000980:	2080      	movs	r0, #128	; 0x80
 8000982:	01c0      	lsls	r0, r0, #7
  }
  return(COMP_OUTPUTLEVEL_LOW);
}
 8000984:	4770      	bx	lr
 8000986:	05c0      	lsls	r0, r0, #23
 8000988:	e7f6      	b.n	8000978 <HAL_COMP_GetOutputLevel+0xc>
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	4001001e 	.word	0x4001001e
 8000990:	4001001c 	.word	0x4001001c

08000994 <HAL_COMP_IRQHandler>:
  uint32_t extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 8000994:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <HAL_COMP_IRQHandler+0x24>)
 8000996:	6802      	ldr	r2, [r0, #0]
{
 8000998:	b510      	push	{r4, lr}
  uint32_t extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 800099a:	429a      	cmp	r2, r3
 800099c:	d009      	beq.n	80009b2 <HAL_COMP_IRQHandler+0x1e>
 800099e:	2280      	movs	r2, #128	; 0x80
 80009a0:	03d2      	lsls	r2, r2, #15
  if(READ_BIT(EXTI->PR, extiline) != RESET)
 80009a2:	4b06      	ldr	r3, [pc, #24]	; (80009bc <HAL_COMP_IRQHandler+0x28>)
 80009a4:	6959      	ldr	r1, [r3, #20]
 80009a6:	4211      	tst	r1, r2
 80009a8:	d002      	beq.n	80009b0 <HAL_COMP_IRQHandler+0x1c>
    WRITE_REG(EXTI->PR, extiline);
 80009aa:	615a      	str	r2, [r3, #20]
    HAL_COMP_TriggerCallback(hcomp);    
 80009ac:	f002 fff8 	bl	80039a0 <HAL_COMP_TriggerCallback>
}
 80009b0:	bd10      	pop	{r4, pc}
  uint32_t extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 80009b2:	2280      	movs	r2, #128	; 0x80
 80009b4:	0392      	lsls	r2, r2, #14
 80009b6:	e7f4      	b.n	80009a2 <HAL_COMP_IRQHandler+0xe>
 80009b8:	4001001c 	.word	0x4001001c
 80009bc:	40010400 	.word	0x40010400

080009c0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009c0:	b570      	push	{r4, r5, r6, lr}
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80009c2:	2800      	cmp	r0, #0
 80009c4:	db14      	blt.n	80009f0 <HAL_NVIC_SetPriority+0x30>
 80009c6:	4a16      	ldr	r2, [pc, #88]	; (8000a20 <HAL_NVIC_SetPriority+0x60>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009c8:	2403      	movs	r4, #3
 80009ca:	4694      	mov	ip, r2
 80009cc:	22ff      	movs	r2, #255	; 0xff
 80009ce:	0883      	lsrs	r3, r0, #2
 80009d0:	4020      	ands	r0, r4
 80009d2:	0014      	movs	r4, r2
 80009d4:	26c0      	movs	r6, #192	; 0xc0
 80009d6:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009d8:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009da:	4084      	lsls	r4, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009dc:	400a      	ands	r2, r1
 80009de:	4082      	lsls	r2, r0
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	4463      	add	r3, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009e4:	00b6      	lsls	r6, r6, #2
 80009e6:	599d      	ldr	r5, [r3, r6]
 80009e8:	43a5      	bics	r5, r4
 80009ea:	432a      	orrs	r2, r5
 80009ec:	519a      	str	r2, [r3, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	4a0c      	ldr	r2, [pc, #48]	; (8000a24 <HAL_NVIC_SetPriority+0x64>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009f2:	24ff      	movs	r4, #255	; 0xff
 80009f4:	4694      	mov	ip, r2
 80009f6:	230f      	movs	r3, #15
 80009f8:	2203      	movs	r2, #3
 80009fa:	b2c0      	uxtb	r0, r0
 80009fc:	4003      	ands	r3, r0
 80009fe:	4010      	ands	r0, r2
 8000a00:	0022      	movs	r2, r4
 8000a02:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a04:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a06:	4082      	lsls	r2, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a08:	400c      	ands	r4, r1
 8000a0a:	4084      	lsls	r4, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a0c:	3b08      	subs	r3, #8
 8000a0e:	089b      	lsrs	r3, r3, #2
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	4463      	add	r3, ip
 8000a14:	69dd      	ldr	r5, [r3, #28]
 8000a16:	4395      	bics	r5, r2
 8000a18:	432c      	orrs	r4, r5
 8000a1a:	61dc      	str	r4, [r3, #28]
 8000a1c:	e7e7      	b.n	80009ee <HAL_NVIC_SetPriority+0x2e>
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	e000e100 	.word	0xe000e100
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000a28:	231f      	movs	r3, #31
 8000a2a:	4018      	ands	r0, r3
 8000a2c:	3b1e      	subs	r3, #30
 8000a2e:	4083      	lsls	r3, r0
 8000a30:	4a01      	ldr	r2, [pc, #4]	; (8000a38 <HAL_NVIC_EnableIRQ+0x10>)
 8000a32:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000a34:	4770      	bx	lr
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	e000e100 	.word	0xe000e100

08000a3c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a3c:	4a0a      	ldr	r2, [pc, #40]	; (8000a68 <HAL_SYSTICK_Config+0x2c>)
 8000a3e:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a40:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d80e      	bhi.n	8000a64 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a46:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a48:	4a08      	ldr	r2, [pc, #32]	; (8000a6c <HAL_SYSTICK_Config+0x30>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a4a:	4809      	ldr	r0, [pc, #36]	; (8000a70 <HAL_SYSTICK_Config+0x34>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a4c:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a4e:	6a03      	ldr	r3, [r0, #32]
 8000a50:	0609      	lsls	r1, r1, #24
 8000a52:	021b      	lsls	r3, r3, #8
 8000a54:	0a1b      	lsrs	r3, r3, #8
 8000a56:	430b      	orrs	r3, r1
 8000a58:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a5a:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a5c:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a5e:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a60:	3307      	adds	r3, #7
 8000a62:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000a64:	4770      	bx	lr
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	00ffffff 	.word	0x00ffffff
 8000a6c:	e000e010 	.word	0xe000e010
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000a74:	4a05      	ldr	r2, [pc, #20]	; (8000a8c <HAL_SYSTICK_CLKSourceConfig+0x18>)
 8000a76:	6813      	ldr	r3, [r2, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000a78:	2804      	cmp	r0, #4
 8000a7a:	d003      	beq.n	8000a84 <HAL_SYSTICK_CLKSourceConfig+0x10>
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000a7c:	2104      	movs	r1, #4
 8000a7e:	438b      	bics	r3, r1
 8000a80:	6013      	str	r3, [r2, #0]
  }
}
 8000a82:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000a84:	4318      	orrs	r0, r3
 8000a86:	6010      	str	r0, [r2, #0]
 8000a88:	e7fb      	b.n	8000a82 <HAL_SYSTICK_CLKSourceConfig+0xe>
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	e000e010 	.word	0xe000e010

08000a90 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000a90:	4770      	bx	lr
 8000a92:	46c0      	nop			; (mov r8, r8)

08000a94 <HAL_SYSTICK_IRQHandler>:
{
 8000a94:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 8000a96:	f7ff fffb 	bl	8000a90 <HAL_SYSTICK_Callback>
}
 8000a9a:	bd10      	pop	{r4, pc}

08000a9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000a9c:	b570      	push	{r4, r5, r6, lr}
 8000a9e:	1e04      	subs	r4, r0, #0
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000aa0:	d02b      	beq.n	8000afa <HAL_DMA_Init+0x5e>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000aa2:	2521      	movs	r5, #33	; 0x21
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	5543      	strb	r3, [r0, r5]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000aa8:	6800      	ldr	r0, [r0, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000aaa:	4a15      	ldr	r2, [pc, #84]	; (8000b00 <HAL_DMA_Init+0x64>)
  tmp = hdma->Instance->CCR;
 8000aac:	6803      	ldr	r3, [r0, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000aae:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000ab0:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8000ab2:	6863      	ldr	r3, [r4, #4]
 8000ab4:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ab6:	68e1      	ldr	r1, [r4, #12]
 8000ab8:	430b      	orrs	r3, r1
 8000aba:	6921      	ldr	r1, [r4, #16]
 8000abc:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000abe:	6961      	ldr	r1, [r4, #20]
 8000ac0:	430b      	orrs	r3, r1
 8000ac2:	69a1      	ldr	r1, [r4, #24]
 8000ac4:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ac6:	69e1      	ldr	r1, [r4, #28]
 8000ac8:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8000aca:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000acc:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000ace:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <HAL_DMA_Init+0x68>)
 8000ad0:	2114      	movs	r1, #20
 8000ad2:	469c      	mov	ip, r3
 8000ad4:	4460      	add	r0, ip
 8000ad6:	f7ff fb17 	bl	8000108 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <HAL_DMA_Init+0x6c>)
  hdma->State = HAL_DMA_STATE_READY;
 8000adc:	2201      	movs	r2, #1
  hdma->DmaBaseAddress = DMA1;
 8000ade:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->XferCpltCallback = NULL;
 8000ae0:	2300      	movs	r3, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000ae2:	0080      	lsls	r0, r0, #2
 8000ae4:	6420      	str	r0, [r4, #64]	; 0x40
  return HAL_OK;
 8000ae6:	2000      	movs	r0, #0
  hdma->XferCpltCallback = NULL;
 8000ae8:	62a3      	str	r3, [r4, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8000aea:	62e3      	str	r3, [r4, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8000aec:	6323      	str	r3, [r4, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8000aee:	6363      	str	r3, [r4, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000af0:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8000af2:	5562      	strb	r2, [r4, r5]
  hdma->Lock = HAL_UNLOCKED;
 8000af4:	321f      	adds	r2, #31
 8000af6:	54a3      	strb	r3, [r4, r2]
}  
 8000af8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000afa:	2001      	movs	r0, #1
 8000afc:	e7fc      	b.n	8000af8 <HAL_DMA_Init+0x5c>
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	ffffc00f 	.word	0xffffc00f
 8000b04:	bffdfff8 	.word	0xbffdfff8
 8000b08:	40020000 	.word	0x40020000

08000b0c <HAL_DMA_Start_IT>:
{
 8000b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8000b0e:	2420      	movs	r4, #32
 8000b10:	5d05      	ldrb	r5, [r0, r4]
 8000b12:	2602      	movs	r6, #2
 8000b14:	2d01      	cmp	r5, #1
 8000b16:	d008      	beq.n	8000b2a <HAL_DMA_Start_IT+0x1e>
 8000b18:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8000b1a:	2721      	movs	r7, #33	; 0x21
  __HAL_LOCK(hdma);
 8000b1c:	5505      	strb	r5, [r0, r4]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000b1e:	5dc5      	ldrb	r5, [r0, r7]
 8000b20:	b2ed      	uxtb	r5, r5
 8000b22:	2d01      	cmp	r5, #1
 8000b24:	d003      	beq.n	8000b2e <HAL_DMA_Start_IT+0x22>
    __HAL_UNLOCK(hdma); 
 8000b26:	2300      	movs	r3, #0
 8000b28:	5503      	strb	r3, [r0, r4]
} 
 8000b2a:	0030      	movs	r0, r6
 8000b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b2e:	2400      	movs	r4, #0
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000b30:	55c6      	strb	r6, [r0, r7]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b32:	6384      	str	r4, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b34:	6804      	ldr	r4, [r0, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000b36:	6c07      	ldr	r7, [r0, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b38:	6826      	ldr	r6, [r4, #0]
 8000b3a:	43ae      	bics	r6, r5
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000b3c:	40bd      	lsls	r5, r7
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b3e:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000b40:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8000b42:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8000b44:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000b46:	6843      	ldr	r3, [r0, #4]
 8000b48:	2b10      	cmp	r3, #16
 8000b4a:	d00e      	beq.n	8000b6a <HAL_DMA_Start_IT+0x5e>
    hdma->Instance->CPAR = SrcAddress;
 8000b4c:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 8000b4e:	60e2      	str	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8000b50:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d00c      	beq.n	8000b70 <HAL_DMA_Start_IT+0x64>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b56:	220e      	movs	r2, #14
 8000b58:	6823      	ldr	r3, [r4, #0]
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000b5e:	2201      	movs	r2, #1
 8000b60:	6823      	ldr	r3, [r4, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000b62:	2600      	movs	r6, #0
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000b64:	4313      	orrs	r3, r2
 8000b66:	6023      	str	r3, [r4, #0]
 8000b68:	e7df      	b.n	8000b2a <HAL_DMA_Start_IT+0x1e>
    hdma->Instance->CPAR = DstAddress;
 8000b6a:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000b6c:	60e1      	str	r1, [r4, #12]
 8000b6e:	e7ef      	b.n	8000b50 <HAL_DMA_Start_IT+0x44>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000b70:	220a      	movs	r2, #10
 8000b72:	6823      	ldr	r3, [r4, #0]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000b78:	6823      	ldr	r3, [r4, #0]
 8000b7a:	3a06      	subs	r2, #6
 8000b7c:	4393      	bics	r3, r2
 8000b7e:	6023      	str	r3, [r4, #0]
 8000b80:	e7ed      	b.n	8000b5e <HAL_DMA_Start_IT+0x52>
 8000b82:	46c0      	nop			; (mov r8, r8)

08000b84 <HAL_DMA_IRQHandler>:
{
 8000b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000b86:	2504      	movs	r5, #4
 8000b88:	002e      	movs	r6, r5
 8000b8a:	6c03      	ldr	r3, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000b8c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000b8e:	409e      	lsls	r6, r3
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000b90:	6822      	ldr	r2, [r4, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000b92:	6801      	ldr	r1, [r0, #0]
 8000b94:	680f      	ldr	r7, [r1, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000b96:	4216      	tst	r6, r2
 8000b98:	d00d      	beq.n	8000bb6 <HAL_DMA_IRQHandler+0x32>
 8000b9a:	423d      	tst	r5, r7
 8000b9c:	d00b      	beq.n	8000bb6 <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000b9e:	680b      	ldr	r3, [r1, #0]
 8000ba0:	069b      	lsls	r3, r3, #26
 8000ba2:	d402      	bmi.n	8000baa <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000ba4:	680b      	ldr	r3, [r1, #0]
 8000ba6:	43ab      	bics	r3, r5
 8000ba8:	600b      	str	r3, [r1, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000baa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000bac:	6066      	str	r6, [r4, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d000      	beq.n	8000bb4 <HAL_DMA_IRQHandler+0x30>
    	hdma->XferErrorCallback(hdma);
 8000bb2:	4798      	blx	r3
}  
 8000bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000bb6:	2502      	movs	r5, #2
 8000bb8:	002e      	movs	r6, r5
 8000bba:	409e      	lsls	r6, r3
 8000bbc:	4216      	tst	r6, r2
 8000bbe:	d014      	beq.n	8000bea <HAL_DMA_IRQHandler+0x66>
 8000bc0:	423d      	tst	r5, r7
 8000bc2:	d012      	beq.n	8000bea <HAL_DMA_IRQHandler+0x66>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000bc4:	680b      	ldr	r3, [r1, #0]
 8000bc6:	069b      	lsls	r3, r3, #26
 8000bc8:	d406      	bmi.n	8000bd8 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000bca:	220a      	movs	r2, #10
 8000bcc:	680b      	ldr	r3, [r1, #0]
 8000bce:	4393      	bics	r3, r2
 8000bd0:	600b      	str	r3, [r1, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8000bd2:	2321      	movs	r3, #33	; 0x21
 8000bd4:	3a09      	subs	r2, #9
 8000bd6:	54c2      	strb	r2, [r0, r3]
  	__HAL_UNLOCK(hdma);
 8000bd8:	2320      	movs	r3, #32
 8000bda:	2200      	movs	r2, #0
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000bdc:	6066      	str	r6, [r4, #4]
  	__HAL_UNLOCK(hdma);
 8000bde:	54c2      	strb	r2, [r0, r3]
  	if(hdma->XferCpltCallback != NULL)
 8000be0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d0e6      	beq.n	8000bb4 <HAL_DMA_IRQHandler+0x30>
    	hdma->XferErrorCallback(hdma);
 8000be6:	4798      	blx	r3
 8000be8:	e7e4      	b.n	8000bb4 <HAL_DMA_IRQHandler+0x30>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000bea:	2508      	movs	r5, #8
 8000bec:	002e      	movs	r6, r5
 8000bee:	409e      	lsls	r6, r3
 8000bf0:	4232      	tst	r2, r6
 8000bf2:	d0df      	beq.n	8000bb4 <HAL_DMA_IRQHandler+0x30>
 8000bf4:	423d      	tst	r5, r7
 8000bf6:	d0dd      	beq.n	8000bb4 <HAL_DMA_IRQHandler+0x30>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000bf8:	680a      	ldr	r2, [r1, #0]
 8000bfa:	3506      	adds	r5, #6
 8000bfc:	43aa      	bics	r2, r5
 8000bfe:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000c00:	2201      	movs	r2, #1
 8000c02:	0011      	movs	r1, r2
 8000c04:	4099      	lsls	r1, r3
    hdma->State = HAL_DMA_STATE_READY;    
 8000c06:	2321      	movs	r3, #33	; 0x21
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000c08:	6061      	str	r1, [r4, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000c0a:	6382      	str	r2, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8000c0c:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma); 
 8000c0e:	2200      	movs	r2, #0
 8000c10:	3b01      	subs	r3, #1
 8000c12:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferErrorCallback != NULL)
 8000c14:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d0cc      	beq.n	8000bb4 <HAL_DMA_IRQHandler+0x30>
    	hdma->XferErrorCallback(hdma);
 8000c1a:	4798      	blx	r3
 8000c1c:	e7ca      	b.n	8000bb4 <HAL_DMA_IRQHandler+0x30>
 8000c1e:	46c0      	nop			; (mov r8, r8)

08000c20 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c22:	46de      	mov	lr, fp
 8000c24:	4657      	mov	r7, sl
 8000c26:	464e      	mov	r6, r9
 8000c28:	4645      	mov	r5, r8
 8000c2a:	b5e0      	push	{r5, r6, r7, lr}
 8000c2c:	469b      	mov	fp, r3
 8000c2e:	b083      	sub	sp, #12
  HAL_StatusTypeDef status = HAL_ERROR;
  uint8_t index = 0U;
  uint8_t nbiterations = 0U;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000c30:	4b67      	ldr	r3, [pc, #412]	; (8000dd0 <HAL_FLASH_Program+0x1b0>)
{
 8000c32:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(&pFlash);
 8000c34:	469a      	mov	sl, r3
 8000c36:	7e1b      	ldrb	r3, [r3, #24]
{
 8000c38:	4680      	mov	r8, r0
 8000c3a:	4689      	mov	r9, r1
  __HAL_LOCK(&pFlash);
 8000c3c:	2002      	movs	r0, #2
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d106      	bne.n	8000c50 <HAL_FLASH_Program+0x30>

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);

  return status;
}
 8000c42:	b003      	add	sp, #12
 8000c44:	bc3c      	pop	{r2, r3, r4, r5}
 8000c46:	4690      	mov	r8, r2
 8000c48:	4699      	mov	r9, r3
 8000c4a:	46a2      	mov	sl, r4
 8000c4c:	46ab      	mov	fp, r5
 8000c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8000c50:	2301      	movs	r3, #1
 8000c52:	4652      	mov	r2, sl
 8000c54:	7613      	strb	r3, [r2, #24]
{
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000c56:	f7ff fbf7 	bl	8000448 <HAL_GetTick>
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000c5a:	4c5e      	ldr	r4, [pc, #376]	; (8000dd4 <HAL_FLASH_Program+0x1b4>)
  uint32_t tickstart = HAL_GetTick();
 8000c5c:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000c5e:	2501      	movs	r5, #1
  { 
    if (Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000c60:	4e5d      	ldr	r6, [pc, #372]	; (8000dd8 <HAL_FLASH_Program+0x1b8>)
 8000c62:	e005      	b.n	8000c70 <HAL_FLASH_Program+0x50>
 8000c64:	f7ff fbf0 	bl	8000448 <HAL_GetTick>
 8000c68:	1bc0      	subs	r0, r0, r7
 8000c6a:	42b0      	cmp	r0, r6
 8000c6c:	d900      	bls.n	8000c70 <HAL_FLASH_Program+0x50>
 8000c6e:	e0a6      	b.n	8000dbe <HAL_FLASH_Program+0x19e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000c70:	68e3      	ldr	r3, [r4, #12]
 8000c72:	421d      	tst	r5, r3
 8000c74:	d1f6      	bne.n	8000c64 <HAL_FLASH_Program+0x44>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000c76:	2320      	movs	r3, #32
 8000c78:	68e2      	ldr	r2, [r4, #12]
 8000c7a:	4213      	tst	r3, r2
 8000c7c:	d000      	beq.n	8000c80 <HAL_FLASH_Program+0x60>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000c7e:	60e3      	str	r3, [r4, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000c80:	4b54      	ldr	r3, [pc, #336]	; (8000dd4 <HAL_FLASH_Program+0x1b4>)
 8000c82:	68da      	ldr	r2, [r3, #12]
 8000c84:	06d2      	lsls	r2, r2, #27
 8000c86:	d402      	bmi.n	8000c8e <HAL_FLASH_Program+0x6e>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000c88:	68db      	ldr	r3, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000c8a:	075b      	lsls	r3, r3, #29
 8000c8c:	d51e      	bpl.n	8000ccc <HAL_FLASH_Program+0xac>
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000c8e:	4b51      	ldr	r3, [pc, #324]	; (8000dd4 <HAL_FLASH_Program+0x1b4>)
 8000c90:	68db      	ldr	r3, [r3, #12]
 8000c92:	06db      	lsls	r3, r3, #27
 8000c94:	d400      	bmi.n	8000c98 <HAL_FLASH_Program+0x78>
 8000c96:	e094      	b.n	8000dc2 <HAL_FLASH_Program+0x1a2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000c98:	4653      	mov	r3, sl
 8000c9a:	2202      	movs	r2, #2
 8000c9c:	69db      	ldr	r3, [r3, #28]
 8000c9e:	2114      	movs	r1, #20
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	4652      	mov	r2, sl
 8000ca4:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8000ca6:	2310      	movs	r3, #16
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000ca8:	4a4a      	ldr	r2, [pc, #296]	; (8000dd4 <HAL_FLASH_Program+0x1b4>)
 8000caa:	68d2      	ldr	r2, [r2, #12]
 8000cac:	0752      	lsls	r2, r2, #29
 8000cae:	d506      	bpl.n	8000cbe <HAL_FLASH_Program+0x9e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000cb0:	4653      	mov	r3, sl
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	69db      	ldr	r3, [r3, #28]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	4652      	mov	r2, sl
 8000cba:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8000cbc:	000b      	movs	r3, r1
    return HAL_ERROR;
 8000cbe:	2001      	movs	r0, #1
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000cc0:	4a44      	ldr	r2, [pc, #272]	; (8000dd4 <HAL_FLASH_Program+0x1b4>)
 8000cc2:	60d3      	str	r3, [r2, #12]
  __HAL_UNLOCK(&pFlash);
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	4652      	mov	r2, sl
 8000cc8:	7613      	strb	r3, [r2, #24]
  return status;
 8000cca:	e7ba      	b.n	8000c42 <HAL_FLASH_Program+0x22>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000ccc:	4643      	mov	r3, r8
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d07a      	beq.n	8000dc8 <HAL_FLASH_Program+0x1a8>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000cd2:	4642      	mov	r2, r8
      nbiterations = 4U;
 8000cd4:	2304      	movs	r3, #4
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000cd6:	2a02      	cmp	r2, #2
 8000cd8:	d078      	beq.n	8000dcc <HAL_FLASH_Program+0x1ac>
 8000cda:	464a      	mov	r2, r9
 8000cdc:	3b01      	subs	r3, #1
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	3202      	adds	r2, #2
 8000ce4:	189b      	adds	r3, r3, r2
 8000ce6:	9300      	str	r3, [sp, #0]
      nbiterations = 4U;
 8000ce8:	2300      	movs	r3, #0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000cea:	2501      	movs	r5, #1
      nbiterations = 4U;
 8000cec:	4698      	mov	r8, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000cee:	4c39      	ldr	r4, [pc, #228]	; (8000dd4 <HAL_FLASH_Program+0x1b4>)
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000cf0:	2220      	movs	r2, #32
 8000cf2:	4643      	mov	r3, r8
 8000cf4:	4252      	negs	r2, r2
 8000cf6:	189b      	adds	r3, r3, r2
 8000cf8:	d457      	bmi.n	8000daa <HAL_FLASH_Program+0x18a>
 8000cfa:	465a      	mov	r2, fp
 8000cfc:	40da      	lsrs	r2, r3
 8000cfe:	0013      	movs	r3, r2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000d00:	2200      	movs	r2, #0
 8000d02:	4651      	mov	r1, sl
 8000d04:	61ca      	str	r2, [r1, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000d06:	6922      	ldr	r2, [r4, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000d08:	b29b      	uxth	r3, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000d0a:	432a      	orrs	r2, r5
 8000d0c:	6122      	str	r2, [r4, #16]
  *(__IO uint16_t*)Address = Data;
 8000d0e:	464a      	mov	r2, r9
 8000d10:	8013      	strh	r3, [r2, #0]
  uint32_t tickstart = HAL_GetTick();
 8000d12:	f7ff fb99 	bl	8000448 <HAL_GetTick>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000d16:	4e30      	ldr	r6, [pc, #192]	; (8000dd8 <HAL_FLASH_Program+0x1b8>)
  uint32_t tickstart = HAL_GetTick();
 8000d18:	0007      	movs	r7, r0
 8000d1a:	e004      	b.n	8000d26 <HAL_FLASH_Program+0x106>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000d1c:	f7ff fb94 	bl	8000448 <HAL_GetTick>
 8000d20:	1bc0      	subs	r0, r0, r7
 8000d22:	42b0      	cmp	r0, r6
 8000d24:	d83c      	bhi.n	8000da0 <HAL_FLASH_Program+0x180>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000d26:	68e3      	ldr	r3, [r4, #12]
 8000d28:	421d      	tst	r5, r3
 8000d2a:	d1f7      	bne.n	8000d1c <HAL_FLASH_Program+0xfc>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000d2c:	2220      	movs	r2, #32
 8000d2e:	68e3      	ldr	r3, [r4, #12]
 8000d30:	421a      	tst	r2, r3
 8000d32:	d001      	beq.n	8000d38 <HAL_FLASH_Program+0x118>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000d34:	2320      	movs	r3, #32
 8000d36:	60e3      	str	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000d38:	68e3      	ldr	r3, [r4, #12]
 8000d3a:	06db      	lsls	r3, r3, #27
 8000d3c:	d402      	bmi.n	8000d44 <HAL_FLASH_Program+0x124>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000d3e:	68e3      	ldr	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000d40:	075b      	lsls	r3, r3, #29
 8000d42:	d51f      	bpl.n	8000d84 <HAL_FLASH_Program+0x164>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000d44:	4b23      	ldr	r3, [pc, #140]	; (8000dd4 <HAL_FLASH_Program+0x1b4>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	06db      	lsls	r3, r3, #27
 8000d4a:	d52b      	bpl.n	8000da4 <HAL_FLASH_Program+0x184>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000d4c:	4653      	mov	r3, sl
 8000d4e:	2202      	movs	r2, #2
 8000d50:	69db      	ldr	r3, [r3, #28]
 8000d52:	2114      	movs	r1, #20
 8000d54:	4313      	orrs	r3, r2
 8000d56:	4652      	mov	r2, sl
 8000d58:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8000d5a:	2310      	movs	r3, #16
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000d5c:	4a1d      	ldr	r2, [pc, #116]	; (8000dd4 <HAL_FLASH_Program+0x1b4>)
 8000d5e:	68d2      	ldr	r2, [r2, #12]
 8000d60:	0752      	lsls	r2, r2, #29
 8000d62:	d506      	bpl.n	8000d72 <HAL_FLASH_Program+0x152>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000d64:	4653      	mov	r3, sl
 8000d66:	2201      	movs	r2, #1
 8000d68:	69db      	ldr	r3, [r3, #28]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	4652      	mov	r2, sl
 8000d6e:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8000d70:	000b      	movs	r3, r1
    return HAL_ERROR;
 8000d72:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000d74:	4a17      	ldr	r2, [pc, #92]	; (8000dd4 <HAL_FLASH_Program+0x1b4>)
 8000d76:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000d78:	2101      	movs	r1, #1
 8000d7a:	4a16      	ldr	r2, [pc, #88]	; (8000dd4 <HAL_FLASH_Program+0x1b4>)
 8000d7c:	6913      	ldr	r3, [r2, #16]
 8000d7e:	438b      	bics	r3, r1
 8000d80:	6113      	str	r3, [r2, #16]
 8000d82:	e79f      	b.n	8000cc4 <HAL_FLASH_Program+0xa4>
 8000d84:	6923      	ldr	r3, [r4, #16]
 8000d86:	43ab      	bics	r3, r5
 8000d88:	6123      	str	r3, [r4, #16]
 8000d8a:	2310      	movs	r3, #16
 8000d8c:	469c      	mov	ip, r3
 8000d8e:	3b0e      	subs	r3, #14
 8000d90:	44e0      	add	r8, ip
 8000d92:	469c      	mov	ip, r3
    for (index = 0U; index < nbiterations; index++)
 8000d94:	9b00      	ldr	r3, [sp, #0]
 8000d96:	44e1      	add	r9, ip
 8000d98:	454b      	cmp	r3, r9
 8000d9a:	d1a9      	bne.n	8000cf0 <HAL_FLASH_Program+0xd0>
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	e791      	b.n	8000cc4 <HAL_FLASH_Program+0xa4>
        return HAL_TIMEOUT;
 8000da0:	2003      	movs	r0, #3
 8000da2:	e7e9      	b.n	8000d78 <HAL_FLASH_Program+0x158>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000da4:	2104      	movs	r1, #4
  uint32_t flags = 0U;
 8000da6:	2300      	movs	r3, #0
 8000da8:	e7d8      	b.n	8000d5c <HAL_FLASH_Program+0x13c>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000daa:	4642      	mov	r2, r8
 8000dac:	2320      	movs	r3, #32
 8000dae:	1a9b      	subs	r3, r3, r2
 8000db0:	465a      	mov	r2, fp
 8000db2:	4641      	mov	r1, r8
 8000db4:	409a      	lsls	r2, r3
 8000db6:	9b01      	ldr	r3, [sp, #4]
 8000db8:	40cb      	lsrs	r3, r1
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	e7a0      	b.n	8000d00 <HAL_FLASH_Program+0xe0>
        return HAL_TIMEOUT;
 8000dbe:	2003      	movs	r0, #3
 8000dc0:	e780      	b.n	8000cc4 <HAL_FLASH_Program+0xa4>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000dc2:	2104      	movs	r1, #4
  uint32_t flags = 0U;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	e76f      	b.n	8000ca8 <HAL_FLASH_Program+0x88>
      nbiterations = 1U;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	e786      	b.n	8000cda <HAL_FLASH_Program+0xba>
      nbiterations = 2U;
 8000dcc:	3b02      	subs	r3, #2
 8000dce:	e784      	b.n	8000cda <HAL_FLASH_Program+0xba>
 8000dd0:	20000168 	.word	0x20000168
 8000dd4:	40022000 	.word	0x40022000
 8000dd8:	0000c350 	.word	0x0000c350

08000ddc <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8000ddc:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <HAL_FLASH_Unlock+0x18>)
    return HAL_ERROR;
 8000dde:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8000de0:	691a      	ldr	r2, [r3, #16]
 8000de2:	0612      	lsls	r2, r2, #24
 8000de4:	d504      	bpl.n	8000df0 <HAL_FLASH_Unlock+0x14>
  return HAL_OK; 
 8000de6:	2000      	movs	r0, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000de8:	4a03      	ldr	r2, [pc, #12]	; (8000df8 <HAL_FLASH_Unlock+0x1c>)
 8000dea:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000dec:	4a03      	ldr	r2, [pc, #12]	; (8000dfc <HAL_FLASH_Unlock+0x20>)
 8000dee:	605a      	str	r2, [r3, #4]
}
 8000df0:	4770      	bx	lr
 8000df2:	46c0      	nop			; (mov r8, r8)
 8000df4:	40022000 	.word	0x40022000
 8000df8:	45670123 	.word	0x45670123
 8000dfc:	cdef89ab 	.word	0xcdef89ab

08000e00 <FLASH_WaitForLastOperation>:
{
 8000e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e02:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000e04:	f7ff fb20 	bl	8000448 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000e08:	2501      	movs	r5, #1
  uint32_t tickstart = HAL_GetTick();
 8000e0a:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000e0c:	4e1f      	ldr	r6, [pc, #124]	; (8000e8c <FLASH_WaitForLastOperation+0x8c>)
 8000e0e:	1c63      	adds	r3, r4, #1
 8000e10:	d125      	bne.n	8000e5e <FLASH_WaitForLastOperation+0x5e>
 8000e12:	2201      	movs	r2, #1
 8000e14:	491d      	ldr	r1, [pc, #116]	; (8000e8c <FLASH_WaitForLastOperation+0x8c>)
 8000e16:	68cb      	ldr	r3, [r1, #12]
 8000e18:	421a      	tst	r2, r3
 8000e1a:	d1fc      	bne.n	8000e16 <FLASH_WaitForLastOperation+0x16>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000e1c:	2220      	movs	r2, #32
 8000e1e:	4b1b      	ldr	r3, [pc, #108]	; (8000e8c <FLASH_WaitForLastOperation+0x8c>)
 8000e20:	68d9      	ldr	r1, [r3, #12]
 8000e22:	420a      	tst	r2, r1
 8000e24:	d127      	bne.n	8000e76 <FLASH_WaitForLastOperation+0x76>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000e26:	4b19      	ldr	r3, [pc, #100]	; (8000e8c <FLASH_WaitForLastOperation+0x8c>)
 8000e28:	68da      	ldr	r2, [r3, #12]
 8000e2a:	06d2      	lsls	r2, r2, #27
 8000e2c:	d403      	bmi.n	8000e36 <FLASH_WaitForLastOperation+0x36>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000e2e:	68db      	ldr	r3, [r3, #12]
  return HAL_OK;
 8000e30:	2000      	movs	r0, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000e32:	075b      	lsls	r3, r3, #29
 8000e34:	d512      	bpl.n	8000e5c <FLASH_WaitForLastOperation+0x5c>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000e36:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <FLASH_WaitForLastOperation+0x8c>)
 8000e38:	68db      	ldr	r3, [r3, #12]
 8000e3a:	06db      	lsls	r3, r3, #27
 8000e3c:	d41d      	bmi.n	8000e7a <FLASH_WaitForLastOperation+0x7a>
 8000e3e:	2104      	movs	r1, #4
  uint32_t flags = 0U;
 8000e40:	2300      	movs	r3, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000e42:	4a12      	ldr	r2, [pc, #72]	; (8000e8c <FLASH_WaitForLastOperation+0x8c>)
 8000e44:	68d2      	ldr	r2, [r2, #12]
 8000e46:	0752      	lsls	r2, r2, #29
 8000e48:	d505      	bpl.n	8000e56 <FLASH_WaitForLastOperation+0x56>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	4a10      	ldr	r2, [pc, #64]	; (8000e90 <FLASH_WaitForLastOperation+0x90>)
 8000e4e:	69d3      	ldr	r3, [r2, #28]
 8000e50:	4303      	orrs	r3, r0
 8000e52:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8000e54:	000b      	movs	r3, r1
    return HAL_ERROR;
 8000e56:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000e58:	4a0c      	ldr	r2, [pc, #48]	; (8000e8c <FLASH_WaitForLastOperation+0x8c>)
 8000e5a:	60d3      	str	r3, [r2, #12]
}
 8000e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000e5e:	68f3      	ldr	r3, [r6, #12]
 8000e60:	421d      	tst	r5, r3
 8000e62:	d0db      	beq.n	8000e1c <FLASH_WaitForLastOperation+0x1c>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000e64:	2c00      	cmp	r4, #0
 8000e66:	d004      	beq.n	8000e72 <FLASH_WaitForLastOperation+0x72>
 8000e68:	f7ff faee 	bl	8000448 <HAL_GetTick>
 8000e6c:	1bc0      	subs	r0, r0, r7
 8000e6e:	4284      	cmp	r4, r0
 8000e70:	d2cd      	bcs.n	8000e0e <FLASH_WaitForLastOperation+0xe>
        return HAL_TIMEOUT;
 8000e72:	2003      	movs	r0, #3
 8000e74:	e7f2      	b.n	8000e5c <FLASH_WaitForLastOperation+0x5c>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000e76:	60da      	str	r2, [r3, #12]
 8000e78:	e7d5      	b.n	8000e26 <FLASH_WaitForLastOperation+0x26>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000e7a:	2102      	movs	r1, #2
 8000e7c:	4a04      	ldr	r2, [pc, #16]	; (8000e90 <FLASH_WaitForLastOperation+0x90>)
 8000e7e:	69d3      	ldr	r3, [r2, #28]
 8000e80:	430b      	orrs	r3, r1
 8000e82:	61d3      	str	r3, [r2, #28]
 8000e84:	3112      	adds	r1, #18
    flags |= FLASH_FLAG_WRPERR;
 8000e86:	2310      	movs	r3, #16
 8000e88:	e7db      	b.n	8000e42 <FLASH_WaitForLastOperation+0x42>
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	40022000 	.word	0x40022000
 8000e90:	20000168 	.word	0x20000168

08000e94 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e96:	464f      	mov	r7, r9
 8000e98:	4646      	mov	r6, r8
 8000e9a:	46d6      	mov	lr, sl
 8000e9c:	b5c0      	push	{r6, r7, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t address = 0U;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000e9e:	4f2f      	ldr	r7, [pc, #188]	; (8000f5c <HAL_FLASHEx_Erase+0xc8>)
{
 8000ea0:	0006      	movs	r6, r0
  __HAL_LOCK(&pFlash);
 8000ea2:	7e3b      	ldrb	r3, [r7, #24]
{
 8000ea4:	4689      	mov	r9, r1
  __HAL_LOCK(&pFlash);
 8000ea6:	2002      	movs	r0, #2
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d041      	beq.n	8000f30 <HAL_FLASHEx_Erase+0x9c>
 8000eac:	2301      	movs	r3, #1
 8000eae:	763b      	strb	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000eb0:	6833      	ldr	r3, [r6, #0]
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000eb2:	482b      	ldr	r0, [pc, #172]	; (8000f60 <HAL_FLASHEx_Erase+0xcc>)
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d034      	beq.n	8000f22 <HAL_FLASHEx_Erase+0x8e>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000eb8:	f7ff ffa2 	bl	8000e00 <FLASH_WaitForLastOperation>
 8000ebc:	2800      	cmp	r0, #0
 8000ebe:	d134      	bne.n	8000f2a <HAL_FLASHEx_Erase+0x96>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	464a      	mov	r2, r9
 8000ec4:	425b      	negs	r3, r3
 8000ec6:	6013      	str	r3, [r2, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000ec8:	68b3      	ldr	r3, [r6, #8]
        for(address = pEraseInit->PageAddress;
 8000eca:	6875      	ldr	r5, [r6, #4]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000ecc:	029b      	lsls	r3, r3, #10
 8000ece:	195b      	adds	r3, r3, r5
        for(address = pEraseInit->PageAddress;
 8000ed0:	429d      	cmp	r5, r3
 8000ed2:	d22a      	bcs.n	8000f2a <HAL_FLASHEx_Erase+0x96>
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000ed4:	2300      	movs	r3, #0

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000ed6:	4c23      	ldr	r4, [pc, #140]	; (8000f64 <HAL_FLASHEx_Erase+0xd0>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000ed8:	4698      	mov	r8, r3
 8000eda:	e00a      	b.n	8000ef2 <HAL_FLASHEx_Erase+0x5e>
            address += FLASH_PAGE_SIZE)
 8000edc:	2380      	movs	r3, #128	; 0x80
 8000ede:	00db      	lsls	r3, r3, #3
 8000ee0:	469c      	mov	ip, r3
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000ee2:	6872      	ldr	r2, [r6, #4]
            address += FLASH_PAGE_SIZE)
 8000ee4:	4465      	add	r5, ip
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000ee6:	4694      	mov	ip, r2
 8000ee8:	68b3      	ldr	r3, [r6, #8]
 8000eea:	029b      	lsls	r3, r3, #10
 8000eec:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 8000eee:	42ab      	cmp	r3, r5
 8000ef0:	d91c      	bls.n	8000f2c <HAL_FLASHEx_Erase+0x98>
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000ef2:	2202      	movs	r2, #2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000ef4:	4643      	mov	r3, r8
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000ef6:	4692      	mov	sl, r2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000ef8:	61fb      	str	r3, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000efa:	6923      	ldr	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000efc:	4818      	ldr	r0, [pc, #96]	; (8000f60 <HAL_FLASHEx_Erase+0xcc>)
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000efe:	4313      	orrs	r3, r2
 8000f00:	6123      	str	r3, [r4, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000f02:	6165      	str	r5, [r4, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000f04:	6923      	ldr	r3, [r4, #16]
 8000f06:	323e      	adds	r2, #62	; 0x3e
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	6123      	str	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f0c:	f7ff ff78 	bl	8000e00 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000f10:	4652      	mov	r2, sl
 8000f12:	6923      	ldr	r3, [r4, #16]
 8000f14:	4393      	bics	r3, r2
 8000f16:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8000f18:	2800      	cmp	r0, #0
 8000f1a:	d0df      	beq.n	8000edc <HAL_FLASHEx_Erase+0x48>
            *PageError = address;
 8000f1c:	464b      	mov	r3, r9
 8000f1e:	601d      	str	r5, [r3, #0]
            break;
 8000f20:	e004      	b.n	8000f2c <HAL_FLASHEx_Erase+0x98>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000f22:	f7ff ff6d 	bl	8000e00 <FLASH_WaitForLastOperation>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d007      	beq.n	8000f3a <HAL_FLASHEx_Erase+0xa6>
  HAL_StatusTypeDef status = HAL_ERROR;
 8000f2a:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	763b      	strb	r3, [r7, #24]
}
 8000f30:	bc1c      	pop	{r2, r3, r4}
 8000f32:	4690      	mov	r8, r2
 8000f34:	4699      	mov	r9, r3
 8000f36:	46a2      	mov	sl, r4
 8000f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000f3a:	2504      	movs	r5, #4
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000f3c:	2240      	movs	r2, #64	; 0x40
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000f3e:	4c09      	ldr	r4, [pc, #36]	; (8000f64 <HAL_FLASHEx_Erase+0xd0>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000f40:	61f8      	str	r0, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000f42:	6923      	ldr	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f44:	4806      	ldr	r0, [pc, #24]	; (8000f60 <HAL_FLASHEx_Erase+0xcc>)
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000f46:	432b      	orrs	r3, r5
 8000f48:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000f4a:	6923      	ldr	r3, [r4, #16]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f50:	f7ff ff56 	bl	8000e00 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000f54:	6923      	ldr	r3, [r4, #16]
 8000f56:	43ab      	bics	r3, r5
 8000f58:	6123      	str	r3, [r4, #16]
 8000f5a:	e7e7      	b.n	8000f2c <HAL_FLASHEx_Erase+0x98>
 8000f5c:	20000168 	.word	0x20000168
 8000f60:	0000c350 	.word	0x0000c350
 8000f64:	40022000 	.word	0x40022000

08000f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f6a:	46de      	mov	lr, fp
 8000f6c:	4657      	mov	r7, sl
 8000f6e:	464e      	mov	r6, r9
 8000f70:	4645      	mov	r5, r8
 8000f72:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000f74:	680b      	ldr	r3, [r1, #0]
{ 
 8000f76:	b085      	sub	sp, #20
 8000f78:	468b      	mov	fp, r1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000f7a:	469c      	mov	ip, r3
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d100      	bne.n	8000f84 <HAL_GPIO_Init+0x1c>
 8000f82:	e0b7      	b.n	80010f4 <HAL_GPIO_Init+0x18c>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f84:	4b64      	ldr	r3, [pc, #400]	; (8001118 <HAL_GPIO_Init+0x1b0>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f86:	46e1      	mov	r9, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f88:	469a      	mov	sl, r3
        temp = EXTI->IMR;
 8000f8a:	4b64      	ldr	r3, [pc, #400]	; (800111c <HAL_GPIO_Init+0x1b4>)
 8000f8c:	4698      	mov	r8, r3
 8000f8e:	e067      	b.n	8001060 <HAL_GPIO_Init+0xf8>
      temp = GPIOx->MODER;
 8000f90:	6803      	ldr	r3, [r0, #0]
 8000f92:	0056      	lsls	r6, r2, #1
 8000f94:	469c      	mov	ip, r3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000f96:	2303      	movs	r3, #3
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f98:	2703      	movs	r7, #3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000f9a:	40b3      	lsls	r3, r6
 8000f9c:	4664      	mov	r4, ip
 8000f9e:	43db      	mvns	r3, r3
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fa0:	400f      	ands	r7, r1
 8000fa2:	40b7      	lsls	r7, r6
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000fa4:	401c      	ands	r4, r3
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fa6:	433c      	orrs	r4, r7
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fa8:	9f01      	ldr	r7, [sp, #4]
      GPIOx->MODER = temp;
 8000faa:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fac:	3f01      	subs	r7, #1
 8000fae:	2f01      	cmp	r7, #1
 8000fb0:	d800      	bhi.n	8000fb4 <HAL_GPIO_Init+0x4c>
 8000fb2:	e081      	b.n	80010b8 <HAL_GPIO_Init+0x150>
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000fb4:	465c      	mov	r4, fp
      temp = GPIOx->PUPDR;
 8000fb6:	68c5      	ldr	r5, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fb8:	402b      	ands	r3, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000fba:	68a5      	ldr	r5, [r4, #8]
 8000fbc:	40b5      	lsls	r5, r6
 8000fbe:	432b      	orrs	r3, r5
      GPIOx->PUPDR = temp;
 8000fc0:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000fc2:	2380      	movs	r3, #128	; 0x80
 8000fc4:	055b      	lsls	r3, r3, #21
 8000fc6:	4219      	tst	r1, r3
 8000fc8:	d046      	beq.n	8001058 <HAL_GPIO_Init+0xf0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fca:	4653      	mov	r3, sl
 8000fcc:	2401      	movs	r4, #1
 8000fce:	699b      	ldr	r3, [r3, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000fd0:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd2:	4323      	orrs	r3, r4
 8000fd4:	4654      	mov	r4, sl
 8000fd6:	61a3      	str	r3, [r4, #24]
 8000fd8:	69a3      	ldr	r3, [r4, #24]
 8000fda:	2401      	movs	r4, #1
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000fdc:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fde:	4023      	ands	r3, r4
 8000fe0:	4c4f      	ldr	r4, [pc, #316]	; (8001120 <HAL_GPIO_Init+0x1b8>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000fe2:	4016      	ands	r6, r2
 8000fe4:	46a4      	mov	ip, r4
 8000fe6:	00b6      	lsls	r6, r6, #2
 8000fe8:	40b7      	lsls	r7, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fea:	2490      	movs	r4, #144	; 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fec:	9303      	str	r3, [sp, #12]
 8000fee:	9b03      	ldr	r3, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8000ff0:	0893      	lsrs	r3, r2, #2
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	4463      	add	r3, ip
 8000ff6:	689d      	ldr	r5, [r3, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ff8:	05e4      	lsls	r4, r4, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000ffa:	43bd      	bics	r5, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ffc:	42a0      	cmp	r0, r4
 8000ffe:	d100      	bne.n	8001002 <HAL_GPIO_Init+0x9a>
 8001000:	e07f      	b.n	8001102 <HAL_GPIO_Init+0x19a>
 8001002:	4f48      	ldr	r7, [pc, #288]	; (8001124 <HAL_GPIO_Init+0x1bc>)
 8001004:	42b8      	cmp	r0, r7
 8001006:	d100      	bne.n	800100a <HAL_GPIO_Init+0xa2>
 8001008:	e07d      	b.n	8001106 <HAL_GPIO_Init+0x19e>
 800100a:	4f47      	ldr	r7, [pc, #284]	; (8001128 <HAL_GPIO_Init+0x1c0>)
 800100c:	42b8      	cmp	r0, r7
 800100e:	d100      	bne.n	8001012 <HAL_GPIO_Init+0xaa>
 8001010:	e07c      	b.n	800110c <HAL_GPIO_Init+0x1a4>
 8001012:	4f46      	ldr	r7, [pc, #280]	; (800112c <HAL_GPIO_Init+0x1c4>)
 8001014:	42b8      	cmp	r0, r7
 8001016:	d100      	bne.n	800101a <HAL_GPIO_Init+0xb2>
 8001018:	e07b      	b.n	8001112 <HAL_GPIO_Init+0x1aa>
 800101a:	2705      	movs	r7, #5
 800101c:	40b7      	lsls	r7, r6
 800101e:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8001020:	609d      	str	r5, [r3, #8]
        temp = EXTI->IMR;
 8001022:	4643      	mov	r3, r8
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001024:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->IMR;
 8001026:	681b      	ldr	r3, [r3, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001028:	43e5      	mvns	r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800102a:	03cc      	lsls	r4, r1, #15
 800102c:	d45f      	bmi.n	80010ee <HAL_GPIO_Init+0x186>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800102e:	402b      	ands	r3, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 8001030:	4644      	mov	r4, r8
 8001032:	6023      	str	r3, [r4, #0]

        temp = EXTI->EMR;
 8001034:	6863      	ldr	r3, [r4, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001036:	038c      	lsls	r4, r1, #14
 8001038:	d456      	bmi.n	80010e8 <HAL_GPIO_Init+0x180>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 800103a:	402b      	ands	r3, r5
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 800103c:	4644      	mov	r4, r8
 800103e:	6063      	str	r3, [r4, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001040:	68a3      	ldr	r3, [r4, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001042:	02cc      	lsls	r4, r1, #11
 8001044:	d44d      	bmi.n	80010e2 <HAL_GPIO_Init+0x17a>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001046:	402b      	ands	r3, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 8001048:	4644      	mov	r4, r8
 800104a:	60a3      	str	r3, [r4, #8]

        temp = EXTI->FTSR;
 800104c:	68e3      	ldr	r3, [r4, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800104e:	0289      	lsls	r1, r1, #10
 8001050:	d444      	bmi.n	80010dc <HAL_GPIO_Init+0x174>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001052:	402b      	ands	r3, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 8001054:	4641      	mov	r1, r8
 8001056:	60cb      	str	r3, [r1, #12]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001058:	464b      	mov	r3, r9
      }
    }
    
    position++;
 800105a:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 800105c:	40d3      	lsrs	r3, r2
 800105e:	d049      	beq.n	80010f4 <HAL_GPIO_Init+0x18c>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001060:	2501      	movs	r5, #1
 8001062:	464c      	mov	r4, r9
 8001064:	4095      	lsls	r5, r2
 8001066:	402c      	ands	r4, r5
 8001068:	9400      	str	r4, [sp, #0]
    if(iocurrent)
 800106a:	d0f5      	beq.n	8001058 <HAL_GPIO_Init+0xf0>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800106c:	465b      	mov	r3, fp
 800106e:	6859      	ldr	r1, [r3, #4]
 8001070:	2310      	movs	r3, #16
 8001072:	000f      	movs	r7, r1
 8001074:	439f      	bics	r7, r3
 8001076:	003b      	movs	r3, r7
 8001078:	9701      	str	r7, [sp, #4]
 800107a:	2f02      	cmp	r7, #2
 800107c:	d188      	bne.n	8000f90 <HAL_GPIO_Init+0x28>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 800107e:	240f      	movs	r4, #15
 8001080:	3305      	adds	r3, #5
 8001082:	4013      	ands	r3, r2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	409c      	lsls	r4, r3
        temp = GPIOx->AFR[position >> 3];
 8001088:	08d6      	lsrs	r6, r2, #3
 800108a:	00b6      	lsls	r6, r6, #2
 800108c:	1986      	adds	r6, r0, r6
 800108e:	6a37      	ldr	r7, [r6, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8001090:	43a7      	bics	r7, r4
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8001092:	465c      	mov	r4, fp
 8001094:	6924      	ldr	r4, [r4, #16]
 8001096:	409c      	lsls	r4, r3
 8001098:	0023      	movs	r3, r4
 800109a:	433b      	orrs	r3, r7
        GPIOx->AFR[position >> 3U] = temp;
 800109c:	6233      	str	r3, [r6, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 800109e:	2303      	movs	r3, #3
 80010a0:	0056      	lsls	r6, r2, #1
 80010a2:	40b3      	lsls	r3, r6
 80010a4:	43db      	mvns	r3, r3
      temp = GPIOx->MODER;
 80010a6:	6807      	ldr	r7, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80010a8:	401f      	ands	r7, r3
 80010aa:	46bc      	mov	ip, r7
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010ac:	2703      	movs	r7, #3
 80010ae:	400f      	ands	r7, r1
 80010b0:	40b7      	lsls	r7, r6
 80010b2:	4664      	mov	r4, ip
 80010b4:	4327      	orrs	r7, r4
      GPIOx->MODER = temp;
 80010b6:	6007      	str	r7, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 80010b8:	6887      	ldr	r7, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80010ba:	465c      	mov	r4, fp
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010bc:	401f      	ands	r7, r3
 80010be:	46bc      	mov	ip, r7
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80010c0:	68e7      	ldr	r7, [r4, #12]
 80010c2:	4664      	mov	r4, ip
 80010c4:	40b7      	lsls	r7, r6
 80010c6:	4327      	orrs	r7, r4
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010c8:	2401      	movs	r4, #1
        GPIOx->OSPEEDR = temp;
 80010ca:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80010cc:	6847      	ldr	r7, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80010ce:	43af      	bics	r7, r5
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010d0:	090d      	lsrs	r5, r1, #4
 80010d2:	4025      	ands	r5, r4
 80010d4:	4095      	lsls	r5, r2
 80010d6:	433d      	orrs	r5, r7
        GPIOx->OTYPER = temp;
 80010d8:	6045      	str	r5, [r0, #4]
 80010da:	e76b      	b.n	8000fb4 <HAL_GPIO_Init+0x4c>
          SET_BIT(temp, iocurrent); 
 80010dc:	9900      	ldr	r1, [sp, #0]
 80010de:	430b      	orrs	r3, r1
 80010e0:	e7b8      	b.n	8001054 <HAL_GPIO_Init+0xec>
          SET_BIT(temp, iocurrent); 
 80010e2:	9c00      	ldr	r4, [sp, #0]
 80010e4:	4323      	orrs	r3, r4
 80010e6:	e7af      	b.n	8001048 <HAL_GPIO_Init+0xe0>
          SET_BIT(temp, iocurrent); 
 80010e8:	9c00      	ldr	r4, [sp, #0]
 80010ea:	4323      	orrs	r3, r4
 80010ec:	e7a6      	b.n	800103c <HAL_GPIO_Init+0xd4>
          SET_BIT(temp, iocurrent); 
 80010ee:	9c00      	ldr	r4, [sp, #0]
 80010f0:	4323      	orrs	r3, r4
 80010f2:	e79d      	b.n	8001030 <HAL_GPIO_Init+0xc8>
  } 
}
 80010f4:	b005      	add	sp, #20
 80010f6:	bc3c      	pop	{r2, r3, r4, r5}
 80010f8:	4690      	mov	r8, r2
 80010fa:	4699      	mov	r9, r3
 80010fc:	46a2      	mov	sl, r4
 80010fe:	46ab      	mov	fp, r5
 8001100:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001102:	2700      	movs	r7, #0
 8001104:	e78b      	b.n	800101e <HAL_GPIO_Init+0xb6>
 8001106:	2701      	movs	r7, #1
 8001108:	40b7      	lsls	r7, r6
 800110a:	e788      	b.n	800101e <HAL_GPIO_Init+0xb6>
 800110c:	2702      	movs	r7, #2
 800110e:	40b7      	lsls	r7, r6
 8001110:	e785      	b.n	800101e <HAL_GPIO_Init+0xb6>
 8001112:	2703      	movs	r7, #3
 8001114:	40b7      	lsls	r7, r6
 8001116:	e782      	b.n	800101e <HAL_GPIO_Init+0xb6>
 8001118:	40021000 	.word	0x40021000
 800111c:	40010400 	.word	0x40010400
 8001120:	40010000 	.word	0x40010000
 8001124:	48000400 	.word	0x48000400
 8001128:	48000800 	.word	0x48000800
 800112c:	48000c00 	.word	0x48000c00

08001130 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001130:	6943      	ldr	r3, [r0, #20]
 8001132:	4059      	eors	r1, r3
 8001134:	6141      	str	r1, [r0, #20]
}
 8001136:	4770      	bx	lr

08001138 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001138:	b570      	push	{r4, r5, r6, lr}
 800113a:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 800113c:	d01e      	beq.n	800117c <HAL_IWDG_Init+0x44>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 800113e:	6803      	ldr	r3, [r0, #0]
 8001140:	4a11      	ldr	r2, [pc, #68]	; (8001188 <HAL_IWDG_Init+0x50>)
 8001142:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001144:	4a11      	ldr	r2, [pc, #68]	; (800118c <HAL_IWDG_Init+0x54>)
 8001146:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001148:	6842      	ldr	r2, [r0, #4]
 800114a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800114c:	6882      	ldr	r2, [r0, #8]
 800114e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001150:	f7ff f97a 	bl	8000448 <HAL_GetTick>
 8001154:	0005      	movs	r5, r0

   /* Wait for register to be updated */
  while(hiwdg->Instance->SR != RESET)
 8001156:	e004      	b.n	8001162 <HAL_IWDG_Init+0x2a>
  {
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001158:	f7ff f976 	bl	8000448 <HAL_GetTick>
 800115c:	1b40      	subs	r0, r0, r5
 800115e:	2827      	cmp	r0, #39	; 0x27
 8001160:	d80a      	bhi.n	8001178 <HAL_IWDG_Init+0x40>
  while(hiwdg->Instance->SR != RESET)
 8001162:	6823      	ldr	r3, [r4, #0]
 8001164:	68da      	ldr	r2, [r3, #12]
 8001166:	2a00      	cmp	r2, #0
 8001168:	d1f6      	bne.n	8001158 <HAL_IWDG_Init+0x20>
    }
  }

  /* If window parameter is different than current value, modify window 
  register */
  if(hiwdg->Instance->WINR != hiwdg->Init.Window)
 800116a:	6919      	ldr	r1, [r3, #16]
 800116c:	68e2      	ldr	r2, [r4, #12]
 800116e:	4291      	cmp	r1, r2
 8001170:	d006      	beq.n	8001180 <HAL_IWDG_Init+0x48>
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
  }

  /* Return function status */
  return HAL_OK;
 8001172:	2000      	movs	r0, #0
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8001174:	611a      	str	r2, [r3, #16]
}
 8001176:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 8001178:	2003      	movs	r0, #3
 800117a:	e7fc      	b.n	8001176 <HAL_IWDG_Init+0x3e>
    return HAL_ERROR;
 800117c:	2001      	movs	r0, #1
 800117e:	e7fa      	b.n	8001176 <HAL_IWDG_Init+0x3e>
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001180:	4a03      	ldr	r2, [pc, #12]	; (8001190 <HAL_IWDG_Init+0x58>)
  return HAL_OK;
 8001182:	2000      	movs	r0, #0
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	e7f6      	b.n	8001176 <HAL_IWDG_Init+0x3e>
 8001188:	0000cccc 	.word	0x0000cccc
 800118c:	00005555 	.word	0x00005555
 8001190:	0000aaaa 	.word	0x0000aaaa

08001194 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001194:	6803      	ldr	r3, [r0, #0]
 8001196:	4a02      	ldr	r2, [pc, #8]	; (80011a0 <HAL_IWDG_Refresh+0xc>)

  /* Return function status */
  return HAL_OK;
}
 8001198:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800119a:	601a      	str	r2, [r3, #0]
}
 800119c:	4770      	bx	lr
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	0000aaaa 	.word	0x0000aaaa

080011a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011a6:	46ce      	mov	lr, r9
 80011a8:	4647      	mov	r7, r8
 80011aa:	b580      	push	{r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ac:	6803      	ldr	r3, [r0, #0]
{
 80011ae:	b083      	sub	sp, #12
 80011b0:	0004      	movs	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011b2:	07da      	lsls	r2, r3, #31
 80011b4:	d52f      	bpl.n	8001216 <HAL_RCC_OscConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80011b6:	220c      	movs	r2, #12
 80011b8:	48c4      	ldr	r0, [pc, #784]	; (80014cc <HAL_RCC_OscConfig+0x328>)
 80011ba:	6841      	ldr	r1, [r0, #4]
 80011bc:	4011      	ands	r1, r2
 80011be:	2904      	cmp	r1, #4
 80011c0:	d100      	bne.n	80011c4 <HAL_RCC_OscConfig+0x20>
 80011c2:	e110      	b.n	80013e6 <HAL_RCC_OscConfig+0x242>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011c4:	6841      	ldr	r1, [r0, #4]
 80011c6:	400a      	ands	r2, r1
 80011c8:	2a08      	cmp	r2, #8
 80011ca:	d100      	bne.n	80011ce <HAL_RCC_OscConfig+0x2a>
 80011cc:	e107      	b.n	80013de <HAL_RCC_OscConfig+0x23a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ce:	6863      	ldr	r3, [r4, #4]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d100      	bne.n	80011d6 <HAL_RCC_OscConfig+0x32>
 80011d4:	e186      	b.n	80014e4 <HAL_RCC_OscConfig+0x340>
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d100      	bne.n	80011dc <HAL_RCC_OscConfig+0x38>
 80011da:	e11a      	b.n	8001412 <HAL_RCC_OscConfig+0x26e>
 80011dc:	2b05      	cmp	r3, #5
 80011de:	d100      	bne.n	80011e2 <HAL_RCC_OscConfig+0x3e>
 80011e0:	e1db      	b.n	800159a <HAL_RCC_OscConfig+0x3f6>
 80011e2:	4bba      	ldr	r3, [pc, #744]	; (80014cc <HAL_RCC_OscConfig+0x328>)
 80011e4:	49ba      	ldr	r1, [pc, #744]	; (80014d0 <HAL_RCC_OscConfig+0x32c>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	400a      	ands	r2, r1
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	49b9      	ldr	r1, [pc, #740]	; (80014d4 <HAL_RCC_OscConfig+0x330>)
 80011f0:	400a      	ands	r2, r1
 80011f2:	601a      	str	r2, [r3, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f4:	f7ff f928 	bl	8000448 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011f8:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 80011fa:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011fc:	4eb3      	ldr	r6, [pc, #716]	; (80014cc <HAL_RCC_OscConfig+0x328>)
 80011fe:	02ad      	lsls	r5, r5, #10
 8001200:	e005      	b.n	800120e <HAL_RCC_OscConfig+0x6a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001202:	f7ff f921 	bl	8000448 <HAL_GetTick>
 8001206:	1bc0      	subs	r0, r0, r7
 8001208:	2864      	cmp	r0, #100	; 0x64
 800120a:	d900      	bls.n	800120e <HAL_RCC_OscConfig+0x6a>
 800120c:	e12f      	b.n	800146e <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800120e:	6833      	ldr	r3, [r6, #0]
 8001210:	422b      	tst	r3, r5
 8001212:	d0f6      	beq.n	8001202 <HAL_RCC_OscConfig+0x5e>
 8001214:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001216:	079a      	lsls	r2, r3, #30
 8001218:	d529      	bpl.n	800126e <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800121a:	220c      	movs	r2, #12
 800121c:	49ab      	ldr	r1, [pc, #684]	; (80014cc <HAL_RCC_OscConfig+0x328>)
 800121e:	6848      	ldr	r0, [r1, #4]
 8001220:	4202      	tst	r2, r0
 8001222:	d100      	bne.n	8001226 <HAL_RCC_OscConfig+0x82>
 8001224:	e0bf      	b.n	80013a6 <HAL_RCC_OscConfig+0x202>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001226:	6848      	ldr	r0, [r1, #4]
 8001228:	4002      	ands	r2, r0
 800122a:	2a08      	cmp	r2, #8
 800122c:	d100      	bne.n	8001230 <HAL_RCC_OscConfig+0x8c>
 800122e:	e0b6      	b.n	800139e <HAL_RCC_OscConfig+0x1fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001230:	68e3      	ldr	r3, [r4, #12]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001232:	4da6      	ldr	r5, [pc, #664]	; (80014cc <HAL_RCC_OscConfig+0x328>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001234:	2b00      	cmp	r3, #0
 8001236:	d100      	bne.n	800123a <HAL_RCC_OscConfig+0x96>
 8001238:	e134      	b.n	80014a4 <HAL_RCC_OscConfig+0x300>
        __HAL_RCC_HSI_ENABLE();
 800123a:	2201      	movs	r2, #1
 800123c:	682b      	ldr	r3, [r5, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800123e:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8001240:	4313      	orrs	r3, r2
 8001242:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001244:	f7ff f900 	bl	8000448 <HAL_GetTick>
 8001248:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800124a:	e005      	b.n	8001258 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800124c:	f7ff f8fc 	bl	8000448 <HAL_GetTick>
 8001250:	1bc0      	subs	r0, r0, r7
 8001252:	2802      	cmp	r0, #2
 8001254:	d900      	bls.n	8001258 <HAL_RCC_OscConfig+0xb4>
 8001256:	e10a      	b.n	800146e <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001258:	682b      	ldr	r3, [r5, #0]
 800125a:	421e      	tst	r6, r3
 800125c:	d0f6      	beq.n	800124c <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800125e:	21f8      	movs	r1, #248	; 0xf8
 8001260:	682a      	ldr	r2, [r5, #0]
 8001262:	6923      	ldr	r3, [r4, #16]
 8001264:	438a      	bics	r2, r1
 8001266:	00db      	lsls	r3, r3, #3
 8001268:	4313      	orrs	r3, r2
 800126a:	602b      	str	r3, [r5, #0]
 800126c:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800126e:	071a      	lsls	r2, r3, #28
 8001270:	d500      	bpl.n	8001274 <HAL_RCC_OscConfig+0xd0>
 8001272:	e07d      	b.n	8001370 <HAL_RCC_OscConfig+0x1cc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001274:	075a      	lsls	r2, r3, #29
 8001276:	d540      	bpl.n	80012fa <HAL_RCC_OscConfig+0x156>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001278:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800127a:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800127c:	4b93      	ldr	r3, [pc, #588]	; (80014cc <HAL_RCC_OscConfig+0x328>)
 800127e:	0552      	lsls	r2, r2, #21
 8001280:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001282:	4680      	mov	r8, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001284:	4211      	tst	r1, r2
 8001286:	d108      	bne.n	800129a <HAL_RCC_OscConfig+0xf6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001288:	69d9      	ldr	r1, [r3, #28]
 800128a:	4311      	orrs	r1, r2
 800128c:	61d9      	str	r1, [r3, #28]
 800128e:	69db      	ldr	r3, [r3, #28]
 8001290:	401a      	ands	r2, r3
 8001292:	9201      	str	r2, [sp, #4]
 8001294:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001296:	2301      	movs	r3, #1
 8001298:	4698      	mov	r8, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800129a:	2780      	movs	r7, #128	; 0x80
 800129c:	4e8e      	ldr	r6, [pc, #568]	; (80014d8 <HAL_RCC_OscConfig+0x334>)
 800129e:	007f      	lsls	r7, r7, #1
 80012a0:	6833      	ldr	r3, [r6, #0]
 80012a2:	423b      	tst	r3, r7
 80012a4:	d100      	bne.n	80012a8 <HAL_RCC_OscConfig+0x104>
 80012a6:	e0cd      	b.n	8001444 <HAL_RCC_OscConfig+0x2a0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012a8:	68a3      	ldr	r3, [r4, #8]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d100      	bne.n	80012b0 <HAL_RCC_OscConfig+0x10c>
 80012ae:	e0d9      	b.n	8001464 <HAL_RCC_OscConfig+0x2c0>
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d100      	bne.n	80012b6 <HAL_RCC_OscConfig+0x112>
 80012b4:	e0dd      	b.n	8001472 <HAL_RCC_OscConfig+0x2ce>
 80012b6:	2b05      	cmp	r3, #5
 80012b8:	d100      	bne.n	80012bc <HAL_RCC_OscConfig+0x118>
 80012ba:	e198      	b.n	80015ee <HAL_RCC_OscConfig+0x44a>
 80012bc:	2101      	movs	r1, #1
 80012be:	4b83      	ldr	r3, [pc, #524]	; (80014cc <HAL_RCC_OscConfig+0x328>)
 80012c0:	6a1a      	ldr	r2, [r3, #32]
 80012c2:	438a      	bics	r2, r1
 80012c4:	621a      	str	r2, [r3, #32]
 80012c6:	6a1a      	ldr	r2, [r3, #32]
 80012c8:	3103      	adds	r1, #3
 80012ca:	438a      	bics	r2, r1
 80012cc:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ce:	f7ff f8bb 	bl	8000448 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012d2:	4f7e      	ldr	r7, [pc, #504]	; (80014cc <HAL_RCC_OscConfig+0x328>)
      tickstart = HAL_GetTick();
 80012d4:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012d6:	2602      	movs	r6, #2
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012d8:	4d80      	ldr	r5, [pc, #512]	; (80014dc <HAL_RCC_OscConfig+0x338>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012da:	e006      	b.n	80012ea <HAL_RCC_OscConfig+0x146>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012dc:	f7ff f8b4 	bl	8000448 <HAL_GetTick>
 80012e0:	464b      	mov	r3, r9
 80012e2:	1ac0      	subs	r0, r0, r3
 80012e4:	42a8      	cmp	r0, r5
 80012e6:	d900      	bls.n	80012ea <HAL_RCC_OscConfig+0x146>
 80012e8:	e0c1      	b.n	800146e <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012ea:	6a3b      	ldr	r3, [r7, #32]
 80012ec:	421e      	tst	r6, r3
 80012ee:	d0f5      	beq.n	80012dc <HAL_RCC_OscConfig+0x138>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80012f0:	4643      	mov	r3, r8
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d100      	bne.n	80012f8 <HAL_RCC_OscConfig+0x154>
 80012f6:	e113      	b.n	8001520 <HAL_RCC_OscConfig+0x37c>
 80012f8:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80012fa:	06db      	lsls	r3, r3, #27
 80012fc:	d512      	bpl.n	8001324 <HAL_RCC_OscConfig+0x180>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80012fe:	6963      	ldr	r3, [r4, #20]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d100      	bne.n	8001306 <HAL_RCC_OscConfig+0x162>
 8001304:	e155      	b.n	80015b2 <HAL_RCC_OscConfig+0x40e>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001306:	3305      	adds	r3, #5
 8001308:	d000      	beq.n	800130c <HAL_RCC_OscConfig+0x168>
 800130a:	e0f2      	b.n	80014f2 <HAL_RCC_OscConfig+0x34e>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800130c:	2104      	movs	r1, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800130e:	20f8      	movs	r0, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 8001310:	4a6e      	ldr	r2, [pc, #440]	; (80014cc <HAL_RCC_OscConfig+0x328>)
 8001312:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001314:	438b      	bics	r3, r1
 8001316:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001318:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800131a:	69a3      	ldr	r3, [r4, #24]
 800131c:	4381      	bics	r1, r0
 800131e:	00db      	lsls	r3, r3, #3
 8001320:	430b      	orrs	r3, r1
 8001322:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001324:	6a23      	ldr	r3, [r4, #32]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d01c      	beq.n	8001364 <HAL_RCC_OscConfig+0x1c0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800132a:	220c      	movs	r2, #12
 800132c:	4d67      	ldr	r5, [pc, #412]	; (80014cc <HAL_RCC_OscConfig+0x328>)
 800132e:	6869      	ldr	r1, [r5, #4]
 8001330:	400a      	ands	r2, r1
 8001332:	2a08      	cmp	r2, #8
 8001334:	d03e      	beq.n	80013b4 <HAL_RCC_OscConfig+0x210>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001336:	2b02      	cmp	r3, #2
 8001338:	d100      	bne.n	800133c <HAL_RCC_OscConfig+0x198>
 800133a:	e0f8      	b.n	800152e <HAL_RCC_OscConfig+0x38a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800133c:	682b      	ldr	r3, [r5, #0]
 800133e:	4a68      	ldr	r2, [pc, #416]	; (80014e0 <HAL_RCC_OscConfig+0x33c>)
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001340:	002c      	movs	r4, r5
        __HAL_RCC_PLL_DISABLE();
 8001342:	4013      	ands	r3, r2
 8001344:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001346:	f7ff f87f 	bl	8000448 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800134a:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 800134c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800134e:	04ad      	lsls	r5, r5, #18
 8001350:	e005      	b.n	800135e <HAL_RCC_OscConfig+0x1ba>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001352:	f7ff f879 	bl	8000448 <HAL_GetTick>
 8001356:	1b80      	subs	r0, r0, r6
 8001358:	2802      	cmp	r0, #2
 800135a:	d900      	bls.n	800135e <HAL_RCC_OscConfig+0x1ba>
 800135c:	e087      	b.n	800146e <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800135e:	6823      	ldr	r3, [r4, #0]
 8001360:	422b      	tst	r3, r5
 8001362:	d1f6      	bne.n	8001352 <HAL_RCC_OscConfig+0x1ae>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001364:	2000      	movs	r0, #0
}
 8001366:	b003      	add	sp, #12
 8001368:	bc0c      	pop	{r2, r3}
 800136a:	4690      	mov	r8, r2
 800136c:	4699      	mov	r9, r3
 800136e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001370:	69e3      	ldr	r3, [r4, #28]
      __HAL_RCC_LSI_ENABLE();
 8001372:	4d56      	ldr	r5, [pc, #344]	; (80014cc <HAL_RCC_OscConfig+0x328>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001374:	2b00      	cmp	r3, #0
 8001376:	d01f      	beq.n	80013b8 <HAL_RCC_OscConfig+0x214>
      __HAL_RCC_LSI_ENABLE();
 8001378:	2201      	movs	r2, #1
 800137a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800137c:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 800137e:	4313      	orrs	r3, r2
 8001380:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8001382:	f7ff f861 	bl	8000448 <HAL_GetTick>
 8001386:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001388:	e004      	b.n	8001394 <HAL_RCC_OscConfig+0x1f0>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800138a:	f7ff f85d 	bl	8000448 <HAL_GetTick>
 800138e:	1bc0      	subs	r0, r0, r7
 8001390:	2802      	cmp	r0, #2
 8001392:	d86c      	bhi.n	800146e <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001394:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001396:	421e      	tst	r6, r3
 8001398:	d0f7      	beq.n	800138a <HAL_RCC_OscConfig+0x1e6>
 800139a:	6823      	ldr	r3, [r4, #0]
 800139c:	e76a      	b.n	8001274 <HAL_RCC_OscConfig+0xd0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800139e:	684a      	ldr	r2, [r1, #4]
 80013a0:	03d2      	lsls	r2, r2, #15
 80013a2:	d500      	bpl.n	80013a6 <HAL_RCC_OscConfig+0x202>
 80013a4:	e744      	b.n	8001230 <HAL_RCC_OscConfig+0x8c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013a6:	4a49      	ldr	r2, [pc, #292]	; (80014cc <HAL_RCC_OscConfig+0x328>)
 80013a8:	6812      	ldr	r2, [r2, #0]
 80013aa:	0792      	lsls	r2, r2, #30
 80013ac:	d525      	bpl.n	80013fa <HAL_RCC_OscConfig+0x256>
 80013ae:	68e2      	ldr	r2, [r4, #12]
 80013b0:	2a01      	cmp	r2, #1
 80013b2:	d022      	beq.n	80013fa <HAL_RCC_OscConfig+0x256>
      return HAL_ERROR;
 80013b4:	2001      	movs	r0, #1
 80013b6:	e7d6      	b.n	8001366 <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_DISABLE();
 80013b8:	2201      	movs	r2, #1
 80013ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013bc:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 80013be:	4393      	bics	r3, r2
 80013c0:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80013c2:	f7ff f841 	bl	8000448 <HAL_GetTick>
 80013c6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013c8:	e004      	b.n	80013d4 <HAL_RCC_OscConfig+0x230>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013ca:	f7ff f83d 	bl	8000448 <HAL_GetTick>
 80013ce:	1bc0      	subs	r0, r0, r7
 80013d0:	2802      	cmp	r0, #2
 80013d2:	d84c      	bhi.n	800146e <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013d4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80013d6:	421e      	tst	r6, r3
 80013d8:	d1f7      	bne.n	80013ca <HAL_RCC_OscConfig+0x226>
 80013da:	6823      	ldr	r3, [r4, #0]
 80013dc:	e74a      	b.n	8001274 <HAL_RCC_OscConfig+0xd0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013de:	6842      	ldr	r2, [r0, #4]
 80013e0:	03d2      	lsls	r2, r2, #15
 80013e2:	d400      	bmi.n	80013e6 <HAL_RCC_OscConfig+0x242>
 80013e4:	e6f3      	b.n	80011ce <HAL_RCC_OscConfig+0x2a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e6:	4a39      	ldr	r2, [pc, #228]	; (80014cc <HAL_RCC_OscConfig+0x328>)
 80013e8:	6812      	ldr	r2, [r2, #0]
 80013ea:	0392      	lsls	r2, r2, #14
 80013ec:	d400      	bmi.n	80013f0 <HAL_RCC_OscConfig+0x24c>
 80013ee:	e712      	b.n	8001216 <HAL_RCC_OscConfig+0x72>
 80013f0:	6862      	ldr	r2, [r4, #4]
 80013f2:	2a00      	cmp	r2, #0
 80013f4:	d000      	beq.n	80013f8 <HAL_RCC_OscConfig+0x254>
 80013f6:	e70e      	b.n	8001216 <HAL_RCC_OscConfig+0x72>
 80013f8:	e7dc      	b.n	80013b4 <HAL_RCC_OscConfig+0x210>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013fa:	25f8      	movs	r5, #248	; 0xf8
 80013fc:	4833      	ldr	r0, [pc, #204]	; (80014cc <HAL_RCC_OscConfig+0x328>)
 80013fe:	6922      	ldr	r2, [r4, #16]
 8001400:	6801      	ldr	r1, [r0, #0]
 8001402:	00d2      	lsls	r2, r2, #3
 8001404:	43a9      	bics	r1, r5
 8001406:	430a      	orrs	r2, r1
 8001408:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800140a:	071a      	lsls	r2, r3, #28
 800140c:	d400      	bmi.n	8001410 <HAL_RCC_OscConfig+0x26c>
 800140e:	e731      	b.n	8001274 <HAL_RCC_OscConfig+0xd0>
 8001410:	e7ae      	b.n	8001370 <HAL_RCC_OscConfig+0x1cc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001412:	4d2e      	ldr	r5, [pc, #184]	; (80014cc <HAL_RCC_OscConfig+0x328>)
 8001414:	4a2e      	ldr	r2, [pc, #184]	; (80014d0 <HAL_RCC_OscConfig+0x32c>)
 8001416:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001418:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800141a:	4013      	ands	r3, r2
 800141c:	602b      	str	r3, [r5, #0]
 800141e:	682b      	ldr	r3, [r5, #0]
 8001420:	4a2c      	ldr	r2, [pc, #176]	; (80014d4 <HAL_RCC_OscConfig+0x330>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001422:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001424:	4013      	ands	r3, r2
 8001426:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001428:	f7ff f80e 	bl	8000448 <HAL_GetTick>
 800142c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800142e:	e004      	b.n	800143a <HAL_RCC_OscConfig+0x296>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001430:	f7ff f80a 	bl	8000448 <HAL_GetTick>
 8001434:	1bc0      	subs	r0, r0, r7
 8001436:	2864      	cmp	r0, #100	; 0x64
 8001438:	d819      	bhi.n	800146e <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800143a:	682b      	ldr	r3, [r5, #0]
 800143c:	4233      	tst	r3, r6
 800143e:	d1f7      	bne.n	8001430 <HAL_RCC_OscConfig+0x28c>
 8001440:	6823      	ldr	r3, [r4, #0]
 8001442:	e6e8      	b.n	8001216 <HAL_RCC_OscConfig+0x72>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001444:	6833      	ldr	r3, [r6, #0]
 8001446:	433b      	orrs	r3, r7
 8001448:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800144a:	f7fe fffd 	bl	8000448 <HAL_GetTick>
 800144e:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001450:	e004      	b.n	800145c <HAL_RCC_OscConfig+0x2b8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001452:	f7fe fff9 	bl	8000448 <HAL_GetTick>
 8001456:	1b40      	subs	r0, r0, r5
 8001458:	2864      	cmp	r0, #100	; 0x64
 800145a:	d808      	bhi.n	800146e <HAL_RCC_OscConfig+0x2ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800145c:	6833      	ldr	r3, [r6, #0]
 800145e:	423b      	tst	r3, r7
 8001460:	d0f7      	beq.n	8001452 <HAL_RCC_OscConfig+0x2ae>
 8001462:	e721      	b.n	80012a8 <HAL_RCC_OscConfig+0x104>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001464:	4919      	ldr	r1, [pc, #100]	; (80014cc <HAL_RCC_OscConfig+0x328>)
 8001466:	6a0a      	ldr	r2, [r1, #32]
 8001468:	4313      	orrs	r3, r2
 800146a:	620b      	str	r3, [r1, #32]
 800146c:	e72f      	b.n	80012ce <HAL_RCC_OscConfig+0x12a>
            return HAL_TIMEOUT;
 800146e:	2003      	movs	r0, #3
 8001470:	e779      	b.n	8001366 <HAL_RCC_OscConfig+0x1c2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001472:	2201      	movs	r2, #1
 8001474:	4e15      	ldr	r6, [pc, #84]	; (80014cc <HAL_RCC_OscConfig+0x328>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001476:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001478:	6a33      	ldr	r3, [r6, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800147a:	4d18      	ldr	r5, [pc, #96]	; (80014dc <HAL_RCC_OscConfig+0x338>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800147c:	4393      	bics	r3, r2
 800147e:	6233      	str	r3, [r6, #32]
 8001480:	6a33      	ldr	r3, [r6, #32]
 8001482:	3203      	adds	r2, #3
 8001484:	4393      	bics	r3, r2
 8001486:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8001488:	f7fe ffde 	bl	8000448 <HAL_GetTick>
 800148c:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800148e:	e005      	b.n	800149c <HAL_RCC_OscConfig+0x2f8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001490:	f7fe ffda 	bl	8000448 <HAL_GetTick>
 8001494:	464b      	mov	r3, r9
 8001496:	1ac0      	subs	r0, r0, r3
 8001498:	42a8      	cmp	r0, r5
 800149a:	d8e8      	bhi.n	800146e <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800149c:	6a33      	ldr	r3, [r6, #32]
 800149e:	421f      	tst	r7, r3
 80014a0:	d1f6      	bne.n	8001490 <HAL_RCC_OscConfig+0x2ec>
 80014a2:	e725      	b.n	80012f0 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_DISABLE();
 80014a4:	2201      	movs	r2, #1
 80014a6:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014a8:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 80014aa:	4393      	bics	r3, r2
 80014ac:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80014ae:	f7fe ffcb 	bl	8000448 <HAL_GetTick>
 80014b2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014b4:	e004      	b.n	80014c0 <HAL_RCC_OscConfig+0x31c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014b6:	f7fe ffc7 	bl	8000448 <HAL_GetTick>
 80014ba:	1bc0      	subs	r0, r0, r7
 80014bc:	2802      	cmp	r0, #2
 80014be:	d8d6      	bhi.n	800146e <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014c0:	682b      	ldr	r3, [r5, #0]
 80014c2:	421e      	tst	r6, r3
 80014c4:	d1f7      	bne.n	80014b6 <HAL_RCC_OscConfig+0x312>
 80014c6:	6823      	ldr	r3, [r4, #0]
 80014c8:	e6d1      	b.n	800126e <HAL_RCC_OscConfig+0xca>
 80014ca:	46c0      	nop			; (mov r8, r8)
 80014cc:	40021000 	.word	0x40021000
 80014d0:	fffeffff 	.word	0xfffeffff
 80014d4:	fffbffff 	.word	0xfffbffff
 80014d8:	40007000 	.word	0x40007000
 80014dc:	00001388 	.word	0x00001388
 80014e0:	feffffff 	.word	0xfeffffff
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014e4:	2380      	movs	r3, #128	; 0x80
 80014e6:	4a47      	ldr	r2, [pc, #284]	; (8001604 <HAL_RCC_OscConfig+0x460>)
 80014e8:	025b      	lsls	r3, r3, #9
 80014ea:	6811      	ldr	r1, [r2, #0]
 80014ec:	430b      	orrs	r3, r1
 80014ee:	6013      	str	r3, [r2, #0]
 80014f0:	e680      	b.n	80011f4 <HAL_RCC_OscConfig+0x50>
      __HAL_RCC_HSI14ADC_DISABLE();
 80014f2:	2204      	movs	r2, #4
 80014f4:	4d43      	ldr	r5, [pc, #268]	; (8001604 <HAL_RCC_OscConfig+0x460>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80014f6:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80014f8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80014fa:	4313      	orrs	r3, r2
 80014fc:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80014fe:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001500:	3a03      	subs	r2, #3
 8001502:	4393      	bics	r3, r2
 8001504:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001506:	f7fe ff9f 	bl	8000448 <HAL_GetTick>
 800150a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800150c:	e004      	b.n	8001518 <HAL_RCC_OscConfig+0x374>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800150e:	f7fe ff9b 	bl	8000448 <HAL_GetTick>
 8001512:	1bc0      	subs	r0, r0, r7
 8001514:	2802      	cmp	r0, #2
 8001516:	d8aa      	bhi.n	800146e <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001518:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800151a:	421e      	tst	r6, r3
 800151c:	d1f7      	bne.n	800150e <HAL_RCC_OscConfig+0x36a>
 800151e:	e701      	b.n	8001324 <HAL_RCC_OscConfig+0x180>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001520:	4a38      	ldr	r2, [pc, #224]	; (8001604 <HAL_RCC_OscConfig+0x460>)
 8001522:	4939      	ldr	r1, [pc, #228]	; (8001608 <HAL_RCC_OscConfig+0x464>)
 8001524:	69d3      	ldr	r3, [r2, #28]
 8001526:	400b      	ands	r3, r1
 8001528:	61d3      	str	r3, [r2, #28]
 800152a:	6823      	ldr	r3, [r4, #0]
 800152c:	e6e5      	b.n	80012fa <HAL_RCC_OscConfig+0x156>
        __HAL_RCC_PLL_DISABLE();
 800152e:	682b      	ldr	r3, [r5, #0]
 8001530:	4a36      	ldr	r2, [pc, #216]	; (800160c <HAL_RCC_OscConfig+0x468>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001532:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001534:	4013      	ands	r3, r2
 8001536:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001538:	f7fe ff86 	bl	8000448 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800153c:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 800153e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001540:	e004      	b.n	800154c <HAL_RCC_OscConfig+0x3a8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001542:	f7fe ff81 	bl	8000448 <HAL_GetTick>
 8001546:	1bc0      	subs	r0, r0, r7
 8001548:	2802      	cmp	r0, #2
 800154a:	d890      	bhi.n	800146e <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800154c:	682b      	ldr	r3, [r5, #0]
 800154e:	4233      	tst	r3, r6
 8001550:	d1f7      	bne.n	8001542 <HAL_RCC_OscConfig+0x39e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001552:	220f      	movs	r2, #15
 8001554:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001556:	4393      	bics	r3, r2
 8001558:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800155a:	4313      	orrs	r3, r2
 800155c:	62eb      	str	r3, [r5, #44]	; 0x2c
 800155e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001560:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001562:	686a      	ldr	r2, [r5, #4]
 8001564:	430b      	orrs	r3, r1
 8001566:	492a      	ldr	r1, [pc, #168]	; (8001610 <HAL_RCC_OscConfig+0x46c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001568:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800156a:	400a      	ands	r2, r1
 800156c:	4313      	orrs	r3, r2
 800156e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001570:	2380      	movs	r3, #128	; 0x80
 8001572:	682a      	ldr	r2, [r5, #0]
 8001574:	045b      	lsls	r3, r3, #17
 8001576:	4313      	orrs	r3, r2
 8001578:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800157a:	f7fe ff65 	bl	8000448 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800157e:	4d21      	ldr	r5, [pc, #132]	; (8001604 <HAL_RCC_OscConfig+0x460>)
        tickstart = HAL_GetTick();
 8001580:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001582:	04a4      	lsls	r4, r4, #18
 8001584:	e005      	b.n	8001592 <HAL_RCC_OscConfig+0x3ee>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001586:	f7fe ff5f 	bl	8000448 <HAL_GetTick>
 800158a:	1b80      	subs	r0, r0, r6
 800158c:	2802      	cmp	r0, #2
 800158e:	d900      	bls.n	8001592 <HAL_RCC_OscConfig+0x3ee>
 8001590:	e76d      	b.n	800146e <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001592:	682b      	ldr	r3, [r5, #0]
 8001594:	4223      	tst	r3, r4
 8001596:	d0f6      	beq.n	8001586 <HAL_RCC_OscConfig+0x3e2>
 8001598:	e6e4      	b.n	8001364 <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800159a:	2280      	movs	r2, #128	; 0x80
 800159c:	4b19      	ldr	r3, [pc, #100]	; (8001604 <HAL_RCC_OscConfig+0x460>)
 800159e:	02d2      	lsls	r2, r2, #11
 80015a0:	6819      	ldr	r1, [r3, #0]
 80015a2:	430a      	orrs	r2, r1
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	2280      	movs	r2, #128	; 0x80
 80015a8:	6819      	ldr	r1, [r3, #0]
 80015aa:	0252      	lsls	r2, r2, #9
 80015ac:	430a      	orrs	r2, r1
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	e620      	b.n	80011f4 <HAL_RCC_OscConfig+0x50>
      __HAL_RCC_HSI14ADC_DISABLE();
 80015b2:	2104      	movs	r1, #4
 80015b4:	4d13      	ldr	r5, [pc, #76]	; (8001604 <HAL_RCC_OscConfig+0x460>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80015b6:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80015b8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80015ba:	430a      	orrs	r2, r1
 80015bc:	636a      	str	r2, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80015be:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80015c0:	4313      	orrs	r3, r2
 80015c2:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80015c4:	f7fe ff40 	bl	8000448 <HAL_GetTick>
 80015c8:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80015ca:	e005      	b.n	80015d8 <HAL_RCC_OscConfig+0x434>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80015cc:	f7fe ff3c 	bl	8000448 <HAL_GetTick>
 80015d0:	1bc0      	subs	r0, r0, r7
 80015d2:	2802      	cmp	r0, #2
 80015d4:	d900      	bls.n	80015d8 <HAL_RCC_OscConfig+0x434>
 80015d6:	e74a      	b.n	800146e <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80015d8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80015da:	421e      	tst	r6, r3
 80015dc:	d0f6      	beq.n	80015cc <HAL_RCC_OscConfig+0x428>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80015de:	21f8      	movs	r1, #248	; 0xf8
 80015e0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80015e2:	69a3      	ldr	r3, [r4, #24]
 80015e4:	438a      	bics	r2, r1
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	4313      	orrs	r3, r2
 80015ea:	636b      	str	r3, [r5, #52]	; 0x34
 80015ec:	e69a      	b.n	8001324 <HAL_RCC_OscConfig+0x180>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015ee:	2104      	movs	r1, #4
 80015f0:	4b04      	ldr	r3, [pc, #16]	; (8001604 <HAL_RCC_OscConfig+0x460>)
 80015f2:	6a1a      	ldr	r2, [r3, #32]
 80015f4:	430a      	orrs	r2, r1
 80015f6:	621a      	str	r2, [r3, #32]
 80015f8:	6a1a      	ldr	r2, [r3, #32]
 80015fa:	3903      	subs	r1, #3
 80015fc:	430a      	orrs	r2, r1
 80015fe:	621a      	str	r2, [r3, #32]
 8001600:	e665      	b.n	80012ce <HAL_RCC_OscConfig+0x12a>
 8001602:	46c0      	nop			; (mov r8, r8)
 8001604:	40021000 	.word	0x40021000
 8001608:	efffffff 	.word	0xefffffff
 800160c:	feffffff 	.word	0xfeffffff
 8001610:	ffc2ffff 	.word	0xffc2ffff

08001614 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001616:	46ce      	mov	lr, r9
 8001618:	4647      	mov	r7, r8
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800161a:	2201      	movs	r2, #1
{
 800161c:	b580      	push	{r7, lr}
 800161e:	000c      	movs	r4, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001620:	495c      	ldr	r1, [pc, #368]	; (8001794 <HAL_RCC_ClockConfig+0x180>)
{
 8001622:	b089      	sub	sp, #36	; 0x24
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001624:	680b      	ldr	r3, [r1, #0]
{
 8001626:	0005      	movs	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001628:	4013      	ands	r3, r2
 800162a:	42a3      	cmp	r3, r4
 800162c:	d20d      	bcs.n	800164a <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800162e:	680b      	ldr	r3, [r1, #0]
 8001630:	4393      	bics	r3, r2
 8001632:	4323      	orrs	r3, r4
 8001634:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001636:	680b      	ldr	r3, [r1, #0]
 8001638:	401a      	ands	r2, r3
 800163a:	4294      	cmp	r4, r2
 800163c:	d005      	beq.n	800164a <HAL_RCC_ClockConfig+0x36>
    {
      return HAL_ERROR;
 800163e:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8001640:	b009      	add	sp, #36	; 0x24
 8001642:	bc0c      	pop	{r2, r3}
 8001644:	4690      	mov	r8, r2
 8001646:	4699      	mov	r9, r3
 8001648:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800164a:	682b      	ldr	r3, [r5, #0]
 800164c:	079a      	lsls	r2, r3, #30
 800164e:	d506      	bpl.n	800165e <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001650:	20f0      	movs	r0, #240	; 0xf0
 8001652:	4951      	ldr	r1, [pc, #324]	; (8001798 <HAL_RCC_ClockConfig+0x184>)
 8001654:	684a      	ldr	r2, [r1, #4]
 8001656:	4382      	bics	r2, r0
 8001658:	68a8      	ldr	r0, [r5, #8]
 800165a:	4302      	orrs	r2, r0
 800165c:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800165e:	07db      	lsls	r3, r3, #31
 8001660:	d524      	bpl.n	80016ac <HAL_RCC_ClockConfig+0x98>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001662:	4b4d      	ldr	r3, [pc, #308]	; (8001798 <HAL_RCC_ClockConfig+0x184>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001664:	686a      	ldr	r2, [r5, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001666:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001668:	2a01      	cmp	r2, #1
 800166a:	d06a      	beq.n	8001742 <HAL_RCC_ClockConfig+0x12e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800166c:	2a02      	cmp	r2, #2
 800166e:	d063      	beq.n	8001738 <HAL_RCC_ClockConfig+0x124>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001670:	079b      	lsls	r3, r3, #30
 8001672:	d5e4      	bpl.n	800163e <HAL_RCC_ClockConfig+0x2a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001674:	2103      	movs	r1, #3
 8001676:	4e48      	ldr	r6, [pc, #288]	; (8001798 <HAL_RCC_ClockConfig+0x184>)
 8001678:	6873      	ldr	r3, [r6, #4]
 800167a:	438b      	bics	r3, r1
 800167c:	4313      	orrs	r3, r2
 800167e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001680:	f7fe fee2 	bl	8000448 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001684:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001686:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001688:	2b01      	cmp	r3, #1
 800168a:	d05d      	beq.n	8001748 <HAL_RCC_ClockConfig+0x134>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800168c:	2b02      	cmp	r3, #2
 800168e:	d06b      	beq.n	8001768 <HAL_RCC_ClockConfig+0x154>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001690:	230c      	movs	r3, #12
 8001692:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001694:	4b41      	ldr	r3, [pc, #260]	; (800179c <HAL_RCC_ClockConfig+0x188>)
 8001696:	4699      	mov	r9, r3
 8001698:	e004      	b.n	80016a4 <HAL_RCC_ClockConfig+0x90>
 800169a:	f7fe fed5 	bl	8000448 <HAL_GetTick>
 800169e:	1bc0      	subs	r0, r0, r7
 80016a0:	4548      	cmp	r0, r9
 80016a2:	d84c      	bhi.n	800173e <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80016a4:	4642      	mov	r2, r8
 80016a6:	6873      	ldr	r3, [r6, #4]
 80016a8:	421a      	tst	r2, r3
 80016aa:	d1f6      	bne.n	800169a <HAL_RCC_ClockConfig+0x86>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80016ac:	2101      	movs	r1, #1
 80016ae:	4a39      	ldr	r2, [pc, #228]	; (8001794 <HAL_RCC_ClockConfig+0x180>)
 80016b0:	6813      	ldr	r3, [r2, #0]
 80016b2:	400b      	ands	r3, r1
 80016b4:	429c      	cmp	r4, r3
 80016b6:	d205      	bcs.n	80016c4 <HAL_RCC_ClockConfig+0xb0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016b8:	6813      	ldr	r3, [r2, #0]
 80016ba:	438b      	bics	r3, r1
 80016bc:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016be:	6813      	ldr	r3, [r2, #0]
 80016c0:	4219      	tst	r1, r3
 80016c2:	d1bc      	bne.n	800163e <HAL_RCC_ClockConfig+0x2a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c4:	682b      	ldr	r3, [r5, #0]
 80016c6:	075b      	lsls	r3, r3, #29
 80016c8:	d506      	bpl.n	80016d8 <HAL_RCC_ClockConfig+0xc4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80016ca:	4a33      	ldr	r2, [pc, #204]	; (8001798 <HAL_RCC_ClockConfig+0x184>)
 80016cc:	4934      	ldr	r1, [pc, #208]	; (80017a0 <HAL_RCC_ClockConfig+0x18c>)
 80016ce:	6853      	ldr	r3, [r2, #4]
 80016d0:	400b      	ands	r3, r1
 80016d2:	68e9      	ldr	r1, [r5, #12]
 80016d4:	430b      	orrs	r3, r1
 80016d6:	6053      	str	r3, [r2, #4]
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80016d8:	4b32      	ldr	r3, [pc, #200]	; (80017a4 <HAL_RCC_ClockConfig+0x190>)
 80016da:	466a      	mov	r2, sp
 80016dc:	0018      	movs	r0, r3
 80016de:	c870      	ldmia	r0!, {r4, r5, r6}
 80016e0:	c270      	stmia	r2!, {r4, r5, r6}
 80016e2:	6800      	ldr	r0, [r0, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80016e4:	3310      	adds	r3, #16
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80016e6:	6010      	str	r0, [r2, #0]
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80016e8:	aa04      	add	r2, sp, #16
 80016ea:	0010      	movs	r0, r2
 80016ec:	cb70      	ldmia	r3!, {r4, r5, r6}
 80016ee:	c070      	stmia	r0!, {r4, r5, r6}
 80016f0:	681b      	ldr	r3, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80016f2:	4d29      	ldr	r5, [pc, #164]	; (8001798 <HAL_RCC_ClockConfig+0x184>)
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80016f4:	6003      	str	r3, [r0, #0]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016f6:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 80016f8:	6868      	ldr	r0, [r5, #4]
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80016fa:	4669      	mov	r1, sp
  switch (tmpreg & RCC_CFGR_SWS)
 80016fc:	4003      	ands	r3, r0
 80016fe:	2b08      	cmp	r3, #8
 8001700:	d10b      	bne.n	800171a <HAL_RCC_ClockConfig+0x106>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001702:	3307      	adds	r3, #7
 8001704:	0c84      	lsrs	r4, r0, #18
 8001706:	401c      	ands	r4, r3
 8001708:	5d0c      	ldrb	r4, [r1, r4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800170a:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800170c:	400b      	ands	r3, r1
 800170e:	5cd1      	ldrb	r1, [r2, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001710:	03c3      	lsls	r3, r0, #15
 8001712:	d439      	bmi.n	8001788 <HAL_RCC_ClockConfig+0x174>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8001714:	4824      	ldr	r0, [pc, #144]	; (80017a8 <HAL_RCC_ClockConfig+0x194>)
 8001716:	4360      	muls	r0, r4
 8001718:	e000      	b.n	800171c <HAL_RCC_ClockConfig+0x108>
      sysclockfreq = HSE_VALUE;
 800171a:	4824      	ldr	r0, [pc, #144]	; (80017ac <HAL_RCC_ClockConfig+0x198>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800171c:	4b1e      	ldr	r3, [pc, #120]	; (8001798 <HAL_RCC_ClockConfig+0x184>)
 800171e:	4a24      	ldr	r2, [pc, #144]	; (80017b0 <HAL_RCC_ClockConfig+0x19c>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	061b      	lsls	r3, r3, #24
 8001724:	0f1b      	lsrs	r3, r3, #28
 8001726:	5cd3      	ldrb	r3, [r2, r3]
 8001728:	40d8      	lsrs	r0, r3
 800172a:	4b22      	ldr	r3, [pc, #136]	; (80017b4 <HAL_RCC_ClockConfig+0x1a0>)
 800172c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800172e:	2000      	movs	r0, #0
 8001730:	f7fe fe60 	bl	80003f4 <HAL_InitTick>
  return HAL_OK;
 8001734:	2000      	movs	r0, #0
 8001736:	e783      	b.n	8001640 <HAL_RCC_ClockConfig+0x2c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001738:	019b      	lsls	r3, r3, #6
 800173a:	d49b      	bmi.n	8001674 <HAL_RCC_ClockConfig+0x60>
 800173c:	e77f      	b.n	800163e <HAL_RCC_ClockConfig+0x2a>
          return HAL_TIMEOUT;
 800173e:	2003      	movs	r0, #3
 8001740:	e77e      	b.n	8001640 <HAL_RCC_ClockConfig+0x2c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001742:	039b      	lsls	r3, r3, #14
 8001744:	d496      	bmi.n	8001674 <HAL_RCC_ClockConfig+0x60>
 8001746:	e77a      	b.n	800163e <HAL_RCC_ClockConfig+0x2a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001748:	330b      	adds	r3, #11
 800174a:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800174c:	4b13      	ldr	r3, [pc, #76]	; (800179c <HAL_RCC_ClockConfig+0x188>)
 800174e:	4699      	mov	r9, r3
 8001750:	e004      	b.n	800175c <HAL_RCC_ClockConfig+0x148>
 8001752:	f7fe fe79 	bl	8000448 <HAL_GetTick>
 8001756:	1bc0      	subs	r0, r0, r7
 8001758:	4548      	cmp	r0, r9
 800175a:	d8f0      	bhi.n	800173e <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800175c:	4642      	mov	r2, r8
 800175e:	6873      	ldr	r3, [r6, #4]
 8001760:	4013      	ands	r3, r2
 8001762:	2b04      	cmp	r3, #4
 8001764:	d1f5      	bne.n	8001752 <HAL_RCC_ClockConfig+0x13e>
 8001766:	e7a1      	b.n	80016ac <HAL_RCC_ClockConfig+0x98>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001768:	330a      	adds	r3, #10
 800176a:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800176c:	4b0b      	ldr	r3, [pc, #44]	; (800179c <HAL_RCC_ClockConfig+0x188>)
 800176e:	4699      	mov	r9, r3
 8001770:	e004      	b.n	800177c <HAL_RCC_ClockConfig+0x168>
 8001772:	f7fe fe69 	bl	8000448 <HAL_GetTick>
 8001776:	1bc0      	subs	r0, r0, r7
 8001778:	4548      	cmp	r0, r9
 800177a:	d8e0      	bhi.n	800173e <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800177c:	4642      	mov	r2, r8
 800177e:	6873      	ldr	r3, [r6, #4]
 8001780:	4013      	ands	r3, r2
 8001782:	2b08      	cmp	r3, #8
 8001784:	d1f5      	bne.n	8001772 <HAL_RCC_ClockConfig+0x15e>
 8001786:	e791      	b.n	80016ac <HAL_RCC_ClockConfig+0x98>
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001788:	4808      	ldr	r0, [pc, #32]	; (80017ac <HAL_RCC_ClockConfig+0x198>)
 800178a:	f7fe fcbd 	bl	8000108 <__udivsi3>
 800178e:	4360      	muls	r0, r4
 8001790:	e7c4      	b.n	800171c <HAL_RCC_ClockConfig+0x108>
 8001792:	46c0      	nop			; (mov r8, r8)
 8001794:	40022000 	.word	0x40022000
 8001798:	40021000 	.word	0x40021000
 800179c:	00001388 	.word	0x00001388
 80017a0:	fffff8ff 	.word	0xfffff8ff
 80017a4:	080057f4 	.word	0x080057f4
 80017a8:	003d0900 	.word	0x003d0900
 80017ac:	007a1200 	.word	0x007a1200
 80017b0:	08005830 	.word	0x08005830
 80017b4:	20000060 	.word	0x20000060

080017b8 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80017b8:	4b01      	ldr	r3, [pc, #4]	; (80017c0 <HAL_RCC_GetHCLKFreq+0x8>)
 80017ba:	6818      	ldr	r0, [r3, #0]
}
 80017bc:	4770      	bx	lr
 80017be:	46c0      	nop			; (mov r8, r8)
 80017c0:	20000060 	.word	0x20000060

080017c4 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80017c4:	b510      	push	{r4, lr}
 80017c6:	1e04      	subs	r4, r0, #0
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80017c8:	d064      	beq.n	8001894 <HAL_TIM_Base_Init+0xd0>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80017ca:	233d      	movs	r3, #61	; 0x3d
 80017cc:	5cc3      	ldrb	r3, [r0, r3]
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d03d      	beq.n	8001850 <HAL_TIM_Base_Init+0x8c>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80017d4:	2202      	movs	r2, #2
 80017d6:	233d      	movs	r3, #61	; 0x3d
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017d8:	492f      	ldr	r1, [pc, #188]	; (8001898 <HAL_TIM_Base_Init+0xd4>)
  htim->State= HAL_TIM_STATE_BUSY;
 80017da:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017dc:	6823      	ldr	r3, [r4, #0]
  tmpcr1 = TIMx->CR1;
 80017de:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017e0:	428b      	cmp	r3, r1
 80017e2:	d021      	beq.n	8001828 <HAL_TIM_Base_Init+0x64>
 80017e4:	2180      	movs	r1, #128	; 0x80
 80017e6:	05c9      	lsls	r1, r1, #23
 80017e8:	428b      	cmp	r3, r1
 80017ea:	d036      	beq.n	800185a <HAL_TIM_Base_Init+0x96>
 80017ec:	492b      	ldr	r1, [pc, #172]	; (800189c <HAL_TIM_Base_Init+0xd8>)
 80017ee:	428b      	cmp	r3, r1
 80017f0:	d033      	beq.n	800185a <HAL_TIM_Base_Init+0x96>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80017f2:	492b      	ldr	r1, [pc, #172]	; (80018a0 <HAL_TIM_Base_Init+0xdc>)
 80017f4:	428b      	cmp	r3, r1
 80017f6:	d048      	beq.n	800188a <HAL_TIM_Base_Init+0xc6>
 80017f8:	492a      	ldr	r1, [pc, #168]	; (80018a4 <HAL_TIM_Base_Init+0xe0>)
 80017fa:	428b      	cmp	r3, r1
 80017fc:	d018      	beq.n	8001830 <HAL_TIM_Base_Init+0x6c>
 80017fe:	492a      	ldr	r1, [pc, #168]	; (80018a8 <HAL_TIM_Base_Init+0xe4>)
 8001800:	428b      	cmp	r3, r1
 8001802:	d015      	beq.n	8001830 <HAL_TIM_Base_Init+0x6c>
 8001804:	4929      	ldr	r1, [pc, #164]	; (80018ac <HAL_TIM_Base_Init+0xe8>)
 8001806:	428b      	cmp	r3, r1
 8001808:	d012      	beq.n	8001830 <HAL_TIM_Base_Init+0x6c>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800180a:	2180      	movs	r1, #128	; 0x80
 800180c:	438a      	bics	r2, r1
 800180e:	69a1      	ldr	r1, [r4, #24]
 8001810:	430a      	orrs	r2, r1

  TIMx->CR1 = tmpcr1;
 8001812:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001814:	68e2      	ldr	r2, [r4, #12]
 8001816:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001818:	6862      	ldr	r2, [r4, #4]
 800181a:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 800181c:	2201      	movs	r2, #1
 800181e:	615a      	str	r2, [r3, #20]
  htim->State= HAL_TIM_STATE_READY;
 8001820:	233d      	movs	r3, #61	; 0x3d
  return HAL_OK;
 8001822:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001824:	54e2      	strb	r2, [r4, r3]
}
 8001826:	bd10      	pop	{r4, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001828:	2170      	movs	r1, #112	; 0x70
 800182a:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 800182c:	68a1      	ldr	r1, [r4, #8]
 800182e:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8001830:	491f      	ldr	r1, [pc, #124]	; (80018b0 <HAL_TIM_Base_Init+0xec>)
 8001832:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001834:	6921      	ldr	r1, [r4, #16]
 8001836:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001838:	2180      	movs	r1, #128	; 0x80
 800183a:	438a      	bics	r2, r1
 800183c:	69a1      	ldr	r1, [r4, #24]
 800183e:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8001840:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001842:	68e2      	ldr	r2, [r4, #12]
 8001844:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001846:	6862      	ldr	r2, [r4, #4]
 8001848:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800184a:	6962      	ldr	r2, [r4, #20]
 800184c:	631a      	str	r2, [r3, #48]	; 0x30
 800184e:	e7e5      	b.n	800181c <HAL_TIM_Base_Init+0x58>
    htim->Lock = HAL_UNLOCKED;
 8001850:	223c      	movs	r2, #60	; 0x3c
 8001852:	5483      	strb	r3, [r0, r2]
    HAL_TIM_Base_MspInit(htim);
 8001854:	f003 fe5a 	bl	800550c <HAL_TIM_Base_MspInit>
 8001858:	e7bc      	b.n	80017d4 <HAL_TIM_Base_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800185a:	2170      	movs	r1, #112	; 0x70
 800185c:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 800185e:	68a1      	ldr	r1, [r4, #8]
 8001860:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8001862:	4913      	ldr	r1, [pc, #76]	; (80018b0 <HAL_TIM_Base_Init+0xec>)
 8001864:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001866:	6921      	ldr	r1, [r4, #16]
 8001868:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800186a:	2180      	movs	r1, #128	; 0x80
 800186c:	438a      	bics	r2, r1
 800186e:	69a1      	ldr	r1, [r4, #24]
 8001870:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8001872:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001874:	68e2      	ldr	r2, [r4, #12]
 8001876:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001878:	6862      	ldr	r2, [r4, #4]
 800187a:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800187c:	4a0a      	ldr	r2, [pc, #40]	; (80018a8 <HAL_TIM_Base_Init+0xe4>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d0e3      	beq.n	800184a <HAL_TIM_Base_Init+0x86>
 8001882:	4a0a      	ldr	r2, [pc, #40]	; (80018ac <HAL_TIM_Base_Init+0xe8>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d0e0      	beq.n	800184a <HAL_TIM_Base_Init+0x86>
 8001888:	e7c8      	b.n	800181c <HAL_TIM_Base_Init+0x58>
    tmpcr1 &= ~TIM_CR1_CKD;
 800188a:	4909      	ldr	r1, [pc, #36]	; (80018b0 <HAL_TIM_Base_Init+0xec>)
 800188c:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800188e:	6921      	ldr	r1, [r4, #16]
 8001890:	430a      	orrs	r2, r1
 8001892:	e7ba      	b.n	800180a <HAL_TIM_Base_Init+0x46>
    return HAL_ERROR;
 8001894:	2001      	movs	r0, #1
 8001896:	e7c6      	b.n	8001826 <HAL_TIM_Base_Init+0x62>
 8001898:	40012c00 	.word	0x40012c00
 800189c:	40000400 	.word	0x40000400
 80018a0:	40002000 	.word	0x40002000
 80018a4:	40014000 	.word	0x40014000
 80018a8:	40014400 	.word	0x40014400
 80018ac:	40014800 	.word	0x40014800
 80018b0:	fffffcff 	.word	0xfffffcff

080018b4 <HAL_TIM_Base_Start>:
  htim->State= HAL_TIM_STATE_BUSY;
 80018b4:	223d      	movs	r2, #61	; 0x3d
 80018b6:	2302      	movs	r3, #2
  __HAL_TIM_ENABLE(htim);
 80018b8:	2101      	movs	r1, #1
{
 80018ba:	b510      	push	{r4, lr}
  __HAL_TIM_ENABLE(htim);
 80018bc:	6804      	ldr	r4, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80018be:	5483      	strb	r3, [r0, r2]
  __HAL_TIM_ENABLE(htim);
 80018c0:	6823      	ldr	r3, [r4, #0]
 80018c2:	430b      	orrs	r3, r1
 80018c4:	6023      	str	r3, [r4, #0]
  htim->State= HAL_TIM_STATE_READY;
 80018c6:	5481      	strb	r1, [r0, r2]
}
 80018c8:	2000      	movs	r0, #0
 80018ca:	bd10      	pop	{r4, pc}

080018cc <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80018cc:	6803      	ldr	r3, [r0, #0]
 80018ce:	2001      	movs	r0, #1
 80018d0:	68d9      	ldr	r1, [r3, #12]
 80018d2:	4301      	orrs	r1, r0
 80018d4:	60d9      	str	r1, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	4302      	orrs	r2, r0
 80018da:	601a      	str	r2, [r3, #0]
}
 80018dc:	2000      	movs	r0, #0
 80018de:	4770      	bx	lr

080018e0 <HAL_TIM_OC_Start_IT>:
 80018e0:	2904      	cmp	r1, #4
 80018e2:	d023      	beq.n	800192c <HAL_TIM_OC_Start_IT+0x4c>
 80018e4:	d92d      	bls.n	8001942 <HAL_TIM_OC_Start_IT+0x62>
 80018e6:	2908      	cmp	r1, #8
 80018e8:	d020      	beq.n	800192c <HAL_TIM_OC_Start_IT+0x4c>
 80018ea:	290c      	cmp	r1, #12
 80018ec:	d131      	bne.n	8001952 <HAL_TIM_OC_Start_IT+0x72>
 80018ee:	6803      	ldr	r3, [r0, #0]
 80018f0:	2010      	movs	r0, #16
 80018f2:	68da      	ldr	r2, [r3, #12]
 80018f4:	4302      	orrs	r2, r0
 80018f6:	60da      	str	r2, [r3, #12]
 80018f8:	2201      	movs	r2, #1
 80018fa:	408a      	lsls	r2, r1
 80018fc:	6a19      	ldr	r1, [r3, #32]
 80018fe:	4391      	bics	r1, r2
 8001900:	6219      	str	r1, [r3, #32]
 8001902:	6a19      	ldr	r1, [r3, #32]
 8001904:	430a      	orrs	r2, r1
 8001906:	621a      	str	r2, [r3, #32]
 8001908:	4a13      	ldr	r2, [pc, #76]	; (8001958 <HAL_TIM_OC_Start_IT+0x78>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d013      	beq.n	8001936 <HAL_TIM_OC_Start_IT+0x56>
 800190e:	4a13      	ldr	r2, [pc, #76]	; (800195c <HAL_TIM_OC_Start_IT+0x7c>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d010      	beq.n	8001936 <HAL_TIM_OC_Start_IT+0x56>
 8001914:	4a12      	ldr	r2, [pc, #72]	; (8001960 <HAL_TIM_OC_Start_IT+0x80>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d00d      	beq.n	8001936 <HAL_TIM_OC_Start_IT+0x56>
 800191a:	4a12      	ldr	r2, [pc, #72]	; (8001964 <HAL_TIM_OC_Start_IT+0x84>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d00a      	beq.n	8001936 <HAL_TIM_OC_Start_IT+0x56>
 8001920:	2101      	movs	r1, #1
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	2000      	movs	r0, #0
 8001926:	430a      	orrs	r2, r1
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	4770      	bx	lr
 800192c:	6803      	ldr	r3, [r0, #0]
 800192e:	68da      	ldr	r2, [r3, #12]
 8001930:	430a      	orrs	r2, r1
 8001932:	60da      	str	r2, [r3, #12]
 8001934:	e7e0      	b.n	80018f8 <HAL_TIM_OC_Start_IT+0x18>
 8001936:	2280      	movs	r2, #128	; 0x80
 8001938:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800193a:	0212      	lsls	r2, r2, #8
 800193c:	430a      	orrs	r2, r1
 800193e:	645a      	str	r2, [r3, #68]	; 0x44
 8001940:	e7ee      	b.n	8001920 <HAL_TIM_OC_Start_IT+0x40>
 8001942:	2900      	cmp	r1, #0
 8001944:	d105      	bne.n	8001952 <HAL_TIM_OC_Start_IT+0x72>
 8001946:	6803      	ldr	r3, [r0, #0]
 8001948:	2002      	movs	r0, #2
 800194a:	68da      	ldr	r2, [r3, #12]
 800194c:	4302      	orrs	r2, r0
 800194e:	60da      	str	r2, [r3, #12]
 8001950:	e7d2      	b.n	80018f8 <HAL_TIM_OC_Start_IT+0x18>
 8001952:	6803      	ldr	r3, [r0, #0]
 8001954:	e7d0      	b.n	80018f8 <HAL_TIM_OC_Start_IT+0x18>
 8001956:	46c0      	nop			; (mov r8, r8)
 8001958:	40012c00 	.word	0x40012c00
 800195c:	40014000 	.word	0x40014000
 8001960:	40014400 	.word	0x40014400
 8001964:	40014800 	.word	0x40014800

08001968 <HAL_TIM_PWM_MspInit>:
 8001968:	4770      	bx	lr
 800196a:	46c0      	nop			; (mov r8, r8)

0800196c <HAL_TIM_PWM_Init>:
{
 800196c:	b510      	push	{r4, lr}
 800196e:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8001970:	d064      	beq.n	8001a3c <HAL_TIM_PWM_Init+0xd0>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001972:	233d      	movs	r3, #61	; 0x3d
 8001974:	5cc3      	ldrb	r3, [r0, r3]
 8001976:	b2db      	uxtb	r3, r3
 8001978:	2b00      	cmp	r3, #0
 800197a:	d03d      	beq.n	80019f8 <HAL_TIM_PWM_Init+0x8c>
  htim->State= HAL_TIM_STATE_BUSY;
 800197c:	2202      	movs	r2, #2
 800197e:	233d      	movs	r3, #61	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001980:	492f      	ldr	r1, [pc, #188]	; (8001a40 <HAL_TIM_PWM_Init+0xd4>)
  htim->State= HAL_TIM_STATE_BUSY;
 8001982:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001984:	6823      	ldr	r3, [r4, #0]
  tmpcr1 = TIMx->CR1;
 8001986:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001988:	428b      	cmp	r3, r1
 800198a:	d021      	beq.n	80019d0 <HAL_TIM_PWM_Init+0x64>
 800198c:	2180      	movs	r1, #128	; 0x80
 800198e:	05c9      	lsls	r1, r1, #23
 8001990:	428b      	cmp	r3, r1
 8001992:	d036      	beq.n	8001a02 <HAL_TIM_PWM_Init+0x96>
 8001994:	492b      	ldr	r1, [pc, #172]	; (8001a44 <HAL_TIM_PWM_Init+0xd8>)
 8001996:	428b      	cmp	r3, r1
 8001998:	d033      	beq.n	8001a02 <HAL_TIM_PWM_Init+0x96>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800199a:	492b      	ldr	r1, [pc, #172]	; (8001a48 <HAL_TIM_PWM_Init+0xdc>)
 800199c:	428b      	cmp	r3, r1
 800199e:	d048      	beq.n	8001a32 <HAL_TIM_PWM_Init+0xc6>
 80019a0:	492a      	ldr	r1, [pc, #168]	; (8001a4c <HAL_TIM_PWM_Init+0xe0>)
 80019a2:	428b      	cmp	r3, r1
 80019a4:	d018      	beq.n	80019d8 <HAL_TIM_PWM_Init+0x6c>
 80019a6:	492a      	ldr	r1, [pc, #168]	; (8001a50 <HAL_TIM_PWM_Init+0xe4>)
 80019a8:	428b      	cmp	r3, r1
 80019aa:	d015      	beq.n	80019d8 <HAL_TIM_PWM_Init+0x6c>
 80019ac:	4929      	ldr	r1, [pc, #164]	; (8001a54 <HAL_TIM_PWM_Init+0xe8>)
 80019ae:	428b      	cmp	r3, r1
 80019b0:	d012      	beq.n	80019d8 <HAL_TIM_PWM_Init+0x6c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019b2:	2180      	movs	r1, #128	; 0x80
 80019b4:	438a      	bics	r2, r1
 80019b6:	69a1      	ldr	r1, [r4, #24]
 80019b8:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 80019ba:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019bc:	68e2      	ldr	r2, [r4, #12]
 80019be:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80019c0:	6862      	ldr	r2, [r4, #4]
 80019c2:	629a      	str	r2, [r3, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80019c4:	2201      	movs	r2, #1
 80019c6:	615a      	str	r2, [r3, #20]
  htim->State= HAL_TIM_STATE_READY;
 80019c8:	233d      	movs	r3, #61	; 0x3d
  return HAL_OK;
 80019ca:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80019cc:	54e2      	strb	r2, [r4, r3]
}
 80019ce:	bd10      	pop	{r4, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019d0:	2170      	movs	r1, #112	; 0x70
 80019d2:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 80019d4:	68a1      	ldr	r1, [r4, #8]
 80019d6:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80019d8:	491f      	ldr	r1, [pc, #124]	; (8001a58 <HAL_TIM_PWM_Init+0xec>)
 80019da:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019dc:	6921      	ldr	r1, [r4, #16]
 80019de:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019e0:	2180      	movs	r1, #128	; 0x80
 80019e2:	438a      	bics	r2, r1
 80019e4:	69a1      	ldr	r1, [r4, #24]
 80019e6:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 80019e8:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019ea:	68e2      	ldr	r2, [r4, #12]
 80019ec:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80019ee:	6862      	ldr	r2, [r4, #4]
 80019f0:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80019f2:	6962      	ldr	r2, [r4, #20]
 80019f4:	631a      	str	r2, [r3, #48]	; 0x30
 80019f6:	e7e5      	b.n	80019c4 <HAL_TIM_PWM_Init+0x58>
    htim->Lock = HAL_UNLOCKED;
 80019f8:	223c      	movs	r2, #60	; 0x3c
 80019fa:	5483      	strb	r3, [r0, r2]
    HAL_TIM_PWM_MspInit(htim);
 80019fc:	f7ff ffb4 	bl	8001968 <HAL_TIM_PWM_MspInit>
 8001a00:	e7bc      	b.n	800197c <HAL_TIM_PWM_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a02:	2170      	movs	r1, #112	; 0x70
 8001a04:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 8001a06:	68a1      	ldr	r1, [r4, #8]
 8001a08:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a0a:	4913      	ldr	r1, [pc, #76]	; (8001a58 <HAL_TIM_PWM_Init+0xec>)
 8001a0c:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a0e:	6921      	ldr	r1, [r4, #16]
 8001a10:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a12:	2180      	movs	r1, #128	; 0x80
 8001a14:	438a      	bics	r2, r1
 8001a16:	69a1      	ldr	r1, [r4, #24]
 8001a18:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8001a1a:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a1c:	68e2      	ldr	r2, [r4, #12]
 8001a1e:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001a20:	6862      	ldr	r2, [r4, #4]
 8001a22:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a24:	4a0a      	ldr	r2, [pc, #40]	; (8001a50 <HAL_TIM_PWM_Init+0xe4>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d0e3      	beq.n	80019f2 <HAL_TIM_PWM_Init+0x86>
 8001a2a:	4a0a      	ldr	r2, [pc, #40]	; (8001a54 <HAL_TIM_PWM_Init+0xe8>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d0e0      	beq.n	80019f2 <HAL_TIM_PWM_Init+0x86>
 8001a30:	e7c8      	b.n	80019c4 <HAL_TIM_PWM_Init+0x58>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a32:	4909      	ldr	r1, [pc, #36]	; (8001a58 <HAL_TIM_PWM_Init+0xec>)
 8001a34:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a36:	6921      	ldr	r1, [r4, #16]
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	e7ba      	b.n	80019b2 <HAL_TIM_PWM_Init+0x46>
    return HAL_ERROR;
 8001a3c:	2001      	movs	r0, #1
 8001a3e:	e7c6      	b.n	80019ce <HAL_TIM_PWM_Init+0x62>
 8001a40:	40012c00 	.word	0x40012c00
 8001a44:	40000400 	.word	0x40000400
 8001a48:	40002000 	.word	0x40002000
 8001a4c:	40014000 	.word	0x40014000
 8001a50:	40014400 	.word	0x40014400
 8001a54:	40014800 	.word	0x40014800
 8001a58:	fffffcff 	.word	0xfffffcff

08001a5c <HAL_TIM_PWM_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	408a      	lsls	r2, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001a60:	6803      	ldr	r3, [r0, #0]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001a62:	6a19      	ldr	r1, [r3, #32]
 8001a64:	4391      	bics	r1, r2
 8001a66:	6219      	str	r1, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001a68:	6a19      	ldr	r1, [r3, #32]
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	621a      	str	r2, [r3, #32]
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001a6e:	4a0c      	ldr	r2, [pc, #48]	; (8001aa0 <HAL_TIM_PWM_Start+0x44>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d00e      	beq.n	8001a92 <HAL_TIM_PWM_Start+0x36>
 8001a74:	4a0b      	ldr	r2, [pc, #44]	; (8001aa4 <HAL_TIM_PWM_Start+0x48>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d00b      	beq.n	8001a92 <HAL_TIM_PWM_Start+0x36>
 8001a7a:	4a0b      	ldr	r2, [pc, #44]	; (8001aa8 <HAL_TIM_PWM_Start+0x4c>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d008      	beq.n	8001a92 <HAL_TIM_PWM_Start+0x36>
 8001a80:	4a0a      	ldr	r2, [pc, #40]	; (8001aac <HAL_TIM_PWM_Start+0x50>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d005      	beq.n	8001a92 <HAL_TIM_PWM_Start+0x36>
  __HAL_TIM_ENABLE(htim);
 8001a86:	2101      	movs	r1, #1
 8001a88:	681a      	ldr	r2, [r3, #0]
}
 8001a8a:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	601a      	str	r2, [r3, #0]
}
 8001a90:	4770      	bx	lr
    __HAL_TIM_MOE_ENABLE(htim);
 8001a92:	2280      	movs	r2, #128	; 0x80
 8001a94:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001a96:	0212      	lsls	r2, r2, #8
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	645a      	str	r2, [r3, #68]	; 0x44
 8001a9c:	e7f3      	b.n	8001a86 <HAL_TIM_PWM_Start+0x2a>
 8001a9e:	46c0      	nop			; (mov r8, r8)
 8001aa0:	40012c00 	.word	0x40012c00
 8001aa4:	40014000 	.word	0x40014000
 8001aa8:	40014400 	.word	0x40014400
 8001aac:	40014800 	.word	0x40014800

08001ab0 <HAL_TIM_IC_MspInit>:
 8001ab0:	4770      	bx	lr
 8001ab2:	46c0      	nop			; (mov r8, r8)

08001ab4 <HAL_TIM_IC_Init>:
{
 8001ab4:	b510      	push	{r4, lr}
 8001ab6:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8001ab8:	d064      	beq.n	8001b84 <HAL_TIM_IC_Init+0xd0>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001aba:	233d      	movs	r3, #61	; 0x3d
 8001abc:	5cc3      	ldrb	r3, [r0, r3]
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d03d      	beq.n	8001b40 <HAL_TIM_IC_Init+0x8c>
  htim->State= HAL_TIM_STATE_BUSY;
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	233d      	movs	r3, #61	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ac8:	492f      	ldr	r1, [pc, #188]	; (8001b88 <HAL_TIM_IC_Init+0xd4>)
  htim->State= HAL_TIM_STATE_BUSY;
 8001aca:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001acc:	6823      	ldr	r3, [r4, #0]
  tmpcr1 = TIMx->CR1;
 8001ace:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ad0:	428b      	cmp	r3, r1
 8001ad2:	d021      	beq.n	8001b18 <HAL_TIM_IC_Init+0x64>
 8001ad4:	2180      	movs	r1, #128	; 0x80
 8001ad6:	05c9      	lsls	r1, r1, #23
 8001ad8:	428b      	cmp	r3, r1
 8001ada:	d036      	beq.n	8001b4a <HAL_TIM_IC_Init+0x96>
 8001adc:	492b      	ldr	r1, [pc, #172]	; (8001b8c <HAL_TIM_IC_Init+0xd8>)
 8001ade:	428b      	cmp	r3, r1
 8001ae0:	d033      	beq.n	8001b4a <HAL_TIM_IC_Init+0x96>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ae2:	492b      	ldr	r1, [pc, #172]	; (8001b90 <HAL_TIM_IC_Init+0xdc>)
 8001ae4:	428b      	cmp	r3, r1
 8001ae6:	d048      	beq.n	8001b7a <HAL_TIM_IC_Init+0xc6>
 8001ae8:	492a      	ldr	r1, [pc, #168]	; (8001b94 <HAL_TIM_IC_Init+0xe0>)
 8001aea:	428b      	cmp	r3, r1
 8001aec:	d018      	beq.n	8001b20 <HAL_TIM_IC_Init+0x6c>
 8001aee:	492a      	ldr	r1, [pc, #168]	; (8001b98 <HAL_TIM_IC_Init+0xe4>)
 8001af0:	428b      	cmp	r3, r1
 8001af2:	d015      	beq.n	8001b20 <HAL_TIM_IC_Init+0x6c>
 8001af4:	4929      	ldr	r1, [pc, #164]	; (8001b9c <HAL_TIM_IC_Init+0xe8>)
 8001af6:	428b      	cmp	r3, r1
 8001af8:	d012      	beq.n	8001b20 <HAL_TIM_IC_Init+0x6c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001afa:	2180      	movs	r1, #128	; 0x80
 8001afc:	438a      	bics	r2, r1
 8001afe:	69a1      	ldr	r1, [r4, #24]
 8001b00:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8001b02:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b04:	68e2      	ldr	r2, [r4, #12]
 8001b06:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001b08:	6862      	ldr	r2, [r4, #4]
 8001b0a:	629a      	str	r2, [r3, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	615a      	str	r2, [r3, #20]
  htim->State= HAL_TIM_STATE_READY;
 8001b10:	233d      	movs	r3, #61	; 0x3d
  return HAL_OK;
 8001b12:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001b14:	54e2      	strb	r2, [r4, r3]
}
 8001b16:	bd10      	pop	{r4, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b18:	2170      	movs	r1, #112	; 0x70
 8001b1a:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 8001b1c:	68a1      	ldr	r1, [r4, #8]
 8001b1e:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b20:	491f      	ldr	r1, [pc, #124]	; (8001ba0 <HAL_TIM_IC_Init+0xec>)
 8001b22:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b24:	6921      	ldr	r1, [r4, #16]
 8001b26:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b28:	2180      	movs	r1, #128	; 0x80
 8001b2a:	438a      	bics	r2, r1
 8001b2c:	69a1      	ldr	r1, [r4, #24]
 8001b2e:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8001b30:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b32:	68e2      	ldr	r2, [r4, #12]
 8001b34:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001b36:	6862      	ldr	r2, [r4, #4]
 8001b38:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8001b3a:	6962      	ldr	r2, [r4, #20]
 8001b3c:	631a      	str	r2, [r3, #48]	; 0x30
 8001b3e:	e7e5      	b.n	8001b0c <HAL_TIM_IC_Init+0x58>
    htim->Lock = HAL_UNLOCKED;
 8001b40:	223c      	movs	r2, #60	; 0x3c
 8001b42:	5483      	strb	r3, [r0, r2]
    HAL_TIM_IC_MspInit(htim);
 8001b44:	f7ff ffb4 	bl	8001ab0 <HAL_TIM_IC_MspInit>
 8001b48:	e7bc      	b.n	8001ac4 <HAL_TIM_IC_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b4a:	2170      	movs	r1, #112	; 0x70
 8001b4c:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 8001b4e:	68a1      	ldr	r1, [r4, #8]
 8001b50:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b52:	4913      	ldr	r1, [pc, #76]	; (8001ba0 <HAL_TIM_IC_Init+0xec>)
 8001b54:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b56:	6921      	ldr	r1, [r4, #16]
 8001b58:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b5a:	2180      	movs	r1, #128	; 0x80
 8001b5c:	438a      	bics	r2, r1
 8001b5e:	69a1      	ldr	r1, [r4, #24]
 8001b60:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8001b62:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b64:	68e2      	ldr	r2, [r4, #12]
 8001b66:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001b68:	6862      	ldr	r2, [r4, #4]
 8001b6a:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b6c:	4a0a      	ldr	r2, [pc, #40]	; (8001b98 <HAL_TIM_IC_Init+0xe4>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d0e3      	beq.n	8001b3a <HAL_TIM_IC_Init+0x86>
 8001b72:	4a0a      	ldr	r2, [pc, #40]	; (8001b9c <HAL_TIM_IC_Init+0xe8>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d0e0      	beq.n	8001b3a <HAL_TIM_IC_Init+0x86>
 8001b78:	e7c8      	b.n	8001b0c <HAL_TIM_IC_Init+0x58>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b7a:	4909      	ldr	r1, [pc, #36]	; (8001ba0 <HAL_TIM_IC_Init+0xec>)
 8001b7c:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b7e:	6921      	ldr	r1, [r4, #16]
 8001b80:	430a      	orrs	r2, r1
 8001b82:	e7ba      	b.n	8001afa <HAL_TIM_IC_Init+0x46>
    return HAL_ERROR;
 8001b84:	2001      	movs	r0, #1
 8001b86:	e7c6      	b.n	8001b16 <HAL_TIM_IC_Init+0x62>
 8001b88:	40012c00 	.word	0x40012c00
 8001b8c:	40000400 	.word	0x40000400
 8001b90:	40002000 	.word	0x40002000
 8001b94:	40014000 	.word	0x40014000
 8001b98:	40014400 	.word	0x40014400
 8001b9c:	40014800 	.word	0x40014800
 8001ba0:	fffffcff 	.word	0xfffffcff

08001ba4 <HAL_TIM_IC_Start_DMA>:
{
 8001ba4:	b570      	push	{r4, r5, r6, lr}
 8001ba6:	000d      	movs	r5, r1
  if((htim->State == HAL_TIM_STATE_BUSY))
 8001ba8:	213d      	movs	r1, #61	; 0x3d
 8001baa:	5c46      	ldrb	r6, [r0, r1]
{
 8001bac:	0004      	movs	r4, r0
     return HAL_BUSY;
 8001bae:	2002      	movs	r0, #2
  if((htim->State == HAL_TIM_STATE_BUSY))
 8001bb0:	2e02      	cmp	r6, #2
 8001bb2:	d026      	beq.n	8001c02 <HAL_TIM_IC_Start_DMA+0x5e>
  else if((htim->State == HAL_TIM_STATE_READY))
 8001bb4:	5c61      	ldrb	r1, [r4, r1]
 8001bb6:	2901      	cmp	r1, #1
 8001bb8:	d024      	beq.n	8001c04 <HAL_TIM_IC_Start_DMA+0x60>
  switch (Channel)
 8001bba:	2d04      	cmp	r5, #4
 8001bbc:	d03a      	beq.n	8001c34 <HAL_TIM_IC_Start_DMA+0x90>
 8001bbe:	2d04      	cmp	r5, #4
 8001bc0:	d948      	bls.n	8001c54 <HAL_TIM_IC_Start_DMA+0xb0>
 8001bc2:	2d08      	cmp	r5, #8
 8001bc4:	d026      	beq.n	8001c14 <HAL_TIM_IC_Start_DMA+0x70>
 8001bc6:	2d0c      	cmp	r5, #12
 8001bc8:	d156      	bne.n	8001c78 <HAL_TIM_IC_Start_DMA+0xd4>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8001bca:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001bcc:	492d      	ldr	r1, [pc, #180]	; (8001c84 <HAL_TIM_IC_Start_DMA+0xe0>)
 8001bce:	6281      	str	r1, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8001bd0:	492d      	ldr	r1, [pc, #180]	; (8001c88 <HAL_TIM_IC_Start_DMA+0xe4>)
 8001bd2:	6301      	str	r1, [r0, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length);
 8001bd4:	6821      	ldr	r1, [r4, #0]
 8001bd6:	3140      	adds	r1, #64	; 0x40
 8001bd8:	f7fe ff98 	bl	8000b0c <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8001bdc:	2280      	movs	r2, #128	; 0x80
 8001bde:	6823      	ldr	r3, [r4, #0]
 8001be0:	0152      	lsls	r2, r2, #5
 8001be2:	68d9      	ldr	r1, [r3, #12]
 8001be4:	430a      	orrs	r2, r1
 8001be6:	60da      	str	r2, [r3, #12]
  tmp = TIM_CCER_CC1E << Channel;
 8001be8:	2001      	movs	r0, #1
 8001bea:	0002      	movs	r2, r0
 8001bec:	40aa      	lsls	r2, r5
  TIMx->CCER &= ~tmp;
 8001bee:	6a19      	ldr	r1, [r3, #32]
 8001bf0:	4391      	bics	r1, r2
 8001bf2:	6219      	str	r1, [r3, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001bf4:	6a19      	ldr	r1, [r3, #32]
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	4302      	orrs	r2, r0
  return HAL_OK;
 8001bfe:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8001c00:	601a      	str	r2, [r3, #0]
}
 8001c02:	bd70      	pop	{r4, r5, r6, pc}
    if((pData == 0U ) && (Length > 0U))
 8001c04:	2a00      	cmp	r2, #0
 8001c06:	d039      	beq.n	8001c7c <HAL_TIM_IC_Start_DMA+0xd8>
      htim->State = HAL_TIM_STATE_BUSY;
 8001c08:	2002      	movs	r0, #2
 8001c0a:	213d      	movs	r1, #61	; 0x3d
 8001c0c:	5460      	strb	r0, [r4, r1]
  switch (Channel)
 8001c0e:	2d04      	cmp	r5, #4
 8001c10:	d1d5      	bne.n	8001bbe <HAL_TIM_IC_Start_DMA+0x1a>
 8001c12:	e00f      	b.n	8001c34 <HAL_TIM_IC_Start_DMA+0x90>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8001c14:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001c16:	491b      	ldr	r1, [pc, #108]	; (8001c84 <HAL_TIM_IC_Start_DMA+0xe0>)
 8001c18:	6281      	str	r1, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8001c1a:	491b      	ldr	r1, [pc, #108]	; (8001c88 <HAL_TIM_IC_Start_DMA+0xe4>)
 8001c1c:	6301      	str	r1, [r0, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length);
 8001c1e:	6821      	ldr	r1, [r4, #0]
 8001c20:	313c      	adds	r1, #60	; 0x3c
 8001c22:	f7fe ff73 	bl	8000b0c <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8001c26:	2280      	movs	r2, #128	; 0x80
 8001c28:	6823      	ldr	r3, [r4, #0]
 8001c2a:	0112      	lsls	r2, r2, #4
 8001c2c:	68d9      	ldr	r1, [r3, #12]
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	60da      	str	r2, [r3, #12]
    break;
 8001c32:	e7d9      	b.n	8001be8 <HAL_TIM_IC_Start_DMA+0x44>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8001c34:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001c36:	4913      	ldr	r1, [pc, #76]	; (8001c84 <HAL_TIM_IC_Start_DMA+0xe0>)
 8001c38:	6281      	str	r1, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8001c3a:	4913      	ldr	r1, [pc, #76]	; (8001c88 <HAL_TIM_IC_Start_DMA+0xe4>)
 8001c3c:	6301      	str	r1, [r0, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length);
 8001c3e:	6821      	ldr	r1, [r4, #0]
 8001c40:	3138      	adds	r1, #56	; 0x38
 8001c42:	f7fe ff63 	bl	8000b0c <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8001c46:	2280      	movs	r2, #128	; 0x80
 8001c48:	6823      	ldr	r3, [r4, #0]
 8001c4a:	00d2      	lsls	r2, r2, #3
 8001c4c:	68d9      	ldr	r1, [r3, #12]
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	60da      	str	r2, [r3, #12]
    break;
 8001c52:	e7c9      	b.n	8001be8 <HAL_TIM_IC_Start_DMA+0x44>
  switch (Channel)
 8001c54:	2d00      	cmp	r5, #0
 8001c56:	d10f      	bne.n	8001c78 <HAL_TIM_IC_Start_DMA+0xd4>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8001c58:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001c5a:	490a      	ldr	r1, [pc, #40]	; (8001c84 <HAL_TIM_IC_Start_DMA+0xe0>)
 8001c5c:	6281      	str	r1, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8001c5e:	490a      	ldr	r1, [pc, #40]	; (8001c88 <HAL_TIM_IC_Start_DMA+0xe4>)
 8001c60:	6301      	str	r1, [r0, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length);
 8001c62:	6821      	ldr	r1, [r4, #0]
 8001c64:	3134      	adds	r1, #52	; 0x34
 8001c66:	f7fe ff51 	bl	8000b0c <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8001c6a:	2280      	movs	r2, #128	; 0x80
 8001c6c:	6823      	ldr	r3, [r4, #0]
 8001c6e:	0092      	lsls	r2, r2, #2
 8001c70:	68d9      	ldr	r1, [r3, #12]
 8001c72:	430a      	orrs	r2, r1
 8001c74:	60da      	str	r2, [r3, #12]
    break;
 8001c76:	e7b7      	b.n	8001be8 <HAL_TIM_IC_Start_DMA+0x44>
 8001c78:	6823      	ldr	r3, [r4, #0]
 8001c7a:	e7b5      	b.n	8001be8 <HAL_TIM_IC_Start_DMA+0x44>
      return HAL_ERROR;
 8001c7c:	3801      	subs	r0, #1
    if((pData == 0U ) && (Length > 0U))
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d0c2      	beq.n	8001c08 <HAL_TIM_IC_Start_DMA+0x64>
 8001c82:	e7be      	b.n	8001c02 <HAL_TIM_IC_Start_DMA+0x5e>
 8001c84:	08002245 	.word	0x08002245
 8001c88:	080023e9 	.word	0x080023e9

08001c8c <HAL_TIM_IC_ConfigChannel>:
{
 8001c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c8e:	46ce      	mov	lr, r9
 8001c90:	4647      	mov	r7, r8
  __HAL_LOCK(htim);
 8001c92:	243c      	movs	r4, #60	; 0x3c
{
 8001c94:	b580      	push	{r7, lr}
  __HAL_LOCK(htim);
 8001c96:	5d05      	ldrb	r5, [r0, r4]
{
 8001c98:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8001c9a:	2002      	movs	r0, #2
 8001c9c:	2d01      	cmp	r5, #1
 8001c9e:	d038      	beq.n	8001d12 <HAL_TIM_IC_ConfigChannel+0x86>
 8001ca0:	2501      	movs	r5, #1
 8001ca2:	551d      	strb	r5, [r3, r4]
  htim->State = HAL_TIM_STATE_BUSY;
 8001ca4:	3401      	adds	r4, #1
 8001ca6:	5518      	strb	r0, [r3, r4]
  if (Channel == TIM_CHANNEL_1)
 8001ca8:	2a00      	cmp	r2, #0
 8001caa:	d036      	beq.n	8001d1a <HAL_TIM_IC_ConfigChannel+0x8e>
  else if (Channel == TIM_CHANNEL_2)
 8001cac:	2a04      	cmp	r2, #4
 8001cae:	d063      	beq.n	8001d78 <HAL_TIM_IC_ConfigChannel+0xec>
  else if (Channel == TIM_CHANNEL_3)
 8001cb0:	2a08      	cmp	r2, #8
 8001cb2:	d100      	bne.n	8001cb6 <HAL_TIM_IC_ConfigChannel+0x2a>
 8001cb4:	e086      	b.n	8001dc4 <HAL_TIM_IC_ConfigChannel+0x138>
    TIM_TI4_SetConfig(htim->Instance,
 8001cb6:	6808      	ldr	r0, [r1, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	4680      	mov	r8, r0
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001cbc:	6a16      	ldr	r6, [r2, #32]
 8001cbe:	4f58      	ldr	r7, [pc, #352]	; (8001e20 <HAL_TIM_IC_ConfigChannel+0x194>)
    TIM_TI4_SetConfig(htim->Instance,
 8001cc0:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001cc2:	403e      	ands	r6, r7
    TIM_TI4_SetConfig(htim->Instance,
 8001cc4:	68cc      	ldr	r4, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001cc6:	6216      	str	r6, [r2, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001cc8:	69d7      	ldr	r7, [r2, #28]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8001cca:	4856      	ldr	r0, [pc, #344]	; (8001e24 <HAL_TIM_IC_ConfigChannel+0x198>)
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8001ccc:	022d      	lsls	r5, r5, #8
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8001cce:	4007      	ands	r7, r0
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8001cd0:	433d      	orrs	r5, r7
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8001cd2:	4f55      	ldr	r7, [pc, #340]	; (8001e28 <HAL_TIM_IC_ConfigChannel+0x19c>)
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001cd4:	0724      	lsls	r4, r4, #28
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8001cd6:	403d      	ands	r5, r7
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001cd8:	0c24      	lsrs	r4, r4, #16
  tmpccer = TIMx->CCER;
 8001cda:	6a16      	ldr	r6, [r2, #32]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001cdc:	432c      	orrs	r4, r5
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8001cde:	4d53      	ldr	r5, [pc, #332]	; (8001e2c <HAL_TIM_IC_ConfigChannel+0x1a0>)
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001ce0:	4640      	mov	r0, r8
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8001ce2:	4035      	ands	r5, r6
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001ce4:	26a0      	movs	r6, #160	; 0xa0
 8001ce6:	0300      	lsls	r0, r0, #12
 8001ce8:	0236      	lsls	r6, r6, #8
 8001cea:	4030      	ands	r0, r6
 8001cec:	4328      	orrs	r0, r5
  TIMx->CCMR2 = tmpccmr2;
 8001cee:	61d4      	str	r4, [r2, #28]
  TIMx->CCER = tmpccer ;
 8001cf0:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001cf2:	69d0      	ldr	r0, [r2, #28]
 8001cf4:	4c4e      	ldr	r4, [pc, #312]	; (8001e30 <HAL_TIM_IC_ConfigChannel+0x1a4>)
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001cf6:	6889      	ldr	r1, [r1, #8]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001cf8:	4020      	ands	r0, r4
 8001cfa:	61d0      	str	r0, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001cfc:	69d0      	ldr	r0, [r2, #28]
 8001cfe:	0209      	lsls	r1, r1, #8
 8001d00:	4301      	orrs	r1, r0
 8001d02:	61d1      	str	r1, [r2, #28]
  htim->State = HAL_TIM_STATE_READY;
 8001d04:	2101      	movs	r1, #1
 8001d06:	223d      	movs	r2, #61	; 0x3d
 8001d08:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(htim);
 8001d0a:	2100      	movs	r1, #0
  return HAL_OK;
 8001d0c:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8001d0e:	3a01      	subs	r2, #1
 8001d10:	5499      	strb	r1, [r3, r2]
}
 8001d12:	bc0c      	pop	{r2, r3}
 8001d14:	4690      	mov	r8, r2
 8001d16:	4699      	mov	r9, r3
 8001d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    TIM_TI1_SetConfig(htim->Instance,
 8001d1a:	6848      	ldr	r0, [r1, #4]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	4680      	mov	r8, r0
 8001d20:	68c8      	ldr	r0, [r1, #12]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001d22:	4c44      	ldr	r4, [pc, #272]	; (8001e34 <HAL_TIM_IC_ConfigChannel+0x1a8>)
    TIM_TI1_SetConfig(htim->Instance,
 8001d24:	4681      	mov	r9, r0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d26:	6a10      	ldr	r0, [r2, #32]
    TIM_TI1_SetConfig(htim->Instance,
 8001d28:	680f      	ldr	r7, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d2a:	43a8      	bics	r0, r5
 8001d2c:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d2e:	6990      	ldr	r0, [r2, #24]
  tmpccer = TIMx->CCER;
 8001d30:	6a16      	ldr	r6, [r2, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001d32:	42a2      	cmp	r2, r4
 8001d34:	d06d      	beq.n	8001e12 <HAL_TIM_IC_ConfigChannel+0x186>
 8001d36:	2480      	movs	r4, #128	; 0x80
 8001d38:	05e4      	lsls	r4, r4, #23
 8001d3a:	42a2      	cmp	r2, r4
 8001d3c:	d069      	beq.n	8001e12 <HAL_TIM_IC_ConfigChannel+0x186>
 8001d3e:	4c3e      	ldr	r4, [pc, #248]	; (8001e38 <HAL_TIM_IC_ConfigChannel+0x1ac>)
 8001d40:	42a2      	cmp	r2, r4
 8001d42:	d066      	beq.n	8001e12 <HAL_TIM_IC_ConfigChannel+0x186>
 8001d44:	4c3d      	ldr	r4, [pc, #244]	; (8001e3c <HAL_TIM_IC_ConfigChannel+0x1b0>)
 8001d46:	42a2      	cmp	r2, r4
 8001d48:	d063      	beq.n	8001e12 <HAL_TIM_IC_ConfigChannel+0x186>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8001d4a:	4305      	orrs	r5, r0
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001d4c:	20f0      	movs	r0, #240	; 0xf0
 8001d4e:	4385      	bics	r5, r0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001d50:	4648      	mov	r0, r9
 8001d52:	24ff      	movs	r4, #255	; 0xff
 8001d54:	0100      	lsls	r0, r0, #4
 8001d56:	4004      	ands	r4, r0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d58:	200a      	movs	r0, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001d5a:	4325      	orrs	r5, r4
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001d5c:	240c      	movs	r4, #12
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d5e:	4386      	bics	r6, r0
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001d60:	4038      	ands	r0, r7
 8001d62:	4330      	orrs	r0, r6
  TIMx->CCMR1 = tmpccmr1;
 8001d64:	6195      	str	r5, [r2, #24]
  TIMx->CCER = tmpccer;
 8001d66:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001d68:	6990      	ldr	r0, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001d6a:	6889      	ldr	r1, [r1, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001d6c:	43a0      	bics	r0, r4
 8001d6e:	6190      	str	r0, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001d70:	6990      	ldr	r0, [r2, #24]
 8001d72:	4301      	orrs	r1, r0
 8001d74:	6191      	str	r1, [r2, #24]
 8001d76:	e7c5      	b.n	8001d04 <HAL_TIM_IC_ConfigChannel+0x78>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d78:	2710      	movs	r7, #16
    TIM_TI2_SetConfig(htim->Instance,
 8001d7a:	68c8      	ldr	r0, [r1, #12]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	4680      	mov	r8, r0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d80:	6a15      	ldr	r5, [r2, #32]
    TIM_TI2_SetConfig(htim->Instance,
 8001d82:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d84:	43bd      	bics	r5, r7
    TIM_TI2_SetConfig(htim->Instance,
 8001d86:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d88:	6215      	str	r5, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d8a:	6997      	ldr	r7, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8001d8c:	4825      	ldr	r0, [pc, #148]	; (8001e24 <HAL_TIM_IC_ConfigChannel+0x198>)
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8001d8e:	0224      	lsls	r4, r4, #8
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8001d90:	4007      	ands	r7, r0
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001d92:	4640      	mov	r0, r8
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8001d94:	433c      	orrs	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001d96:	4f24      	ldr	r7, [pc, #144]	; (8001e28 <HAL_TIM_IC_ConfigChannel+0x19c>)
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001d98:	0700      	lsls	r0, r0, #28
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001d9a:	403c      	ands	r4, r7
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001d9c:	0c00      	lsrs	r0, r0, #16
 8001d9e:	4320      	orrs	r0, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001da0:	24a0      	movs	r4, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8001da2:	6a15      	ldr	r5, [r2, #32]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001da4:	0136      	lsls	r6, r6, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001da6:	43a5      	bics	r5, r4
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001da8:	4034      	ands	r4, r6
 8001daa:	4325      	orrs	r5, r4
  TIMx->CCMR1 = tmpccmr1 ;
 8001dac:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 8001dae:	6215      	str	r5, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001db0:	6990      	ldr	r0, [r2, #24]
 8001db2:	4c1f      	ldr	r4, [pc, #124]	; (8001e30 <HAL_TIM_IC_ConfigChannel+0x1a4>)
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001db4:	6889      	ldr	r1, [r1, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001db6:	4020      	ands	r0, r4
 8001db8:	6190      	str	r0, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001dba:	6990      	ldr	r0, [r2, #24]
 8001dbc:	0209      	lsls	r1, r1, #8
 8001dbe:	4301      	orrs	r1, r0
 8001dc0:	6191      	str	r1, [r2, #24]
 8001dc2:	e79f      	b.n	8001d04 <HAL_TIM_IC_ConfigChannel+0x78>
    TIM_TI3_SetConfig(htim->Instance,
 8001dc4:	6808      	ldr	r0, [r1, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	4680      	mov	r8, r0
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8001dca:	2003      	movs	r0, #3
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001dcc:	6a16      	ldr	r6, [r2, #32]
 8001dce:	4f1c      	ldr	r7, [pc, #112]	; (8001e40 <HAL_TIM_IC_ConfigChannel+0x1b4>)
    TIM_TI3_SetConfig(htim->Instance,
 8001dd0:	68cc      	ldr	r4, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001dd2:	403e      	ands	r6, r7
    TIM_TI3_SetConfig(htim->Instance,
 8001dd4:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001dd6:	6216      	str	r6, [r2, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001dd8:	69d7      	ldr	r7, [r2, #28]
  tmpccer = TIMx->CCER;
 8001dda:	6a16      	ldr	r6, [r2, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8001ddc:	4387      	bics	r7, r0
  tmpccmr2 |= TIM_ICSelection;
 8001dde:	433d      	orrs	r5, r7
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8001de0:	27f0      	movs	r7, #240	; 0xf0
 8001de2:	43bd      	bics	r5, r7
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8001de4:	0127      	lsls	r7, r4, #4
 8001de6:	24ff      	movs	r4, #255	; 0xff
 8001de8:	403c      	ands	r4, r7
 8001dea:	432c      	orrs	r4, r5
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8001dec:	4d15      	ldr	r5, [pc, #84]	; (8001e44 <HAL_TIM_IC_ConfigChannel+0x1b8>)
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001dee:	4640      	mov	r0, r8
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8001df0:	4035      	ands	r5, r6
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001df2:	26a0      	movs	r6, #160	; 0xa0
  TIMx->CCMR2 = tmpccmr2;
 8001df4:	61d4      	str	r4, [r2, #28]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001df6:	240c      	movs	r4, #12
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001df8:	0200      	lsls	r0, r0, #8
 8001dfa:	0136      	lsls	r6, r6, #4
 8001dfc:	4030      	ands	r0, r6
 8001dfe:	4328      	orrs	r0, r5
  TIMx->CCER = tmpccer;
 8001e00:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001e02:	69d0      	ldr	r0, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001e04:	6889      	ldr	r1, [r1, #8]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001e06:	43a0      	bics	r0, r4
 8001e08:	61d0      	str	r0, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001e0a:	69d0      	ldr	r0, [r2, #28]
 8001e0c:	4301      	orrs	r1, r0
 8001e0e:	61d1      	str	r1, [r2, #28]
 8001e10:	e778      	b.n	8001d04 <HAL_TIM_IC_ConfigChannel+0x78>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8001e12:	2503      	movs	r5, #3
 8001e14:	43a8      	bics	r0, r5
 8001e16:	0005      	movs	r5, r0
    tmpccmr1 |= TIM_ICSelection;
 8001e18:	4640      	mov	r0, r8
 8001e1a:	4328      	orrs	r0, r5
 8001e1c:	0005      	movs	r5, r0
 8001e1e:	e795      	b.n	8001d4c <HAL_TIM_IC_ConfigChannel+0xc0>
 8001e20:	ffffefff 	.word	0xffffefff
 8001e24:	fffffcff 	.word	0xfffffcff
 8001e28:	ffff0fff 	.word	0xffff0fff
 8001e2c:	ffff5fff 	.word	0xffff5fff
 8001e30:	fffff3ff 	.word	0xfffff3ff
 8001e34:	40012c00 	.word	0x40012c00
 8001e38:	40000400 	.word	0x40000400
 8001e3c:	40014000 	.word	0x40014000
 8001e40:	fffffeff 	.word	0xfffffeff
 8001e44:	fffff5ff 	.word	0xfffff5ff

08001e48 <HAL_TIM_PWM_ConfigChannel>:
{
 8001e48:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8001e4a:	243c      	movs	r4, #60	; 0x3c
 8001e4c:	5d05      	ldrb	r5, [r0, r4]
{
 8001e4e:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8001e50:	2002      	movs	r0, #2
 8001e52:	2d01      	cmp	r5, #1
 8001e54:	d048      	beq.n	8001ee8 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8001e56:	2501      	movs	r5, #1
 8001e58:	551d      	strb	r5, [r3, r4]
  htim->State = HAL_TIM_STATE_BUSY;
 8001e5a:	3401      	adds	r4, #1
 8001e5c:	5518      	strb	r0, [r3, r4]
  switch (Channel)
 8001e5e:	2a04      	cmp	r2, #4
 8001e60:	d043      	beq.n	8001eea <HAL_TIM_PWM_ConfigChannel+0xa2>
 8001e62:	d800      	bhi.n	8001e66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001e64:	e0a6      	b.n	8001fb4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001e66:	2a08      	cmp	r2, #8
 8001e68:	d100      	bne.n	8001e6c <HAL_TIM_PWM_ConfigChannel+0x24>
 8001e6a:	e074      	b.n	8001f56 <HAL_TIM_PWM_ConfigChannel+0x10e>
 8001e6c:	2a0c      	cmp	r2, #12
 8001e6e:	d134      	bne.n	8001eda <HAL_TIM_PWM_ConfigChannel+0x92>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001e70:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001e72:	4c81      	ldr	r4, [pc, #516]	; (8002078 <HAL_TIM_PWM_ConfigChannel+0x230>)
 8001e74:	6a10      	ldr	r0, [r2, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001e76:	4d81      	ldr	r5, [pc, #516]	; (800207c <HAL_TIM_PWM_ConfigChannel+0x234>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001e78:	4020      	ands	r0, r4
 8001e7a:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8001e7c:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8001e7e:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8001e80:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001e82:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e84:	680d      	ldr	r5, [r1, #0]
 8001e86:	022d      	lsls	r5, r5, #8
 8001e88:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC4P;
 8001e8a:	4c7d      	ldr	r4, [pc, #500]	; (8002080 <HAL_TIM_PWM_ConfigChannel+0x238>)
 8001e8c:	4004      	ands	r4, r0
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001e8e:	6888      	ldr	r0, [r1, #8]
 8001e90:	0300      	lsls	r0, r0, #12
 8001e92:	4320      	orrs	r0, r4
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001e94:	4c7b      	ldr	r4, [pc, #492]	; (8002084 <HAL_TIM_PWM_ConfigChannel+0x23c>)
 8001e96:	42a2      	cmp	r2, r4
 8001e98:	d100      	bne.n	8001e9c <HAL_TIM_PWM_ConfigChannel+0x54>
 8001e9a:	e0ca      	b.n	8002032 <HAL_TIM_PWM_ConfigChannel+0x1ea>
 8001e9c:	4c7a      	ldr	r4, [pc, #488]	; (8002088 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8001e9e:	42a2      	cmp	r2, r4
 8001ea0:	d100      	bne.n	8001ea4 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001ea2:	e0c6      	b.n	8002032 <HAL_TIM_PWM_ConfigChannel+0x1ea>
 8001ea4:	4c79      	ldr	r4, [pc, #484]	; (800208c <HAL_TIM_PWM_ConfigChannel+0x244>)
 8001ea6:	42a2      	cmp	r2, r4
 8001ea8:	d100      	bne.n	8001eac <HAL_TIM_PWM_ConfigChannel+0x64>
 8001eaa:	e0c2      	b.n	8002032 <HAL_TIM_PWM_ConfigChannel+0x1ea>
 8001eac:	4c78      	ldr	r4, [pc, #480]	; (8002090 <HAL_TIM_PWM_ConfigChannel+0x248>)
 8001eae:	42a2      	cmp	r2, r4
 8001eb0:	d100      	bne.n	8001eb4 <HAL_TIM_PWM_ConfigChannel+0x6c>
 8001eb2:	e0be      	b.n	8002032 <HAL_TIM_PWM_ConfigChannel+0x1ea>
  TIMx->CCR4 = OC_Config->Pulse;
 8001eb4:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001eb6:	6056      	str	r6, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001eb8:	61d5      	str	r5, [r2, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8001eba:	6414      	str	r4, [r2, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8001ebc:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001ebe:	2080      	movs	r0, #128	; 0x80
 8001ec0:	69d4      	ldr	r4, [r2, #28]
 8001ec2:	0100      	lsls	r0, r0, #4
 8001ec4:	4320      	orrs	r0, r4
 8001ec6:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001ec8:	69d0      	ldr	r0, [r2, #28]
 8001eca:	4c72      	ldr	r4, [pc, #456]	; (8002094 <HAL_TIM_PWM_ConfigChannel+0x24c>)
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001ecc:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001ece:	4020      	ands	r0, r4
 8001ed0:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001ed2:	69d0      	ldr	r0, [r2, #28]
 8001ed4:	0209      	lsls	r1, r1, #8
 8001ed6:	4301      	orrs	r1, r0
 8001ed8:	61d1      	str	r1, [r2, #28]
  htim->State = HAL_TIM_STATE_READY;
 8001eda:	2101      	movs	r1, #1
 8001edc:	223d      	movs	r2, #61	; 0x3d
 8001ede:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(htim);
 8001ee0:	2100      	movs	r1, #0
  return HAL_OK;
 8001ee2:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8001ee4:	3a01      	subs	r2, #1
 8001ee6:	5499      	strb	r1, [r3, r2]
}
 8001ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001eea:	2410      	movs	r4, #16
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001eec:	681a      	ldr	r2, [r3, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001eee:	4d63      	ldr	r5, [pc, #396]	; (800207c <HAL_TIM_PWM_ConfigChannel+0x234>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ef0:	6a10      	ldr	r0, [r2, #32]
 8001ef2:	43a0      	bics	r0, r4
 8001ef4:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8001ef6:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8001ef8:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8001efa:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001efc:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001efe:	680d      	ldr	r5, [r1, #0]
 8001f00:	022d      	lsls	r5, r5, #8
 8001f02:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC2P;
 8001f04:	2420      	movs	r4, #32
 8001f06:	43a0      	bics	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001f08:	688c      	ldr	r4, [r1, #8]
 8001f0a:	0124      	lsls	r4, r4, #4
 8001f0c:	4320      	orrs	r0, r4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001f0e:	4c5d      	ldr	r4, [pc, #372]	; (8002084 <HAL_TIM_PWM_ConfigChannel+0x23c>)
 8001f10:	42a2      	cmp	r2, r4
 8001f12:	d100      	bne.n	8001f16 <HAL_TIM_PWM_ConfigChannel+0xce>
 8001f14:	e093      	b.n	800203e <HAL_TIM_PWM_ConfigChannel+0x1f6>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001f16:	4c5c      	ldr	r4, [pc, #368]	; (8002088 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8001f18:	42a2      	cmp	r2, r4
 8001f1a:	d100      	bne.n	8001f1e <HAL_TIM_PWM_ConfigChannel+0xd6>
 8001f1c:	e096      	b.n	800204c <HAL_TIM_PWM_ConfigChannel+0x204>
 8001f1e:	4c5b      	ldr	r4, [pc, #364]	; (800208c <HAL_TIM_PWM_ConfigChannel+0x244>)
 8001f20:	42a2      	cmp	r2, r4
 8001f22:	d100      	bne.n	8001f26 <HAL_TIM_PWM_ConfigChannel+0xde>
 8001f24:	e092      	b.n	800204c <HAL_TIM_PWM_ConfigChannel+0x204>
 8001f26:	4c5a      	ldr	r4, [pc, #360]	; (8002090 <HAL_TIM_PWM_ConfigChannel+0x248>)
 8001f28:	42a2      	cmp	r2, r4
 8001f2a:	d100      	bne.n	8001f2e <HAL_TIM_PWM_ConfigChannel+0xe6>
 8001f2c:	e08e      	b.n	800204c <HAL_TIM_PWM_ConfigChannel+0x204>
  TIMx->CCR2 = OC_Config->Pulse;
 8001f2e:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001f30:	6056      	str	r6, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001f32:	6195      	str	r5, [r2, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001f34:	6394      	str	r4, [r2, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001f36:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001f38:	2080      	movs	r0, #128	; 0x80
 8001f3a:	6994      	ldr	r4, [r2, #24]
 8001f3c:	0100      	lsls	r0, r0, #4
 8001f3e:	4320      	orrs	r0, r4
 8001f40:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f42:	6990      	ldr	r0, [r2, #24]
 8001f44:	4c53      	ldr	r4, [pc, #332]	; (8002094 <HAL_TIM_PWM_ConfigChannel+0x24c>)
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f46:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f48:	4020      	ands	r0, r4
 8001f4a:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f4c:	6990      	ldr	r0, [r2, #24]
 8001f4e:	0209      	lsls	r1, r1, #8
 8001f50:	4301      	orrs	r1, r0
 8001f52:	6191      	str	r1, [r2, #24]
    break;
 8001f54:	e7c1      	b.n	8001eda <HAL_TIM_PWM_ConfigChannel+0x92>
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001f56:	2673      	movs	r6, #115	; 0x73
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001f58:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001f5a:	4c4f      	ldr	r4, [pc, #316]	; (8002098 <HAL_TIM_PWM_ConfigChannel+0x250>)
 8001f5c:	6a10      	ldr	r0, [r2, #32]
 8001f5e:	4020      	ands	r0, r4
 8001f60:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8001f62:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8001f64:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8001f66:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001f68:	43b4      	bics	r4, r6
  tmpccmrx |= OC_Config->OCMode;
 8001f6a:	680e      	ldr	r6, [r1, #0]
 8001f6c:	4326      	orrs	r6, r4
  tmpccer &= ~TIM_CCER_CC3P;
 8001f6e:	4c4b      	ldr	r4, [pc, #300]	; (800209c <HAL_TIM_PWM_ConfigChannel+0x254>)
 8001f70:	4020      	ands	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001f72:	688c      	ldr	r4, [r1, #8]
 8001f74:	0224      	lsls	r4, r4, #8
 8001f76:	4320      	orrs	r0, r4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001f78:	4c42      	ldr	r4, [pc, #264]	; (8002084 <HAL_TIM_PWM_ConfigChannel+0x23c>)
 8001f7a:	42a2      	cmp	r2, r4
 8001f7c:	d04a      	beq.n	8002014 <HAL_TIM_PWM_ConfigChannel+0x1cc>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001f7e:	4c42      	ldr	r4, [pc, #264]	; (8002088 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8001f80:	42a2      	cmp	r2, r4
 8001f82:	d04e      	beq.n	8002022 <HAL_TIM_PWM_ConfigChannel+0x1da>
 8001f84:	4c41      	ldr	r4, [pc, #260]	; (800208c <HAL_TIM_PWM_ConfigChannel+0x244>)
 8001f86:	42a2      	cmp	r2, r4
 8001f88:	d04b      	beq.n	8002022 <HAL_TIM_PWM_ConfigChannel+0x1da>
 8001f8a:	4c41      	ldr	r4, [pc, #260]	; (8002090 <HAL_TIM_PWM_ConfigChannel+0x248>)
 8001f8c:	42a2      	cmp	r2, r4
 8001f8e:	d048      	beq.n	8002022 <HAL_TIM_PWM_ConfigChannel+0x1da>
  TIMx->CCR3 = OC_Config->Pulse;
 8001f90:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001f92:	6055      	str	r5, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001f94:	61d6      	str	r6, [r2, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8001f96:	63d4      	str	r4, [r2, #60]	; 0x3c
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f98:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 8001f9a:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f9c:	69d0      	ldr	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001f9e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001fa0:	4320      	orrs	r0, r4
 8001fa2:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001fa4:	69d0      	ldr	r0, [r2, #28]
 8001fa6:	3c04      	subs	r4, #4
 8001fa8:	43a0      	bics	r0, r4
 8001faa:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001fac:	69d0      	ldr	r0, [r2, #28]
 8001fae:	4301      	orrs	r1, r0
 8001fb0:	61d1      	str	r1, [r2, #28]
    break;
 8001fb2:	e792      	b.n	8001eda <HAL_TIM_PWM_ConfigChannel+0x92>
  switch (Channel)
 8001fb4:	2a00      	cmp	r2, #0
 8001fb6:	d000      	beq.n	8001fba <HAL_TIM_PWM_ConfigChannel+0x172>
 8001fb8:	e78f      	b.n	8001eda <HAL_TIM_PWM_ConfigChannel+0x92>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001fba:	681a      	ldr	r2, [r3, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001fbc:	2773      	movs	r7, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fbe:	6a14      	ldr	r4, [r2, #32]
 8001fc0:	43ac      	bics	r4, r5
 8001fc2:	6214      	str	r4, [r2, #32]
  tmpccer = TIMx->CCER;
 8001fc4:	6a14      	ldr	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8001fc6:	6856      	ldr	r6, [r2, #4]
  tmpccer &= ~TIM_CCER_CC1P;
 8001fc8:	4384      	bics	r4, r0
 8001fca:	0020      	movs	r0, r4
  tmpccmrx = TIMx->CCMR1;
 8001fcc:	6995      	ldr	r5, [r2, #24]
  tmpccer |= OC_Config->OCPolarity;
 8001fce:	688c      	ldr	r4, [r1, #8]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001fd0:	43bd      	bics	r5, r7
  tmpccer |= OC_Config->OCPolarity;
 8001fd2:	4320      	orrs	r0, r4
  tmpccmrx |= OC_Config->OCMode;
 8001fd4:	680f      	ldr	r7, [r1, #0]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001fd6:	4c2b      	ldr	r4, [pc, #172]	; (8002084 <HAL_TIM_PWM_ConfigChannel+0x23c>)
  tmpccmrx |= OC_Config->OCMode;
 8001fd8:	433d      	orrs	r5, r7
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001fda:	42a2      	cmp	r2, r4
 8001fdc:	d03e      	beq.n	800205c <HAL_TIM_PWM_ConfigChannel+0x214>
 8001fde:	4c2a      	ldr	r4, [pc, #168]	; (8002088 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8001fe0:	42a2      	cmp	r2, r4
 8001fe2:	d03b      	beq.n	800205c <HAL_TIM_PWM_ConfigChannel+0x214>
 8001fe4:	4c29      	ldr	r4, [pc, #164]	; (800208c <HAL_TIM_PWM_ConfigChannel+0x244>)
 8001fe6:	42a2      	cmp	r2, r4
 8001fe8:	d038      	beq.n	800205c <HAL_TIM_PWM_ConfigChannel+0x214>
 8001fea:	4c29      	ldr	r4, [pc, #164]	; (8002090 <HAL_TIM_PWM_ConfigChannel+0x248>)
 8001fec:	42a2      	cmp	r2, r4
 8001fee:	d035      	beq.n	800205c <HAL_TIM_PWM_ConfigChannel+0x214>
  TIMx->CCR1 = OC_Config->Pulse;
 8001ff0:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001ff2:	6056      	str	r6, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001ff4:	6195      	str	r5, [r2, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8001ff6:	6354      	str	r4, [r2, #52]	; 0x34
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001ff8:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 8001ffa:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001ffc:	6990      	ldr	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001ffe:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002000:	4320      	orrs	r0, r4
 8002002:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002004:	6990      	ldr	r0, [r2, #24]
 8002006:	3c04      	subs	r4, #4
 8002008:	43a0      	bics	r0, r4
 800200a:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800200c:	6990      	ldr	r0, [r2, #24]
 800200e:	4301      	orrs	r1, r0
 8002010:	6191      	str	r1, [r2, #24]
    break;
 8002012:	e762      	b.n	8001eda <HAL_TIM_PWM_ConfigChannel+0x92>
    tmpccer &= ~TIM_CCER_CC3NP;
 8002014:	4c22      	ldr	r4, [pc, #136]	; (80020a0 <HAL_TIM_PWM_ConfigChannel+0x258>)
 8002016:	4004      	ands	r4, r0
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002018:	68c8      	ldr	r0, [r1, #12]
 800201a:	0200      	lsls	r0, r0, #8
 800201c:	4320      	orrs	r0, r4
    tmpccer &= ~TIM_CCER_CC3NE;
 800201e:	4c1d      	ldr	r4, [pc, #116]	; (8002094 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 8002020:	4020      	ands	r0, r4
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002022:	4c20      	ldr	r4, [pc, #128]	; (80020a4 <HAL_TIM_PWM_ConfigChannel+0x25c>)
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002024:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002026:	402c      	ands	r4, r5
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002028:	698d      	ldr	r5, [r1, #24]
 800202a:	433d      	orrs	r5, r7
 800202c:	012d      	lsls	r5, r5, #4
 800202e:	4325      	orrs	r5, r4
 8002030:	e7ae      	b.n	8001f90 <HAL_TIM_PWM_ConfigChannel+0x148>
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002032:	4c1d      	ldr	r4, [pc, #116]	; (80020a8 <HAL_TIM_PWM_ConfigChannel+0x260>)
 8002034:	4034      	ands	r4, r6
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002036:	694e      	ldr	r6, [r1, #20]
 8002038:	01b6      	lsls	r6, r6, #6
 800203a:	4326      	orrs	r6, r4
 800203c:	e73a      	b.n	8001eb4 <HAL_TIM_PWM_ConfigChannel+0x6c>
    tmpccer &= ~TIM_CCER_CC2NP;
 800203e:	2480      	movs	r4, #128	; 0x80
 8002040:	43a0      	bics	r0, r4
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002042:	68cc      	ldr	r4, [r1, #12]
 8002044:	0127      	lsls	r7, r4, #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8002046:	2440      	movs	r4, #64	; 0x40
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002048:	4338      	orrs	r0, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 800204a:	43a0      	bics	r0, r4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800204c:	4c17      	ldr	r4, [pc, #92]	; (80020ac <HAL_TIM_PWM_ConfigChannel+0x264>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800204e:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002050:	4034      	ands	r4, r6
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002052:	698e      	ldr	r6, [r1, #24]
 8002054:	433e      	orrs	r6, r7
 8002056:	00b6      	lsls	r6, r6, #2
 8002058:	4326      	orrs	r6, r4
 800205a:	e768      	b.n	8001f2e <HAL_TIM_PWM_ConfigChannel+0xe6>
    tmpccer &= ~TIM_CCER_CC1NP;
 800205c:	2408      	movs	r4, #8
 800205e:	43a0      	bics	r0, r4
    tmpccer |= OC_Config->OCNPolarity;
 8002060:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8002062:	698f      	ldr	r7, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 8002064:	4320      	orrs	r0, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 8002066:	2404      	movs	r4, #4
 8002068:	43a0      	bics	r0, r4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800206a:	4c11      	ldr	r4, [pc, #68]	; (80020b0 <HAL_TIM_PWM_ConfigChannel+0x268>)
 800206c:	4026      	ands	r6, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 800206e:	694c      	ldr	r4, [r1, #20]
 8002070:	433c      	orrs	r4, r7
 8002072:	4326      	orrs	r6, r4
 8002074:	e7bc      	b.n	8001ff0 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8002076:	46c0      	nop			; (mov r8, r8)
 8002078:	ffffefff 	.word	0xffffefff
 800207c:	ffff8cff 	.word	0xffff8cff
 8002080:	ffffdfff 	.word	0xffffdfff
 8002084:	40012c00 	.word	0x40012c00
 8002088:	40014000 	.word	0x40014000
 800208c:	40014400 	.word	0x40014400
 8002090:	40014800 	.word	0x40014800
 8002094:	fffffbff 	.word	0xfffffbff
 8002098:	fffffeff 	.word	0xfffffeff
 800209c:	fffffdff 	.word	0xfffffdff
 80020a0:	fffff7ff 	.word	0xfffff7ff
 80020a4:	ffffcfff 	.word	0xffffcfff
 80020a8:	ffffbfff 	.word	0xffffbfff
 80020ac:	fffff3ff 	.word	0xfffff3ff
 80020b0:	fffffcff 	.word	0xfffffcff

080020b4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80020b4:	223c      	movs	r2, #60	; 0x3c
{
 80020b6:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80020b8:	5c84      	ldrb	r4, [r0, r2]
 80020ba:	2302      	movs	r3, #2
 80020bc:	2c01      	cmp	r4, #1
 80020be:	d03d      	beq.n	800213c <HAL_TIM_ConfigClockSource+0x88>
 80020c0:	2401      	movs	r4, #1
 80020c2:	5484      	strb	r4, [r0, r2]
  htim->State = HAL_TIM_STATE_BUSY;
 80020c4:	3201      	adds	r2, #1
 80020c6:	5483      	strb	r3, [r0, r2]
  tmpsmcr = htim->Instance->SMCR;
 80020c8:	6803      	ldr	r3, [r0, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020ca:	4d59      	ldr	r5, [pc, #356]	; (8002230 <HAL_TIM_ConfigClockSource+0x17c>)
  tmpsmcr = htim->Instance->SMCR;
 80020cc:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020ce:	402a      	ands	r2, r5
  htim->Instance->SMCR = tmpsmcr;
 80020d0:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80020d2:	680a      	ldr	r2, [r1, #0]
 80020d4:	2a40      	cmp	r2, #64	; 0x40
 80020d6:	d100      	bne.n	80020da <HAL_TIM_ConfigClockSource+0x26>
 80020d8:	e074      	b.n	80021c4 <HAL_TIM_ConfigClockSource+0x110>
 80020da:	d91b      	bls.n	8002114 <HAL_TIM_ConfigClockSource+0x60>
 80020dc:	2a70      	cmp	r2, #112	; 0x70
 80020de:	d061      	beq.n	80021a4 <HAL_TIM_ConfigClockSource+0xf0>
 80020e0:	d92e      	bls.n	8002140 <HAL_TIM_ConfigClockSource+0x8c>
 80020e2:	2480      	movs	r4, #128	; 0x80
 80020e4:	0164      	lsls	r4, r4, #5
 80020e6:	42a2      	cmp	r2, r4
 80020e8:	d057      	beq.n	800219a <HAL_TIM_ConfigClockSource+0xe6>
 80020ea:	2480      	movs	r4, #128	; 0x80
 80020ec:	01a4      	lsls	r4, r4, #6
 80020ee:	42a2      	cmp	r2, r4
 80020f0:	d11d      	bne.n	800212e <HAL_TIM_ConfigClockSource+0x7a>
  tmpsmcr = TIMx->SMCR;
 80020f2:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020f4:	4c4f      	ldr	r4, [pc, #316]	; (8002234 <HAL_TIM_ConfigClockSource+0x180>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80020f6:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020f8:	4014      	ands	r4, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80020fa:	688a      	ldr	r2, [r1, #8]
 80020fc:	68c9      	ldr	r1, [r1, #12]
 80020fe:	432a      	orrs	r2, r5
 8002100:	0209      	lsls	r1, r1, #8
 8002102:	430a      	orrs	r2, r1
 8002104:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8002106:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002108:	2280      	movs	r2, #128	; 0x80
 800210a:	6899      	ldr	r1, [r3, #8]
 800210c:	01d2      	lsls	r2, r2, #7
 800210e:	430a      	orrs	r2, r1
 8002110:	609a      	str	r2, [r3, #8]
    break;
 8002112:	e00c      	b.n	800212e <HAL_TIM_ConfigClockSource+0x7a>
  switch (sClockSourceConfig->ClockSource)
 8002114:	2a10      	cmp	r2, #16
 8002116:	d030      	beq.n	800217a <HAL_TIM_ConfigClockSource+0xc6>
 8002118:	d936      	bls.n	8002188 <HAL_TIM_ConfigClockSource+0xd4>
 800211a:	2a20      	cmp	r2, #32
 800211c:	d069      	beq.n	80021f2 <HAL_TIM_ConfigClockSource+0x13e>
 800211e:	2a30      	cmp	r2, #48	; 0x30
 8002120:	d105      	bne.n	800212e <HAL_TIM_ConfigClockSource+0x7a>
   tmpsmcr &= ~TIM_SMCR_TS;
 8002122:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8002124:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002126:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002128:	3939      	subs	r1, #57	; 0x39
 800212a:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 800212c:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 800212e:	2201      	movs	r2, #1
 8002130:	233d      	movs	r3, #61	; 0x3d
 8002132:	54c2      	strb	r2, [r0, r3]
  __HAL_UNLOCK(htim);
 8002134:	2200      	movs	r2, #0
 8002136:	3b01      	subs	r3, #1
 8002138:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 800213a:	2300      	movs	r3, #0
}
 800213c:	0018      	movs	r0, r3
 800213e:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002140:	2a50      	cmp	r2, #80	; 0x50
 8002142:	d05d      	beq.n	8002200 <HAL_TIM_ConfigClockSource+0x14c>
 8002144:	2a60      	cmp	r2, #96	; 0x60
 8002146:	d1f2      	bne.n	800212e <HAL_TIM_ConfigClockSource+0x7a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002148:	2510      	movs	r5, #16
 800214a:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800214c:	684a      	ldr	r2, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800214e:	43ac      	bics	r4, r5
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002150:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002152:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002154:	699d      	ldr	r5, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002156:	4e38      	ldr	r6, [pc, #224]	; (8002238 <HAL_TIM_ConfigClockSource+0x184>)
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002158:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800215a:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800215c:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800215e:	25a0      	movs	r5, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8002160:	6a1c      	ldr	r4, [r3, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8002162:	6199      	str	r1, [r3, #24]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002164:	2170      	movs	r1, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002166:	43ac      	bics	r4, r5
  tmpccer |= (TIM_ICPolarity << 4U);
 8002168:	0112      	lsls	r2, r2, #4
 800216a:	4322      	orrs	r2, r4
  TIMx->CCER = tmpccer;
 800216c:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800216e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002170:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002172:	3909      	subs	r1, #9
 8002174:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	e7d9      	b.n	800212e <HAL_TIM_ConfigClockSource+0x7a>
   tmpsmcr &= ~TIM_SMCR_TS;
 800217a:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 800217c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800217e:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002180:	3959      	subs	r1, #89	; 0x59
 8002182:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 8002184:	609a      	str	r2, [r3, #8]
 8002186:	e7d2      	b.n	800212e <HAL_TIM_ConfigClockSource+0x7a>
  switch (sClockSourceConfig->ClockSource)
 8002188:	2a00      	cmp	r2, #0
 800218a:	d1d0      	bne.n	800212e <HAL_TIM_ConfigClockSource+0x7a>
   tmpsmcr &= ~TIM_SMCR_TS;
 800218c:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 800218e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002190:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002192:	3969      	subs	r1, #105	; 0x69
 8002194:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	e7c9      	b.n	800212e <HAL_TIM_ConfigClockSource+0x7a>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800219a:	2107      	movs	r1, #7
 800219c:	689a      	ldr	r2, [r3, #8]
 800219e:	438a      	bics	r2, r1
 80021a0:	609a      	str	r2, [r3, #8]
    break;
 80021a2:	e7c4      	b.n	800212e <HAL_TIM_ConfigClockSource+0x7a>
  tmpsmcr = TIMx->SMCR;
 80021a4:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021a6:	4c23      	ldr	r4, [pc, #140]	; (8002234 <HAL_TIM_ConfigClockSource+0x180>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021a8:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021aa:	4014      	ands	r4, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021ac:	688a      	ldr	r2, [r1, #8]
 80021ae:	68c9      	ldr	r1, [r1, #12]
 80021b0:	432a      	orrs	r2, r5
 80021b2:	0209      	lsls	r1, r1, #8
 80021b4:	430a      	orrs	r2, r1
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021b6:	2177      	movs	r1, #119	; 0x77
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021b8:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 80021ba:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 80021bc:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021be:	430a      	orrs	r2, r1
      htim->Instance->SMCR = tmpsmcr;
 80021c0:	609a      	str	r2, [r3, #8]
    break;
 80021c2:	e7b4      	b.n	800212e <HAL_TIM_ConfigClockSource+0x7a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021c4:	684d      	ldr	r5, [r1, #4]
 80021c6:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 80021c8:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021ca:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80021cc:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021ce:	43a6      	bics	r6, r4
 80021d0:	621e      	str	r6, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80021d2:	26f0      	movs	r6, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 80021d4:	699c      	ldr	r4, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80021d6:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80021d8:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80021da:	240a      	movs	r4, #10
 80021dc:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 80021de:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 80021e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021e2:	6219      	str	r1, [r3, #32]
   tmpsmcr &= ~TIM_SMCR_TS;
 80021e4:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 80021e6:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80021e8:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80021ea:	3929      	subs	r1, #41	; 0x29
 80021ec:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 80021ee:	609a      	str	r2, [r3, #8]
 80021f0:	e79d      	b.n	800212e <HAL_TIM_ConfigClockSource+0x7a>
   tmpsmcr &= ~TIM_SMCR_TS;
 80021f2:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 80021f4:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80021f6:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80021f8:	3949      	subs	r1, #73	; 0x49
 80021fa:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 80021fc:	609a      	str	r2, [r3, #8]
 80021fe:	e796      	b.n	800212e <HAL_TIM_ConfigClockSource+0x7a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002200:	684d      	ldr	r5, [r1, #4]
 8002202:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 8002204:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002206:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002208:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800220a:	43a6      	bics	r6, r4
 800220c:	621e      	str	r6, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800220e:	26f0      	movs	r6, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8002210:	699c      	ldr	r4, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002212:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002214:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002216:	240a      	movs	r4, #10
 8002218:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 800221a:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 800221c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800221e:	6219      	str	r1, [r3, #32]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002220:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8002222:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002224:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002226:	3919      	subs	r1, #25
 8002228:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 800222a:	609a      	str	r2, [r3, #8]
 800222c:	e77f      	b.n	800212e <HAL_TIM_ConfigClockSource+0x7a>
 800222e:	46c0      	nop			; (mov r8, r8)
 8002230:	ffff0088 	.word	0xffff0088
 8002234:	ffff00ff 	.word	0xffff00ff
 8002238:	ffff0fff 	.word	0xffff0fff

0800223c <HAL_TIM_OC_DelayElapsedCallback>:
 800223c:	4770      	bx	lr
 800223e:	46c0      	nop			; (mov r8, r8)

08002240 <HAL_TIM_IC_CaptureCallback>:
 8002240:	4770      	bx	lr
 8002242:	46c0      	nop			; (mov r8, r8)

08002244 <TIM_DMACaptureCplt>:
  htim->State= HAL_TIM_STATE_READY;
 8002244:	223d      	movs	r2, #61	; 0x3d
 8002246:	2301      	movs	r3, #1
{
 8002248:	b510      	push	{r4, lr}
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800224a:	6a44      	ldr	r4, [r0, #36]	; 0x24
  htim->State= HAL_TIM_STATE_READY;
 800224c:	54a3      	strb	r3, [r4, r2]
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800224e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002250:	4290      	cmp	r0, r2
 8002252:	d00f      	beq.n	8002274 <TIM_DMACaptureCplt+0x30>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002254:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002256:	4298      	cmp	r0, r3
 8002258:	d00e      	beq.n	8002278 <TIM_DMACaptureCplt+0x34>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800225a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800225c:	4298      	cmp	r0, r3
 800225e:	d00e      	beq.n	800227e <TIM_DMACaptureCplt+0x3a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002260:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002262:	4298      	cmp	r0, r3
 8002264:	d005      	beq.n	8002272 <TIM_DMACaptureCplt+0x2e>
  HAL_TIM_IC_CaptureCallback(htim);
 8002266:	0020      	movs	r0, r4
 8002268:	f7ff ffea 	bl	8002240 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800226c:	2300      	movs	r3, #0
 800226e:	7723      	strb	r3, [r4, #28]
}
 8002270:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002272:	2308      	movs	r3, #8
 8002274:	7723      	strb	r3, [r4, #28]
 8002276:	e7f6      	b.n	8002266 <TIM_DMACaptureCplt+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002278:	2302      	movs	r3, #2
 800227a:	7723      	strb	r3, [r4, #28]
 800227c:	e7f3      	b.n	8002266 <TIM_DMACaptureCplt+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800227e:	2304      	movs	r3, #4
 8002280:	7723      	strb	r3, [r4, #28]
 8002282:	e7f0      	b.n	8002266 <TIM_DMACaptureCplt+0x22>

08002284 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002284:	4770      	bx	lr
 8002286:	46c0      	nop			; (mov r8, r8)

08002288 <HAL_TIM_TriggerCallback>:
 8002288:	4770      	bx	lr
 800228a:	46c0      	nop			; (mov r8, r8)

0800228c <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800228c:	2202      	movs	r2, #2
 800228e:	6803      	ldr	r3, [r0, #0]
{
 8002290:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002292:	6919      	ldr	r1, [r3, #16]
{
 8002294:	0004      	movs	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002296:	420a      	tst	r2, r1
 8002298:	d002      	beq.n	80022a0 <HAL_TIM_IRQHandler+0x14>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800229a:	68d9      	ldr	r1, [r3, #12]
 800229c:	420a      	tst	r2, r1
 800229e:	d168      	bne.n	8002372 <HAL_TIM_IRQHandler+0xe6>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022a0:	2204      	movs	r2, #4
 80022a2:	6919      	ldr	r1, [r3, #16]
 80022a4:	420a      	tst	r2, r1
 80022a6:	d002      	beq.n	80022ae <HAL_TIM_IRQHandler+0x22>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80022a8:	68d9      	ldr	r1, [r3, #12]
 80022aa:	420a      	tst	r2, r1
 80022ac:	d14e      	bne.n	800234c <HAL_TIM_IRQHandler+0xc0>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022ae:	2208      	movs	r2, #8
 80022b0:	6919      	ldr	r1, [r3, #16]
 80022b2:	420a      	tst	r2, r1
 80022b4:	d002      	beq.n	80022bc <HAL_TIM_IRQHandler+0x30>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80022b6:	68d9      	ldr	r1, [r3, #12]
 80022b8:	420a      	tst	r2, r1
 80022ba:	d136      	bne.n	800232a <HAL_TIM_IRQHandler+0x9e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022bc:	2210      	movs	r2, #16
 80022be:	6919      	ldr	r1, [r3, #16]
 80022c0:	420a      	tst	r2, r1
 80022c2:	d002      	beq.n	80022ca <HAL_TIM_IRQHandler+0x3e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80022c4:	68d9      	ldr	r1, [r3, #12]
 80022c6:	420a      	tst	r2, r1
 80022c8:	d11c      	bne.n	8002304 <HAL_TIM_IRQHandler+0x78>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022ca:	2201      	movs	r2, #1
 80022cc:	6919      	ldr	r1, [r3, #16]
 80022ce:	420a      	tst	r2, r1
 80022d0:	d002      	beq.n	80022d8 <HAL_TIM_IRQHandler+0x4c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80022d2:	68d9      	ldr	r1, [r3, #12]
 80022d4:	420a      	tst	r2, r1
 80022d6:	d169      	bne.n	80023ac <HAL_TIM_IRQHandler+0x120>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022d8:	2280      	movs	r2, #128	; 0x80
 80022da:	6919      	ldr	r1, [r3, #16]
 80022dc:	420a      	tst	r2, r1
 80022de:	d002      	beq.n	80022e6 <HAL_TIM_IRQHandler+0x5a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80022e0:	68d9      	ldr	r1, [r3, #12]
 80022e2:	420a      	tst	r2, r1
 80022e4:	d169      	bne.n	80023ba <HAL_TIM_IRQHandler+0x12e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022e6:	2240      	movs	r2, #64	; 0x40
 80022e8:	6919      	ldr	r1, [r3, #16]
 80022ea:	420a      	tst	r2, r1
 80022ec:	d002      	beq.n	80022f4 <HAL_TIM_IRQHandler+0x68>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80022ee:	68d9      	ldr	r1, [r3, #12]
 80022f0:	420a      	tst	r2, r1
 80022f2:	d154      	bne.n	800239e <HAL_TIM_IRQHandler+0x112>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022f4:	2220      	movs	r2, #32
 80022f6:	6919      	ldr	r1, [r3, #16]
 80022f8:	420a      	tst	r2, r1
 80022fa:	d002      	beq.n	8002302 <HAL_TIM_IRQHandler+0x76>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80022fc:	68d9      	ldr	r1, [r3, #12]
 80022fe:	420a      	tst	r2, r1
 8002300:	d147      	bne.n	8002392 <HAL_TIM_IRQHandler+0x106>
}
 8002302:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002304:	3a21      	subs	r2, #33	; 0x21
 8002306:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002308:	3219      	adds	r2, #25
 800230a:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800230c:	69da      	ldr	r2, [r3, #28]
 800230e:	23c0      	movs	r3, #192	; 0xc0
 8002310:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8002312:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002314:	421a      	tst	r2, r3
 8002316:	d15b      	bne.n	80023d0 <HAL_TIM_IRQHandler+0x144>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002318:	f7ff ff90 	bl	800223c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800231c:	0020      	movs	r0, r4
 800231e:	f7ff ffb1 	bl	8002284 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002322:	2300      	movs	r3, #0
 8002324:	7723      	strb	r3, [r4, #28]
 8002326:	6823      	ldr	r3, [r4, #0]
 8002328:	e7cf      	b.n	80022ca <HAL_TIM_IRQHandler+0x3e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800232a:	3a11      	subs	r2, #17
 800232c:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800232e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002330:	320d      	adds	r2, #13
 8002332:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8002334:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002336:	079b      	lsls	r3, r3, #30
 8002338:	d150      	bne.n	80023dc <HAL_TIM_IRQHandler+0x150>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800233a:	f7ff ff7f 	bl	800223c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800233e:	0020      	movs	r0, r4
 8002340:	f7ff ffa0 	bl	8002284 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002344:	2300      	movs	r3, #0
 8002346:	7723      	strb	r3, [r4, #28]
 8002348:	6823      	ldr	r3, [r4, #0]
 800234a:	e7b7      	b.n	80022bc <HAL_TIM_IRQHandler+0x30>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800234c:	3a09      	subs	r2, #9
 800234e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002350:	3207      	adds	r2, #7
 8002352:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002354:	699a      	ldr	r2, [r3, #24]
 8002356:	23c0      	movs	r3, #192	; 0xc0
 8002358:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800235a:	0020      	movs	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800235c:	421a      	tst	r2, r3
 800235e:	d13a      	bne.n	80023d6 <HAL_TIM_IRQHandler+0x14a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002360:	f7ff ff6c 	bl	800223c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002364:	0020      	movs	r0, r4
 8002366:	f7ff ff8d 	bl	8002284 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800236a:	2300      	movs	r3, #0
 800236c:	7723      	strb	r3, [r4, #28]
 800236e:	6823      	ldr	r3, [r4, #0]
 8002370:	e79d      	b.n	80022ae <HAL_TIM_IRQHandler+0x22>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002372:	3a05      	subs	r2, #5
 8002374:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002376:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002378:	3204      	adds	r2, #4
 800237a:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800237c:	079b      	lsls	r3, r3, #30
 800237e:	d124      	bne.n	80023ca <HAL_TIM_IRQHandler+0x13e>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002380:	f7ff ff5c 	bl	800223c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002384:	0020      	movs	r0, r4
 8002386:	f7ff ff7d 	bl	8002284 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800238a:	2300      	movs	r3, #0
 800238c:	7723      	strb	r3, [r4, #28]
 800238e:	6823      	ldr	r3, [r4, #0]
 8002390:	e786      	b.n	80022a0 <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002392:	3a41      	subs	r2, #65	; 0x41
 8002394:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002396:	0020      	movs	r0, r4
 8002398:	f000 f89e 	bl	80024d8 <HAL_TIMEx_CommutationCallback>
}
 800239c:	e7b1      	b.n	8002302 <HAL_TIM_IRQHandler+0x76>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800239e:	3a81      	subs	r2, #129	; 0x81
 80023a0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80023a2:	0020      	movs	r0, r4
 80023a4:	f7ff ff70 	bl	8002288 <HAL_TIM_TriggerCallback>
 80023a8:	6823      	ldr	r3, [r4, #0]
 80023aa:	e7a3      	b.n	80022f4 <HAL_TIM_IRQHandler+0x68>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023ac:	3a03      	subs	r2, #3
 80023ae:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80023b0:	0020      	movs	r0, r4
 80023b2:	f001 fa25 	bl	8003800 <HAL_TIM_PeriodElapsedCallback>
 80023b6:	6823      	ldr	r3, [r4, #0]
 80023b8:	e78e      	b.n	80022d8 <HAL_TIM_IRQHandler+0x4c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023ba:	3a02      	subs	r2, #2
 80023bc:	3aff      	subs	r2, #255	; 0xff
 80023be:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80023c0:	0020      	movs	r0, r4
 80023c2:	f000 f88b 	bl	80024dc <HAL_TIMEx_BreakCallback>
 80023c6:	6823      	ldr	r3, [r4, #0]
 80023c8:	e78d      	b.n	80022e6 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_IC_CaptureCallback(htim);
 80023ca:	f7ff ff39 	bl	8002240 <HAL_TIM_IC_CaptureCallback>
 80023ce:	e7dc      	b.n	800238a <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 80023d0:	f7ff ff36 	bl	8002240 <HAL_TIM_IC_CaptureCallback>
 80023d4:	e7a5      	b.n	8002322 <HAL_TIM_IRQHandler+0x96>
        HAL_TIM_IC_CaptureCallback(htim);
 80023d6:	f7ff ff33 	bl	8002240 <HAL_TIM_IC_CaptureCallback>
 80023da:	e7c6      	b.n	800236a <HAL_TIM_IRQHandler+0xde>
        HAL_TIM_IC_CaptureCallback(htim);
 80023dc:	f7ff ff30 	bl	8002240 <HAL_TIM_IC_CaptureCallback>
 80023e0:	e7b0      	b.n	8002344 <HAL_TIM_IRQHandler+0xb8>
 80023e2:	46c0      	nop			; (mov r8, r8)

080023e4 <HAL_TIM_ErrorCallback>:
}
 80023e4:	4770      	bx	lr
 80023e6:	46c0      	nop			; (mov r8, r8)

080023e8 <TIM_DMAError>:
  htim->State= HAL_TIM_STATE_READY;
 80023e8:	2201      	movs	r2, #1
 80023ea:	233d      	movs	r3, #61	; 0x3d
{
 80023ec:	b510      	push	{r4, lr}
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023ee:	6a40      	ldr	r0, [r0, #36]	; 0x24
  htim->State= HAL_TIM_STATE_READY;
 80023f0:	54c2      	strb	r2, [r0, r3]
  HAL_TIM_ErrorCallback(htim);
 80023f2:	f7ff fff7 	bl	80023e4 <HAL_TIM_ErrorCallback>
}
 80023f6:	bd10      	pop	{r4, pc}

080023f8 <HAL_TIMEx_PWMN_Start>:
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelNState)
{
  uint32_t tmp = 0U;

  tmp = TIM_CCER_CC1NE << Channel;
 80023f8:	2204      	movs	r2, #4
 80023fa:	408a      	lsls	r2, r1
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80023fc:	6803      	ldr	r3, [r0, #0]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80023fe:	6a19      	ldr	r1, [r3, #32]
}
 8002400:	2000      	movs	r0, #0
  TIMx->CCER &=  ~tmp;
 8002402:	4391      	bics	r1, r2
 8002404:	6219      	str	r1, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelNState << Channel);
 8002406:	6a19      	ldr	r1, [r3, #32]
 8002408:	430a      	orrs	r2, r1
 800240a:	621a      	str	r2, [r3, #32]
  __HAL_TIM_MOE_ENABLE(htim);
 800240c:	2280      	movs	r2, #128	; 0x80
 800240e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002410:	0212      	lsls	r2, r2, #8
 8002412:	430a      	orrs	r2, r1
  __HAL_TIM_ENABLE(htim);
 8002414:	2101      	movs	r1, #1
  __HAL_TIM_MOE_ENABLE(htim);
 8002416:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	430a      	orrs	r2, r1
 800241c:	601a      	str	r2, [r3, #0]
}
 800241e:	4770      	bx	lr

08002420 <HAL_TIMEx_MasterConfigSynchronization>:
{
 8002420:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8002422:	243c      	movs	r4, #60	; 0x3c
 8002424:	5d03      	ldrb	r3, [r0, r4]
{
 8002426:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 8002428:	2002      	movs	r0, #2
 800242a:	2b01      	cmp	r3, #1
 800242c:	d017      	beq.n	800245e <HAL_TIMEx_MasterConfigSynchronization+0x3e>
  htim->State = HAL_TIM_STATE_BUSY;
 800242e:	253d      	movs	r5, #61	; 0x3d
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002430:	2670      	movs	r6, #112	; 0x70
 8002432:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002434:	5550      	strb	r0, [r2, r5]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002436:	6858      	ldr	r0, [r3, #4]
 8002438:	43b0      	bics	r0, r6
 800243a:	6058      	str	r0, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800243c:	6858      	ldr	r0, [r3, #4]
 800243e:	680e      	ldr	r6, [r1, #0]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002440:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002442:	4330      	orrs	r0, r6
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002444:	2680      	movs	r6, #128	; 0x80
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002446:	6058      	str	r0, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002448:	6898      	ldr	r0, [r3, #8]
 800244a:	43b0      	bics	r0, r6
 800244c:	6098      	str	r0, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800244e:	6898      	ldr	r0, [r3, #8]
 8002450:	4301      	orrs	r1, r0
 8002452:	6099      	str	r1, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 8002454:	2301      	movs	r3, #1
 8002456:	5553      	strb	r3, [r2, r5]
  __HAL_UNLOCK(htim);
 8002458:	2300      	movs	r3, #0
  return HAL_OK;
 800245a:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 800245c:	5513      	strb	r3, [r2, r4]
}
 800245e:	bd70      	pop	{r4, r5, r6, pc}

08002460 <HAL_TIMEx_ConfigBreakDeadTime>:
{
 8002460:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8002462:	243c      	movs	r4, #60	; 0x3c
 8002464:	5d03      	ldrb	r3, [r0, r4]
{
 8002466:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 8002468:	2002      	movs	r0, #2
 800246a:	2b01      	cmp	r3, #1
 800246c:	d024      	beq.n	80024b8 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  htim->State = HAL_TIM_STATE_BUSY;
 800246e:	253d      	movs	r5, #61	; 0x3d
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002470:	4b12      	ldr	r3, [pc, #72]	; (80024bc <HAL_TIMEx_ConfigBreakDeadTime+0x5c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002472:	5550      	strb	r0, [r2, r5]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002474:	68c8      	ldr	r0, [r1, #12]
 8002476:	4003      	ands	r3, r0
 8002478:	6888      	ldr	r0, [r1, #8]
 800247a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800247c:	4810      	ldr	r0, [pc, #64]	; (80024c0 <HAL_TIMEx_ConfigBreakDeadTime+0x60>)
 800247e:	4003      	ands	r3, r0
 8002480:	6848      	ldr	r0, [r1, #4]
 8002482:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002484:	480f      	ldr	r0, [pc, #60]	; (80024c4 <HAL_TIMEx_ConfigBreakDeadTime+0x64>)
 8002486:	4003      	ands	r3, r0
 8002488:	6808      	ldr	r0, [r1, #0]
 800248a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800248c:	480e      	ldr	r0, [pc, #56]	; (80024c8 <HAL_TIMEx_ConfigBreakDeadTime+0x68>)
 800248e:	4003      	ands	r3, r0
 8002490:	6908      	ldr	r0, [r1, #16]
 8002492:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002494:	480d      	ldr	r0, [pc, #52]	; (80024cc <HAL_TIMEx_ConfigBreakDeadTime+0x6c>)
 8002496:	4003      	ands	r3, r0
 8002498:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800249a:	6989      	ldr	r1, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800249c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800249e:	480c      	ldr	r0, [pc, #48]	; (80024d0 <HAL_TIMEx_ConfigBreakDeadTime+0x70>)
 80024a0:	4003      	ands	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80024a2:	480c      	ldr	r0, [pc, #48]	; (80024d4 <HAL_TIMEx_ConfigBreakDeadTime+0x74>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80024a4:	430b      	orrs	r3, r1
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80024a6:	4003      	ands	r3, r0
 80024a8:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 80024aa:	6811      	ldr	r1, [r2, #0]
  return HAL_OK;
 80024ac:	2000      	movs	r0, #0
  htim->Instance->BDTR = tmpbdtr;
 80024ae:	644b      	str	r3, [r1, #68]	; 0x44
  htim->State = HAL_TIM_STATE_READY;
 80024b0:	2301      	movs	r3, #1
 80024b2:	5553      	strb	r3, [r2, r5]
  __HAL_UNLOCK(htim);
 80024b4:	2300      	movs	r3, #0
 80024b6:	5513      	strb	r3, [r2, r4]
}
 80024b8:	bd30      	pop	{r4, r5, pc}
 80024ba:	46c0      	nop			; (mov r8, r8)
 80024bc:	fffffcff 	.word	0xfffffcff
 80024c0:	fffffbff 	.word	0xfffffbff
 80024c4:	fffff7ff 	.word	0xfffff7ff
 80024c8:	ffffefff 	.word	0xffffefff
 80024cc:	ffffdfff 	.word	0xffffdfff
 80024d0:	ffffbfff 	.word	0xffffbfff
 80024d4:	ffff7fff 	.word	0xffff7fff

080024d8 <HAL_TIMEx_CommutationCallback>:
 80024d8:	4770      	bx	lr
 80024da:	46c0      	nop			; (mov r8, r8)

080024dc <HAL_TIMEx_BreakCallback>:
}
 80024dc:	4770      	bx	lr
 80024de:	46c0      	nop			; (mov r8, r8)

080024e0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80024e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024e2:	46de      	mov	lr, fp
 80024e4:	464e      	mov	r6, r9
 80024e6:	4657      	mov	r7, sl
 80024e8:	4645      	mov	r5, r8
 80024ea:	b5e0      	push	{r5, r6, r7, lr}
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80024ec:	680e      	ldr	r6, [r1, #0]
{
 80024ee:	468b      	mov	fp, r1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80024f0:	2e00      	cmp	r6, #0
 80024f2:	d100      	bne.n	80024f6 <LL_GPIO_Init+0x16>
 80024f4:	e073      	b.n	80025de <LL_GPIO_Init+0xfe>
 80024f6:	684b      	ldr	r3, [r1, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	469c      	mov	ip, r3
 80024fc:	2301      	movs	r3, #1
 80024fe:	425b      	negs	r3, r3
 8002500:	4463      	add	r3, ip
 8002502:	4698      	mov	r8, r3
 8002504:	e00a      	b.n	800251c <LL_GPIO_Init+0x3c>
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8002506:	4659      	mov	r1, fp
 8002508:	6909      	ldr	r1, [r1, #16]
 800250a:	68c3      	ldr	r3, [r0, #12]
 800250c:	434d      	muls	r5, r1
 800250e:	401c      	ands	r4, r3
 8002510:	432c      	orrs	r4, r5
 8002512:	60c4      	str	r4, [r0, #12]
 8002514:	0033      	movs	r3, r6
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
      }
    }
    pinpos++;
 8002516:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002518:	40d3      	lsrs	r3, r2
 800251a:	d042      	beq.n	80025a2 <LL_GPIO_Init+0xc2>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800251c:	2301      	movs	r3, #1
 800251e:	4093      	lsls	r3, r2
 8002520:	4033      	ands	r3, r6
    if (currentpin)
 8002522:	d0f7      	beq.n	8002514 <LL_GPIO_Init+0x34>
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8002524:	001d      	movs	r5, r3
 8002526:	6804      	ldr	r4, [r0, #0]
 8002528:	435d      	muls	r5, r3
 800252a:	46a1      	mov	r9, r4
 800252c:	006c      	lsls	r4, r5, #1
 800252e:	1964      	adds	r4, r4, r5
 8002530:	464f      	mov	r7, r9
 8002532:	43e4      	mvns	r4, r4
 8002534:	4027      	ands	r7, r4
 8002536:	46b9      	mov	r9, r7
 8002538:	4667      	mov	r7, ip
 800253a:	436f      	muls	r7, r5
 800253c:	46ba      	mov	sl, r7
 800253e:	464f      	mov	r7, r9
 8002540:	4651      	mov	r1, sl
 8002542:	430f      	orrs	r7, r1
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002544:	4641      	mov	r1, r8
 8002546:	6007      	str	r7, [r0, #0]
 8002548:	2901      	cmp	r1, #1
 800254a:	d8dc      	bhi.n	8002506 <LL_GPIO_Init+0x26>
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 800254c:	6881      	ldr	r1, [r0, #8]
 800254e:	468a      	mov	sl, r1
 8002550:	4659      	mov	r1, fp
 8002552:	6889      	ldr	r1, [r1, #8]
 8002554:	4369      	muls	r1, r5
 8002556:	4689      	mov	r9, r1
 8002558:	4651      	mov	r1, sl
 800255a:	4021      	ands	r1, r4
 800255c:	468a      	mov	sl, r1
 800255e:	4649      	mov	r1, r9
 8002560:	4657      	mov	r7, sl
 8002562:	4339      	orrs	r1, r7
 8002564:	6081      	str	r1, [r0, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8002566:	68c1      	ldr	r1, [r0, #12]
 8002568:	468a      	mov	sl, r1
 800256a:	4659      	mov	r1, fp
 800256c:	6909      	ldr	r1, [r1, #16]
 800256e:	4369      	muls	r1, r5
 8002570:	4689      	mov	r9, r1
 8002572:	4651      	mov	r1, sl
 8002574:	400c      	ands	r4, r1
 8002576:	4649      	mov	r1, r9
 8002578:	430c      	orrs	r4, r1
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800257a:	4661      	mov	r1, ip
 800257c:	60c4      	str	r4, [r0, #12]
 800257e:	2902      	cmp	r1, #2
 8002580:	d1c8      	bne.n	8002514 <LL_GPIO_Init+0x34>
        if (currentpin < LL_GPIO_PIN_8)
 8002582:	2bff      	cmp	r3, #255	; 0xff
 8002584:	d81e      	bhi.n	80025c4 <LL_GPIO_Init+0xe4>
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8002586:	4659      	mov	r1, fp
 8002588:	436d      	muls	r5, r5
 800258a:	6949      	ldr	r1, [r1, #20]
 800258c:	012c      	lsls	r4, r5, #4
 800258e:	1b64      	subs	r4, r4, r5
 8002590:	434d      	muls	r5, r1
 8002592:	6a03      	ldr	r3, [r0, #32]
    pinpos++;
 8002594:	3201      	adds	r2, #1
 8002596:	43a3      	bics	r3, r4
 8002598:	431d      	orrs	r5, r3
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800259a:	0033      	movs	r3, r6
 800259c:	6205      	str	r5, [r0, #32]
 800259e:	40d3      	lsrs	r3, r2
 80025a0:	d1bc      	bne.n	800251c <LL_GPIO_Init+0x3c>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80025a2:	4643      	mov	r3, r8
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d806      	bhi.n	80025b6 <LL_GPIO_Init+0xd6>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80025a8:	465a      	mov	r2, fp
 80025aa:	6843      	ldr	r3, [r0, #4]
 80025ac:	68d2      	ldr	r2, [r2, #12]
 80025ae:	43b3      	bics	r3, r6
 80025b0:	4356      	muls	r6, r2
 80025b2:	431e      	orrs	r6, r3
 80025b4:	6046      	str	r6, [r0, #4]
    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);

  }
  return (SUCCESS);
}
 80025b6:	2001      	movs	r0, #1
 80025b8:	bc3c      	pop	{r2, r3, r4, r5}
 80025ba:	4690      	mov	r8, r2
 80025bc:	4699      	mov	r9, r3
 80025be:	46a2      	mov	sl, r4
 80025c0:	46ab      	mov	fp, r5
 80025c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80025c4:	4659      	mov	r1, fp
 80025c6:	0a1b      	lsrs	r3, r3, #8
 80025c8:	435b      	muls	r3, r3
 80025ca:	435b      	muls	r3, r3
 80025cc:	6949      	ldr	r1, [r1, #20]
 80025ce:	011d      	lsls	r5, r3, #4
 80025d0:	1aed      	subs	r5, r5, r3
 80025d2:	434b      	muls	r3, r1
 80025d4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80025d6:	43ac      	bics	r4, r5
 80025d8:	4323      	orrs	r3, r4
 80025da:	6243      	str	r3, [r0, #36]	; 0x24
 80025dc:	e79a      	b.n	8002514 <LL_GPIO_Init+0x34>
 80025de:	684b      	ldr	r3, [r1, #4]
 80025e0:	3b01      	subs	r3, #1
 80025e2:	4698      	mov	r8, r3
 80025e4:	e7dd      	b.n	80025a2 <LL_GPIO_Init+0xc2>
 80025e6:	46c0      	nop			; (mov r8, r8)

080025e8 <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 80025e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025ea:	4647      	mov	r7, r8
 80025ec:	46ce      	mov	lr, r9
  uint16_t pagestatus0 = 6, pagestatus1 = 6;
  uint16_t varidx = 0;
  uint16_t eepromstatus = 0, readstatus = 0;
  int16_t x = -1;
  HAL_StatusTypeDef  flashstatus;
  uint32_t page_error = 0;
 80025ee:	2500      	movs	r5, #0
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);

  /* Fill EraseInit structure*/
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
  s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
  s_eraseinit.NbPages     = 1;
 80025f0:	2601      	movs	r6, #1
{
 80025f2:	b580      	push	{r7, lr}
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80025f4:	49a5      	ldr	r1, [pc, #660]	; (800288c <EE_Init+0x2a4>)
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80025f6:	4fa6      	ldr	r7, [pc, #664]	; (8002890 <EE_Init+0x2a8>)
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80025f8:	880b      	ldrh	r3, [r1, #0]
  
  /* Check for invalid header states and repair if necessary */
  switch (pagestatus0)
 80025fa:	48a6      	ldr	r0, [pc, #664]	; (8002894 <EE_Init+0x2ac>)
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80025fc:	883c      	ldrh	r4, [r7, #0]
{
 80025fe:	b089      	sub	sp, #36	; 0x24
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002600:	b29b      	uxth	r3, r3
  uint32_t page_error = 0;
 8002602:	9500      	str	r5, [sp, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002604:	b2a4      	uxth	r4, r4
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8002606:	9502      	str	r5, [sp, #8]
  s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 8002608:	9103      	str	r1, [sp, #12]
  s_eraseinit.NbPages     = 1;
 800260a:	9604      	str	r6, [sp, #16]
  switch (pagestatus0)
 800260c:	4283      	cmp	r3, r0
 800260e:	d100      	bne.n	8002612 <EE_Init+0x2a>
 8002610:	e096      	b.n	8002740 <EE_Init+0x158>
 8002612:	4aa1      	ldr	r2, [pc, #644]	; (8002898 <EE_Init+0x2b0>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d022      	beq.n	800265e <EE_Init+0x76>
 8002618:	2b00      	cmp	r3, #0
 800261a:	d03e      	beq.n	800269a <EE_Init+0xb2>
{
  HAL_StatusTypeDef flashstatus = HAL_OK;
  uint32_t page_error = 0;
  FLASH_EraseInitTypeDef s_eraseinit;

  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 800261c:	a805      	add	r0, sp, #20
  uint32_t page_error = 0;
 800261e:	9501      	str	r5, [sp, #4]
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8002620:	9505      	str	r5, [sp, #20]
  s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 8002622:	6041      	str	r1, [r0, #4]
  s_eraseinit.NbPages     = 1;
 8002624:	6086      	str	r6, [r0, #8]
  while (Address <= PAGE0_END_ADDRESS)
 8002626:	4c9d      	ldr	r4, [pc, #628]	; (800289c <EE_Init+0x2b4>)
 8002628:	e002      	b.n	8002630 <EE_Init+0x48>
    Address = Address + 4;
 800262a:	3104      	adds	r1, #4
  while (Address <= PAGE0_END_ADDRESS)
 800262c:	42a1      	cmp	r1, r4
 800262e:	d007      	beq.n	8002640 <EE_Init+0x58>
    addressvalue = (*(__IO uint16_t*)Address);
 8002630:	880b      	ldrh	r3, [r1, #0]
    if (addressvalue != ERASED)
 8002632:	4293      	cmp	r3, r2
 8002634:	d0f9      	beq.n	800262a <EE_Init+0x42>
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
  {
    flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error); 
 8002636:	a901      	add	r1, sp, #4
 8002638:	f7fe fc2c 	bl	8000e94 <HAL_FLASHEx_Erase>
    /* If erase operation was failed, a Flash error code is returned */
    if (flashstatus != HAL_OK)
 800263c:	2800      	cmp	r0, #0
 800263e:	d12a      	bne.n	8002696 <EE_Init+0xae>
    {
      return flashstatus;
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 8002640:	2200      	movs	r2, #0
 8002642:	2300      	movs	r3, #0
 8002644:	4991      	ldr	r1, [pc, #580]	; (800288c <EE_Init+0x2a4>)
 8002646:	2001      	movs	r0, #1
 8002648:	f7fe faea 	bl	8000c20 <HAL_FLASH_Program>
  /* If program operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 800264c:	2800      	cmp	r0, #0
 800264e:	d122      	bne.n	8002696 <EE_Init+0xae>
  return HAL_OK;
 8002650:	2400      	movs	r4, #0
}
 8002652:	0020      	movs	r0, r4
 8002654:	b009      	add	sp, #36	; 0x24
 8002656:	bc0c      	pop	{r2, r3}
 8002658:	4690      	mov	r8, r2
 800265a:	4699      	mov	r9, r3
 800265c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pagestatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 800265e:	2c00      	cmp	r4, #0
 8002660:	d100      	bne.n	8002664 <EE_Init+0x7c>
 8002662:	e0a0      	b.n	80027a6 <EE_Init+0x1be>
      else if (pagestatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8002664:	4284      	cmp	r4, r0
 8002666:	d000      	beq.n	800266a <EE_Init+0x82>
 8002668:	e101      	b.n	800286e <EE_Init+0x286>
  while (Address <= PAGE0_END_ADDRESS)
 800266a:	488c      	ldr	r0, [pc, #560]	; (800289c <EE_Init+0x2b4>)
 800266c:	e002      	b.n	8002674 <EE_Init+0x8c>
    Address = Address + 4;
 800266e:	3104      	adds	r1, #4
  while (Address <= PAGE0_END_ADDRESS)
 8002670:	4281      	cmp	r1, r0
 8002672:	d008      	beq.n	8002686 <EE_Init+0x9e>
    addressvalue = (*(__IO uint16_t*)Address);
 8002674:	880a      	ldrh	r2, [r1, #0]
    if (addressvalue != ERASED)
 8002676:	429a      	cmp	r2, r3
 8002678:	d0f9      	beq.n	800266e <EE_Init+0x86>
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 800267a:	4669      	mov	r1, sp
 800267c:	a802      	add	r0, sp, #8
 800267e:	f7fe fc09 	bl	8000e94 <HAL_FLASHEx_Erase>
          if (flashstatus != HAL_OK)
 8002682:	2800      	cmp	r0, #0
 8002684:	d107      	bne.n	8002696 <EE_Init+0xae>
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 8002686:	2200      	movs	r2, #0
 8002688:	2300      	movs	r3, #0
 800268a:	4981      	ldr	r1, [pc, #516]	; (8002890 <EE_Init+0x2a8>)
 800268c:	2001      	movs	r0, #1
 800268e:	f7fe fac7 	bl	8000c20 <HAL_FLASH_Program>
        if (flashstatus != HAL_OK)
 8002692:	2800      	cmp	r0, #0
 8002694:	d0dc      	beq.n	8002650 <EE_Init+0x68>
        return flashstatus;
 8002696:	b284      	uxth	r4, r0
 8002698:	e7db      	b.n	8002652 <EE_Init+0x6a>
      if (pagestatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 800269a:	2c00      	cmp	r4, #0
 800269c:	d100      	bne.n	80026a0 <EE_Init+0xb8>
 800269e:	e092      	b.n	80027c6 <EE_Init+0x1de>
      else if (pagestatus1 == ERASED) /* Page0 valid, Page1 erased */
 80026a0:	4294      	cmp	r4, r2
 80026a2:	d0d5      	beq.n	8002650 <EE_Init+0x68>
 80026a4:	2301      	movs	r3, #1
 80026a6:	425b      	negs	r3, r3
 80026a8:	4698      	mov	r8, r3
      *Data = (*(__IO uint16_t*)(address - 2));
 80026aa:	4b7d      	ldr	r3, [pc, #500]	; (80028a0 <EE_Init+0x2b8>)
 80026ac:	2600      	movs	r6, #0
 80026ae:	4699      	mov	r9, r3
 80026b0:	4f7c      	ldr	r7, [pc, #496]	; (80028a4 <EE_Init+0x2bc>)
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 80026b2:	4b7d      	ldr	r3, [pc, #500]	; (80028a8 <EE_Init+0x2c0>)
 80026b4:	0072      	lsls	r2, r6, #1
 80026b6:	881b      	ldrh	r3, [r3, #0]
 80026b8:	5abc      	ldrh	r4, [r7, r2]
 80026ba:	42a3      	cmp	r3, r4
 80026bc:	d100      	bne.n	80026c0 <EE_Init+0xd8>
 80026be:	e0be      	b.n	800283e <EE_Init+0x256>
          if (varidx != x)
 80026c0:	4546      	cmp	r6, r8
 80026c2:	d01a      	beq.n	80026fa <EE_Init+0x112>
static uint16_t EE_FindValidPage(uint8_t Operation)
{
  uint16_t pagestatus0 = 6, pagestatus1 = 6;

  /* Get Page0 actual status */
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80026c4:	4b71      	ldr	r3, [pc, #452]	; (800288c <EE_Init+0x2a4>)
 80026c6:	881a      	ldrh	r2, [r3, #0]

  /* Get Page1 actual status */
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80026c8:	4b71      	ldr	r3, [pc, #452]	; (8002890 <EE_Init+0x2a8>)
 80026ca:	881b      	ldrh	r3, [r3, #0]
 80026cc:	b29b      	uxth	r3, r3
      {
        return NO_VALID_PAGE;   /* No valid Page */
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (pagestatus0 == VALID_PAGE)
 80026ce:	2a00      	cmp	r2, #0
 80026d0:	d100      	bne.n	80026d4 <EE_Init+0xec>
 80026d2:	e0b7      	b.n	8002844 <EE_Init+0x25c>
      {
        return PAGE0;           /* Page0 valid */
      }
      else if (pagestatus1 == VALID_PAGE)
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d000      	beq.n	80026da <EE_Init+0xf2>
 80026d8:	e11f      	b.n	800291a <EE_Init+0x332>
 80026da:	4b74      	ldr	r3, [pc, #464]	; (80028ac <EE_Init+0x2c4>)
 80026dc:	4974      	ldr	r1, [pc, #464]	; (80028b0 <EE_Init+0x2c8>)
 80026de:	001a      	movs	r2, r3
 80026e0:	4874      	ldr	r0, [pc, #464]	; (80028b4 <EE_Init+0x2cc>)
    addressvalue = (*(__IO uint16_t*)address);
 80026e2:	881b      	ldrh	r3, [r3, #0]
    if (addressvalue == VirtAddress)
 80026e4:	429c      	cmp	r4, r3
 80026e6:	d105      	bne.n	80026f4 <EE_Init+0x10c>
 80026e8:	e0ef      	b.n	80028ca <EE_Init+0x2e2>
    addressvalue = (*(__IO uint16_t*)address);
 80026ea:	8819      	ldrh	r1, [r3, #0]
    if (addressvalue == VirtAddress)
 80026ec:	428c      	cmp	r4, r1
 80026ee:	d100      	bne.n	80026f2 <EE_Init+0x10a>
 80026f0:	e0ea      	b.n	80028c8 <EE_Init+0x2e0>
 80026f2:	001a      	movs	r2, r3
      address = address - 4;
 80026f4:	1f13      	subs	r3, r2, #4
  while (address > (PageStartAddress + 2))
 80026f6:	4283      	cmp	r3, r0
 80026f8:	d8f7      	bhi.n	80026ea <EE_Init+0x102>
 80026fa:	3601      	adds	r6, #1
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 80026fc:	2e03      	cmp	r6, #3
 80026fe:	d1d8      	bne.n	80026b2 <EE_Init+0xca>
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 8002700:	2200      	movs	r2, #0
 8002702:	2300      	movs	r3, #0
 8002704:	4962      	ldr	r1, [pc, #392]	; (8002890 <EE_Init+0x2a8>)
 8002706:	2001      	movs	r0, #1
 8002708:	f7fe fa8a 	bl	8000c20 <HAL_FLASH_Program>
        if (flashstatus != HAL_OK)
 800270c:	2800      	cmp	r0, #0
 800270e:	d1c2      	bne.n	8002696 <EE_Init+0xae>
        s_eraseinit.NbPages     = 1;
 8002710:	2201      	movs	r2, #1
        s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 8002712:	4b5e      	ldr	r3, [pc, #376]	; (800288c <EE_Init+0x2a4>)
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8002714:	9002      	str	r0, [sp, #8]
        s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 8002716:	9303      	str	r3, [sp, #12]
        s_eraseinit.NbPages     = 1;
 8002718:	9204      	str	r2, [sp, #16]
    if (addressvalue != ERASED)
 800271a:	495f      	ldr	r1, [pc, #380]	; (8002898 <EE_Init+0x2b0>)
  while (Address <= PAGE0_END_ADDRESS)
 800271c:	485f      	ldr	r0, [pc, #380]	; (800289c <EE_Init+0x2b4>)
 800271e:	e003      	b.n	8002728 <EE_Init+0x140>
    Address = Address + 4;
 8002720:	3304      	adds	r3, #4
  while (Address <= PAGE0_END_ADDRESS)
 8002722:	4283      	cmp	r3, r0
 8002724:	d100      	bne.n	8002728 <EE_Init+0x140>
 8002726:	e793      	b.n	8002650 <EE_Init+0x68>
    addressvalue = (*(__IO uint16_t*)Address);
 8002728:	881a      	ldrh	r2, [r3, #0]
    if (addressvalue != ERASED)
 800272a:	428a      	cmp	r2, r1
 800272c:	d0f8      	beq.n	8002720 <EE_Init+0x138>
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 800272e:	4669      	mov	r1, sp
 8002730:	a802      	add	r0, sp, #8
 8002732:	f7fe fbaf 	bl	8000e94 <HAL_FLASHEx_Erase>
          if (flashstatus != HAL_OK)
 8002736:	2800      	cmp	r0, #0
 8002738:	d100      	bne.n	800273c <EE_Init+0x154>
 800273a:	e789      	b.n	8002650 <EE_Init+0x68>
        return flashstatus;
 800273c:	b284      	uxth	r4, r0
 800273e:	e788      	b.n	8002652 <EE_Init+0x6a>
      if (pagestatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8002740:	2c00      	cmp	r4, #0
 8002742:	d11d      	bne.n	8002780 <EE_Init+0x198>
 8002744:	2301      	movs	r3, #1
 8002746:	2600      	movs	r6, #0
 8002748:	425b      	negs	r3, r3
 800274a:	4698      	mov	r8, r3
      *Data = (*(__IO uint16_t*)(address - 2));
 800274c:	4b54      	ldr	r3, [pc, #336]	; (80028a0 <EE_Init+0x2b8>)
 800274e:	4f55      	ldr	r7, [pc, #340]	; (80028a4 <EE_Init+0x2bc>)
 8002750:	4699      	mov	r9, r3
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 8002752:	4b59      	ldr	r3, [pc, #356]	; (80028b8 <EE_Init+0x2d0>)
 8002754:	0072      	lsls	r2, r6, #1
 8002756:	881b      	ldrh	r3, [r3, #0]
 8002758:	5abc      	ldrh	r4, [r7, r2]
 800275a:	42a3      	cmp	r3, r4
 800275c:	d06c      	beq.n	8002838 <EE_Init+0x250>
          if (varidx != x)
 800275e:	4546      	cmp	r6, r8
 8002760:	d060      	beq.n	8002824 <EE_Init+0x23c>
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002762:	4b4a      	ldr	r3, [pc, #296]	; (800288c <EE_Init+0x2a4>)
 8002764:	881a      	ldrh	r2, [r3, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002766:	4b4a      	ldr	r3, [pc, #296]	; (8002890 <EE_Init+0x2a8>)
 8002768:	881b      	ldrh	r3, [r3, #0]
 800276a:	b29b      	uxth	r3, r3
      if (pagestatus0 == VALID_PAGE)
 800276c:	2a00      	cmp	r2, #0
 800276e:	d06e      	beq.n	800284e <EE_Init+0x266>
      else if (pagestatus1 == VALID_PAGE)
 8002770:	2b00      	cmp	r3, #0
 8002772:	d000      	beq.n	8002776 <EE_Init+0x18e>
 8002774:	e0fc      	b.n	8002970 <EE_Init+0x388>
 8002776:	4b4d      	ldr	r3, [pc, #308]	; (80028ac <EE_Init+0x2c4>)
 8002778:	494d      	ldr	r1, [pc, #308]	; (80028b0 <EE_Init+0x2c8>)
 800277a:	001a      	movs	r2, r3
 800277c:	484d      	ldr	r0, [pc, #308]	; (80028b4 <EE_Init+0x2cc>)
 800277e:	e06a      	b.n	8002856 <EE_Init+0x26e>
      else if (pagestatus1 == ERASED) /* Page0 receive, Page1 erased */
 8002780:	4a45      	ldr	r2, [pc, #276]	; (8002898 <EE_Init+0x2b0>)
 8002782:	4294      	cmp	r4, r2
 8002784:	d100      	bne.n	8002788 <EE_Init+0x1a0>
 8002786:	e0f6      	b.n	8002976 <EE_Init+0x38e>
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8002788:	a805      	add	r0, sp, #20
  uint32_t page_error = 0;
 800278a:	9501      	str	r5, [sp, #4]
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 800278c:	9505      	str	r5, [sp, #20]
  s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 800278e:	6041      	str	r1, [r0, #4]
  s_eraseinit.NbPages     = 1;
 8002790:	6086      	str	r6, [r0, #8]
  while (Address <= PAGE0_END_ADDRESS)
 8002792:	4c42      	ldr	r4, [pc, #264]	; (800289c <EE_Init+0x2b4>)
 8002794:	e003      	b.n	800279e <EE_Init+0x1b6>
    Address = Address + 4;
 8002796:	3104      	adds	r1, #4
  while (Address <= PAGE0_END_ADDRESS)
 8002798:	42a1      	cmp	r1, r4
 800279a:	d100      	bne.n	800279e <EE_Init+0x1b6>
 800279c:	e750      	b.n	8002640 <EE_Init+0x58>
    addressvalue = (*(__IO uint16_t*)Address);
 800279e:	880b      	ldrh	r3, [r1, #0]
    if (addressvalue != ERASED)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d0f8      	beq.n	8002796 <EE_Init+0x1ae>
 80027a4:	e747      	b.n	8002636 <EE_Init+0x4e>
  while (Address <= PAGE0_END_ADDRESS)
 80027a6:	483d      	ldr	r0, [pc, #244]	; (800289c <EE_Init+0x2b4>)
 80027a8:	e003      	b.n	80027b2 <EE_Init+0x1ca>
    Address = Address + 4;
 80027aa:	3104      	adds	r1, #4
  while (Address <= PAGE0_END_ADDRESS)
 80027ac:	4281      	cmp	r1, r0
 80027ae:	d100      	bne.n	80027b2 <EE_Init+0x1ca>
 80027b0:	e74e      	b.n	8002650 <EE_Init+0x68>
    addressvalue = (*(__IO uint16_t*)Address);
 80027b2:	880a      	ldrh	r2, [r1, #0]
    if (addressvalue != ERASED)
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d0f8      	beq.n	80027aa <EE_Init+0x1c2>
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 80027b8:	4669      	mov	r1, sp
 80027ba:	a802      	add	r0, sp, #8
 80027bc:	f7fe fb6a 	bl	8000e94 <HAL_FLASHEx_Erase>
          if (flashstatus != HAL_OK)
 80027c0:	2800      	cmp	r0, #0
 80027c2:	d1bb      	bne.n	800273c <EE_Init+0x154>
 80027c4:	e744      	b.n	8002650 <EE_Init+0x68>
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80027c6:	a805      	add	r0, sp, #20
  uint32_t page_error = 0;
 80027c8:	9401      	str	r4, [sp, #4]
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80027ca:	9405      	str	r4, [sp, #20]
  s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 80027cc:	6041      	str	r1, [r0, #4]
  s_eraseinit.NbPages     = 1;
 80027ce:	6086      	str	r6, [r0, #8]
  while (Address <= PAGE0_END_ADDRESS)
 80027d0:	4d32      	ldr	r5, [pc, #200]	; (800289c <EE_Init+0x2b4>)
 80027d2:	e002      	b.n	80027da <EE_Init+0x1f2>
    Address = Address + 4;
 80027d4:	3104      	adds	r1, #4
  while (Address <= PAGE0_END_ADDRESS)
 80027d6:	42a9      	cmp	r1, r5
 80027d8:	d008      	beq.n	80027ec <EE_Init+0x204>
    addressvalue = (*(__IO uint16_t*)Address);
 80027da:	880b      	ldrh	r3, [r1, #0]
    if (addressvalue != ERASED)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d0f9      	beq.n	80027d4 <EE_Init+0x1ec>
    flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error); 
 80027e0:	a901      	add	r1, sp, #4
 80027e2:	f7fe fb57 	bl	8000e94 <HAL_FLASHEx_Erase>
    if (flashstatus != HAL_OK)
 80027e6:	2800      	cmp	r0, #0
 80027e8:	d000      	beq.n	80027ec <EE_Init+0x204>
 80027ea:	e754      	b.n	8002696 <EE_Init+0xae>
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 80027ec:	2200      	movs	r2, #0
 80027ee:	2300      	movs	r3, #0
 80027f0:	4926      	ldr	r1, [pc, #152]	; (800288c <EE_Init+0x2a4>)
 80027f2:	2001      	movs	r0, #1
 80027f4:	f7fe fa14 	bl	8000c20 <HAL_FLASH_Program>
  if (flashstatus != HAL_OK)
 80027f8:	2800      	cmp	r0, #0
 80027fa:	d100      	bne.n	80027fe <EE_Init+0x216>
 80027fc:	e729      	b.n	8002652 <EE_Init+0x6a>
 80027fe:	e74a      	b.n	8002696 <EE_Init+0xae>
  {
    /* Verify if address and address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
    {
      /* Set variable data */
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, Data);       
 8002800:	2300      	movs	r3, #0
 8002802:	0029      	movs	r1, r5
 8002804:	2001      	movs	r0, #1
 8002806:	f7fe fa0b 	bl	8000c20 <HAL_FLASH_Program>
      /* If program operation was failed, a Flash error code is returned */
      if (flashstatus != HAL_OK)
 800280a:	2800      	cmp	r0, #0
 800280c:	d000      	beq.n	8002810 <EE_Init+0x228>
 800280e:	e742      	b.n	8002696 <EE_Init+0xae>
      {
        return flashstatus;
      }
      /* Set variable virtual address */
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, VirtAddress);       
 8002810:	0022      	movs	r2, r4
 8002812:	1ca9      	adds	r1, r5, #2
 8002814:	2300      	movs	r3, #0
 8002816:	2001      	movs	r0, #1
 8002818:	f7fe fa02 	bl	8000c20 <HAL_FLASH_Program>
      /* Return program operation status */
      return flashstatus;
 800281c:	b284      	uxth	r4, r0
              if (eepromstatus != HAL_OK)
 800281e:	2c00      	cmp	r4, #0
 8002820:	d000      	beq.n	8002824 <EE_Init+0x23c>
 8002822:	e716      	b.n	8002652 <EE_Init+0x6a>
 8002824:	3601      	adds	r6, #1
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8002826:	2e03      	cmp	r6, #3
 8002828:	d100      	bne.n	800282c <EE_Init+0x244>
 800282a:	e709      	b.n	8002640 <EE_Init+0x58>
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 800282c:	4b22      	ldr	r3, [pc, #136]	; (80028b8 <EE_Init+0x2d0>)
 800282e:	0072      	lsls	r2, r6, #1
 8002830:	881b      	ldrh	r3, [r3, #0]
 8002832:	5abc      	ldrh	r4, [r7, r2]
 8002834:	42a3      	cmp	r3, r4
 8002836:	d192      	bne.n	800275e <EE_Init+0x176>
            x = varidx;
 8002838:	b233      	sxth	r3, r6
 800283a:	4698      	mov	r8, r3
 800283c:	e78f      	b.n	800275e <EE_Init+0x176>
            x = varidx;
 800283e:	b233      	sxth	r3, r6
 8002840:	4698      	mov	r8, r3
 8002842:	e73d      	b.n	80026c0 <EE_Init+0xd8>
      if (pagestatus0 == VALID_PAGE)
 8002844:	4b1d      	ldr	r3, [pc, #116]	; (80028bc <EE_Init+0x2d4>)
 8002846:	491e      	ldr	r1, [pc, #120]	; (80028c0 <EE_Init+0x2d8>)
 8002848:	001a      	movs	r2, r3
 800284a:	481e      	ldr	r0, [pc, #120]	; (80028c4 <EE_Init+0x2dc>)
 800284c:	e749      	b.n	80026e2 <EE_Init+0xfa>
 800284e:	4b1b      	ldr	r3, [pc, #108]	; (80028bc <EE_Init+0x2d4>)
 8002850:	491b      	ldr	r1, [pc, #108]	; (80028c0 <EE_Init+0x2d8>)
 8002852:	001a      	movs	r2, r3
 8002854:	481b      	ldr	r0, [pc, #108]	; (80028c4 <EE_Init+0x2dc>)
    addressvalue = (*(__IO uint16_t*)address);
 8002856:	881b      	ldrh	r3, [r3, #0]
    if (addressvalue == VirtAddress)
 8002858:	429c      	cmp	r4, r3
 800285a:	d104      	bne.n	8002866 <EE_Init+0x27e>
 800285c:	e061      	b.n	8002922 <EE_Init+0x33a>
    addressvalue = (*(__IO uint16_t*)address);
 800285e:	8819      	ldrh	r1, [r3, #0]
    if (addressvalue == VirtAddress)
 8002860:	428c      	cmp	r4, r1
 8002862:	d05d      	beq.n	8002920 <EE_Init+0x338>
 8002864:	001a      	movs	r2, r3
      address = address - 4;
 8002866:	1f13      	subs	r3, r2, #4
  while (address > (PageStartAddress + 2))
 8002868:	4298      	cmp	r0, r3
 800286a:	d3f8      	bcc.n	800285e <EE_Init+0x276>
 800286c:	e7da      	b.n	8002824 <EE_Init+0x23c>
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 800286e:	a805      	add	r0, sp, #20
  uint32_t page_error = 0;
 8002870:	9501      	str	r5, [sp, #4]
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8002872:	9505      	str	r5, [sp, #20]
  s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 8002874:	6041      	str	r1, [r0, #4]
  s_eraseinit.NbPages     = 1;
 8002876:	6086      	str	r6, [r0, #8]
  while (Address <= PAGE0_END_ADDRESS)
 8002878:	4c08      	ldr	r4, [pc, #32]	; (800289c <EE_Init+0x2b4>)
 800287a:	e003      	b.n	8002884 <EE_Init+0x29c>
    Address = Address + 4;
 800287c:	3104      	adds	r1, #4
  while (Address <= PAGE0_END_ADDRESS)
 800287e:	42a1      	cmp	r1, r4
 8002880:	d100      	bne.n	8002884 <EE_Init+0x29c>
 8002882:	e6dd      	b.n	8002640 <EE_Init+0x58>
    addressvalue = (*(__IO uint16_t*)Address);
 8002884:	880a      	ldrh	r2, [r1, #0]
    if (addressvalue != ERASED)
 8002886:	429a      	cmp	r2, r3
 8002888:	d0f8      	beq.n	800287c <EE_Init+0x294>
 800288a:	e6d4      	b.n	8002636 <EE_Init+0x4e>
 800288c:	08007000 	.word	0x08007000
 8002890:	08007800 	.word	0x08007800
 8002894:	0000eeee 	.word	0x0000eeee
 8002898:	0000ffff 	.word	0x0000ffff
 800289c:	08007400 	.word	0x08007400
 80028a0:	20000084 	.word	0x20000084
 80028a4:	20000000 	.word	0x20000000
 80028a8:	08007806 	.word	0x08007806
 80028ac:	0800f3fe 	.word	0x0800f3fe
 80028b0:	0800f3fc 	.word	0x0800f3fc
 80028b4:	0800f002 	.word	0x0800f002
 80028b8:	08007006 	.word	0x08007006
 80028bc:	080073fe 	.word	0x080073fe
 80028c0:	080073fc 	.word	0x080073fc
 80028c4:	08007002 	.word	0x08007002
 80028c8:	1f91      	subs	r1, r2, #6
      *Data = (*(__IO uint16_t*)(address - 2));
 80028ca:	464b      	mov	r3, r9
 80028cc:	880a      	ldrh	r2, [r1, #0]
 80028ce:	b292      	uxth	r2, r2
 80028d0:	801a      	strh	r2, [r3, #0]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80028d2:	4d38      	ldr	r5, [pc, #224]	; (80029b4 <EE_Init+0x3cc>)
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80028d4:	4b38      	ldr	r3, [pc, #224]	; (80029b8 <EE_Init+0x3d0>)
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80028d6:	8828      	ldrh	r0, [r5, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80028d8:	881b      	ldrh	r3, [r3, #0]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80028da:	b280      	uxth	r0, r0
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80028dc:	b29b      	uxth	r3, r3
      if (pagestatus1 == VALID_PAGE)
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d111      	bne.n	8002906 <EE_Init+0x31e>
        if (pagestatus0 == RECEIVE_DATA)
 80028e2:	4b36      	ldr	r3, [pc, #216]	; (80029bc <EE_Init+0x3d4>)
 80028e4:	4298      	cmp	r0, r3
 80028e6:	d013      	beq.n	8002910 <EE_Init+0x328>
 80028e8:	4d35      	ldr	r5, [pc, #212]	; (80029c0 <EE_Init+0x3d8>)
 80028ea:	4936      	ldr	r1, [pc, #216]	; (80029c4 <EE_Init+0x3dc>)
 80028ec:	002b      	movs	r3, r5
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	3301      	adds	r3, #1
 80028f2:	d103      	bne.n	80028fc <EE_Init+0x314>
 80028f4:	e04a      	b.n	800298c <EE_Init+0x3a4>
 80028f6:	682b      	ldr	r3, [r5, #0]
 80028f8:	3301      	adds	r3, #1
 80028fa:	d047      	beq.n	800298c <EE_Init+0x3a4>
    }
    else
    {
      /* Next address location */
      address = address + 4;
 80028fc:	3504      	adds	r5, #4
  while (address < pageendaddress)
 80028fe:	42a9      	cmp	r1, r5
 8002900:	d8f9      	bhi.n	80028f6 <EE_Init+0x30e>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8002902:	2480      	movs	r4, #128	; 0x80
 8002904:	e6a5      	b.n	8002652 <EE_Init+0x6a>
      else if (pagestatus0 == VALID_PAGE)
 8002906:	2800      	cmp	r0, #0
 8002908:	d105      	bne.n	8002916 <EE_Init+0x32e>
        if (pagestatus1 == RECEIVE_DATA)
 800290a:	492c      	ldr	r1, [pc, #176]	; (80029bc <EE_Init+0x3d4>)
 800290c:	428b      	cmp	r3, r1
 800290e:	d0eb      	beq.n	80028e8 <EE_Init+0x300>
 8002910:	492d      	ldr	r1, [pc, #180]	; (80029c8 <EE_Init+0x3e0>)
 8002912:	002b      	movs	r3, r5
 8002914:	e7eb      	b.n	80028ee <EE_Init+0x306>
    return  NO_VALID_PAGE;
 8002916:	24ab      	movs	r4, #171	; 0xab
 8002918:	e69b      	b.n	8002652 <EE_Init+0x6a>
 800291a:	4b2c      	ldr	r3, [pc, #176]	; (80029cc <EE_Init+0x3e4>)
 800291c:	881a      	ldrh	r2, [r3, #0]
 800291e:	e7d8      	b.n	80028d2 <EE_Init+0x2ea>
 8002920:	1f91      	subs	r1, r2, #6
      *Data = (*(__IO uint16_t*)(address - 2));
 8002922:	464b      	mov	r3, r9
 8002924:	880a      	ldrh	r2, [r1, #0]
 8002926:	b292      	uxth	r2, r2
 8002928:	801a      	strh	r2, [r3, #0]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800292a:	4d22      	ldr	r5, [pc, #136]	; (80029b4 <EE_Init+0x3cc>)
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800292c:	4b22      	ldr	r3, [pc, #136]	; (80029b8 <EE_Init+0x3d0>)
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800292e:	8828      	ldrh	r0, [r5, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002930:	881b      	ldrh	r3, [r3, #0]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002932:	b280      	uxth	r0, r0
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002934:	b29b      	uxth	r3, r3
      if (pagestatus1 == VALID_PAGE)
 8002936:	2b00      	cmp	r3, #0
 8002938:	d013      	beq.n	8002962 <EE_Init+0x37a>
      else if (pagestatus0 == VALID_PAGE)
 800293a:	2800      	cmp	r0, #0
 800293c:	d1eb      	bne.n	8002916 <EE_Init+0x32e>
        if (pagestatus1 == RECEIVE_DATA)
 800293e:	491f      	ldr	r1, [pc, #124]	; (80029bc <EE_Init+0x3d4>)
 8002940:	428b      	cmp	r3, r1
 8002942:	d011      	beq.n	8002968 <EE_Init+0x380>
 8002944:	002b      	movs	r3, r5
 8002946:	4920      	ldr	r1, [pc, #128]	; (80029c8 <EE_Init+0x3e0>)
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	3301      	adds	r3, #1
 800294c:	d104      	bne.n	8002958 <EE_Init+0x370>
 800294e:	e757      	b.n	8002800 <EE_Init+0x218>
 8002950:	682b      	ldr	r3, [r5, #0]
 8002952:	3301      	adds	r3, #1
 8002954:	d100      	bne.n	8002958 <EE_Init+0x370>
 8002956:	e753      	b.n	8002800 <EE_Init+0x218>
      address = address + 4;
 8002958:	3504      	adds	r5, #4
  while (address < pageendaddress)
 800295a:	42a9      	cmp	r1, r5
 800295c:	d8f8      	bhi.n	8002950 <EE_Init+0x368>
  return PAGE_FULL;
 800295e:	2480      	movs	r4, #128	; 0x80
 8002960:	e677      	b.n	8002652 <EE_Init+0x6a>
        if (pagestatus0 == RECEIVE_DATA)
 8002962:	4b16      	ldr	r3, [pc, #88]	; (80029bc <EE_Init+0x3d4>)
 8002964:	4298      	cmp	r0, r3
 8002966:	d0ed      	beq.n	8002944 <EE_Init+0x35c>
 8002968:	4d15      	ldr	r5, [pc, #84]	; (80029c0 <EE_Init+0x3d8>)
 800296a:	4916      	ldr	r1, [pc, #88]	; (80029c4 <EE_Init+0x3dc>)
 800296c:	002b      	movs	r3, r5
 800296e:	e7eb      	b.n	8002948 <EE_Init+0x360>
 8002970:	4b16      	ldr	r3, [pc, #88]	; (80029cc <EE_Init+0x3e4>)
 8002972:	881a      	ldrh	r2, [r3, #0]
 8002974:	e7d9      	b.n	800292a <EE_Init+0x342>
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8002976:	2200      	movs	r2, #0
 8002978:	2300      	movs	r3, #0
 800297a:	2001      	movs	r0, #1
        s_eraseinit.PageAddress = PAGE1_BASE_ADDRESS;
 800297c:	9703      	str	r7, [sp, #12]
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 800297e:	f7fe f94f 	bl	8000c20 <HAL_FLASH_Program>
        if (flashstatus != HAL_OK)
 8002982:	2800      	cmp	r0, #0
 8002984:	d100      	bne.n	8002988 <EE_Init+0x3a0>
 8002986:	e663      	b.n	8002650 <EE_Init+0x68>
        return flashstatus;
 8002988:	b284      	uxth	r4, r0
 800298a:	e662      	b.n	8002652 <EE_Init+0x6a>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, Data);       
 800298c:	2300      	movs	r3, #0
 800298e:	0029      	movs	r1, r5
 8002990:	2001      	movs	r0, #1
 8002992:	f7fe f945 	bl	8000c20 <HAL_FLASH_Program>
      if (flashstatus != HAL_OK)
 8002996:	2800      	cmp	r0, #0
 8002998:	d000      	beq.n	800299c <EE_Init+0x3b4>
 800299a:	e67c      	b.n	8002696 <EE_Init+0xae>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, VirtAddress);       
 800299c:	0022      	movs	r2, r4
 800299e:	1ca9      	adds	r1, r5, #2
 80029a0:	2300      	movs	r3, #0
 80029a2:	2001      	movs	r0, #1
 80029a4:	f7fe f93c 	bl	8000c20 <HAL_FLASH_Program>
      return flashstatus;
 80029a8:	b284      	uxth	r4, r0
              if (eepromstatus != HAL_OK)
 80029aa:	2c00      	cmp	r4, #0
 80029ac:	d100      	bne.n	80029b0 <EE_Init+0x3c8>
 80029ae:	e6a4      	b.n	80026fa <EE_Init+0x112>
 80029b0:	e64f      	b.n	8002652 <EE_Init+0x6a>
 80029b2:	46c0      	nop			; (mov r8, r8)
 80029b4:	08007000 	.word	0x08007000
 80029b8:	08007800 	.word	0x08007800
 80029bc:	0000eeee 	.word	0x0000eeee
 80029c0:	0800f000 	.word	0x0800f000
 80029c4:	0800f3ff 	.word	0x0800f3ff
 80029c8:	080073ff 	.word	0x080073ff
 80029cc:	20000084 	.word	0x20000084

080029d0 <EE_ReadVariable>:
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80029d0:	4b13      	ldr	r3, [pc, #76]	; (8002a20 <EE_ReadVariable+0x50>)
{
 80029d2:	b530      	push	{r4, r5, lr}
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80029d4:	881a      	ldrh	r2, [r3, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80029d6:	4b13      	ldr	r3, [pc, #76]	; (8002a24 <EE_ReadVariable+0x54>)
 80029d8:	881b      	ldrh	r3, [r3, #0]
 80029da:	b29b      	uxth	r3, r3
      if (pagestatus0 == VALID_PAGE)
 80029dc:	2a00      	cmp	r2, #0
 80029de:	d006      	beq.n	80029ee <EE_ReadVariable+0x1e>
      else if (pagestatus1 == VALID_PAGE)
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d115      	bne.n	8002a10 <EE_ReadVariable+0x40>
 80029e4:	4a10      	ldr	r2, [pc, #64]	; (8002a28 <EE_ReadVariable+0x58>)
 80029e6:	4c11      	ldr	r4, [pc, #68]	; (8002a2c <EE_ReadVariable+0x5c>)
 80029e8:	4d11      	ldr	r5, [pc, #68]	; (8002a30 <EE_ReadVariable+0x60>)
 80029ea:	0013      	movs	r3, r2
 80029ec:	e003      	b.n	80029f6 <EE_ReadVariable+0x26>
      if (pagestatus0 == VALID_PAGE)
 80029ee:	4a11      	ldr	r2, [pc, #68]	; (8002a34 <EE_ReadVariable+0x64>)
 80029f0:	4c11      	ldr	r4, [pc, #68]	; (8002a38 <EE_ReadVariable+0x68>)
 80029f2:	0013      	movs	r3, r2
 80029f4:	4d11      	ldr	r5, [pc, #68]	; (8002a3c <EE_ReadVariable+0x6c>)
    addressvalue = (*(__IO uint16_t*)address);
 80029f6:	881b      	ldrh	r3, [r3, #0]
    if (addressvalue == VirtAddress)
 80029f8:	4298      	cmp	r0, r3
 80029fa:	d104      	bne.n	8002a06 <EE_ReadVariable+0x36>
 80029fc:	e00b      	b.n	8002a16 <EE_ReadVariable+0x46>
    addressvalue = (*(__IO uint16_t*)address);
 80029fe:	881c      	ldrh	r4, [r3, #0]
    if (addressvalue == VirtAddress)
 8002a00:	4284      	cmp	r4, r0
 8002a02:	d007      	beq.n	8002a14 <EE_ReadVariable+0x44>
 8002a04:	001a      	movs	r2, r3
      address = address - 4;
 8002a06:	1f13      	subs	r3, r2, #4
  while (address > (PageStartAddress + 2))
 8002a08:	429d      	cmp	r5, r3
 8002a0a:	d3f8      	bcc.n	80029fe <EE_ReadVariable+0x2e>
  uint16_t addressvalue = 0x5555, readstatus = 1;
 8002a0c:	2001      	movs	r0, #1
}
 8002a0e:	bd30      	pop	{r4, r5, pc}
    return  NO_VALID_PAGE;
 8002a10:	20ab      	movs	r0, #171	; 0xab
 8002a12:	e7fc      	b.n	8002a0e <EE_ReadVariable+0x3e>
 8002a14:	1f94      	subs	r4, r2, #6
      *Data = (*(__IO uint16_t*)(address - 2));
 8002a16:	8823      	ldrh	r3, [r4, #0]
      readstatus = 0;
 8002a18:	2000      	movs	r0, #0
      *Data = (*(__IO uint16_t*)(address - 2));
 8002a1a:	800b      	strh	r3, [r1, #0]
      break;
 8002a1c:	e7f7      	b.n	8002a0e <EE_ReadVariable+0x3e>
 8002a1e:	46c0      	nop			; (mov r8, r8)
 8002a20:	08007000 	.word	0x08007000
 8002a24:	08007800 	.word	0x08007800
 8002a28:	0800f3fe 	.word	0x0800f3fe
 8002a2c:	0800f3fc 	.word	0x0800f3fc
 8002a30:	0800f002 	.word	0x0800f002
 8002a34:	080073fe 	.word	0x080073fe
 8002a38:	080073fc 	.word	0x080073fc
 8002a3c:	08007002 	.word	0x08007002

08002a40 <EE_WriteVariable>:
{
 8002a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a42:	464e      	mov	r6, r9
 8002a44:	4645      	mov	r5, r8
 8002a46:	46de      	mov	lr, fp
 8002a48:	4657      	mov	r7, sl
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002a4a:	4b86      	ldr	r3, [pc, #536]	; (8002c64 <EE_WriteVariable+0x224>)
{
 8002a4c:	b5e0      	push	{r5, r6, r7, lr}
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002a4e:	4a86      	ldr	r2, [pc, #536]	; (8002c68 <EE_WriteVariable+0x228>)
{
 8002a50:	000d      	movs	r5, r1
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002a52:	8819      	ldrh	r1, [r3, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002a54:	8812      	ldrh	r2, [r2, #0]
{
 8002a56:	b085      	sub	sp, #20
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002a58:	b292      	uxth	r2, r2
{
 8002a5a:	0006      	movs	r6, r0
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002a5c:	b289      	uxth	r1, r1
      if (pagestatus1 == VALID_PAGE)
 8002a5e:	2a00      	cmp	r2, #0
 8002a60:	d129      	bne.n	8002ab6 <EE_WriteVariable+0x76>
        if (pagestatus0 == RECEIVE_DATA)
 8002a62:	4a82      	ldr	r2, [pc, #520]	; (8002c6c <EE_WriteVariable+0x22c>)
 8002a64:	4291      	cmp	r1, r2
 8002a66:	d02c      	beq.n	8002ac2 <EE_WriteVariable+0x82>
 8002a68:	4b81      	ldr	r3, [pc, #516]	; (8002c70 <EE_WriteVariable+0x230>)
 8002a6a:	4a82      	ldr	r2, [pc, #520]	; (8002c74 <EE_WriteVariable+0x234>)
 8002a6c:	001c      	movs	r4, r3
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	3301      	adds	r3, #1
 8002a72:	d103      	bne.n	8002a7c <EE_WriteVariable+0x3c>
 8002a74:	e028      	b.n	8002ac8 <EE_WriteVariable+0x88>
 8002a76:	6823      	ldr	r3, [r4, #0]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	d025      	beq.n	8002ac8 <EE_WriteVariable+0x88>
      address = address + 4;
 8002a7c:	3404      	adds	r4, #4
  while (address < pageendaddress)
 8002a7e:	42a2      	cmp	r2, r4
 8002a80:	d8f9      	bhi.n	8002a76 <EE_WriteVariable+0x36>
  HAL_StatusTypeDef flashstatus = HAL_OK;
  uint32_t newpageaddress = EEPROM_START_ADDRESS;
  uint32_t oldpageid = 0;
  uint16_t validpage = PAGE0, varidx = 0;
  uint16_t eepromstatus = 0, readstatus = 0;
  uint32_t page_error = 0;
 8002a82:	2300      	movs	r3, #0
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002a84:	4a77      	ldr	r2, [pc, #476]	; (8002c64 <EE_WriteVariable+0x224>)
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002a86:	4c78      	ldr	r4, [pc, #480]	; (8002c68 <EE_WriteVariable+0x228>)
  uint32_t page_error = 0;
 8002a88:	9300      	str	r3, [sp, #0]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002a8a:	8811      	ldrh	r1, [r2, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002a8c:	8823      	ldrh	r3, [r4, #0]
 8002a8e:	b29b      	uxth	r3, r3
      if (pagestatus0 == VALID_PAGE)
 8002a90:	2900      	cmp	r1, #0
 8002a92:	d125      	bne.n	8002ae0 <EE_WriteVariable+0xa0>
  {
    /* New page address  where variable will be moved to */
    newpageaddress = PAGE1_BASE_ADDRESS;

    /* Old page ID where variable will be taken from */
    oldpageid = PAGE0_BASE_ADDRESS;
 8002a94:	4690      	mov	r8, r2
  {
    return NO_VALID_PAGE;       /* No valid Page */
  }

  /* Set the new Page status to RECEIVE_DATA status */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, newpageaddress, RECEIVE_DATA);  
 8002a96:	4a75      	ldr	r2, [pc, #468]	; (8002c6c <EE_WriteVariable+0x22c>)
 8002a98:	2300      	movs	r3, #0
 8002a9a:	0021      	movs	r1, r4
 8002a9c:	2001      	movs	r0, #1
 8002a9e:	f7fe f8bf 	bl	8000c20 <HAL_FLASH_Program>
  /* If program operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 8002aa2:	2800      	cmp	r0, #0
 8002aa4:	d02a      	beq.n	8002afc <EE_WriteVariable+0xbc>
  /* Erase the old Page: Set old Page status to ERASED status */
  flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);  
  /* If erase operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
  {
    return flashstatus;
 8002aa6:	b280      	uxth	r0, r0
}
 8002aa8:	b005      	add	sp, #20
 8002aaa:	bc3c      	pop	{r2, r3, r4, r5}
 8002aac:	4690      	mov	r8, r2
 8002aae:	4699      	mov	r9, r3
 8002ab0:	46a2      	mov	sl, r4
 8002ab2:	46ab      	mov	fp, r5
 8002ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return  NO_VALID_PAGE;
 8002ab6:	20ab      	movs	r0, #171	; 0xab
      else if (pagestatus0 == VALID_PAGE)
 8002ab8:	2900      	cmp	r1, #0
 8002aba:	d1f5      	bne.n	8002aa8 <EE_WriteVariable+0x68>
        if (pagestatus1 == RECEIVE_DATA)
 8002abc:	496b      	ldr	r1, [pc, #428]	; (8002c6c <EE_WriteVariable+0x22c>)
 8002abe:	428a      	cmp	r2, r1
 8002ac0:	d0d2      	beq.n	8002a68 <EE_WriteVariable+0x28>
 8002ac2:	001c      	movs	r4, r3
 8002ac4:	4a6c      	ldr	r2, [pc, #432]	; (8002c78 <EE_WriteVariable+0x238>)
 8002ac6:	e7d2      	b.n	8002a6e <EE_WriteVariable+0x2e>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, Data);       
 8002ac8:	002a      	movs	r2, r5
 8002aca:	2300      	movs	r3, #0
 8002acc:	0021      	movs	r1, r4
 8002ace:	2001      	movs	r0, #1
 8002ad0:	f7fe f8a6 	bl	8000c20 <HAL_FLASH_Program>
      if (flashstatus != HAL_OK)
 8002ad4:	2800      	cmp	r0, #0
 8002ad6:	d008      	beq.n	8002aea <EE_WriteVariable+0xaa>
      return flashstatus;
 8002ad8:	b280      	uxth	r0, r0
  if (Status == PAGE_FULL)
 8002ada:	2880      	cmp	r0, #128	; 0x80
 8002adc:	d1e4      	bne.n	8002aa8 <EE_WriteVariable+0x68>
 8002ade:	e7d0      	b.n	8002a82 <EE_WriteVariable+0x42>
      else if (pagestatus1 == VALID_PAGE)
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d109      	bne.n	8002af8 <EE_WriteVariable+0xb8>
    oldpageid = PAGE1_BASE_ADDRESS;
 8002ae4:	46a0      	mov	r8, r4
    newpageaddress = PAGE0_BASE_ADDRESS;
 8002ae6:	0014      	movs	r4, r2
 8002ae8:	e7d5      	b.n	8002a96 <EE_WriteVariable+0x56>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, VirtAddress);       
 8002aea:	1ca1      	adds	r1, r4, #2
 8002aec:	0032      	movs	r2, r6
 8002aee:	2300      	movs	r3, #0
 8002af0:	2001      	movs	r0, #1
 8002af2:	f7fe f895 	bl	8000c20 <HAL_FLASH_Program>
 8002af6:	e7ef      	b.n	8002ad8 <EE_WriteVariable+0x98>
    return NO_VALID_PAGE;       /* No valid Page */
 8002af8:	20ab      	movs	r0, #171	; 0xab
 8002afa:	e7d5      	b.n	8002aa8 <EE_WriteVariable+0x68>
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002afc:	4b59      	ldr	r3, [pc, #356]	; (8002c64 <EE_WriteVariable+0x224>)
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002afe:	4a5a      	ldr	r2, [pc, #360]	; (8002c68 <EE_WriteVariable+0x228>)
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002b00:	8819      	ldrh	r1, [r3, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002b02:	8812      	ldrh	r2, [r2, #0]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002b04:	b289      	uxth	r1, r1
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002b06:	b292      	uxth	r2, r2
      if (pagestatus1 == VALID_PAGE)
 8002b08:	2a00      	cmp	r2, #0
 8002b0a:	d111      	bne.n	8002b30 <EE_WriteVariable+0xf0>
        if (pagestatus0 == RECEIVE_DATA)
 8002b0c:	4a57      	ldr	r2, [pc, #348]	; (8002c6c <EE_WriteVariable+0x22c>)
 8002b0e:	4291      	cmp	r1, r2
 8002b10:	d013      	beq.n	8002b3a <EE_WriteVariable+0xfa>
 8002b12:	4b57      	ldr	r3, [pc, #348]	; (8002c70 <EE_WriteVariable+0x230>)
 8002b14:	4a57      	ldr	r2, [pc, #348]	; (8002c74 <EE_WriteVariable+0x234>)
 8002b16:	001f      	movs	r7, r3
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	d103      	bne.n	8002b26 <EE_WriteVariable+0xe6>
 8002b1e:	e00f      	b.n	8002b40 <EE_WriteVariable+0x100>
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	3301      	adds	r3, #1
 8002b24:	d00c      	beq.n	8002b40 <EE_WriteVariable+0x100>
      address = address + 4;
 8002b26:	3704      	adds	r7, #4
  while (address < pageendaddress)
 8002b28:	4297      	cmp	r7, r2
 8002b2a:	d3f9      	bcc.n	8002b20 <EE_WriteVariable+0xe0>
  return PAGE_FULL;
 8002b2c:	2080      	movs	r0, #128	; 0x80
 8002b2e:	e7bb      	b.n	8002aa8 <EE_WriteVariable+0x68>
      else if (pagestatus0 == VALID_PAGE)
 8002b30:	2900      	cmp	r1, #0
 8002b32:	d1e1      	bne.n	8002af8 <EE_WriteVariable+0xb8>
        if (pagestatus1 == RECEIVE_DATA)
 8002b34:	494d      	ldr	r1, [pc, #308]	; (8002c6c <EE_WriteVariable+0x22c>)
 8002b36:	428a      	cmp	r2, r1
 8002b38:	d0eb      	beq.n	8002b12 <EE_WriteVariable+0xd2>
 8002b3a:	4a4f      	ldr	r2, [pc, #316]	; (8002c78 <EE_WriteVariable+0x238>)
 8002b3c:	001f      	movs	r7, r3
 8002b3e:	e7eb      	b.n	8002b18 <EE_WriteVariable+0xd8>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, Data);       
 8002b40:	002a      	movs	r2, r5
 8002b42:	2300      	movs	r3, #0
 8002b44:	0039      	movs	r1, r7
 8002b46:	2001      	movs	r0, #1
 8002b48:	f7fe f86a 	bl	8000c20 <HAL_FLASH_Program>
      if (flashstatus != HAL_OK)
 8002b4c:	2800      	cmp	r0, #0
 8002b4e:	d1aa      	bne.n	8002aa6 <EE_WriteVariable+0x66>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, VirtAddress);       
 8002b50:	1cb9      	adds	r1, r7, #2
 8002b52:	0032      	movs	r2, r6
 8002b54:	2300      	movs	r3, #0
 8002b56:	2001      	movs	r0, #1
 8002b58:	f7fe f862 	bl	8000c20 <HAL_FLASH_Program>
      return flashstatus;
 8002b5c:	b280      	uxth	r0, r0
  if (eepromstatus != HAL_OK)
 8002b5e:	2800      	cmp	r0, #0
 8002b60:	d1a2      	bne.n	8002aa8 <EE_WriteVariable+0x68>
 8002b62:	4b46      	ldr	r3, [pc, #280]	; (8002c7c <EE_WriteVariable+0x23c>)
 8002b64:	2700      	movs	r7, #0
 8002b66:	4699      	mov	r9, r3
      *Data = (*(__IO uint16_t*)(address - 2));
 8002b68:	4b45      	ldr	r3, [pc, #276]	; (8002c80 <EE_WriteVariable+0x240>)
 8002b6a:	469a      	mov	sl, r3
    if (VirtAddVarTab[varidx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8002b6c:	464b      	mov	r3, r9
 8002b6e:	5bdb      	ldrh	r3, [r3, r7]
 8002b70:	469b      	mov	fp, r3
 8002b72:	429e      	cmp	r6, r3
 8002b74:	d017      	beq.n	8002ba6 <EE_WriteVariable+0x166>
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002b76:	4b3b      	ldr	r3, [pc, #236]	; (8002c64 <EE_WriteVariable+0x224>)
 8002b78:	881a      	ldrh	r2, [r3, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002b7a:	4b3b      	ldr	r3, [pc, #236]	; (8002c68 <EE_WriteVariable+0x228>)
 8002b7c:	881b      	ldrh	r3, [r3, #0]
 8002b7e:	b29b      	uxth	r3, r3
      if (pagestatus0 == VALID_PAGE)
 8002b80:	2a00      	cmp	r2, #0
 8002b82:	d02d      	beq.n	8002be0 <EE_WriteVariable+0x1a0>
      else if (pagestatus1 == VALID_PAGE)
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d14f      	bne.n	8002c28 <EE_WriteVariable+0x1e8>
 8002b88:	4a3e      	ldr	r2, [pc, #248]	; (8002c84 <EE_WriteVariable+0x244>)
 8002b8a:	493f      	ldr	r1, [pc, #252]	; (8002c88 <EE_WriteVariable+0x248>)
 8002b8c:	0013      	movs	r3, r2
 8002b8e:	483f      	ldr	r0, [pc, #252]	; (8002c8c <EE_WriteVariable+0x24c>)
    addressvalue = (*(__IO uint16_t*)address);
 8002b90:	881b      	ldrh	r3, [r3, #0]
    if (addressvalue == VirtAddress)
 8002b92:	459b      	cmp	fp, r3
 8002b94:	d104      	bne.n	8002ba0 <EE_WriteVariable+0x160>
 8002b96:	e029      	b.n	8002bec <EE_WriteVariable+0x1ac>
    addressvalue = (*(__IO uint16_t*)address);
 8002b98:	8819      	ldrh	r1, [r3, #0]
    if (addressvalue == VirtAddress)
 8002b9a:	458b      	cmp	fp, r1
 8002b9c:	d025      	beq.n	8002bea <EE_WriteVariable+0x1aa>
 8002b9e:	001a      	movs	r2, r3
      address = address - 4;
 8002ba0:	1f13      	subs	r3, r2, #4
  while (address > (PageStartAddress + 2))
 8002ba2:	4298      	cmp	r0, r3
 8002ba4:	d3f8      	bcc.n	8002b98 <EE_WriteVariable+0x158>
 8002ba6:	3702      	adds	r7, #2
  for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8002ba8:	2f06      	cmp	r7, #6
 8002baa:	d1df      	bne.n	8002b6c <EE_WriteVariable+0x12c>
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8002bac:	2300      	movs	r3, #0
 8002bae:	9301      	str	r3, [sp, #4]
  s_eraseinit.PageAddress = oldpageid;
 8002bb0:	4643      	mov	r3, r8
 8002bb2:	9302      	str	r3, [sp, #8]
  s_eraseinit.NbPages     = 1;
 8002bb4:	2301      	movs	r3, #1
  flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);  
 8002bb6:	4669      	mov	r1, sp
 8002bb8:	a801      	add	r0, sp, #4
  s_eraseinit.NbPages     = 1;
 8002bba:	9303      	str	r3, [sp, #12]
  flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);  
 8002bbc:	f7fe f96a 	bl	8000e94 <HAL_FLASHEx_Erase>
  if (flashstatus != HAL_OK)
 8002bc0:	2800      	cmp	r0, #0
 8002bc2:	d000      	beq.n	8002bc6 <EE_WriteVariable+0x186>
 8002bc4:	e76f      	b.n	8002aa6 <EE_WriteVariable+0x66>
  }

  /* Set new Page status to VALID_PAGE status */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, newpageaddress, VALID_PAGE);   
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	2200      	movs	r2, #0
 8002bca:	0021      	movs	r1, r4
 8002bcc:	2001      	movs	r0, #1
 8002bce:	f7fe f827 	bl	8000c20 <HAL_FLASH_Program>
 8002bd2:	0003      	movs	r3, r0
  }
  
  

  /* Return last operation flash status */
  return flashstatus;
 8002bd4:	2000      	movs	r0, #0
  if (flashstatus != HAL_OK)
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d100      	bne.n	8002bdc <EE_WriteVariable+0x19c>
 8002bda:	e765      	b.n	8002aa8 <EE_WriteVariable+0x68>
    return flashstatus;
 8002bdc:	b298      	uxth	r0, r3
 8002bde:	e763      	b.n	8002aa8 <EE_WriteVariable+0x68>
      if (pagestatus0 == VALID_PAGE)
 8002be0:	4a2b      	ldr	r2, [pc, #172]	; (8002c90 <EE_WriteVariable+0x250>)
 8002be2:	492c      	ldr	r1, [pc, #176]	; (8002c94 <EE_WriteVariable+0x254>)
 8002be4:	482c      	ldr	r0, [pc, #176]	; (8002c98 <EE_WriteVariable+0x258>)
 8002be6:	0013      	movs	r3, r2
 8002be8:	e7d2      	b.n	8002b90 <EE_WriteVariable+0x150>
 8002bea:	1f91      	subs	r1, r2, #6
      *Data = (*(__IO uint16_t*)(address - 2));
 8002bec:	4653      	mov	r3, sl
 8002bee:	880a      	ldrh	r2, [r1, #0]
 8002bf0:	b292      	uxth	r2, r2
 8002bf2:	801a      	strh	r2, [r3, #0]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002bf4:	4b1b      	ldr	r3, [pc, #108]	; (8002c64 <EE_WriteVariable+0x224>)
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002bf6:	491c      	ldr	r1, [pc, #112]	; (8002c68 <EE_WriteVariable+0x228>)
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002bf8:	8818      	ldrh	r0, [r3, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002bfa:	8809      	ldrh	r1, [r1, #0]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002bfc:	b280      	uxth	r0, r0
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002bfe:	b289      	uxth	r1, r1
      if (pagestatus1 == VALID_PAGE)
 8002c00:	2900      	cmp	r1, #0
 8002c02:	d114      	bne.n	8002c2e <EE_WriteVariable+0x1ee>
        if (pagestatus0 == RECEIVE_DATA)
 8002c04:	4919      	ldr	r1, [pc, #100]	; (8002c6c <EE_WriteVariable+0x22c>)
 8002c06:	4288      	cmp	r0, r1
 8002c08:	d017      	beq.n	8002c3a <EE_WriteVariable+0x1fa>
 8002c0a:	4b19      	ldr	r3, [pc, #100]	; (8002c70 <EE_WriteVariable+0x230>)
 8002c0c:	4919      	ldr	r1, [pc, #100]	; (8002c74 <EE_WriteVariable+0x234>)
 8002c0e:	001d      	movs	r5, r3
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	3301      	adds	r3, #1
 8002c14:	d103      	bne.n	8002c1e <EE_WriteVariable+0x1de>
 8002c16:	e013      	b.n	8002c40 <EE_WriteVariable+0x200>
 8002c18:	682b      	ldr	r3, [r5, #0]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	d010      	beq.n	8002c40 <EE_WriteVariable+0x200>
      address = address + 4;
 8002c1e:	3504      	adds	r5, #4
  while (address < pageendaddress)
 8002c20:	428d      	cmp	r5, r1
 8002c22:	d3f9      	bcc.n	8002c18 <EE_WriteVariable+0x1d8>
  return PAGE_FULL;
 8002c24:	2080      	movs	r0, #128	; 0x80
 8002c26:	e73f      	b.n	8002aa8 <EE_WriteVariable+0x68>
 8002c28:	4b15      	ldr	r3, [pc, #84]	; (8002c80 <EE_WriteVariable+0x240>)
 8002c2a:	881a      	ldrh	r2, [r3, #0]
 8002c2c:	e7e2      	b.n	8002bf4 <EE_WriteVariable+0x1b4>
      else if (pagestatus0 == VALID_PAGE)
 8002c2e:	2800      	cmp	r0, #0
 8002c30:	d000      	beq.n	8002c34 <EE_WriteVariable+0x1f4>
 8002c32:	e761      	b.n	8002af8 <EE_WriteVariable+0xb8>
        if (pagestatus1 == RECEIVE_DATA)
 8002c34:	480d      	ldr	r0, [pc, #52]	; (8002c6c <EE_WriteVariable+0x22c>)
 8002c36:	4281      	cmp	r1, r0
 8002c38:	d0e7      	beq.n	8002c0a <EE_WriteVariable+0x1ca>
 8002c3a:	001d      	movs	r5, r3
 8002c3c:	490e      	ldr	r1, [pc, #56]	; (8002c78 <EE_WriteVariable+0x238>)
 8002c3e:	e7e7      	b.n	8002c10 <EE_WriteVariable+0x1d0>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, Data);       
 8002c40:	2300      	movs	r3, #0
 8002c42:	0029      	movs	r1, r5
 8002c44:	2001      	movs	r0, #1
 8002c46:	f7fd ffeb 	bl	8000c20 <HAL_FLASH_Program>
      if (flashstatus != HAL_OK)
 8002c4a:	2800      	cmp	r0, #0
 8002c4c:	d000      	beq.n	8002c50 <EE_WriteVariable+0x210>
 8002c4e:	e72a      	b.n	8002aa6 <EE_WriteVariable+0x66>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, VirtAddress);       
 8002c50:	1ca9      	adds	r1, r5, #2
 8002c52:	465a      	mov	r2, fp
 8002c54:	2300      	movs	r3, #0
 8002c56:	2001      	movs	r0, #1
 8002c58:	f7fd ffe2 	bl	8000c20 <HAL_FLASH_Program>
      return flashstatus;
 8002c5c:	b280      	uxth	r0, r0
        if (eepromstatus != HAL_OK)
 8002c5e:	2800      	cmp	r0, #0
 8002c60:	d0a1      	beq.n	8002ba6 <EE_WriteVariable+0x166>
 8002c62:	e721      	b.n	8002aa8 <EE_WriteVariable+0x68>
 8002c64:	08007000 	.word	0x08007000
 8002c68:	08007800 	.word	0x08007800
 8002c6c:	0000eeee 	.word	0x0000eeee
 8002c70:	0800f000 	.word	0x0800f000
 8002c74:	0800f3ff 	.word	0x0800f3ff
 8002c78:	080073ff 	.word	0x080073ff
 8002c7c:	20000000 	.word	0x20000000
 8002c80:	20000084 	.word	0x20000084
 8002c84:	0800f3fe 	.word	0x0800f3fe
 8002c88:	0800f3fc 	.word	0x0800f3fc
 8002c8c:	0800f002 	.word	0x0800f002
 8002c90:	080073fe 	.word	0x080073fe
 8002c94:	080073fc 	.word	0x080073fc
 8002c98:	08007002 	.word	0x08007002

08002c9c <storeEEpromConfig>:
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;

}


void storeEEpromConfig(){
 8002c9c:	b510      	push	{r4, lr}

	 EE_WriteVariable(VirtAddVarTab[EEvehiclemode], vehicle_mode);
 8002c9e:	4b08      	ldr	r3, [pc, #32]	; (8002cc0 <storeEEpromConfig+0x24>)
 8002ca0:	4c08      	ldr	r4, [pc, #32]	; (8002cc4 <storeEEpromConfig+0x28>)
 8002ca2:	7819      	ldrb	r1, [r3, #0]
 8002ca4:	8820      	ldrh	r0, [r4, #0]
 8002ca6:	f7ff fecb 	bl	8002a40 <EE_WriteVariable>
	 EE_WriteVariable(VirtAddVarTab[EEdirection], dir_reversed);
 8002caa:	4b07      	ldr	r3, [pc, #28]	; (8002cc8 <storeEEpromConfig+0x2c>)
 8002cac:	8860      	ldrh	r0, [r4, #2]
 8002cae:	8819      	ldrh	r1, [r3, #0]
 8002cb0:	f7ff fec6 	bl	8002a40 <EE_WriteVariable>
	 EE_WriteVariable(VirtAddVarTab[EEbidirection], bi_direction);
 8002cb4:	4b05      	ldr	r3, [pc, #20]	; (8002ccc <storeEEpromConfig+0x30>)
 8002cb6:	88a0      	ldrh	r0, [r4, #4]
 8002cb8:	8819      	ldrh	r1, [r3, #0]
 8002cba:	f7ff fec1 	bl	8002a40 <EE_WriteVariable>
	// EE_WriteVariable(VirtAddVarTab[EEbrake_on_stop], EEbrake_on_stop);

	// playEEpromSavedTune();
}
 8002cbe:	bd10      	pop	{r4, pc}
 8002cc0:	20000058 	.word	0x20000058
 8002cc4:	20000000 	.word	0x20000000
 8002cc8:	200000bc 	.word	0x200000bc
 8002ccc:	200000a8 	.word	0x200000a8

08002cd0 <loadEEpromConfig>:


void loadEEpromConfig(){
 8002cd0:	b570      	push	{r4, r5, r6, lr}
	 EE_ReadVariable(VirtAddVarTab[EEvehiclemode], &VarDataTab[EEvehiclemode]);
 8002cd2:	4c15      	ldr	r4, [pc, #84]	; (8002d28 <loadEEpromConfig+0x58>)
 8002cd4:	4d15      	ldr	r5, [pc, #84]	; (8002d2c <loadEEpromConfig+0x5c>)
 8002cd6:	0021      	movs	r1, r4
 8002cd8:	8828      	ldrh	r0, [r5, #0]
 8002cda:	f7ff fe79 	bl	80029d0 <EE_ReadVariable>
	 EE_ReadVariable(VirtAddVarTab[EEdirection], &VarDataTab[EEdirection]);
 8002cde:	1ca1      	adds	r1, r4, #2
 8002ce0:	8868      	ldrh	r0, [r5, #2]
 8002ce2:	f7ff fe75 	bl	80029d0 <EE_ReadVariable>
	 EE_ReadVariable(VirtAddVarTab[EEbidirection], &VarDataTab[EEbidirection]);
 8002ce6:	1d21      	adds	r1, r4, #4
 8002ce8:	88a8      	ldrh	r0, [r5, #4]
 8002cea:	f7ff fe71 	bl	80029d0 <EE_ReadVariable>
//	 EE_ReadVariable(VirtAddVarTab[EEbrake_on_stop], &VarDataTab[EEbrake_on_stop]);

	 if (VarDataTab[EEvehiclemode] == 0){             // nothing in the eeprom
 8002cee:	8823      	ldrh	r3, [r4, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d008      	beq.n	8002d06 <loadEEpromConfig+0x36>
     storeEEpromConfig();            // store default values
	 }else{
	 vehicle_mode = VarDataTab[EEvehiclemode];
 8002cf4:	4a0e      	ldr	r2, [pc, #56]	; (8002d30 <loadEEpromConfig+0x60>)
 8002cf6:	7013      	strb	r3, [r2, #0]
	 dir_reversed = VarDataTab[EEdirection];
 8002cf8:	8862      	ldrh	r2, [r4, #2]
 8002cfa:	4b0e      	ldr	r3, [pc, #56]	; (8002d34 <loadEEpromConfig+0x64>)
 8002cfc:	601a      	str	r2, [r3, #0]
	 bi_direction = VarDataTab[EEbidirection];
 8002cfe:	88a2      	ldrh	r2, [r4, #4]
 8002d00:	4b0d      	ldr	r3, [pc, #52]	; (8002d38 <loadEEpromConfig+0x68>)
 8002d02:	601a      	str	r2, [r3, #0]
//	 brake = VarDataTab[EEbrake_on_stop];
	 }
}
 8002d04:	bd70      	pop	{r4, r5, r6, pc}
	 EE_WriteVariable(VirtAddVarTab[EEvehiclemode], vehicle_mode);
 8002d06:	4b0a      	ldr	r3, [pc, #40]	; (8002d30 <loadEEpromConfig+0x60>)
 8002d08:	8828      	ldrh	r0, [r5, #0]
 8002d0a:	7819      	ldrb	r1, [r3, #0]
 8002d0c:	f7ff fe98 	bl	8002a40 <EE_WriteVariable>
	 EE_WriteVariable(VirtAddVarTab[EEdirection], dir_reversed);
 8002d10:	4b08      	ldr	r3, [pc, #32]	; (8002d34 <loadEEpromConfig+0x64>)
 8002d12:	8868      	ldrh	r0, [r5, #2]
 8002d14:	8819      	ldrh	r1, [r3, #0]
 8002d16:	f7ff fe93 	bl	8002a40 <EE_WriteVariable>
	 EE_WriteVariable(VirtAddVarTab[EEbidirection], bi_direction);
 8002d1a:	4b07      	ldr	r3, [pc, #28]	; (8002d38 <loadEEpromConfig+0x68>)
 8002d1c:	88a8      	ldrh	r0, [r5, #4]
 8002d1e:	8819      	ldrh	r1, [r3, #0]
 8002d20:	f7ff fe8e 	bl	8002a40 <EE_WriteVariable>
 8002d24:	e7ee      	b.n	8002d04 <loadEEpromConfig+0x34>
 8002d26:	46c0      	nop			; (mov r8, r8)
 8002d28:	20000090 	.word	0x20000090
 8002d2c:	20000000 	.word	0x20000000
 8002d30:	20000058 	.word	0x20000058
 8002d34:	200000bc 	.word	0x200000bc
 8002d38:	200000a8 	.word	0x200000a8

08002d3c <phaseA>:
#endif
#ifdef FD6288
void phaseB(int newPhase) {
#endif

	if (newPhase == pwm) {
 8002d3c:	4b2b      	ldr	r3, [pc, #172]	; (8002dec <phaseA+0xb0>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4283      	cmp	r3, r0
 8002d42:	d031      	beq.n	8002da8 <phaseA+0x6c>
		}
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_9, LL_GPIO_MODE_ALTERNATE);  // high

	}

	if (newPhase == floating) {
 8002d44:	4b2a      	ldr	r3, [pc, #168]	; (8002df0 <phaseA+0xb4>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4298      	cmp	r0, r3
 8002d4a:	d018      	beq.n	8002d7e <phaseA+0x42>
		GPIOB->BRR = GPIO_PIN_0;
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_9, LL_GPIO_MODE_OUTPUT);
		GPIOA->BRR = GPIO_PIN_9;
	}

	if (newPhase == lowside) {          // low mosfet on
 8002d4c:	4b29      	ldr	r3, [pc, #164]	; (8002df4 <phaseA+0xb8>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4298      	cmp	r0, r3
 8002d52:	d113      	bne.n	8002d7c <phaseA+0x40>
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8002d54:	2103      	movs	r1, #3
 8002d56:	4a28      	ldr	r2, [pc, #160]	; (8002df8 <phaseA+0xbc>)
 8002d58:	6813      	ldr	r3, [r2, #0]
 8002d5a:	438b      	bics	r3, r1
 8002d5c:	3902      	subs	r1, #2
 8002d5e:	430b      	orrs	r3, r1
 8002d60:	6013      	str	r3, [r2, #0]
 8002d62:	2390      	movs	r3, #144	; 0x90
		LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_0, LL_GPIO_MODE_OUTPUT);
		GPIOB->BSRR = GPIO_PIN_0;
 8002d64:	6191      	str	r1, [r2, #24]
 8002d66:	05db      	lsls	r3, r3, #23
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	4924      	ldr	r1, [pc, #144]	; (8002dfc <phaseA+0xc0>)
 8002d6c:	4011      	ands	r1, r2
 8002d6e:	2280      	movs	r2, #128	; 0x80
 8002d70:	02d2      	lsls	r2, r2, #11
 8002d72:	430a      	orrs	r2, r1
 8002d74:	601a      	str	r2, [r3, #0]
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_9, LL_GPIO_MODE_OUTPUT);
		GPIOA->BRR = GPIO_PIN_9;
 8002d76:	2280      	movs	r2, #128	; 0x80
 8002d78:	0092      	lsls	r2, r2, #2
 8002d7a:	629a      	str	r2, [r3, #40]	; 0x28
	}

}
 8002d7c:	4770      	bx	lr
 8002d7e:	2103      	movs	r1, #3
 8002d80:	4a1d      	ldr	r2, [pc, #116]	; (8002df8 <phaseA+0xbc>)
 8002d82:	6813      	ldr	r3, [r2, #0]
 8002d84:	438b      	bics	r3, r1
 8002d86:	3902      	subs	r1, #2
 8002d88:	430b      	orrs	r3, r1
 8002d8a:	6013      	str	r3, [r2, #0]
 8002d8c:	2390      	movs	r3, #144	; 0x90
		GPIOB->BRR = GPIO_PIN_0;
 8002d8e:	6291      	str	r1, [r2, #40]	; 0x28
 8002d90:	05db      	lsls	r3, r3, #23
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	4919      	ldr	r1, [pc, #100]	; (8002dfc <phaseA+0xc0>)
 8002d96:	4011      	ands	r1, r2
 8002d98:	2280      	movs	r2, #128	; 0x80
 8002d9a:	02d2      	lsls	r2, r2, #11
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_9;
 8002da0:	2280      	movs	r2, #128	; 0x80
 8002da2:	0092      	lsls	r2, r2, #2
 8002da4:	629a      	str	r2, [r3, #40]	; 0x28
 8002da6:	e7d1      	b.n	8002d4c <phaseA+0x10>
		if(!slow_decay  || prop_brake_active){            // for future
 8002da8:	4b15      	ldr	r3, [pc, #84]	; (8002e00 <phaseA+0xc4>)
 8002daa:	4a13      	ldr	r2, [pc, #76]	; (8002df8 <phaseA+0xbc>)
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d110      	bne.n	8002dd4 <phaseA+0x98>
 8002db2:	2103      	movs	r1, #3
 8002db4:	6813      	ldr	r3, [r2, #0]
 8002db6:	438b      	bics	r3, r1
 8002db8:	3902      	subs	r1, #2
 8002dba:	430b      	orrs	r3, r1
 8002dbc:	6013      	str	r3, [r2, #0]
		GPIOB->BRR = GPIO_PIN_0;
 8002dbe:	6291      	str	r1, [r2, #40]	; 0x28
 8002dc0:	2190      	movs	r1, #144	; 0x90
 8002dc2:	05c9      	lsls	r1, r1, #23
 8002dc4:	680b      	ldr	r3, [r1, #0]
 8002dc6:	4a0d      	ldr	r2, [pc, #52]	; (8002dfc <phaseA+0xc0>)
 8002dc8:	401a      	ands	r2, r3
 8002dca:	2380      	movs	r3, #128	; 0x80
 8002dcc:	031b      	lsls	r3, r3, #12
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	600b      	str	r3, [r1, #0]
 8002dd2:	e7b7      	b.n	8002d44 <phaseA+0x8>
		if(!slow_decay  || prop_brake_active){            // for future
 8002dd4:	4b0b      	ldr	r3, [pc, #44]	; (8002e04 <phaseA+0xc8>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1ea      	bne.n	8002db2 <phaseA+0x76>
 8002ddc:	2103      	movs	r1, #3
 8002dde:	6813      	ldr	r3, [r2, #0]
 8002de0:	438b      	bics	r3, r1
 8002de2:	3901      	subs	r1, #1
 8002de4:	430b      	orrs	r3, r1
 8002de6:	6013      	str	r3, [r2, #0]
 8002de8:	e7ea      	b.n	8002dc0 <phaseA+0x84>
 8002dea:	46c0      	nop			; (mov r8, r8)
 8002dec:	20000030 	.word	0x20000030
 8002df0:	2000001c 	.word	0x2000001c
 8002df4:	20000028 	.word	0x20000028
 8002df8:	48000400 	.word	0x48000400
 8002dfc:	fff3ffff 	.word	0xfff3ffff
 8002e00:	2000003c 	.word	0x2000003c
 8002e04:	20000123 	.word	0x20000123

08002e08 <phaseB>:
void phaseB(int newPhase) {                                // phase c qfn , phase b qfp
#endif
#ifdef FD6288
void phaseC(int newPhase) {
#endif
	if (newPhase == pwm) {  // pwm
 8002e08:	4b2f      	ldr	r3, [pc, #188]	; (8002ec8 <phaseB+0xc0>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4283      	cmp	r3, r0
 8002e0e:	d033      	beq.n	8002e78 <phaseB+0x70>
		}
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_8, LL_GPIO_MODE_ALTERNATE);

	}

	if (newPhase == floating) {            // floating
 8002e10:	4b2e      	ldr	r3, [pc, #184]	; (8002ecc <phaseB+0xc4>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4298      	cmp	r0, r3
 8002e16:	d019      	beq.n	8002e4c <phaseB+0x44>
		GPIOA->BRR = GPIO_PIN_7;
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_8, LL_GPIO_MODE_OUTPUT);
		GPIOA->BRR = GPIO_PIN_8;
	}

	if (newPhase == lowside) {              // lowside
 8002e18:	4b2d      	ldr	r3, [pc, #180]	; (8002ed0 <phaseB+0xc8>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4298      	cmp	r0, r3
 8002e1e:	d114      	bne.n	8002e4a <phaseB+0x42>
 8002e20:	2390      	movs	r3, #144	; 0x90
 8002e22:	05db      	lsls	r3, r3, #23
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	492b      	ldr	r1, [pc, #172]	; (8002ed4 <phaseB+0xcc>)
 8002e28:	4011      	ands	r1, r2
 8002e2a:	2280      	movs	r2, #128	; 0x80
 8002e2c:	01d2      	lsls	r2, r2, #7
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	601a      	str	r2, [r3, #0]
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_7, LL_GPIO_MODE_OUTPUT);
		GPIOA->BSRR = GPIO_PIN_7;
 8002e32:	2280      	movs	r2, #128	; 0x80
 8002e34:	619a      	str	r2, [r3, #24]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	4927      	ldr	r1, [pc, #156]	; (8002ed8 <phaseB+0xd0>)
 8002e3a:	4011      	ands	r1, r2
 8002e3c:	2280      	movs	r2, #128	; 0x80
 8002e3e:	0252      	lsls	r2, r2, #9
 8002e40:	430a      	orrs	r2, r1
 8002e42:	601a      	str	r2, [r3, #0]
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_8, LL_GPIO_MODE_OUTPUT);
		GPIOA->BRR = GPIO_PIN_8;
 8002e44:	2280      	movs	r2, #128	; 0x80
 8002e46:	0052      	lsls	r2, r2, #1
 8002e48:	629a      	str	r2, [r3, #40]	; 0x28
	}
}
 8002e4a:	4770      	bx	lr
 8002e4c:	2390      	movs	r3, #144	; 0x90
 8002e4e:	05db      	lsls	r3, r3, #23
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	4920      	ldr	r1, [pc, #128]	; (8002ed4 <phaseB+0xcc>)
 8002e54:	4011      	ands	r1, r2
 8002e56:	2280      	movs	r2, #128	; 0x80
 8002e58:	01d2      	lsls	r2, r2, #7
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_7;
 8002e5e:	2280      	movs	r2, #128	; 0x80
 8002e60:	629a      	str	r2, [r3, #40]	; 0x28
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	491c      	ldr	r1, [pc, #112]	; (8002ed8 <phaseB+0xd0>)
 8002e66:	4011      	ands	r1, r2
 8002e68:	2280      	movs	r2, #128	; 0x80
 8002e6a:	0252      	lsls	r2, r2, #9
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_8;
 8002e70:	2280      	movs	r2, #128	; 0x80
 8002e72:	0052      	lsls	r2, r2, #1
 8002e74:	629a      	str	r2, [r3, #40]	; 0x28
 8002e76:	e7cf      	b.n	8002e18 <phaseB+0x10>
		if (!slow_decay || prop_brake_active){
 8002e78:	4b18      	ldr	r3, [pc, #96]	; (8002edc <phaseB+0xd4>)
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d114      	bne.n	8002eaa <phaseB+0xa2>
 8002e80:	2390      	movs	r3, #144	; 0x90
 8002e82:	05db      	lsls	r3, r3, #23
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	4913      	ldr	r1, [pc, #76]	; (8002ed4 <phaseB+0xcc>)
 8002e88:	4011      	ands	r1, r2
 8002e8a:	2280      	movs	r2, #128	; 0x80
 8002e8c:	01d2      	lsls	r2, r2, #7
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	601a      	str	r2, [r3, #0]
			GPIOA->BRR = GPIO_PIN_7;
 8002e92:	2280      	movs	r2, #128	; 0x80
 8002e94:	629a      	str	r2, [r3, #40]	; 0x28
 8002e96:	2190      	movs	r1, #144	; 0x90
 8002e98:	05c9      	lsls	r1, r1, #23
 8002e9a:	680b      	ldr	r3, [r1, #0]
 8002e9c:	4a0e      	ldr	r2, [pc, #56]	; (8002ed8 <phaseB+0xd0>)
 8002e9e:	401a      	ands	r2, r3
 8002ea0:	2380      	movs	r3, #128	; 0x80
 8002ea2:	029b      	lsls	r3, r3, #10
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	600b      	str	r3, [r1, #0]
 8002ea8:	e7b2      	b.n	8002e10 <phaseB+0x8>
		if (!slow_decay || prop_brake_active){
 8002eaa:	4b0d      	ldr	r3, [pc, #52]	; (8002ee0 <phaseB+0xd8>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1e6      	bne.n	8002e80 <phaseB+0x78>
 8002eb2:	2190      	movs	r1, #144	; 0x90
 8002eb4:	05c9      	lsls	r1, r1, #23
 8002eb6:	680b      	ldr	r3, [r1, #0]
 8002eb8:	4a06      	ldr	r2, [pc, #24]	; (8002ed4 <phaseB+0xcc>)
 8002eba:	401a      	ands	r2, r3
 8002ebc:	2380      	movs	r3, #128	; 0x80
 8002ebe:	021b      	lsls	r3, r3, #8
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	600b      	str	r3, [r1, #0]
 8002ec4:	e7e7      	b.n	8002e96 <phaseB+0x8e>
 8002ec6:	46c0      	nop			; (mov r8, r8)
 8002ec8:	20000030 	.word	0x20000030
 8002ecc:	2000001c 	.word	0x2000001c
 8002ed0:	20000028 	.word	0x20000028
 8002ed4:	ffff3fff 	.word	0xffff3fff
 8002ed8:	fffcffff 	.word	0xfffcffff
 8002edc:	2000003c 	.word	0x2000003c
 8002ee0:	20000123 	.word	0x20000123

08002ee4 <phaseC>:
void phaseC(int newPhase) {                    // phaseA qfn , phase C qfp
#endif
#ifdef FD6288
void phaseA(int newPhase) {
#endif
	if (newPhase == pwm) {
 8002ee4:	4b2c      	ldr	r3, [pc, #176]	; (8002f98 <phaseC+0xb4>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4283      	cmp	r3, r0
 8002eea:	d033      	beq.n	8002f54 <phaseC+0x70>
			}
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_10, LL_GPIO_MODE_ALTERNATE);

	}

	if (newPhase == floating) {
 8002eec:	4b2b      	ldr	r3, [pc, #172]	; (8002f9c <phaseC+0xb8>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4298      	cmp	r0, r3
 8002ef2:	d019      	beq.n	8002f28 <phaseC+0x44>
		GPIOB->BRR = GPIO_PIN_1;
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_10, LL_GPIO_MODE_OUTPUT);
		GPIOA->BRR = GPIO_PIN_10;
	}

	if (newPhase == lowside) {
 8002ef4:	4b2a      	ldr	r3, [pc, #168]	; (8002fa0 <phaseC+0xbc>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4298      	cmp	r0, r3
 8002efa:	d114      	bne.n	8002f26 <phaseC+0x42>
 8002efc:	210c      	movs	r1, #12
 8002efe:	4a29      	ldr	r2, [pc, #164]	; (8002fa4 <phaseC+0xc0>)
 8002f00:	6813      	ldr	r3, [r2, #0]
 8002f02:	438b      	bics	r3, r1
 8002f04:	3908      	subs	r1, #8
 8002f06:	430b      	orrs	r3, r1
 8002f08:	6013      	str	r3, [r2, #0]
		LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_1, LL_GPIO_MODE_OUTPUT);
		GPIOB->BSRR = GPIO_PIN_1;
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	6193      	str	r3, [r2, #24]
 8002f0e:	2390      	movs	r3, #144	; 0x90
 8002f10:	05db      	lsls	r3, r3, #23
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	4924      	ldr	r1, [pc, #144]	; (8002fa8 <phaseC+0xc4>)
 8002f16:	4011      	ands	r1, r2
 8002f18:	2280      	movs	r2, #128	; 0x80
 8002f1a:	0352      	lsls	r2, r2, #13
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	601a      	str	r2, [r3, #0]
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_10, LL_GPIO_MODE_OUTPUT);
		GPIOA->BRR = GPIO_PIN_10;
 8002f20:	2280      	movs	r2, #128	; 0x80
 8002f22:	00d2      	lsls	r2, r2, #3
 8002f24:	629a      	str	r2, [r3, #40]	; 0x28
	}

}
 8002f26:	4770      	bx	lr
 8002f28:	210c      	movs	r1, #12
 8002f2a:	4a1e      	ldr	r2, [pc, #120]	; (8002fa4 <phaseC+0xc0>)
 8002f2c:	6813      	ldr	r3, [r2, #0]
 8002f2e:	438b      	bics	r3, r1
 8002f30:	3908      	subs	r1, #8
 8002f32:	430b      	orrs	r3, r1
 8002f34:	6013      	str	r3, [r2, #0]
		GPIOB->BRR = GPIO_PIN_1;
 8002f36:	2302      	movs	r3, #2
 8002f38:	6293      	str	r3, [r2, #40]	; 0x28
 8002f3a:	2390      	movs	r3, #144	; 0x90
 8002f3c:	05db      	lsls	r3, r3, #23
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	4919      	ldr	r1, [pc, #100]	; (8002fa8 <phaseC+0xc4>)
 8002f42:	4011      	ands	r1, r2
 8002f44:	2280      	movs	r2, #128	; 0x80
 8002f46:	0352      	lsls	r2, r2, #13
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_10;
 8002f4c:	2280      	movs	r2, #128	; 0x80
 8002f4e:	00d2      	lsls	r2, r2, #3
 8002f50:	629a      	str	r2, [r3, #40]	; 0x28
 8002f52:	e7cf      	b.n	8002ef4 <phaseC+0x10>
		if (!slow_decay || prop_brake_active){
 8002f54:	4b15      	ldr	r3, [pc, #84]	; (8002fac <phaseC+0xc8>)
 8002f56:	4a13      	ldr	r2, [pc, #76]	; (8002fa4 <phaseC+0xc0>)
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d111      	bne.n	8002f82 <phaseC+0x9e>
 8002f5e:	210c      	movs	r1, #12
 8002f60:	6813      	ldr	r3, [r2, #0]
 8002f62:	438b      	bics	r3, r1
 8002f64:	3908      	subs	r1, #8
 8002f66:	430b      	orrs	r3, r1
 8002f68:	6013      	str	r3, [r2, #0]
			GPIOB->BRR = GPIO_PIN_1;
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	6293      	str	r3, [r2, #40]	; 0x28
 8002f6e:	2190      	movs	r1, #144	; 0x90
 8002f70:	05c9      	lsls	r1, r1, #23
 8002f72:	680b      	ldr	r3, [r1, #0]
 8002f74:	4a0c      	ldr	r2, [pc, #48]	; (8002fa8 <phaseC+0xc4>)
 8002f76:	401a      	ands	r2, r3
 8002f78:	2380      	movs	r3, #128	; 0x80
 8002f7a:	039b      	lsls	r3, r3, #14
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	600b      	str	r3, [r1, #0]
 8002f80:	e7b4      	b.n	8002eec <phaseC+0x8>
		if (!slow_decay || prop_brake_active){
 8002f82:	4b0b      	ldr	r3, [pc, #44]	; (8002fb0 <phaseC+0xcc>)
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1e9      	bne.n	8002f5e <phaseC+0x7a>
 8002f8a:	210c      	movs	r1, #12
 8002f8c:	6813      	ldr	r3, [r2, #0]
 8002f8e:	438b      	bics	r3, r1
 8002f90:	3904      	subs	r1, #4
 8002f92:	430b      	orrs	r3, r1
 8002f94:	6013      	str	r3, [r2, #0]
 8002f96:	e7ea      	b.n	8002f6e <phaseC+0x8a>
 8002f98:	20000030 	.word	0x20000030
 8002f9c:	2000001c 	.word	0x2000001c
 8002fa0:	20000028 	.word	0x20000028
 8002fa4:	48000400 	.word	0x48000400
 8002fa8:	ffcfffff 	.word	0xffcfffff
 8002fac:	2000003c 	.word	0x2000003c
 8002fb0:	20000123 	.word	0x20000123

08002fb4 <comStep>:

void comStep(int newStep) {
 8002fb4:	b510      	push	{r4, lr}

	if (newStep == 1) {			//A-B
 8002fb6:	2801      	cmp	r0, #1
 8002fb8:	d02a      	beq.n	8003010 <comStep+0x5c>
		phaseA(pwm);
		phaseB(lowside);
		phaseC(floating);
	}

	if (newStep == 2) {			// C-B
 8002fba:	2802      	cmp	r0, #2
 8002fbc:	d02e      	beq.n	800301c <comStep+0x68>
		phaseA(floating);
		phaseB(lowside);
		phaseC(pwm);
	}

	if (newStep == 3) {		// C-A
 8002fbe:	2803      	cmp	r0, #3
 8002fc0:	d039      	beq.n	8003036 <comStep+0x82>
		phaseA(lowside);
		phaseB(floating);
		phaseC(pwm);
	}

	if (newStep == 4) {    // B-A
 8002fc2:	2804      	cmp	r0, #4
 8002fc4:	d004      	beq.n	8002fd0 <comStep+0x1c>
		phaseA(lowside);
		phaseB(pwm);
		phaseC(floating);
	}

	if (newStep == 5) {          // B-C
 8002fc6:	2805      	cmp	r0, #5
 8002fc8:	d01c      	beq.n	8003004 <comStep+0x50>
		phaseA(floating);
		phaseB(pwm);
		phaseC(lowside);
	}

	if (newStep == 6) {       // A-C
 8002fca:	2806      	cmp	r0, #6
 8002fcc:	d00d      	beq.n	8002fea <comStep+0x36>
		phaseA(pwm);
		phaseB(floating);
		phaseC(lowside);
	}

}
 8002fce:	bd10      	pop	{r4, pc}
		phaseA(lowside);
 8002fd0:	4b1c      	ldr	r3, [pc, #112]	; (8003044 <comStep+0x90>)
 8002fd2:	6818      	ldr	r0, [r3, #0]
 8002fd4:	f7ff feb2 	bl	8002d3c <phaseA>
		phaseB(pwm);
 8002fd8:	4b1b      	ldr	r3, [pc, #108]	; (8003048 <comStep+0x94>)
 8002fda:	6818      	ldr	r0, [r3, #0]
 8002fdc:	f7ff ff14 	bl	8002e08 <phaseB>
		phaseC(floating);
 8002fe0:	4b1a      	ldr	r3, [pc, #104]	; (800304c <comStep+0x98>)
 8002fe2:	6818      	ldr	r0, [r3, #0]
 8002fe4:	f7ff ff7e 	bl	8002ee4 <phaseC>
 8002fe8:	e7f1      	b.n	8002fce <comStep+0x1a>
		phaseA(pwm);
 8002fea:	4b17      	ldr	r3, [pc, #92]	; (8003048 <comStep+0x94>)
 8002fec:	6818      	ldr	r0, [r3, #0]
 8002fee:	f7ff fea5 	bl	8002d3c <phaseA>
		phaseB(floating);
 8002ff2:	4b16      	ldr	r3, [pc, #88]	; (800304c <comStep+0x98>)
 8002ff4:	6818      	ldr	r0, [r3, #0]
 8002ff6:	f7ff ff07 	bl	8002e08 <phaseB>
		phaseC(lowside);
 8002ffa:	4b12      	ldr	r3, [pc, #72]	; (8003044 <comStep+0x90>)
 8002ffc:	6818      	ldr	r0, [r3, #0]
 8002ffe:	f7ff ff71 	bl	8002ee4 <phaseC>
}
 8003002:	e7e4      	b.n	8002fce <comStep+0x1a>
		phaseA(floating);
 8003004:	4b11      	ldr	r3, [pc, #68]	; (800304c <comStep+0x98>)
 8003006:	6818      	ldr	r0, [r3, #0]
 8003008:	f7ff fe98 	bl	8002d3c <phaseA>
		phaseB(pwm);
 800300c:	4b0e      	ldr	r3, [pc, #56]	; (8003048 <comStep+0x94>)
 800300e:	e7f1      	b.n	8002ff4 <comStep+0x40>
		phaseA(pwm);
 8003010:	4b0d      	ldr	r3, [pc, #52]	; (8003048 <comStep+0x94>)
 8003012:	6818      	ldr	r0, [r3, #0]
 8003014:	f7ff fe92 	bl	8002d3c <phaseA>
		phaseB(lowside);
 8003018:	4b0a      	ldr	r3, [pc, #40]	; (8003044 <comStep+0x90>)
 800301a:	e7de      	b.n	8002fda <comStep+0x26>
		phaseA(floating);
 800301c:	4b0b      	ldr	r3, [pc, #44]	; (800304c <comStep+0x98>)
 800301e:	6818      	ldr	r0, [r3, #0]
 8003020:	f7ff fe8c 	bl	8002d3c <phaseA>
		phaseB(lowside);
 8003024:	4b07      	ldr	r3, [pc, #28]	; (8003044 <comStep+0x90>)
		phaseB(floating);
 8003026:	6818      	ldr	r0, [r3, #0]
 8003028:	f7ff feee 	bl	8002e08 <phaseB>
		phaseC(pwm);
 800302c:	4b06      	ldr	r3, [pc, #24]	; (8003048 <comStep+0x94>)
 800302e:	6818      	ldr	r0, [r3, #0]
 8003030:	f7ff ff58 	bl	8002ee4 <phaseC>
 8003034:	e7cb      	b.n	8002fce <comStep+0x1a>
		phaseA(lowside);
 8003036:	4b03      	ldr	r3, [pc, #12]	; (8003044 <comStep+0x90>)
 8003038:	6818      	ldr	r0, [r3, #0]
 800303a:	f7ff fe7f 	bl	8002d3c <phaseA>
		phaseB(floating);
 800303e:	4b03      	ldr	r3, [pc, #12]	; (800304c <comStep+0x98>)
 8003040:	e7f1      	b.n	8003026 <comStep+0x72>
 8003042:	46c0      	nop			; (mov r8, r8)
 8003044:	20000028 	.word	0x20000028
 8003048:	20000030 	.word	0x20000030
 800304c:	2000001c 	.word	0x2000001c

08003050 <allOff>:

void allOff() {                   // coast
 8003050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003052:	46de      	mov	lr, fp
 8003054:	4657      	mov	r7, sl
 8003056:	464e      	mov	r6, r9
 8003058:	4645      	mov	r5, r8
	phaseA(floating);
 800305a:	4b82      	ldr	r3, [pc, #520]	; (8003264 <allOff+0x214>)
void allOff() {                   // coast
 800305c:	b5e0      	push	{r5, r6, r7, lr}
	phaseA(floating);
 800305e:	469b      	mov	fp, r3
 8003060:	681a      	ldr	r2, [r3, #0]
	if (newPhase == pwm) {
 8003062:	4b81      	ldr	r3, [pc, #516]	; (8003268 <allOff+0x218>)
 8003064:	6818      	ldr	r0, [r3, #0]
 8003066:	4282      	cmp	r2, r0
 8003068:	d100      	bne.n	800306c <allOff+0x1c>
 800306a:	e0c0      	b.n	80031ee <allOff+0x19e>
 800306c:	2703      	movs	r7, #3
 800306e:	2101      	movs	r1, #1
 8003070:	4d7e      	ldr	r5, [pc, #504]	; (800326c <allOff+0x21c>)
 8003072:	468c      	mov	ip, r1
 8003074:	682b      	ldr	r3, [r5, #0]
 8003076:	4e7e      	ldr	r6, [pc, #504]	; (8003270 <allOff+0x220>)
 8003078:	43bb      	bics	r3, r7
 800307a:	430b      	orrs	r3, r1
 800307c:	602b      	str	r3, [r5, #0]
		GPIOB->BRR = GPIO_PIN_0;
 800307e:	62a9      	str	r1, [r5, #40]	; 0x28
 8003080:	2190      	movs	r1, #144	; 0x90
 8003082:	05c9      	lsls	r1, r1, #23
 8003084:	680b      	ldr	r3, [r1, #0]
 8003086:	46b1      	mov	r9, r6
 8003088:	4033      	ands	r3, r6
 800308a:	2680      	movs	r6, #128	; 0x80
 800308c:	02f6      	lsls	r6, r6, #11
 800308e:	4333      	orrs	r3, r6
 8003090:	600b      	str	r3, [r1, #0]
		GPIOA->BRR = GPIO_PIN_9;
 8003092:	2380      	movs	r3, #128	; 0x80
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	469a      	mov	sl, r3
 8003098:	628b      	str	r3, [r1, #40]	; 0x28
	if (newPhase == lowside) {          // low mosfet on
 800309a:	4b76      	ldr	r3, [pc, #472]	; (8003274 <allOff+0x224>)
 800309c:	46b0      	mov	r8, r6
 800309e:	681e      	ldr	r6, [r3, #0]
 80030a0:	42b2      	cmp	r2, r6
 80030a2:	d10d      	bne.n	80030c0 <allOff+0x70>
 80030a4:	4664      	mov	r4, ip
 80030a6:	682b      	ldr	r3, [r5, #0]
 80030a8:	43bb      	bics	r3, r7
 80030aa:	4323      	orrs	r3, r4
 80030ac:	602b      	str	r3, [r5, #0]
		GPIOB->BSRR = GPIO_PIN_0;
 80030ae:	61ac      	str	r4, [r5, #24]
 80030b0:	464c      	mov	r4, r9
 80030b2:	680b      	ldr	r3, [r1, #0]
 80030b4:	4023      	ands	r3, r4
 80030b6:	4644      	mov	r4, r8
 80030b8:	431c      	orrs	r4, r3
		GPIOA->BRR = GPIO_PIN_9;
 80030ba:	4653      	mov	r3, sl
 80030bc:	600c      	str	r4, [r1, #0]
 80030be:	628b      	str	r3, [r1, #40]	; 0x28
	if (newPhase == pwm) {  // pwm
 80030c0:	0015      	movs	r5, r2
 80030c2:	4282      	cmp	r2, r0
 80030c4:	d100      	bne.n	80030c8 <allOff+0x78>
 80030c6:	e077      	b.n	80031b8 <allOff+0x168>
 80030c8:	2390      	movs	r3, #144	; 0x90
 80030ca:	2480      	movs	r4, #128	; 0x80
 80030cc:	05db      	lsls	r3, r3, #23
 80030ce:	6819      	ldr	r1, [r3, #0]
 80030d0:	4f69      	ldr	r7, [pc, #420]	; (8003278 <allOff+0x228>)
 80030d2:	01e4      	lsls	r4, r4, #7
 80030d4:	4039      	ands	r1, r7
 80030d6:	4321      	orrs	r1, r4
 80030d8:	6019      	str	r1, [r3, #0]
		GPIOA->BRR = GPIO_PIN_7;
 80030da:	2180      	movs	r1, #128	; 0x80
 80030dc:	6299      	str	r1, [r3, #40]	; 0x28
 80030de:	46a4      	mov	ip, r4
 80030e0:	4689      	mov	r9, r1
 80030e2:	4c66      	ldr	r4, [pc, #408]	; (800327c <allOff+0x22c>)
 80030e4:	6819      	ldr	r1, [r3, #0]
 80030e6:	46a0      	mov	r8, r4
 80030e8:	4021      	ands	r1, r4
 80030ea:	2480      	movs	r4, #128	; 0x80
 80030ec:	0264      	lsls	r4, r4, #9
 80030ee:	4321      	orrs	r1, r4
 80030f0:	6019      	str	r1, [r3, #0]
		GPIOA->BRR = GPIO_PIN_8;
 80030f2:	2180      	movs	r1, #128	; 0x80
 80030f4:	0049      	lsls	r1, r1, #1
 80030f6:	46a2      	mov	sl, r4
 80030f8:	6299      	str	r1, [r3, #40]	; 0x28
	if (newPhase == lowside) {              // lowside
 80030fa:	42b2      	cmp	r2, r6
 80030fc:	d10d      	bne.n	800311a <allOff+0xca>
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	4644      	mov	r4, r8
 8003102:	4017      	ands	r7, r2
 8003104:	4662      	mov	r2, ip
 8003106:	433a      	orrs	r2, r7
 8003108:	601a      	str	r2, [r3, #0]
		GPIOA->BSRR = GPIO_PIN_7;
 800310a:	464a      	mov	r2, r9
 800310c:	619a      	str	r2, [r3, #24]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	4022      	ands	r2, r4
 8003112:	4654      	mov	r4, sl
 8003114:	4314      	orrs	r4, r2
 8003116:	601c      	str	r4, [r3, #0]
		GPIOA->BRR = GPIO_PIN_8;
 8003118:	6299      	str	r1, [r3, #40]	; 0x28
	if (newPhase == pwm) {
 800311a:	42a8      	cmp	r0, r5
 800311c:	d031      	beq.n	8003182 <allOff+0x132>
 800311e:	210c      	movs	r1, #12
 8003120:	4a52      	ldr	r2, [pc, #328]	; (800326c <allOff+0x21c>)
 8003122:	6813      	ldr	r3, [r2, #0]
 8003124:	438b      	bics	r3, r1
 8003126:	3908      	subs	r1, #8
 8003128:	430b      	orrs	r3, r1
 800312a:	6013      	str	r3, [r2, #0]
		GPIOB->BRR = GPIO_PIN_1;
 800312c:	2302      	movs	r3, #2
 800312e:	6293      	str	r3, [r2, #40]	; 0x28
 8003130:	2390      	movs	r3, #144	; 0x90
 8003132:	05db      	lsls	r3, r3, #23
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	4952      	ldr	r1, [pc, #328]	; (8003280 <allOff+0x230>)
 8003138:	4011      	ands	r1, r2
 800313a:	2280      	movs	r2, #128	; 0x80
 800313c:	0352      	lsls	r2, r2, #13
 800313e:	430a      	orrs	r2, r1
 8003140:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_10;
 8003142:	2280      	movs	r2, #128	; 0x80
 8003144:	00d2      	lsls	r2, r2, #3
 8003146:	629a      	str	r2, [r3, #40]	; 0x28
	if (newPhase == lowside) {
 8003148:	42ae      	cmp	r6, r5
 800314a:	d114      	bne.n	8003176 <allOff+0x126>
 800314c:	210c      	movs	r1, #12
 800314e:	4a47      	ldr	r2, [pc, #284]	; (800326c <allOff+0x21c>)
 8003150:	6813      	ldr	r3, [r2, #0]
 8003152:	438b      	bics	r3, r1
 8003154:	3908      	subs	r1, #8
 8003156:	430b      	orrs	r3, r1
 8003158:	6013      	str	r3, [r2, #0]
		GPIOB->BSRR = GPIO_PIN_1;
 800315a:	2302      	movs	r3, #2
 800315c:	6193      	str	r3, [r2, #24]
 800315e:	2390      	movs	r3, #144	; 0x90
 8003160:	05db      	lsls	r3, r3, #23
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	4946      	ldr	r1, [pc, #280]	; (8003280 <allOff+0x230>)
 8003166:	4011      	ands	r1, r2
 8003168:	2280      	movs	r2, #128	; 0x80
 800316a:	0352      	lsls	r2, r2, #13
 800316c:	430a      	orrs	r2, r1
 800316e:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_10;
 8003170:	2280      	movs	r2, #128	; 0x80
 8003172:	00d2      	lsls	r2, r2, #3
 8003174:	629a      	str	r2, [r3, #40]	; 0x28
	phaseB(floating);
	phaseC(floating);
}
 8003176:	bc3c      	pop	{r2, r3, r4, r5}
 8003178:	4690      	mov	r8, r2
 800317a:	4699      	mov	r9, r3
 800317c:	46a2      	mov	sl, r4
 800317e:	46ab      	mov	fp, r5
 8003180:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!slow_decay || prop_brake_active){
 8003182:	4b40      	ldr	r3, [pc, #256]	; (8003284 <allOff+0x234>)
 8003184:	4a39      	ldr	r2, [pc, #228]	; (800326c <allOff+0x21c>)
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d15f      	bne.n	800324c <allOff+0x1fc>
 800318c:	210c      	movs	r1, #12
 800318e:	6813      	ldr	r3, [r2, #0]
 8003190:	438b      	bics	r3, r1
 8003192:	3908      	subs	r1, #8
 8003194:	430b      	orrs	r3, r1
 8003196:	6013      	str	r3, [r2, #0]
			GPIOB->BRR = GPIO_PIN_1;
 8003198:	2302      	movs	r3, #2
 800319a:	6293      	str	r3, [r2, #40]	; 0x28
 800319c:	2190      	movs	r1, #144	; 0x90
 800319e:	05c9      	lsls	r1, r1, #23
 80031a0:	680b      	ldr	r3, [r1, #0]
 80031a2:	4a37      	ldr	r2, [pc, #220]	; (8003280 <allOff+0x230>)
 80031a4:	401a      	ands	r2, r3
 80031a6:	2380      	movs	r3, #128	; 0x80
 80031a8:	039b      	lsls	r3, r3, #14
 80031aa:	4313      	orrs	r3, r2
 80031ac:	600b      	str	r3, [r1, #0]
	if (newPhase == floating) {
 80031ae:	465b      	mov	r3, fp
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	42ab      	cmp	r3, r5
 80031b4:	d1c8      	bne.n	8003148 <allOff+0xf8>
 80031b6:	e7b2      	b.n	800311e <allOff+0xce>
		if (!slow_decay || prop_brake_active){
 80031b8:	4b32      	ldr	r3, [pc, #200]	; (8003284 <allOff+0x234>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d137      	bne.n	8003230 <allOff+0x1e0>
 80031c0:	2390      	movs	r3, #144	; 0x90
 80031c2:	05db      	lsls	r3, r3, #23
 80031c4:	6819      	ldr	r1, [r3, #0]
 80031c6:	4d2c      	ldr	r5, [pc, #176]	; (8003278 <allOff+0x228>)
 80031c8:	400d      	ands	r5, r1
 80031ca:	2180      	movs	r1, #128	; 0x80
 80031cc:	01c9      	lsls	r1, r1, #7
 80031ce:	4329      	orrs	r1, r5
 80031d0:	6019      	str	r1, [r3, #0]
			GPIOA->BRR = GPIO_PIN_7;
 80031d2:	2180      	movs	r1, #128	; 0x80
 80031d4:	6299      	str	r1, [r3, #40]	; 0x28
 80031d6:	2590      	movs	r5, #144	; 0x90
 80031d8:	05ed      	lsls	r5, r5, #23
 80031da:	682b      	ldr	r3, [r5, #0]
 80031dc:	4927      	ldr	r1, [pc, #156]	; (800327c <allOff+0x22c>)
 80031de:	4019      	ands	r1, r3
 80031e0:	2380      	movs	r3, #128	; 0x80
 80031e2:	029b      	lsls	r3, r3, #10
 80031e4:	430b      	orrs	r3, r1
 80031e6:	602b      	str	r3, [r5, #0]
 80031e8:	0005      	movs	r5, r0
 80031ea:	0010      	movs	r0, r2
 80031ec:	e76c      	b.n	80030c8 <allOff+0x78>
		if(!slow_decay  || prop_brake_active){            // for future
 80031ee:	4b25      	ldr	r3, [pc, #148]	; (8003284 <allOff+0x234>)
 80031f0:	491e      	ldr	r1, [pc, #120]	; (800326c <allOff+0x21c>)
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d110      	bne.n	800321a <allOff+0x1ca>
 80031f8:	2503      	movs	r5, #3
 80031fa:	680b      	ldr	r3, [r1, #0]
 80031fc:	43ab      	bics	r3, r5
 80031fe:	3d02      	subs	r5, #2
 8003200:	432b      	orrs	r3, r5
 8003202:	600b      	str	r3, [r1, #0]
		GPIOB->BRR = GPIO_PIN_0;
 8003204:	628d      	str	r5, [r1, #40]	; 0x28
 8003206:	2590      	movs	r5, #144	; 0x90
 8003208:	05ed      	lsls	r5, r5, #23
 800320a:	682b      	ldr	r3, [r5, #0]
 800320c:	4918      	ldr	r1, [pc, #96]	; (8003270 <allOff+0x220>)
 800320e:	4019      	ands	r1, r3
 8003210:	2380      	movs	r3, #128	; 0x80
 8003212:	031b      	lsls	r3, r3, #12
 8003214:	430b      	orrs	r3, r1
 8003216:	602b      	str	r3, [r5, #0]
 8003218:	e728      	b.n	800306c <allOff+0x1c>
		if(!slow_decay  || prop_brake_active){            // for future
 800321a:	4b1b      	ldr	r3, [pc, #108]	; (8003288 <allOff+0x238>)
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1ea      	bne.n	80031f8 <allOff+0x1a8>
 8003222:	2503      	movs	r5, #3
 8003224:	680b      	ldr	r3, [r1, #0]
 8003226:	43ab      	bics	r3, r5
 8003228:	3d01      	subs	r5, #1
 800322a:	432b      	orrs	r3, r5
 800322c:	600b      	str	r3, [r1, #0]
 800322e:	e7ea      	b.n	8003206 <allOff+0x1b6>
		if (!slow_decay || prop_brake_active){
 8003230:	4b15      	ldr	r3, [pc, #84]	; (8003288 <allOff+0x238>)
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1c3      	bne.n	80031c0 <allOff+0x170>
 8003238:	2590      	movs	r5, #144	; 0x90
 800323a:	05ed      	lsls	r5, r5, #23
 800323c:	682b      	ldr	r3, [r5, #0]
 800323e:	490e      	ldr	r1, [pc, #56]	; (8003278 <allOff+0x228>)
 8003240:	4019      	ands	r1, r3
 8003242:	2380      	movs	r3, #128	; 0x80
 8003244:	021b      	lsls	r3, r3, #8
 8003246:	430b      	orrs	r3, r1
 8003248:	602b      	str	r3, [r5, #0]
 800324a:	e7c4      	b.n	80031d6 <allOff+0x186>
		if (!slow_decay || prop_brake_active){
 800324c:	4b0e      	ldr	r3, [pc, #56]	; (8003288 <allOff+0x238>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d19b      	bne.n	800318c <allOff+0x13c>
 8003254:	210c      	movs	r1, #12
 8003256:	6813      	ldr	r3, [r2, #0]
 8003258:	438b      	bics	r3, r1
 800325a:	3904      	subs	r1, #4
 800325c:	430b      	orrs	r3, r1
 800325e:	6013      	str	r3, [r2, #0]
 8003260:	e79c      	b.n	800319c <allOff+0x14c>
 8003262:	46c0      	nop			; (mov r8, r8)
 8003264:	2000001c 	.word	0x2000001c
 8003268:	20000030 	.word	0x20000030
 800326c:	48000400 	.word	0x48000400
 8003270:	fff3ffff 	.word	0xfff3ffff
 8003274:	20000028 	.word	0x20000028
 8003278:	ffff3fff 	.word	0xffff3fff
 800327c:	fffcffff 	.word	0xfffcffff
 8003280:	ffcfffff 	.word	0xffcfffff
 8003284:	2000003c 	.word	0x2000003c
 8003288:	20000123 	.word	0x20000123

0800328c <fullBrake>:

void fullBrake(){                     // full braking shorting all low sides
 800328c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (newPhase == pwm) {
 800328e:	4b8b      	ldr	r3, [pc, #556]	; (80034bc <fullBrake+0x230>)
	phaseA(lowside);
 8003290:	4d8b      	ldr	r5, [pc, #556]	; (80034c0 <fullBrake+0x234>)
	if (newPhase == pwm) {
 8003292:	681a      	ldr	r2, [r3, #0]
	phaseA(lowside);
 8003294:	6829      	ldr	r1, [r5, #0]
	if (newPhase == pwm) {
 8003296:	4291      	cmp	r1, r2
 8003298:	d100      	bne.n	800329c <fullBrake+0x10>
 800329a:	e0cd      	b.n	8003438 <fullBrake+0x1ac>
	if (newPhase == floating) {
 800329c:	4b89      	ldr	r3, [pc, #548]	; (80034c4 <fullBrake+0x238>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4299      	cmp	r1, r3
 80032a2:	d04a      	beq.n	800333a <fullBrake+0xae>
 80032a4:	2603      	movs	r6, #3
 80032a6:	4c88      	ldr	r4, [pc, #544]	; (80034c8 <fullBrake+0x23c>)
 80032a8:	6820      	ldr	r0, [r4, #0]
 80032aa:	43b0      	bics	r0, r6
 80032ac:	3e02      	subs	r6, #2
 80032ae:	4330      	orrs	r0, r6
 80032b0:	6020      	str	r0, [r4, #0]
 80032b2:	2090      	movs	r0, #144	; 0x90
		GPIOB->BSRR = GPIO_PIN_0;
 80032b4:	61a6      	str	r6, [r4, #24]
 80032b6:	05c0      	lsls	r0, r0, #23
 80032b8:	6804      	ldr	r4, [r0, #0]
 80032ba:	4e84      	ldr	r6, [pc, #528]	; (80034cc <fullBrake+0x240>)
 80032bc:	4026      	ands	r6, r4
 80032be:	2480      	movs	r4, #128	; 0x80
 80032c0:	02e4      	lsls	r4, r4, #11
 80032c2:	4334      	orrs	r4, r6
 80032c4:	6004      	str	r4, [r0, #0]
		GPIOA->BRR = GPIO_PIN_9;
 80032c6:	2480      	movs	r4, #128	; 0x80
 80032c8:	001e      	movs	r6, r3
 80032ca:	000b      	movs	r3, r1
 80032cc:	00a4      	lsls	r4, r4, #2
 80032ce:	6284      	str	r4, [r0, #40]	; 0x28
	if (newPhase == pwm) {  // pwm
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d100      	bne.n	80032d6 <fullBrake+0x4a>
 80032d4:	e092      	b.n	80033fc <fullBrake+0x170>
	if (newPhase == floating) {            // floating
 80032d6:	42b3      	cmp	r3, r6
 80032d8:	d100      	bne.n	80032dc <fullBrake+0x50>
 80032da:	e079      	b.n	80033d0 <fullBrake+0x144>
 80032dc:	2190      	movs	r1, #144	; 0x90
 80032de:	05c9      	lsls	r1, r1, #23
 80032e0:	6808      	ldr	r0, [r1, #0]
 80032e2:	4c7b      	ldr	r4, [pc, #492]	; (80034d0 <fullBrake+0x244>)
 80032e4:	4004      	ands	r4, r0
 80032e6:	2080      	movs	r0, #128	; 0x80
 80032e8:	01c0      	lsls	r0, r0, #7
 80032ea:	4320      	orrs	r0, r4
 80032ec:	6008      	str	r0, [r1, #0]
		GPIOA->BSRR = GPIO_PIN_7;
 80032ee:	2080      	movs	r0, #128	; 0x80
 80032f0:	6188      	str	r0, [r1, #24]
 80032f2:	6808      	ldr	r0, [r1, #0]
 80032f4:	4c77      	ldr	r4, [pc, #476]	; (80034d4 <fullBrake+0x248>)
 80032f6:	4004      	ands	r4, r0
 80032f8:	2080      	movs	r0, #128	; 0x80
 80032fa:	0240      	lsls	r0, r0, #9
 80032fc:	4320      	orrs	r0, r4
 80032fe:	6008      	str	r0, [r1, #0]
		GPIOA->BRR = GPIO_PIN_8;
 8003300:	2080      	movs	r0, #128	; 0x80
 8003302:	0040      	lsls	r0, r0, #1
 8003304:	6288      	str	r0, [r1, #40]	; 0x28
	if (newPhase == pwm) {
 8003306:	4293      	cmp	r3, r2
 8003308:	d030      	beq.n	800336c <fullBrake+0xe0>
	if (newPhase == floating) {
 800330a:	42b3      	cmp	r3, r6
 800330c:	d046      	beq.n	800339c <fullBrake+0x110>
 800330e:	210c      	movs	r1, #12
 8003310:	4a6d      	ldr	r2, [pc, #436]	; (80034c8 <fullBrake+0x23c>)
 8003312:	6813      	ldr	r3, [r2, #0]
 8003314:	438b      	bics	r3, r1
 8003316:	3908      	subs	r1, #8
 8003318:	430b      	orrs	r3, r1
 800331a:	6013      	str	r3, [r2, #0]
		GPIOB->BSRR = GPIO_PIN_1;
 800331c:	2302      	movs	r3, #2
 800331e:	6193      	str	r3, [r2, #24]
 8003320:	2390      	movs	r3, #144	; 0x90
 8003322:	05db      	lsls	r3, r3, #23
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	496c      	ldr	r1, [pc, #432]	; (80034d8 <fullBrake+0x24c>)
 8003328:	4011      	ands	r1, r2
 800332a:	2280      	movs	r2, #128	; 0x80
 800332c:	0352      	lsls	r2, r2, #13
 800332e:	430a      	orrs	r2, r1
 8003330:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_10;
 8003332:	2280      	movs	r2, #128	; 0x80
 8003334:	00d2      	lsls	r2, r2, #3
 8003336:	629a      	str	r2, [r3, #40]	; 0x28
	phaseB(lowside);
	phaseC(lowside);
}
 8003338:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (newPhase == floating) {
 800333a:	000e      	movs	r6, r1
 800333c:	2703      	movs	r7, #3
 800333e:	4c62      	ldr	r4, [pc, #392]	; (80034c8 <fullBrake+0x23c>)
 8003340:	6820      	ldr	r0, [r4, #0]
 8003342:	43b8      	bics	r0, r7
 8003344:	3f02      	subs	r7, #2
 8003346:	4338      	orrs	r0, r7
 8003348:	6020      	str	r0, [r4, #0]
 800334a:	2090      	movs	r0, #144	; 0x90
		GPIOB->BRR = GPIO_PIN_0;
 800334c:	62a7      	str	r7, [r4, #40]	; 0x28
 800334e:	05c0      	lsls	r0, r0, #23
 8003350:	6804      	ldr	r4, [r0, #0]
 8003352:	4f5e      	ldr	r7, [pc, #376]	; (80034cc <fullBrake+0x240>)
 8003354:	4027      	ands	r7, r4
 8003356:	2480      	movs	r4, #128	; 0x80
 8003358:	02e4      	lsls	r4, r4, #11
 800335a:	433c      	orrs	r4, r7
 800335c:	6004      	str	r4, [r0, #0]
		GPIOA->BRR = GPIO_PIN_9;
 800335e:	2480      	movs	r4, #128	; 0x80
 8003360:	00a4      	lsls	r4, r4, #2
 8003362:	6284      	str	r4, [r0, #40]	; 0x28
	if (newPhase == lowside) {          // low mosfet on
 8003364:	4299      	cmp	r1, r3
 8003366:	d1b3      	bne.n	80032d0 <fullBrake+0x44>
 8003368:	0033      	movs	r3, r6
 800336a:	e79b      	b.n	80032a4 <fullBrake+0x18>
		if (!slow_decay || prop_brake_active){
 800336c:	4a5b      	ldr	r2, [pc, #364]	; (80034dc <fullBrake+0x250>)
 800336e:	4956      	ldr	r1, [pc, #344]	; (80034c8 <fullBrake+0x23c>)
 8003370:	7812      	ldrb	r2, [r2, #0]
 8003372:	2a00      	cmp	r2, #0
 8003374:	d17d      	bne.n	8003472 <fullBrake+0x1e6>
 8003376:	200c      	movs	r0, #12
 8003378:	680a      	ldr	r2, [r1, #0]
 800337a:	4382      	bics	r2, r0
 800337c:	3808      	subs	r0, #8
 800337e:	4302      	orrs	r2, r0
 8003380:	600a      	str	r2, [r1, #0]
			GPIOB->BRR = GPIO_PIN_1;
 8003382:	2202      	movs	r2, #2
 8003384:	628a      	str	r2, [r1, #40]	; 0x28
 8003386:	2090      	movs	r0, #144	; 0x90
 8003388:	05c0      	lsls	r0, r0, #23
 800338a:	6802      	ldr	r2, [r0, #0]
 800338c:	4952      	ldr	r1, [pc, #328]	; (80034d8 <fullBrake+0x24c>)
 800338e:	4011      	ands	r1, r2
 8003390:	2280      	movs	r2, #128	; 0x80
 8003392:	0392      	lsls	r2, r2, #14
 8003394:	430a      	orrs	r2, r1
 8003396:	6002      	str	r2, [r0, #0]
	if (newPhase == floating) {
 8003398:	42b3      	cmp	r3, r6
 800339a:	d114      	bne.n	80033c6 <fullBrake+0x13a>
 800339c:	200c      	movs	r0, #12
 800339e:	494a      	ldr	r1, [pc, #296]	; (80034c8 <fullBrake+0x23c>)
 80033a0:	680a      	ldr	r2, [r1, #0]
 80033a2:	4382      	bics	r2, r0
 80033a4:	3808      	subs	r0, #8
 80033a6:	4302      	orrs	r2, r0
 80033a8:	600a      	str	r2, [r1, #0]
		GPIOB->BRR = GPIO_PIN_1;
 80033aa:	2202      	movs	r2, #2
 80033ac:	628a      	str	r2, [r1, #40]	; 0x28
 80033ae:	2290      	movs	r2, #144	; 0x90
 80033b0:	05d2      	lsls	r2, r2, #23
 80033b2:	6811      	ldr	r1, [r2, #0]
 80033b4:	4848      	ldr	r0, [pc, #288]	; (80034d8 <fullBrake+0x24c>)
 80033b6:	4008      	ands	r0, r1
 80033b8:	2180      	movs	r1, #128	; 0x80
 80033ba:	0349      	lsls	r1, r1, #13
 80033bc:	4301      	orrs	r1, r0
 80033be:	6011      	str	r1, [r2, #0]
		GPIOA->BRR = GPIO_PIN_10;
 80033c0:	2180      	movs	r1, #128	; 0x80
 80033c2:	00c9      	lsls	r1, r1, #3
 80033c4:	6291      	str	r1, [r2, #40]	; 0x28
	if (newPhase == lowside) {
 80033c6:	682a      	ldr	r2, [r5, #0]
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d1b5      	bne.n	8003338 <fullBrake+0xac>
 80033cc:	e79f      	b.n	800330e <fullBrake+0x82>
	if (newPhase == floating) {            // floating
 80033ce:	000a      	movs	r2, r1
 80033d0:	2190      	movs	r1, #144	; 0x90
 80033d2:	05c9      	lsls	r1, r1, #23
 80033d4:	6808      	ldr	r0, [r1, #0]
 80033d6:	4c3e      	ldr	r4, [pc, #248]	; (80034d0 <fullBrake+0x244>)
 80033d8:	4004      	ands	r4, r0
 80033da:	2080      	movs	r0, #128	; 0x80
 80033dc:	01c0      	lsls	r0, r0, #7
 80033de:	4320      	orrs	r0, r4
 80033e0:	6008      	str	r0, [r1, #0]
		GPIOA->BRR = GPIO_PIN_7;
 80033e2:	2080      	movs	r0, #128	; 0x80
 80033e4:	6288      	str	r0, [r1, #40]	; 0x28
 80033e6:	6808      	ldr	r0, [r1, #0]
 80033e8:	4c3a      	ldr	r4, [pc, #232]	; (80034d4 <fullBrake+0x248>)
 80033ea:	4004      	ands	r4, r0
 80033ec:	2080      	movs	r0, #128	; 0x80
 80033ee:	0240      	lsls	r0, r0, #9
 80033f0:	4320      	orrs	r0, r4
 80033f2:	6008      	str	r0, [r1, #0]
		GPIOA->BRR = GPIO_PIN_8;
 80033f4:	2080      	movs	r0, #128	; 0x80
 80033f6:	0040      	lsls	r0, r0, #1
 80033f8:	6288      	str	r0, [r1, #40]	; 0x28
 80033fa:	e76f      	b.n	80032dc <fullBrake+0x50>
		if (!slow_decay || prop_brake_active){
 80033fc:	4937      	ldr	r1, [pc, #220]	; (80034dc <fullBrake+0x250>)
 80033fe:	7809      	ldrb	r1, [r1, #0]
 8003400:	2900      	cmp	r1, #0
 8003402:	d14d      	bne.n	80034a0 <fullBrake+0x214>
 8003404:	2190      	movs	r1, #144	; 0x90
 8003406:	05c9      	lsls	r1, r1, #23
 8003408:	6808      	ldr	r0, [r1, #0]
 800340a:	4c31      	ldr	r4, [pc, #196]	; (80034d0 <fullBrake+0x244>)
 800340c:	4004      	ands	r4, r0
 800340e:	2080      	movs	r0, #128	; 0x80
 8003410:	01c0      	lsls	r0, r0, #7
 8003412:	4320      	orrs	r0, r4
 8003414:	6008      	str	r0, [r1, #0]
			GPIOA->BRR = GPIO_PIN_7;
 8003416:	2080      	movs	r0, #128	; 0x80
 8003418:	6288      	str	r0, [r1, #40]	; 0x28
 800341a:	2490      	movs	r4, #144	; 0x90
 800341c:	05e4      	lsls	r4, r4, #23
 800341e:	6821      	ldr	r1, [r4, #0]
 8003420:	482c      	ldr	r0, [pc, #176]	; (80034d4 <fullBrake+0x248>)
 8003422:	4008      	ands	r0, r1
 8003424:	2180      	movs	r1, #128	; 0x80
 8003426:	0289      	lsls	r1, r1, #10
 8003428:	4301      	orrs	r1, r0
 800342a:	6021      	str	r1, [r4, #0]
	if (newPhase == floating) {            // floating
 800342c:	0019      	movs	r1, r3
 800342e:	0013      	movs	r3, r2
 8003430:	42b2      	cmp	r2, r6
 8003432:	d0cc      	beq.n	80033ce <fullBrake+0x142>
 8003434:	000a      	movs	r2, r1
 8003436:	e751      	b.n	80032dc <fullBrake+0x50>
		if(!slow_decay  || prop_brake_active){            // for future
 8003438:	4b28      	ldr	r3, [pc, #160]	; (80034dc <fullBrake+0x250>)
 800343a:	4823      	ldr	r0, [pc, #140]	; (80034c8 <fullBrake+0x23c>)
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d123      	bne.n	800348a <fullBrake+0x1fe>
 8003442:	2403      	movs	r4, #3
 8003444:	6803      	ldr	r3, [r0, #0]
 8003446:	43a3      	bics	r3, r4
 8003448:	3c02      	subs	r4, #2
 800344a:	4323      	orrs	r3, r4
 800344c:	6003      	str	r3, [r0, #0]
		GPIOB->BRR = GPIO_PIN_0;
 800344e:	6284      	str	r4, [r0, #40]	; 0x28
 8003450:	2490      	movs	r4, #144	; 0x90
 8003452:	05e4      	lsls	r4, r4, #23
 8003454:	6823      	ldr	r3, [r4, #0]
 8003456:	481d      	ldr	r0, [pc, #116]	; (80034cc <fullBrake+0x240>)
 8003458:	4018      	ands	r0, r3
 800345a:	2380      	movs	r3, #128	; 0x80
 800345c:	031b      	lsls	r3, r3, #12
 800345e:	4303      	orrs	r3, r0
 8003460:	6023      	str	r3, [r4, #0]
	if (newPhase == floating) {
 8003462:	4b18      	ldr	r3, [pc, #96]	; (80034c4 <fullBrake+0x238>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	429a      	cmp	r2, r3
 8003468:	d000      	beq.n	800346c <fullBrake+0x1e0>
 800346a:	e71b      	b.n	80032a4 <fullBrake+0x18>
 800346c:	0016      	movs	r6, r2
 800346e:	000b      	movs	r3, r1
 8003470:	e764      	b.n	800333c <fullBrake+0xb0>
		if (!slow_decay || prop_brake_active){
 8003472:	4a1b      	ldr	r2, [pc, #108]	; (80034e0 <fullBrake+0x254>)
 8003474:	7812      	ldrb	r2, [r2, #0]
 8003476:	2a00      	cmp	r2, #0
 8003478:	d000      	beq.n	800347c <fullBrake+0x1f0>
 800347a:	e77c      	b.n	8003376 <fullBrake+0xea>
 800347c:	200c      	movs	r0, #12
 800347e:	680a      	ldr	r2, [r1, #0]
 8003480:	4382      	bics	r2, r0
 8003482:	3804      	subs	r0, #4
 8003484:	4302      	orrs	r2, r0
 8003486:	600a      	str	r2, [r1, #0]
 8003488:	e77d      	b.n	8003386 <fullBrake+0xfa>
		if(!slow_decay  || prop_brake_active){            // for future
 800348a:	4b15      	ldr	r3, [pc, #84]	; (80034e0 <fullBrake+0x254>)
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1d7      	bne.n	8003442 <fullBrake+0x1b6>
 8003492:	2403      	movs	r4, #3
 8003494:	6803      	ldr	r3, [r0, #0]
 8003496:	43a3      	bics	r3, r4
 8003498:	3c01      	subs	r4, #1
 800349a:	4323      	orrs	r3, r4
 800349c:	6003      	str	r3, [r0, #0]
 800349e:	e7d7      	b.n	8003450 <fullBrake+0x1c4>
		if (!slow_decay || prop_brake_active){
 80034a0:	490f      	ldr	r1, [pc, #60]	; (80034e0 <fullBrake+0x254>)
 80034a2:	7809      	ldrb	r1, [r1, #0]
 80034a4:	2900      	cmp	r1, #0
 80034a6:	d1ad      	bne.n	8003404 <fullBrake+0x178>
 80034a8:	2490      	movs	r4, #144	; 0x90
 80034aa:	05e4      	lsls	r4, r4, #23
 80034ac:	6821      	ldr	r1, [r4, #0]
 80034ae:	4808      	ldr	r0, [pc, #32]	; (80034d0 <fullBrake+0x244>)
 80034b0:	4008      	ands	r0, r1
 80034b2:	2180      	movs	r1, #128	; 0x80
 80034b4:	0209      	lsls	r1, r1, #8
 80034b6:	4301      	orrs	r1, r0
 80034b8:	6021      	str	r1, [r4, #0]
 80034ba:	e7ae      	b.n	800341a <fullBrake+0x18e>
 80034bc:	20000030 	.word	0x20000030
 80034c0:	20000028 	.word	0x20000028
 80034c4:	2000001c 	.word	0x2000001c
 80034c8:	48000400 	.word	0x48000400
 80034cc:	fff3ffff 	.word	0xfff3ffff
 80034d0:	ffff3fff 	.word	0xffff3fff
 80034d4:	fffcffff 	.word	0xfffcffff
 80034d8:	ffcfffff 	.word	0xffcfffff
 80034dc:	2000003c 	.word	0x2000003c
 80034e0:	20000123 	.word	0x20000123

080034e4 <proBrake>:

void proBrake(){                    // duty cycle controls braking strength
 80034e4:	b5f0      	push	{r4, r5, r6, r7, lr}
		if(!slow_decay  || prop_brake_active){            // for future
 80034e6:	4a78      	ldr	r2, [pc, #480]	; (80036c8 <proBrake+0x1e4>)
//	prop_brake_active = 1;       // will turn off lower fets so only high side is active
	phaseA(pwm);
 80034e8:	4b78      	ldr	r3, [pc, #480]	; (80036cc <proBrake+0x1e8>)
		if(!slow_decay  || prop_brake_active){            // for future
 80034ea:	7814      	ldrb	r4, [r2, #0]
	phaseA(pwm);
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4978      	ldr	r1, [pc, #480]	; (80036d0 <proBrake+0x1ec>)
		if(!slow_decay  || prop_brake_active){            // for future
 80034f0:	2c00      	cmp	r4, #0
 80034f2:	d004      	beq.n	80034fe <proBrake+0x1a>
 80034f4:	4a77      	ldr	r2, [pc, #476]	; (80036d4 <proBrake+0x1f0>)
 80034f6:	7812      	ldrb	r2, [r2, #0]
 80034f8:	2a00      	cmp	r2, #0
 80034fa:	d100      	bne.n	80034fe <proBrake+0x1a>
 80034fc:	e0dd      	b.n	80036ba <proBrake+0x1d6>
 80034fe:	2003      	movs	r0, #3
 8003500:	680a      	ldr	r2, [r1, #0]
 8003502:	4382      	bics	r2, r0
 8003504:	3802      	subs	r0, #2
 8003506:	4302      	orrs	r2, r0
 8003508:	600a      	str	r2, [r1, #0]
		GPIOB->BRR = GPIO_PIN_0;
 800350a:	6288      	str	r0, [r1, #40]	; 0x28
 800350c:	2590      	movs	r5, #144	; 0x90
 800350e:	2280      	movs	r2, #128	; 0x80
 8003510:	05ed      	lsls	r5, r5, #23
 8003512:	6829      	ldr	r1, [r5, #0]
 8003514:	4e70      	ldr	r6, [pc, #448]	; (80036d8 <proBrake+0x1f4>)
 8003516:	0312      	lsls	r2, r2, #12
 8003518:	4031      	ands	r1, r6
 800351a:	430a      	orrs	r2, r1
 800351c:	602a      	str	r2, [r5, #0]
	if (newPhase == floating) {
 800351e:	4a6f      	ldr	r2, [pc, #444]	; (80036dc <proBrake+0x1f8>)
 8003520:	6810      	ldr	r0, [r2, #0]
 8003522:	4283      	cmp	r3, r0
 8003524:	d100      	bne.n	8003528 <proBrake+0x44>
 8003526:	e07e      	b.n	8003626 <proBrake+0x142>
	if (newPhase == lowside) {          // low mosfet on
 8003528:	4a6d      	ldr	r2, [pc, #436]	; (80036e0 <proBrake+0x1fc>)
 800352a:	6811      	ldr	r1, [r2, #0]
 800352c:	428b      	cmp	r3, r1
 800352e:	d113      	bne.n	8003558 <proBrake+0x74>
 8003530:	2603      	movs	r6, #3
 8003532:	4d67      	ldr	r5, [pc, #412]	; (80036d0 <proBrake+0x1ec>)
 8003534:	682a      	ldr	r2, [r5, #0]
 8003536:	43b2      	bics	r2, r6
 8003538:	3e02      	subs	r6, #2
 800353a:	4332      	orrs	r2, r6
 800353c:	602a      	str	r2, [r5, #0]
 800353e:	2290      	movs	r2, #144	; 0x90
		GPIOB->BSRR = GPIO_PIN_0;
 8003540:	61ae      	str	r6, [r5, #24]
 8003542:	05d2      	lsls	r2, r2, #23
 8003544:	6815      	ldr	r5, [r2, #0]
 8003546:	4e64      	ldr	r6, [pc, #400]	; (80036d8 <proBrake+0x1f4>)
 8003548:	402e      	ands	r6, r5
 800354a:	2580      	movs	r5, #128	; 0x80
 800354c:	02ed      	lsls	r5, r5, #11
 800354e:	4335      	orrs	r5, r6
 8003550:	6015      	str	r5, [r2, #0]
		GPIOA->BRR = GPIO_PIN_9;
 8003552:	2580      	movs	r5, #128	; 0x80
 8003554:	00ad      	lsls	r5, r5, #2
 8003556:	6295      	str	r5, [r2, #40]	; 0x28
		if (!slow_decay || prop_brake_active){
 8003558:	2c00      	cmp	r4, #0
 800355a:	d004      	beq.n	8003566 <proBrake+0x82>
 800355c:	4a5d      	ldr	r2, [pc, #372]	; (80036d4 <proBrake+0x1f0>)
 800355e:	7812      	ldrb	r2, [r2, #0]
 8003560:	2a00      	cmp	r2, #0
 8003562:	d100      	bne.n	8003566 <proBrake+0x82>
 8003564:	e09f      	b.n	80036a6 <proBrake+0x1c2>
 8003566:	2290      	movs	r2, #144	; 0x90
 8003568:	05d2      	lsls	r2, r2, #23
 800356a:	6815      	ldr	r5, [r2, #0]
 800356c:	4e5d      	ldr	r6, [pc, #372]	; (80036e4 <proBrake+0x200>)
 800356e:	402e      	ands	r6, r5
 8003570:	2580      	movs	r5, #128	; 0x80
 8003572:	01ed      	lsls	r5, r5, #7
 8003574:	4335      	orrs	r5, r6
 8003576:	6015      	str	r5, [r2, #0]
			GPIOA->BRR = GPIO_PIN_7;
 8003578:	2580      	movs	r5, #128	; 0x80
 800357a:	6295      	str	r5, [r2, #40]	; 0x28
 800357c:	2290      	movs	r2, #144	; 0x90
 800357e:	2580      	movs	r5, #128	; 0x80
 8003580:	05d2      	lsls	r2, r2, #23
 8003582:	6816      	ldr	r6, [r2, #0]
 8003584:	4f58      	ldr	r7, [pc, #352]	; (80036e8 <proBrake+0x204>)
 8003586:	02ad      	lsls	r5, r5, #10
 8003588:	403e      	ands	r6, r7
 800358a:	4335      	orrs	r5, r6
 800358c:	6015      	str	r5, [r2, #0]
	if (newPhase == floating) {            // floating
 800358e:	4283      	cmp	r3, r0
 8003590:	d100      	bne.n	8003594 <proBrake+0xb0>
 8003592:	e06d      	b.n	8003670 <proBrake+0x18c>
	if (newPhase == lowside) {              // lowside
 8003594:	428b      	cmp	r3, r1
 8003596:	d114      	bne.n	80035c2 <proBrake+0xde>
 8003598:	2290      	movs	r2, #144	; 0x90
 800359a:	05d2      	lsls	r2, r2, #23
 800359c:	6815      	ldr	r5, [r2, #0]
 800359e:	4e51      	ldr	r6, [pc, #324]	; (80036e4 <proBrake+0x200>)
 80035a0:	402e      	ands	r6, r5
 80035a2:	2580      	movs	r5, #128	; 0x80
 80035a4:	01ed      	lsls	r5, r5, #7
 80035a6:	4335      	orrs	r5, r6
 80035a8:	6015      	str	r5, [r2, #0]
		GPIOA->BSRR = GPIO_PIN_7;
 80035aa:	2580      	movs	r5, #128	; 0x80
 80035ac:	6195      	str	r5, [r2, #24]
 80035ae:	6815      	ldr	r5, [r2, #0]
 80035b0:	4e4d      	ldr	r6, [pc, #308]	; (80036e8 <proBrake+0x204>)
 80035b2:	402e      	ands	r6, r5
 80035b4:	2580      	movs	r5, #128	; 0x80
 80035b6:	026d      	lsls	r5, r5, #9
 80035b8:	4335      	orrs	r5, r6
 80035ba:	6015      	str	r5, [r2, #0]
		GPIOA->BRR = GPIO_PIN_8;
 80035bc:	2580      	movs	r5, #128	; 0x80
 80035be:	006d      	lsls	r5, r5, #1
 80035c0:	6295      	str	r5, [r2, #40]	; 0x28
		if (!slow_decay || prop_brake_active){
 80035c2:	2c00      	cmp	r4, #0
 80035c4:	d003      	beq.n	80035ce <proBrake+0xea>
 80035c6:	4a43      	ldr	r2, [pc, #268]	; (80036d4 <proBrake+0x1f0>)
 80035c8:	7812      	ldrb	r2, [r2, #0]
 80035ca:	2a00      	cmp	r2, #0
 80035cc:	d063      	beq.n	8003696 <proBrake+0x1b2>
 80035ce:	250c      	movs	r5, #12
 80035d0:	4c3f      	ldr	r4, [pc, #252]	; (80036d0 <proBrake+0x1ec>)
 80035d2:	6822      	ldr	r2, [r4, #0]
 80035d4:	43aa      	bics	r2, r5
 80035d6:	3d08      	subs	r5, #8
 80035d8:	432a      	orrs	r2, r5
 80035da:	6022      	str	r2, [r4, #0]
			GPIOB->BRR = GPIO_PIN_1;
 80035dc:	2202      	movs	r2, #2
 80035de:	62a2      	str	r2, [r4, #40]	; 0x28
 80035e0:	2590      	movs	r5, #144	; 0x90
 80035e2:	2280      	movs	r2, #128	; 0x80
 80035e4:	05ed      	lsls	r5, r5, #23
 80035e6:	682c      	ldr	r4, [r5, #0]
 80035e8:	4e40      	ldr	r6, [pc, #256]	; (80036ec <proBrake+0x208>)
 80035ea:	0392      	lsls	r2, r2, #14
 80035ec:	4034      	ands	r4, r6
 80035ee:	4322      	orrs	r2, r4
 80035f0:	602a      	str	r2, [r5, #0]
	if (newPhase == floating) {
 80035f2:	4283      	cmp	r3, r0
 80035f4:	d029      	beq.n	800364a <proBrake+0x166>
	if (newPhase == lowside) {
 80035f6:	428b      	cmp	r3, r1
 80035f8:	d114      	bne.n	8003624 <proBrake+0x140>
 80035fa:	210c      	movs	r1, #12
 80035fc:	4a34      	ldr	r2, [pc, #208]	; (80036d0 <proBrake+0x1ec>)
 80035fe:	6813      	ldr	r3, [r2, #0]
 8003600:	438b      	bics	r3, r1
 8003602:	3908      	subs	r1, #8
 8003604:	430b      	orrs	r3, r1
 8003606:	6013      	str	r3, [r2, #0]
		GPIOB->BSRR = GPIO_PIN_1;
 8003608:	2302      	movs	r3, #2
 800360a:	6193      	str	r3, [r2, #24]
 800360c:	2390      	movs	r3, #144	; 0x90
 800360e:	05db      	lsls	r3, r3, #23
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	4936      	ldr	r1, [pc, #216]	; (80036ec <proBrake+0x208>)
 8003614:	4011      	ands	r1, r2
 8003616:	2280      	movs	r2, #128	; 0x80
 8003618:	0352      	lsls	r2, r2, #13
 800361a:	430a      	orrs	r2, r1
 800361c:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_10;
 800361e:	2280      	movs	r2, #128	; 0x80
 8003620:	00d2      	lsls	r2, r2, #3
 8003622:	629a      	str	r2, [r3, #40]	; 0x28
	phaseB(pwm);
	phaseC(pwm);
}
 8003624:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003626:	2703      	movs	r7, #3
 8003628:	4929      	ldr	r1, [pc, #164]	; (80036d0 <proBrake+0x1ec>)
 800362a:	680a      	ldr	r2, [r1, #0]
 800362c:	43ba      	bics	r2, r7
 800362e:	3f02      	subs	r7, #2
 8003630:	433a      	orrs	r2, r7
 8003632:	600a      	str	r2, [r1, #0]
		GPIOB->BRR = GPIO_PIN_0;
 8003634:	628f      	str	r7, [r1, #40]	; 0x28
 8003636:	682a      	ldr	r2, [r5, #0]
 8003638:	4032      	ands	r2, r6
 800363a:	2680      	movs	r6, #128	; 0x80
 800363c:	02f6      	lsls	r6, r6, #11
 800363e:	4316      	orrs	r6, r2
		GPIOA->BRR = GPIO_PIN_9;
 8003640:	2280      	movs	r2, #128	; 0x80
 8003642:	0092      	lsls	r2, r2, #2
 8003644:	602e      	str	r6, [r5, #0]
 8003646:	62aa      	str	r2, [r5, #40]	; 0x28
 8003648:	e76e      	b.n	8003528 <proBrake+0x44>
 800364a:	240c      	movs	r4, #12
 800364c:	4820      	ldr	r0, [pc, #128]	; (80036d0 <proBrake+0x1ec>)
 800364e:	6802      	ldr	r2, [r0, #0]
 8003650:	43a2      	bics	r2, r4
 8003652:	3c08      	subs	r4, #8
 8003654:	4322      	orrs	r2, r4
 8003656:	6002      	str	r2, [r0, #0]
		GPIOB->BRR = GPIO_PIN_1;
 8003658:	2202      	movs	r2, #2
 800365a:	6282      	str	r2, [r0, #40]	; 0x28
 800365c:	682a      	ldr	r2, [r5, #0]
 800365e:	4032      	ands	r2, r6
 8003660:	2680      	movs	r6, #128	; 0x80
 8003662:	0376      	lsls	r6, r6, #13
 8003664:	4316      	orrs	r6, r2
		GPIOA->BRR = GPIO_PIN_10;
 8003666:	2280      	movs	r2, #128	; 0x80
 8003668:	00d2      	lsls	r2, r2, #3
 800366a:	602e      	str	r6, [r5, #0]
 800366c:	62aa      	str	r2, [r5, #40]	; 0x28
 800366e:	e7c2      	b.n	80035f6 <proBrake+0x112>
 8003670:	6815      	ldr	r5, [r2, #0]
 8003672:	4e1c      	ldr	r6, [pc, #112]	; (80036e4 <proBrake+0x200>)
 8003674:	402e      	ands	r6, r5
 8003676:	2580      	movs	r5, #128	; 0x80
 8003678:	01ed      	lsls	r5, r5, #7
 800367a:	4335      	orrs	r5, r6
 800367c:	6015      	str	r5, [r2, #0]
		GPIOA->BRR = GPIO_PIN_7;
 800367e:	2580      	movs	r5, #128	; 0x80
 8003680:	6295      	str	r5, [r2, #40]	; 0x28
 8003682:	6815      	ldr	r5, [r2, #0]
 8003684:	403d      	ands	r5, r7
 8003686:	2780      	movs	r7, #128	; 0x80
 8003688:	027f      	lsls	r7, r7, #9
 800368a:	432f      	orrs	r7, r5
		GPIOA->BRR = GPIO_PIN_8;
 800368c:	2580      	movs	r5, #128	; 0x80
 800368e:	006d      	lsls	r5, r5, #1
 8003690:	6017      	str	r7, [r2, #0]
 8003692:	6295      	str	r5, [r2, #40]	; 0x28
 8003694:	e77e      	b.n	8003594 <proBrake+0xb0>
 8003696:	250c      	movs	r5, #12
 8003698:	4c0d      	ldr	r4, [pc, #52]	; (80036d0 <proBrake+0x1ec>)
 800369a:	6822      	ldr	r2, [r4, #0]
 800369c:	43aa      	bics	r2, r5
 800369e:	3d04      	subs	r5, #4
 80036a0:	432a      	orrs	r2, r5
 80036a2:	6022      	str	r2, [r4, #0]
 80036a4:	e79c      	b.n	80035e0 <proBrake+0xfc>
 80036a6:	2690      	movs	r6, #144	; 0x90
 80036a8:	05f6      	lsls	r6, r6, #23
 80036aa:	6832      	ldr	r2, [r6, #0]
 80036ac:	4d0d      	ldr	r5, [pc, #52]	; (80036e4 <proBrake+0x200>)
 80036ae:	4015      	ands	r5, r2
 80036b0:	2280      	movs	r2, #128	; 0x80
 80036b2:	0212      	lsls	r2, r2, #8
 80036b4:	432a      	orrs	r2, r5
 80036b6:	6032      	str	r2, [r6, #0]
 80036b8:	e760      	b.n	800357c <proBrake+0x98>
 80036ba:	2003      	movs	r0, #3
 80036bc:	680a      	ldr	r2, [r1, #0]
 80036be:	4382      	bics	r2, r0
 80036c0:	3801      	subs	r0, #1
 80036c2:	4302      	orrs	r2, r0
 80036c4:	600a      	str	r2, [r1, #0]
 80036c6:	e721      	b.n	800350c <proBrake+0x28>
 80036c8:	2000003c 	.word	0x2000003c
 80036cc:	20000030 	.word	0x20000030
 80036d0:	48000400 	.word	0x48000400
 80036d4:	20000123 	.word	0x20000123
 80036d8:	fff3ffff 	.word	0xfff3ffff
 80036dc:	2000001c 	.word	0x2000001c
 80036e0:	20000028 	.word	0x20000028
 80036e4:	ffff3fff 	.word	0xffff3fff
 80036e8:	fffcffff 	.word	0xfffcffff
 80036ec:	ffcfffff 	.word	0xffcfffff

080036f0 <commutate>:
}


void commutate() {

	if (forward == 1){
 80036f0:	4b3e      	ldr	r3, [pc, #248]	; (80037ec <commutate+0xfc>)
void commutate() {
 80036f2:	b570      	push	{r4, r5, r6, lr}
	if (forward == 1){
 80036f4:	681a      	ldr	r2, [r3, #0]
		step++;
 80036f6:	4c3e      	ldr	r4, [pc, #248]	; (80037f0 <commutate+0x100>)
 80036f8:	6823      	ldr	r3, [r4, #0]
	if (forward == 1){
 80036fa:	2a01      	cmp	r2, #1
 80036fc:	d04e      	beq.n	800379c <commutate+0xac>
		}
		if (step == 2 || step == 4 || step == 6) {
			rising = 0;
		}
	}
	if (forward == 0){
 80036fe:	2a00      	cmp	r2, #0
 8003700:	d023      	beq.n	800374a <commutate+0x5a>
 8003702:	4d3c      	ldr	r5, [pc, #240]	; (80037f4 <commutate+0x104>)
			rising = 1;
		}
	}


	if (input > 47){
 8003704:	4a3c      	ldr	r2, [pc, #240]	; (80037f8 <commutate+0x108>)
 8003706:	6812      	ldr	r2, [r2, #0]
 8003708:	2a2f      	cmp	r2, #47	; 0x2f
 800370a:	dd03      	ble.n	8003714 <commutate+0x24>
comStep(step);
 800370c:	0018      	movs	r0, r3
 800370e:	f7ff fc51 	bl	8002fb4 <comStep>
 8003712:	6823      	ldr	r3, [r4, #0]
		hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_IO1;
 8003714:	4839      	ldr	r0, [pc, #228]	; (80037fc <commutate+0x10c>)
	if (step == 1 || step == 4) {   // c floating
 8003716:	2b01      	cmp	r3, #1
 8003718:	d02f      	beq.n	800377a <commutate+0x8a>
 800371a:	2b04      	cmp	r3, #4
 800371c:	d02d      	beq.n	800377a <commutate+0x8a>
	if (step == 2 || step == 5) {     // a floating
 800371e:	2b02      	cmp	r3, #2
 8003720:	d028      	beq.n	8003774 <commutate+0x84>
 8003722:	2b05      	cmp	r3, #5
 8003724:	d026      	beq.n	8003774 <commutate+0x84>
	if (step == 3 || step == 6) {      // b floating
 8003726:	2b03      	cmp	r3, #3
 8003728:	d00c      	beq.n	8003744 <commutate+0x54>
 800372a:	2b06      	cmp	r3, #6
 800372c:	d00a      	beq.n	8003744 <commutate+0x54>
	if (rising){
 800372e:	682b      	ldr	r3, [r5, #0]
		hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_FALLING;   // polarity of comp output reversed
 8003730:	1e5a      	subs	r2, r3, #1
 8003732:	4193      	sbcs	r3, r2
 8003734:	3301      	adds	r3, #1
 8003736:	6203      	str	r3, [r0, #32]
	if (HAL_COMP_Init(&hcomp1) != HAL_OK) {
 8003738:	f7fd f844 	bl	80007c4 <HAL_COMP_Init>
 800373c:	2800      	cmp	r0, #0
 800373e:	d000      	beq.n	8003742 <commutate+0x52>
 8003740:	e7fe      	b.n	8003740 <commutate+0x50>
//	falseAlarm = 0;
//	compCount = 0;
//	upcompCount = 0;
//	TIM2->CNT = 0;
//	TIM2->ARR = commutation_interval;
}
 8003742:	bd70      	pop	{r4, r5, r6, pc}
		hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_DAC2;
 8003744:	2350      	movs	r3, #80	; 0x50
 8003746:	6043      	str	r3, [r0, #4]
 8003748:	e7f1      	b.n	800372e <commutate+0x3e>
		step--;
 800374a:	3b01      	subs	r3, #1
 800374c:	6023      	str	r3, [r4, #0]
		if (step < 1) {
 800374e:	2b00      	cmp	r3, #0
 8003750:	dd33      	ble.n	80037ba <commutate+0xca>
		if (step == 1 || step == 3 || step == 5) {
 8003752:	2202      	movs	r2, #2
 8003754:	0019      	movs	r1, r3
 8003756:	4391      	bics	r1, r2
 8003758:	2901      	cmp	r1, #1
 800375a:	d011      	beq.n	8003780 <commutate+0x90>
 800375c:	2b05      	cmp	r3, #5
 800375e:	d00f      	beq.n	8003780 <commutate+0x90>
 8003760:	2204      	movs	r2, #4
 8003762:	0019      	movs	r1, r3
 8003764:	4391      	bics	r1, r2
 8003766:	000a      	movs	r2, r1
 8003768:	4d22      	ldr	r5, [pc, #136]	; (80037f4 <commutate+0x104>)
		if (step == 2 || step == 4 || step == 6) {
 800376a:	2a02      	cmp	r2, #2
 800376c:	d111      	bne.n	8003792 <commutate+0xa2>
			rising = 1;
 800376e:	2201      	movs	r2, #1
 8003770:	602a      	str	r2, [r5, #0]
 8003772:	e7c7      	b.n	8003704 <commutate+0x14>
		hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1;                      /// if f051k6  step 2 , 5 is dac 1 ( swap comp input)
 8003774:	2240      	movs	r2, #64	; 0x40
 8003776:	6042      	str	r2, [r0, #4]
 8003778:	e7d5      	b.n	8003726 <commutate+0x36>
		hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_IO1;
 800377a:	2260      	movs	r2, #96	; 0x60
 800377c:	6042      	str	r2, [r0, #4]
 800377e:	e7ce      	b.n	800371e <commutate+0x2e>
			rising = 0;
 8003780:	2200      	movs	r2, #0
 8003782:	0019      	movs	r1, r3
 8003784:	4d1b      	ldr	r5, [pc, #108]	; (80037f4 <commutate+0x104>)
 8003786:	602a      	str	r2, [r5, #0]
 8003788:	3204      	adds	r2, #4
 800378a:	4391      	bics	r1, r2
 800378c:	000a      	movs	r2, r1
		if (step == 2 || step == 4 || step == 6) {
 800378e:	2a02      	cmp	r2, #2
 8003790:	d0ed      	beq.n	800376e <commutate+0x7e>
 8003792:	2b04      	cmp	r3, #4
 8003794:	d1b6      	bne.n	8003704 <commutate+0x14>
			rising = 1;
 8003796:	2201      	movs	r2, #1
 8003798:	602a      	str	r2, [r5, #0]
 800379a:	e7b3      	b.n	8003704 <commutate+0x14>
		step++;
 800379c:	3301      	adds	r3, #1
 800379e:	6023      	str	r3, [r4, #0]
		if (step > 6) {
 80037a0:	2b06      	cmp	r3, #6
 80037a2:	dd13      	ble.n	80037cc <commutate+0xdc>
		if (step == 1 || step == 3 || step == 5) {
 80037a4:	2301      	movs	r3, #1
			step = 1;
 80037a6:	6022      	str	r2, [r4, #0]
			rising = 1;                                // is back emf rising or falling
 80037a8:	2101      	movs	r1, #1
 80037aa:	4d12      	ldr	r5, [pc, #72]	; (80037f4 <commutate+0x104>)
 80037ac:	6029      	str	r1, [r5, #0]
		if (step == 2 || step == 4 || step == 6) {
 80037ae:	2a02      	cmp	r2, #2
 80037b0:	d009      	beq.n	80037c6 <commutate+0xd6>
 80037b2:	2b04      	cmp	r3, #4
 80037b4:	d007      	beq.n	80037c6 <commutate+0xd6>
 80037b6:	6823      	ldr	r3, [r4, #0]
 80037b8:	e7a4      	b.n	8003704 <commutate+0x14>
			step = 6;
 80037ba:	2306      	movs	r3, #6
			rising = 1;
 80037bc:	2201      	movs	r2, #1
 80037be:	4d0d      	ldr	r5, [pc, #52]	; (80037f4 <commutate+0x104>)
			step = 6;
 80037c0:	6023      	str	r3, [r4, #0]
			rising = 1;
 80037c2:	602a      	str	r2, [r5, #0]
 80037c4:	e79e      	b.n	8003704 <commutate+0x14>
			rising = 0;
 80037c6:	2300      	movs	r3, #0
 80037c8:	602b      	str	r3, [r5, #0]
 80037ca:	e7f4      	b.n	80037b6 <commutate+0xc6>
		if (step == 1 || step == 3 || step == 5) {
 80037cc:	2102      	movs	r1, #2
 80037ce:	0018      	movs	r0, r3
 80037d0:	4388      	bics	r0, r1
 80037d2:	2801      	cmp	r0, #1
 80037d4:	d007      	beq.n	80037e6 <commutate+0xf6>
 80037d6:	2b05      	cmp	r3, #5
 80037d8:	d0e6      	beq.n	80037a8 <commutate+0xb8>
 80037da:	2204      	movs	r2, #4
 80037dc:	0019      	movs	r1, r3
 80037de:	4391      	bics	r1, r2
 80037e0:	000a      	movs	r2, r1
 80037e2:	4d04      	ldr	r5, [pc, #16]	; (80037f4 <commutate+0x104>)
 80037e4:	e7e3      	b.n	80037ae <commutate+0xbe>
 80037e6:	001a      	movs	r2, r3
 80037e8:	e7de      	b.n	80037a8 <commutate+0xb8>
 80037ea:	46c0      	nop			; (mov r8, r8)
 80037ec:	20000020 	.word	0x20000020
 80037f0:	20000048 	.word	0x20000048
 80037f4:	20000034 	.word	0x20000034
 80037f8:	2000010c 	.word	0x2000010c
 80037fc:	200001f0 	.word	0x200001f0

08003800 <HAL_TIM_PeriodElapsedCallback>:
	if (htim->Instance == TIM2)

	{

			}
}
 8003800:	4770      	bx	lr
 8003802:	46c0      	nop			; (mov r8, r8)

08003804 <startMotor>:

void startMotor() {
 8003804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003806:	464f      	mov	r7, r9
 8003808:	46d6      	mov	lr, sl
 800380a:	4646      	mov	r6, r8
 800380c:	b5c0      	push	{r6, r7, lr}

    char decaystate = slow_decay;
 800380e:	4f56      	ldr	r7, [pc, #344]	; (8003968 <startMotor+0x164>)
 8003810:	783b      	ldrb	r3, [r7, #0]
 8003812:	469a      	mov	sl, r3
    sensorless = 0;
 8003814:	4b55      	ldr	r3, [pc, #340]	; (800396c <startMotor+0x168>)
 8003816:	4698      	mov	r8, r3
 8003818:	2300      	movs	r3, #0
 800381a:	4642      	mov	r2, r8
 800381c:	6013      	str	r3, [r2, #0]
	if (running == 0){
 800381e:	4b54      	ldr	r3, [pc, #336]	; (8003970 <startMotor+0x16c>)
 8003820:	4699      	mov	r9, r3
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00e      	beq.n	8003846 <startMotor+0x42>
			/* Initialization Error */
			Error_Handler();
		}
	}

	slow_decay = decaystate;    // return to normal
 8003828:	4653      	mov	r3, sl
	sensorless = 1;
 800382a:	4642      	mov	r2, r8
	slow_decay = decaystate;    // return to normal
 800382c:	703b      	strb	r3, [r7, #0]
	sensorless = 1;
 800382e:	2301      	movs	r3, #1
 8003830:	6013      	str	r3, [r2, #0]
	startupcountdown =0;
 8003832:	2300      	movs	r3, #0
 8003834:	4a4f      	ldr	r2, [pc, #316]	; (8003974 <startMotor+0x170>)
 8003836:	6013      	str	r3, [r2, #0]
	bemf_counts = 0;
 8003838:	4a4f      	ldr	r2, [pc, #316]	; (8003978 <startMotor+0x174>)
 800383a:	6013      	str	r3, [r2, #0]

}
 800383c:	bc1c      	pop	{r2, r3, r4}
 800383e:	4690      	mov	r8, r2
 8003840:	4699      	mov	r9, r3
 8003842:	46a2      	mov	sl, r4
 8003844:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_COMP_Stop_IT(&hcomp1);
 8003846:	4e4d      	ldr	r6, [pc, #308]	; (800397c <startMotor+0x178>)
 8003848:	0030      	movs	r0, r6
 800384a:	f7fd f85f 	bl	800090c <HAL_COMP_Stop_IT>
		slow_decay = 1;
 800384e:	2301      	movs	r3, #1
 8003850:	703b      	strb	r3, [r7, #0]
	if (forward == 1){
 8003852:	4b4b      	ldr	r3, [pc, #300]	; (8003980 <startMotor+0x17c>)
		step++;
 8003854:	4c4b      	ldr	r4, [pc, #300]	; (8003984 <startMotor+0x180>)
	if (forward == 1){
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	2a01      	cmp	r2, #1
 800385a:	d04b      	beq.n	80038f4 <startMotor+0xf0>
	if (forward == 0){
 800385c:	2a00      	cmp	r2, #0
 800385e:	d031      	beq.n	80038c4 <startMotor+0xc0>
 8003860:	6820      	ldr	r0, [r4, #0]
 8003862:	4d49      	ldr	r5, [pc, #292]	; (8003988 <startMotor+0x184>)
	if (input > 47){
 8003864:	4b49      	ldr	r3, [pc, #292]	; (800398c <startMotor+0x188>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2b2f      	cmp	r3, #47	; 0x2f
 800386a:	dd02      	ble.n	8003872 <startMotor+0x6e>
comStep(step);
 800386c:	f7ff fba2 	bl	8002fb4 <comStep>
 8003870:	6820      	ldr	r0, [r4, #0]
	if (step == 1 || step == 4) {   // c floating
 8003872:	2801      	cmp	r0, #1
 8003874:	d04e      	beq.n	8003914 <startMotor+0x110>
 8003876:	2804      	cmp	r0, #4
 8003878:	d04c      	beq.n	8003914 <startMotor+0x110>
	if (step == 2 || step == 5) {     // a floating
 800387a:	2802      	cmp	r0, #2
 800387c:	d04e      	beq.n	800391c <startMotor+0x118>
 800387e:	2805      	cmp	r0, #5
 8003880:	d04c      	beq.n	800391c <startMotor+0x118>
	if (step == 3 || step == 6) {      // b floating
 8003882:	2803      	cmp	r0, #3
 8003884:	d04e      	beq.n	8003924 <startMotor+0x120>
 8003886:	2806      	cmp	r0, #6
 8003888:	d04c      	beq.n	8003924 <startMotor+0x120>
	if (rising){
 800388a:	682b      	ldr	r3, [r5, #0]
	if (HAL_COMP_Init(&hcomp1) != HAL_OK) {
 800388c:	0030      	movs	r0, r6
		hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_FALLING;   // polarity of comp output reversed
 800388e:	1e5a      	subs	r2, r3, #1
 8003890:	4193      	sbcs	r3, r2
 8003892:	3301      	adds	r3, #1
 8003894:	6233      	str	r3, [r6, #32]
	if (HAL_COMP_Init(&hcomp1) != HAL_OK) {
 8003896:	f7fc ff95 	bl	80007c4 <HAL_COMP_Init>
 800389a:	2800      	cmp	r0, #0
 800389c:	d000      	beq.n	80038a0 <startMotor+0x9c>
 800389e:	e7fe      	b.n	800389e <startMotor+0x9a>
	commutation_interval = tim2_start_arr- 3000;
 80038a0:	4a3b      	ldr	r2, [pc, #236]	; (8003990 <startMotor+0x18c>)
 80038a2:	4b3c      	ldr	r3, [pc, #240]	; (8003994 <startMotor+0x190>)
 80038a4:	4694      	mov	ip, r2
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a3b      	ldr	r2, [pc, #236]	; (8003998 <startMotor+0x194>)
 80038aa:	4463      	add	r3, ip
 80038ac:	6013      	str	r3, [r2, #0]
	TIM3->CNT = 0;
 80038ae:	4b3b      	ldr	r3, [pc, #236]	; (800399c <startMotor+0x198>)
	running = 1;
 80038b0:	464a      	mov	r2, r9
	TIM3->CNT = 0;
 80038b2:	6258      	str	r0, [r3, #36]	; 0x24
	running = 1;
 80038b4:	2301      	movs	r3, #1
	if (HAL_COMP_Start_IT(&hcomp1) != HAL_OK) {
 80038b6:	0030      	movs	r0, r6
	running = 1;
 80038b8:	6013      	str	r3, [r2, #0]
	if (HAL_COMP_Start_IT(&hcomp1) != HAL_OK) {
 80038ba:	f7fc ffd3 	bl	8000864 <HAL_COMP_Start_IT>
 80038be:	2800      	cmp	r0, #0
 80038c0:	d0b2      	beq.n	8003828 <startMotor+0x24>
 80038c2:	e7fe      	b.n	80038c2 <startMotor+0xbe>
		step--;
 80038c4:	6823      	ldr	r3, [r4, #0]
 80038c6:	1e58      	subs	r0, r3, #1
 80038c8:	6020      	str	r0, [r4, #0]
		if (step < 1) {
 80038ca:	2800      	cmp	r0, #0
 80038cc:	dd35      	ble.n	800393a <startMotor+0x136>
		if (step == 1 || step == 3 || step == 5) {
 80038ce:	2302      	movs	r3, #2
 80038d0:	0002      	movs	r2, r0
 80038d2:	439a      	bics	r2, r3
 80038d4:	2a01      	cmp	r2, #1
 80038d6:	d028      	beq.n	800392a <startMotor+0x126>
 80038d8:	2805      	cmp	r0, #5
 80038da:	d026      	beq.n	800392a <startMotor+0x126>
 80038dc:	2304      	movs	r3, #4
 80038de:	0002      	movs	r2, r0
 80038e0:	439a      	bics	r2, r3
 80038e2:	0013      	movs	r3, r2
 80038e4:	4d28      	ldr	r5, [pc, #160]	; (8003988 <startMotor+0x184>)
		if (step == 2 || step == 4 || step == 6) {
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d001      	beq.n	80038ee <startMotor+0xea>
 80038ea:	2804      	cmp	r0, #4
 80038ec:	d1ba      	bne.n	8003864 <startMotor+0x60>
			rising = 1;
 80038ee:	2301      	movs	r3, #1
 80038f0:	602b      	str	r3, [r5, #0]
 80038f2:	e7b7      	b.n	8003864 <startMotor+0x60>
		step++;
 80038f4:	6823      	ldr	r3, [r4, #0]
 80038f6:	3301      	adds	r3, #1
 80038f8:	6023      	str	r3, [r4, #0]
		if (step > 6) {
 80038fa:	2b06      	cmp	r3, #6
 80038fc:	dd25      	ble.n	800394a <startMotor+0x146>
		if (step == 1 || step == 3 || step == 5) {
 80038fe:	2301      	movs	r3, #1
			step = 1;
 8003900:	6022      	str	r2, [r4, #0]
			rising = 1;                                // is back emf rising or falling
 8003902:	2101      	movs	r1, #1
 8003904:	4d20      	ldr	r5, [pc, #128]	; (8003988 <startMotor+0x184>)
 8003906:	6029      	str	r1, [r5, #0]
		if (step == 2 || step == 4 || step == 6) {
 8003908:	2a02      	cmp	r2, #2
 800390a:	d01b      	beq.n	8003944 <startMotor+0x140>
 800390c:	2b04      	cmp	r3, #4
 800390e:	d019      	beq.n	8003944 <startMotor+0x140>
 8003910:	6820      	ldr	r0, [r4, #0]
 8003912:	e7a7      	b.n	8003864 <startMotor+0x60>
		hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_IO1;
 8003914:	2360      	movs	r3, #96	; 0x60
 8003916:	6073      	str	r3, [r6, #4]
	if (step == 2 || step == 5) {     // a floating
 8003918:	2802      	cmp	r0, #2
 800391a:	d1b0      	bne.n	800387e <startMotor+0x7a>
		hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1;                      /// if f051k6  step 2 , 5 is dac 1 ( swap comp input)
 800391c:	2340      	movs	r3, #64	; 0x40
 800391e:	6073      	str	r3, [r6, #4]
	if (step == 3 || step == 6) {      // b floating
 8003920:	2803      	cmp	r0, #3
 8003922:	d1b0      	bne.n	8003886 <startMotor+0x82>
		hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_DAC2;
 8003924:	2350      	movs	r3, #80	; 0x50
 8003926:	6073      	str	r3, [r6, #4]
 8003928:	e7af      	b.n	800388a <startMotor+0x86>
			rising = 0;
 800392a:	2300      	movs	r3, #0
 800392c:	0002      	movs	r2, r0
 800392e:	4d16      	ldr	r5, [pc, #88]	; (8003988 <startMotor+0x184>)
 8003930:	602b      	str	r3, [r5, #0]
 8003932:	3304      	adds	r3, #4
 8003934:	439a      	bics	r2, r3
 8003936:	0013      	movs	r3, r2
 8003938:	e7d5      	b.n	80038e6 <startMotor+0xe2>
			step = 6;
 800393a:	2306      	movs	r3, #6
		if (step == 1 || step == 3 || step == 5) {
 800393c:	2006      	movs	r0, #6
			step = 6;
 800393e:	6023      	str	r3, [r4, #0]
 8003940:	4d11      	ldr	r5, [pc, #68]	; (8003988 <startMotor+0x184>)
 8003942:	e7d4      	b.n	80038ee <startMotor+0xea>
			rising = 0;
 8003944:	2300      	movs	r3, #0
 8003946:	602b      	str	r3, [r5, #0]
 8003948:	e7e2      	b.n	8003910 <startMotor+0x10c>
		if (step == 1 || step == 3 || step == 5) {
 800394a:	2102      	movs	r1, #2
 800394c:	0018      	movs	r0, r3
 800394e:	4388      	bics	r0, r1
 8003950:	2801      	cmp	r0, #1
 8003952:	d007      	beq.n	8003964 <startMotor+0x160>
 8003954:	2b05      	cmp	r3, #5
 8003956:	d0d4      	beq.n	8003902 <startMotor+0xfe>
 8003958:	2204      	movs	r2, #4
 800395a:	0019      	movs	r1, r3
 800395c:	4391      	bics	r1, r2
 800395e:	000a      	movs	r2, r1
 8003960:	4d09      	ldr	r5, [pc, #36]	; (8003988 <startMotor+0x184>)
 8003962:	e7d1      	b.n	8003908 <startMotor+0x104>
 8003964:	001a      	movs	r2, r3
 8003966:	e7cc      	b.n	8003902 <startMotor+0xfe>
 8003968:	2000003c 	.word	0x2000003c
 800396c:	2000013c 	.word	0x2000013c
 8003970:	20000138 	.word	0x20000138
 8003974:	2000014c 	.word	0x2000014c
 8003978:	20000260 	.word	0x20000260
 800397c:	200001f0 	.word	0x200001f0
 8003980:	20000020 	.word	0x20000020
 8003984:	20000048 	.word	0x20000048
 8003988:	20000034 	.word	0x20000034
 800398c:	2000010c 	.word	0x2000010c
 8003990:	fffff448 	.word	0xfffff448
 8003994:	20000050 	.word	0x20000050
 8003998:	200000ac 	.word	0x200000ac
 800399c:	40000400 	.word	0x40000400

080039a0 <HAL_COMP_TriggerCallback>:

void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp) {
 80039a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039a2:	4657      	mov	r7, sl
 80039a4:	464e      	mov	r6, r9
 80039a6:	46de      	mov	lr, fp
 80039a8:	4645      	mov	r5, r8
	/* Turn On LED3 */
		timestamp = TIM3->CNT;
		GPIOA->BSRR = GPIO_PIN_15;
 80039aa:	2080      	movs	r0, #128	; 0x80
 80039ac:	2390      	movs	r3, #144	; 0x90
		timestamp = TIM3->CNT;
 80039ae:	4a55      	ldr	r2, [pc, #340]	; (8003b04 <HAL_COMP_TriggerCallback+0x164>)
void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp) {
 80039b0:	b5e0      	push	{r5, r6, r7, lr}
		timestamp = TIM3->CNT;
 80039b2:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80039b4:	4f54      	ldr	r7, [pc, #336]	; (8003b08 <HAL_COMP_TriggerCallback+0x168>)
		GPIOA->BSRR = GPIO_PIN_15;
 80039b6:	05db      	lsls	r3, r3, #23
 80039b8:	0200      	lsls	r0, r0, #8
		timestamp = TIM3->CNT;
 80039ba:	6039      	str	r1, [r7, #0]
		GPIOA->BSRR = GPIO_PIN_15;
 80039bc:	6198      	str	r0, [r3, #24]

	if (compit > 200){
 80039be:	4b53      	ldr	r3, [pc, #332]	; (8003b0c <HAL_COMP_TriggerCallback+0x16c>)
		timestamp = TIM3->CNT;
 80039c0:	468c      	mov	ip, r1
	if (compit > 200){
 80039c2:	4699      	mov	r9, r3
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	2bc8      	cmp	r3, #200	; 0xc8
 80039c8:	d900      	bls.n	80039cc <HAL_COMP_TriggerCallback+0x2c>
 80039ca:	e08d      	b.n	8003ae8 <HAL_COMP_TriggerCallback+0x148>
		HAL_COMP_Stop_IT(&hcomp1);
		error = 1;
		return;
	}
	compit +=1;
 80039cc:	4648      	mov	r0, r9
 80039ce:	3301      	adds	r3, #1
 80039d0:	7003      	strb	r3, [r0, #0]
 80039d2:	4b4f      	ldr	r3, [pc, #316]	; (8003b10 <HAL_COMP_TriggerCallback+0x170>)
 80039d4:	6818      	ldr	r0, [r3, #0]
	while (TIM3->CNT - timestamp < filter_delay){
 80039d6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80039d8:	1a5b      	subs	r3, r3, r1
 80039da:	4298      	cmp	r0, r3
 80039dc:	d8fb      	bhi.n	80039d6 <HAL_COMP_TriggerCallback+0x36>

	}

	if (rising){
 80039de:	4b4d      	ldr	r3, [pc, #308]	; (8003b14 <HAL_COMP_TriggerCallback+0x174>)
	//	advancedivisor = advancedivisorup;
		for (int i = 0; i < filter_level; i++){
 80039e0:	4e4d      	ldr	r6, [pc, #308]	; (8003b18 <HAL_COMP_TriggerCallback+0x178>)
	if (rising){
 80039e2:	681d      	ldr	r5, [r3, #0]
		for (int i = 0; i < filter_level; i++){
 80039e4:	7833      	ldrb	r3, [r6, #0]
	if (rising){
 80039e6:	2d00      	cmp	r5, #0
 80039e8:	d16c      	bne.n	8003ac4 <HAL_COMP_TriggerCallback+0x124>
 80039ea:	4c4c      	ldr	r4, [pc, #304]	; (8003b1c <HAL_COMP_TriggerCallback+0x17c>)
		}


	}else{
	//	advancedivisor = advancedivisordown;
		for (int i = 0; i < filter_level; i++){
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d104      	bne.n	80039fa <HAL_COMP_TriggerCallback+0x5a>
 80039f0:	e010      	b.n	8003a14 <HAL_COMP_TriggerCallback+0x74>
 80039f2:	7833      	ldrb	r3, [r6, #0]
 80039f4:	3501      	adds	r5, #1
 80039f6:	42ab      	cmp	r3, r5
 80039f8:	dd0a      	ble.n	8003a10 <HAL_COMP_TriggerCallback+0x70>
		if (HAL_COMP_GetOutputLevel(&hcomp1) == COMP_OUTPUTLEVEL_LOW){
 80039fa:	0020      	movs	r0, r4
 80039fc:	f7fc ffb6 	bl	800096c <HAL_COMP_GetOutputLevel>
 8003a00:	2800      	cmp	r0, #0
 8003a02:	d1f6      	bne.n	80039f2 <HAL_COMP_TriggerCallback+0x52>

	if (HAL_COMP_Start_IT(&hcomp1) != HAL_OK) {
		/* Initialization Error */
		Error_Handler();
	}
}
 8003a04:	bc3c      	pop	{r2, r3, r4, r5}
 8003a06:	4690      	mov	r8, r2
 8003a08:	4699      	mov	r9, r3
 8003a0a:	46a2      	mov	sl, r4
 8003a0c:	46ab      	mov	fp, r5
 8003a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	469c      	mov	ip, r3
	thiszctime = timestamp;
 8003a14:	4662      	mov	r2, ip
 8003a16:	4b42      	ldr	r3, [pc, #264]	; (8003b20 <HAL_COMP_TriggerCallback+0x180>)
	TIM3->CNT = 0;
 8003a18:	4e3a      	ldr	r6, [pc, #232]	; (8003b04 <HAL_COMP_TriggerCallback+0x164>)
	thiszctime = timestamp;
 8003a1a:	601a      	str	r2, [r3, #0]
 8003a1c:	4698      	mov	r8, r3
	TIM3->CNT = 0;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	469a      	mov	sl, r3
 8003a22:	6273      	str	r3, [r6, #36]	; 0x24
	HAL_COMP_Stop_IT(&hcomp1);
 8003a24:	0020      	movs	r0, r4
 8003a26:	f7fc ff71 	bl	800090c <HAL_COMP_Stop_IT>
	zctimeout = 0;
 8003a2a:	4652      	mov	r2, sl
 8003a2c:	4b3d      	ldr	r3, [pc, #244]	; (8003b24 <HAL_COMP_TriggerCallback+0x184>)
 8003a2e:	601a      	str	r2, [r3, #0]
				commutation_interval = (commutation_interval + thiszctime) / 2;     // TEST!   divide by two when tracking up down time independant
 8003a30:	4643      	mov	r3, r8
 8003a32:	681f      	ldr	r7, [r3, #0]
 8003a34:	4b3c      	ldr	r3, [pc, #240]	; (8003b28 <HAL_COMP_TriggerCallback+0x188>)
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	18bd      	adds	r5, r7, r2
				bad_commutation = 0;
 8003a3a:	4652      	mov	r2, sl
				commutation_interval = (commutation_interval + thiszctime) / 2;     // TEST!   divide by two when tracking up down time independant
 8003a3c:	0fe8      	lsrs	r0, r5, #31
 8003a3e:	1940      	adds	r0, r0, r5
 8003a40:	1040      	asrs	r0, r0, #1
 8003a42:	6018      	str	r0, [r3, #0]
				bad_commutation = 0;
 8003a44:	4b39      	ldr	r3, [pc, #228]	; (8003b2c <HAL_COMP_TriggerCallback+0x18c>)
 8003a46:	701a      	strb	r2, [r3, #0]
			advance = commutation_interval / advancedivisor;
 8003a48:	4b39      	ldr	r3, [pc, #228]	; (8003b30 <HAL_COMP_TriggerCallback+0x190>)
 8003a4a:	7819      	ldrb	r1, [r3, #0]
 8003a4c:	f7fc fbe6 	bl	800021c <__divsi3>
			waitTime = commutation_interval /2    - advance ;
 8003a50:	2203      	movs	r2, #3
 8003a52:	17e9      	asrs	r1, r5, #31
			advance = commutation_interval / advancedivisor;
 8003a54:	4b37      	ldr	r3, [pc, #220]	; (8003b34 <HAL_COMP_TriggerCallback+0x194>)
			waitTime = commutation_interval /2    - advance ;
 8003a56:	400a      	ands	r2, r1
 8003a58:	1952      	adds	r2, r2, r5
			advance = commutation_interval / advancedivisor;
 8003a5a:	6018      	str	r0, [r3, #0]
			waitTime = commutation_interval /2    - advance ;
 8003a5c:	1092      	asrs	r2, r2, #2
 8003a5e:	4b36      	ldr	r3, [pc, #216]	; (8003b38 <HAL_COMP_TriggerCallback+0x198>)
 8003a60:	1a10      	subs	r0, r2, r0
 8003a62:	6018      	str	r0, [r3, #0]
 8003a64:	469a      	mov	sl, r3
			blanktime = commutation_interval / 4;
 8003a66:	4b35      	ldr	r3, [pc, #212]	; (8003b3c <HAL_COMP_TriggerCallback+0x19c>)
 8003a68:	469b      	mov	fp, r3
 8003a6a:	2307      	movs	r3, #7
 8003a6c:	400b      	ands	r3, r1
 8003a6e:	195d      	adds	r5, r3, r5
 8003a70:	465b      	mov	r3, fp
 8003a72:	10ed      	asrs	r5, r5, #3
 8003a74:	601d      	str	r5, [r3, #0]
		if(tempbrake){
 8003a76:	4b32      	ldr	r3, [pc, #200]	; (8003b40 <HAL_COMP_TriggerCallback+0x1a0>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d13b      	bne.n	8003af6 <HAL_COMP_TriggerCallback+0x156>
		if (sensorless){
 8003a7e:	4b31      	ldr	r3, [pc, #196]	; (8003b44 <HAL_COMP_TriggerCallback+0x1a4>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d012      	beq.n	8003aac <HAL_COMP_TriggerCallback+0x10c>
			while (TIM3->CNT  < waitTime){
 8003a86:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003a88:	4283      	cmp	r3, r0
 8003a8a:	d3fc      	bcc.n	8003a86 <HAL_COMP_TriggerCallback+0xe6>
			compit = 0;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	464a      	mov	r2, r9
 8003a90:	7013      	strb	r3, [r2, #0]
			commutate();
 8003a92:	f7ff fe2d 	bl	80036f0 <commutate>
 8003a96:	465b      	mov	r3, fp
 8003a98:	4652      	mov	r2, sl
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6812      	ldr	r2, [r2, #0]
 8003a9e:	189b      	adds	r3, r3, r2
			while (TIM3->CNT  < waitTime + blanktime){
 8003aa0:	4a18      	ldr	r2, [pc, #96]	; (8003b04 <HAL_COMP_TriggerCallback+0x164>)
 8003aa2:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8003aa4:	4299      	cmp	r1, r3
 8003aa6:	d3fc      	bcc.n	8003aa2 <HAL_COMP_TriggerCallback+0x102>
 8003aa8:	4643      	mov	r3, r8
 8003aaa:	681f      	ldr	r7, [r3, #0]
		lastzctime = thiszctime;
 8003aac:	4b26      	ldr	r3, [pc, #152]	; (8003b48 <HAL_COMP_TriggerCallback+0x1a8>)
    bemf_counts++;
 8003aae:	4a27      	ldr	r2, [pc, #156]	; (8003b4c <HAL_COMP_TriggerCallback+0x1ac>)
		lastzctime = thiszctime;
 8003ab0:	601f      	str	r7, [r3, #0]
    bemf_counts++;
 8003ab2:	6813      	ldr	r3, [r2, #0]
	if (HAL_COMP_Start_IT(&hcomp1) != HAL_OK) {
 8003ab4:	0020      	movs	r0, r4
    bemf_counts++;
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	6013      	str	r3, [r2, #0]
	if (HAL_COMP_Start_IT(&hcomp1) != HAL_OK) {
 8003aba:	f7fc fed3 	bl	8000864 <HAL_COMP_Start_IT>
 8003abe:	2800      	cmp	r0, #0
 8003ac0:	d0a0      	beq.n	8003a04 <HAL_COMP_TriggerCallback+0x64>
 8003ac2:	e7fe      	b.n	8003ac2 <HAL_COMP_TriggerCallback+0x122>
		for (int i = 0; i < filter_level; i++){
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d01a      	beq.n	8003afe <HAL_COMP_TriggerCallback+0x15e>
		if (HAL_COMP_GetOutputLevel(&hcomp1) == COMP_OUTPUTLEVEL_HIGH){
 8003ac8:	2380      	movs	r3, #128	; 0x80
 8003aca:	01db      	lsls	r3, r3, #7
		for (int i = 0; i < filter_level; i++){
 8003acc:	2500      	movs	r5, #0
 8003ace:	4c13      	ldr	r4, [pc, #76]	; (8003b1c <HAL_COMP_TriggerCallback+0x17c>)
		if (HAL_COMP_GetOutputLevel(&hcomp1) == COMP_OUTPUTLEVEL_HIGH){
 8003ad0:	4698      	mov	r8, r3
 8003ad2:	e003      	b.n	8003adc <HAL_COMP_TriggerCallback+0x13c>
		for (int i = 0; i < filter_level; i++){
 8003ad4:	7833      	ldrb	r3, [r6, #0]
 8003ad6:	3501      	adds	r5, #1
 8003ad8:	42ab      	cmp	r3, r5
 8003ada:	dd99      	ble.n	8003a10 <HAL_COMP_TriggerCallback+0x70>
		if (HAL_COMP_GetOutputLevel(&hcomp1) == COMP_OUTPUTLEVEL_HIGH){
 8003adc:	0020      	movs	r0, r4
 8003ade:	f7fc ff45 	bl	800096c <HAL_COMP_GetOutputLevel>
 8003ae2:	4540      	cmp	r0, r8
 8003ae4:	d1f6      	bne.n	8003ad4 <HAL_COMP_TriggerCallback+0x134>
 8003ae6:	e78d      	b.n	8003a04 <HAL_COMP_TriggerCallback+0x64>
		HAL_COMP_Stop_IT(&hcomp1);
 8003ae8:	480c      	ldr	r0, [pc, #48]	; (8003b1c <HAL_COMP_TriggerCallback+0x17c>)
 8003aea:	f7fc ff0f 	bl	800090c <HAL_COMP_Stop_IT>
		error = 1;
 8003aee:	2201      	movs	r2, #1
 8003af0:	4b17      	ldr	r3, [pc, #92]	; (8003b50 <HAL_COMP_TriggerCallback+0x1b0>)
 8003af2:	701a      	strb	r2, [r3, #0]
		return;
 8003af4:	e786      	b.n	8003a04 <HAL_COMP_TriggerCallback+0x64>
				HAL_COMP_Stop_IT(&hcomp1);
 8003af6:	0020      	movs	r0, r4
 8003af8:	f7fc ff08 	bl	800090c <HAL_COMP_Stop_IT>
				return;
 8003afc:	e782      	b.n	8003a04 <HAL_COMP_TriggerCallback+0x64>
 8003afe:	4c07      	ldr	r4, [pc, #28]	; (8003b1c <HAL_COMP_TriggerCallback+0x17c>)
 8003b00:	e788      	b.n	8003a14 <HAL_COMP_TriggerCallback+0x74>
 8003b02:	46c0      	nop			; (mov r8, r8)
 8003b04:	40000400 	.word	0x40000400
 8003b08:	2000018c 	.word	0x2000018c
 8003b0c:	200000b0 	.word	0x200000b0
 8003b10:	20000014 	.word	0x20000014
 8003b14:	20000034 	.word	0x20000034
 8003b18:	20000018 	.word	0x20000018
 8003b1c:	200001f0 	.word	0x200001f0
 8003b20:	20000154 	.word	0x20000154
 8003b24:	20000160 	.word	0x20000160
 8003b28:	200000ac 	.word	0x200000ac
 8003b2c:	200000a4 	.word	0x200000a4
 8003b30:	20000006 	.word	0x20000006
 8003b34:	20000098 	.word	0x20000098
 8003b38:	2000015c 	.word	0x2000015c
 8003b3c:	20000364 	.word	0x20000364
 8003b40:	20000150 	.word	0x20000150
 8003b44:	2000013c 	.word	0x2000013c
 8003b48:	20000114 	.word	0x20000114
 8003b4c:	20000260 	.word	0x20000260
 8003b50:	20000108 	.word	0x20000108

08003b54 <playStartupTune>:

void playStartupTune(){
 8003b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b56:	46de      	mov	lr, fp
 8003b58:	4657      	mov	r7, sl
 8003b5a:	464e      	mov	r6, r9
 8003b5c:	4645      	mov	r5, r8
	TIM1->PSC = 75;
 8003b5e:	234b      	movs	r3, #75	; 0x4b
 8003b60:	4c92      	ldr	r4, [pc, #584]	; (8003dac <playStartupTune+0x258>)
void playStartupTune(){
 8003b62:	b5e0      	push	{r5, r6, r7, lr}
		phaseA(floating);
 8003b64:	4d92      	ldr	r5, [pc, #584]	; (8003db0 <playStartupTune+0x25c>)
	TIM1->PSC = 75;
 8003b66:	62a3      	str	r3, [r4, #40]	; 0x28
	TIM1->CCR1 = 5;
 8003b68:	3b46      	subs	r3, #70	; 0x46
 8003b6a:	6363      	str	r3, [r4, #52]	; 0x34
		phaseA(floating);
 8003b6c:	6828      	ldr	r0, [r5, #0]
	TIM1->CCR2 = 5;
 8003b6e:	63a3      	str	r3, [r4, #56]	; 0x38
	TIM1->CCR3 = 5;
 8003b70:	63e3      	str	r3, [r4, #60]	; 0x3c
		phaseA(floating);
 8003b72:	f7ff f8e3 	bl	8002d3c <phaseA>
		phaseB(lowside);
 8003b76:	4e8f      	ldr	r6, [pc, #572]	; (8003db4 <playStartupTune+0x260>)
 8003b78:	6830      	ldr	r0, [r6, #0]
 8003b7a:	f7ff f945 	bl	8002e08 <phaseB>
		phaseC(pwm);
 8003b7e:	4f8e      	ldr	r7, [pc, #568]	; (8003db8 <playStartupTune+0x264>)
 8003b80:	6838      	ldr	r0, [r7, #0]
 8003b82:	f7ff f9af 	bl	8002ee4 <phaseC>
	comStep(2);
	HAL_Delay(100);
 8003b86:	2064      	movs	r0, #100	; 0x64
 8003b88:	f7fc fc64 	bl	8000454 <HAL_Delay>
	TIM1->PSC = 50;
 8003b8c:	2332      	movs	r3, #50	; 0x32
	HAL_Delay(100);
 8003b8e:	2064      	movs	r0, #100	; 0x64
	TIM1->PSC = 50;
 8003b90:	62a3      	str	r3, [r4, #40]	; 0x28
	HAL_Delay(100);
 8003b92:	f7fc fc5f 	bl	8000454 <HAL_Delay>
	TIM1->PSC = 25;
 8003b96:	2319      	movs	r3, #25
	HAL_Delay(100);
 8003b98:	2064      	movs	r0, #100	; 0x64
	TIM1->PSC = 25;
 8003b9a:	62a3      	str	r3, [r4, #40]	; 0x28
	HAL_Delay(100);
 8003b9c:	f7fc fc5a 	bl	8000454 <HAL_Delay>
	phaseA(floating);
 8003ba0:	682a      	ldr	r2, [r5, #0]
	if (newPhase == pwm) {
 8003ba2:	6838      	ldr	r0, [r7, #0]
 8003ba4:	4282      	cmp	r2, r0
 8003ba6:	d100      	bne.n	8003baa <playStartupTune+0x56>
 8003ba8:	e0c5      	b.n	8003d36 <playStartupTune+0x1e2>
 8003baa:	2403      	movs	r4, #3
 8003bac:	2790      	movs	r7, #144	; 0x90
 8003bae:	4983      	ldr	r1, [pc, #524]	; (8003dbc <playStartupTune+0x268>)
 8003bb0:	46a0      	mov	r8, r4
 8003bb2:	680b      	ldr	r3, [r1, #0]
 8003bb4:	05ff      	lsls	r7, r7, #23
 8003bb6:	43a3      	bics	r3, r4
 8003bb8:	3c02      	subs	r4, #2
 8003bba:	4323      	orrs	r3, r4
 8003bbc:	600b      	str	r3, [r1, #0]
		GPIOB->BRR = GPIO_PIN_0;
 8003bbe:	628c      	str	r4, [r1, #40]	; 0x28
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	46a4      	mov	ip, r4
 8003bc4:	4c7e      	ldr	r4, [pc, #504]	; (8003dc0 <playStartupTune+0x26c>)
 8003bc6:	4023      	ands	r3, r4
 8003bc8:	46a1      	mov	r9, r4
 8003bca:	2480      	movs	r4, #128	; 0x80
 8003bcc:	02e4      	lsls	r4, r4, #11
 8003bce:	4323      	orrs	r3, r4
 8003bd0:	603b      	str	r3, [r7, #0]
		GPIOA->BRR = GPIO_PIN_9;
 8003bd2:	2380      	movs	r3, #128	; 0x80
 8003bd4:	46a2      	mov	sl, r4
	if (newPhase == lowside) {          // low mosfet on
 8003bd6:	6834      	ldr	r4, [r6, #0]
		GPIOA->BRR = GPIO_PIN_9;
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	469b      	mov	fp, r3
 8003bdc:	62bb      	str	r3, [r7, #40]	; 0x28
	if (newPhase == lowside) {          // low mosfet on
 8003bde:	42a2      	cmp	r2, r4
 8003be0:	d10e      	bne.n	8003c00 <playStartupTune+0xac>
 8003be2:	4646      	mov	r6, r8
 8003be4:	680b      	ldr	r3, [r1, #0]
 8003be6:	43b3      	bics	r3, r6
 8003be8:	4666      	mov	r6, ip
 8003bea:	4333      	orrs	r3, r6
 8003bec:	600b      	str	r3, [r1, #0]
		GPIOB->BSRR = GPIO_PIN_0;
 8003bee:	618e      	str	r6, [r1, #24]
 8003bf0:	4649      	mov	r1, r9
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	400b      	ands	r3, r1
 8003bf6:	4651      	mov	r1, sl
 8003bf8:	4319      	orrs	r1, r3
		GPIOA->BRR = GPIO_PIN_9;
 8003bfa:	465b      	mov	r3, fp
 8003bfc:	6039      	str	r1, [r7, #0]
 8003bfe:	62bb      	str	r3, [r7, #40]	; 0x28
	if (newPhase == pwm) {  // pwm
 8003c00:	0016      	movs	r6, r2
 8003c02:	4282      	cmp	r2, r0
 8003c04:	d100      	bne.n	8003c08 <playStartupTune+0xb4>
 8003c06:	e07b      	b.n	8003d00 <playStartupTune+0x1ac>
 8003c08:	2390      	movs	r3, #144	; 0x90
 8003c0a:	05db      	lsls	r3, r3, #23
 8003c0c:	6819      	ldr	r1, [r3, #0]
 8003c0e:	4f6d      	ldr	r7, [pc, #436]	; (8003dc4 <playStartupTune+0x270>)
 8003c10:	4039      	ands	r1, r7
 8003c12:	46bb      	mov	fp, r7
 8003c14:	2780      	movs	r7, #128	; 0x80
 8003c16:	01ff      	lsls	r7, r7, #7
 8003c18:	4339      	orrs	r1, r7
 8003c1a:	6019      	str	r1, [r3, #0]
		GPIOA->BRR = GPIO_PIN_7;
 8003c1c:	2180      	movs	r1, #128	; 0x80
 8003c1e:	6299      	str	r1, [r3, #40]	; 0x28
 8003c20:	46bc      	mov	ip, r7
 8003c22:	4689      	mov	r9, r1
 8003c24:	4f68      	ldr	r7, [pc, #416]	; (8003dc8 <playStartupTune+0x274>)
 8003c26:	6819      	ldr	r1, [r3, #0]
 8003c28:	46b8      	mov	r8, r7
 8003c2a:	4039      	ands	r1, r7
 8003c2c:	2780      	movs	r7, #128	; 0x80
 8003c2e:	027f      	lsls	r7, r7, #9
 8003c30:	4339      	orrs	r1, r7
 8003c32:	6019      	str	r1, [r3, #0]
		GPIOA->BRR = GPIO_PIN_8;
 8003c34:	2180      	movs	r1, #128	; 0x80
 8003c36:	0049      	lsls	r1, r1, #1
 8003c38:	46ba      	mov	sl, r7
 8003c3a:	6299      	str	r1, [r3, #40]	; 0x28
	if (newPhase == lowside) {              // lowside
 8003c3c:	42a2      	cmp	r2, r4
 8003c3e:	d10e      	bne.n	8003c5e <playStartupTune+0x10a>
 8003c40:	465f      	mov	r7, fp
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	4017      	ands	r7, r2
 8003c46:	4662      	mov	r2, ip
 8003c48:	433a      	orrs	r2, r7
 8003c4a:	601a      	str	r2, [r3, #0]
		GPIOA->BSRR = GPIO_PIN_7;
 8003c4c:	464a      	mov	r2, r9
 8003c4e:	4647      	mov	r7, r8
 8003c50:	619a      	str	r2, [r3, #24]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	403a      	ands	r2, r7
 8003c56:	4657      	mov	r7, sl
 8003c58:	4317      	orrs	r7, r2
 8003c5a:	601f      	str	r7, [r3, #0]
		GPIOA->BRR = GPIO_PIN_8;
 8003c5c:	6299      	str	r1, [r3, #40]	; 0x28
	if (newPhase == pwm) {
 8003c5e:	4286      	cmp	r6, r0
 8003c60:	d034      	beq.n	8003ccc <playStartupTune+0x178>
 8003c62:	210c      	movs	r1, #12
 8003c64:	4a55      	ldr	r2, [pc, #340]	; (8003dbc <playStartupTune+0x268>)
 8003c66:	6813      	ldr	r3, [r2, #0]
 8003c68:	438b      	bics	r3, r1
 8003c6a:	3908      	subs	r1, #8
 8003c6c:	430b      	orrs	r3, r1
 8003c6e:	6013      	str	r3, [r2, #0]
		GPIOB->BRR = GPIO_PIN_1;
 8003c70:	2302      	movs	r3, #2
 8003c72:	6293      	str	r3, [r2, #40]	; 0x28
 8003c74:	2390      	movs	r3, #144	; 0x90
 8003c76:	05db      	lsls	r3, r3, #23
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	4954      	ldr	r1, [pc, #336]	; (8003dcc <playStartupTune+0x278>)
 8003c7c:	4011      	ands	r1, r2
 8003c7e:	2280      	movs	r2, #128	; 0x80
 8003c80:	0352      	lsls	r2, r2, #13
 8003c82:	430a      	orrs	r2, r1
 8003c84:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_10;
 8003c86:	2280      	movs	r2, #128	; 0x80
 8003c88:	00d2      	lsls	r2, r2, #3
 8003c8a:	629a      	str	r2, [r3, #40]	; 0x28
	if (newPhase == lowside) {
 8003c8c:	42a6      	cmp	r6, r4
 8003c8e:	d114      	bne.n	8003cba <playStartupTune+0x166>
 8003c90:	210c      	movs	r1, #12
 8003c92:	4a4a      	ldr	r2, [pc, #296]	; (8003dbc <playStartupTune+0x268>)
 8003c94:	6813      	ldr	r3, [r2, #0]
 8003c96:	438b      	bics	r3, r1
 8003c98:	3908      	subs	r1, #8
 8003c9a:	430b      	orrs	r3, r1
 8003c9c:	6013      	str	r3, [r2, #0]
		GPIOB->BSRR = GPIO_PIN_1;
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	6193      	str	r3, [r2, #24]
 8003ca2:	2390      	movs	r3, #144	; 0x90
 8003ca4:	05db      	lsls	r3, r3, #23
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	4948      	ldr	r1, [pc, #288]	; (8003dcc <playStartupTune+0x278>)
 8003caa:	4011      	ands	r1, r2
 8003cac:	2280      	movs	r2, #128	; 0x80
 8003cae:	0352      	lsls	r2, r2, #13
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_10;
 8003cb4:	2280      	movs	r2, #128	; 0x80
 8003cb6:	00d2      	lsls	r2, r2, #3
 8003cb8:	629a      	str	r2, [r3, #40]	; 0x28
	allOff();
	TIM1->PSC = 0;
 8003cba:	2200      	movs	r2, #0
 8003cbc:	4b3b      	ldr	r3, [pc, #236]	; (8003dac <playStartupTune+0x258>)
 8003cbe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003cc0:	bc3c      	pop	{r2, r3, r4, r5}
 8003cc2:	4690      	mov	r8, r2
 8003cc4:	4699      	mov	r9, r3
 8003cc6:	46a2      	mov	sl, r4
 8003cc8:	46ab      	mov	fp, r5
 8003cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!slow_decay || prop_brake_active){
 8003ccc:	4b40      	ldr	r3, [pc, #256]	; (8003dd0 <playStartupTune+0x27c>)
 8003cce:	4a3b      	ldr	r2, [pc, #236]	; (8003dbc <playStartupTune+0x268>)
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d15e      	bne.n	8003d94 <playStartupTune+0x240>
 8003cd6:	210c      	movs	r1, #12
 8003cd8:	6813      	ldr	r3, [r2, #0]
 8003cda:	438b      	bics	r3, r1
 8003cdc:	3908      	subs	r1, #8
 8003cde:	430b      	orrs	r3, r1
 8003ce0:	6013      	str	r3, [r2, #0]
			GPIOB->BRR = GPIO_PIN_1;
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	6293      	str	r3, [r2, #40]	; 0x28
 8003ce6:	2190      	movs	r1, #144	; 0x90
 8003ce8:	05c9      	lsls	r1, r1, #23
 8003cea:	680b      	ldr	r3, [r1, #0]
 8003cec:	4a37      	ldr	r2, [pc, #220]	; (8003dcc <playStartupTune+0x278>)
 8003cee:	401a      	ands	r2, r3
 8003cf0:	2380      	movs	r3, #128	; 0x80
 8003cf2:	039b      	lsls	r3, r3, #14
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	600b      	str	r3, [r1, #0]
	if (newPhase == floating) {
 8003cf8:	682b      	ldr	r3, [r5, #0]
 8003cfa:	429e      	cmp	r6, r3
 8003cfc:	d1c6      	bne.n	8003c8c <playStartupTune+0x138>
 8003cfe:	e7b0      	b.n	8003c62 <playStartupTune+0x10e>
		if (!slow_decay || prop_brake_active){
 8003d00:	4b33      	ldr	r3, [pc, #204]	; (8003dd0 <playStartupTune+0x27c>)
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d137      	bne.n	8003d78 <playStartupTune+0x224>
 8003d08:	2390      	movs	r3, #144	; 0x90
 8003d0a:	05db      	lsls	r3, r3, #23
 8003d0c:	6819      	ldr	r1, [r3, #0]
 8003d0e:	4e2d      	ldr	r6, [pc, #180]	; (8003dc4 <playStartupTune+0x270>)
 8003d10:	400e      	ands	r6, r1
 8003d12:	2180      	movs	r1, #128	; 0x80
 8003d14:	01c9      	lsls	r1, r1, #7
 8003d16:	4331      	orrs	r1, r6
 8003d18:	6019      	str	r1, [r3, #0]
			GPIOA->BRR = GPIO_PIN_7;
 8003d1a:	2180      	movs	r1, #128	; 0x80
 8003d1c:	6299      	str	r1, [r3, #40]	; 0x28
 8003d1e:	2690      	movs	r6, #144	; 0x90
 8003d20:	05f6      	lsls	r6, r6, #23
 8003d22:	6833      	ldr	r3, [r6, #0]
 8003d24:	4928      	ldr	r1, [pc, #160]	; (8003dc8 <playStartupTune+0x274>)
 8003d26:	4019      	ands	r1, r3
 8003d28:	2380      	movs	r3, #128	; 0x80
 8003d2a:	029b      	lsls	r3, r3, #10
 8003d2c:	430b      	orrs	r3, r1
 8003d2e:	6033      	str	r3, [r6, #0]
 8003d30:	0006      	movs	r6, r0
 8003d32:	0010      	movs	r0, r2
 8003d34:	e768      	b.n	8003c08 <playStartupTune+0xb4>
		if(!slow_decay  || prop_brake_active){            // for future
 8003d36:	4b26      	ldr	r3, [pc, #152]	; (8003dd0 <playStartupTune+0x27c>)
 8003d38:	4920      	ldr	r1, [pc, #128]	; (8003dbc <playStartupTune+0x268>)
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d110      	bne.n	8003d62 <playStartupTune+0x20e>
 8003d40:	2403      	movs	r4, #3
 8003d42:	680b      	ldr	r3, [r1, #0]
 8003d44:	43a3      	bics	r3, r4
 8003d46:	3c02      	subs	r4, #2
 8003d48:	4323      	orrs	r3, r4
 8003d4a:	600b      	str	r3, [r1, #0]
		GPIOB->BRR = GPIO_PIN_0;
 8003d4c:	628c      	str	r4, [r1, #40]	; 0x28
 8003d4e:	2490      	movs	r4, #144	; 0x90
 8003d50:	05e4      	lsls	r4, r4, #23
 8003d52:	6823      	ldr	r3, [r4, #0]
 8003d54:	491a      	ldr	r1, [pc, #104]	; (8003dc0 <playStartupTune+0x26c>)
 8003d56:	4019      	ands	r1, r3
 8003d58:	2380      	movs	r3, #128	; 0x80
 8003d5a:	031b      	lsls	r3, r3, #12
 8003d5c:	430b      	orrs	r3, r1
 8003d5e:	6023      	str	r3, [r4, #0]
 8003d60:	e723      	b.n	8003baa <playStartupTune+0x56>
		if(!slow_decay  || prop_brake_active){            // for future
 8003d62:	4b1c      	ldr	r3, [pc, #112]	; (8003dd4 <playStartupTune+0x280>)
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1ea      	bne.n	8003d40 <playStartupTune+0x1ec>
 8003d6a:	2403      	movs	r4, #3
 8003d6c:	680b      	ldr	r3, [r1, #0]
 8003d6e:	43a3      	bics	r3, r4
 8003d70:	3c01      	subs	r4, #1
 8003d72:	4323      	orrs	r3, r4
 8003d74:	600b      	str	r3, [r1, #0]
 8003d76:	e7ea      	b.n	8003d4e <playStartupTune+0x1fa>
		if (!slow_decay || prop_brake_active){
 8003d78:	4b16      	ldr	r3, [pc, #88]	; (8003dd4 <playStartupTune+0x280>)
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1c3      	bne.n	8003d08 <playStartupTune+0x1b4>
 8003d80:	2690      	movs	r6, #144	; 0x90
 8003d82:	05f6      	lsls	r6, r6, #23
 8003d84:	6833      	ldr	r3, [r6, #0]
 8003d86:	490f      	ldr	r1, [pc, #60]	; (8003dc4 <playStartupTune+0x270>)
 8003d88:	4019      	ands	r1, r3
 8003d8a:	2380      	movs	r3, #128	; 0x80
 8003d8c:	021b      	lsls	r3, r3, #8
 8003d8e:	430b      	orrs	r3, r1
 8003d90:	6033      	str	r3, [r6, #0]
 8003d92:	e7c4      	b.n	8003d1e <playStartupTune+0x1ca>
		if (!slow_decay || prop_brake_active){
 8003d94:	4b0f      	ldr	r3, [pc, #60]	; (8003dd4 <playStartupTune+0x280>)
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d19c      	bne.n	8003cd6 <playStartupTune+0x182>
 8003d9c:	210c      	movs	r1, #12
 8003d9e:	6813      	ldr	r3, [r2, #0]
 8003da0:	438b      	bics	r3, r1
 8003da2:	3904      	subs	r1, #4
 8003da4:	430b      	orrs	r3, r1
 8003da6:	6013      	str	r3, [r2, #0]
 8003da8:	e79d      	b.n	8003ce6 <playStartupTune+0x192>
 8003daa:	46c0      	nop			; (mov r8, r8)
 8003dac:	40012c00 	.word	0x40012c00
 8003db0:	2000001c 	.word	0x2000001c
 8003db4:	20000028 	.word	0x20000028
 8003db8:	20000030 	.word	0x20000030
 8003dbc:	48000400 	.word	0x48000400
 8003dc0:	fff3ffff 	.word	0xfff3ffff
 8003dc4:	ffff3fff 	.word	0xffff3fff
 8003dc8:	fffcffff 	.word	0xfffcffff
 8003dcc:	ffcfffff 	.word	0xffcfffff
 8003dd0:	2000003c 	.word	0x2000003c
 8003dd4:	20000123 	.word	0x20000123

08003dd8 <playInputTune>:

void playInputTune(){
 8003dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dda:	46de      	mov	lr, fp
 8003ddc:	4657      	mov	r7, sl
 8003dde:	464e      	mov	r6, r9
 8003de0:	4645      	mov	r5, r8
	TIM1->PSC = 100;
 8003de2:	2364      	movs	r3, #100	; 0x64
void playInputTune(){
 8003de4:	b5e0      	push	{r5, r6, r7, lr}
	TIM1->PSC = 100;
 8003de6:	4e8f      	ldr	r6, [pc, #572]	; (8004024 <playInputTune+0x24c>)
 8003de8:	62b3      	str	r3, [r6, #40]	; 0x28
	TIM1->CCR1 = 5;
 8003dea:	3b5f      	subs	r3, #95	; 0x5f
 8003dec:	6373      	str	r3, [r6, #52]	; 0x34
	TIM1->CCR2 = 5;
 8003dee:	63b3      	str	r3, [r6, #56]	; 0x38
	TIM1->CCR3 = 5;
 8003df0:	63f3      	str	r3, [r6, #60]	; 0x3c
		phaseA(floating);
 8003df2:	4b8d      	ldr	r3, [pc, #564]	; (8004028 <playInputTune+0x250>)
 8003df4:	6818      	ldr	r0, [r3, #0]
 8003df6:	469b      	mov	fp, r3
 8003df8:	f7fe ffa0 	bl	8002d3c <phaseA>
		phaseB(lowside);
 8003dfc:	4d8b      	ldr	r5, [pc, #556]	; (800402c <playInputTune+0x254>)
 8003dfe:	6828      	ldr	r0, [r5, #0]
 8003e00:	f7ff f802 	bl	8002e08 <phaseB>
		phaseC(pwm);
 8003e04:	4f8a      	ldr	r7, [pc, #552]	; (8004030 <playInputTune+0x258>)
 8003e06:	6838      	ldr	r0, [r7, #0]
 8003e08:	f7ff f86c 	bl	8002ee4 <phaseC>
	comStep(2);
	HAL_Delay(100);
 8003e0c:	2064      	movs	r0, #100	; 0x64
 8003e0e:	f7fc fb21 	bl	8000454 <HAL_Delay>
	TIM1->PSC = 50;
 8003e12:	2332      	movs	r3, #50	; 0x32
	HAL_Delay(100);
 8003e14:	2064      	movs	r0, #100	; 0x64
	TIM1->PSC = 50;
 8003e16:	62b3      	str	r3, [r6, #40]	; 0x28
	HAL_Delay(100);
 8003e18:	f7fc fb1c 	bl	8000454 <HAL_Delay>
	phaseA(floating);
 8003e1c:	465b      	mov	r3, fp
	if (newPhase == pwm) {
 8003e1e:	6838      	ldr	r0, [r7, #0]
	phaseA(floating);
 8003e20:	681a      	ldr	r2, [r3, #0]
	if (newPhase == pwm) {
 8003e22:	4282      	cmp	r2, r0
 8003e24:	d100      	bne.n	8003e28 <playInputTune+0x50>
 8003e26:	e0c2      	b.n	8003fae <playInputTune+0x1d6>
 8003e28:	2603      	movs	r6, #3
 8003e2a:	4982      	ldr	r1, [pc, #520]	; (8004034 <playInputTune+0x25c>)
 8003e2c:	2701      	movs	r7, #1
 8003e2e:	680b      	ldr	r3, [r1, #0]
 8003e30:	46b4      	mov	ip, r6
 8003e32:	43b3      	bics	r3, r6
 8003e34:	2690      	movs	r6, #144	; 0x90
 8003e36:	433b      	orrs	r3, r7
 8003e38:	600b      	str	r3, [r1, #0]
 8003e3a:	05f6      	lsls	r6, r6, #23
		GPIOB->BRR = GPIO_PIN_0;
 8003e3c:	628f      	str	r7, [r1, #40]	; 0x28
 8003e3e:	6833      	ldr	r3, [r6, #0]
 8003e40:	4c7d      	ldr	r4, [pc, #500]	; (8004038 <playInputTune+0x260>)
	if (newPhase == lowside) {          // low mosfet on
 8003e42:	682d      	ldr	r5, [r5, #0]
 8003e44:	4023      	ands	r3, r4
 8003e46:	46a0      	mov	r8, r4
 8003e48:	2480      	movs	r4, #128	; 0x80
 8003e4a:	02e4      	lsls	r4, r4, #11
 8003e4c:	4323      	orrs	r3, r4
 8003e4e:	6033      	str	r3, [r6, #0]
		GPIOA->BRR = GPIO_PIN_9;
 8003e50:	2380      	movs	r3, #128	; 0x80
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	46a1      	mov	r9, r4
 8003e56:	469a      	mov	sl, r3
 8003e58:	62b3      	str	r3, [r6, #40]	; 0x28
	if (newPhase == lowside) {          // low mosfet on
 8003e5a:	42aa      	cmp	r2, r5
 8003e5c:	d10d      	bne.n	8003e7a <playInputTune+0xa2>
 8003e5e:	4664      	mov	r4, ip
 8003e60:	680b      	ldr	r3, [r1, #0]
 8003e62:	43a3      	bics	r3, r4
 8003e64:	433b      	orrs	r3, r7
 8003e66:	600b      	str	r3, [r1, #0]
		GPIOB->BSRR = GPIO_PIN_0;
 8003e68:	618f      	str	r7, [r1, #24]
 8003e6a:	4641      	mov	r1, r8
 8003e6c:	6833      	ldr	r3, [r6, #0]
 8003e6e:	400b      	ands	r3, r1
 8003e70:	4649      	mov	r1, r9
 8003e72:	4319      	orrs	r1, r3
		GPIOA->BRR = GPIO_PIN_9;
 8003e74:	4653      	mov	r3, sl
 8003e76:	6031      	str	r1, [r6, #0]
 8003e78:	62b3      	str	r3, [r6, #40]	; 0x28
	if (newPhase == pwm) {  // pwm
 8003e7a:	0016      	movs	r6, r2
 8003e7c:	4282      	cmp	r2, r0
 8003e7e:	d100      	bne.n	8003e82 <playInputTune+0xaa>
 8003e80:	e07a      	b.n	8003f78 <playInputTune+0x1a0>
 8003e82:	2390      	movs	r3, #144	; 0x90
 8003e84:	2480      	movs	r4, #128	; 0x80
 8003e86:	05db      	lsls	r3, r3, #23
 8003e88:	6819      	ldr	r1, [r3, #0]
 8003e8a:	4f6c      	ldr	r7, [pc, #432]	; (800403c <playInputTune+0x264>)
 8003e8c:	01e4      	lsls	r4, r4, #7
 8003e8e:	4039      	ands	r1, r7
 8003e90:	4321      	orrs	r1, r4
 8003e92:	6019      	str	r1, [r3, #0]
		GPIOA->BRR = GPIO_PIN_7;
 8003e94:	2180      	movs	r1, #128	; 0x80
 8003e96:	6299      	str	r1, [r3, #40]	; 0x28
 8003e98:	46a4      	mov	ip, r4
 8003e9a:	4689      	mov	r9, r1
 8003e9c:	4c68      	ldr	r4, [pc, #416]	; (8004040 <playInputTune+0x268>)
 8003e9e:	6819      	ldr	r1, [r3, #0]
 8003ea0:	46a0      	mov	r8, r4
 8003ea2:	4021      	ands	r1, r4
 8003ea4:	2480      	movs	r4, #128	; 0x80
 8003ea6:	0264      	lsls	r4, r4, #9
 8003ea8:	4321      	orrs	r1, r4
 8003eaa:	6019      	str	r1, [r3, #0]
		GPIOA->BRR = GPIO_PIN_8;
 8003eac:	2180      	movs	r1, #128	; 0x80
 8003eae:	0049      	lsls	r1, r1, #1
 8003eb0:	46a2      	mov	sl, r4
 8003eb2:	6299      	str	r1, [r3, #40]	; 0x28
	if (newPhase == lowside) {              // lowside
 8003eb4:	42aa      	cmp	r2, r5
 8003eb6:	d10d      	bne.n	8003ed4 <playInputTune+0xfc>
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	4644      	mov	r4, r8
 8003ebc:	4017      	ands	r7, r2
 8003ebe:	4662      	mov	r2, ip
 8003ec0:	433a      	orrs	r2, r7
 8003ec2:	601a      	str	r2, [r3, #0]
		GPIOA->BSRR = GPIO_PIN_7;
 8003ec4:	464a      	mov	r2, r9
 8003ec6:	619a      	str	r2, [r3, #24]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	4022      	ands	r2, r4
 8003ecc:	4654      	mov	r4, sl
 8003ece:	4314      	orrs	r4, r2
 8003ed0:	601c      	str	r4, [r3, #0]
		GPIOA->BRR = GPIO_PIN_8;
 8003ed2:	6299      	str	r1, [r3, #40]	; 0x28
	if (newPhase == pwm) {
 8003ed4:	4286      	cmp	r6, r0
 8003ed6:	d034      	beq.n	8003f42 <playInputTune+0x16a>
 8003ed8:	210c      	movs	r1, #12
 8003eda:	4a56      	ldr	r2, [pc, #344]	; (8004034 <playInputTune+0x25c>)
 8003edc:	6813      	ldr	r3, [r2, #0]
 8003ede:	438b      	bics	r3, r1
 8003ee0:	3908      	subs	r1, #8
 8003ee2:	430b      	orrs	r3, r1
 8003ee4:	6013      	str	r3, [r2, #0]
		GPIOB->BRR = GPIO_PIN_1;
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	6293      	str	r3, [r2, #40]	; 0x28
 8003eea:	2390      	movs	r3, #144	; 0x90
 8003eec:	05db      	lsls	r3, r3, #23
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	4954      	ldr	r1, [pc, #336]	; (8004044 <playInputTune+0x26c>)
 8003ef2:	4011      	ands	r1, r2
 8003ef4:	2280      	movs	r2, #128	; 0x80
 8003ef6:	0352      	lsls	r2, r2, #13
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_10;
 8003efc:	2280      	movs	r2, #128	; 0x80
 8003efe:	00d2      	lsls	r2, r2, #3
 8003f00:	629a      	str	r2, [r3, #40]	; 0x28
	if (newPhase == lowside) {
 8003f02:	42ae      	cmp	r6, r5
 8003f04:	d114      	bne.n	8003f30 <playInputTune+0x158>
 8003f06:	210c      	movs	r1, #12
 8003f08:	4a4a      	ldr	r2, [pc, #296]	; (8004034 <playInputTune+0x25c>)
 8003f0a:	6813      	ldr	r3, [r2, #0]
 8003f0c:	438b      	bics	r3, r1
 8003f0e:	3908      	subs	r1, #8
 8003f10:	430b      	orrs	r3, r1
 8003f12:	6013      	str	r3, [r2, #0]
		GPIOB->BSRR = GPIO_PIN_1;
 8003f14:	2302      	movs	r3, #2
 8003f16:	6193      	str	r3, [r2, #24]
 8003f18:	2390      	movs	r3, #144	; 0x90
 8003f1a:	05db      	lsls	r3, r3, #23
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	4949      	ldr	r1, [pc, #292]	; (8004044 <playInputTune+0x26c>)
 8003f20:	4011      	ands	r1, r2
 8003f22:	2280      	movs	r2, #128	; 0x80
 8003f24:	0352      	lsls	r2, r2, #13
 8003f26:	430a      	orrs	r2, r1
 8003f28:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_10;
 8003f2a:	2280      	movs	r2, #128	; 0x80
 8003f2c:	00d2      	lsls	r2, r2, #3
 8003f2e:	629a      	str	r2, [r3, #40]	; 0x28
	allOff();
	TIM1->PSC = 0;
 8003f30:	2200      	movs	r2, #0
 8003f32:	4b3c      	ldr	r3, [pc, #240]	; (8004024 <playInputTune+0x24c>)
 8003f34:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f36:	bc3c      	pop	{r2, r3, r4, r5}
 8003f38:	4690      	mov	r8, r2
 8003f3a:	4699      	mov	r9, r3
 8003f3c:	46a2      	mov	sl, r4
 8003f3e:	46ab      	mov	fp, r5
 8003f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!slow_decay || prop_brake_active){
 8003f42:	4b41      	ldr	r3, [pc, #260]	; (8004048 <playInputTune+0x270>)
 8003f44:	4a3b      	ldr	r2, [pc, #236]	; (8004034 <playInputTune+0x25c>)
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d15f      	bne.n	800400c <playInputTune+0x234>
 8003f4c:	210c      	movs	r1, #12
 8003f4e:	6813      	ldr	r3, [r2, #0]
 8003f50:	438b      	bics	r3, r1
 8003f52:	3908      	subs	r1, #8
 8003f54:	430b      	orrs	r3, r1
 8003f56:	6013      	str	r3, [r2, #0]
			GPIOB->BRR = GPIO_PIN_1;
 8003f58:	2302      	movs	r3, #2
 8003f5a:	6293      	str	r3, [r2, #40]	; 0x28
 8003f5c:	2190      	movs	r1, #144	; 0x90
 8003f5e:	05c9      	lsls	r1, r1, #23
 8003f60:	680b      	ldr	r3, [r1, #0]
 8003f62:	4a38      	ldr	r2, [pc, #224]	; (8004044 <playInputTune+0x26c>)
 8003f64:	401a      	ands	r2, r3
 8003f66:	2380      	movs	r3, #128	; 0x80
 8003f68:	039b      	lsls	r3, r3, #14
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	600b      	str	r3, [r1, #0]
	if (newPhase == floating) {
 8003f6e:	465b      	mov	r3, fp
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	429e      	cmp	r6, r3
 8003f74:	d1c5      	bne.n	8003f02 <playInputTune+0x12a>
 8003f76:	e7af      	b.n	8003ed8 <playInputTune+0x100>
		if (!slow_decay || prop_brake_active){
 8003f78:	4b33      	ldr	r3, [pc, #204]	; (8004048 <playInputTune+0x270>)
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d137      	bne.n	8003ff0 <playInputTune+0x218>
 8003f80:	2390      	movs	r3, #144	; 0x90
 8003f82:	05db      	lsls	r3, r3, #23
 8003f84:	6819      	ldr	r1, [r3, #0]
 8003f86:	4e2d      	ldr	r6, [pc, #180]	; (800403c <playInputTune+0x264>)
 8003f88:	400e      	ands	r6, r1
 8003f8a:	2180      	movs	r1, #128	; 0x80
 8003f8c:	01c9      	lsls	r1, r1, #7
 8003f8e:	4331      	orrs	r1, r6
 8003f90:	6019      	str	r1, [r3, #0]
			GPIOA->BRR = GPIO_PIN_7;
 8003f92:	2180      	movs	r1, #128	; 0x80
 8003f94:	6299      	str	r1, [r3, #40]	; 0x28
 8003f96:	2690      	movs	r6, #144	; 0x90
 8003f98:	05f6      	lsls	r6, r6, #23
 8003f9a:	6833      	ldr	r3, [r6, #0]
 8003f9c:	4928      	ldr	r1, [pc, #160]	; (8004040 <playInputTune+0x268>)
 8003f9e:	4019      	ands	r1, r3
 8003fa0:	2380      	movs	r3, #128	; 0x80
 8003fa2:	029b      	lsls	r3, r3, #10
 8003fa4:	430b      	orrs	r3, r1
 8003fa6:	6033      	str	r3, [r6, #0]
 8003fa8:	0006      	movs	r6, r0
 8003faa:	0010      	movs	r0, r2
 8003fac:	e769      	b.n	8003e82 <playInputTune+0xaa>
		if(!slow_decay  || prop_brake_active){            // for future
 8003fae:	4b26      	ldr	r3, [pc, #152]	; (8004048 <playInputTune+0x270>)
 8003fb0:	4920      	ldr	r1, [pc, #128]	; (8004034 <playInputTune+0x25c>)
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d110      	bne.n	8003fda <playInputTune+0x202>
 8003fb8:	2603      	movs	r6, #3
 8003fba:	680b      	ldr	r3, [r1, #0]
 8003fbc:	43b3      	bics	r3, r6
 8003fbe:	3e02      	subs	r6, #2
 8003fc0:	4333      	orrs	r3, r6
 8003fc2:	600b      	str	r3, [r1, #0]
		GPIOB->BRR = GPIO_PIN_0;
 8003fc4:	628e      	str	r6, [r1, #40]	; 0x28
 8003fc6:	2690      	movs	r6, #144	; 0x90
 8003fc8:	05f6      	lsls	r6, r6, #23
 8003fca:	6833      	ldr	r3, [r6, #0]
 8003fcc:	491a      	ldr	r1, [pc, #104]	; (8004038 <playInputTune+0x260>)
 8003fce:	4019      	ands	r1, r3
 8003fd0:	2380      	movs	r3, #128	; 0x80
 8003fd2:	031b      	lsls	r3, r3, #12
 8003fd4:	430b      	orrs	r3, r1
 8003fd6:	6033      	str	r3, [r6, #0]
 8003fd8:	e726      	b.n	8003e28 <playInputTune+0x50>
		if(!slow_decay  || prop_brake_active){            // for future
 8003fda:	4b1c      	ldr	r3, [pc, #112]	; (800404c <playInputTune+0x274>)
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1ea      	bne.n	8003fb8 <playInputTune+0x1e0>
 8003fe2:	2603      	movs	r6, #3
 8003fe4:	680b      	ldr	r3, [r1, #0]
 8003fe6:	43b3      	bics	r3, r6
 8003fe8:	3e01      	subs	r6, #1
 8003fea:	4333      	orrs	r3, r6
 8003fec:	600b      	str	r3, [r1, #0]
 8003fee:	e7ea      	b.n	8003fc6 <playInputTune+0x1ee>
		if (!slow_decay || prop_brake_active){
 8003ff0:	4b16      	ldr	r3, [pc, #88]	; (800404c <playInputTune+0x274>)
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1c3      	bne.n	8003f80 <playInputTune+0x1a8>
 8003ff8:	2690      	movs	r6, #144	; 0x90
 8003ffa:	05f6      	lsls	r6, r6, #23
 8003ffc:	6833      	ldr	r3, [r6, #0]
 8003ffe:	490f      	ldr	r1, [pc, #60]	; (800403c <playInputTune+0x264>)
 8004000:	4019      	ands	r1, r3
 8004002:	2380      	movs	r3, #128	; 0x80
 8004004:	021b      	lsls	r3, r3, #8
 8004006:	430b      	orrs	r3, r1
 8004008:	6033      	str	r3, [r6, #0]
 800400a:	e7c4      	b.n	8003f96 <playInputTune+0x1be>
		if (!slow_decay || prop_brake_active){
 800400c:	4b0f      	ldr	r3, [pc, #60]	; (800404c <playInputTune+0x274>)
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d19b      	bne.n	8003f4c <playInputTune+0x174>
 8004014:	210c      	movs	r1, #12
 8004016:	6813      	ldr	r3, [r2, #0]
 8004018:	438b      	bics	r3, r1
 800401a:	3904      	subs	r1, #4
 800401c:	430b      	orrs	r3, r1
 800401e:	6013      	str	r3, [r2, #0]
 8004020:	e79c      	b.n	8003f5c <playInputTune+0x184>
 8004022:	46c0      	nop			; (mov r8, r8)
 8004024:	40012c00 	.word	0x40012c00
 8004028:	2000001c 	.word	0x2000001c
 800402c:	20000028 	.word	0x20000028
 8004030:	20000030 	.word	0x20000030
 8004034:	48000400 	.word	0x48000400
 8004038:	fff3ffff 	.word	0xfff3ffff
 800403c:	ffff3fff 	.word	0xffff3fff
 8004040:	fffcffff 	.word	0xfffcffff
 8004044:	ffcfffff 	.word	0xffcfffff
 8004048:	2000003c 	.word	0x2000003c
 800404c:	20000123 	.word	0x20000123

08004050 <HAL_ADC_ConvCpltCallback>:

void getADCs(){
	voltageraw = ADC1ConvertedValues[0];
 8004050:	4b03      	ldr	r3, [pc, #12]	; (8004060 <HAL_ADC_ConvCpltCallback+0x10>)
 8004052:	4a04      	ldr	r2, [pc, #16]	; (8004064 <HAL_ADC_ConvCpltCallback+0x14>)
 8004054:	6819      	ldr	r1, [r3, #0]
 8004056:	6011      	str	r1, [r2, #0]
	currentraw = ADC1ConvertedValues[1];
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	4b03      	ldr	r3, [pc, #12]	; (8004068 <HAL_ADC_ConvCpltCallback+0x18>)
 800405c:	601a      	str	r2, [r3, #0]


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
	getADCs();
}
 800405e:	4770      	bx	lr
 8004060:	20000088 	.word	0x20000088
 8004064:	20000158 	.word	0x20000158
 8004068:	200000b8 	.word	0x200000b8

0800406c <detectInput>:


void detectInput(){
 800406c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800406e:	464e      	mov	r6, r9
 8004070:	46de      	mov	lr, fp
 8004072:	4657      	mov	r7, sl
 8004074:	4645      	mov	r5, r8
	smallestnumber = 20000;
 8004076:	4b3c      	ldr	r3, [pc, #240]	; (8004168 <detectInput+0xfc>)
void detectInput(){
 8004078:	b5e0      	push	{r5, r6, r7, lr}
	smallestnumber = 20000;
 800407a:	4e3c      	ldr	r6, [pc, #240]	; (800416c <detectInput+0x100>)
 800407c:	4699      	mov	r9, r3
 800407e:	601e      	str	r6, [r3, #0]
	dshot = 0;
 8004080:	4b3b      	ldr	r3, [pc, #236]	; (8004170 <detectInput+0x104>)
 8004082:	469b      	mov	fp, r3
 8004084:	2300      	movs	r3, #0
 8004086:	465a      	mov	r2, fp
 8004088:	7013      	strb	r3, [r2, #0]
	proshot = 0;
 800408a:	4a3a      	ldr	r2, [pc, #232]	; (8004174 <detectInput+0x108>)
 800408c:	7013      	strb	r3, [r2, #0]
 800408e:	4692      	mov	sl, r2
	multishot = 0;
 8004090:	4a39      	ldr	r2, [pc, #228]	; (8004178 <detectInput+0x10c>)
 8004092:	7013      	strb	r3, [r2, #0]
	oneshot42 = 0;
 8004094:	4a39      	ldr	r2, [pc, #228]	; (800417c <detectInput+0x110>)
 8004096:	7013      	strb	r3, [r2, #0]
	oneshot125 = 0;
 8004098:	4a39      	ldr	r2, [pc, #228]	; (8004180 <detectInput+0x114>)
 800409a:	7013      	strb	r3, [r2, #0]
	servoPwm = 0;
 800409c:	4a39      	ldr	r2, [pc, #228]	; (8004184 <detectInput+0x118>)
 800409e:	7013      	strb	r3, [r2, #0]
	int lastnumber = dma_buffer[0];
 80040a0:	4b39      	ldr	r3, [pc, #228]	; (8004188 <detectInput+0x11c>)
 80040a2:	681a      	ldr	r2, [r3, #0]
	for ( int j = 1 ; j < input_buffer_size; j++){
 80040a4:	4b39      	ldr	r3, [pc, #228]	; (800418c <detectInput+0x120>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	dd40      	ble.n	800412e <detectInput+0xc2>
 80040ac:	4836      	ldr	r0, [pc, #216]	; (8004188 <detectInput+0x11c>)
 80040ae:	0035      	movs	r5, r6
 80040b0:	4680      	mov	r8, r0
 80040b2:	4935      	ldr	r1, [pc, #212]	; (8004188 <detectInput+0x11c>)
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	3104      	adds	r1, #4
 80040b8:	4498      	add	r8, r3

		if((dma_buffer[j] - lastnumber) < smallestnumber){ // blank space
 80040ba:	6808      	ldr	r0, [r1, #0]
 80040bc:	1a83      	subs	r3, r0, r2
 80040be:	001c      	movs	r4, r3
 80040c0:	002a      	movs	r2, r5
 80040c2:	42ab      	cmp	r3, r5
 80040c4:	d300      	bcc.n	80040c8 <detectInput+0x5c>
 80040c6:	002c      	movs	r4, r5
 80040c8:	0025      	movs	r5, r4
 80040ca:	001f      	movs	r7, r3
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d900      	bls.n	80040d2 <detectInput+0x66>
 80040d0:	0017      	movs	r7, r2
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d300      	bcc.n	80040d8 <detectInput+0x6c>
 80040d6:	0033      	movs	r3, r6
 80040d8:	3104      	adds	r1, #4
 80040da:	001e      	movs	r6, r3
			smallestnumber = dma_buffer[j] - lastnumber;

		}
		lastnumber = dma_buffer[j];
 80040dc:	0002      	movs	r2, r0
	for ( int j = 1 ; j < input_buffer_size; j++){
 80040de:	4541      	cmp	r1, r8
 80040e0:	d1eb      	bne.n	80040ba <detectInput+0x4e>
 80040e2:	464a      	mov	r2, r9
 80040e4:	6013      	str	r3, [r2, #0]
	}

	if ((smallestnumber > 3)&&(smallestnumber < 22)){
 80040e6:	1f3b      	subs	r3, r7, #4
 80040e8:	2b11      	cmp	r3, #17
 80040ea:	d82f      	bhi.n	800414c <detectInput+0xe0>
		dshot = 1;
 80040ec:	465a      	mov	r2, fp
 80040ee:	2301      	movs	r3, #1
 80040f0:	7013      	strb	r3, [r2, #0]
 80040f2:	003a      	movs	r2, r7
 80040f4:	3a65      	subs	r2, #101	; 0x65
	if ((smallestnumber > 40 )&&(smallestnumber < 80)){
		proshot = 1;
		TIM15->PSC=1;
		TIM15->CNT = 0xffff;
	}
	if ((smallestnumber > 100 )&&(smallestnumber < 400)){
 80040f6:	2395      	movs	r3, #149	; 0x95
 80040f8:	005b      	lsls	r3, r3, #1
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d813      	bhi.n	8004126 <detectInput+0xba>
		multishot = 1;
 80040fe:	3b2a      	subs	r3, #42	; 0x2a
 8004100:	4a1d      	ldr	r2, [pc, #116]	; (8004178 <detectInput+0x10c>)
 8004102:	3bff      	subs	r3, #255	; 0xff
 8004104:	7013      	strb	r3, [r2, #0]
		servoPwm = 1;
		TIM15->PSC = 47;
		TIM15->CNT = 0xffff;
	}

	if (smallestnumber == 0){
 8004106:	2c00      	cmp	r4, #0
 8004108:	d119      	bne.n	800413e <detectInput+0xd2>
		inputSet = 0;
 800410a:	4b21      	ldr	r3, [pc, #132]	; (8004190 <detectInput+0x124>)
 800410c:	701c      	strb	r4, [r3, #0]
		inputSet = 1;

		HAL_Delay(50);
		//	playInputTune();
	}
	HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , 64);
 800410e:	2340      	movs	r3, #64	; 0x40
 8004110:	4a1d      	ldr	r2, [pc, #116]	; (8004188 <detectInput+0x11c>)
 8004112:	2100      	movs	r1, #0
 8004114:	481f      	ldr	r0, [pc, #124]	; (8004194 <detectInput+0x128>)
 8004116:	f7fd fd45 	bl	8001ba4 <HAL_TIM_IC_Start_DMA>
}
 800411a:	bc3c      	pop	{r2, r3, r4, r5}
 800411c:	4690      	mov	r8, r2
 800411e:	4699      	mov	r9, r3
 8004120:	46a2      	mov	sl, r4
 8004122:	46ab      	mov	fp, r5
 8004124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (smallestnumber > 2000){
 8004126:	23fa      	movs	r3, #250	; 0xfa
 8004128:	00db      	lsls	r3, r3, #3
 800412a:	429c      	cmp	r4, r3
 800412c:	ddeb      	ble.n	8004106 <detectInput+0x9a>
		servoPwm = 1;
 800412e:	2301      	movs	r3, #1
 8004130:	4a14      	ldr	r2, [pc, #80]	; (8004184 <detectInput+0x118>)
 8004132:	7013      	strb	r3, [r2, #0]
		TIM15->PSC = 47;
 8004134:	222f      	movs	r2, #47	; 0x2f
 8004136:	4b18      	ldr	r3, [pc, #96]	; (8004198 <detectInput+0x12c>)
 8004138:	629a      	str	r2, [r3, #40]	; 0x28
		TIM15->CNT = 0xffff;
 800413a:	4a18      	ldr	r2, [pc, #96]	; (800419c <detectInput+0x130>)
 800413c:	625a      	str	r2, [r3, #36]	; 0x24
		inputSet = 1;
 800413e:	2201      	movs	r2, #1
 8004140:	4b13      	ldr	r3, [pc, #76]	; (8004190 <detectInput+0x124>)
		HAL_Delay(50);
 8004142:	2032      	movs	r0, #50	; 0x32
		inputSet = 1;
 8004144:	701a      	strb	r2, [r3, #0]
		HAL_Delay(50);
 8004146:	f7fc f985 	bl	8000454 <HAL_Delay>
 800414a:	e7e0      	b.n	800410e <detectInput+0xa2>
 800414c:	003a      	movs	r2, r7
	if ((smallestnumber > 40 )&&(smallestnumber < 80)){
 800414e:	3f29      	subs	r7, #41	; 0x29
 8004150:	3a65      	subs	r2, #101	; 0x65
 8004152:	2f26      	cmp	r7, #38	; 0x26
 8004154:	d8cf      	bhi.n	80040f6 <detectInput+0x8a>
		proshot = 1;
 8004156:	2101      	movs	r1, #1
 8004158:	4653      	mov	r3, sl
 800415a:	7019      	strb	r1, [r3, #0]
		TIM15->PSC=1;
 800415c:	4b0e      	ldr	r3, [pc, #56]	; (8004198 <detectInput+0x12c>)
 800415e:	6299      	str	r1, [r3, #40]	; 0x28
		TIM15->CNT = 0xffff;
 8004160:	490e      	ldr	r1, [pc, #56]	; (800419c <detectInput+0x130>)
 8004162:	6259      	str	r1, [r3, #36]	; 0x24
 8004164:	e7c7      	b.n	80040f6 <detectInput+0x8a>
 8004166:	46c0      	nop			; (mov r8, r8)
 8004168:	20000040 	.word	0x20000040
 800416c:	00004e20 	.word	0x00004e20
 8004170:	20000100 	.word	0x20000100
 8004174:	20000134 	.word	0x20000134
 8004178:	20000118 	.word	0x20000118
 800417c:	20000121 	.word	0x20000121
 8004180:	20000120 	.word	0x20000120
 8004184:	20000140 	.word	0x20000140
 8004188:	20000264 	.word	0x20000264
 800418c:	20000024 	.word	0x20000024
 8004190:	20000110 	.word	0x20000110
 8004194:	20000190 	.word	0x20000190
 8004198:	40014000 	.word	0x40014000
 800419c:	0000ffff 	.word	0x0000ffff

080041a0 <computeProshotDMA>:

void computeProshotDMA(){
 80041a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041a2:	46d6      	mov	lr, sl
 80041a4:	464f      	mov	r7, r9
 80041a6:	4646      	mov	r6, r8
	int lastnumber = dma_buffer[0];
	for ( int j = 1 ; j < 9; j++){

		if(((dma_buffer[j] - lastnumber) > 1500) && ((dma_buffer[j] - lastnumber) < 50000)){ // blank space
 80041a8:	4c67      	ldr	r4, [pc, #412]	; (8004348 <computeProshotDMA+0x1a8>)
 80041aa:	4a68      	ldr	r2, [pc, #416]	; (800434c <computeProshotDMA+0x1ac>)
 80041ac:	6863      	ldr	r3, [r4, #4]
void computeProshotDMA(){
 80041ae:	b5c0      	push	{r6, r7, lr}
		if(((dma_buffer[j] - lastnumber) > 1500) && ((dma_buffer[j] - lastnumber) < 50000)){ // blank space
 80041b0:	1899      	adds	r1, r3, r2
 80041b2:	6822      	ldr	r2, [r4, #0]
 80041b4:	1a89      	subs	r1, r1, r2
 80041b6:	4a66      	ldr	r2, [pc, #408]	; (8004350 <computeProshotDMA+0x1b0>)
 80041b8:	4291      	cmp	r1, r2
 80041ba:	d935      	bls.n	8004228 <computeProshotDMA+0x88>
 80041bc:	68a0      	ldr	r0, [r4, #8]
 80041be:	4963      	ldr	r1, [pc, #396]	; (800434c <computeProshotDMA+0x1ac>)
 80041c0:	1841      	adds	r1, r0, r1
 80041c2:	1acb      	subs	r3, r1, r3
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d800      	bhi.n	80041ca <computeProshotDMA+0x2a>
 80041c8:	e0a3      	b.n	8004312 <computeProshotDMA+0x172>
 80041ca:	68e3      	ldr	r3, [r4, #12]
 80041cc:	495f      	ldr	r1, [pc, #380]	; (800434c <computeProshotDMA+0x1ac>)
 80041ce:	1859      	adds	r1, r3, r1
 80041d0:	1a09      	subs	r1, r1, r0
 80041d2:	4291      	cmp	r1, r2
 80041d4:	d800      	bhi.n	80041d8 <computeProshotDMA+0x38>
 80041d6:	e09f      	b.n	8004318 <computeProshotDMA+0x178>
 80041d8:	6920      	ldr	r0, [r4, #16]
 80041da:	495c      	ldr	r1, [pc, #368]	; (800434c <computeProshotDMA+0x1ac>)
 80041dc:	1841      	adds	r1, r0, r1
 80041de:	1acb      	subs	r3, r1, r3
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d800      	bhi.n	80041e6 <computeProshotDMA+0x46>
 80041e4:	e09a      	b.n	800431c <computeProshotDMA+0x17c>
 80041e6:	6963      	ldr	r3, [r4, #20]
 80041e8:	4958      	ldr	r1, [pc, #352]	; (800434c <computeProshotDMA+0x1ac>)
 80041ea:	1859      	adds	r1, r3, r1
 80041ec:	1a09      	subs	r1, r1, r0
 80041ee:	4291      	cmp	r1, r2
 80041f0:	d800      	bhi.n	80041f4 <computeProshotDMA+0x54>
 80041f2:	e096      	b.n	8004322 <computeProshotDMA+0x182>
 80041f4:	69a0      	ldr	r0, [r4, #24]
 80041f6:	4955      	ldr	r1, [pc, #340]	; (800434c <computeProshotDMA+0x1ac>)
 80041f8:	1841      	adds	r1, r0, r1
 80041fa:	1acb      	subs	r3, r1, r3
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d800      	bhi.n	8004202 <computeProshotDMA+0x62>
 8004200:	e091      	b.n	8004326 <computeProshotDMA+0x186>
 8004202:	69e3      	ldr	r3, [r4, #28]
 8004204:	4951      	ldr	r1, [pc, #324]	; (800434c <computeProshotDMA+0x1ac>)
 8004206:	1859      	adds	r1, r3, r1
 8004208:	1a09      	subs	r1, r1, r0
 800420a:	4291      	cmp	r1, r2
 800420c:	d800      	bhi.n	8004210 <computeProshotDMA+0x70>
 800420e:	e08d      	b.n	800432c <computeProshotDMA+0x18c>
 8004210:	6a20      	ldr	r0, [r4, #32]
 8004212:	494e      	ldr	r1, [pc, #312]	; (800434c <computeProshotDMA+0x1ac>)
 8004214:	1841      	adds	r1, r0, r1
 8004216:	1acb      	subs	r3, r1, r3
 8004218:	4293      	cmp	r3, r2
 800421a:	d800      	bhi.n	800421e <computeProshotDMA+0x7e>
 800421c:	e088      	b.n	8004330 <computeProshotDMA+0x190>
            }
			break;
		}
		lastnumber = dma_buffer[j];
	}
}
 800421e:	bc1c      	pop	{r2, r3, r4}
 8004220:	4690      	mov	r8, r2
 8004222:	4699      	mov	r9, r3
 8004224:	46a2      	mov	sl, r4
 8004226:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for ( int j = 1 ; j < 9; j++){
 8004228:	2501      	movs	r5, #1
			if ((dma_buffer[j+7] - dma_buffer[j])<10000){
 800422a:	1dea      	adds	r2, r5, #7
 800422c:	0092      	lsls	r2, r2, #2
 800422e:	58a7      	ldr	r7, [r4, r2]
 8004230:	4a48      	ldr	r2, [pc, #288]	; (8004354 <computeProshotDMA+0x1b4>)
 8004232:	1afb      	subs	r3, r7, r3
 8004234:	4293      	cmp	r3, r2
 8004236:	d921      	bls.n	800427c <computeProshotDMA+0xdc>
 8004238:	4b47      	ldr	r3, [pc, #284]	; (8004358 <computeProshotDMA+0x1b8>)
 800423a:	781a      	ldrb	r2, [r3, #0]
 800423c:	4b47      	ldr	r3, [pc, #284]	; (800435c <computeProshotDMA+0x1bc>)
 800423e:	781b      	ldrb	r3, [r3, #0]
            if (calcCRC == checkCRC){
 8004240:	429a      	cmp	r2, r3
 8004242:	d1ec      	bne.n	800421e <computeProshotDMA+0x7e>
			int tocheck = ((propulse[0]<<7 | propulse[1]<<3 | propulse[2]>>1));
 8004244:	4a46      	ldr	r2, [pc, #280]	; (8004360 <computeProshotDMA+0x1c0>)
 8004246:	6813      	ldr	r3, [r2, #0]
 8004248:	6851      	ldr	r1, [r2, #4]
 800424a:	6892      	ldr	r2, [r2, #8]
 800424c:	01db      	lsls	r3, r3, #7
 800424e:	00c9      	lsls	r1, r1, #3
 8004250:	1052      	asrs	r2, r2, #1
 8004252:	430b      	orrs	r3, r1
 8004254:	4313      	orrs	r3, r2
			if (tocheck > 2047 || tocheck < 0){
 8004256:	4a43      	ldr	r2, [pc, #268]	; (8004364 <computeProshotDMA+0x1c4>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d8e0      	bhi.n	800421e <computeProshotDMA+0x7e>
				if(tocheck > 47){
 800425c:	2b2f      	cmp	r3, #47	; 0x2f
 800425e:	dd04      	ble.n	800426a <computeProshotDMA+0xca>
					dshotcommand = 0;
 8004260:	2100      	movs	r1, #0
					newinput = tocheck;
 8004262:	4a41      	ldr	r2, [pc, #260]	; (8004368 <computeProshotDMA+0x1c8>)
 8004264:	6013      	str	r3, [r2, #0]
					dshotcommand = 0;
 8004266:	4a41      	ldr	r2, [pc, #260]	; (800436c <computeProshotDMA+0x1cc>)
 8004268:	6011      	str	r1, [r2, #0]
				if ((tocheck <= 47)&& (tocheck > 0)){
 800426a:	1e5a      	subs	r2, r3, #1
 800426c:	2a2e      	cmp	r2, #46	; 0x2e
 800426e:	d862      	bhi.n	8004336 <computeProshotDMA+0x196>
					newinput = 0;
 8004270:	2100      	movs	r1, #0
 8004272:	4a3d      	ldr	r2, [pc, #244]	; (8004368 <computeProshotDMA+0x1c8>)
 8004274:	6011      	str	r1, [r2, #0]
					dshotcommand = tocheck;    //  todo
 8004276:	4a3d      	ldr	r2, [pc, #244]	; (800436c <computeProshotDMA+0x1cc>)
 8004278:	6013      	str	r3, [r2, #0]
 800427a:	e7d0      	b.n	800421e <computeProshotDMA+0x7e>
					propulse[i] = (((dma_buffer[j + i*2 +1] - dma_buffer[j + i*2])) - 23)/3;
 800427c:	1c6b      	adds	r3, r5, #1
 800427e:	00aa      	lsls	r2, r5, #2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	58e0      	ldr	r0, [r4, r3]
 8004284:	58a3      	ldr	r3, [r4, r2]
 8004286:	2103      	movs	r1, #3
 8004288:	1ac0      	subs	r0, r0, r3
 800428a:	3817      	subs	r0, #23
 800428c:	f7fb ff3c 	bl	8000108 <__udivsi3>
 8004290:	4b33      	ldr	r3, [pc, #204]	; (8004360 <computeProshotDMA+0x1c0>)
 8004292:	1cea      	adds	r2, r5, #3
 8004294:	4698      	mov	r8, r3
 8004296:	6018      	str	r0, [r3, #0]
 8004298:	1cab      	adds	r3, r5, #2
 800429a:	0092      	lsls	r2, r2, #2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	58e3      	ldr	r3, [r4, r3]
 80042a0:	4682      	mov	sl, r0
 80042a2:	58a0      	ldr	r0, [r4, r2]
 80042a4:	2103      	movs	r1, #3
 80042a6:	1ac0      	subs	r0, r0, r3
 80042a8:	3817      	subs	r0, #23
 80042aa:	f7fb ff2d 	bl	8000108 <__udivsi3>
 80042ae:	4643      	mov	r3, r8
 80042b0:	1d6a      	adds	r2, r5, #5
 80042b2:	6058      	str	r0, [r3, #4]
 80042b4:	1d2b      	adds	r3, r5, #4
 80042b6:	0092      	lsls	r2, r2, #2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	58e3      	ldr	r3, [r4, r3]
 80042bc:	0006      	movs	r6, r0
 80042be:	58a0      	ldr	r0, [r4, r2]
 80042c0:	2103      	movs	r1, #3
 80042c2:	1ac0      	subs	r0, r0, r3
 80042c4:	3817      	subs	r0, #23
 80042c6:	f7fb ff1f 	bl	8000108 <__udivsi3>
 80042ca:	4643      	mov	r3, r8
 80042cc:	3506      	adds	r5, #6
 80042ce:	00ad      	lsls	r5, r5, #2
 80042d0:	6098      	str	r0, [r3, #8]
 80042d2:	4681      	mov	r9, r0
 80042d4:	5960      	ldr	r0, [r4, r5]
 80042d6:	2103      	movs	r1, #3
 80042d8:	1a38      	subs	r0, r7, r0
 80042da:	3817      	subs	r0, #23
 80042dc:	f7fb ff14 	bl	8000108 <__udivsi3>
 80042e0:	4643      	mov	r3, r8
 80042e2:	60d8      	str	r0, [r3, #12]
				calcCRC = ((propulse[0]^propulse[1]^propulse[2])<<3
 80042e4:	4653      	mov	r3, sl
 80042e6:	405e      	eors	r6, r3
 80042e8:	464b      	mov	r3, r9
 80042ea:	405e      	eors	r6, r3
						|(propulse[0]^propulse[1]^propulse[2])<<2
 80042ec:	00b3      	lsls	r3, r6, #2
				calcCRC = ((propulse[0]^propulse[1]^propulse[2])<<3
 80042ee:	00f2      	lsls	r2, r6, #3
						|(propulse[0]^propulse[1]^propulse[2])<<2
 80042f0:	431a      	orrs	r2, r3
						|(propulse[0]^propulse[1]^propulse[2]));
 80042f2:	4332      	orrs	r2, r6
						|(propulse[0]^propulse[1]^propulse[2])<<1
 80042f4:	0076      	lsls	r6, r6, #1
				calcCRC = ((propulse[0]^propulse[1]^propulse[2])<<3
 80042f6:	4b18      	ldr	r3, [pc, #96]	; (8004358 <computeProshotDMA+0x1b8>)
						|(propulse[0]^propulse[1]^propulse[2]));
 80042f8:	4332      	orrs	r2, r6
 80042fa:	b2d2      	uxtb	r2, r2
				checkCRC = (propulse[3]<<3 | propulse[3]<<2 | propulse[3]<<1 | propulse[3]);
 80042fc:	0081      	lsls	r1, r0, #2
				calcCRC = ((propulse[0]^propulse[1]^propulse[2])<<3
 80042fe:	701a      	strb	r2, [r3, #0]
				checkCRC = (propulse[3]<<3 | propulse[3]<<2 | propulse[3]<<1 | propulse[3]);
 8004300:	00c3      	lsls	r3, r0, #3
 8004302:	430b      	orrs	r3, r1
 8004304:	4303      	orrs	r3, r0
 8004306:	0040      	lsls	r0, r0, #1
 8004308:	4303      	orrs	r3, r0
 800430a:	4914      	ldr	r1, [pc, #80]	; (800435c <computeProshotDMA+0x1bc>)
 800430c:	b2db      	uxtb	r3, r3
 800430e:	700b      	strb	r3, [r1, #0]
 8004310:	e796      	b.n	8004240 <computeProshotDMA+0xa0>
		if(((dma_buffer[j] - lastnumber) > 1500) && ((dma_buffer[j] - lastnumber) < 50000)){ // blank space
 8004312:	0003      	movs	r3, r0
	for ( int j = 1 ; j < 9; j++){
 8004314:	2502      	movs	r5, #2
 8004316:	e788      	b.n	800422a <computeProshotDMA+0x8a>
 8004318:	2503      	movs	r5, #3
 800431a:	e786      	b.n	800422a <computeProshotDMA+0x8a>
		if(((dma_buffer[j] - lastnumber) > 1500) && ((dma_buffer[j] - lastnumber) < 50000)){ // blank space
 800431c:	0003      	movs	r3, r0
	for ( int j = 1 ; j < 9; j++){
 800431e:	2504      	movs	r5, #4
 8004320:	e783      	b.n	800422a <computeProshotDMA+0x8a>
 8004322:	2505      	movs	r5, #5
 8004324:	e781      	b.n	800422a <computeProshotDMA+0x8a>
		if(((dma_buffer[j] - lastnumber) > 1500) && ((dma_buffer[j] - lastnumber) < 50000)){ // blank space
 8004326:	0003      	movs	r3, r0
	for ( int j = 1 ; j < 9; j++){
 8004328:	2506      	movs	r5, #6
 800432a:	e77e      	b.n	800422a <computeProshotDMA+0x8a>
 800432c:	2507      	movs	r5, #7
 800432e:	e77c      	b.n	800422a <computeProshotDMA+0x8a>
		if(((dma_buffer[j] - lastnumber) > 1500) && ((dma_buffer[j] - lastnumber) < 50000)){ // blank space
 8004330:	0003      	movs	r3, r0
	for ( int j = 1 ; j < 9; j++){
 8004332:	2508      	movs	r5, #8
 8004334:	e779      	b.n	800422a <computeProshotDMA+0x8a>
				if (tocheck == 0){
 8004336:	2b00      	cmp	r3, #0
 8004338:	d000      	beq.n	800433c <computeProshotDMA+0x19c>
 800433a:	e770      	b.n	800421e <computeProshotDMA+0x7e>
					newinput = 0;
 800433c:	4a0a      	ldr	r2, [pc, #40]	; (8004368 <computeProshotDMA+0x1c8>)
 800433e:	6013      	str	r3, [r2, #0]
					dshotcommand = 0;
 8004340:	4a0a      	ldr	r2, [pc, #40]	; (800436c <computeProshotDMA+0x1cc>)
 8004342:	6013      	str	r3, [r2, #0]
}
 8004344:	e76b      	b.n	800421e <computeProshotDMA+0x7e>
 8004346:	46c0      	nop			; (mov r8, r8)
 8004348:	20000264 	.word	0x20000264
 800434c:	fffffa23 	.word	0xfffffa23
 8004350:	0000bd72 	.word	0x0000bd72
 8004354:	0000270f 	.word	0x0000270f
 8004358:	200001d0 	.word	0x200001d0
 800435c:	200001e4 	.word	0x200001e4
 8004360:	20000124 	.word	0x20000124
 8004364:	000007ff 	.word	0x000007ff
 8004368:	2000011c 	.word	0x2000011c
 800436c:	20000104 	.word	0x20000104

08004370 <computeDshotDMA>:
		lastnumber = dma_buffer[j];
	}
}


void computeDshotDMA(){
 8004370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004372:	464e      	mov	r6, r9
 8004374:	4645      	mov	r5, r8
 8004376:	46de      	mov	lr, fp
 8004378:	4657      	mov	r7, sl
 800437a:	b5e0      	push	{r5, r6, r7, lr}

	int lastnumber = dma_buffer[0];
	for ( int j = 1 ; j < input_buffer_size; j++){
 800437c:	4bb0      	ldr	r3, [pc, #704]	; (8004640 <computeDshotDMA+0x2d0>)
	int lastnumber = dma_buffer[0];
 800437e:	4db1      	ldr	r5, [pc, #708]	; (8004644 <computeDshotDMA+0x2d4>)
	for ( int j = 1 ; j < input_buffer_size; j++){
 8004380:	681e      	ldr	r6, [r3, #0]
void computeDshotDMA(){
 8004382:	b08b      	sub	sp, #44	; 0x2c
	int lastnumber = dma_buffer[0];
 8004384:	6829      	ldr	r1, [r5, #0]
	for ( int j = 1 ; j < input_buffer_size; j++){
 8004386:	2e01      	cmp	r6, #1
 8004388:	dd15      	ble.n	80043b6 <computeDshotDMA+0x46>

		if(((dma_buffer[j] - lastnumber) > 50) && ((dma_buffer[j] - lastnumber) < 65000)){ // blank space
 800438a:	686b      	ldr	r3, [r5, #4]
 800438c:	48ae      	ldr	r0, [pc, #696]	; (8004648 <computeDshotDMA+0x2d8>)
 800438e:	001a      	movs	r2, r3
 8004390:	3a33      	subs	r2, #51	; 0x33
 8004392:	1a52      	subs	r2, r2, r1
 8004394:	4282      	cmp	r2, r0
 8004396:	d915      	bls.n	80043c4 <computeDshotDMA+0x54>
 8004398:	0029      	movs	r1, r5
 800439a:	2733      	movs	r7, #51	; 0x33
 800439c:	3108      	adds	r1, #8
 800439e:	2401      	movs	r4, #1
 80043a0:	427f      	negs	r7, r7
 80043a2:	e005      	b.n	80043b0 <computeDshotDMA+0x40>
 80043a4:	c904      	ldmia	r1!, {r2}
 80043a6:	1afb      	subs	r3, r7, r3
 80043a8:	189b      	adds	r3, r3, r2
 80043aa:	4283      	cmp	r3, r0
 80043ac:	d90b      	bls.n	80043c6 <computeDshotDMA+0x56>
 80043ae:	0013      	movs	r3, r2
	for ( int j = 1 ; j < input_buffer_size; j++){
 80043b0:	3401      	adds	r4, #1
 80043b2:	42b4      	cmp	r4, r6
 80043b4:	d1f6      	bne.n	80043a4 <computeDshotDMA+0x34>

			break;
		}
		lastnumber = dma_buffer[j];
	}
}
 80043b6:	b00b      	add	sp, #44	; 0x2c
 80043b8:	bc3c      	pop	{r2, r3, r4, r5}
 80043ba:	4690      	mov	r8, r2
 80043bc:	4699      	mov	r9, r3
 80043be:	46a2      	mov	sl, r4
 80043c0:	46ab      	mov	fp, r5
 80043c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for ( int j = 1 ; j < input_buffer_size; j++){
 80043c4:	2401      	movs	r4, #1
				dpulse[i] = ((dma_buffer[j + i*2 +1] - dma_buffer[j + i*2]) / 13) - 1;
 80043c6:	1c63      	adds	r3, r4, #1
 80043c8:	00a2      	lsls	r2, r4, #2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	58e8      	ldr	r0, [r5, r3]
 80043ce:	58ab      	ldr	r3, [r5, r2]
 80043d0:	210d      	movs	r1, #13
 80043d2:	1ac0      	subs	r0, r0, r3
 80043d4:	f7fb fe98 	bl	8000108 <__udivsi3>
 80043d8:	1ce2      	adds	r2, r4, #3
 80043da:	1ca3      	adds	r3, r4, #2
 80043dc:	0092      	lsls	r2, r2, #2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	4f9a      	ldr	r7, [pc, #616]	; (800464c <computeDshotDMA+0x2dc>)
 80043e2:	1e46      	subs	r6, r0, #1
 80043e4:	58eb      	ldr	r3, [r5, r3]
 80043e6:	58a8      	ldr	r0, [r5, r2]
 80043e8:	603e      	str	r6, [r7, #0]
 80043ea:	1ac0      	subs	r0, r0, r3
 80043ec:	210d      	movs	r1, #13
 80043ee:	f7fb fe8b 	bl	8000108 <__udivsi3>
 80043f2:	1e43      	subs	r3, r0, #1
 80043f4:	607b      	str	r3, [r7, #4]
 80043f6:	9302      	str	r3, [sp, #8]
 80043f8:	1d62      	adds	r2, r4, #5
 80043fa:	1d23      	adds	r3, r4, #4
 80043fc:	0092      	lsls	r2, r2, #2
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	58a8      	ldr	r0, [r5, r2]
 8004402:	58eb      	ldr	r3, [r5, r3]
 8004404:	210d      	movs	r1, #13
 8004406:	1ac0      	subs	r0, r0, r3
 8004408:	f7fb fe7e 	bl	8000108 <__udivsi3>
 800440c:	1e42      	subs	r2, r0, #1
 800440e:	4691      	mov	r9, r2
 8004410:	60ba      	str	r2, [r7, #8]
 8004412:	1da3      	adds	r3, r4, #6
 8004414:	1de2      	adds	r2, r4, #7
 8004416:	0092      	lsls	r2, r2, #2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	58a8      	ldr	r0, [r5, r2]
 800441c:	58eb      	ldr	r3, [r5, r3]
 800441e:	210d      	movs	r1, #13
 8004420:	1ac0      	subs	r0, r0, r3
 8004422:	f7fb fe71 	bl	8000108 <__udivsi3>
 8004426:	0021      	movs	r1, r4
 8004428:	1e42      	subs	r2, r0, #1
 800442a:	3109      	adds	r1, #9
 800442c:	60fa      	str	r2, [r7, #12]
 800442e:	9203      	str	r2, [sp, #12]
 8004430:	008a      	lsls	r2, r1, #2
 8004432:	3901      	subs	r1, #1
 8004434:	008b      	lsls	r3, r1, #2
 8004436:	58a8      	ldr	r0, [r5, r2]
 8004438:	58eb      	ldr	r3, [r5, r3]
 800443a:	210d      	movs	r1, #13
 800443c:	1ac0      	subs	r0, r0, r3
 800443e:	f7fb fe63 	bl	8000108 <__udivsi3>
 8004442:	1e41      	subs	r1, r0, #1
 8004444:	0020      	movs	r0, r4
 8004446:	300b      	adds	r0, #11
 8004448:	0082      	lsls	r2, r0, #2
 800444a:	3801      	subs	r0, #1
 800444c:	0083      	lsls	r3, r0, #2
 800444e:	58eb      	ldr	r3, [r5, r3]
 8004450:	58a8      	ldr	r0, [r5, r2]
 8004452:	6139      	str	r1, [r7, #16]
 8004454:	9104      	str	r1, [sp, #16]
 8004456:	1ac0      	subs	r0, r0, r3
 8004458:	210d      	movs	r1, #13
 800445a:	f7fb fe55 	bl	8000108 <__udivsi3>
 800445e:	0022      	movs	r2, r4
 8004460:	0023      	movs	r3, r4
 8004462:	320d      	adds	r2, #13
 8004464:	330c      	adds	r3, #12
 8004466:	3801      	subs	r0, #1
 8004468:	0092      	lsls	r2, r2, #2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	58eb      	ldr	r3, [r5, r3]
 800446e:	6178      	str	r0, [r7, #20]
 8004470:	9005      	str	r0, [sp, #20]
 8004472:	58a8      	ldr	r0, [r5, r2]
 8004474:	210d      	movs	r1, #13
 8004476:	1ac0      	subs	r0, r0, r3
 8004478:	f7fb fe46 	bl	8000108 <__udivsi3>
 800447c:	1e43      	subs	r3, r0, #1
 800447e:	4698      	mov	r8, r3
 8004480:	61bb      	str	r3, [r7, #24]
 8004482:	0022      	movs	r2, r4
 8004484:	0023      	movs	r3, r4
 8004486:	320f      	adds	r2, #15
 8004488:	330e      	adds	r3, #14
 800448a:	0092      	lsls	r2, r2, #2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	58a8      	ldr	r0, [r5, r2]
 8004490:	58eb      	ldr	r3, [r5, r3]
 8004492:	210d      	movs	r1, #13
 8004494:	1ac0      	subs	r0, r0, r3
 8004496:	f7fb fe37 	bl	8000108 <__udivsi3>
 800449a:	1e43      	subs	r3, r0, #1
 800449c:	469a      	mov	sl, r3
 800449e:	61fb      	str	r3, [r7, #28]
 80044a0:	0022      	movs	r2, r4
 80044a2:	0023      	movs	r3, r4
 80044a4:	3211      	adds	r2, #17
 80044a6:	3310      	adds	r3, #16
 80044a8:	0092      	lsls	r2, r2, #2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	58a8      	ldr	r0, [r5, r2]
 80044ae:	58eb      	ldr	r3, [r5, r3]
 80044b0:	210d      	movs	r1, #13
 80044b2:	1ac0      	subs	r0, r0, r3
 80044b4:	f7fb fe28 	bl	8000108 <__udivsi3>
 80044b8:	0022      	movs	r2, r4
 80044ba:	1e43      	subs	r3, r0, #1
 80044bc:	0020      	movs	r0, r4
 80044be:	3213      	adds	r2, #19
 80044c0:	3012      	adds	r0, #18
 80044c2:	623b      	str	r3, [r7, #32]
 80044c4:	0092      	lsls	r2, r2, #2
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	0083      	lsls	r3, r0, #2
 80044ca:	58eb      	ldr	r3, [r5, r3]
 80044cc:	58a8      	ldr	r0, [r5, r2]
 80044ce:	210d      	movs	r1, #13
 80044d0:	1ac0      	subs	r0, r0, r3
 80044d2:	f7fb fe19 	bl	8000108 <__udivsi3>
 80044d6:	1e42      	subs	r2, r0, #1
 80044d8:	0020      	movs	r0, r4
 80044da:	3015      	adds	r0, #21
 80044dc:	627a      	str	r2, [r7, #36]	; 0x24
 80044de:	9201      	str	r2, [sp, #4]
 80044e0:	0082      	lsls	r2, r0, #2
 80044e2:	3801      	subs	r0, #1
 80044e4:	0083      	lsls	r3, r0, #2
 80044e6:	58eb      	ldr	r3, [r5, r3]
 80044e8:	58a8      	ldr	r0, [r5, r2]
 80044ea:	210d      	movs	r1, #13
 80044ec:	1ac0      	subs	r0, r0, r3
 80044ee:	f7fb fe0b 	bl	8000108 <__udivsi3>
 80044f2:	3801      	subs	r0, #1
 80044f4:	4683      	mov	fp, r0
 80044f6:	62b8      	str	r0, [r7, #40]	; 0x28
 80044f8:	0020      	movs	r0, r4
 80044fa:	3017      	adds	r0, #23
 80044fc:	0082      	lsls	r2, r0, #2
 80044fe:	3801      	subs	r0, #1
 8004500:	0083      	lsls	r3, r0, #2
 8004502:	58eb      	ldr	r3, [r5, r3]
 8004504:	58a8      	ldr	r0, [r5, r2]
 8004506:	210d      	movs	r1, #13
 8004508:	1ac0      	subs	r0, r0, r3
 800450a:	f7fb fdfd 	bl	8000108 <__udivsi3>
 800450e:	0022      	movs	r2, r4
 8004510:	0023      	movs	r3, r4
 8004512:	3219      	adds	r2, #25
 8004514:	3318      	adds	r3, #24
 8004516:	3801      	subs	r0, #1
 8004518:	0092      	lsls	r2, r2, #2
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	58eb      	ldr	r3, [r5, r3]
 800451e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004520:	9006      	str	r0, [sp, #24]
 8004522:	58a8      	ldr	r0, [r5, r2]
 8004524:	210d      	movs	r1, #13
 8004526:	1ac0      	subs	r0, r0, r3
 8004528:	f7fb fdee 	bl	8000108 <__udivsi3>
 800452c:	0022      	movs	r2, r4
 800452e:	0023      	movs	r3, r4
 8004530:	321b      	adds	r2, #27
 8004532:	331a      	adds	r3, #26
 8004534:	0092      	lsls	r2, r2, #2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	1e41      	subs	r1, r0, #1
 800453a:	58eb      	ldr	r3, [r5, r3]
 800453c:	58a8      	ldr	r0, [r5, r2]
 800453e:	6339      	str	r1, [r7, #48]	; 0x30
 8004540:	9107      	str	r1, [sp, #28]
 8004542:	1ac0      	subs	r0, r0, r3
 8004544:	210d      	movs	r1, #13
 8004546:	f7fb fddf 	bl	8000108 <__udivsi3>
 800454a:	1e43      	subs	r3, r0, #1
 800454c:	637b      	str	r3, [r7, #52]	; 0x34
 800454e:	9308      	str	r3, [sp, #32]
 8004550:	0022      	movs	r2, r4
 8004552:	0023      	movs	r3, r4
 8004554:	321d      	adds	r2, #29
 8004556:	331c      	adds	r3, #28
 8004558:	0092      	lsls	r2, r2, #2
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	58a8      	ldr	r0, [r5, r2]
 800455e:	58eb      	ldr	r3, [r5, r3]
 8004560:	210d      	movs	r1, #13
 8004562:	1ac0      	subs	r0, r0, r3
 8004564:	f7fb fdd0 	bl	8000108 <__udivsi3>
 8004568:	0023      	movs	r3, r4
 800456a:	341e      	adds	r4, #30
 800456c:	331f      	adds	r3, #31
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	00a4      	lsls	r4, r4, #2
 8004572:	1e42      	subs	r2, r0, #1
 8004574:	58e8      	ldr	r0, [r5, r3]
 8004576:	592b      	ldr	r3, [r5, r4]
 8004578:	63ba      	str	r2, [r7, #56]	; 0x38
 800457a:	1ac0      	subs	r0, r0, r3
 800457c:	210d      	movs	r1, #13
 800457e:	9209      	str	r2, [sp, #36]	; 0x24
 8004580:	f7fb fdc2 	bl	8000108 <__udivsi3>
			int tocheck = (
 8004584:	465d      	mov	r5, fp
				dpulse[i] = ((dma_buffer[j + i*2 +1] - dma_buffer[j + i*2]) / 13) - 1;
 8004586:	1e42      	subs	r2, r0, #1
					dpulse[0]<<10 | dpulse[1]<<9 | dpulse[2]<<8 | dpulse[3]<<7
 8004588:	9802      	ldr	r0, [sp, #8]
 800458a:	02b3      	lsls	r3, r6, #10
 800458c:	0241      	lsls	r1, r0, #9
 800458e:	430b      	orrs	r3, r1
			int tocheck = (
 8004590:	432b      	orrs	r3, r5
					dpulse[0]<<10 | dpulse[1]<<9 | dpulse[2]<<8 | dpulse[3]<<7
 8004592:	464d      	mov	r5, r9
 8004594:	9c03      	ldr	r4, [sp, #12]
 8004596:	0229      	lsls	r1, r5, #8
					| dpulse[4]<<6 | dpulse[5]<<5 | dpulse[6]<<4 | dpulse[7]<<3
 8004598:	9d04      	ldr	r5, [sp, #16]
				dpulse[i] = ((dma_buffer[j + i*2 +1] - dma_buffer[j + i*2]) / 13) - 1;
 800459a:	63fa      	str	r2, [r7, #60]	; 0x3c
			int tocheck = (
 800459c:	430b      	orrs	r3, r1
					| dpulse[4]<<6 | dpulse[5]<<5 | dpulse[6]<<4 | dpulse[7]<<3
 800459e:	9f05      	ldr	r7, [sp, #20]
					dpulse[0]<<10 | dpulse[1]<<9 | dpulse[2]<<8 | dpulse[3]<<7
 80045a0:	01e1      	lsls	r1, r4, #7
			int tocheck = (
 80045a2:	430b      	orrs	r3, r1
					| dpulse[4]<<6 | dpulse[5]<<5 | dpulse[6]<<4 | dpulse[7]<<3
 80045a4:	01a9      	lsls	r1, r5, #6
			int tocheck = (
 80045a6:	430b      	orrs	r3, r1
					| dpulse[4]<<6 | dpulse[5]<<5 | dpulse[6]<<4 | dpulse[7]<<3
 80045a8:	0179      	lsls	r1, r7, #5
			int tocheck = (
 80045aa:	430b      	orrs	r3, r1
					| dpulse[4]<<6 | dpulse[5]<<5 | dpulse[6]<<4 | dpulse[7]<<3
 80045ac:	4641      	mov	r1, r8
 80045ae:	0109      	lsls	r1, r1, #4
			int tocheck = (
 80045b0:	430b      	orrs	r3, r1
					| dpulse[4]<<6 | dpulse[5]<<5 | dpulse[6]<<4 | dpulse[7]<<3
 80045b2:	4651      	mov	r1, sl
 80045b4:	00c9      	lsls	r1, r1, #3
			int tocheck = (
 80045b6:	430b      	orrs	r3, r1
					| dpulse[8]<<2 | dpulse[9]<<1 | dpulse[10]);
 80045b8:	9900      	ldr	r1, [sp, #0]
					|(dpulse[1]^dpulse[5]^dpulse[9])<<2
 80045ba:	4078      	eors	r0, r7
					| dpulse[8]<<2 | dpulse[9]<<1 | dpulse[10]);
 80045bc:	0089      	lsls	r1, r1, #2
			int tocheck = (
 80045be:	430b      	orrs	r3, r1
					| dpulse[8]<<2 | dpulse[9]<<1 | dpulse[10]);
 80045c0:	9901      	ldr	r1, [sp, #4]
 80045c2:	0049      	lsls	r1, r1, #1
			int tocheck = (
 80045c4:	430b      	orrs	r3, r1
			uint8_t calcCRC = ((dpulse[0]^dpulse[4]^dpulse[8])<<3
 80045c6:	0029      	movs	r1, r5
 80045c8:	9d00      	ldr	r5, [sp, #0]
 80045ca:	4071      	eors	r1, r6
 80045cc:	4069      	eors	r1, r5
					|(dpulse[1]^dpulse[5]^dpulse[9])<<2
 80045ce:	9d01      	ldr	r5, [sp, #4]
			uint8_t calcCRC = ((dpulse[0]^dpulse[4]^dpulse[8])<<3
 80045d0:	00c9      	lsls	r1, r1, #3
					|(dpulse[1]^dpulse[5]^dpulse[9])<<2
 80045d2:	4068      	eors	r0, r5
 80045d4:	0080      	lsls	r0, r0, #2
 80045d6:	4301      	orrs	r1, r0
					|(dpulse[3]^dpulse[7]^dpulse[11])
 80045d8:	4655      	mov	r5, sl
 80045da:	0020      	movs	r0, r4
					|(dpulse[2]^dpulse[6]^dpulse[10])<<1
 80045dc:	4646      	mov	r6, r8
					|(dpulse[3]^dpulse[7]^dpulse[11])
 80045de:	4068      	eors	r0, r5
					|(dpulse[2]^dpulse[6]^dpulse[10])<<1
 80045e0:	464d      	mov	r5, r9
					|(dpulse[3]^dpulse[7]^dpulse[11])
 80045e2:	9c06      	ldr	r4, [sp, #24]
					|(dpulse[2]^dpulse[6]^dpulse[10])<<1
 80045e4:	4075      	eors	r5, r6
					|(dpulse[3]^dpulse[7]^dpulse[11])
 80045e6:	4060      	eors	r0, r4
 80045e8:	4301      	orrs	r1, r0
					|(dpulse[2]^dpulse[6]^dpulse[10])<<1
 80045ea:	0028      	movs	r0, r5
 80045ec:	465d      	mov	r5, fp
 80045ee:	4068      	eors	r0, r5
 80045f0:	0040      	lsls	r0, r0, #1
					|(dpulse[3]^dpulse[7]^dpulse[11])
 80045f2:	4301      	orrs	r1, r0
			uint8_t checkCRC = (dpulse[12]<<3 | dpulse[13]<<2 | dpulse[14]<<1 | dpulse[15]);
 80045f4:	9c08      	ldr	r4, [sp, #32]
 80045f6:	9807      	ldr	r0, [sp, #28]
 80045f8:	00a4      	lsls	r4, r4, #2
 80045fa:	00c0      	lsls	r0, r0, #3
 80045fc:	4320      	orrs	r0, r4
 80045fe:	4302      	orrs	r2, r0
 8004600:	9809      	ldr	r0, [sp, #36]	; 0x24
			if(calcCRC == checkCRC){
 8004602:	b249      	sxtb	r1, r1
			uint8_t checkCRC = (dpulse[12]<<3 | dpulse[13]<<2 | dpulse[14]<<1 | dpulse[15]);
 8004604:	0040      	lsls	r0, r0, #1
 8004606:	4302      	orrs	r2, r0
			if(calcCRC == checkCRC){
 8004608:	b252      	sxtb	r2, r2
 800460a:	4291      	cmp	r1, r2
 800460c:	d010      	beq.n	8004630 <computeDshotDMA+0x2c0>
			if ((tocheck <= 47)&& (tocheck > 0)){
 800460e:	1e5a      	subs	r2, r3, #1
 8004610:	2a2e      	cmp	r2, #46	; 0x2e
 8004612:	d805      	bhi.n	8004620 <computeDshotDMA+0x2b0>
				newinput = 0;
 8004614:	2100      	movs	r1, #0
 8004616:	4a0e      	ldr	r2, [pc, #56]	; (8004650 <computeDshotDMA+0x2e0>)
 8004618:	6011      	str	r1, [r2, #0]
				dshotcommand = tocheck;    //  todo
 800461a:	4a0e      	ldr	r2, [pc, #56]	; (8004654 <computeDshotDMA+0x2e4>)
 800461c:	6013      	str	r3, [r2, #0]
 800461e:	e6ca      	b.n	80043b6 <computeDshotDMA+0x46>
			if (tocheck == 0){
 8004620:	2b00      	cmp	r3, #0
 8004622:	d000      	beq.n	8004626 <computeDshotDMA+0x2b6>
 8004624:	e6c7      	b.n	80043b6 <computeDshotDMA+0x46>
				newinput = 0;
 8004626:	4a0a      	ldr	r2, [pc, #40]	; (8004650 <computeDshotDMA+0x2e0>)
 8004628:	6013      	str	r3, [r2, #0]
				dshotcommand = 0;
 800462a:	4a0a      	ldr	r2, [pc, #40]	; (8004654 <computeDshotDMA+0x2e4>)
 800462c:	6013      	str	r3, [r2, #0]
 800462e:	e6c2      	b.n	80043b6 <computeDshotDMA+0x46>
				if (tocheck > 47){
 8004630:	2b2f      	cmp	r3, #47	; 0x2f
 8004632:	ddec      	ble.n	800460e <computeDshotDMA+0x29e>
                    dshotcommand = 0;
 8004634:	2100      	movs	r1, #0
					newinput = tocheck;
 8004636:	4a06      	ldr	r2, [pc, #24]	; (8004650 <computeDshotDMA+0x2e0>)
 8004638:	6013      	str	r3, [r2, #0]
                    dshotcommand = 0;
 800463a:	4a06      	ldr	r2, [pc, #24]	; (8004654 <computeDshotDMA+0x2e4>)
 800463c:	6011      	str	r1, [r2, #0]
 800463e:	e7e6      	b.n	800460e <computeDshotDMA+0x29e>
 8004640:	20000024 	.word	0x20000024
 8004644:	20000264 	.word	0x20000264
 8004648:	0000fdb4 	.word	0x0000fdb4
 800464c:	200000c0 	.word	0x200000c0
 8004650:	2000011c 	.word	0x2000011c
 8004654:	20000104 	.word	0x20000104

08004658 <transferComplete>:

void transferComplete(){
	//	TIM15->CNT = 1;
//	compit = 0;
	signaltimeout = 0;
 8004658:	2200      	movs	r2, #0
 800465a:	4b66      	ldr	r3, [pc, #408]	; (80047f4 <transferComplete+0x19c>)
void transferComplete(){
 800465c:	b510      	push	{r4, lr}
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 800465e:	2108      	movs	r1, #8
 8004660:	4865      	ldr	r0, [pc, #404]	; (80047f8 <transferComplete+0x1a0>)
	signaltimeout = 0;
 8004662:	601a      	str	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 8004664:	f7fc fd64 	bl	8001130 <HAL_GPIO_TogglePin>


	if (inputSet == 1){
 8004668:	4b64      	ldr	r3, [pc, #400]	; (80047fc <transferComplete+0x1a4>)
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d000      	beq.n	8004672 <transferComplete+0x1a>
			computeOS42Input();
			HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , 3);

		}
	}
}
 8004670:	bd10      	pop	{r4, pc}
		if (dshot == 1){
 8004672:	4b63      	ldr	r3, [pc, #396]	; (8004800 <transferComplete+0x1a8>)
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d063      	beq.n	8004742 <transferComplete+0xea>
		if (proshot == 1){
 800467a:	4b62      	ldr	r3, [pc, #392]	; (8004804 <transferComplete+0x1ac>)
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d056      	beq.n	8004730 <transferComplete+0xd8>
		if  (servoPwm == 1){
 8004682:	4b61      	ldr	r3, [pc, #388]	; (8004808 <transferComplete+0x1b0>)
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d03b      	beq.n	8004702 <transferComplete+0xaa>
		if  (multishot){
 800468a:	4b60      	ldr	r3, [pc, #384]	; (800480c <transferComplete+0x1b4>)
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d127      	bne.n	80046e2 <transferComplete+0x8a>
		if  (oneshot125){
 8004692:	4b5f      	ldr	r3, [pc, #380]	; (8004810 <transferComplete+0x1b8>)
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d113      	bne.n	80046c2 <transferComplete+0x6a>
		if  (oneshot42){
 800469a:	4b5e      	ldr	r3, [pc, #376]	; (8004814 <transferComplete+0x1bc>)
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d0e6      	beq.n	8004670 <transferComplete+0x18>
	int lastnumber = dma_buffer[0];
 80046a2:	4c5d      	ldr	r4, [pc, #372]	; (8004818 <transferComplete+0x1c0>)
		if(((dma_buffer[j] - lastnumber) < 4500) && ((dma_buffer[j] - lastnumber) > 0)){ // blank space
 80046a4:	485d      	ldr	r0, [pc, #372]	; (800481c <transferComplete+0x1c4>)
	int lastnumber = dma_buffer[0];
 80046a6:	6823      	ldr	r3, [r4, #0]
		if(((dma_buffer[j] - lastnumber) < 4500) && ((dma_buffer[j] - lastnumber) > 0)){ // blank space
 80046a8:	6862      	ldr	r2, [r4, #4]
 80046aa:	1ad1      	subs	r1, r2, r3
 80046ac:	4281      	cmp	r1, r0
 80046ae:	d801      	bhi.n	80046b4 <transferComplete+0x5c>
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d164      	bne.n	800477e <transferComplete+0x126>
			HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , 3);
 80046b4:	2303      	movs	r3, #3
 80046b6:	0022      	movs	r2, r4
 80046b8:	2100      	movs	r1, #0
 80046ba:	4859      	ldr	r0, [pc, #356]	; (8004820 <transferComplete+0x1c8>)
 80046bc:	f7fd fa72 	bl	8001ba4 <HAL_TIM_IC_Start_DMA>
}
 80046c0:	e7d6      	b.n	8004670 <transferComplete+0x18>
	int lastnumber = dma_buffer[0];
 80046c2:	4c55      	ldr	r4, [pc, #340]	; (8004818 <transferComplete+0x1c0>)
		if(((dma_buffer[j] - lastnumber) < 12300) && ((dma_buffer[j] - lastnumber) > 0)){ // blank space
 80046c4:	4857      	ldr	r0, [pc, #348]	; (8004824 <transferComplete+0x1cc>)
	int lastnumber = dma_buffer[0];
 80046c6:	6822      	ldr	r2, [r4, #0]
		if(((dma_buffer[j] - lastnumber) < 12300) && ((dma_buffer[j] - lastnumber) > 0)){ // blank space
 80046c8:	6863      	ldr	r3, [r4, #4]
 80046ca:	1a99      	subs	r1, r3, r2
 80046cc:	4281      	cmp	r1, r0
 80046ce:	d801      	bhi.n	80046d4 <transferComplete+0x7c>
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d17b      	bne.n	80047cc <transferComplete+0x174>
			HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , 3);
 80046d4:	2303      	movs	r3, #3
 80046d6:	0022      	movs	r2, r4
 80046d8:	2100      	movs	r1, #0
 80046da:	4851      	ldr	r0, [pc, #324]	; (8004820 <transferComplete+0x1c8>)
 80046dc:	f7fd fa62 	bl	8001ba4 <HAL_TIM_IC_Start_DMA>
 80046e0:	e7db      	b.n	800469a <transferComplete+0x42>
	int lastnumber = dma_buffer[0];
 80046e2:	4c4d      	ldr	r4, [pc, #308]	; (8004818 <transferComplete+0x1c0>)
		if(((dma_buffer[j] - lastnumber) < 1500) && ((dma_buffer[j] - lastnumber) > 0)){ // blank space
 80046e4:	4850      	ldr	r0, [pc, #320]	; (8004828 <transferComplete+0x1d0>)
	int lastnumber = dma_buffer[0];
 80046e6:	6822      	ldr	r2, [r4, #0]
		if(((dma_buffer[j] - lastnumber) < 1500) && ((dma_buffer[j] - lastnumber) > 0)){ // blank space
 80046e8:	6863      	ldr	r3, [r4, #4]
 80046ea:	1a99      	subs	r1, r3, r2
 80046ec:	4281      	cmp	r1, r0
 80046ee:	d801      	bhi.n	80046f4 <transferComplete+0x9c>
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d159      	bne.n	80047a8 <transferComplete+0x150>
			HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , 3);
 80046f4:	2303      	movs	r3, #3
 80046f6:	0022      	movs	r2, r4
 80046f8:	2100      	movs	r1, #0
 80046fa:	4849      	ldr	r0, [pc, #292]	; (8004820 <transferComplete+0x1c8>)
 80046fc:	f7fd fa52 	bl	8001ba4 <HAL_TIM_IC_Start_DMA>
 8004700:	e7c7      	b.n	8004692 <transferComplete+0x3a>
		if(((dma_buffer[j] - lastnumber) >1000 ) && ((dma_buffer[j] - lastnumber) < 2010)){ // blank space
 8004702:	4c45      	ldr	r4, [pc, #276]	; (8004818 <transferComplete+0x1c0>)
 8004704:	4a49      	ldr	r2, [pc, #292]	; (800482c <transferComplete+0x1d4>)
 8004706:	6861      	ldr	r1, [r4, #4]
 8004708:	6823      	ldr	r3, [r4, #0]
 800470a:	1acb      	subs	r3, r1, r3
 800470c:	1898      	adds	r0, r3, r2
 800470e:	22fc      	movs	r2, #252	; 0xfc
 8004710:	0092      	lsls	r2, r2, #2
 8004712:	4290      	cmp	r0, r2
 8004714:	d91e      	bls.n	8004754 <transferComplete+0xfc>
 8004716:	68a3      	ldr	r3, [r4, #8]
 8004718:	1a5b      	subs	r3, r3, r1
 800471a:	4944      	ldr	r1, [pc, #272]	; (800482c <transferComplete+0x1d4>)
 800471c:	1859      	adds	r1, r3, r1
 800471e:	4291      	cmp	r1, r2
 8004720:	d918      	bls.n	8004754 <transferComplete+0xfc>
			HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , 3);
 8004722:	2303      	movs	r3, #3
 8004724:	0022      	movs	r2, r4
 8004726:	2100      	movs	r1, #0
 8004728:	483d      	ldr	r0, [pc, #244]	; (8004820 <transferComplete+0x1c8>)
 800472a:	f7fd fa3b 	bl	8001ba4 <HAL_TIM_IC_Start_DMA>
 800472e:	e7ac      	b.n	800468a <transferComplete+0x32>
			computeProshotDMA();
 8004730:	f7ff fd36 	bl	80041a0 <computeProshotDMA>
			HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , 16);
 8004734:	2310      	movs	r3, #16
 8004736:	4a38      	ldr	r2, [pc, #224]	; (8004818 <transferComplete+0x1c0>)
 8004738:	2100      	movs	r1, #0
 800473a:	4839      	ldr	r0, [pc, #228]	; (8004820 <transferComplete+0x1c8>)
 800473c:	f7fd fa32 	bl	8001ba4 <HAL_TIM_IC_Start_DMA>
 8004740:	e79f      	b.n	8004682 <transferComplete+0x2a>
			computeDshotDMA();
 8004742:	f7ff fe15 	bl	8004370 <computeDshotDMA>
			HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , 64);
 8004746:	2340      	movs	r3, #64	; 0x40
 8004748:	4a33      	ldr	r2, [pc, #204]	; (8004818 <transferComplete+0x1c0>)
 800474a:	2100      	movs	r1, #0
 800474c:	4834      	ldr	r0, [pc, #208]	; (8004820 <transferComplete+0x1c8>)
 800474e:	f7fd fa29 	bl	8001ba4 <HAL_TIM_IC_Start_DMA>
 8004752:	e792      	b.n	800467a <transferComplete+0x22>
	if (x < in_min){
 8004754:	4a36      	ldr	r2, [pc, #216]	; (8004830 <transferComplete+0x1d8>)
 8004756:	2000      	movs	r0, #0
 8004758:	4293      	cmp	r3, r2
 800475a:	d90d      	bls.n	8004778 <transferComplete+0x120>
 800475c:	22fa      	movs	r2, #250	; 0xfa
 800475e:	00d2      	lsls	r2, r2, #3
 8004760:	4293      	cmp	r3, r2
 8004762:	dd00      	ble.n	8004766 <transferComplete+0x10e>
 8004764:	0013      	movs	r3, r2
 8004766:	4a33      	ldr	r2, [pc, #204]	; (8004834 <transferComplete+0x1dc>)
 8004768:	20fa      	movs	r0, #250	; 0xfa
 800476a:	4694      	mov	ip, r2
 800476c:	00c0      	lsls	r0, r0, #3
 800476e:	4463      	add	r3, ip
 8004770:	4358      	muls	r0, r3
 8004772:	4931      	ldr	r1, [pc, #196]	; (8004838 <transferComplete+0x1e0>)
 8004774:	f7fb fd52 	bl	800021c <__divsi3>
			newinput = map((dma_buffer[j] - lastnumber), 1090, 2000, 0, 2000);
 8004778:	4b30      	ldr	r3, [pc, #192]	; (800483c <transferComplete+0x1e4>)
 800477a:	6018      	str	r0, [r3, #0]
 800477c:	e7d1      	b.n	8004722 <transferComplete+0xca>
	if (x < in_min){
 800477e:	4b30      	ldr	r3, [pc, #192]	; (8004840 <transferComplete+0x1e8>)
 8004780:	2000      	movs	r0, #0
 8004782:	4299      	cmp	r1, r3
 8004784:	d90d      	bls.n	80047a2 <transferComplete+0x14a>
 8004786:	23fc      	movs	r3, #252	; 0xfc
 8004788:	011b      	lsls	r3, r3, #4
 800478a:	4299      	cmp	r1, r3
 800478c:	dd00      	ble.n	8004790 <transferComplete+0x138>
 800478e:	0019      	movs	r1, r3
 8004790:	4b2c      	ldr	r3, [pc, #176]	; (8004844 <transferComplete+0x1ec>)
 8004792:	20fa      	movs	r0, #250	; 0xfa
 8004794:	469c      	mov	ip, r3
 8004796:	00c0      	lsls	r0, r0, #3
 8004798:	4461      	add	r1, ip
 800479a:	4348      	muls	r0, r1
 800479c:	492a      	ldr	r1, [pc, #168]	; (8004848 <transferComplete+0x1f0>)
 800479e:	f7fb fd3d 	bl	800021c <__divsi3>
			newinput = map((dma_buffer[j] - lastnumber),2020, 4032, 0, 2000);
 80047a2:	4b26      	ldr	r3, [pc, #152]	; (800483c <transferComplete+0x1e4>)
 80047a4:	6018      	str	r0, [r3, #0]
 80047a6:	e785      	b.n	80046b4 <transferComplete+0x5c>
	if (x < in_min){
 80047a8:	2000      	movs	r0, #0
 80047aa:	29f2      	cmp	r1, #242	; 0xf2
 80047ac:	d90b      	bls.n	80047c6 <transferComplete+0x16e>
 80047ae:	2396      	movs	r3, #150	; 0x96
 80047b0:	00db      	lsls	r3, r3, #3
 80047b2:	4299      	cmp	r1, r3
 80047b4:	dd00      	ble.n	80047b8 <transferComplete+0x160>
 80047b6:	0019      	movs	r1, r3
 80047b8:	20fa      	movs	r0, #250	; 0xfa
 80047ba:	39f3      	subs	r1, #243	; 0xf3
 80047bc:	00c0      	lsls	r0, r0, #3
 80047be:	4348      	muls	r0, r1
 80047c0:	4922      	ldr	r1, [pc, #136]	; (800484c <transferComplete+0x1f4>)
 80047c2:	f7fb fd2b 	bl	800021c <__divsi3>
			newinput = map((dma_buffer[j] - lastnumber),243,1200, 0, 2000);
 80047c6:	4b1d      	ldr	r3, [pc, #116]	; (800483c <transferComplete+0x1e4>)
 80047c8:	6018      	str	r0, [r3, #0]
 80047ca:	e793      	b.n	80046f4 <transferComplete+0x9c>
	if (x < in_min){
 80047cc:	4b20      	ldr	r3, [pc, #128]	; (8004850 <transferComplete+0x1f8>)
 80047ce:	2000      	movs	r0, #0
 80047d0:	4299      	cmp	r1, r3
 80047d2:	d90c      	bls.n	80047ee <transferComplete+0x196>
 80047d4:	4b1f      	ldr	r3, [pc, #124]	; (8004854 <transferComplete+0x1fc>)
 80047d6:	4299      	cmp	r1, r3
 80047d8:	dd00      	ble.n	80047dc <transferComplete+0x184>
 80047da:	0019      	movs	r1, r3
 80047dc:	4b1e      	ldr	r3, [pc, #120]	; (8004858 <transferComplete+0x200>)
 80047de:	20fa      	movs	r0, #250	; 0xfa
 80047e0:	469c      	mov	ip, r3
 80047e2:	00c0      	lsls	r0, r0, #3
 80047e4:	4461      	add	r1, ip
 80047e6:	4348      	muls	r0, r1
 80047e8:	491c      	ldr	r1, [pc, #112]	; (800485c <transferComplete+0x204>)
 80047ea:	f7fb fd17 	bl	800021c <__divsi3>
			newinput = map((dma_buffer[j] - lastnumber),6500,12000, 0, 2000);
 80047ee:	4b13      	ldr	r3, [pc, #76]	; (800483c <transferComplete+0x1e4>)
 80047f0:	6018      	str	r0, [r3, #0]
 80047f2:	e76f      	b.n	80046d4 <transferComplete+0x7c>
 80047f4:	20000144 	.word	0x20000144
 80047f8:	48000800 	.word	0x48000800
 80047fc:	20000110 	.word	0x20000110
 8004800:	20000100 	.word	0x20000100
 8004804:	20000134 	.word	0x20000134
 8004808:	20000140 	.word	0x20000140
 800480c:	20000118 	.word	0x20000118
 8004810:	20000120 	.word	0x20000120
 8004814:	20000121 	.word	0x20000121
 8004818:	20000264 	.word	0x20000264
 800481c:	00001193 	.word	0x00001193
 8004820:	20000190 	.word	0x20000190
 8004824:	0000300b 	.word	0x0000300b
 8004828:	000005db 	.word	0x000005db
 800482c:	fffffc17 	.word	0xfffffc17
 8004830:	00000441 	.word	0x00000441
 8004834:	fffffbbe 	.word	0xfffffbbe
 8004838:	0000038e 	.word	0x0000038e
 800483c:	2000011c 	.word	0x2000011c
 8004840:	000007e3 	.word	0x000007e3
 8004844:	fffff81c 	.word	0xfffff81c
 8004848:	000007dc 	.word	0x000007dc
 800484c:	000003bd 	.word	0x000003bd
 8004850:	00001963 	.word	0x00001963
 8004854:	00002ee0 	.word	0x00002ee0
 8004858:	ffffe69c 	.word	0xffffe69c
 800485c:	0000157c 	.word	0x0000157c

08004860 <SystemClock_Config>:
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8004860:	2210      	movs	r2, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8004862:	231a      	movs	r3, #26
{
 8004864:	b510      	push	{r4, lr}
 8004866:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8004868:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800486a:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800486c:	3b19      	subs	r3, #25
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800486e:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8004870:	22a0      	movs	r2, #160	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004872:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8004874:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004876:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004878:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800487a:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800487c:	0392      	lsls	r2, r2, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800487e:	a804      	add	r0, sp, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004880:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004882:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8004884:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8004886:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004888:	f7fc fc8c 	bl	80011a4 <HAL_RCC_OscConfig>
 800488c:	2800      	cmp	r0, #0
 800488e:	d000      	beq.n	8004892 <SystemClock_Config+0x32>
 8004890:	e7fe      	b.n	8004890 <SystemClock_Config+0x30>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004892:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004894:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004896:	9003      	str	r0, [sp, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004898:	2101      	movs	r1, #1
 800489a:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800489c:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800489e:	9401      	str	r4, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80048a0:	f7fc feb8 	bl	8001614 <HAL_RCC_ClockConfig>
 80048a4:	2800      	cmp	r0, #0
 80048a6:	d000      	beq.n	80048aa <SystemClock_Config+0x4a>
 80048a8:	e7fe      	b.n	80048a8 <SystemClock_Config+0x48>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80048aa:	f7fc ff85 	bl	80017b8 <HAL_RCC_GetHCLKFreq>
 80048ae:	21fa      	movs	r1, #250	; 0xfa
 80048b0:	0089      	lsls	r1, r1, #2
 80048b2:	f7fb fc29 	bl	8000108 <__udivsi3>
 80048b6:	f7fc f8c1 	bl	8000a3c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80048ba:	2004      	movs	r0, #4
 80048bc:	f7fc f8da 	bl	8000a74 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80048c0:	2001      	movs	r0, #1
 80048c2:	2200      	movs	r2, #0
 80048c4:	2100      	movs	r1, #0
 80048c6:	4240      	negs	r0, r0
 80048c8:	f7fc f87a 	bl	80009c0 <HAL_NVIC_SetPriority>
}
 80048cc:	b010      	add	sp, #64	; 0x40
 80048ce:	bd10      	pop	{r4, pc}

080048d0 <main>:
{
 80048d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048d2:	46de      	mov	lr, fp
 80048d4:	464e      	mov	r6, r9
 80048d6:	4645      	mov	r5, r8
 80048d8:	4657      	mov	r7, sl
 80048da:	b5e0      	push	{r5, r6, r7, lr}
 80048dc:	b09f      	sub	sp, #124	; 0x7c
  HAL_Init();
 80048de:	f7fb fd9b 	bl	8000418 <HAL_Init>
  SystemClock_Config();
 80048e2:	f7ff ffbd 	bl	8004860 <SystemClock_Config>
  HAL_FLASH_Unlock();
 80048e6:	f7fc fa79 	bl	8000ddc <HAL_FLASH_Unlock>
  EE_Init();
 80048ea:	f7fd fe7d 	bl	80025e8 <EE_Init>
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80048ee:	2180      	movs	r1, #128	; 0x80
 80048f0:	4cd1      	ldr	r4, [pc, #836]	; (8004c38 <main+0x368>)
 80048f2:	0289      	lsls	r1, r1, #10
 80048f4:	6962      	ldr	r2, [r4, #20]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 80048f6:	2090      	movs	r0, #144	; 0x90
 80048f8:	430a      	orrs	r2, r1
 80048fa:	6162      	str	r2, [r4, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80048fc:	6963      	ldr	r3, [r4, #20]
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_15);

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80048fe:	2500      	movs	r5, #0
 8004900:	400b      	ands	r3, r1
  SET_BIT(RCC->AHBENR, Periphs);
 8004902:	2180      	movs	r1, #128	; 0x80
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8004904:	9308      	str	r3, [sp, #32]
  (void)tmpreg;
 8004906:	9b08      	ldr	r3, [sp, #32]
  SET_BIT(RCC->AHBENR, Periphs);
 8004908:	6962      	ldr	r2, [r4, #20]
 800490a:	02c9      	lsls	r1, r1, #11
 800490c:	430a      	orrs	r2, r1
 800490e:	6162      	str	r2, [r4, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8004910:	6963      	ldr	r3, [r4, #20]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004912:	2601      	movs	r6, #1
 8004914:	400b      	ands	r3, r1
 8004916:	9309      	str	r3, [sp, #36]	; 0x24
  (void)tmpreg;
 8004918:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800491a:	2380      	movs	r3, #128	; 0x80
 800491c:	05c0      	lsls	r0, r0, #23
 800491e:	021b      	lsls	r3, r3, #8
 8004920:	6283      	str	r3, [r0, #40]	; 0x28
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004922:	a917      	add	r1, sp, #92	; 0x5c
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8004924:	9317      	str	r3, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004926:	9618      	str	r6, [sp, #96]	; 0x60
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004928:	9519      	str	r5, [sp, #100]	; 0x64
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800492a:	951a      	str	r5, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800492c:	951b      	str	r5, [sp, #108]	; 0x6c
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800492e:	f7fd fdd7 	bl	80024e0 <LL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004932:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8004934:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004936:	4333      	orrs	r3, r6
 8004938:	6163      	str	r3, [r4, #20]
 800493a:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 800493c:	2102      	movs	r1, #2
  __HAL_RCC_DMA1_CLK_ENABLE();
 800493e:	4033      	ands	r3, r6
 8004940:	9307      	str	r3, [sp, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8004942:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004944:	9b07      	ldr	r3, [sp, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8004946:	f7fc f83b 	bl	80009c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800494a:	2009      	movs	r0, #9
 800494c:	f7fc f86c 	bl	8000a28 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 2, 0);
 8004950:	2200      	movs	r2, #0
 8004952:	2102      	movs	r1, #2
 8004954:	200b      	movs	r0, #11
 8004956:	f7fc f833 	bl	80009c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 800495a:	200b      	movs	r0, #11
 800495c:	f7fc f864 	bl	8000a28 <HAL_NVIC_EnableIRQ>
  hadc.Instance = ADC1;
 8004960:	4cb6      	ldr	r4, [pc, #728]	; (8004c3c <main+0x36c>)
 8004962:	4bb7      	ldr	r3, [pc, #732]	; (8004c40 <main+0x370>)
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8004964:	0020      	movs	r0, r4
  hadc.Instance = ADC1;
 8004966:	6023      	str	r3, [r4, #0]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004968:	2308      	movs	r3, #8
 800496a:	6163      	str	r3, [r4, #20]
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC4;
 800496c:	3338      	adds	r3, #56	; 0x38
 800496e:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8004970:	2380      	movs	r3, #128	; 0x80
 8004972:	00db      	lsls	r3, r3, #3
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8004974:	6065      	str	r5, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8004976:	60a5      	str	r5, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004978:	60e5      	str	r5, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800497a:	6126      	str	r6, [r4, #16]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800497c:	61a5      	str	r5, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800497e:	61e5      	str	r5, [r4, #28]
  hadc.Init.ContinuousConvMode = DISABLE;
 8004980:	6225      	str	r5, [r4, #32]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8004982:	6266      	str	r6, [r4, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8004984:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = ENABLE;
 8004986:	6326      	str	r6, [r4, #48]	; 0x30
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004988:	6366      	str	r6, [r4, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800498a:	f7fb fd75 	bl	8000478 <HAL_ADC_Init>
 800498e:	2800      	cmp	r0, #0
 8004990:	d000      	beq.n	8004994 <main+0xc4>
 8004992:	e7fe      	b.n	8004992 <main+0xc2>
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8004994:	2580      	movs	r5, #128	; 0x80
  sConfig.Channel = ADC_CHANNEL_3;
 8004996:	2703      	movs	r7, #3
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8004998:	2307      	movs	r3, #7
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800499a:	016d      	lsls	r5, r5, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800499c:	a917      	add	r1, sp, #92	; 0x5c
 800499e:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_3;
 80049a0:	9717      	str	r7, [sp, #92]	; 0x5c
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80049a2:	9518      	str	r5, [sp, #96]	; 0x60
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80049a4:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80049a6:	f7fb fe83 	bl	80006b0 <HAL_ADC_ConfigChannel>
 80049aa:	2800      	cmp	r0, #0
 80049ac:	d000      	beq.n	80049b0 <main+0xe0>
 80049ae:	e7fe      	b.n	80049ae <main+0xde>
  sConfig.Channel = ADC_CHANNEL_6;
 80049b0:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80049b2:	a917      	add	r1, sp, #92	; 0x5c
 80049b4:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_6;
 80049b6:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80049b8:	f7fb fe7a 	bl	80006b0 <HAL_ADC_ConfigChannel>
 80049bc:	2800      	cmp	r0, #0
 80049be:	d000      	beq.n	80049c2 <main+0xf2>
 80049c0:	e7fe      	b.n	80049c0 <main+0xf0>
  hcomp1.Instance = COMP1;
 80049c2:	4ea0      	ldr	r6, [pc, #640]	; (8004c44 <main+0x374>)
 80049c4:	4ba0      	ldr	r3, [pc, #640]	; (8004c48 <main+0x378>)
  hcomp1.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 80049c6:	60b0      	str	r0, [r6, #8]
  hcomp1.Instance = COMP1;
 80049c8:	6033      	str	r3, [r6, #0]
  hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_DAC2;
 80049ca:	2350      	movs	r3, #80	; 0x50
  hcomp1.Init.Output = COMP_OUTPUT_NONE;
 80049cc:	60f0      	str	r0, [r6, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80049ce:	6130      	str	r0, [r6, #16]
  hcomp1.Init.Mode = COMP_MODE_HIGHSPEED;
 80049d0:	61b0      	str	r0, [r6, #24]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80049d2:	61f0      	str	r0, [r6, #28]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80049d4:	0030      	movs	r0, r6
  hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_DAC2;
 80049d6:	6073      	str	r3, [r6, #4]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_LOW;
 80049d8:	6175      	str	r5, [r6, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 80049da:	6237      	str	r7, [r6, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80049dc:	f7fb fef2 	bl	80007c4 <HAL_COMP_Init>
 80049e0:	2800      	cmp	r0, #0
 80049e2:	d000      	beq.n	80049e6 <main+0x116>
 80049e4:	e7fe      	b.n	80049e4 <main+0x114>
  htim1.Instance = TIM1;
 80049e6:	4c99      	ldr	r4, [pc, #612]	; (8004c4c <main+0x37c>)
 80049e8:	4b99      	ldr	r3, [pc, #612]	; (8004c50 <main+0x380>)
  htim1.Init.Prescaler = 0;
 80049ea:	6060      	str	r0, [r4, #4]
  htim1.Instance = TIM1;
 80049ec:	6023      	str	r3, [r4, #0]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80049ee:	2320      	movs	r3, #32
 80049f0:	60a3      	str	r3, [r4, #8]
  htim1.Init.Period = 999;
 80049f2:	4b98      	ldr	r3, [pc, #608]	; (8004c54 <main+0x384>)
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049f4:	6120      	str	r0, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 80049f6:	6160      	str	r0, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049f8:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80049fa:	0020      	movs	r0, r4
  htim1.Init.Period = 999;
 80049fc:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80049fe:	f7fc fee1 	bl	80017c4 <HAL_TIM_Base_Init>
 8004a02:	2800      	cmp	r0, #0
 8004a04:	d000      	beq.n	8004a08 <main+0x138>
 8004a06:	e7fe      	b.n	8004a06 <main+0x136>
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004a08:	a90c      	add	r1, sp, #48	; 0x30
 8004a0a:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004a0c:	950c      	str	r5, [sp, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004a0e:	f7fd fb51 	bl	80020b4 <HAL_TIM_ConfigClockSource>
 8004a12:	2800      	cmp	r0, #0
 8004a14:	d000      	beq.n	8004a18 <main+0x148>
 8004a16:	e7fe      	b.n	8004a16 <main+0x146>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004a18:	0020      	movs	r0, r4
 8004a1a:	f7fc ffa7 	bl	800196c <HAL_TIM_PWM_Init>
 8004a1e:	2800      	cmp	r0, #0
 8004a20:	d000      	beq.n	8004a24 <main+0x154>
 8004a22:	e7fe      	b.n	8004a22 <main+0x152>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8004a24:	2370      	movs	r3, #112	; 0x70
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a26:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004a28:	a90a      	add	r1, sp, #40	; 0x28
 8004a2a:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8004a2c:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004a2e:	f7fd fcf7 	bl	8002420 <HAL_TIMEx_MasterConfigSynchronization>
 8004a32:	2800      	cmp	r0, #0
 8004a34:	d000      	beq.n	8004a38 <main+0x168>
 8004a36:	e7fe      	b.n	8004a36 <main+0x166>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a38:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 8004a3a:	9011      	str	r0, [sp, #68]	; 0x44
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a3c:	9012      	str	r0, [sp, #72]	; 0x48
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004a3e:	9013      	str	r0, [sp, #76]	; 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004a40:	9014      	str	r0, [sp, #80]	; 0x50
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004a42:	9015      	str	r0, [sp, #84]	; 0x54
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004a44:	9016      	str	r0, [sp, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004a46:	2200      	movs	r2, #0
 8004a48:	a910      	add	r1, sp, #64	; 0x40
 8004a4a:	0020      	movs	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a4c:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004a4e:	f7fd f9fb 	bl	8001e48 <HAL_TIM_PWM_ConfigChannel>
 8004a52:	2800      	cmp	r0, #0
 8004a54:	d000      	beq.n	8004a58 <main+0x188>
 8004a56:	e7fe      	b.n	8004a56 <main+0x186>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004a58:	2204      	movs	r2, #4
 8004a5a:	a910      	add	r1, sp, #64	; 0x40
 8004a5c:	0020      	movs	r0, r4
 8004a5e:	f7fd f9f3 	bl	8001e48 <HAL_TIM_PWM_ConfigChannel>
 8004a62:	2800      	cmp	r0, #0
 8004a64:	d000      	beq.n	8004a68 <main+0x198>
 8004a66:	e7fe      	b.n	8004a66 <main+0x196>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004a68:	2208      	movs	r2, #8
 8004a6a:	a910      	add	r1, sp, #64	; 0x40
 8004a6c:	0020      	movs	r0, r4
 8004a6e:	f7fd f9eb 	bl	8001e48 <HAL_TIM_PWM_ConfigChannel>
 8004a72:	2800      	cmp	r0, #0
 8004a74:	d000      	beq.n	8004a78 <main+0x1a8>
 8004a76:	e7fe      	b.n	8004a76 <main+0x1a6>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004a78:	220c      	movs	r2, #12
 8004a7a:	a910      	add	r1, sp, #64	; 0x40
 8004a7c:	0020      	movs	r0, r4
 8004a7e:	f7fd f9e3 	bl	8001e48 <HAL_TIM_PWM_ConfigChannel>
 8004a82:	2800      	cmp	r0, #0
 8004a84:	d000      	beq.n	8004a88 <main+0x1b8>
 8004a86:	e7fe      	b.n	8004a86 <main+0x1b6>
  sBreakDeadTimeConfig.DeadTime = dead_time;
 8004a88:	4b73      	ldr	r3, [pc, #460]	; (8004c58 <main+0x388>)
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004a8a:	9017      	str	r0, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.DeadTime = dead_time;
 8004a8c:	681b      	ldr	r3, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004a8e:	9018      	str	r0, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.DeadTime = dead_time;
 8004a90:	9300      	str	r3, [sp, #0]
 8004a92:	931a      	str	r3, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004a94:	2380      	movs	r3, #128	; 0x80
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004a96:	9019      	str	r0, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004a98:	901b      	str	r0, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004a9a:	019b      	lsls	r3, r3, #6
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004a9c:	901d      	str	r0, [sp, #116]	; 0x74
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004a9e:	a917      	add	r1, sp, #92	; 0x5c
 8004aa0:	0020      	movs	r0, r4
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004aa2:	931c      	str	r3, [sp, #112]	; 0x70
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004aa4:	f7fd fcdc 	bl	8002460 <HAL_TIMEx_ConfigBreakDeadTime>
 8004aa8:	1e05      	subs	r5, r0, #0
 8004aaa:	d000      	beq.n	8004aae <main+0x1de>
 8004aac:	e7fe      	b.n	8004aac <main+0x1dc>
  HAL_TIM_MspPostInit(&htim1);
 8004aae:	0020      	movs	r0, r4
 8004ab0:	f000 fdb4 	bl	800561c <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 8004ab4:	4b69      	ldr	r3, [pc, #420]	; (8004c5c <main+0x38c>)
 8004ab6:	4698      	mov	r8, r3
 8004ab8:	2380      	movs	r3, #128	; 0x80
 8004aba:	4642      	mov	r2, r8
 8004abc:	05db      	lsls	r3, r3, #23
 8004abe:	6013      	str	r3, [r2, #0]
  htim2.Init.Prescaler = 100;
 8004ac0:	2364      	movs	r3, #100	; 0x64
 8004ac2:	6053      	str	r3, [r2, #4]
  htim2.Init.Period = 5000;
 8004ac4:	4b66      	ldr	r3, [pc, #408]	; (8004c60 <main+0x390>)
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004ac6:	4640      	mov	r0, r8
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ac8:	6095      	str	r5, [r2, #8]
  htim2.Init.Period = 5000;
 8004aca:	60d3      	str	r3, [r2, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004acc:	6115      	str	r5, [r2, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ace:	6195      	str	r5, [r2, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004ad0:	f7fc fe78 	bl	80017c4 <HAL_TIM_Base_Init>
 8004ad4:	2800      	cmp	r0, #0
 8004ad6:	d000      	beq.n	8004ada <main+0x20a>
 8004ad8:	e7fe      	b.n	8004ad8 <main+0x208>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004ada:	2580      	movs	r5, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004adc:	a917      	add	r1, sp, #92	; 0x5c
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004ade:	016d      	lsls	r5, r5, #5
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004ae0:	4640      	mov	r0, r8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004ae2:	9517      	str	r5, [sp, #92]	; 0x5c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004ae4:	f7fd fae6 	bl	80020b4 <HAL_TIM_ConfigClockSource>
 8004ae8:	2800      	cmp	r0, #0
 8004aea:	d000      	beq.n	8004aee <main+0x21e>
 8004aec:	e7fe      	b.n	8004aec <main+0x21c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004aee:	9010      	str	r0, [sp, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004af0:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004af2:	a910      	add	r1, sp, #64	; 0x40
 8004af4:	4640      	mov	r0, r8
 8004af6:	f7fd fc93 	bl	8002420 <HAL_TIMEx_MasterConfigSynchronization>
 8004afa:	2800      	cmp	r0, #0
 8004afc:	d000      	beq.n	8004b00 <main+0x230>
 8004afe:	e7fe      	b.n	8004afe <main+0x22e>
  htim3.Instance = TIM3;
 8004b00:	4f58      	ldr	r7, [pc, #352]	; (8004c64 <main+0x394>)
 8004b02:	4b59      	ldr	r3, [pc, #356]	; (8004c68 <main+0x398>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b04:	60b8      	str	r0, [r7, #8]
  htim3.Instance = TIM3;
 8004b06:	603b      	str	r3, [r7, #0]
  htim3.Init.Prescaler = 10;
 8004b08:	230a      	movs	r3, #10
 8004b0a:	607b      	str	r3, [r7, #4]
  htim3.Init.Period = 65535;
 8004b0c:	4b57      	ldr	r3, [pc, #348]	; (8004c6c <main+0x39c>)
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b0e:	6138      	str	r0, [r7, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b10:	61b8      	str	r0, [r7, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004b12:	0038      	movs	r0, r7
  htim3.Init.Period = 65535;
 8004b14:	4699      	mov	r9, r3
 8004b16:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004b18:	f7fc fe54 	bl	80017c4 <HAL_TIM_Base_Init>
 8004b1c:	2800      	cmp	r0, #0
 8004b1e:	d000      	beq.n	8004b22 <main+0x252>
 8004b20:	e7fe      	b.n	8004b20 <main+0x250>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004b22:	a917      	add	r1, sp, #92	; 0x5c
 8004b24:	0038      	movs	r0, r7
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b26:	9517      	str	r5, [sp, #92]	; 0x5c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004b28:	f7fd fac4 	bl	80020b4 <HAL_TIM_ConfigClockSource>
 8004b2c:	2800      	cmp	r0, #0
 8004b2e:	d000      	beq.n	8004b32 <main+0x262>
 8004b30:	e7fe      	b.n	8004b30 <main+0x260>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b32:	9010      	str	r0, [sp, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b34:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004b36:	a910      	add	r1, sp, #64	; 0x40
 8004b38:	0038      	movs	r0, r7
 8004b3a:	f7fd fc71 	bl	8002420 <HAL_TIMEx_MasterConfigSynchronization>
 8004b3e:	2800      	cmp	r0, #0
 8004b40:	d000      	beq.n	8004b44 <main+0x274>
 8004b42:	e7fe      	b.n	8004b42 <main+0x272>
  htim15.Instance = TIM15;
 8004b44:	4d4a      	ldr	r5, [pc, #296]	; (8004c70 <main+0x3a0>)
 8004b46:	4b4b      	ldr	r3, [pc, #300]	; (8004c74 <main+0x3a4>)
  htim15.Init.Prescaler = 0;
 8004b48:	6068      	str	r0, [r5, #4]
  htim15.Instance = TIM15;
 8004b4a:	602b      	str	r3, [r5, #0]
  htim15.Init.Period = 0xffff;
 8004b4c:	464b      	mov	r3, r9
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b4e:	60a8      	str	r0, [r5, #8]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b50:	6128      	str	r0, [r5, #16]
  htim15.Init.RepetitionCounter = 0;
 8004b52:	6168      	str	r0, [r5, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b54:	61a8      	str	r0, [r5, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8004b56:	0028      	movs	r0, r5
  htim15.Init.Period = 0xffff;
 8004b58:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8004b5a:	f7fc fe33 	bl	80017c4 <HAL_TIM_Base_Init>
 8004b5e:	2800      	cmp	r0, #0
 8004b60:	d000      	beq.n	8004b64 <main+0x294>
 8004b62:	e7fe      	b.n	8004b62 <main+0x292>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b64:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8004b66:	a910      	add	r1, sp, #64	; 0x40
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b68:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8004b6a:	0028      	movs	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b6c:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8004b6e:	f7fd faa1 	bl	80020b4 <HAL_TIM_ConfigClockSource>
 8004b72:	2800      	cmp	r0, #0
 8004b74:	d000      	beq.n	8004b78 <main+0x2a8>
 8004b76:	e7fe      	b.n	8004b76 <main+0x2a6>
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8004b78:	0028      	movs	r0, r5
 8004b7a:	f7fc ff9b 	bl	8001ab4 <HAL_TIM_IC_Init>
 8004b7e:	2800      	cmp	r0, #0
 8004b80:	d000      	beq.n	8004b84 <main+0x2b4>
 8004b82:	e7fe      	b.n	8004b82 <main+0x2b2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b84:	900c      	str	r0, [sp, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b86:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8004b88:	a90c      	add	r1, sp, #48	; 0x30
 8004b8a:	0028      	movs	r0, r5
 8004b8c:	f7fd fc48 	bl	8002420 <HAL_TIMEx_MasterConfigSynchronization>
 8004b90:	2800      	cmp	r0, #0
 8004b92:	d000      	beq.n	8004b96 <main+0x2c6>
 8004b94:	e7fe      	b.n	8004b94 <main+0x2c4>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8004b96:	230a      	movs	r3, #10
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004b98:	9019      	str	r0, [sp, #100]	; 0x64
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8004b9a:	9317      	str	r3, [sp, #92]	; 0x5c
  sConfigIC.ICFilter = 0;
 8004b9c:	901a      	str	r0, [sp, #104]	; 0x68
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004b9e:	3b09      	subs	r3, #9
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	a917      	add	r1, sp, #92	; 0x5c
 8004ba4:	0028      	movs	r0, r5
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004ba6:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004ba8:	f7fd f870 	bl	8001c8c <HAL_TIM_IC_ConfigChannel>
 8004bac:	2800      	cmp	r0, #0
 8004bae:	d000      	beq.n	8004bb2 <main+0x2e2>
 8004bb0:	e7fe      	b.n	8004bb0 <main+0x2e0>
	hiwdg.Instance = IWDG;
 8004bb2:	4a31      	ldr	r2, [pc, #196]	; (8004c78 <main+0x3a8>)
 8004bb4:	4b31      	ldr	r3, [pc, #196]	; (8004c7c <main+0x3ac>)
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8004bb6:	0010      	movs	r0, r2
	hiwdg.Instance = IWDG;
 8004bb8:	6013      	str	r3, [r2, #0]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_16;
 8004bba:	2302      	movs	r3, #2
 8004bbc:	6053      	str	r3, [r2, #4]
	hiwdg.Init.Window = IWDG_WINDOW_DISABLE;
 8004bbe:	4b30      	ldr	r3, [pc, #192]	; (8004c80 <main+0x3b0>)
 8004bc0:	60d3      	str	r3, [r2, #12]
	hiwdg.Init.Reload = 2000;
 8004bc2:	23fa      	movs	r3, #250	; 0xfa
 8004bc4:	00db      	lsls	r3, r3, #3
 8004bc6:	6093      	str	r3, [r2, #8]
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8004bc8:	f7fc fab6 	bl	8001138 <HAL_IWDG_Init>
 8004bcc:	2800      	cmp	r0, #0
 8004bce:	d000      	beq.n	8004bd2 <main+0x302>
 8004bd0:	e7fe      	b.n	8004bd0 <main+0x300>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8004bd2:	2100      	movs	r1, #0
 8004bd4:	0020      	movs	r0, r4
 8004bd6:	f7fc ff41 	bl	8001a5c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8004bda:	2100      	movs	r1, #0
 8004bdc:	0020      	movs	r0, r4
 8004bde:	f7fd fc0b 	bl	80023f8 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8004be2:	2104      	movs	r1, #4
 8004be4:	0020      	movs	r0, r4
 8004be6:	f7fc ff39 	bl	8001a5c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8004bea:	2104      	movs	r1, #4
 8004bec:	0020      	movs	r0, r4
 8004bee:	f7fd fc03 	bl	80023f8 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8004bf2:	2108      	movs	r1, #8
 8004bf4:	0020      	movs	r0, r4
 8004bf6:	f7fc ff31 	bl	8001a5c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8004bfa:	2108      	movs	r1, #8
 8004bfc:	0020      	movs	r0, r4
 8004bfe:	f7fd fbfb 	bl	80023f8 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 8004c02:	4640      	mov	r0, r8
 8004c04:	f7fc fe62 	bl	80018cc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim3);
 8004c08:	0038      	movs	r0, r7
 8004c0a:	f7fc fe53 	bl	80018b4 <HAL_TIM_Base_Start>
	playStartupTune();
 8004c0e:	f7fe ffa1 	bl	8003b54 <playStartupTune>
	if (HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_4) != HAL_OK)
 8004c12:	210c      	movs	r1, #12
 8004c14:	0020      	movs	r0, r4
 8004c16:	f7fc fe63 	bl	80018e0 <HAL_TIM_OC_Start_IT>
 8004c1a:	2800      	cmp	r0, #0
 8004c1c:	d000      	beq.n	8004c20 <main+0x350>
 8004c1e:	e7fe      	b.n	8004c1e <main+0x34e>
	HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , 64);
 8004c20:	2340      	movs	r3, #64	; 0x40
 8004c22:	4a18      	ldr	r2, [pc, #96]	; (8004c84 <main+0x3b4>)
 8004c24:	2100      	movs	r1, #0
 8004c26:	0028      	movs	r0, r5
 8004c28:	f7fc ffbc 	bl	8001ba4 <HAL_TIM_IC_Start_DMA>
		if(HAL_COMP_Start_IT(&hcomp1) != HAL_OK)
 8004c2c:	0030      	movs	r0, r6
 8004c2e:	f7fb fe19 	bl	8000864 <HAL_COMP_Start_IT>
 8004c32:	2800      	cmp	r0, #0
 8004c34:	d028      	beq.n	8004c88 <main+0x3b8>
 8004c36:	e7fe      	b.n	8004c36 <main+0x366>
 8004c38:	40021000 	.word	0x40021000
 8004c3c:	20000478 	.word	0x20000478
 8004c40:	40012400 	.word	0x40012400
 8004c44:	200001f0 	.word	0x200001f0
 8004c48:	4001001c 	.word	0x4001001c
 8004c4c:	200003ac 	.word	0x200003ac
 8004c50:	40012c00 	.word	0x40012c00
 8004c54:	000003e7 	.word	0x000003e7
 8004c58:	2000000c 	.word	0x2000000c
 8004c5c:	200003ec 	.word	0x200003ec
 8004c60:	00001388 	.word	0x00001388
 8004c64:	2000021c 	.word	0x2000021c
 8004c68:	40000400 	.word	0x40000400
 8004c6c:	0000ffff 	.word	0x0000ffff
 8004c70:	20000190 	.word	0x20000190
 8004c74:	40014000 	.word	0x40014000
 8004c78:	200001d4 	.word	0x200001d4
 8004c7c:	40003000 	.word	0x40003000
 8004c80:	00000fff 	.word	0x00000fff
 8004c84:	20000264 	.word	0x20000264
	if(HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8004c88:	48cb      	ldr	r0, [pc, #812]	; (8004fb8 <main+0x6e8>)
 8004c8a:	f7fc fa55 	bl	8001138 <HAL_IWDG_Init>
 8004c8e:	2800      	cmp	r0, #0
 8004c90:	d000      	beq.n	8004c94 <main+0x3c4>
 8004c92:	e7fe      	b.n	8004c92 <main+0x3c2>
	if (vehicle_mode == 1){                    // quad single direction
 8004c94:	4bc9      	ldr	r3, [pc, #804]	; (8004fbc <main+0x6ec>)
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d103      	bne.n	8004ca4 <main+0x3d4>
		loadEEpromConfig();
 8004c9c:	f7fe f818 	bl	8002cd0 <loadEEpromConfig>
 8004ca0:	4bc6      	ldr	r3, [pc, #792]	; (8004fbc <main+0x6ec>)
 8004ca2:	781b      	ldrb	r3, [r3, #0]
	if (vehicle_mode == 2){                   // crawler or thruster
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d100      	bne.n	8004caa <main+0x3da>
 8004ca8:	e2cc      	b.n	8005244 <main+0x974>
	if (vehicle_mode == 3){                 // rc car 50 percent brake on reverse.
 8004caa:	2b03      	cmp	r3, #3
 8004cac:	d100      	bne.n	8004cb0 <main+0x3e0>
 8004cae:	e2b4      	b.n	800521a <main+0x94a>
	if (vehicle_mode == 4){                 // rc car 50 percent brake on reverse.
 8004cb0:	2b04      	cmp	r3, #4
 8004cb2:	d100      	bne.n	8004cb6 <main+0x3e6>
 8004cb4:	e29c      	b.n	80051f0 <main+0x920>
	if(bi_direction){
 8004cb6:	4bc2      	ldr	r3, [pc, #776]	; (8004fc0 <main+0x6f0>)
 8004cb8:	469b      	mov	fp, r3
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d000      	beq.n	8004cc2 <main+0x3f2>
 8004cc0:	e28a      	b.n	80051d8 <main+0x908>
 8004cc2:	4bc0      	ldr	r3, [pc, #768]	; (8004fc4 <main+0x6f4>)
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	4bc0      	ldr	r3, [pc, #768]	; (8004fc8 <main+0x6f8>)
 8004cc8:	9301      	str	r3, [sp, #4]
 8004cca:	4bc0      	ldr	r3, [pc, #768]	; (8004fcc <main+0x6fc>)
 8004ccc:	9302      	str	r3, [sp, #8]
 8004cce:	4bc0      	ldr	r3, [pc, #768]	; (8004fd0 <main+0x700>)
 8004cd0:	9303      	str	r3, [sp, #12]
	TIM1->CCR1 = 1;												// set duty cycle to 50 out of 768 to start.
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	4bbf      	ldr	r3, [pc, #764]	; (8004fd4 <main+0x704>)
	count = 0;
 8004cd6:	2400      	movs	r4, #0
	TIM1->CCR1 = 1;												// set duty cycle to 50 out of 768 to start.
 8004cd8:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 1;
 8004cda:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 1;
 8004cdc:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = 800;
 8004cde:	22c8      	movs	r2, #200	; 0xc8
 8004ce0:	0092      	lsls	r2, r2, #2
 8004ce2:	641a      	str	r2, [r3, #64]	; 0x40
 8004ce4:	4bbc      	ldr	r3, [pc, #752]	; (8004fd8 <main+0x708>)
 8004ce6:	4fbd      	ldr	r7, [pc, #756]	; (8004fdc <main+0x70c>)
 8004ce8:	4698      	mov	r8, r3
 8004cea:	4bbd      	ldr	r3, [pc, #756]	; (8004fe0 <main+0x710>)
 8004cec:	4dbd      	ldr	r5, [pc, #756]	; (8004fe4 <main+0x714>)
 8004cee:	4699      	mov	r9, r3
 8004cf0:	4bbd      	ldr	r3, [pc, #756]	; (8004fe8 <main+0x718>)
 8004cf2:	469a      	mov	sl, r3
GPIOA->BRR = GPIO_PIN_15;
 8004cf4:	2390      	movs	r3, #144	; 0x90
 8004cf6:	2280      	movs	r2, #128	; 0x80
 8004cf8:	05db      	lsls	r3, r3, #23
 8004cfa:	0212      	lsls	r2, r2, #8
 8004cfc:	629a      	str	r2, [r3, #40]	; 0x28
count++;
 8004cfe:	4bbb      	ldr	r3, [pc, #748]	; (8004fec <main+0x71c>)
 8004d00:	4aba      	ldr	r2, [pc, #744]	; (8004fec <main+0x71c>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	9304      	str	r3, [sp, #16]
 8004d06:	3301      	adds	r3, #1
 8004d08:	6013      	str	r3, [r2, #0]
if (count > 100000){
 8004d0a:	4ab9      	ldr	r2, [pc, #740]	; (8004ff0 <main+0x720>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	dd01      	ble.n	8004d14 <main+0x444>
	count = 0;
 8004d10:	4bb6      	ldr	r3, [pc, #728]	; (8004fec <main+0x71c>)
 8004d12:	601c      	str	r4, [r3, #0]
compit = 0;
 8004d14:	4bb7      	ldr	r3, [pc, #732]	; (8004ff4 <main+0x724>)
if(HAL_IWDG_Refresh(&hiwdg) != HAL_OK)                   // watchdog refresh
 8004d16:	48a8      	ldr	r0, [pc, #672]	; (8004fb8 <main+0x6e8>)
compit = 0;
 8004d18:	701c      	strb	r4, [r3, #0]
if(HAL_IWDG_Refresh(&hiwdg) != HAL_OK)                   // watchdog refresh
 8004d1a:	f7fc fa3b 	bl	8001194 <HAL_IWDG_Refresh>
 8004d1e:	2800      	cmp	r0, #0
 8004d20:	d000      	beq.n	8004d24 <main+0x454>
 8004d22:	e22e      	b.n	8005182 <main+0x8b2>
			control_loop_count++;
 8004d24:	4bb4      	ldr	r3, [pc, #720]	; (8004ff8 <main+0x728>)
 8004d26:	4ab4      	ldr	r2, [pc, #720]	; (8004ff8 <main+0x728>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	9304      	str	r3, [sp, #16]
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	6013      	str	r3, [r2, #0]
	  	if (control_loop_count > 1){
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	dd70      	ble.n	8004e16 <main+0x546>
		if (dshotcommand > 0){
 8004d34:	4bb1      	ldr	r3, [pc, #708]	; (8004ffc <main+0x72c>)
	  		control_loop_count = 0;
 8004d36:	6010      	str	r0, [r2, #0]
		if (dshotcommand > 0){
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	dd1a      	ble.n	8004d74 <main+0x4a4>
			if (dshotcommand == 2){
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d103      	bne.n	8004d4a <main+0x47a>
				playInputTune();
 8004d42:	f7ff f849 	bl	8003dd8 <playInputTune>
 8004d46:	4bad      	ldr	r3, [pc, #692]	; (8004ffc <main+0x72c>)
 8004d48:	681b      	ldr	r3, [r3, #0]
			if (dshotcommand == 21){
 8004d4a:	2b15      	cmp	r3, #21
 8004d4c:	d100      	bne.n	8004d50 <main+0x480>
 8004d4e:	e23e      	b.n	80051ce <main+0x8fe>
			if (dshotcommand == 20){            // forward = 1 if dir_reversed = 0
 8004d50:	2b14      	cmp	r3, #20
 8004d52:	d100      	bne.n	8004d56 <main+0x486>
 8004d54:	e234      	b.n	80051c0 <main+0x8f0>
			if (dshotcommand == 7){
 8004d56:	2b07      	cmp	r3, #7
 8004d58:	d100      	bne.n	8004d5c <main+0x48c>
 8004d5a:	e304      	b.n	8005366 <main+0xa96>
			if (dshotcommand == 8){
 8004d5c:	2b08      	cmp	r3, #8
 8004d5e:	d100      	bne.n	8004d62 <main+0x492>
 8004d60:	e2fd      	b.n	800535e <main+0xa8e>
			if (dshotcommand == 9){
 8004d62:	2b09      	cmp	r3, #9
 8004d64:	d100      	bne.n	8004d68 <main+0x498>
 8004d66:	e2e6      	b.n	8005336 <main+0xa66>
			if (dshotcommand == 10){
 8004d68:	2b0a      	cmp	r3, #10
 8004d6a:	d100      	bne.n	8004d6e <main+0x49e>
 8004d6c:	e27c      	b.n	8005268 <main+0x998>
			if (dshotcommand == 12){
 8004d6e:	2b0c      	cmp	r3, #12
 8004d70:	d100      	bne.n	8004d74 <main+0x4a4>
 8004d72:	e2dd      	b.n	8005330 <main+0xa60>
 8004d74:	465b      	mov	r3, fp
 8004d76:	681b      	ldr	r3, [r3, #0]
		if (bi_direction == 1 && (proshot == 0 && dshot == 0)){
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d100      	bne.n	8004d7e <main+0x4ae>
 8004d7c:	e279      	b.n	8005272 <main+0x9a2>
				}else if((proshot || dshot ) && bi_direction){
 8004d7e:	4aa0      	ldr	r2, [pc, #640]	; (8005000 <main+0x730>)
 8004d80:	7812      	ldrb	r2, [r2, #0]
 8004d82:	2a00      	cmp	r2, #0
 8004d84:	d104      	bne.n	8004d90 <main+0x4c0>
 8004d86:	4a9f      	ldr	r2, [pc, #636]	; (8005004 <main+0x734>)
 8004d88:	7812      	ldrb	r2, [r2, #0]
 8004d8a:	2a00      	cmp	r2, #0
 8004d8c:	d100      	bne.n	8004d90 <main+0x4c0>
 8004d8e:	e2db      	b.n	8005348 <main+0xa78>
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d100      	bne.n	8004d96 <main+0x4c6>
 8004d94:	e2d8      	b.n	8005348 <main+0xa78>
					if ( newinput > 1097 ){
 8004d96:	9b03      	ldr	r3, [sp, #12]
 8004d98:	4a9b      	ldr	r2, [pc, #620]	; (8005008 <main+0x738>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	dd0f      	ble.n	8004dc0 <main+0x4f0>
					  if (forward == dir_reversed){
 8004da0:	4642      	mov	r2, r8
 8004da2:	6811      	ldr	r1, [r2, #0]
 8004da4:	464a      	mov	r2, r9
 8004da6:	6812      	ldr	r2, [r2, #0]
 8004da8:	4291      	cmp	r1, r2
 8004daa:	d105      	bne.n	8004db8 <main+0x4e8>
						forward = 1 - dir_reversed;
 8004dac:	2201      	movs	r2, #1
 8004dae:	1a52      	subs	r2, r2, r1
 8004db0:	4641      	mov	r1, r8
 8004db2:	600a      	str	r2, [r1, #0]
						bemf_counts =0;
 8004db4:	4a95      	ldr	r2, [pc, #596]	; (800500c <main+0x73c>)
 8004db6:	6014      	str	r4, [r2, #0]
						adjusted_input = (newinput - 1100) * 2 + 100;
 8004db8:	4a95      	ldr	r2, [pc, #596]	; (8005010 <main+0x740>)
 8004dba:	189a      	adds	r2, r3, r2
 8004dbc:	0052      	lsls	r2, r2, #1
 8004dbe:	603a      	str	r2, [r7, #0]
					}if ( newinput <= 1047 &&  newinput > 0){
 8004dc0:	4994      	ldr	r1, [pc, #592]	; (8005014 <main+0x744>)
 8004dc2:	1e5a      	subs	r2, r3, #1
 8004dc4:	428a      	cmp	r2, r1
 8004dc6:	d80f      	bhi.n	8004de8 <main+0x518>
						if(forward == (1 - dir_reversed)){
 8004dc8:	464a      	mov	r2, r9
 8004dca:	4640      	mov	r0, r8
 8004dcc:	6811      	ldr	r1, [r2, #0]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	6800      	ldr	r0, [r0, #0]
 8004dd2:	1a52      	subs	r2, r2, r1
 8004dd4:	4282      	cmp	r2, r0
 8004dd6:	d103      	bne.n	8004de0 <main+0x510>
							bemf_counts =0;
 8004dd8:	4a8c      	ldr	r2, [pc, #560]	; (800500c <main+0x73c>)
 8004dda:	6014      	str	r4, [r2, #0]
							forward = dir_reversed;
 8004ddc:	4642      	mov	r2, r8
 8004dde:	6011      	str	r1, [r2, #0]
						adjusted_input = (newinput - 90) * 2;
 8004de0:	001a      	movs	r2, r3
 8004de2:	3a5a      	subs	r2, #90	; 0x5a
 8004de4:	0052      	lsls	r2, r2, #1
 8004de6:	603a      	str	r2, [r7, #0]
					if ((newinput > 1047 && newinput < 1098 ) || newinput <= 120){
 8004de8:	4a8b      	ldr	r2, [pc, #556]	; (8005018 <main+0x748>)
 8004dea:	189a      	adds	r2, r3, r2
 8004dec:	2a31      	cmp	r2, #49	; 0x31
 8004dee:	d800      	bhi.n	8004df2 <main+0x522>
 8004df0:	e1e3      	b.n	80051ba <main+0x8ea>
 8004df2:	2b78      	cmp	r3, #120	; 0x78
 8004df4:	dc00      	bgt.n	8004df8 <main+0x528>
 8004df6:	e1e0      	b.n	80051ba <main+0x8ea>
 8004df8:	683b      	ldr	r3, [r7, #0]
			if (adjusted_input > 2000){
 8004dfa:	22fa      	movs	r2, #250	; 0xfa
 8004dfc:	00d2      	lsls	r2, r2, #3
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	dd01      	ble.n	8004e06 <main+0x536>
				adjusted_input = 2000;
 8004e02:	0013      	movs	r3, r2
 8004e04:	603a      	str	r2, [r7, #0]
				if (adjusted_input - input > 25){
 8004e06:	4a85      	ldr	r2, [pc, #532]	; (800501c <main+0x74c>)
 8004e08:	6812      	ldr	r2, [r2, #0]
 8004e0a:	1a99      	subs	r1, r3, r2
 8004e0c:	2919      	cmp	r1, #25
 8004e0e:	dd00      	ble.n	8004e12 <main+0x542>
 8004e10:	e1ab      	b.n	800516a <main+0x89a>
					input = adjusted_input;
 8004e12:	4a82      	ldr	r2, [pc, #520]	; (800501c <main+0x74c>)
 8004e14:	6013      	str	r3, [r2, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8004e16:	4b82      	ldr	r3, [pc, #520]	; (8005020 <main+0x750>)
 8004e18:	4a82      	ldr	r2, [pc, #520]	; (8005024 <main+0x754>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	dc00      	bgt.n	8004e22 <main+0x552>
 8004e20:	e1aa      	b.n	8005178 <main+0x8a8>
 8004e22:	0013      	movs	r3, r2
 8004e24:	3b64      	subs	r3, #100	; 0x64
 8004e26:	00d8      	lsls	r0, r3, #3
 8004e28:	18c0      	adds	r0, r0, r3
 8004e2a:	0040      	lsls	r0, r0, #1
 8004e2c:	497e      	ldr	r1, [pc, #504]	; (8005028 <main+0x758>)
 8004e2e:	f7fb f9f5 	bl	800021c <__divsi3>
	  	advancedivisor = map((commutation_interval),100,5000, 2, 20);
 8004e32:	4b7e      	ldr	r3, [pc, #504]	; (800502c <main+0x75c>)
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8004e34:	3002      	adds	r0, #2
	  	advancedivisor = map((commutation_interval),100,5000, 2, 20);
 8004e36:	7018      	strb	r0, [r3, #0]
		if (inputSet == 0){
 8004e38:	4b7d      	ldr	r3, [pc, #500]	; (8005030 <main+0x760>)
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d104      	bne.n	8004e4a <main+0x57a>
			HAL_Delay(10);
 8004e40:	200a      	movs	r0, #10
 8004e42:	f7fb fb07 	bl	8000454 <HAL_Delay>
			detectInput();
 8004e46:	f7ff f911 	bl	800406c <detectInput>
		if (!armed){
 8004e4a:	4b7a      	ldr	r3, [pc, #488]	; (8005034 <main+0x764>)
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d100      	bne.n	8004e54 <main+0x584>
 8004e52:	e17e      	b.n	8005152 <main+0x882>
 8004e54:	4b71      	ldr	r3, [pc, #452]	; (800501c <main+0x74c>)
 8004e56:	681b      	ldr	r3, [r3, #0]
		if ((input > 47)&&(armed == 1)) {
 8004e58:	2b2f      	cmp	r3, #47	; 0x2f
 8004e5a:	dc00      	bgt.n	8004e5e <main+0x58e>
 8004e5c:	e125      	b.n	80050aa <main+0x7da>
 8004e5e:	4a75      	ldr	r2, [pc, #468]	; (8005034 <main+0x764>)
 8004e60:	7812      	ldrb	r2, [r2, #0]
 8004e62:	2a01      	cmp	r2, #1
 8004e64:	d100      	bne.n	8004e68 <main+0x598>
 8004e66:	e105      	b.n	8005074 <main+0x7a4>
		  signaltimeout++;
 8004e68:	4b73      	ldr	r3, [pc, #460]	; (8005038 <main+0x768>)
 8004e6a:	4a73      	ldr	r2, [pc, #460]	; (8005038 <main+0x768>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	3301      	adds	r3, #1
 8004e70:	6013      	str	r3, [r2, #0]
		  if (signaltimeout > signal_timeout_threshold ){
 8004e72:	4a72      	ldr	r2, [pc, #456]	; (800503c <main+0x76c>)
 8004e74:	6812      	ldr	r2, [r2, #0]
 8004e76:	9204      	str	r2, [sp, #16]
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	dc00      	bgt.n	8004e7e <main+0x5ae>
 8004e7c:	e086      	b.n	8004f8c <main+0x6bc>
			input = 0;
 8004e7e:	4b67      	ldr	r3, [pc, #412]	; (800501c <main+0x74c>)
			 error = 1;
 8004e80:	4a6f      	ldr	r2, [pc, #444]	; (8005040 <main+0x770>)
			input = 0;
 8004e82:	601c      	str	r4, [r3, #0]
			 armed = 0;
 8004e84:	4b6b      	ldr	r3, [pc, #428]	; (8005034 <main+0x764>)
 8004e86:	701c      	strb	r4, [r3, #0]
			 armedcount = 0;
 8004e88:	4b6e      	ldr	r3, [pc, #440]	; (8005044 <main+0x774>)
 8004e8a:	601c      	str	r4, [r3, #0]
			 error = 1;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	7013      	strb	r3, [r2, #0]
			started = 0;
 8004e90:	4b6d      	ldr	r3, [pc, #436]	; (8005048 <main+0x778>)
 8004e92:	601c      	str	r4, [r3, #0]
			if ( !brake && !prop_brake_active){
 8004e94:	9b00      	ldr	r3, [sp, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d000      	beq.n	8004e9e <main+0x5ce>
 8004e9c:	e089      	b.n	8004fb2 <main+0x6e2>
 8004e9e:	4a6b      	ldr	r2, [pc, #428]	; (800504c <main+0x77c>)
 8004ea0:	7812      	ldrb	r2, [r2, #0]
 8004ea2:	9205      	str	r2, [sp, #20]
 8004ea4:	2a00      	cmp	r2, #0
 8004ea6:	d078      	beq.n	8004f9a <main+0x6ca>
			duty_cycle = 0;
 8004ea8:	602b      	str	r3, [r5, #0]
			if(brake || tempbrake){
 8004eaa:	4b69      	ldr	r3, [pc, #420]	; (8005050 <main+0x780>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	9304      	str	r3, [sp, #16]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d002      	beq.n	8004eba <main+0x5ea>
					fullBrake();
 8004eb4:	f7fe f9ea 	bl	800328c <fullBrake>
					duty_cycle = 0;
 8004eb8:	602c      	str	r4, [r5, #0]
			if(prop_brake && prop_brake_active){
 8004eba:	9b01      	ldr	r3, [sp, #4]
 8004ebc:	781a      	ldrb	r2, [r3, #0]
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	2a00      	cmp	r2, #0
 8004ec2:	d00a      	beq.n	8004eda <main+0x60a>
 8004ec4:	4a61      	ldr	r2, [pc, #388]	; (800504c <main+0x77c>)
 8004ec6:	7812      	ldrb	r2, [r2, #0]
 8004ec8:	2a00      	cmp	r2, #0
 8004eca:	d006      	beq.n	8004eda <main+0x60a>
			duty_cycle = prop_brake_strength;
 8004ecc:	9b02      	ldr	r3, [sp, #8]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	9304      	str	r3, [sp, #16]
 8004ed2:	602b      	str	r3, [r5, #0]
			proBrake();
 8004ed4:	f7fe fb06 	bl	80034e4 <proBrake>
 8004ed8:	682b      	ldr	r3, [r5, #0]
			TIM1->CCR1 = duty_cycle;												// set duty cycle to 50 out of 768 to start.
 8004eda:	4a3e      	ldr	r2, [pc, #248]	; (8004fd4 <main+0x704>)
 8004edc:	6353      	str	r3, [r2, #52]	; 0x34
			TIM1->CCR2 = duty_cycle;
 8004ede:	6393      	str	r3, [r2, #56]	; 0x38
			TIM1->CCR3 = duty_cycle;
 8004ee0:	63d3      	str	r3, [r2, #60]	; 0x3c
		if (commutation_interval > 30000){
 8004ee2:	4b4f      	ldr	r3, [pc, #316]	; (8005020 <main+0x750>)
 8004ee4:	4a5b      	ldr	r2, [pc, #364]	; (8005054 <main+0x784>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	dc4c      	bgt.n	8004f86 <main+0x6b6>
 8004eec:	4a47      	ldr	r2, [pc, #284]	; (800500c <main+0x73c>)
 8004eee:	6811      	ldr	r1, [r2, #0]
 8004ef0:	4a55      	ldr	r2, [pc, #340]	; (8005048 <main+0x778>)
 8004ef2:	6812      	ldr	r2, [r2, #0]
		if (bemf_counts < 100 || commutation_interval > 10000){
 8004ef4:	2963      	cmp	r1, #99	; 0x63
 8004ef6:	dc00      	bgt.n	8004efa <main+0x62a>
 8004ef8:	e115      	b.n	8005126 <main+0x856>
 8004efa:	4957      	ldr	r1, [pc, #348]	; (8005058 <main+0x788>)
 8004efc:	428b      	cmp	r3, r1
 8004efe:	dc3b      	bgt.n	8004f78 <main+0x6a8>
			filter_delay = 3;
 8004f00:	2103      	movs	r1, #3
			filter_level = 3;
 8004f02:	2003      	movs	r0, #3
			filter_delay = 3;
 8004f04:	468c      	mov	ip, r1
 8004f06:	4955      	ldr	r1, [pc, #340]	; (800505c <main+0x78c>)
 8004f08:	7008      	strb	r0, [r1, #0]
 8004f0a:	4660      	mov	r0, ip
 8004f0c:	4954      	ldr	r1, [pc, #336]	; (8005060 <main+0x790>)
 8004f0e:	6008      	str	r0, [r1, #0]
		if(commutation_interval < 200 && duty_cycle > 500){
 8004f10:	2bc7      	cmp	r3, #199	; 0xc7
 8004f12:	dc0a      	bgt.n	8004f2a <main+0x65a>
 8004f14:	23fa      	movs	r3, #250	; 0xfa
 8004f16:	6829      	ldr	r1, [r5, #0]
 8004f18:	005b      	lsls	r3, r3, #1
 8004f1a:	4299      	cmp	r1, r3
 8004f1c:	dd05      	ble.n	8004f2a <main+0x65a>
			filter_delay = 1;
 8004f1e:	3bf4      	subs	r3, #244	; 0xf4
 8004f20:	494f      	ldr	r1, [pc, #316]	; (8005060 <main+0x790>)
 8004f22:	3bff      	subs	r3, #255	; 0xff
 8004f24:	600b      	str	r3, [r1, #0]
			filter_level = 0;
 8004f26:	4b4d      	ldr	r3, [pc, #308]	; (800505c <main+0x78c>)
 8004f28:	701c      	strb	r4, [r3, #0]
		if (started == 1) {
 8004f2a:	2a01      	cmp	r2, #1
 8004f2c:	d100      	bne.n	8004f30 <main+0x660>
 8004f2e:	e101      	b.n	8005134 <main+0x864>
       if (duty_cycle < 300){
 8004f30:	232c      	movs	r3, #44	; 0x2c
 8004f32:	682a      	ldr	r2, [r5, #0]
 8004f34:	33ff      	adds	r3, #255	; 0xff
 8004f36:	429a      	cmp	r2, r3
 8004f38:	dd00      	ble.n	8004f3c <main+0x66c>
 8004f3a:	e0f8      	b.n	800512e <main+0x85e>
    	   zc_timeout_threshold = 4000;
 8004f3c:	22fa      	movs	r2, #250	; 0xfa
 8004f3e:	0112      	lsls	r2, r2, #4
 8004f40:	4b48      	ldr	r3, [pc, #288]	; (8005064 <main+0x794>)
		zctimeout++;                                            // move to started if
 8004f42:	4949      	ldr	r1, [pc, #292]	; (8005068 <main+0x798>)
 8004f44:	601a      	str	r2, [r3, #0]
 8004f46:	4b48      	ldr	r3, [pc, #288]	; (8005068 <main+0x798>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	9304      	str	r3, [sp, #16]
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	600b      	str	r3, [r1, #0]
		if (zctimeout > zc_timeout_threshold) {
 8004f50:	4293      	cmp	r3, r2
 8004f52:	dc00      	bgt.n	8004f56 <main+0x686>
 8004f54:	e6ce      	b.n	8004cf4 <main+0x424>
			bad_commutation = 0;
 8004f56:	4b45      	ldr	r3, [pc, #276]	; (800506c <main+0x79c>)
			HAL_COMP_Stop_IT(&hcomp1);
 8004f58:	0030      	movs	r0, r6
			bad_commutation = 0;
 8004f5a:	701c      	strb	r4, [r3, #0]
			sensorless = 0;
 8004f5c:	4b44      	ldr	r3, [pc, #272]	; (8005070 <main+0x7a0>)
 8004f5e:	601c      	str	r4, [r3, #0]
			HAL_COMP_Stop_IT(&hcomp1);
 8004f60:	f7fb fcd4 	bl	800090c <HAL_COMP_Stop_IT>
			running = 0;
 8004f64:	4653      	mov	r3, sl
 8004f66:	601c      	str	r4, [r3, #0]
			zctimeout = zc_timeout_threshold + 1;
 8004f68:	4b3e      	ldr	r3, [pc, #248]	; (8005064 <main+0x794>)
 8004f6a:	4a3f      	ldr	r2, [pc, #252]	; (8005068 <main+0x798>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
			duty_cycle = 0;
 8004f6e:	602c      	str	r4, [r5, #0]
			zctimeout = zc_timeout_threshold + 1;
 8004f70:	9304      	str	r3, [sp, #16]
 8004f72:	3301      	adds	r3, #1
 8004f74:	6013      	str	r3, [r2, #0]
 8004f76:	e6bd      	b.n	8004cf4 <main+0x424>
 8004f78:	230a      	movs	r3, #10
 8004f7a:	4938      	ldr	r1, [pc, #224]	; (800505c <main+0x78c>)
 8004f7c:	700b      	strb	r3, [r1, #0]
 8004f7e:	4938      	ldr	r1, [pc, #224]	; (8005060 <main+0x790>)
 8004f80:	3305      	adds	r3, #5
 8004f82:	600b      	str	r3, [r1, #0]
 8004f84:	e7d1      	b.n	8004f2a <main+0x65a>
			HAL_COMP_Stop_IT(&hcomp1);
 8004f86:	0030      	movs	r0, r6
 8004f88:	f7fb fcc0 	bl	800090c <HAL_COMP_Stop_IT>
 8004f8c:	4b1f      	ldr	r3, [pc, #124]	; (800500c <main+0x73c>)
 8004f8e:	4a2e      	ldr	r2, [pc, #184]	; (8005048 <main+0x778>)
 8004f90:	6819      	ldr	r1, [r3, #0]
 8004f92:	4b23      	ldr	r3, [pc, #140]	; (8005020 <main+0x750>)
 8004f94:	6812      	ldr	r2, [r2, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	e7ac      	b.n	8004ef4 <main+0x624>
				allOff();
 8004f9a:	f7fe f859 	bl	8003050 <allOff>
 8004f9e:	9b00      	ldr	r3, [sp, #0]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	9304      	str	r3, [sp, #16]
			duty_cycle = 0;
 8004fa4:	9b05      	ldr	r3, [sp, #20]
 8004fa6:	602b      	str	r3, [r5, #0]
			if(brake || tempbrake){
 8004fa8:	9b04      	ldr	r3, [sp, #16]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d100      	bne.n	8004fb0 <main+0x6e0>
 8004fae:	e77c      	b.n	8004eaa <main+0x5da>
 8004fb0:	e780      	b.n	8004eb4 <main+0x5e4>
			duty_cycle = 0;
 8004fb2:	602c      	str	r4, [r5, #0]
 8004fb4:	e77e      	b.n	8004eb4 <main+0x5e4>
 8004fb6:	46c0      	nop			; (mov r8, r8)
 8004fb8:	200001d4 	.word	0x200001d4
 8004fbc:	20000058 	.word	0x20000058
 8004fc0:	200000a8 	.word	0x200000a8
 8004fc4:	20000008 	.word	0x20000008
 8004fc8:	20000122 	.word	0x20000122
 8004fcc:	2000002c 	.word	0x2000002c
 8004fd0:	2000011c 	.word	0x2000011c
 8004fd4:	40012c00 	.word	0x40012c00
 8004fd8:	20000020 	.word	0x20000020
 8004fdc:	20000430 	.word	0x20000430
 8004fe0:	200000bc 	.word	0x200000bc
 8004fe4:	20000010 	.word	0x20000010
 8004fe8:	20000138 	.word	0x20000138
 8004fec:	200000b4 	.word	0x200000b4
 8004ff0:	000186a0 	.word	0x000186a0
 8004ff4:	200000b0 	.word	0x200000b0
 8004ff8:	200001e8 	.word	0x200001e8
 8004ffc:	20000104 	.word	0x20000104
 8005000:	20000134 	.word	0x20000134
 8005004:	20000100 	.word	0x20000100
 8005008:	00000449 	.word	0x00000449
 800500c:	20000260 	.word	0x20000260
 8005010:	fffffbe6 	.word	0xfffffbe6
 8005014:	00000416 	.word	0x00000416
 8005018:	fffffbe8 	.word	0xfffffbe8
 800501c:	2000010c 	.word	0x2000010c
 8005020:	200000ac 	.word	0x200000ac
 8005024:	00001388 	.word	0x00001388
 8005028:	00001324 	.word	0x00001324
 800502c:	20000006 	.word	0x20000006
 8005030:	20000110 	.word	0x20000110
 8005034:	2000009c 	.word	0x2000009c
 8005038:	20000144 	.word	0x20000144
 800503c:	20000038 	.word	0x20000038
 8005040:	20000108 	.word	0x20000108
 8005044:	200000a0 	.word	0x200000a0
 8005048:	20000148 	.word	0x20000148
 800504c:	20000123 	.word	0x20000123
 8005050:	20000150 	.word	0x20000150
 8005054:	00007530 	.word	0x00007530
 8005058:	00002710 	.word	0x00002710
 800505c:	20000018 	.word	0x20000018
 8005060:	20000014 	.word	0x20000014
 8005064:	2000005c 	.word	0x2000005c
 8005068:	20000160 	.word	0x20000160
 800506c:	200000a4 	.word	0x200000a4
 8005070:	2000013c 	.word	0x2000013c
			prop_brake_active = 0;
 8005074:	49bd      	ldr	r1, [pc, #756]	; (800536c <main+0xa9c>)
			duty_cycle = input / 2 - 10 ;
 8005076:	105b      	asrs	r3, r3, #1
			prop_brake_active = 0;
 8005078:	700c      	strb	r4, [r1, #0]
			started = 1;
 800507a:	49bd      	ldr	r1, [pc, #756]	; (8005370 <main+0xaa0>)
			duty_cycle = input / 2 - 10 ;
 800507c:	3b0a      	subs	r3, #10
			started = 1;
 800507e:	600a      	str	r2, [r1, #0]
			if (bemf_counts < 15){
 8005080:	4abc      	ldr	r2, [pc, #752]	; (8005374 <main+0xaa4>)
			duty_cycle = input / 2 - 10 ;
 8005082:	602b      	str	r3, [r5, #0]
			if (bemf_counts < 15){
 8005084:	6812      	ldr	r2, [r2, #0]
 8005086:	9204      	str	r2, [sp, #16]
 8005088:	2a0e      	cmp	r2, #14
 800508a:	dc25      	bgt.n	80050d8 <main+0x808>
				if(duty_cycle < 70){
 800508c:	2b45      	cmp	r3, #69	; 0x45
 800508e:	dc18      	bgt.n	80050c2 <main+0x7f2>
					duty_cycle=70;
 8005090:	2346      	movs	r3, #70	; 0x46
 8005092:	602b      	str	r3, [r5, #0]
			if (running){
 8005094:	4653      	mov	r3, sl
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d100      	bne.n	800509e <main+0x7ce>
 800509c:	e6e4      	b.n	8004e68 <main+0x598>
 800509e:	2346      	movs	r3, #70	; 0x46
			TIM1->CCR1 = duty_cycle;												// set duty cycle to 50 out of 768 to start.
 80050a0:	4ab5      	ldr	r2, [pc, #724]	; (8005378 <main+0xaa8>)
 80050a2:	6353      	str	r3, [r2, #52]	; 0x34
			TIM1->CCR2 = duty_cycle;
 80050a4:	6393      	str	r3, [r2, #56]	; 0x38
			TIM1->CCR3 = duty_cycle;
 80050a6:	63d3      	str	r3, [r2, #60]	; 0x3c
 80050a8:	e6de      	b.n	8004e68 <main+0x598>
		  signaltimeout++;
 80050aa:	4bb4      	ldr	r3, [pc, #720]	; (800537c <main+0xaac>)
 80050ac:	4ab3      	ldr	r2, [pc, #716]	; (800537c <main+0xaac>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	3301      	adds	r3, #1
 80050b2:	6013      	str	r3, [r2, #0]
		  if (signaltimeout > signal_timeout_threshold ){
 80050b4:	4ab2      	ldr	r2, [pc, #712]	; (8005380 <main+0xab0>)
 80050b6:	6812      	ldr	r2, [r2, #0]
 80050b8:	9204      	str	r2, [sp, #16]
 80050ba:	4293      	cmp	r3, r2
 80050bc:	dd00      	ble.n	80050c0 <main+0x7f0>
 80050be:	e6de      	b.n	8004e7e <main+0x5ae>
 80050c0:	e6e6      	b.n	8004e90 <main+0x5c0>
				if (duty_cycle > 400){
 80050c2:	22c8      	movs	r2, #200	; 0xc8
 80050c4:	0052      	lsls	r2, r2, #1
 80050c6:	4293      	cmp	r3, r2
 80050c8:	dd23      	ble.n	8005112 <main+0x842>
			if (running){
 80050ca:	4653      	mov	r3, sl
 80050cc:	681b      	ldr	r3, [r3, #0]
					duty_cycle=400;
 80050ce:	602a      	str	r2, [r5, #0]
			if (running){
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00c      	beq.n	80050ee <main+0x81e>
 80050d4:	0013      	movs	r3, r2
 80050d6:	e7e3      	b.n	80050a0 <main+0x7d0>
 80050d8:	4652      	mov	r2, sl
 80050da:	6812      	ldr	r2, [r2, #0]
 80050dc:	2a00      	cmp	r2, #0
 80050de:	d100      	bne.n	80050e2 <main+0x812>
 80050e0:	e6c2      	b.n	8004e68 <main+0x598>
			if (duty_cycle > 998 ){                                             // safety!!!
 80050e2:	4aa8      	ldr	r2, [pc, #672]	; (8005384 <main+0xab4>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	dd19      	ble.n	800511c <main+0x84c>
				duty_cycle = 998;
 80050e8:	602a      	str	r2, [r5, #0]
 80050ea:	0013      	movs	r3, r2
 80050ec:	e7d8      	b.n	80050a0 <main+0x7d0>
		  signaltimeout++;
 80050ee:	4ba3      	ldr	r3, [pc, #652]	; (800537c <main+0xaac>)
 80050f0:	4aa2      	ldr	r2, [pc, #648]	; (800537c <main+0xaac>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	3301      	adds	r3, #1
 80050f6:	6013      	str	r3, [r2, #0]
		  if (signaltimeout > signal_timeout_threshold ){
 80050f8:	4aa1      	ldr	r2, [pc, #644]	; (8005380 <main+0xab0>)
 80050fa:	6812      	ldr	r2, [r2, #0]
 80050fc:	9204      	str	r2, [sp, #16]
 80050fe:	4293      	cmp	r3, r2
 8005100:	dd00      	ble.n	8005104 <main+0x834>
 8005102:	e6bc      	b.n	8004e7e <main+0x5ae>
			filter_delay = 15;
 8005104:	210f      	movs	r1, #15
 8005106:	4ba0      	ldr	r3, [pc, #640]	; (8005388 <main+0xab8>)
		  if (signaltimeout > signal_timeout_threshold ){
 8005108:	2201      	movs	r2, #1
 800510a:	681b      	ldr	r3, [r3, #0]
		filter_level = 10;
 800510c:	200a      	movs	r0, #10
			filter_delay = 15;
 800510e:	468c      	mov	ip, r1
 8005110:	e6f9      	b.n	8004f06 <main+0x636>
			if (running){
 8005112:	4652      	mov	r2, sl
 8005114:	6812      	ldr	r2, [r2, #0]
 8005116:	2a00      	cmp	r2, #0
 8005118:	d100      	bne.n	800511c <main+0x84c>
 800511a:	e6a5      	b.n	8004e68 <main+0x598>
			if (duty_cycle < 44){
 800511c:	2b2b      	cmp	r3, #43	; 0x2b
 800511e:	dcbf      	bgt.n	80050a0 <main+0x7d0>
				duty_cycle = 44;
 8005120:	232c      	movs	r3, #44	; 0x2c
 8005122:	602b      	str	r3, [r5, #0]
 8005124:	e7bc      	b.n	80050a0 <main+0x7d0>
			filter_delay = 15;
 8005126:	210f      	movs	r1, #15
		filter_level = 10;
 8005128:	200a      	movs	r0, #10
			filter_delay = 15;
 800512a:	468c      	mov	ip, r1
 800512c:	e6eb      	b.n	8004f06 <main+0x636>
    	   zc_timeout_threshold = 2000;
 800512e:	22fa      	movs	r2, #250	; 0xfa
 8005130:	00d2      	lsls	r2, r2, #3
 8005132:	e705      	b.n	8004f40 <main+0x670>
			if (running == 0) {
 8005134:	4653      	mov	r3, sl
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d000      	beq.n	800513e <main+0x86e>
 800513c:	e6f8      	b.n	8004f30 <main+0x660>
			upthreshold = 2;
 800513e:	4993      	ldr	r1, [pc, #588]	; (800538c <main+0xabc>)
 8005140:	3201      	adds	r2, #1
 8005142:	600a      	str	r2, [r1, #0]
			threshold = 2;
 8005144:	4992      	ldr	r1, [pc, #584]	; (8005390 <main+0xac0>)
 8005146:	600a      	str	r2, [r1, #0]
			zctimeout =0;
 8005148:	4a92      	ldr	r2, [pc, #584]	; (8005394 <main+0xac4>)
 800514a:	6013      	str	r3, [r2, #0]
			startMotor();  // safety on for input testing   ************************************************
 800514c:	f7fe fb5a 	bl	8003804 <startMotor>
 8005150:	e6ee      	b.n	8004f30 <main+0x660>
			if ((inputSet == 1)&&(input == 0)){
 8005152:	4b91      	ldr	r3, [pc, #580]	; (8005398 <main+0xac8>)
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	9304      	str	r3, [sp, #16]
 8005158:	2b01      	cmp	r3, #1
 800515a:	d013      	beq.n	8005184 <main+0x8b4>
 800515c:	4b8f      	ldr	r3, [pc, #572]	; (800539c <main+0xacc>)
 800515e:	681b      	ldr	r3, [r3, #0]
			if (input > 1){
 8005160:	2b01      	cmp	r3, #1
 8005162:	dda2      	ble.n	80050aa <main+0x7da>
				armedcount = 0;
 8005164:	4a8e      	ldr	r2, [pc, #568]	; (80053a0 <main+0xad0>)
 8005166:	6014      	str	r4, [r2, #0]
 8005168:	e676      	b.n	8004e58 <main+0x588>
 800516a:	498c      	ldr	r1, [pc, #560]	; (800539c <main+0xacc>)
					input = input + 5;
 800516c:	3205      	adds	r2, #5
 800516e:	600a      	str	r2, [r1, #0]
			if (adjusted_input <= input){
 8005170:	429a      	cmp	r2, r3
 8005172:	db00      	blt.n	8005176 <main+0x8a6>
 8005174:	e64d      	b.n	8004e12 <main+0x542>
 8005176:	e64e      	b.n	8004e16 <main+0x546>
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8005178:	2b64      	cmp	r3, #100	; 0x64
 800517a:	db00      	blt.n	800517e <main+0x8ae>
 800517c:	e652      	b.n	8004e24 <main+0x554>
 800517e:	2364      	movs	r3, #100	; 0x64
 8005180:	e650      	b.n	8004e24 <main+0x554>
 8005182:	e7fe      	b.n	8005182 <main+0x8b2>
			if ((inputSet == 1)&&(input == 0)){
 8005184:	4b85      	ldr	r3, [pc, #532]	; (800539c <main+0xacc>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1e9      	bne.n	8005160 <main+0x890>
				armedcount++;
 800518c:	4b84      	ldr	r3, [pc, #528]	; (80053a0 <main+0xad0>)
 800518e:	4a84      	ldr	r2, [pc, #528]	; (80053a0 <main+0xad0>)
 8005190:	681b      	ldr	r3, [r3, #0]
				HAL_Delay(1);
 8005192:	2001      	movs	r0, #1
				armedcount++;
 8005194:	9305      	str	r3, [sp, #20]
 8005196:	3301      	adds	r3, #1
 8005198:	6013      	str	r3, [r2, #0]
				HAL_Delay(1);
 800519a:	f7fb f95b 	bl	8000454 <HAL_Delay>
				if (armedcount > 1000){
 800519e:	23fa      	movs	r3, #250	; 0xfa
 80051a0:	4a7f      	ldr	r2, [pc, #508]	; (80053a0 <main+0xad0>)
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	6812      	ldr	r2, [r2, #0]
 80051a6:	9205      	str	r2, [sp, #20]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	ddd7      	ble.n	800515c <main+0x88c>
					armed = 1;
 80051ac:	466a      	mov	r2, sp
 80051ae:	4b7d      	ldr	r3, [pc, #500]	; (80053a4 <main+0xad4>)
 80051b0:	7c12      	ldrb	r2, [r2, #16]
 80051b2:	701a      	strb	r2, [r3, #0]
					playInputTune();
 80051b4:	f7fe fe10 	bl	8003dd8 <playInputTune>
 80051b8:	e7d0      	b.n	800515c <main+0x88c>
						adjusted_input = 0;
 80051ba:	603c      	str	r4, [r7, #0]
				adjusted_input = 2000;
 80051bc:	2300      	movs	r3, #0
 80051be:	e622      	b.n	8004e06 <main+0x536>
				forward = 1 - dir_reversed;
 80051c0:	464a      	mov	r2, r9
 80051c2:	6812      	ldr	r2, [r2, #0]
 80051c4:	3b13      	subs	r3, #19
 80051c6:	1a9b      	subs	r3, r3, r2
 80051c8:	4642      	mov	r2, r8
 80051ca:	6013      	str	r3, [r2, #0]
 80051cc:	e5d2      	b.n	8004d74 <main+0x4a4>
			forward =  dir_reversed;
 80051ce:	464a      	mov	r2, r9
 80051d0:	4643      	mov	r3, r8
 80051d2:	6812      	ldr	r2, [r2, #0]
 80051d4:	601a      	str	r2, [r3, #0]
 80051d6:	e5cd      	b.n	8004d74 <main+0x4a4>
 80051d8:	4b73      	ldr	r3, [pc, #460]	; (80053a8 <main+0xad8>)
 80051da:	9300      	str	r3, [sp, #0]
 80051dc:	4b73      	ldr	r3, [pc, #460]	; (80053ac <main+0xadc>)
 80051de:	9301      	str	r3, [sp, #4]
 80051e0:	4b73      	ldr	r3, [pc, #460]	; (80053b0 <main+0xae0>)
 80051e2:	9302      	str	r3, [sp, #8]
		newinput = 1001;
 80051e4:	4b73      	ldr	r3, [pc, #460]	; (80053b4 <main+0xae4>)
 80051e6:	001a      	movs	r2, r3
 80051e8:	9303      	str	r3, [sp, #12]
 80051ea:	4b73      	ldr	r3, [pc, #460]	; (80053b8 <main+0xae8>)
 80051ec:	6013      	str	r3, [r2, #0]
 80051ee:	e570      	b.n	8004cd2 <main+0x402>
			 bi_direction = 1;
 80051f0:	4b72      	ldr	r3, [pc, #456]	; (80053bc <main+0xaec>)
			 slow_decay = 0;                      // for complementary pwm , 0 for diode freewheeling
 80051f2:	4973      	ldr	r1, [pc, #460]	; (80053c0 <main+0xaf0>)
			 bi_direction = 1;
 80051f4:	469b      	mov	fp, r3
 80051f6:	2301      	movs	r3, #1
 80051f8:	465a      	mov	r2, fp
 80051fa:	6013      	str	r3, [r2, #0]
			 slow_decay = 0;                      // for complementary pwm , 0 for diode freewheeling
 80051fc:	2200      	movs	r2, #0
 80051fe:	700a      	strb	r2, [r1, #0]
			 brake = 0;                          // apply full motor brake on stop
 8005200:	4969      	ldr	r1, [pc, #420]	; (80053a8 <main+0xad8>)
 8005202:	600a      	str	r2, [r1, #0]
			 prop_brake = 1;
 8005204:	4a69      	ldr	r2, [pc, #420]	; (80053ac <main+0xadc>)
			 brake = 0;                          // apply full motor brake on stop
 8005206:	9100      	str	r1, [sp, #0]
			 prop_brake = 1;
 8005208:	7013      	strb	r3, [r2, #0]
			 prop_brake_strength = 800;
 800520a:	4b69      	ldr	r3, [pc, #420]	; (80053b0 <main+0xae0>)
			 prop_brake = 1;
 800520c:	9201      	str	r2, [sp, #4]
			 prop_brake_strength = 800;
 800520e:	9302      	str	r3, [sp, #8]
 8005210:	001a      	movs	r2, r3
 8005212:	23c8      	movs	r3, #200	; 0xc8
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	6013      	str	r3, [r2, #0]
 8005218:	e7e4      	b.n	80051e4 <main+0x914>
		 bi_direction = 1;
 800521a:	4b68      	ldr	r3, [pc, #416]	; (80053bc <main+0xaec>)
		 slow_decay = 0;                      // for complementary pwm , 0 for diode freewheeling
 800521c:	4968      	ldr	r1, [pc, #416]	; (80053c0 <main+0xaf0>)
		 bi_direction = 1;
 800521e:	469b      	mov	fp, r3
 8005220:	2301      	movs	r3, #1
 8005222:	465a      	mov	r2, fp
 8005224:	6013      	str	r3, [r2, #0]
		 slow_decay = 0;                      // for complementary pwm , 0 for diode freewheeling
 8005226:	2200      	movs	r2, #0
 8005228:	700a      	strb	r2, [r1, #0]
		 brake = 0;                          // apply full motor brake on stop
 800522a:	495f      	ldr	r1, [pc, #380]	; (80053a8 <main+0xad8>)
 800522c:	600a      	str	r2, [r1, #0]
		 prop_brake = 1;
 800522e:	4a5f      	ldr	r2, [pc, #380]	; (80053ac <main+0xadc>)
		 brake = 0;                          // apply full motor brake on stop
 8005230:	9100      	str	r1, [sp, #0]
		 prop_brake = 1;
 8005232:	7013      	strb	r3, [r2, #0]
		 prop_brake_strength = 900;
 8005234:	4b5e      	ldr	r3, [pc, #376]	; (80053b0 <main+0xae0>)
		 prop_brake = 1;
 8005236:	9201      	str	r2, [sp, #4]
		 prop_brake_strength = 900;
 8005238:	9302      	str	r3, [sp, #8]
 800523a:	001a      	movs	r2, r3
 800523c:	23e1      	movs	r3, #225	; 0xe1
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	6013      	str	r3, [r2, #0]
 8005242:	e7cf      	b.n	80051e4 <main+0x914>
		 bi_direction = 1;
 8005244:	4b5d      	ldr	r3, [pc, #372]	; (80053bc <main+0xaec>)
 8005246:	469b      	mov	fp, r3
 8005248:	2301      	movs	r3, #1
 800524a:	465a      	mov	r2, fp
 800524c:	6013      	str	r3, [r2, #0]
		 slow_decay = 1;                      // for complementary pwm , 0 for diode freewheeling
 800524e:	4a5c      	ldr	r2, [pc, #368]	; (80053c0 <main+0xaf0>)
 8005250:	7013      	strb	r3, [r2, #0]
		 brake = 1;                          // apply full motor brake on stop
 8005252:	4a55      	ldr	r2, [pc, #340]	; (80053a8 <main+0xad8>)
 8005254:	6013      	str	r3, [r2, #0]
 8005256:	9200      	str	r2, [sp, #0]
		 start_power = 150;
 8005258:	2296      	movs	r2, #150	; 0x96
 800525a:	4b5a      	ldr	r3, [pc, #360]	; (80053c4 <main+0xaf4>)
 800525c:	601a      	str	r2, [r3, #0]
 800525e:	4b53      	ldr	r3, [pc, #332]	; (80053ac <main+0xadc>)
 8005260:	9301      	str	r3, [sp, #4]
 8005262:	4b53      	ldr	r3, [pc, #332]	; (80053b0 <main+0xae0>)
 8005264:	9302      	str	r3, [sp, #8]
 8005266:	e7bd      	b.n	80051e4 <main+0x914>
				bi_direction = 1;
 8005268:	465a      	mov	r2, fp
 800526a:	3b09      	subs	r3, #9
 800526c:	6013      	str	r3, [r2, #0]
				armed = 0;
 800526e:	4b4d      	ldr	r3, [pc, #308]	; (80053a4 <main+0xad4>)
 8005270:	701c      	strb	r4, [r3, #0]
		if (bi_direction == 1 && (proshot == 0 && dshot == 0)){
 8005272:	4b55      	ldr	r3, [pc, #340]	; (80053c8 <main+0xaf8>)
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d000      	beq.n	800527c <main+0x9ac>
 800527a:	e58c      	b.n	8004d96 <main+0x4c6>
 800527c:	4b53      	ldr	r3, [pc, #332]	; (80053cc <main+0xafc>)
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	9304      	str	r3, [sp, #16]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d000      	beq.n	8005288 <main+0x9b8>
 8005286:	e586      	b.n	8004d96 <main+0x4c6>
					if ( newinput > 1100 ){
 8005288:	9b03      	ldr	r3, [sp, #12]
 800528a:	4a51      	ldr	r2, [pc, #324]	; (80053d0 <main+0xb00>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4293      	cmp	r3, r2
 8005290:	dd37      	ble.n	8005302 <main+0xa32>
						if (forward == dir_reversed){
 8005292:	4642      	mov	r2, r8
 8005294:	6810      	ldr	r0, [r2, #0]
 8005296:	464a      	mov	r2, r9
 8005298:	6812      	ldr	r2, [r2, #0]
 800529a:	4290      	cmp	r0, r2
 800529c:	d028      	beq.n	80052f0 <main+0xa20>
						if (prop_brake_active == 0){
 800529e:	4a33      	ldr	r2, [pc, #204]	; (800536c <main+0xa9c>)
 80052a0:	7812      	ldrb	r2, [r2, #0]
 80052a2:	2a00      	cmp	r2, #0
 80052a4:	d104      	bne.n	80052b0 <main+0x9e0>
						adjusted_input = (newinput - 1050)*3 ;
 80052a6:	4a4b      	ldr	r2, [pc, #300]	; (80053d4 <main+0xb04>)
 80052a8:	1899      	adds	r1, r3, r2
 80052aa:	004a      	lsls	r2, r1, #1
 80052ac:	1852      	adds	r2, r2, r1
 80052ae:	603a      	str	r2, [r7, #0]
					if (zctimeout >= zc_timeout_threshold){
 80052b0:	4a38      	ldr	r2, [pc, #224]	; (8005394 <main+0xac4>)
 80052b2:	6812      	ldr	r2, [r2, #0]
 80052b4:	9204      	str	r2, [sp, #16]
 80052b6:	4a48      	ldr	r2, [pc, #288]	; (80053d8 <main+0xb08>)
 80052b8:	6812      	ldr	r2, [r2, #0]
 80052ba:	9205      	str	r2, [sp, #20]
 80052bc:	9905      	ldr	r1, [sp, #20]
 80052be:	9a04      	ldr	r2, [sp, #16]
 80052c0:	428a      	cmp	r2, r1
 80052c2:	db09      	blt.n	80052d8 <main+0xa08>
						if (vehicle_mode != 3){               // car mode requires throttle return to center before direction change
 80052c4:	4a45      	ldr	r2, [pc, #276]	; (80053dc <main+0xb0c>)
 80052c6:	7812      	ldrb	r2, [r2, #0]
 80052c8:	2a03      	cmp	r2, #3
 80052ca:	d001      	beq.n	80052d0 <main+0xa00>
							prop_brake_active = 0;
 80052cc:	4a27      	ldr	r2, [pc, #156]	; (800536c <main+0xa9c>)
 80052ce:	7014      	strb	r4, [r2, #0]
						startupcountdown = 0;
 80052d0:	4a43      	ldr	r2, [pc, #268]	; (80053e0 <main+0xb10>)
 80052d2:	6014      	str	r4, [r2, #0]
						bemf_counts = 0;
 80052d4:	4a27      	ldr	r2, [pc, #156]	; (8005374 <main+0xaa4>)
 80052d6:	6014      	str	r4, [r2, #0]
					if (newinput > 800 && newinput < 1100){
 80052d8:	4a42      	ldr	r2, [pc, #264]	; (80053e4 <main+0xb14>)
 80052da:	4694      	mov	ip, r2
 80052dc:	2295      	movs	r2, #149	; 0x95
 80052de:	4463      	add	r3, ip
 80052e0:	0052      	lsls	r2, r2, #1
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d900      	bls.n	80052e8 <main+0xa18>
 80052e6:	e587      	b.n	8004df8 <main+0x528>
						prop_brake_active = 0;
 80052e8:	4b20      	ldr	r3, [pc, #128]	; (800536c <main+0xa9c>)
						adjusted_input = 0;
 80052ea:	603c      	str	r4, [r7, #0]
						prop_brake_active = 0;
 80052ec:	701c      	strb	r4, [r3, #0]
 80052ee:	e765      	b.n	80051bc <main+0x8ec>
							adjusted_input = 0;
 80052f0:	9a04      	ldr	r2, [sp, #16]
							prop_brake_active = 1;
 80052f2:	491e      	ldr	r1, [pc, #120]	; (800536c <main+0xa9c>)
							adjusted_input = 0;
 80052f4:	603a      	str	r2, [r7, #0]
							prop_brake_active = 1;
 80052f6:	2201      	movs	r2, #1
 80052f8:	700a      	strb	r2, [r1, #0]
							forward = 1 - dir_reversed;
 80052fa:	4641      	mov	r1, r8
 80052fc:	1a12      	subs	r2, r2, r0
 80052fe:	600a      	str	r2, [r1, #0]
 8005300:	e7d6      	b.n	80052b0 <main+0x9e0>
					if (newinput < 800) {
 8005302:	4a39      	ldr	r2, [pc, #228]	; (80053e8 <main+0xb18>)
 8005304:	4293      	cmp	r3, r2
 8005306:	dcd3      	bgt.n	80052b0 <main+0x9e0>
						if (forward == (1 - dir_reversed)){
 8005308:	464a      	mov	r2, r9
 800530a:	2001      	movs	r0, #1
 800530c:	6812      	ldr	r2, [r2, #0]
 800530e:	1a81      	subs	r1, r0, r2
 8005310:	468c      	mov	ip, r1
 8005312:	4641      	mov	r1, r8
 8005314:	6809      	ldr	r1, [r1, #0]
 8005316:	458c      	cmp	ip, r1
 8005318:	d01a      	beq.n	8005350 <main+0xa80>
						if (prop_brake_active == 0){
 800531a:	4a14      	ldr	r2, [pc, #80]	; (800536c <main+0xa9c>)
 800531c:	7812      	ldrb	r2, [r2, #0]
 800531e:	2a00      	cmp	r2, #0
 8005320:	d1c6      	bne.n	80052b0 <main+0x9e0>
						adjusted_input = (800 - newinput) * 3;
 8005322:	22c8      	movs	r2, #200	; 0xc8
 8005324:	0092      	lsls	r2, r2, #2
 8005326:	1ad2      	subs	r2, r2, r3
 8005328:	0051      	lsls	r1, r2, #1
 800532a:	188a      	adds	r2, r1, r2
 800532c:	603a      	str	r2, [r7, #0]
 800532e:	e7bf      	b.n	80052b0 <main+0x9e0>
				storeEEpromConfig();
 8005330:	f7fd fcb4 	bl	8002c9c <storeEEpromConfig>
 8005334:	e7fe      	b.n	8005334 <main+0xa64>
				bi_direction = 0;
 8005336:	465b      	mov	r3, fp
 8005338:	601c      	str	r4, [r3, #0]
				armed = 0;
 800533a:	4b1a      	ldr	r3, [pc, #104]	; (80053a4 <main+0xad4>)
 800533c:	701c      	strb	r4, [r3, #0]
				}else if((proshot || dshot ) && bi_direction){
 800533e:	4b22      	ldr	r3, [pc, #136]	; (80053c8 <main+0xaf8>)
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d100      	bne.n	8005348 <main+0xa78>
 8005346:	e51e      	b.n	8004d86 <main+0x4b6>
					adjusted_input = newinput;
 8005348:	9b03      	ldr	r3, [sp, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	603b      	str	r3, [r7, #0]
 800534e:	e554      	b.n	8004dfa <main+0x52a>
							prop_brake_active = 1;
 8005350:	4906      	ldr	r1, [pc, #24]	; (800536c <main+0xa9c>)
 8005352:	7008      	strb	r0, [r1, #0]
							adjusted_input = 0;
 8005354:	9904      	ldr	r1, [sp, #16]
 8005356:	6039      	str	r1, [r7, #0]
							forward = dir_reversed;
 8005358:	4641      	mov	r1, r8
 800535a:	600a      	str	r2, [r1, #0]
 800535c:	e7a8      	b.n	80052b0 <main+0x9e0>
			dir_reversed = 1;
 800535e:	464a      	mov	r2, r9
 8005360:	3b07      	subs	r3, #7
 8005362:	6013      	str	r3, [r2, #0]
 8005364:	e506      	b.n	8004d74 <main+0x4a4>
			dir_reversed = 0;
 8005366:	464b      	mov	r3, r9
 8005368:	601c      	str	r4, [r3, #0]
 800536a:	e503      	b.n	8004d74 <main+0x4a4>
 800536c:	20000123 	.word	0x20000123
 8005370:	20000148 	.word	0x20000148
 8005374:	20000260 	.word	0x20000260
 8005378:	40012c00 	.word	0x40012c00
 800537c:	20000144 	.word	0x20000144
 8005380:	20000038 	.word	0x20000038
 8005384:	000003e6 	.word	0x000003e6
 8005388:	200000ac 	.word	0x200000ac
 800538c:	20000054 	.word	0x20000054
 8005390:	2000004c 	.word	0x2000004c
 8005394:	20000160 	.word	0x20000160
 8005398:	20000110 	.word	0x20000110
 800539c:	2000010c 	.word	0x2000010c
 80053a0:	200000a0 	.word	0x200000a0
 80053a4:	2000009c 	.word	0x2000009c
 80053a8:	20000008 	.word	0x20000008
 80053ac:	20000122 	.word	0x20000122
 80053b0:	2000002c 	.word	0x2000002c
 80053b4:	2000011c 	.word	0x2000011c
 80053b8:	000003e9 	.word	0x000003e9
 80053bc:	200000a8 	.word	0x200000a8
 80053c0:	2000003c 	.word	0x2000003c
 80053c4:	20000044 	.word	0x20000044
 80053c8:	20000134 	.word	0x20000134
 80053cc:	20000100 	.word	0x20000100
 80053d0:	0000044c 	.word	0x0000044c
 80053d4:	fffffbe6 	.word	0xfffffbe6
 80053d8:	2000005c 	.word	0x2000005c
 80053dc:	20000058 	.word	0x20000058
 80053e0:	2000014c 	.word	0x2000014c
 80053e4:	fffffcdf 	.word	0xfffffcdf
 80053e8:	0000031f 	.word	0x0000031f

080053ec <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 80053ec:	e7fe      	b.n	80053ec <_Error_Handler>
 80053ee:	46c0      	nop			; (mov r8, r8)

080053f0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053f0:	2301      	movs	r3, #1

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 80053f2:	2005      	movs	r0, #5
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053f4:	4a0e      	ldr	r2, [pc, #56]	; (8005430 <HAL_MspInit+0x40>)
{
 80053f6:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053f8:	6991      	ldr	r1, [r2, #24]
{
 80053fa:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053fc:	4319      	orrs	r1, r3
 80053fe:	6191      	str	r1, [r2, #24]
 8005400:	6992      	ldr	r2, [r2, #24]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8005402:	2100      	movs	r1, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005404:	4013      	ands	r3, r2
 8005406:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8005408:	2200      	movs	r2, #0
 800540a:	4240      	negs	r0, r0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800540c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 800540e:	f7fb fad7 	bl	80009c0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8005412:	2002      	movs	r0, #2
 8005414:	2200      	movs	r2, #0
 8005416:	2100      	movs	r1, #0
 8005418:	4240      	negs	r0, r0
 800541a:	f7fb fad1 	bl	80009c0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800541e:	2001      	movs	r0, #1
 8005420:	2200      	movs	r2, #0
 8005422:	2100      	movs	r1, #0
 8005424:	4240      	negs	r0, r0
 8005426:	f7fb facb 	bl	80009c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800542a:	b003      	add	sp, #12
 800542c:	bd00      	pop	{pc}
 800542e:	46c0      	nop			; (mov r8, r8)
 8005430:	40021000 	.word	0x40021000

08005434 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005434:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8005436:	4b21      	ldr	r3, [pc, #132]	; (80054bc <HAL_ADC_MspInit+0x88>)
 8005438:	6802      	ldr	r2, [r0, #0]
{
 800543a:	b087      	sub	sp, #28
 800543c:	0004      	movs	r4, r0
  if(hadc->Instance==ADC1)
 800543e:	429a      	cmp	r2, r3
 8005440:	d001      	beq.n	8005446 <HAL_ADC_MspInit+0x12>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005442:	b007      	add	sp, #28
 8005444:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005446:	2680      	movs	r6, #128	; 0x80
 8005448:	4b1d      	ldr	r3, [pc, #116]	; (80054c0 <HAL_ADC_MspInit+0x8c>)
 800544a:	00b6      	lsls	r6, r6, #2
 800544c:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800544e:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005450:	4332      	orrs	r2, r6
 8005452:	619a      	str	r2, [r3, #24]
 8005454:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005456:	2700      	movs	r7, #0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005458:	4033      	ands	r3, r6
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 800545e:	2348      	movs	r3, #72	; 0x48
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005460:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8005462:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005464:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005466:	3b45      	subs	r3, #69	; 0x45
 8005468:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800546a:	9703      	str	r7, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800546c:	f7fb fd7c 	bl	8000f68 <HAL_GPIO_Init>
    hdma_adc.Instance = DMA1_Channel1;
 8005470:	4d14      	ldr	r5, [pc, #80]	; (80054c4 <HAL_ADC_MspInit+0x90>)
 8005472:	4b15      	ldr	r3, [pc, #84]	; (80054c8 <HAL_ADC_MspInit+0x94>)
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8005474:	0028      	movs	r0, r5
    hdma_adc.Instance = DMA1_Channel1;
 8005476:	602b      	str	r3, [r5, #0]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8005478:	2380      	movs	r3, #128	; 0x80
 800547a:	60eb      	str	r3, [r5, #12]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800547c:	2380      	movs	r3, #128	; 0x80
 800547e:	011b      	lsls	r3, r3, #4
 8005480:	616b      	str	r3, [r5, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8005482:	2320      	movs	r3, #32
 8005484:	61ab      	str	r3, [r5, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005486:	2380      	movs	r3, #128	; 0x80
 8005488:	015b      	lsls	r3, r3, #5
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800548a:	606f      	str	r7, [r5, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800548c:	60af      	str	r7, [r5, #8]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800548e:	612e      	str	r6, [r5, #16]
    hdma_adc.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005490:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8005492:	f7fb fb03 	bl	8000a9c <HAL_DMA_Init>
 8005496:	2800      	cmp	r0, #0
 8005498:	d10a      	bne.n	80054b0 <HAL_ADC_MspInit+0x7c>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 800549a:	63e5      	str	r5, [r4, #60]	; 0x3c
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 800549c:	2200      	movs	r2, #0
 800549e:	2100      	movs	r1, #0
 80054a0:	200c      	movs	r0, #12
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80054a2:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 80054a4:	f7fb fa8c 	bl	80009c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 80054a8:	200c      	movs	r0, #12
 80054aa:	f7fb fabd 	bl	8000a28 <HAL_NVIC_EnableIRQ>
}
 80054ae:	e7c8      	b.n	8005442 <HAL_ADC_MspInit+0xe>
      _Error_Handler(__FILE__, __LINE__);
 80054b0:	216b      	movs	r1, #107	; 0x6b
 80054b2:	4806      	ldr	r0, [pc, #24]	; (80054cc <HAL_ADC_MspInit+0x98>)
 80054b4:	f7ff ff9a 	bl	80053ec <_Error_Handler>
 80054b8:	e7ef      	b.n	800549a <HAL_ADC_MspInit+0x66>
 80054ba:	46c0      	nop			; (mov r8, r8)
 80054bc:	40012400 	.word	0x40012400
 80054c0:	40021000 	.word	0x40021000
 80054c4:	20000434 	.word	0x20000434
 80054c8:	40020008 	.word	0x40020008
 80054cc:	08005814 	.word	0x08005814

080054d0 <HAL_COMP_MspInit>:
  }

}

void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80054d0:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcomp->Instance==COMP1)
 80054d2:	4b0d      	ldr	r3, [pc, #52]	; (8005508 <HAL_COMP_MspInit+0x38>)
 80054d4:	6802      	ldr	r2, [r0, #0]
{
 80054d6:	b087      	sub	sp, #28
  if(hcomp->Instance==COMP1)
 80054d8:	429a      	cmp	r2, r3
 80054da:	d001      	beq.n	80054e0 <HAL_COMP_MspInit+0x10>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 80054dc:	b007      	add	sp, #28
 80054de:	bd00      	pop	{pc}
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 80054e0:	2322      	movs	r3, #34	; 0x22
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054e2:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 80054e4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80054e6:	3b1f      	subs	r3, #31
 80054e8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ea:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054ec:	a901      	add	r1, sp, #4
 80054ee:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054f0:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054f2:	f7fb fd39 	bl	8000f68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 80054f6:	2200      	movs	r2, #0
 80054f8:	2100      	movs	r1, #0
 80054fa:	200c      	movs	r0, #12
 80054fc:	f7fb fa60 	bl	80009c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8005500:	200c      	movs	r0, #12
 8005502:	f7fb fa91 	bl	8000a28 <HAL_NVIC_EnableIRQ>
}
 8005506:	e7e9      	b.n	80054dc <HAL_COMP_MspInit+0xc>
 8005508:	4001001c 	.word	0x4001001c

0800550c <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800550c:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_base->Instance==TIM1)
 800550e:	6803      	ldr	r3, [r0, #0]
 8005510:	4a3b      	ldr	r2, [pc, #236]	; (8005600 <HAL_TIM_Base_MspInit+0xf4>)
{
 8005512:	b088      	sub	sp, #32
 8005514:	0004      	movs	r4, r0
  if(htim_base->Instance==TIM1)
 8005516:	4293      	cmp	r3, r2
 8005518:	d047      	beq.n	80055aa <HAL_TIM_Base_MspInit+0x9e>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 800551a:	2280      	movs	r2, #128	; 0x80
 800551c:	05d2      	lsls	r2, r2, #23
 800551e:	4293      	cmp	r3, r2
 8005520:	d056      	beq.n	80055d0 <HAL_TIM_Base_MspInit+0xc4>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8005522:	4a38      	ldr	r2, [pc, #224]	; (8005604 <HAL_TIM_Base_MspInit+0xf8>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d004      	beq.n	8005532 <HAL_TIM_Base_MspInit+0x26>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM15)
 8005528:	4a37      	ldr	r2, [pc, #220]	; (8005608 <HAL_TIM_Base_MspInit+0xfc>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d00b      	beq.n	8005546 <HAL_TIM_Base_MspInit+0x3a>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800552e:	b008      	add	sp, #32
 8005530:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005532:	2302      	movs	r3, #2
 8005534:	4a35      	ldr	r2, [pc, #212]	; (800560c <HAL_TIM_Base_MspInit+0x100>)
 8005536:	69d1      	ldr	r1, [r2, #28]
 8005538:	4319      	orrs	r1, r3
 800553a:	61d1      	str	r1, [r2, #28]
 800553c:	69d2      	ldr	r2, [r2, #28]
 800553e:	4013      	ands	r3, r2
 8005540:	9303      	str	r3, [sp, #12]
 8005542:	9b03      	ldr	r3, [sp, #12]
 8005544:	e7f3      	b.n	800552e <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005546:	2080      	movs	r0, #128	; 0x80
 8005548:	4a30      	ldr	r2, [pc, #192]	; (800560c <HAL_TIM_Base_MspInit+0x100>)
 800554a:	0240      	lsls	r0, r0, #9
 800554c:	6991      	ldr	r1, [r2, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800554e:	2600      	movs	r6, #0
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005550:	4301      	orrs	r1, r0
 8005552:	6191      	str	r1, [r2, #24]
 8005554:	6993      	ldr	r3, [r2, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005556:	a903      	add	r1, sp, #12
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005558:	4003      	ands	r3, r0
 800555a:	9302      	str	r3, [sp, #8]
 800555c:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800555e:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005560:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005562:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005564:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005566:	3b02      	subs	r3, #2
 8005568:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800556a:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800556c:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM15;
 800556e:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005570:	f7fb fcfa 	bl	8000f68 <HAL_GPIO_Init>
    hdma_tim15_ch1_up_trig_com.Instance = DMA1_Channel5;
 8005574:	4d26      	ldr	r5, [pc, #152]	; (8005610 <HAL_TIM_Base_MspInit+0x104>)
 8005576:	4b27      	ldr	r3, [pc, #156]	; (8005614 <HAL_TIM_Base_MspInit+0x108>)
    if (HAL_DMA_Init(&hdma_tim15_ch1_up_trig_com) != HAL_OK)
 8005578:	0028      	movs	r0, r5
    hdma_tim15_ch1_up_trig_com.Instance = DMA1_Channel5;
 800557a:	602b      	str	r3, [r5, #0]
    hdma_tim15_ch1_up_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 800557c:	2380      	movs	r3, #128	; 0x80
 800557e:	60eb      	str	r3, [r5, #12]
    hdma_tim15_ch1_up_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005580:	3380      	adds	r3, #128	; 0x80
 8005582:	612b      	str	r3, [r5, #16]
    hdma_tim15_ch1_up_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005584:	2380      	movs	r3, #128	; 0x80
 8005586:	011b      	lsls	r3, r3, #4
 8005588:	616b      	str	r3, [r5, #20]
    hdma_tim15_ch1_up_trig_com.Init.Priority = DMA_PRIORITY_HIGH;
 800558a:	2380      	movs	r3, #128	; 0x80
 800558c:	019b      	lsls	r3, r3, #6
    hdma_tim15_ch1_up_trig_com.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800558e:	606e      	str	r6, [r5, #4]
    hdma_tim15_ch1_up_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 8005590:	60ae      	str	r6, [r5, #8]
    hdma_tim15_ch1_up_trig_com.Init.Mode = DMA_NORMAL;
 8005592:	61ae      	str	r6, [r5, #24]
    hdma_tim15_ch1_up_trig_com.Init.Priority = DMA_PRIORITY_HIGH;
 8005594:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_tim15_ch1_up_trig_com) != HAL_OK)
 8005596:	f7fb fa81 	bl	8000a9c <HAL_DMA_Init>
 800559a:	2800      	cmp	r0, #0
 800559c:	d12a      	bne.n	80055f4 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim15_ch1_up_trig_com);
 800559e:	6265      	str	r5, [r4, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim15_ch1_up_trig_com);
 80055a0:	6225      	str	r5, [r4, #32]
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim15_ch1_up_trig_com);
 80055a2:	63a5      	str	r5, [r4, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim15_ch1_up_trig_com);
 80055a4:	626c      	str	r4, [r5, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim15_ch1_up_trig_com);
 80055a6:	6365      	str	r5, [r4, #52]	; 0x34
}
 80055a8:	e7c1      	b.n	800552e <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM1_CLK_ENABLE();
 80055aa:	2080      	movs	r0, #128	; 0x80
 80055ac:	4a17      	ldr	r2, [pc, #92]	; (800560c <HAL_TIM_Base_MspInit+0x100>)
 80055ae:	0100      	lsls	r0, r0, #4
 80055b0:	6991      	ldr	r1, [r2, #24]
 80055b2:	4301      	orrs	r1, r0
 80055b4:	6191      	str	r1, [r2, #24]
 80055b6:	6993      	ldr	r3, [r2, #24]
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80055b8:	2100      	movs	r1, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 80055ba:	4003      	ands	r3, r0
 80055bc:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80055be:	2200      	movs	r2, #0
 80055c0:	200e      	movs	r0, #14
    __HAL_RCC_TIM1_CLK_ENABLE();
 80055c2:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80055c4:	f7fb f9fc 	bl	80009c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80055c8:	200e      	movs	r0, #14
 80055ca:	f7fb fa2d 	bl	8000a28 <HAL_NVIC_EnableIRQ>
 80055ce:	e7ae      	b.n	800552e <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80055d0:	2301      	movs	r3, #1
 80055d2:	4a0e      	ldr	r2, [pc, #56]	; (800560c <HAL_TIM_Base_MspInit+0x100>)
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80055d4:	200f      	movs	r0, #15
    __HAL_RCC_TIM2_CLK_ENABLE();
 80055d6:	69d1      	ldr	r1, [r2, #28]
 80055d8:	4319      	orrs	r1, r3
 80055da:	61d1      	str	r1, [r2, #28]
 80055dc:	69d2      	ldr	r2, [r2, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80055de:	2100      	movs	r1, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 80055e0:	4013      	ands	r3, r2
 80055e2:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80055e4:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 80055e6:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80055e8:	f7fb f9ea 	bl	80009c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80055ec:	200f      	movs	r0, #15
 80055ee:	f7fb fa1b 	bl	8000a28 <HAL_NVIC_EnableIRQ>
 80055f2:	e79c      	b.n	800552e <HAL_TIM_Base_MspInit+0x22>
      _Error_Handler(__FILE__, __LINE__);
 80055f4:	2124      	movs	r1, #36	; 0x24
 80055f6:	4808      	ldr	r0, [pc, #32]	; (8005618 <HAL_TIM_Base_MspInit+0x10c>)
 80055f8:	31ff      	adds	r1, #255	; 0xff
 80055fa:	f7ff fef7 	bl	80053ec <_Error_Handler>
 80055fe:	e7ce      	b.n	800559e <HAL_TIM_Base_MspInit+0x92>
 8005600:	40012c00 	.word	0x40012c00
 8005604:	40000400 	.word	0x40000400
 8005608:	40014000 	.word	0x40014000
 800560c:	40021000 	.word	0x40021000
 8005610:	20000368 	.word	0x20000368
 8005614:	40020058 	.word	0x40020058
 8005618:	08005814 	.word	0x08005814

0800561c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800561c:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 800561e:	4b10      	ldr	r3, [pc, #64]	; (8005660 <HAL_TIM_MspPostInit+0x44>)
 8005620:	6802      	ldr	r2, [r0, #0]
{
 8005622:	b087      	sub	sp, #28
  if(htim->Instance==TIM1)
 8005624:	429a      	cmp	r2, r3
 8005626:	d001      	beq.n	800562c <HAL_TIM_MspPostInit+0x10>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005628:	b007      	add	sp, #28
 800562a:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 800562c:	23f8      	movs	r3, #248	; 0xf8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800562e:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005630:	2402      	movs	r4, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005632:	2500      	movs	r5, #0
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8005634:	011b      	lsls	r3, r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005636:	a901      	add	r1, sp, #4
 8005638:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 800563a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800563c:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800563e:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005640:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8005642:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005644:	f7fb fc90 	bl	8000f68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005648:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800564a:	a901      	add	r1, sp, #4
 800564c:	4805      	ldr	r0, [pc, #20]	; (8005664 <HAL_TIM_MspPostInit+0x48>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800564e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005650:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005652:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005654:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8005656:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005658:	f7fb fc86 	bl	8000f68 <HAL_GPIO_Init>
}
 800565c:	e7e4      	b.n	8005628 <HAL_TIM_MspPostInit+0xc>
 800565e:	46c0      	nop			; (mov r8, r8)
 8005660:	40012c00 	.word	0x40012c00
 8005664:	48000400 	.word	0x48000400

08005668 <NMI_Handler>:
 8005668:	4770      	bx	lr
 800566a:	46c0      	nop			; (mov r8, r8)

0800566c <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800566c:	e7fe      	b.n	800566c <HardFault_Handler>
 800566e:	46c0      	nop			; (mov r8, r8)

08005670 <SVC_Handler>:
 8005670:	4770      	bx	lr
 8005672:	46c0      	nop			; (mov r8, r8)

08005674 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005674:	4770      	bx	lr
 8005676:	46c0      	nop			; (mov r8, r8)

08005678 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8005678:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800567a:	f7fa fedd 	bl	8000438 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800567e:	f7fb fa09 	bl	8000a94 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005682:	bd10      	pop	{r4, pc}

08005684 <DMA1_Channel1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt.
*/
void DMA1_Channel1_IRQHandler(void)
{
 8005684:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8005686:	4802      	ldr	r0, [pc, #8]	; (8005690 <DMA1_Channel1_IRQHandler+0xc>)
 8005688:	f7fb fa7c 	bl	8000b84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800568c:	bd10      	pop	{r4, pc}
 800568e:	46c0      	nop			; (mov r8, r8)
 8005690:	20000434 	.word	0x20000434

08005694 <DMA1_Channel4_5_IRQHandler>:

/**
* @brief This function handles DMA1 channel 4 and 5 interrupts.
*/
void DMA1_Channel4_5_IRQHandler(void)
{
 8005694:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim15_ch1_up_trig_com);
 8005696:	4803      	ldr	r0, [pc, #12]	; (80056a4 <DMA1_Channel4_5_IRQHandler+0x10>)
 8005698:	f7fb fa74 	bl	8000b84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */
  transferComplete();
 800569c:	f7fe ffdc 	bl	8004658 <transferComplete>
  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 80056a0:	bd10      	pop	{r4, pc}
 80056a2:	46c0      	nop			; (mov r8, r8)
 80056a4:	20000368 	.word	0x20000368

080056a8 <ADC1_COMP_IRQHandler>:

/**
* @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
*/
void ADC1_COMP_IRQHandler(void)
{
 80056a8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */
//	HAL_COMP_IRQHandler(&hcomp1);
  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80056aa:	4803      	ldr	r0, [pc, #12]	; (80056b8 <ADC1_COMP_IRQHandler+0x10>)
 80056ac:	f7fa ff90 	bl	80005d0 <HAL_ADC_IRQHandler>
  HAL_COMP_IRQHandler(&hcomp1);
 80056b0:	4802      	ldr	r0, [pc, #8]	; (80056bc <ADC1_COMP_IRQHandler+0x14>)
 80056b2:	f7fb f96f 	bl	8000994 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 80056b6:	bd10      	pop	{r4, pc}
 80056b8:	20000478 	.word	0x20000478
 80056bc:	200001f0 	.word	0x200001f0

080056c0 <TIM1_CC_IRQHandler>:

/**
* @brief This function handles TIM1 capture compare interrupt.
*/
void TIM1_CC_IRQHandler(void)
{
 80056c0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80056c2:	4802      	ldr	r0, [pc, #8]	; (80056cc <TIM1_CC_IRQHandler+0xc>)
 80056c4:	f7fc fde2 	bl	800228c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80056c8:	bd10      	pop	{r4, pc}
 80056ca:	46c0      	nop			; (mov r8, r8)
 80056cc:	200003ac 	.word	0x200003ac

080056d0 <TIM2_IRQHandler>:

/**
* @brief This function handles TIM2 global interrupt.
*/
void TIM2_IRQHandler(void)
{
 80056d0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80056d2:	4802      	ldr	r0, [pc, #8]	; (80056dc <TIM2_IRQHandler+0xc>)
 80056d4:	f7fc fdda 	bl	800228c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80056d8:	bd10      	pop	{r4, pc}
 80056da:	46c0      	nop			; (mov r8, r8)
 80056dc:	200003ec 	.word	0x200003ec

080056e0 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 80056e0:	2101      	movs	r1, #1
 80056e2:	4b11      	ldr	r3, [pc, #68]	; (8005728 <SystemInit+0x48>)

#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 80056e4:	4811      	ldr	r0, [pc, #68]	; (800572c <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	430a      	orrs	r2, r1
 80056ea:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 80056ec:	685a      	ldr	r2, [r3, #4]
 80056ee:	4002      	ands	r2, r0
 80056f0:	605a      	str	r2, [r3, #4]
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	480e      	ldr	r0, [pc, #56]	; (8005730 <SystemInit+0x50>)
 80056f6:	4002      	ands	r2, r0
 80056f8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	480d      	ldr	r0, [pc, #52]	; (8005734 <SystemInit+0x54>)
 80056fe:	4002      	ands	r2, r0
 8005700:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8005702:	685a      	ldr	r2, [r3, #4]
 8005704:	480c      	ldr	r0, [pc, #48]	; (8005738 <SystemInit+0x58>)
 8005706:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8005708:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800570a:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 800570c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800570e:	4382      	bics	r2, r0
 8005710:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
#elif defined (STM32F051x8) || defined (STM32F058xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
 8005712:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005714:	4809      	ldr	r0, [pc, #36]	; (800573c <SystemInit+0x5c>)
 8005716:	4002      	ands	r2, r0
 8005718:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 800571a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800571c:	438a      	bics	r2, r1
 800571e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8005720:	2200      	movs	r2, #0
 8005722:	609a      	str	r2, [r3, #8]

}
 8005724:	4770      	bx	lr
 8005726:	46c0      	nop			; (mov r8, r8)
 8005728:	40021000 	.word	0x40021000
 800572c:	f8ffb80c 	.word	0xf8ffb80c
 8005730:	fef6ffff 	.word	0xfef6ffff
 8005734:	fffbffff 	.word	0xfffbffff
 8005738:	ffc0ffff 	.word	0xffc0ffff
 800573c:	fffffeac 	.word	0xfffffeac

08005740 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005740:	480d      	ldr	r0, [pc, #52]	; (8005778 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005742:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005744:	480d      	ldr	r0, [pc, #52]	; (800577c <LoopForever+0x6>)
  ldr r1, =_edata
 8005746:	490e      	ldr	r1, [pc, #56]	; (8005780 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005748:	4a0e      	ldr	r2, [pc, #56]	; (8005784 <LoopForever+0xe>)
  movs r3, #0
 800574a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800574c:	e002      	b.n	8005754 <LoopCopyDataInit>

0800574e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800574e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005752:	3304      	adds	r3, #4

08005754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005758:	d3f9      	bcc.n	800574e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800575a:	4a0b      	ldr	r2, [pc, #44]	; (8005788 <LoopForever+0x12>)
  ldr r4, =_ebss
 800575c:	4c0b      	ldr	r4, [pc, #44]	; (800578c <LoopForever+0x16>)
  movs r3, #0
 800575e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005760:	e001      	b.n	8005766 <LoopFillZerobss>

08005762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005764:	3204      	adds	r2, #4

08005766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005768:	d3fb      	bcc.n	8005762 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800576a:	f7ff ffb9 	bl	80056e0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800576e:	f000 f811 	bl	8005794 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005772:	f7ff f8ad 	bl	80048d0 <main>

08005776 <LoopForever>:

LoopForever:
    b LoopForever
 8005776:	e7fe      	b.n	8005776 <LoopForever>
  ldr   r0, =_estack
 8005778:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800577c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005780:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8005784:	08005848 	.word	0x08005848
  ldr r2, =_sbss
 8005788:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800578c:	200004c4 	.word	0x200004c4

08005790 <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005790:	e7fe      	b.n	8005790 <CEC_CAN_IRQHandler>
	...

08005794 <__libc_init_array>:
 8005794:	b570      	push	{r4, r5, r6, lr}
 8005796:	2600      	movs	r6, #0
 8005798:	4d0c      	ldr	r5, [pc, #48]	; (80057cc <__libc_init_array+0x38>)
 800579a:	4c0d      	ldr	r4, [pc, #52]	; (80057d0 <__libc_init_array+0x3c>)
 800579c:	1b64      	subs	r4, r4, r5
 800579e:	10a4      	asrs	r4, r4, #2
 80057a0:	42a6      	cmp	r6, r4
 80057a2:	d109      	bne.n	80057b8 <__libc_init_array+0x24>
 80057a4:	2600      	movs	r6, #0
 80057a6:	f000 f819 	bl	80057dc <_init>
 80057aa:	4d0a      	ldr	r5, [pc, #40]	; (80057d4 <__libc_init_array+0x40>)
 80057ac:	4c0a      	ldr	r4, [pc, #40]	; (80057d8 <__libc_init_array+0x44>)
 80057ae:	1b64      	subs	r4, r4, r5
 80057b0:	10a4      	asrs	r4, r4, #2
 80057b2:	42a6      	cmp	r6, r4
 80057b4:	d105      	bne.n	80057c2 <__libc_init_array+0x2e>
 80057b6:	bd70      	pop	{r4, r5, r6, pc}
 80057b8:	00b3      	lsls	r3, r6, #2
 80057ba:	58eb      	ldr	r3, [r5, r3]
 80057bc:	4798      	blx	r3
 80057be:	3601      	adds	r6, #1
 80057c0:	e7ee      	b.n	80057a0 <__libc_init_array+0xc>
 80057c2:	00b3      	lsls	r3, r6, #2
 80057c4:	58eb      	ldr	r3, [r5, r3]
 80057c6:	4798      	blx	r3
 80057c8:	3601      	adds	r6, #1
 80057ca:	e7f2      	b.n	80057b2 <__libc_init_array+0x1e>
 80057cc:	08005840 	.word	0x08005840
 80057d0:	08005840 	.word	0x08005840
 80057d4:	08005840 	.word	0x08005840
 80057d8:	08005844 	.word	0x08005844

080057dc <_init>:
 80057dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057de:	46c0      	nop			; (mov r8, r8)
 80057e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057e2:	bc08      	pop	{r3}
 80057e4:	469e      	mov	lr, r3
 80057e6:	4770      	bx	lr

080057e8 <_fini>:
 80057e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ea:	46c0      	nop			; (mov r8, r8)
 80057ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ee:	bc08      	pop	{r3}
 80057f0:	469e      	mov	lr, r3
 80057f2:	4770      	bx	lr
