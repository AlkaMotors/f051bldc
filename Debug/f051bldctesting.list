
f051bldctesting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a70  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08004b30  08004b30  00014b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004b7c  08004b7c  00014b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004b80  08004b80  00014b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000044  20000000  08004b84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000408  20000044  08004bc8  00020044  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000044c  08004bc8  0002044c  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
  9 .debug_info   00018d9b  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002c0f  00000000  00000000  00038e07  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000f113  00000000  00000000  0003ba16  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000928  00000000  00000000  0004ab30  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002788  00000000  00000000  0004b458  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006e1b  00000000  00000000  0004dbe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000036ff  00000000  00000000  000549fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000580fa  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001a8c  00000000  00000000  00058178  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000044 	.word	0x20000044
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004b18 	.word	0x08004b18

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000048 	.word	0x20000048
 8000104:	08004b18 	.word	0x08004b18

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003f4:	b510      	push	{r4, lr}
 80003f6:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 80003f8:	f001 f8e4 	bl	80015c4 <HAL_RCC_GetHCLKFreq>
 80003fc:	21fa      	movs	r1, #250	; 0xfa
 80003fe:	0089      	lsls	r1, r1, #2
 8000400:	f7ff fe82 	bl	8000108 <__udivsi3>
 8000404:	f000 fbc4 	bl	8000b90 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000408:	2001      	movs	r0, #1
 800040a:	2200      	movs	r2, #0
 800040c:	0021      	movs	r1, r4
 800040e:	4240      	negs	r0, r0
 8000410:	f000 fb80 	bl	8000b14 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000414:	2000      	movs	r0, #0
 8000416:	bd10      	pop	{r4, pc}

08000418 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000418:	2110      	movs	r1, #16
 800041a:	4a06      	ldr	r2, [pc, #24]	; (8000434 <HAL_Init+0x1c>)
{
 800041c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800041e:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000420:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000422:	430b      	orrs	r3, r1
 8000424:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000426:	f7ff ffe5 	bl	80003f4 <HAL_InitTick>
  HAL_MspInit();
 800042a:	f004 f97f 	bl	800472c <HAL_MspInit>
}
 800042e:	2000      	movs	r0, #0
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			; (mov r8, r8)
 8000434:	40022000 	.word	0x40022000

08000438 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000438:	4a02      	ldr	r2, [pc, #8]	; (8000444 <HAL_IncTick+0xc>)
 800043a:	6813      	ldr	r3, [r2, #0]
 800043c:	3301      	adds	r3, #1
 800043e:	6013      	str	r3, [r2, #0]
}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	2000012c 	.word	0x2000012c

08000448 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000448:	4b01      	ldr	r3, [pc, #4]	; (8000450 <HAL_GetTick+0x8>)
 800044a:	6818      	ldr	r0, [r3, #0]
}
 800044c:	4770      	bx	lr
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	2000012c 	.word	0x2000012c

08000454 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000454:	b530      	push	{r4, r5, lr}
 8000456:	b083      	sub	sp, #12
 8000458:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 800045a:	f7ff fff5 	bl	8000448 <HAL_GetTick>
  uint32_t wait = Delay;
 800045e:	9c01      	ldr	r4, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000460:	0005      	movs	r5, r0
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
     wait++;
 8000462:	1c63      	adds	r3, r4, #1
 8000464:	1e5a      	subs	r2, r3, #1
 8000466:	4193      	sbcs	r3, r2
 8000468:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800046a:	f7ff ffed 	bl	8000448 <HAL_GetTick>
 800046e:	1b40      	subs	r0, r0, r5
 8000470:	42a0      	cmp	r0, r4
 8000472:	d3fa      	bcc.n	800046a <HAL_Delay+0x16>
  {
  }
}
 8000474:	b003      	add	sp, #12
 8000476:	bd30      	pop	{r4, r5, pc}

08000478 <ADC_Enable>:
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8000478:	2300      	movs	r3, #0
{
 800047a:	b570      	push	{r4, r5, r6, lr}
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800047c:	6802      	ldr	r2, [r0, #0]
{
 800047e:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8000480:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000482:	6891      	ldr	r1, [r2, #8]
 8000484:	3303      	adds	r3, #3
{
 8000486:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000488:	400b      	ands	r3, r1
 800048a:	2b01      	cmp	r3, #1
 800048c:	d031      	beq.n	80004f2 <ADC_Enable+0x7a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800048e:	6891      	ldr	r1, [r2, #8]
 8000490:	4b20      	ldr	r3, [pc, #128]	; (8000514 <ADC_Enable+0x9c>)
 8000492:	4219      	tst	r1, r3
 8000494:	d122      	bne.n	80004dc <ADC_Enable+0x64>
      
      return HAL_ERROR;
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000496:	2101      	movs	r1, #1
 8000498:	6893      	ldr	r3, [r2, #8]
 800049a:	430b      	orrs	r3, r1
 800049c:	6093      	str	r3, [r2, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800049e:	4b1e      	ldr	r3, [pc, #120]	; (8000518 <ADC_Enable+0xa0>)
 80004a0:	491e      	ldr	r1, [pc, #120]	; (800051c <ADC_Enable+0xa4>)
 80004a2:	6818      	ldr	r0, [r3, #0]
 80004a4:	f7ff fe30 	bl	8000108 <__udivsi3>
 80004a8:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 80004aa:	9b01      	ldr	r3, [sp, #4]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d005      	beq.n	80004bc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80004b0:	9b01      	ldr	r3, [sp, #4]
 80004b2:	3b01      	subs	r3, #1
 80004b4:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80004b6:	9b01      	ldr	r3, [sp, #4]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d1f9      	bne.n	80004b0 <ADC_Enable+0x38>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80004bc:	f7ff ffc4 	bl	8000448 <HAL_GetTick>
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80004c0:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 80004c2:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80004c4:	e004      	b.n	80004d0 <ADC_Enable+0x58>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80004c6:	f7ff ffbf 	bl	8000448 <HAL_GetTick>
 80004ca:	1b80      	subs	r0, r0, r6
 80004cc:	2802      	cmp	r0, #2
 80004ce:	d818      	bhi.n	8000502 <ADC_Enable+0x8a>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80004d0:	6823      	ldr	r3, [r4, #0]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	421d      	tst	r5, r3
 80004d6:	d0f6      	beq.n	80004c6 <ADC_Enable+0x4e>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80004d8:	2000      	movs	r0, #0
 80004da:	e008      	b.n	80004ee <ADC_Enable+0x76>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80004dc:	2210      	movs	r2, #16
      return HAL_ERROR;
 80004de:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80004e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80004e2:	4313      	orrs	r3, r2
 80004e4:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004e6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80004e8:	3a0f      	subs	r2, #15
 80004ea:	4313      	orrs	r3, r2
 80004ec:	64a3      	str	r3, [r4, #72]	; 0x48
}
 80004ee:	b002      	add	sp, #8
 80004f0:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80004f2:	6811      	ldr	r1, [r2, #0]
 80004f4:	420b      	tst	r3, r1
 80004f6:	d1ef      	bne.n	80004d8 <ADC_Enable+0x60>
 80004f8:	68d3      	ldr	r3, [r2, #12]
 80004fa:	041b      	lsls	r3, r3, #16
 80004fc:	d5c7      	bpl.n	800048e <ADC_Enable+0x16>
  return HAL_OK;
 80004fe:	2000      	movs	r0, #0
 8000500:	e7f5      	b.n	80004ee <ADC_Enable+0x76>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000502:	2210      	movs	r2, #16
 8000504:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 8000506:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000508:	4313      	orrs	r3, r2
 800050a:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800050c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800050e:	431d      	orrs	r5, r3
 8000510:	64a5      	str	r5, [r4, #72]	; 0x48
        return HAL_ERROR;
 8000512:	e7ec      	b.n	80004ee <ADC_Enable+0x76>
 8000514:	80000017 	.word	0x80000017
 8000518:	20000040 	.word	0x20000040
 800051c:	000f4240 	.word	0x000f4240

08000520 <HAL_ADC_Init>:
{
 8000520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000522:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 8000524:	d100      	bne.n	8000528 <HAL_ADC_Init+0x8>
 8000526:	e080      	b.n	800062a <HAL_ADC_Init+0x10a>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000528:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800052a:	2b00      	cmp	r3, #0
 800052c:	d067      	beq.n	80005fe <HAL_ADC_Init+0xde>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800052e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000530:	06db      	lsls	r3, r3, #27
 8000532:	d45e      	bmi.n	80005f2 <HAL_ADC_Init+0xd2>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000534:	2004      	movs	r0, #4
 8000536:	6823      	ldr	r3, [r4, #0]
 8000538:	689a      	ldr	r2, [r3, #8]
 800053a:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 800053c:	d159      	bne.n	80005f2 <HAL_ADC_Init+0xd2>
    ADC_STATE_CLR_SET(hadc->State,
 800053e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000540:	4948      	ldr	r1, [pc, #288]	; (8000664 <HAL_ADC_Init+0x144>)
 8000542:	400a      	ands	r2, r1
 8000544:	3106      	adds	r1, #6
 8000546:	31ff      	adds	r1, #255	; 0xff
 8000548:	430a      	orrs	r2, r1
 800054a:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 800054c:	2203      	movs	r2, #3
 800054e:	6899      	ldr	r1, [r3, #8]
 8000550:	400a      	ands	r2, r1
 8000552:	2a01      	cmp	r2, #1
 8000554:	d059      	beq.n	800060a <HAL_ADC_Init+0xea>
      MODIFY_REG(hadc->Instance->CFGR1,
 8000556:	2118      	movs	r1, #24
 8000558:	68da      	ldr	r2, [r3, #12]
 800055a:	438a      	bics	r2, r1
 800055c:	68a1      	ldr	r1, [r4, #8]
 800055e:	430a      	orrs	r2, r1
 8000560:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000562:	691a      	ldr	r2, [r3, #16]
 8000564:	6861      	ldr	r1, [r4, #4]
 8000566:	0092      	lsls	r2, r2, #2
 8000568:	0892      	lsrs	r2, r2, #2
 800056a:	430a      	orrs	r2, r1
 800056c:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800056e:	68da      	ldr	r2, [r3, #12]
 8000570:	493d      	ldr	r1, [pc, #244]	; (8000668 <HAL_ADC_Init+0x148>)
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8000572:	6a26      	ldr	r6, [r4, #32]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000574:	400a      	ands	r2, r1
 8000576:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8000578:	69a2      	ldr	r2, [r4, #24]
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800057a:	0377      	lsls	r7, r6, #13
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800057c:	0391      	lsls	r1, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 800057e:	69e2      	ldr	r2, [r4, #28]
 8000580:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8000582:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8000584:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000586:	3a01      	subs	r2, #1
 8000588:	1e55      	subs	r5, r2, #1
 800058a:	41aa      	sbcs	r2, r5
 800058c:	0315      	lsls	r5, r2, #12
 800058e:	68e2      	ldr	r2, [r4, #12]
 8000590:	4311      	orrs	r1, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8000592:	6922      	ldr	r2, [r4, #16]
 8000594:	4339      	orrs	r1, r7
 8000596:	2a02      	cmp	r2, #2
 8000598:	d059      	beq.n	800064e <HAL_ADC_Init+0x12e>
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 800059a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800059c:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800059e:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80005a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80005a2:	432a      	orrs	r2, r5
 80005a4:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80005a6:	2901      	cmp	r1, #1
 80005a8:	d04b      	beq.n	8000642 <HAL_ADC_Init+0x122>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80005aa:	20c2      	movs	r0, #194	; 0xc2
 80005ac:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80005ae:	30ff      	adds	r0, #255	; 0xff
 80005b0:	4281      	cmp	r1, r0
 80005b2:	d002      	beq.n	80005ba <HAL_ADC_Init+0x9a>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80005b4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80005b6:	4301      	orrs	r1, r0
 80005b8:	430a      	orrs	r2, r1
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80005ba:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80005bc:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80005be:	4311      	orrs	r1, r2
 80005c0:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80005c2:	2180      	movs	r1, #128	; 0x80
 80005c4:	0549      	lsls	r1, r1, #21
 80005c6:	428d      	cmp	r5, r1
 80005c8:	d026      	beq.n	8000618 <HAL_ADC_Init+0xf8>
 80005ca:	1e69      	subs	r1, r5, #1
 80005cc:	2906      	cmp	r1, #6
 80005ce:	d923      	bls.n	8000618 <HAL_ADC_Init+0xf8>
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80005d0:	68db      	ldr	r3, [r3, #12]
 80005d2:	4926      	ldr	r1, [pc, #152]	; (800066c <HAL_ADC_Init+0x14c>)
 80005d4:	400b      	ands	r3, r1
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d029      	beq.n	800062e <HAL_ADC_Init+0x10e>
      ADC_STATE_CLR_SET(hadc->State,
 80005da:	2212      	movs	r2, #18
 80005dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
      tmp_hal_status = HAL_ERROR;
 80005de:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 80005e0:	4393      	bics	r3, r2
 80005e2:	3a02      	subs	r2, #2
 80005e4:	4313      	orrs	r3, r2
 80005e6:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80005e8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80005ea:	3a0f      	subs	r2, #15
 80005ec:	4313      	orrs	r3, r2
 80005ee:	64a3      	str	r3, [r4, #72]	; 0x48
 80005f0:	e004      	b.n	80005fc <HAL_ADC_Init+0xdc>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80005f2:	2210      	movs	r2, #16
    tmp_hal_status = HAL_ERROR;
 80005f4:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80005f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80005f8:	4313      	orrs	r3, r2
 80005fa:	6463      	str	r3, [r4, #68]	; 0x44
}
 80005fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hadc->Lock = HAL_UNLOCKED;
 80005fe:	2240      	movs	r2, #64	; 0x40
    ADC_CLEAR_ERRORCODE(hadc);
 8000600:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 8000602:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 8000604:	f004 f8b4 	bl	8004770 <HAL_ADC_MspInit>
 8000608:	e791      	b.n	800052e <HAL_ADC_Init+0xe>
    if (ADC_IS_ENABLE(hadc) == RESET)
 800060a:	6819      	ldr	r1, [r3, #0]
 800060c:	420a      	tst	r2, r1
 800060e:	d1ae      	bne.n	800056e <HAL_ADC_Init+0x4e>
 8000610:	68da      	ldr	r2, [r3, #12]
 8000612:	0412      	lsls	r2, r2, #16
 8000614:	d59f      	bpl.n	8000556 <HAL_ADC_Init+0x36>
 8000616:	e7aa      	b.n	800056e <HAL_ADC_Init+0x4e>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000618:	2107      	movs	r1, #7
 800061a:	6958      	ldr	r0, [r3, #20]
 800061c:	4388      	bics	r0, r1
 800061e:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000620:	6958      	ldr	r0, [r3, #20]
 8000622:	4029      	ands	r1, r5
 8000624:	4301      	orrs	r1, r0
 8000626:	6159      	str	r1, [r3, #20]
 8000628:	e7d2      	b.n	80005d0 <HAL_ADC_Init+0xb0>
    return HAL_ERROR;
 800062a:	2001      	movs	r0, #1
 800062c:	e7e6      	b.n	80005fc <HAL_ADC_Init+0xdc>
      ADC_CLEAR_ERRORCODE(hadc);
 800062e:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 8000630:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8000632:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 8000634:	6c63      	ldr	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000636:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8000638:	4393      	bics	r3, r2
 800063a:	3a02      	subs	r2, #2
 800063c:	4313      	orrs	r3, r2
 800063e:	6463      	str	r3, [r4, #68]	; 0x44
 8000640:	e7dc      	b.n	80005fc <HAL_ADC_Init+0xdc>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000642:	2e00      	cmp	r6, #0
 8000644:	d105      	bne.n	8000652 <HAL_ADC_Init+0x132>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000646:	2180      	movs	r1, #128	; 0x80
 8000648:	0249      	lsls	r1, r1, #9
 800064a:	430a      	orrs	r2, r1
 800064c:	e7ad      	b.n	80005aa <HAL_ADC_Init+0x8a>
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800064e:	2004      	movs	r0, #4
 8000650:	e7a3      	b.n	800059a <HAL_ADC_Init+0x7a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000652:	2520      	movs	r5, #32
 8000654:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8000656:	4328      	orrs	r0, r5
 8000658:	6460      	str	r0, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800065a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800065c:	4301      	orrs	r1, r0
 800065e:	64a1      	str	r1, [r4, #72]	; 0x48
 8000660:	e7a3      	b.n	80005aa <HAL_ADC_Init+0x8a>
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	fffffefd 	.word	0xfffffefd
 8000668:	fffe0219 	.word	0xfffe0219
 800066c:	833fffe7 	.word	0x833fffe7

08000670 <HAL_ADC_Start_DMA>:
{
 8000670:	b570      	push	{r4, r5, r6, lr}
 8000672:	000d      	movs	r5, r1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000674:	6801      	ldr	r1, [r0, #0]
{
 8000676:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000678:	688b      	ldr	r3, [r1, #8]
{
 800067a:	0016      	movs	r6, r2
    tmp_hal_status = HAL_BUSY;
 800067c:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800067e:	075b      	lsls	r3, r3, #29
 8000680:	d500      	bpl.n	8000684 <HAL_ADC_Start_DMA+0x14>
}
 8000682:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(hadc);
 8000684:	2340      	movs	r3, #64	; 0x40
 8000686:	5ce2      	ldrb	r2, [r4, r3]
 8000688:	2a01      	cmp	r2, #1
 800068a:	d0fa      	beq.n	8000682 <HAL_ADC_Start_DMA+0x12>
 800068c:	2201      	movs	r2, #1
 800068e:	54e2      	strb	r2, [r4, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000690:	69e3      	ldr	r3, [r4, #28]
 8000692:	2b01      	cmp	r3, #1
 8000694:	d127      	bne.n	80006e6 <HAL_ADC_Start_DMA+0x76>
      ADC_STATE_CLR_SET(hadc->State,
 8000696:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000698:	4a16      	ldr	r2, [pc, #88]	; (80006f4 <HAL_ADC_Start_DMA+0x84>)
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800069a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 800069c:	401a      	ands	r2, r3
 800069e:	2380      	movs	r3, #128	; 0x80
 80006a0:	005b      	lsls	r3, r3, #1
 80006a2:	4313      	orrs	r3, r2
 80006a4:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 80006a6:	2240      	movs	r2, #64	; 0x40
      ADC_CLEAR_ERRORCODE(hadc);
 80006a8:	2300      	movs	r3, #0
 80006aa:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 80006ac:	54a3      	strb	r3, [r4, r2]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80006ae:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <HAL_ADC_Start_DMA+0x88>)
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80006b0:	3a30      	subs	r2, #48	; 0x30
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80006b2:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <HAL_ADC_Start_DMA+0x8c>)
 80006b6:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80006b8:	4b11      	ldr	r3, [pc, #68]	; (8000700 <HAL_ADC_Start_DMA+0x90>)
 80006ba:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80006bc:	231c      	movs	r3, #28
 80006be:	600b      	str	r3, [r1, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80006c0:	684b      	ldr	r3, [r1, #4]
 80006c2:	4313      	orrs	r3, r2
 80006c4:	604b      	str	r3, [r1, #4]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80006c6:	68cb      	ldr	r3, [r1, #12]
 80006c8:	3a0f      	subs	r2, #15
 80006ca:	4313      	orrs	r3, r2
 80006cc:	60cb      	str	r3, [r1, #12]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80006ce:	002a      	movs	r2, r5
 80006d0:	3140      	adds	r1, #64	; 0x40
 80006d2:	0033      	movs	r3, r6
 80006d4:	f000 fac4 	bl	8000c60 <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80006d8:	2104      	movs	r1, #4
 80006da:	6822      	ldr	r2, [r4, #0]
 80006dc:	2000      	movs	r0, #0
 80006de:	6893      	ldr	r3, [r2, #8]
 80006e0:	430b      	orrs	r3, r1
 80006e2:	6093      	str	r3, [r2, #8]
 80006e4:	e7cd      	b.n	8000682 <HAL_ADC_Start_DMA+0x12>
      tmp_hal_status = ADC_Enable(hadc);
 80006e6:	0020      	movs	r0, r4
 80006e8:	f7ff fec6 	bl	8000478 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80006ec:	2800      	cmp	r0, #0
 80006ee:	d1c8      	bne.n	8000682 <HAL_ADC_Start_DMA+0x12>
 80006f0:	6821      	ldr	r1, [r4, #0]
 80006f2:	e7d0      	b.n	8000696 <HAL_ADC_Start_DMA+0x26>
 80006f4:	fffff0fe 	.word	0xfffff0fe
 80006f8:	08000705 	.word	0x08000705
 80006fc:	08000779 	.word	0x08000779
 8000700:	0800078d 	.word	0x0800078d

08000704 <ADC_DMAConvCplt>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000704:	2150      	movs	r1, #80	; 0x50
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000706:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8000708:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800070a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800070c:	4211      	tst	r1, r2
 800070e:	d122      	bne.n	8000756 <ADC_DMAConvCplt+0x52>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000710:	2280      	movs	r2, #128	; 0x80
 8000712:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000714:	0092      	lsls	r2, r2, #2
 8000716:	430a      	orrs	r2, r1
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000718:	21c0      	movs	r1, #192	; 0xc0
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800071a:	645a      	str	r2, [r3, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	0109      	lsls	r1, r1, #4
 8000720:	68d0      	ldr	r0, [r2, #12]
 8000722:	4208      	tst	r0, r1
 8000724:	d113      	bne.n	800074e <ADC_DMAConvCplt+0x4a>
 8000726:	6a19      	ldr	r1, [r3, #32]
 8000728:	2900      	cmp	r1, #0
 800072a:	d110      	bne.n	800074e <ADC_DMAConvCplt+0x4a>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800072c:	6811      	ldr	r1, [r2, #0]
 800072e:	0709      	lsls	r1, r1, #28
 8000730:	d50d      	bpl.n	800074e <ADC_DMAConvCplt+0x4a>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000732:	6891      	ldr	r1, [r2, #8]
 8000734:	0749      	lsls	r1, r1, #29
 8000736:	d412      	bmi.n	800075e <ADC_DMAConvCplt+0x5a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000738:	200c      	movs	r0, #12
 800073a:	6851      	ldr	r1, [r2, #4]
 800073c:	4381      	bics	r1, r0
 800073e:	6051      	str	r1, [r2, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000740:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000742:	490b      	ldr	r1, [pc, #44]	; (8000770 <ADC_DMAConvCplt+0x6c>)
 8000744:	400a      	ands	r2, r1
 8000746:	3104      	adds	r1, #4
 8000748:	31ff      	adds	r1, #255	; 0xff
 800074a:	430a      	orrs	r2, r1
 800074c:	645a      	str	r2, [r3, #68]	; 0x44
        }
      }
    }

    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 800074e:	0018      	movs	r0, r3
 8000750:	f002 ff0a 	bl	8003568 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8000754:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4798      	blx	r3
}
 800075c:	e7fa      	b.n	8000754 <ADC_DMAConvCplt+0x50>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800075e:	2120      	movs	r1, #32
 8000760:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000762:	430a      	orrs	r2, r1
 8000764:	645a      	str	r2, [r3, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000766:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000768:	391f      	subs	r1, #31
 800076a:	430a      	orrs	r2, r1
 800076c:	649a      	str	r2, [r3, #72]	; 0x48
 800076e:	e7ee      	b.n	800074e <ADC_DMAConvCplt+0x4a>
 8000770:	fffffefe 	.word	0xfffffefe

08000774 <HAL_ADC_ConvHalfCpltCallback>:
 8000774:	4770      	bx	lr
 8000776:	46c0      	nop			; (mov r8, r8)

08000778 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000778:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800077a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800077c:	f7ff fffa 	bl	8000774 <HAL_ADC_ConvHalfCpltCallback>
}
 8000780:	bd10      	pop	{r4, pc}
 8000782:	46c0      	nop			; (mov r8, r8)

08000784 <HAL_ADC_LevelOutOfWindowCallback>:
 8000784:	4770      	bx	lr
 8000786:	46c0      	nop			; (mov r8, r8)

08000788 <HAL_ADC_ErrorCallback>:
}
 8000788:	4770      	bx	lr
 800078a:	46c0      	nop			; (mov r8, r8)

0800078c <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800078c:	2240      	movs	r2, #64	; 0x40
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800078e:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8000790:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000792:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000794:	4313      	orrs	r3, r2
 8000796:	6443      	str	r3, [r0, #68]	; 0x44
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000798:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800079a:	3a3c      	subs	r2, #60	; 0x3c
 800079c:	4313      	orrs	r3, r2
 800079e:	6483      	str	r3, [r0, #72]	; 0x48
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 80007a0:	f7ff fff2 	bl	8000788 <HAL_ADC_ErrorCallback>
}
 80007a4:	bd10      	pop	{r4, pc}
 80007a6:	46c0      	nop			; (mov r8, r8)

080007a8 <HAL_ADC_IRQHandler>:
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80007a8:	2204      	movs	r2, #4
 80007aa:	6803      	ldr	r3, [r0, #0]
{
 80007ac:	b570      	push	{r4, r5, r6, lr}
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80007ae:	6819      	ldr	r1, [r3, #0]
{
 80007b0:	0004      	movs	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80007b2:	420a      	tst	r2, r1
 80007b4:	d04a      	beq.n	800084c <HAL_ADC_IRQHandler+0xa4>
 80007b6:	6859      	ldr	r1, [r3, #4]
 80007b8:	420a      	tst	r2, r1
 80007ba:	d047      	beq.n	800084c <HAL_ADC_IRQHandler+0xa4>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80007bc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80007be:	06d2      	lsls	r2, r2, #27
 80007c0:	d404      	bmi.n	80007cc <HAL_ADC_IRQHandler+0x24>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80007c2:	2280      	movs	r2, #128	; 0x80
 80007c4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80007c6:	0092      	lsls	r2, r2, #2
 80007c8:	430a      	orrs	r2, r1
 80007ca:	6462      	str	r2, [r4, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80007cc:	22c0      	movs	r2, #192	; 0xc0
 80007ce:	68d9      	ldr	r1, [r3, #12]
 80007d0:	0112      	lsls	r2, r2, #4
 80007d2:	4211      	tst	r1, r2
 80007d4:	d113      	bne.n	80007fe <HAL_ADC_IRQHandler+0x56>
 80007d6:	6a22      	ldr	r2, [r4, #32]
 80007d8:	2a00      	cmp	r2, #0
 80007da:	d110      	bne.n	80007fe <HAL_ADC_IRQHandler+0x56>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80007dc:	681a      	ldr	r2, [r3, #0]
 80007de:	0712      	lsls	r2, r2, #28
 80007e0:	d50d      	bpl.n	80007fe <HAL_ADC_IRQHandler+0x56>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80007e2:	689a      	ldr	r2, [r3, #8]
 80007e4:	0752      	lsls	r2, r2, #29
 80007e6:	d444      	bmi.n	8000872 <HAL_ADC_IRQHandler+0xca>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80007e8:	210c      	movs	r1, #12
 80007ea:	685a      	ldr	r2, [r3, #4]
 80007ec:	438a      	bics	r2, r1
 80007ee:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 80007f0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80007f2:	4a24      	ldr	r2, [pc, #144]	; (8000884 <HAL_ADC_IRQHandler+0xdc>)
 80007f4:	4013      	ands	r3, r2
 80007f6:	3204      	adds	r2, #4
 80007f8:	32ff      	adds	r2, #255	; 0xff
 80007fa:	4313      	orrs	r3, r2
 80007fc:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ConvCpltCallback(hadc);
 80007fe:	0020      	movs	r0, r4
 8000800:	f002 feb2 	bl	8003568 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8000804:	220c      	movs	r2, #12
 8000806:	6823      	ldr	r3, [r4, #0]
 8000808:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800080a:	2580      	movs	r5, #128	; 0x80
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	4215      	tst	r5, r2
 8000810:	d002      	beq.n	8000818 <HAL_ADC_IRQHandler+0x70>
 8000812:	685a      	ldr	r2, [r3, #4]
 8000814:	4215      	tst	r5, r2
 8000816:	d121      	bne.n	800085c <HAL_ADC_IRQHandler+0xb4>
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8000818:	2210      	movs	r2, #16
 800081a:	6819      	ldr	r1, [r3, #0]
 800081c:	420a      	tst	r2, r1
 800081e:	d014      	beq.n	800084a <HAL_ADC_IRQHandler+0xa2>
 8000820:	6859      	ldr	r1, [r3, #4]
 8000822:	420a      	tst	r2, r1
 8000824:	d011      	beq.n	800084a <HAL_ADC_IRQHandler+0xa2>
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8000826:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000828:	2a01      	cmp	r2, #1
 800082a:	d002      	beq.n	8000832 <HAL_ADC_IRQHandler+0x8a>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 800082c:	68da      	ldr	r2, [r3, #12]
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800082e:	07d2      	lsls	r2, r2, #31
 8000830:	d509      	bpl.n	8000846 <HAL_ADC_IRQHandler+0x9e>
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000832:	2102      	movs	r1, #2
 8000834:	6ca2      	ldr	r2, [r4, #72]	; 0x48
      HAL_ADC_ErrorCallback(hadc);
 8000836:	0020      	movs	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000838:	430a      	orrs	r2, r1
 800083a:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800083c:	2210      	movs	r2, #16
 800083e:	601a      	str	r2, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 8000840:	f7ff ffa2 	bl	8000788 <HAL_ADC_ErrorCallback>
 8000844:	6823      	ldr	r3, [r4, #0]
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000846:	2210      	movs	r2, #16
 8000848:	601a      	str	r2, [r3, #0]
}
 800084a:	bd70      	pop	{r4, r5, r6, pc}
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800084c:	2208      	movs	r2, #8
 800084e:	6819      	ldr	r1, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000850:	420a      	tst	r2, r1
 8000852:	d0da      	beq.n	800080a <HAL_ADC_IRQHandler+0x62>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000854:	6859      	ldr	r1, [r3, #4]
 8000856:	420a      	tst	r2, r1
 8000858:	d0d7      	beq.n	800080a <HAL_ADC_IRQHandler+0x62>
 800085a:	e7af      	b.n	80007bc <HAL_ADC_IRQHandler+0x14>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800085c:	2380      	movs	r3, #128	; 0x80
 800085e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000860:	025b      	lsls	r3, r3, #9
 8000862:	4313      	orrs	r3, r2
 8000864:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000866:	0020      	movs	r0, r4
 8000868:	f7ff ff8c 	bl	8000784 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800086c:	6823      	ldr	r3, [r4, #0]
 800086e:	601d      	str	r5, [r3, #0]
 8000870:	e7d2      	b.n	8000818 <HAL_ADC_IRQHandler+0x70>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000872:	2220      	movs	r2, #32
 8000874:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000876:	4313      	orrs	r3, r2
 8000878:	6463      	str	r3, [r4, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800087a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800087c:	3a1f      	subs	r2, #31
 800087e:	4313      	orrs	r3, r2
 8000880:	64a3      	str	r3, [r4, #72]	; 0x48
 8000882:	e7bc      	b.n	80007fe <HAL_ADC_IRQHandler+0x56>
 8000884:	fffffefe 	.word	0xfffffefe

08000888 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8000888:	2300      	movs	r3, #0
{
 800088a:	b570      	push	{r4, r5, r6, lr}
 800088c:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 800088e:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000890:	3340      	adds	r3, #64	; 0x40
 8000892:	5cc2      	ldrb	r2, [r0, r3]
{
 8000894:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8000896:	2002      	movs	r0, #2
 8000898:	2a01      	cmp	r2, #1
 800089a:	d03c      	beq.n	8000916 <HAL_ADC_ConfigChannel+0x8e>
 800089c:	2201      	movs	r2, #1
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800089e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  __HAL_LOCK(hadc);
 80008a0:	54e2      	strb	r2, [r4, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80008a2:	6823      	ldr	r3, [r4, #0]
 80008a4:	689d      	ldr	r5, [r3, #8]
 80008a6:	076d      	lsls	r5, r5, #29
 80008a8:	d42d      	bmi.n	8000906 <HAL_ADC_ConfigChannel+0x7e>
    if (sConfig->Rank != ADC_RANK_NONE)
 80008aa:	4d35      	ldr	r5, [pc, #212]	; (8000980 <HAL_ADC_ConfigChannel+0xf8>)
 80008ac:	684e      	ldr	r6, [r1, #4]
 80008ae:	42ae      	cmp	r6, r5
 80008b0:	d033      	beq.n	800091a <HAL_ADC_ConfigChannel+0x92>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80008b2:	680d      	ldr	r5, [r1, #0]
 80008b4:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 80008b6:	40aa      	lsls	r2, r5
 80008b8:	4332      	orrs	r2, r6
 80008ba:	629a      	str	r2, [r3, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80008bc:	2280      	movs	r2, #128	; 0x80
 80008be:	0552      	lsls	r2, r2, #21
 80008c0:	4290      	cmp	r0, r2
 80008c2:	d00f      	beq.n	80008e4 <HAL_ADC_ConfigChannel+0x5c>
 80008c4:	3801      	subs	r0, #1
 80008c6:	2806      	cmp	r0, #6
 80008c8:	d90c      	bls.n	80008e4 <HAL_ADC_ConfigChannel+0x5c>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80008ca:	2207      	movs	r2, #7
 80008cc:	6888      	ldr	r0, [r1, #8]
 80008ce:	6959      	ldr	r1, [r3, #20]
 80008d0:	4011      	ands	r1, r2
 80008d2:	4288      	cmp	r0, r1
 80008d4:	d006      	beq.n	80008e4 <HAL_ADC_ConfigChannel+0x5c>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80008d6:	6959      	ldr	r1, [r3, #20]
 80008d8:	4391      	bics	r1, r2
 80008da:	6159      	str	r1, [r3, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80008dc:	6959      	ldr	r1, [r3, #20]
 80008de:	4002      	ands	r2, r0
 80008e0:	430a      	orrs	r2, r1
 80008e2:	615a      	str	r2, [r3, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80008e4:	002b      	movs	r3, r5
 80008e6:	3b10      	subs	r3, #16
 80008e8:	2b02      	cmp	r3, #2
 80008ea:	d829      	bhi.n	8000940 <HAL_ADC_ConfigChannel+0xb8>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80008ec:	4a25      	ldr	r2, [pc, #148]	; (8000984 <HAL_ADC_ConfigChannel+0xfc>)
 80008ee:	6813      	ldr	r3, [r2, #0]
 80008f0:	2d10      	cmp	r5, #16
 80008f2:	d027      	beq.n	8000944 <HAL_ADC_ConfigChannel+0xbc>
 80008f4:	2280      	movs	r2, #128	; 0x80
 80008f6:	2d11      	cmp	r5, #17
 80008f8:	d03c      	beq.n	8000974 <HAL_ADC_ConfigChannel+0xec>
 80008fa:	0452      	lsls	r2, r2, #17
 80008fc:	4313      	orrs	r3, r2
 80008fe:	4a21      	ldr	r2, [pc, #132]	; (8000984 <HAL_ADC_ConfigChannel+0xfc>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000900:	2000      	movs	r0, #0
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000902:	6013      	str	r3, [r2, #0]
 8000904:	e004      	b.n	8000910 <HAL_ADC_ConfigChannel+0x88>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000906:	2220      	movs	r2, #32
    tmp_hal_status = HAL_ERROR;
 8000908:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800090a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800090c:	4313      	orrs	r3, r2
 800090e:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 8000910:	2200      	movs	r2, #0
 8000912:	2340      	movs	r3, #64	; 0x40
 8000914:	54e2      	strb	r2, [r4, r3]
}
 8000916:	b002      	add	sp, #8
 8000918:	bd70      	pop	{r4, r5, r6, pc}
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800091a:	6809      	ldr	r1, [r1, #0]
 800091c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800091e:	408a      	lsls	r2, r1
 8000920:	4390      	bics	r0, r2
 8000922:	6298      	str	r0, [r3, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000924:	000b      	movs	r3, r1
 8000926:	3b10      	subs	r3, #16
 8000928:	2b02      	cmp	r3, #2
 800092a:	d809      	bhi.n	8000940 <HAL_ADC_ConfigChannel+0xb8>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800092c:	4b15      	ldr	r3, [pc, #84]	; (8000984 <HAL_ADC_ConfigChannel+0xfc>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2910      	cmp	r1, #16
 8000932:	d021      	beq.n	8000978 <HAL_ADC_ConfigChannel+0xf0>
 8000934:	2911      	cmp	r1, #17
 8000936:	d021      	beq.n	800097c <HAL_ADC_ConfigChannel+0xf4>
 8000938:	4a13      	ldr	r2, [pc, #76]	; (8000988 <HAL_ADC_ConfigChannel+0x100>)
 800093a:	4013      	ands	r3, r2
 800093c:	4a11      	ldr	r2, [pc, #68]	; (8000984 <HAL_ADC_ConfigChannel+0xfc>)
 800093e:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000940:	2000      	movs	r0, #0
 8000942:	e7e5      	b.n	8000910 <HAL_ADC_ConfigChannel+0x88>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000944:	2180      	movs	r1, #128	; 0x80
 8000946:	0409      	lsls	r1, r1, #16
 8000948:	430b      	orrs	r3, r1
 800094a:	6013      	str	r3, [r2, #0]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800094c:	4b0f      	ldr	r3, [pc, #60]	; (800098c <HAL_ADC_ConfigChannel+0x104>)
 800094e:	4910      	ldr	r1, [pc, #64]	; (8000990 <HAL_ADC_ConfigChannel+0x108>)
 8000950:	6818      	ldr	r0, [r3, #0]
 8000952:	f7ff fbd9 	bl	8000108 <__udivsi3>
 8000956:	0083      	lsls	r3, r0, #2
 8000958:	1818      	adds	r0, r3, r0
 800095a:	0040      	lsls	r0, r0, #1
 800095c:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 800095e:	9b01      	ldr	r3, [sp, #4]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d0ed      	beq.n	8000940 <HAL_ADC_ConfigChannel+0xb8>
            wait_loop_index--;
 8000964:	9b01      	ldr	r3, [sp, #4]
 8000966:	3b01      	subs	r3, #1
 8000968:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800096a:	9b01      	ldr	r3, [sp, #4]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d1f9      	bne.n	8000964 <HAL_ADC_ConfigChannel+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000970:	2000      	movs	r0, #0
 8000972:	e7cd      	b.n	8000910 <HAL_ADC_ConfigChannel+0x88>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000974:	03d2      	lsls	r2, r2, #15
 8000976:	e7c1      	b.n	80008fc <HAL_ADC_ConfigChannel+0x74>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000978:	4a06      	ldr	r2, [pc, #24]	; (8000994 <HAL_ADC_ConfigChannel+0x10c>)
 800097a:	e7de      	b.n	800093a <HAL_ADC_ConfigChannel+0xb2>
 800097c:	4a06      	ldr	r2, [pc, #24]	; (8000998 <HAL_ADC_ConfigChannel+0x110>)
 800097e:	e7dc      	b.n	800093a <HAL_ADC_ConfigChannel+0xb2>
 8000980:	00001001 	.word	0x00001001
 8000984:	40012708 	.word	0x40012708
 8000988:	feffffff 	.word	0xfeffffff
 800098c:	20000040 	.word	0x20000040
 8000990:	000f4240 	.word	0x000f4240
 8000994:	ff7fffff 	.word	0xff7fffff
 8000998:	ffbfffff 	.word	0xffbfffff

0800099c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 800099c:	b570      	push	{r4, r5, r6, lr}
 800099e:	0004      	movs	r4, r0
 80009a0:	b082      	sub	sp, #8
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t regshift = COMP_CSR_COMP1_SHIFT;
  
  /* Check the COMP handle allocation and lock status */
  if((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 80009a2:	2800      	cmp	r0, #0
 80009a4:	d03b      	beq.n	8000a1e <HAL_COMP_Init+0x82>
 80009a6:	6a83      	ldr	r3, [r0, #40]	; 0x28
  {
    status = HAL_ERROR;
 80009a8:	2001      	movs	r0, #1
  if((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 80009aa:	06db      	lsls	r3, r3, #27
 80009ac:	d501      	bpl.n	80009b2 <HAL_COMP_Init+0x16>
    /* Initialize the COMP state*/
    hcomp->State = HAL_COMP_STATE_READY;
  }
  
  return status;
}
 80009ae:	b002      	add	sp, #8
 80009b0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SYSCFG_CLK_ENABLE();  
 80009b2:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <HAL_COMP_Init+0x8c>)
 80009b4:	699a      	ldr	r2, [r3, #24]
 80009b6:	4302      	orrs	r2, r0
 80009b8:	619a      	str	r2, [r3, #24]
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	4018      	ands	r0, r3
 80009be:	9001      	str	r0, [sp, #4]
    HAL_COMP_MspInit(hcomp);
 80009c0:	0020      	movs	r0, r4
    __HAL_RCC_SYSCFG_CLK_ENABLE();  
 80009c2:	9b01      	ldr	r3, [sp, #4]
    HAL_COMP_MspInit(hcomp);
 80009c4:	f003 ff22 	bl	800480c <HAL_COMP_MspInit>
    if(hcomp->State == HAL_COMP_STATE_RESET)
 80009c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d024      	beq.n	8000a18 <HAL_COMP_Init+0x7c>
    hcomp->State = HAL_COMP_STATE_BUSY;
 80009ce:	2302      	movs	r3, #2
    if(hcomp->Instance == COMP2)
 80009d0:	6822      	ldr	r2, [r4, #0]
    hcomp->State = HAL_COMP_STATE_BUSY;
 80009d2:	62a3      	str	r3, [r4, #40]	; 0x28
    if(hcomp->Instance == COMP2)
 80009d4:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <HAL_COMP_Init+0x90>)
 80009d6:	429a      	cmp	r2, r3
 80009d8:	d023      	beq.n	8000a22 <HAL_COMP_Init+0x86>
  uint32_t regshift = COMP_CSR_COMP1_SHIFT;
 80009da:	2500      	movs	r5, #0
    if(hcomp->Instance == COMP2)
 80009dc:	4914      	ldr	r1, [pc, #80]	; (8000a30 <HAL_COMP_Init+0x94>)
    MODIFY_REG(COMP->CSR, 
 80009de:	68a6      	ldr	r6, [r4, #8]
 80009e0:	6863      	ldr	r3, [r4, #4]
 80009e2:	4a14      	ldr	r2, [pc, #80]	; (8000a34 <HAL_COMP_Init+0x98>)
 80009e4:	4333      	orrs	r3, r6
 80009e6:	68e6      	ldr	r6, [r4, #12]
 80009e8:	6810      	ldr	r0, [r2, #0]
 80009ea:	4333      	orrs	r3, r6
 80009ec:	6926      	ldr	r6, [r4, #16]
 80009ee:	4001      	ands	r1, r0
 80009f0:	4333      	orrs	r3, r6
 80009f2:	6966      	ldr	r6, [r4, #20]
 80009f4:	4333      	orrs	r3, r6
 80009f6:	69a6      	ldr	r6, [r4, #24]
 80009f8:	4333      	orrs	r3, r6
 80009fa:	40ab      	lsls	r3, r5
 80009fc:	430b      	orrs	r3, r1
 80009fe:	6013      	str	r3, [r2, #0]
    if(hcomp->Init.WindowMode != COMP_WINDOWMODE_DISABLE)
 8000a00:	69e3      	ldr	r3, [r4, #28]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d004      	beq.n	8000a10 <HAL_COMP_Init+0x74>
      COMP->CSR |= COMP_CSR_WNDWEN;
 8000a06:	2380      	movs	r3, #128	; 0x80
 8000a08:	6811      	ldr	r1, [r2, #0]
 8000a0a:	041b      	lsls	r3, r3, #16
 8000a0c:	430b      	orrs	r3, r1
 8000a0e:	6013      	str	r3, [r2, #0]
    hcomp->State = HAL_COMP_STATE_READY;
 8000a10:	2301      	movs	r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8000a12:	2000      	movs	r0, #0
    hcomp->State = HAL_COMP_STATE_READY;
 8000a14:	62a3      	str	r3, [r4, #40]	; 0x28
 8000a16:	e7ca      	b.n	80009ae <HAL_COMP_Init+0x12>
      hcomp->Lock = HAL_UNLOCKED;
 8000a18:	2224      	movs	r2, #36	; 0x24
 8000a1a:	54a3      	strb	r3, [r4, r2]
 8000a1c:	e7d7      	b.n	80009ce <HAL_COMP_Init+0x32>
    status = HAL_ERROR;
 8000a1e:	2001      	movs	r0, #1
 8000a20:	e7c5      	b.n	80009ae <HAL_COMP_Init+0x12>
 8000a22:	4905      	ldr	r1, [pc, #20]	; (8000a38 <HAL_COMP_Init+0x9c>)
      regshift = COMP_CSR_COMP2_SHIFT;
 8000a24:	2510      	movs	r5, #16
 8000a26:	e7da      	b.n	80009de <HAL_COMP_Init+0x42>
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	4001001e 	.word	0x4001001e
 8000a30:	ffffc081 	.word	0xffffc081
 8000a34:	4001001c 	.word	0x4001001c
 8000a38:	c081ffff 	.word	0xc081ffff

08000a3c <HAL_COMP_Start>:
  * @brief  Start the comparator 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{ 
 8000a3c:	1e03      	subs	r3, r0, #0
  uint32_t wait_loop_index = 0U;
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t regshift = COMP_CSR_COMP1_SHIFT;
  
  /* Check the COMP handle allocation and lock status */
  if((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8000a3e:	d013      	beq.n	8000a68 <HAL_COMP_Start+0x2c>
 8000a40:	6a82      	ldr	r2, [r0, #40]	; 0x28
  {
    status = HAL_ERROR;
 8000a42:	2001      	movs	r0, #1
  if((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8000a44:	06d2      	lsls	r2, r2, #27
 8000a46:	d402      	bmi.n	8000a4e <HAL_COMP_Start+0x12>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 8000a48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000a4a:	2a01      	cmp	r2, #1
 8000a4c:	d000      	beq.n	8000a50 <HAL_COMP_Start+0x14>
      status = HAL_ERROR;
    }
  }

  return status;
}
 8000a4e:	4770      	bx	lr
      if(hcomp->Instance == COMP2)
 8000a50:	4a08      	ldr	r2, [pc, #32]	; (8000a74 <HAL_COMP_Start+0x38>)
 8000a52:	6819      	ldr	r1, [r3, #0]
 8000a54:	4291      	cmp	r1, r2
 8000a56:	d009      	beq.n	8000a6c <HAL_COMP_Start+0x30>
      SET_BIT(COMP->CSR, COMP_CSR_COMPxEN << regshift);
 8000a58:	4907      	ldr	r1, [pc, #28]	; (8000a78 <HAL_COMP_Start+0x3c>)
 8000a5a:	680a      	ldr	r2, [r1, #0]
 8000a5c:	4302      	orrs	r2, r0
 8000a5e:	600a      	str	r2, [r1, #0]
      hcomp->State = HAL_COMP_STATE_BUSY;
 8000a60:	2202      	movs	r2, #2
 8000a62:	2000      	movs	r0, #0
 8000a64:	629a      	str	r2, [r3, #40]	; 0x28
 8000a66:	e7f2      	b.n	8000a4e <HAL_COMP_Start+0x12>
    status = HAL_ERROR;
 8000a68:	2001      	movs	r0, #1
 8000a6a:	e7f0      	b.n	8000a4e <HAL_COMP_Start+0x12>
      if(hcomp->Instance == COMP2)
 8000a6c:	2080      	movs	r0, #128	; 0x80
 8000a6e:	0240      	lsls	r0, r0, #9
 8000a70:	e7f2      	b.n	8000a58 <HAL_COMP_Start+0x1c>
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	4001001e 	.word	0x4001001e
 8000a78:	4001001c 	.word	0x4001001c

08000a7c <HAL_COMP_Stop>:
  * @brief  Stop the comparator 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Stop(COMP_HandleTypeDef *hcomp)
{ 
 8000a7c:	1e03      	subs	r3, r0, #0
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t regshift = COMP_CSR_COMP1_SHIFT;
  
  /* Check the COMP handle allocation and lock status */
  if((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8000a7e:	d014      	beq.n	8000aaa <HAL_COMP_Stop+0x2e>
 8000a80:	6a82      	ldr	r2, [r0, #40]	; 0x28
  {
    status = HAL_ERROR;
 8000a82:	2001      	movs	r0, #1
  if((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8000a84:	06d2      	lsls	r2, r2, #27
 8000a86:	d402      	bmi.n	8000a8e <HAL_COMP_Stop+0x12>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_BUSY)
 8000a88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000a8a:	2a02      	cmp	r2, #2
 8000a8c:	d000      	beq.n	8000a90 <HAL_COMP_Stop+0x14>
      status = HAL_ERROR;
    }
  }
  
  return status;
}
 8000a8e:	4770      	bx	lr
      if(hcomp->Instance == COMP2)
 8000a90:	4a08      	ldr	r2, [pc, #32]	; (8000ab4 <HAL_COMP_Stop+0x38>)
 8000a92:	6819      	ldr	r1, [r3, #0]
 8000a94:	4291      	cmp	r1, r2
 8000a96:	d00a      	beq.n	8000aae <HAL_COMP_Stop+0x32>
 8000a98:	3803      	subs	r0, #3
      CLEAR_BIT(COMP->CSR, COMP_CSR_COMPxEN << regshift);
 8000a9a:	4907      	ldr	r1, [pc, #28]	; (8000ab8 <HAL_COMP_Stop+0x3c>)
 8000a9c:	680a      	ldr	r2, [r1, #0]
 8000a9e:	4002      	ands	r2, r0
 8000aa0:	600a      	str	r2, [r1, #0]
      hcomp->State = HAL_COMP_STATE_READY;
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	629a      	str	r2, [r3, #40]	; 0x28
 8000aa8:	e7f1      	b.n	8000a8e <HAL_COMP_Stop+0x12>
    status = HAL_ERROR;
 8000aaa:	2001      	movs	r0, #1
 8000aac:	e7ef      	b.n	8000a8e <HAL_COMP_Stop+0x12>
      if(hcomp->Instance == COMP2)
 8000aae:	4803      	ldr	r0, [pc, #12]	; (8000abc <HAL_COMP_Stop+0x40>)
 8000ab0:	e7f3      	b.n	8000a9a <HAL_COMP_Stop+0x1e>
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	4001001e 	.word	0x4001001e
 8000ab8:	4001001c 	.word	0x4001001c
 8000abc:	fffeffff 	.word	0xfffeffff

08000ac0 <HAL_COMP_GetOutputLevel>:
  uint32_t regshift = COMP_CSR_COMP1_SHIFT;
  
  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));
  
  if(hcomp->Instance == COMP2)
 8000ac0:	6802      	ldr	r2, [r0, #0]
 8000ac2:	4b07      	ldr	r3, [pc, #28]	; (8000ae0 <HAL_COMP_GetOutputLevel+0x20>)
 8000ac4:	2080      	movs	r0, #128	; 0x80
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d007      	beq.n	8000ada <HAL_COMP_GetOutputLevel+0x1a>
 8000aca:	01c0      	lsls	r0, r0, #7
  {
    regshift = COMP_CSR_COMP2_SHIFT;
  }
  level = READ_BIT(COMP->CSR, COMP_CSR_COMPxOUT << regshift);
 8000acc:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <HAL_COMP_GetOutputLevel+0x24>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4018      	ands	r0, r3
  
  if(level != 0U)
 8000ad2:	d001      	beq.n	8000ad8 <HAL_COMP_GetOutputLevel+0x18>
  {
    return(COMP_OUTPUTLEVEL_HIGH);
 8000ad4:	2080      	movs	r0, #128	; 0x80
 8000ad6:	01c0      	lsls	r0, r0, #7
  }
  return(COMP_OUTPUTLEVEL_LOW);
}
 8000ad8:	4770      	bx	lr
 8000ada:	05c0      	lsls	r0, r0, #23
 8000adc:	e7f6      	b.n	8000acc <HAL_COMP_GetOutputLevel+0xc>
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	4001001e 	.word	0x4001001e
 8000ae4:	4001001c 	.word	0x4001001c

08000ae8 <HAL_COMP_IRQHandler>:
  uint32_t extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 8000ae8:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <HAL_COMP_IRQHandler+0x24>)
 8000aea:	6802      	ldr	r2, [r0, #0]
{
 8000aec:	b510      	push	{r4, lr}
  uint32_t extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 8000aee:	429a      	cmp	r2, r3
 8000af0:	d009      	beq.n	8000b06 <HAL_COMP_IRQHandler+0x1e>
 8000af2:	2280      	movs	r2, #128	; 0x80
 8000af4:	03d2      	lsls	r2, r2, #15
  if(READ_BIT(EXTI->PR, extiline) != RESET)
 8000af6:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <HAL_COMP_IRQHandler+0x28>)
 8000af8:	6959      	ldr	r1, [r3, #20]
 8000afa:	4211      	tst	r1, r2
 8000afc:	d002      	beq.n	8000b04 <HAL_COMP_IRQHandler+0x1c>
    WRITE_REG(EXTI->PR, extiline);
 8000afe:	615a      	str	r2, [r3, #20]
    HAL_COMP_TriggerCallback(hcomp);    
 8000b00:	f002 fa0a 	bl	8002f18 <HAL_COMP_TriggerCallback>
}
 8000b04:	bd10      	pop	{r4, pc}
  uint32_t extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 8000b06:	2280      	movs	r2, #128	; 0x80
 8000b08:	0392      	lsls	r2, r2, #14
 8000b0a:	e7f4      	b.n	8000af6 <HAL_COMP_IRQHandler+0xe>
 8000b0c:	4001001c 	.word	0x4001001c
 8000b10:	40010400 	.word	0x40010400

08000b14 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b14:	b570      	push	{r4, r5, r6, lr}
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000b16:	2800      	cmp	r0, #0
 8000b18:	db14      	blt.n	8000b44 <HAL_NVIC_SetPriority+0x30>
 8000b1a:	4a16      	ldr	r2, [pc, #88]	; (8000b74 <HAL_NVIC_SetPriority+0x60>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b1c:	2403      	movs	r4, #3
 8000b1e:	4694      	mov	ip, r2
 8000b20:	22ff      	movs	r2, #255	; 0xff
 8000b22:	0883      	lsrs	r3, r0, #2
 8000b24:	4020      	ands	r0, r4
 8000b26:	0014      	movs	r4, r2
 8000b28:	26c0      	movs	r6, #192	; 0xc0
 8000b2a:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b2c:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b2e:	4084      	lsls	r4, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b30:	400a      	ands	r2, r1
 8000b32:	4082      	lsls	r2, r0
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	4463      	add	r3, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b38:	00b6      	lsls	r6, r6, #2
 8000b3a:	599d      	ldr	r5, [r3, r6]
 8000b3c:	43a5      	bics	r5, r4
 8000b3e:	432a      	orrs	r2, r5
 8000b40:	519a      	str	r2, [r3, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000b42:	bd70      	pop	{r4, r5, r6, pc}
 8000b44:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <HAL_NVIC_SetPriority+0x64>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b46:	24ff      	movs	r4, #255	; 0xff
 8000b48:	4694      	mov	ip, r2
 8000b4a:	230f      	movs	r3, #15
 8000b4c:	2203      	movs	r2, #3
 8000b4e:	b2c0      	uxtb	r0, r0
 8000b50:	4003      	ands	r3, r0
 8000b52:	4010      	ands	r0, r2
 8000b54:	0022      	movs	r2, r4
 8000b56:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b58:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b5a:	4082      	lsls	r2, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b5c:	400c      	ands	r4, r1
 8000b5e:	4084      	lsls	r4, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b60:	3b08      	subs	r3, #8
 8000b62:	089b      	lsrs	r3, r3, #2
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	4463      	add	r3, ip
 8000b68:	69dd      	ldr	r5, [r3, #28]
 8000b6a:	4395      	bics	r5, r2
 8000b6c:	432c      	orrs	r4, r5
 8000b6e:	61dc      	str	r4, [r3, #28]
 8000b70:	e7e7      	b.n	8000b42 <HAL_NVIC_SetPriority+0x2e>
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	e000e100 	.word	0xe000e100
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000b7c:	231f      	movs	r3, #31
 8000b7e:	4018      	ands	r0, r3
 8000b80:	3b1e      	subs	r3, #30
 8000b82:	4083      	lsls	r3, r0
 8000b84:	4a01      	ldr	r2, [pc, #4]	; (8000b8c <HAL_NVIC_EnableIRQ+0x10>)
 8000b86:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000b88:	4770      	bx	lr
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	e000e100 	.word	0xe000e100

08000b90 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b90:	4a0a      	ldr	r2, [pc, #40]	; (8000bbc <HAL_SYSTICK_Config+0x2c>)
 8000b92:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b94:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d80e      	bhi.n	8000bb8 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b9a:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b9c:	4a08      	ldr	r2, [pc, #32]	; (8000bc0 <HAL_SYSTICK_Config+0x30>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b9e:	4809      	ldr	r0, [pc, #36]	; (8000bc4 <HAL_SYSTICK_Config+0x34>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ba0:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ba2:	6a03      	ldr	r3, [r0, #32]
 8000ba4:	0609      	lsls	r1, r1, #24
 8000ba6:	021b      	lsls	r3, r3, #8
 8000ba8:	0a1b      	lsrs	r3, r3, #8
 8000baa:	430b      	orrs	r3, r1
 8000bac:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bae:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bb0:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bb2:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bb4:	3307      	adds	r3, #7
 8000bb6:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000bb8:	4770      	bx	lr
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	00ffffff 	.word	0x00ffffff
 8000bc0:	e000e010 	.word	0xe000e010
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000bc8:	4a05      	ldr	r2, [pc, #20]	; (8000be0 <HAL_SYSTICK_CLKSourceConfig+0x18>)
 8000bca:	6813      	ldr	r3, [r2, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000bcc:	2804      	cmp	r0, #4
 8000bce:	d003      	beq.n	8000bd8 <HAL_SYSTICK_CLKSourceConfig+0x10>
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000bd0:	2104      	movs	r1, #4
 8000bd2:	438b      	bics	r3, r1
 8000bd4:	6013      	str	r3, [r2, #0]
  }
}
 8000bd6:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000bd8:	4318      	orrs	r0, r3
 8000bda:	6010      	str	r0, [r2, #0]
 8000bdc:	e7fb      	b.n	8000bd6 <HAL_SYSTICK_CLKSourceConfig+0xe>
 8000bde:	46c0      	nop			; (mov r8, r8)
 8000be0:	e000e010 	.word	0xe000e010

08000be4 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000be4:	4770      	bx	lr
 8000be6:	46c0      	nop			; (mov r8, r8)

08000be8 <HAL_SYSTICK_IRQHandler>:
{
 8000be8:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 8000bea:	f7ff fffb 	bl	8000be4 <HAL_SYSTICK_Callback>
}
 8000bee:	bd10      	pop	{r4, pc}

08000bf0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000bf0:	b570      	push	{r4, r5, r6, lr}
 8000bf2:	1e04      	subs	r4, r0, #0
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000bf4:	d02b      	beq.n	8000c4e <HAL_DMA_Init+0x5e>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000bf6:	2521      	movs	r5, #33	; 0x21
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	5543      	strb	r3, [r0, r5]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000bfc:	6800      	ldr	r0, [r0, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000bfe:	4a15      	ldr	r2, [pc, #84]	; (8000c54 <HAL_DMA_Init+0x64>)
  tmp = hdma->Instance->CCR;
 8000c00:	6803      	ldr	r3, [r0, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c02:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c04:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8000c06:	6863      	ldr	r3, [r4, #4]
 8000c08:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c0a:	68e1      	ldr	r1, [r4, #12]
 8000c0c:	430b      	orrs	r3, r1
 8000c0e:	6921      	ldr	r1, [r4, #16]
 8000c10:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c12:	6961      	ldr	r1, [r4, #20]
 8000c14:	430b      	orrs	r3, r1
 8000c16:	69a1      	ldr	r1, [r4, #24]
 8000c18:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c1a:	69e1      	ldr	r1, [r4, #28]
 8000c1c:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8000c1e:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000c20:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000c22:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <HAL_DMA_Init+0x68>)
 8000c24:	2114      	movs	r1, #20
 8000c26:	469c      	mov	ip, r3
 8000c28:	4460      	add	r0, ip
 8000c2a:	f7ff fa6d 	bl	8000108 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <HAL_DMA_Init+0x6c>)
  hdma->State = HAL_DMA_STATE_READY;
 8000c30:	2201      	movs	r2, #1
  hdma->DmaBaseAddress = DMA1;
 8000c32:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->XferCpltCallback = NULL;
 8000c34:	2300      	movs	r3, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000c36:	0080      	lsls	r0, r0, #2
 8000c38:	6420      	str	r0, [r4, #64]	; 0x40
  return HAL_OK;
 8000c3a:	2000      	movs	r0, #0
  hdma->XferCpltCallback = NULL;
 8000c3c:	62a3      	str	r3, [r4, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8000c3e:	62e3      	str	r3, [r4, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8000c40:	6323      	str	r3, [r4, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8000c42:	6363      	str	r3, [r4, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c44:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8000c46:	5562      	strb	r2, [r4, r5]
  hdma->Lock = HAL_UNLOCKED;
 8000c48:	321f      	adds	r2, #31
 8000c4a:	54a3      	strb	r3, [r4, r2]
}  
 8000c4c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000c4e:	2001      	movs	r0, #1
 8000c50:	e7fc      	b.n	8000c4c <HAL_DMA_Init+0x5c>
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	ffffc00f 	.word	0xffffc00f
 8000c58:	bffdfff8 	.word	0xbffdfff8
 8000c5c:	40020000 	.word	0x40020000

08000c60 <HAL_DMA_Start_IT>:
{
 8000c60:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8000c62:	2420      	movs	r4, #32
 8000c64:	5d05      	ldrb	r5, [r0, r4]
 8000c66:	2602      	movs	r6, #2
 8000c68:	2d01      	cmp	r5, #1
 8000c6a:	d008      	beq.n	8000c7e <HAL_DMA_Start_IT+0x1e>
 8000c6c:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c6e:	2721      	movs	r7, #33	; 0x21
  __HAL_LOCK(hdma);
 8000c70:	5505      	strb	r5, [r0, r4]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c72:	5dc5      	ldrb	r5, [r0, r7]
 8000c74:	b2ed      	uxtb	r5, r5
 8000c76:	2d01      	cmp	r5, #1
 8000c78:	d003      	beq.n	8000c82 <HAL_DMA_Start_IT+0x22>
    __HAL_UNLOCK(hdma); 
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	5503      	strb	r3, [r0, r4]
} 
 8000c7e:	0030      	movs	r0, r6
 8000c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c82:	2400      	movs	r4, #0
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000c84:	55c6      	strb	r6, [r0, r7]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c86:	6384      	str	r4, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c88:	6804      	ldr	r4, [r0, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000c8a:	6c07      	ldr	r7, [r0, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c8c:	6826      	ldr	r6, [r4, #0]
 8000c8e:	43ae      	bics	r6, r5
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000c90:	40bd      	lsls	r5, r7
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c92:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000c94:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8000c96:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8000c98:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000c9a:	6843      	ldr	r3, [r0, #4]
 8000c9c:	2b10      	cmp	r3, #16
 8000c9e:	d00e      	beq.n	8000cbe <HAL_DMA_Start_IT+0x5e>
    hdma->Instance->CPAR = SrcAddress;
 8000ca0:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 8000ca2:	60e2      	str	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8000ca4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d00c      	beq.n	8000cc4 <HAL_DMA_Start_IT+0x64>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000caa:	220e      	movs	r2, #14
 8000cac:	6823      	ldr	r3, [r4, #0]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	6823      	ldr	r3, [r4, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000cb6:	2600      	movs	r6, #0
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	6023      	str	r3, [r4, #0]
 8000cbc:	e7df      	b.n	8000c7e <HAL_DMA_Start_IT+0x1e>
    hdma->Instance->CPAR = DstAddress;
 8000cbe:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000cc0:	60e1      	str	r1, [r4, #12]
 8000cc2:	e7ef      	b.n	8000ca4 <HAL_DMA_Start_IT+0x44>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000cc4:	220a      	movs	r2, #10
 8000cc6:	6823      	ldr	r3, [r4, #0]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000ccc:	6823      	ldr	r3, [r4, #0]
 8000cce:	3a06      	subs	r2, #6
 8000cd0:	4393      	bics	r3, r2
 8000cd2:	6023      	str	r3, [r4, #0]
 8000cd4:	e7ed      	b.n	8000cb2 <HAL_DMA_Start_IT+0x52>
 8000cd6:	46c0      	nop			; (mov r8, r8)

08000cd8 <HAL_DMA_IRQHandler>:
{
 8000cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000cda:	2504      	movs	r5, #4
 8000cdc:	002e      	movs	r6, r5
 8000cde:	6c03      	ldr	r3, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000ce0:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000ce2:	409e      	lsls	r6, r3
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000ce4:	6822      	ldr	r2, [r4, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000ce6:	6801      	ldr	r1, [r0, #0]
 8000ce8:	680f      	ldr	r7, [r1, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000cea:	4216      	tst	r6, r2
 8000cec:	d00d      	beq.n	8000d0a <HAL_DMA_IRQHandler+0x32>
 8000cee:	423d      	tst	r5, r7
 8000cf0:	d00b      	beq.n	8000d0a <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000cf2:	680b      	ldr	r3, [r1, #0]
 8000cf4:	069b      	lsls	r3, r3, #26
 8000cf6:	d402      	bmi.n	8000cfe <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000cf8:	680b      	ldr	r3, [r1, #0]
 8000cfa:	43ab      	bics	r3, r5
 8000cfc:	600b      	str	r3, [r1, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000cfe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000d00:	6066      	str	r6, [r4, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d000      	beq.n	8000d08 <HAL_DMA_IRQHandler+0x30>
    	hdma->XferErrorCallback(hdma);
 8000d06:	4798      	blx	r3
}  
 8000d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000d0a:	2502      	movs	r5, #2
 8000d0c:	002e      	movs	r6, r5
 8000d0e:	409e      	lsls	r6, r3
 8000d10:	4216      	tst	r6, r2
 8000d12:	d014      	beq.n	8000d3e <HAL_DMA_IRQHandler+0x66>
 8000d14:	423d      	tst	r5, r7
 8000d16:	d012      	beq.n	8000d3e <HAL_DMA_IRQHandler+0x66>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d18:	680b      	ldr	r3, [r1, #0]
 8000d1a:	069b      	lsls	r3, r3, #26
 8000d1c:	d406      	bmi.n	8000d2c <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000d1e:	220a      	movs	r2, #10
 8000d20:	680b      	ldr	r3, [r1, #0]
 8000d22:	4393      	bics	r3, r2
 8000d24:	600b      	str	r3, [r1, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8000d26:	2321      	movs	r3, #33	; 0x21
 8000d28:	3a09      	subs	r2, #9
 8000d2a:	54c2      	strb	r2, [r0, r3]
  	__HAL_UNLOCK(hdma);
 8000d2c:	2320      	movs	r3, #32
 8000d2e:	2200      	movs	r2, #0
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000d30:	6066      	str	r6, [r4, #4]
  	__HAL_UNLOCK(hdma);
 8000d32:	54c2      	strb	r2, [r0, r3]
  	if(hdma->XferCpltCallback != NULL)
 8000d34:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d0e6      	beq.n	8000d08 <HAL_DMA_IRQHandler+0x30>
    	hdma->XferErrorCallback(hdma);
 8000d3a:	4798      	blx	r3
 8000d3c:	e7e4      	b.n	8000d08 <HAL_DMA_IRQHandler+0x30>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000d3e:	2508      	movs	r5, #8
 8000d40:	002e      	movs	r6, r5
 8000d42:	409e      	lsls	r6, r3
 8000d44:	4232      	tst	r2, r6
 8000d46:	d0df      	beq.n	8000d08 <HAL_DMA_IRQHandler+0x30>
 8000d48:	423d      	tst	r5, r7
 8000d4a:	d0dd      	beq.n	8000d08 <HAL_DMA_IRQHandler+0x30>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d4c:	680a      	ldr	r2, [r1, #0]
 8000d4e:	3506      	adds	r5, #6
 8000d50:	43aa      	bics	r2, r5
 8000d52:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d54:	2201      	movs	r2, #1
 8000d56:	0011      	movs	r1, r2
 8000d58:	4099      	lsls	r1, r3
    hdma->State = HAL_DMA_STATE_READY;    
 8000d5a:	2321      	movs	r3, #33	; 0x21
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d5c:	6061      	str	r1, [r4, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000d5e:	6382      	str	r2, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8000d60:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma); 
 8000d62:	2200      	movs	r2, #0
 8000d64:	3b01      	subs	r3, #1
 8000d66:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferErrorCallback != NULL)
 8000d68:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d0cc      	beq.n	8000d08 <HAL_DMA_IRQHandler+0x30>
    	hdma->XferErrorCallback(hdma);
 8000d6e:	4798      	blx	r3
 8000d70:	e7ca      	b.n	8000d08 <HAL_DMA_IRQHandler+0x30>
 8000d72:	46c0      	nop			; (mov r8, r8)

08000d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d76:	46de      	mov	lr, fp
 8000d78:	4657      	mov	r7, sl
 8000d7a:	464e      	mov	r6, r9
 8000d7c:	4645      	mov	r5, r8
 8000d7e:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000d80:	680b      	ldr	r3, [r1, #0]
{ 
 8000d82:	b085      	sub	sp, #20
 8000d84:	468b      	mov	fp, r1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000d86:	469c      	mov	ip, r3
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d100      	bne.n	8000d90 <HAL_GPIO_Init+0x1c>
 8000d8e:	e0b7      	b.n	8000f00 <HAL_GPIO_Init+0x18c>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d90:	4b64      	ldr	r3, [pc, #400]	; (8000f24 <HAL_GPIO_Init+0x1b0>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d92:	46e1      	mov	r9, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d94:	469a      	mov	sl, r3
        temp = EXTI->IMR;
 8000d96:	4b64      	ldr	r3, [pc, #400]	; (8000f28 <HAL_GPIO_Init+0x1b4>)
 8000d98:	4698      	mov	r8, r3
 8000d9a:	e067      	b.n	8000e6c <HAL_GPIO_Init+0xf8>
      temp = GPIOx->MODER;
 8000d9c:	6803      	ldr	r3, [r0, #0]
 8000d9e:	0056      	lsls	r6, r2, #1
 8000da0:	469c      	mov	ip, r3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000da2:	2303      	movs	r3, #3
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000da4:	2703      	movs	r7, #3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000da6:	40b3      	lsls	r3, r6
 8000da8:	4664      	mov	r4, ip
 8000daa:	43db      	mvns	r3, r3
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dac:	400f      	ands	r7, r1
 8000dae:	40b7      	lsls	r7, r6
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000db0:	401c      	ands	r4, r3
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000db2:	433c      	orrs	r4, r7
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000db4:	9f01      	ldr	r7, [sp, #4]
      GPIOx->MODER = temp;
 8000db6:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000db8:	3f01      	subs	r7, #1
 8000dba:	2f01      	cmp	r7, #1
 8000dbc:	d800      	bhi.n	8000dc0 <HAL_GPIO_Init+0x4c>
 8000dbe:	e081      	b.n	8000ec4 <HAL_GPIO_Init+0x150>
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000dc0:	465c      	mov	r4, fp
      temp = GPIOx->PUPDR;
 8000dc2:	68c5      	ldr	r5, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dc4:	402b      	ands	r3, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000dc6:	68a5      	ldr	r5, [r4, #8]
 8000dc8:	40b5      	lsls	r5, r6
 8000dca:	432b      	orrs	r3, r5
      GPIOx->PUPDR = temp;
 8000dcc:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000dce:	2380      	movs	r3, #128	; 0x80
 8000dd0:	055b      	lsls	r3, r3, #21
 8000dd2:	4219      	tst	r1, r3
 8000dd4:	d046      	beq.n	8000e64 <HAL_GPIO_Init+0xf0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd6:	4653      	mov	r3, sl
 8000dd8:	2401      	movs	r4, #1
 8000dda:	699b      	ldr	r3, [r3, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000ddc:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dde:	4323      	orrs	r3, r4
 8000de0:	4654      	mov	r4, sl
 8000de2:	61a3      	str	r3, [r4, #24]
 8000de4:	69a3      	ldr	r3, [r4, #24]
 8000de6:	2401      	movs	r4, #1
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000de8:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dea:	4023      	ands	r3, r4
 8000dec:	4c4f      	ldr	r4, [pc, #316]	; (8000f2c <HAL_GPIO_Init+0x1b8>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000dee:	4016      	ands	r6, r2
 8000df0:	46a4      	mov	ip, r4
 8000df2:	00b6      	lsls	r6, r6, #2
 8000df4:	40b7      	lsls	r7, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000df6:	2490      	movs	r4, #144	; 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df8:	9303      	str	r3, [sp, #12]
 8000dfa:	9b03      	ldr	r3, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8000dfc:	0893      	lsrs	r3, r2, #2
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	4463      	add	r3, ip
 8000e02:	689d      	ldr	r5, [r3, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e04:	05e4      	lsls	r4, r4, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000e06:	43bd      	bics	r5, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e08:	42a0      	cmp	r0, r4
 8000e0a:	d100      	bne.n	8000e0e <HAL_GPIO_Init+0x9a>
 8000e0c:	e07f      	b.n	8000f0e <HAL_GPIO_Init+0x19a>
 8000e0e:	4f48      	ldr	r7, [pc, #288]	; (8000f30 <HAL_GPIO_Init+0x1bc>)
 8000e10:	42b8      	cmp	r0, r7
 8000e12:	d100      	bne.n	8000e16 <HAL_GPIO_Init+0xa2>
 8000e14:	e07d      	b.n	8000f12 <HAL_GPIO_Init+0x19e>
 8000e16:	4f47      	ldr	r7, [pc, #284]	; (8000f34 <HAL_GPIO_Init+0x1c0>)
 8000e18:	42b8      	cmp	r0, r7
 8000e1a:	d100      	bne.n	8000e1e <HAL_GPIO_Init+0xaa>
 8000e1c:	e07c      	b.n	8000f18 <HAL_GPIO_Init+0x1a4>
 8000e1e:	4f46      	ldr	r7, [pc, #280]	; (8000f38 <HAL_GPIO_Init+0x1c4>)
 8000e20:	42b8      	cmp	r0, r7
 8000e22:	d100      	bne.n	8000e26 <HAL_GPIO_Init+0xb2>
 8000e24:	e07b      	b.n	8000f1e <HAL_GPIO_Init+0x1aa>
 8000e26:	2705      	movs	r7, #5
 8000e28:	40b7      	lsls	r7, r6
 8000e2a:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8000e2c:	609d      	str	r5, [r3, #8]
        temp = EXTI->IMR;
 8000e2e:	4643      	mov	r3, r8
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000e30:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->IMR;
 8000e32:	681b      	ldr	r3, [r3, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000e34:	43e5      	mvns	r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e36:	03cc      	lsls	r4, r1, #15
 8000e38:	d45f      	bmi.n	8000efa <HAL_GPIO_Init+0x186>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000e3a:	402b      	ands	r3, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 8000e3c:	4644      	mov	r4, r8
 8000e3e:	6023      	str	r3, [r4, #0]

        temp = EXTI->EMR;
 8000e40:	6863      	ldr	r3, [r4, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e42:	038c      	lsls	r4, r1, #14
 8000e44:	d456      	bmi.n	8000ef4 <HAL_GPIO_Init+0x180>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000e46:	402b      	ands	r3, r5
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 8000e48:	4644      	mov	r4, r8
 8000e4a:	6063      	str	r3, [r4, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e4c:	68a3      	ldr	r3, [r4, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e4e:	02cc      	lsls	r4, r1, #11
 8000e50:	d44d      	bmi.n	8000eee <HAL_GPIO_Init+0x17a>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000e52:	402b      	ands	r3, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 8000e54:	4644      	mov	r4, r8
 8000e56:	60a3      	str	r3, [r4, #8]

        temp = EXTI->FTSR;
 8000e58:	68e3      	ldr	r3, [r4, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e5a:	0289      	lsls	r1, r1, #10
 8000e5c:	d444      	bmi.n	8000ee8 <HAL_GPIO_Init+0x174>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000e5e:	402b      	ands	r3, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 8000e60:	4641      	mov	r1, r8
 8000e62:	60cb      	str	r3, [r1, #12]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000e64:	464b      	mov	r3, r9
      }
    }
    
    position++;
 8000e66:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000e68:	40d3      	lsrs	r3, r2
 8000e6a:	d049      	beq.n	8000f00 <HAL_GPIO_Init+0x18c>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000e6c:	2501      	movs	r5, #1
 8000e6e:	464c      	mov	r4, r9
 8000e70:	4095      	lsls	r5, r2
 8000e72:	402c      	ands	r4, r5
 8000e74:	9400      	str	r4, [sp, #0]
    if(iocurrent)
 8000e76:	d0f5      	beq.n	8000e64 <HAL_GPIO_Init+0xf0>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000e78:	465b      	mov	r3, fp
 8000e7a:	6859      	ldr	r1, [r3, #4]
 8000e7c:	2310      	movs	r3, #16
 8000e7e:	000f      	movs	r7, r1
 8000e80:	439f      	bics	r7, r3
 8000e82:	003b      	movs	r3, r7
 8000e84:	9701      	str	r7, [sp, #4]
 8000e86:	2f02      	cmp	r7, #2
 8000e88:	d188      	bne.n	8000d9c <HAL_GPIO_Init+0x28>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000e8a:	240f      	movs	r4, #15
 8000e8c:	3305      	adds	r3, #5
 8000e8e:	4013      	ands	r3, r2
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	409c      	lsls	r4, r3
        temp = GPIOx->AFR[position >> 3];
 8000e94:	08d6      	lsrs	r6, r2, #3
 8000e96:	00b6      	lsls	r6, r6, #2
 8000e98:	1986      	adds	r6, r0, r6
 8000e9a:	6a37      	ldr	r7, [r6, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000e9c:	43a7      	bics	r7, r4
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000e9e:	465c      	mov	r4, fp
 8000ea0:	6924      	ldr	r4, [r4, #16]
 8000ea2:	409c      	lsls	r4, r3
 8000ea4:	0023      	movs	r3, r4
 8000ea6:	433b      	orrs	r3, r7
        GPIOx->AFR[position >> 3U] = temp;
 8000ea8:	6233      	str	r3, [r6, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000eaa:	2303      	movs	r3, #3
 8000eac:	0056      	lsls	r6, r2, #1
 8000eae:	40b3      	lsls	r3, r6
 8000eb0:	43db      	mvns	r3, r3
      temp = GPIOx->MODER;
 8000eb2:	6807      	ldr	r7, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000eb4:	401f      	ands	r7, r3
 8000eb6:	46bc      	mov	ip, r7
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eb8:	2703      	movs	r7, #3
 8000eba:	400f      	ands	r7, r1
 8000ebc:	40b7      	lsls	r7, r6
 8000ebe:	4664      	mov	r4, ip
 8000ec0:	4327      	orrs	r7, r4
      GPIOx->MODER = temp;
 8000ec2:	6007      	str	r7, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 8000ec4:	6887      	ldr	r7, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000ec6:	465c      	mov	r4, fp
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ec8:	401f      	ands	r7, r3
 8000eca:	46bc      	mov	ip, r7
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000ecc:	68e7      	ldr	r7, [r4, #12]
 8000ece:	4664      	mov	r4, ip
 8000ed0:	40b7      	lsls	r7, r6
 8000ed2:	4327      	orrs	r7, r4
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ed4:	2401      	movs	r4, #1
        GPIOx->OSPEEDR = temp;
 8000ed6:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000ed8:	6847      	ldr	r7, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000eda:	43af      	bics	r7, r5
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000edc:	090d      	lsrs	r5, r1, #4
 8000ede:	4025      	ands	r5, r4
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	433d      	orrs	r5, r7
        GPIOx->OTYPER = temp;
 8000ee4:	6045      	str	r5, [r0, #4]
 8000ee6:	e76b      	b.n	8000dc0 <HAL_GPIO_Init+0x4c>
          SET_BIT(temp, iocurrent); 
 8000ee8:	9900      	ldr	r1, [sp, #0]
 8000eea:	430b      	orrs	r3, r1
 8000eec:	e7b8      	b.n	8000e60 <HAL_GPIO_Init+0xec>
          SET_BIT(temp, iocurrent); 
 8000eee:	9c00      	ldr	r4, [sp, #0]
 8000ef0:	4323      	orrs	r3, r4
 8000ef2:	e7af      	b.n	8000e54 <HAL_GPIO_Init+0xe0>
          SET_BIT(temp, iocurrent); 
 8000ef4:	9c00      	ldr	r4, [sp, #0]
 8000ef6:	4323      	orrs	r3, r4
 8000ef8:	e7a6      	b.n	8000e48 <HAL_GPIO_Init+0xd4>
          SET_BIT(temp, iocurrent); 
 8000efa:	9c00      	ldr	r4, [sp, #0]
 8000efc:	4323      	orrs	r3, r4
 8000efe:	e79d      	b.n	8000e3c <HAL_GPIO_Init+0xc8>
  } 
}
 8000f00:	b005      	add	sp, #20
 8000f02:	bc3c      	pop	{r2, r3, r4, r5}
 8000f04:	4690      	mov	r8, r2
 8000f06:	4699      	mov	r9, r3
 8000f08:	46a2      	mov	sl, r4
 8000f0a:	46ab      	mov	fp, r5
 8000f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f0e:	2700      	movs	r7, #0
 8000f10:	e78b      	b.n	8000e2a <HAL_GPIO_Init+0xb6>
 8000f12:	2701      	movs	r7, #1
 8000f14:	40b7      	lsls	r7, r6
 8000f16:	e788      	b.n	8000e2a <HAL_GPIO_Init+0xb6>
 8000f18:	2702      	movs	r7, #2
 8000f1a:	40b7      	lsls	r7, r6
 8000f1c:	e785      	b.n	8000e2a <HAL_GPIO_Init+0xb6>
 8000f1e:	2703      	movs	r7, #3
 8000f20:	40b7      	lsls	r7, r6
 8000f22:	e782      	b.n	8000e2a <HAL_GPIO_Init+0xb6>
 8000f24:	40021000 	.word	0x40021000
 8000f28:	40010400 	.word	0x40010400
 8000f2c:	40010000 	.word	0x40010000
 8000f30:	48000400 	.word	0x48000400
 8000f34:	48000800 	.word	0x48000800
 8000f38:	48000c00 	.word	0x48000c00

08000f3c <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000f3c:	6943      	ldr	r3, [r0, #20]
 8000f3e:	4059      	eors	r1, r3
 8000f40:	6141      	str	r1, [r0, #20]
}
 8000f42:	4770      	bx	lr

08000f44 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8000f44:	b570      	push	{r4, r5, r6, lr}
 8000f46:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 8000f48:	d01e      	beq.n	8000f88 <HAL_IWDG_Init+0x44>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 8000f4a:	6803      	ldr	r3, [r0, #0]
 8000f4c:	4a11      	ldr	r2, [pc, #68]	; (8000f94 <HAL_IWDG_Init+0x50>)
 8000f4e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8000f50:	4a11      	ldr	r2, [pc, #68]	; (8000f98 <HAL_IWDG_Init+0x54>)
 8000f52:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8000f54:	6842      	ldr	r2, [r0, #4]
 8000f56:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8000f58:	6882      	ldr	r2, [r0, #8]
 8000f5a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8000f5c:	f7ff fa74 	bl	8000448 <HAL_GetTick>
 8000f60:	0005      	movs	r5, r0

   /* Wait for register to be updated */
  while(hiwdg->Instance->SR != RESET)
 8000f62:	e004      	b.n	8000f6e <HAL_IWDG_Init+0x2a>
  {
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 8000f64:	f7ff fa70 	bl	8000448 <HAL_GetTick>
 8000f68:	1b40      	subs	r0, r0, r5
 8000f6a:	2827      	cmp	r0, #39	; 0x27
 8000f6c:	d80a      	bhi.n	8000f84 <HAL_IWDG_Init+0x40>
  while(hiwdg->Instance->SR != RESET)
 8000f6e:	6823      	ldr	r3, [r4, #0]
 8000f70:	68da      	ldr	r2, [r3, #12]
 8000f72:	2a00      	cmp	r2, #0
 8000f74:	d1f6      	bne.n	8000f64 <HAL_IWDG_Init+0x20>
    }
  }

  /* If window parameter is different than current value, modify window 
  register */
  if(hiwdg->Instance->WINR != hiwdg->Init.Window)
 8000f76:	6919      	ldr	r1, [r3, #16]
 8000f78:	68e2      	ldr	r2, [r4, #12]
 8000f7a:	4291      	cmp	r1, r2
 8000f7c:	d006      	beq.n	8000f8c <HAL_IWDG_Init+0x48>
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
  }

  /* Return function status */
  return HAL_OK;
 8000f7e:	2000      	movs	r0, #0
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8000f80:	611a      	str	r2, [r3, #16]
}
 8000f82:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 8000f84:	2003      	movs	r0, #3
 8000f86:	e7fc      	b.n	8000f82 <HAL_IWDG_Init+0x3e>
    return HAL_ERROR;
 8000f88:	2001      	movs	r0, #1
 8000f8a:	e7fa      	b.n	8000f82 <HAL_IWDG_Init+0x3e>
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8000f8c:	4a03      	ldr	r2, [pc, #12]	; (8000f9c <HAL_IWDG_Init+0x58>)
  return HAL_OK;
 8000f8e:	2000      	movs	r0, #0
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	e7f6      	b.n	8000f82 <HAL_IWDG_Init+0x3e>
 8000f94:	0000cccc 	.word	0x0000cccc
 8000f98:	00005555 	.word	0x00005555
 8000f9c:	0000aaaa 	.word	0x0000aaaa

08000fa0 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8000fa0:	6803      	ldr	r3, [r0, #0]
 8000fa2:	4a02      	ldr	r2, [pc, #8]	; (8000fac <HAL_IWDG_Refresh+0xc>)

  /* Return function status */
  return HAL_OK;
}
 8000fa4:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8000fa6:	601a      	str	r2, [r3, #0]
}
 8000fa8:	4770      	bx	lr
 8000faa:	46c0      	nop			; (mov r8, r8)
 8000fac:	0000aaaa 	.word	0x0000aaaa

08000fb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fb2:	46ce      	mov	lr, r9
 8000fb4:	4647      	mov	r7, r8
 8000fb6:	b580      	push	{r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fb8:	6803      	ldr	r3, [r0, #0]
{
 8000fba:	b083      	sub	sp, #12
 8000fbc:	0004      	movs	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fbe:	07da      	lsls	r2, r3, #31
 8000fc0:	d52f      	bpl.n	8001022 <HAL_RCC_OscConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000fc2:	220c      	movs	r2, #12
 8000fc4:	48c4      	ldr	r0, [pc, #784]	; (80012d8 <HAL_RCC_OscConfig+0x328>)
 8000fc6:	6841      	ldr	r1, [r0, #4]
 8000fc8:	4011      	ands	r1, r2
 8000fca:	2904      	cmp	r1, #4
 8000fcc:	d100      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x20>
 8000fce:	e110      	b.n	80011f2 <HAL_RCC_OscConfig+0x242>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fd0:	6841      	ldr	r1, [r0, #4]
 8000fd2:	400a      	ands	r2, r1
 8000fd4:	2a08      	cmp	r2, #8
 8000fd6:	d100      	bne.n	8000fda <HAL_RCC_OscConfig+0x2a>
 8000fd8:	e107      	b.n	80011ea <HAL_RCC_OscConfig+0x23a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fda:	6863      	ldr	r3, [r4, #4]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d100      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x32>
 8000fe0:	e186      	b.n	80012f0 <HAL_RCC_OscConfig+0x340>
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d100      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x38>
 8000fe6:	e11a      	b.n	800121e <HAL_RCC_OscConfig+0x26e>
 8000fe8:	2b05      	cmp	r3, #5
 8000fea:	d100      	bne.n	8000fee <HAL_RCC_OscConfig+0x3e>
 8000fec:	e1db      	b.n	80013a6 <HAL_RCC_OscConfig+0x3f6>
 8000fee:	4bba      	ldr	r3, [pc, #744]	; (80012d8 <HAL_RCC_OscConfig+0x328>)
 8000ff0:	49ba      	ldr	r1, [pc, #744]	; (80012dc <HAL_RCC_OscConfig+0x32c>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	400a      	ands	r2, r1
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	49b9      	ldr	r1, [pc, #740]	; (80012e0 <HAL_RCC_OscConfig+0x330>)
 8000ffc:	400a      	ands	r2, r1
 8000ffe:	601a      	str	r2, [r3, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001000:	f7ff fa22 	bl	8000448 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001004:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8001006:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001008:	4eb3      	ldr	r6, [pc, #716]	; (80012d8 <HAL_RCC_OscConfig+0x328>)
 800100a:	02ad      	lsls	r5, r5, #10
 800100c:	e005      	b.n	800101a <HAL_RCC_OscConfig+0x6a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800100e:	f7ff fa1b 	bl	8000448 <HAL_GetTick>
 8001012:	1bc0      	subs	r0, r0, r7
 8001014:	2864      	cmp	r0, #100	; 0x64
 8001016:	d900      	bls.n	800101a <HAL_RCC_OscConfig+0x6a>
 8001018:	e12f      	b.n	800127a <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800101a:	6833      	ldr	r3, [r6, #0]
 800101c:	422b      	tst	r3, r5
 800101e:	d0f6      	beq.n	800100e <HAL_RCC_OscConfig+0x5e>
 8001020:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001022:	079a      	lsls	r2, r3, #30
 8001024:	d529      	bpl.n	800107a <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001026:	220c      	movs	r2, #12
 8001028:	49ab      	ldr	r1, [pc, #684]	; (80012d8 <HAL_RCC_OscConfig+0x328>)
 800102a:	6848      	ldr	r0, [r1, #4]
 800102c:	4202      	tst	r2, r0
 800102e:	d100      	bne.n	8001032 <HAL_RCC_OscConfig+0x82>
 8001030:	e0bf      	b.n	80011b2 <HAL_RCC_OscConfig+0x202>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001032:	6848      	ldr	r0, [r1, #4]
 8001034:	4002      	ands	r2, r0
 8001036:	2a08      	cmp	r2, #8
 8001038:	d100      	bne.n	800103c <HAL_RCC_OscConfig+0x8c>
 800103a:	e0b6      	b.n	80011aa <HAL_RCC_OscConfig+0x1fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800103c:	68e3      	ldr	r3, [r4, #12]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800103e:	4da6      	ldr	r5, [pc, #664]	; (80012d8 <HAL_RCC_OscConfig+0x328>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001040:	2b00      	cmp	r3, #0
 8001042:	d100      	bne.n	8001046 <HAL_RCC_OscConfig+0x96>
 8001044:	e134      	b.n	80012b0 <HAL_RCC_OscConfig+0x300>
        __HAL_RCC_HSI_ENABLE();
 8001046:	2201      	movs	r2, #1
 8001048:	682b      	ldr	r3, [r5, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800104a:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 800104c:	4313      	orrs	r3, r2
 800104e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001050:	f7ff f9fa 	bl	8000448 <HAL_GetTick>
 8001054:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001056:	e005      	b.n	8001064 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001058:	f7ff f9f6 	bl	8000448 <HAL_GetTick>
 800105c:	1bc0      	subs	r0, r0, r7
 800105e:	2802      	cmp	r0, #2
 8001060:	d900      	bls.n	8001064 <HAL_RCC_OscConfig+0xb4>
 8001062:	e10a      	b.n	800127a <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001064:	682b      	ldr	r3, [r5, #0]
 8001066:	421e      	tst	r6, r3
 8001068:	d0f6      	beq.n	8001058 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800106a:	21f8      	movs	r1, #248	; 0xf8
 800106c:	682a      	ldr	r2, [r5, #0]
 800106e:	6923      	ldr	r3, [r4, #16]
 8001070:	438a      	bics	r2, r1
 8001072:	00db      	lsls	r3, r3, #3
 8001074:	4313      	orrs	r3, r2
 8001076:	602b      	str	r3, [r5, #0]
 8001078:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800107a:	071a      	lsls	r2, r3, #28
 800107c:	d500      	bpl.n	8001080 <HAL_RCC_OscConfig+0xd0>
 800107e:	e07d      	b.n	800117c <HAL_RCC_OscConfig+0x1cc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001080:	075a      	lsls	r2, r3, #29
 8001082:	d540      	bpl.n	8001106 <HAL_RCC_OscConfig+0x156>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001084:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001086:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001088:	4b93      	ldr	r3, [pc, #588]	; (80012d8 <HAL_RCC_OscConfig+0x328>)
 800108a:	0552      	lsls	r2, r2, #21
 800108c:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 800108e:	4680      	mov	r8, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001090:	4211      	tst	r1, r2
 8001092:	d108      	bne.n	80010a6 <HAL_RCC_OscConfig+0xf6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001094:	69d9      	ldr	r1, [r3, #28]
 8001096:	4311      	orrs	r1, r2
 8001098:	61d9      	str	r1, [r3, #28]
 800109a:	69db      	ldr	r3, [r3, #28]
 800109c:	401a      	ands	r2, r3
 800109e:	9201      	str	r2, [sp, #4]
 80010a0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80010a2:	2301      	movs	r3, #1
 80010a4:	4698      	mov	r8, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010a6:	2780      	movs	r7, #128	; 0x80
 80010a8:	4e8e      	ldr	r6, [pc, #568]	; (80012e4 <HAL_RCC_OscConfig+0x334>)
 80010aa:	007f      	lsls	r7, r7, #1
 80010ac:	6833      	ldr	r3, [r6, #0]
 80010ae:	423b      	tst	r3, r7
 80010b0:	d100      	bne.n	80010b4 <HAL_RCC_OscConfig+0x104>
 80010b2:	e0cd      	b.n	8001250 <HAL_RCC_OscConfig+0x2a0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010b4:	68a3      	ldr	r3, [r4, #8]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d100      	bne.n	80010bc <HAL_RCC_OscConfig+0x10c>
 80010ba:	e0d9      	b.n	8001270 <HAL_RCC_OscConfig+0x2c0>
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d100      	bne.n	80010c2 <HAL_RCC_OscConfig+0x112>
 80010c0:	e0dd      	b.n	800127e <HAL_RCC_OscConfig+0x2ce>
 80010c2:	2b05      	cmp	r3, #5
 80010c4:	d100      	bne.n	80010c8 <HAL_RCC_OscConfig+0x118>
 80010c6:	e198      	b.n	80013fa <HAL_RCC_OscConfig+0x44a>
 80010c8:	2101      	movs	r1, #1
 80010ca:	4b83      	ldr	r3, [pc, #524]	; (80012d8 <HAL_RCC_OscConfig+0x328>)
 80010cc:	6a1a      	ldr	r2, [r3, #32]
 80010ce:	438a      	bics	r2, r1
 80010d0:	621a      	str	r2, [r3, #32]
 80010d2:	6a1a      	ldr	r2, [r3, #32]
 80010d4:	3103      	adds	r1, #3
 80010d6:	438a      	bics	r2, r1
 80010d8:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010da:	f7ff f9b5 	bl	8000448 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010de:	4f7e      	ldr	r7, [pc, #504]	; (80012d8 <HAL_RCC_OscConfig+0x328>)
      tickstart = HAL_GetTick();
 80010e0:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010e2:	2602      	movs	r6, #2
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010e4:	4d80      	ldr	r5, [pc, #512]	; (80012e8 <HAL_RCC_OscConfig+0x338>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010e6:	e006      	b.n	80010f6 <HAL_RCC_OscConfig+0x146>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010e8:	f7ff f9ae 	bl	8000448 <HAL_GetTick>
 80010ec:	464b      	mov	r3, r9
 80010ee:	1ac0      	subs	r0, r0, r3
 80010f0:	42a8      	cmp	r0, r5
 80010f2:	d900      	bls.n	80010f6 <HAL_RCC_OscConfig+0x146>
 80010f4:	e0c1      	b.n	800127a <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010f6:	6a3b      	ldr	r3, [r7, #32]
 80010f8:	421e      	tst	r6, r3
 80010fa:	d0f5      	beq.n	80010e8 <HAL_RCC_OscConfig+0x138>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80010fc:	4643      	mov	r3, r8
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d100      	bne.n	8001104 <HAL_RCC_OscConfig+0x154>
 8001102:	e113      	b.n	800132c <HAL_RCC_OscConfig+0x37c>
 8001104:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001106:	06db      	lsls	r3, r3, #27
 8001108:	d512      	bpl.n	8001130 <HAL_RCC_OscConfig+0x180>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800110a:	6963      	ldr	r3, [r4, #20]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d100      	bne.n	8001112 <HAL_RCC_OscConfig+0x162>
 8001110:	e155      	b.n	80013be <HAL_RCC_OscConfig+0x40e>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001112:	3305      	adds	r3, #5
 8001114:	d000      	beq.n	8001118 <HAL_RCC_OscConfig+0x168>
 8001116:	e0f2      	b.n	80012fe <HAL_RCC_OscConfig+0x34e>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001118:	2104      	movs	r1, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800111a:	20f8      	movs	r0, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 800111c:	4a6e      	ldr	r2, [pc, #440]	; (80012d8 <HAL_RCC_OscConfig+0x328>)
 800111e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001120:	438b      	bics	r3, r1
 8001122:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001124:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8001126:	69a3      	ldr	r3, [r4, #24]
 8001128:	4381      	bics	r1, r0
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	430b      	orrs	r3, r1
 800112e:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001130:	6a23      	ldr	r3, [r4, #32]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d01c      	beq.n	8001170 <HAL_RCC_OscConfig+0x1c0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001136:	220c      	movs	r2, #12
 8001138:	4d67      	ldr	r5, [pc, #412]	; (80012d8 <HAL_RCC_OscConfig+0x328>)
 800113a:	6869      	ldr	r1, [r5, #4]
 800113c:	400a      	ands	r2, r1
 800113e:	2a08      	cmp	r2, #8
 8001140:	d03e      	beq.n	80011c0 <HAL_RCC_OscConfig+0x210>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001142:	2b02      	cmp	r3, #2
 8001144:	d100      	bne.n	8001148 <HAL_RCC_OscConfig+0x198>
 8001146:	e0f8      	b.n	800133a <HAL_RCC_OscConfig+0x38a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001148:	682b      	ldr	r3, [r5, #0]
 800114a:	4a68      	ldr	r2, [pc, #416]	; (80012ec <HAL_RCC_OscConfig+0x33c>)
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800114c:	002c      	movs	r4, r5
        __HAL_RCC_PLL_DISABLE();
 800114e:	4013      	ands	r3, r2
 8001150:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001152:	f7ff f979 	bl	8000448 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001156:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8001158:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800115a:	04ad      	lsls	r5, r5, #18
 800115c:	e005      	b.n	800116a <HAL_RCC_OscConfig+0x1ba>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800115e:	f7ff f973 	bl	8000448 <HAL_GetTick>
 8001162:	1b80      	subs	r0, r0, r6
 8001164:	2802      	cmp	r0, #2
 8001166:	d900      	bls.n	800116a <HAL_RCC_OscConfig+0x1ba>
 8001168:	e087      	b.n	800127a <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800116a:	6823      	ldr	r3, [r4, #0]
 800116c:	422b      	tst	r3, r5
 800116e:	d1f6      	bne.n	800115e <HAL_RCC_OscConfig+0x1ae>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001170:	2000      	movs	r0, #0
}
 8001172:	b003      	add	sp, #12
 8001174:	bc0c      	pop	{r2, r3}
 8001176:	4690      	mov	r8, r2
 8001178:	4699      	mov	r9, r3
 800117a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800117c:	69e3      	ldr	r3, [r4, #28]
      __HAL_RCC_LSI_ENABLE();
 800117e:	4d56      	ldr	r5, [pc, #344]	; (80012d8 <HAL_RCC_OscConfig+0x328>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001180:	2b00      	cmp	r3, #0
 8001182:	d01f      	beq.n	80011c4 <HAL_RCC_OscConfig+0x214>
      __HAL_RCC_LSI_ENABLE();
 8001184:	2201      	movs	r2, #1
 8001186:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001188:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 800118a:	4313      	orrs	r3, r2
 800118c:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 800118e:	f7ff f95b 	bl	8000448 <HAL_GetTick>
 8001192:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001194:	e004      	b.n	80011a0 <HAL_RCC_OscConfig+0x1f0>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001196:	f7ff f957 	bl	8000448 <HAL_GetTick>
 800119a:	1bc0      	subs	r0, r0, r7
 800119c:	2802      	cmp	r0, #2
 800119e:	d86c      	bhi.n	800127a <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011a0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80011a2:	421e      	tst	r6, r3
 80011a4:	d0f7      	beq.n	8001196 <HAL_RCC_OscConfig+0x1e6>
 80011a6:	6823      	ldr	r3, [r4, #0]
 80011a8:	e76a      	b.n	8001080 <HAL_RCC_OscConfig+0xd0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80011aa:	684a      	ldr	r2, [r1, #4]
 80011ac:	03d2      	lsls	r2, r2, #15
 80011ae:	d500      	bpl.n	80011b2 <HAL_RCC_OscConfig+0x202>
 80011b0:	e744      	b.n	800103c <HAL_RCC_OscConfig+0x8c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011b2:	4a49      	ldr	r2, [pc, #292]	; (80012d8 <HAL_RCC_OscConfig+0x328>)
 80011b4:	6812      	ldr	r2, [r2, #0]
 80011b6:	0792      	lsls	r2, r2, #30
 80011b8:	d525      	bpl.n	8001206 <HAL_RCC_OscConfig+0x256>
 80011ba:	68e2      	ldr	r2, [r4, #12]
 80011bc:	2a01      	cmp	r2, #1
 80011be:	d022      	beq.n	8001206 <HAL_RCC_OscConfig+0x256>
      return HAL_ERROR;
 80011c0:	2001      	movs	r0, #1
 80011c2:	e7d6      	b.n	8001172 <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_DISABLE();
 80011c4:	2201      	movs	r2, #1
 80011c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011c8:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 80011ca:	4393      	bics	r3, r2
 80011cc:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80011ce:	f7ff f93b 	bl	8000448 <HAL_GetTick>
 80011d2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011d4:	e004      	b.n	80011e0 <HAL_RCC_OscConfig+0x230>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011d6:	f7ff f937 	bl	8000448 <HAL_GetTick>
 80011da:	1bc0      	subs	r0, r0, r7
 80011dc:	2802      	cmp	r0, #2
 80011de:	d84c      	bhi.n	800127a <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011e0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80011e2:	421e      	tst	r6, r3
 80011e4:	d1f7      	bne.n	80011d6 <HAL_RCC_OscConfig+0x226>
 80011e6:	6823      	ldr	r3, [r4, #0]
 80011e8:	e74a      	b.n	8001080 <HAL_RCC_OscConfig+0xd0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011ea:	6842      	ldr	r2, [r0, #4]
 80011ec:	03d2      	lsls	r2, r2, #15
 80011ee:	d400      	bmi.n	80011f2 <HAL_RCC_OscConfig+0x242>
 80011f0:	e6f3      	b.n	8000fda <HAL_RCC_OscConfig+0x2a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f2:	4a39      	ldr	r2, [pc, #228]	; (80012d8 <HAL_RCC_OscConfig+0x328>)
 80011f4:	6812      	ldr	r2, [r2, #0]
 80011f6:	0392      	lsls	r2, r2, #14
 80011f8:	d400      	bmi.n	80011fc <HAL_RCC_OscConfig+0x24c>
 80011fa:	e712      	b.n	8001022 <HAL_RCC_OscConfig+0x72>
 80011fc:	6862      	ldr	r2, [r4, #4]
 80011fe:	2a00      	cmp	r2, #0
 8001200:	d000      	beq.n	8001204 <HAL_RCC_OscConfig+0x254>
 8001202:	e70e      	b.n	8001022 <HAL_RCC_OscConfig+0x72>
 8001204:	e7dc      	b.n	80011c0 <HAL_RCC_OscConfig+0x210>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001206:	25f8      	movs	r5, #248	; 0xf8
 8001208:	4833      	ldr	r0, [pc, #204]	; (80012d8 <HAL_RCC_OscConfig+0x328>)
 800120a:	6922      	ldr	r2, [r4, #16]
 800120c:	6801      	ldr	r1, [r0, #0]
 800120e:	00d2      	lsls	r2, r2, #3
 8001210:	43a9      	bics	r1, r5
 8001212:	430a      	orrs	r2, r1
 8001214:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001216:	071a      	lsls	r2, r3, #28
 8001218:	d400      	bmi.n	800121c <HAL_RCC_OscConfig+0x26c>
 800121a:	e731      	b.n	8001080 <HAL_RCC_OscConfig+0xd0>
 800121c:	e7ae      	b.n	800117c <HAL_RCC_OscConfig+0x1cc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800121e:	4d2e      	ldr	r5, [pc, #184]	; (80012d8 <HAL_RCC_OscConfig+0x328>)
 8001220:	4a2e      	ldr	r2, [pc, #184]	; (80012dc <HAL_RCC_OscConfig+0x32c>)
 8001222:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001224:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001226:	4013      	ands	r3, r2
 8001228:	602b      	str	r3, [r5, #0]
 800122a:	682b      	ldr	r3, [r5, #0]
 800122c:	4a2c      	ldr	r2, [pc, #176]	; (80012e0 <HAL_RCC_OscConfig+0x330>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800122e:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001230:	4013      	ands	r3, r2
 8001232:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001234:	f7ff f908 	bl	8000448 <HAL_GetTick>
 8001238:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800123a:	e004      	b.n	8001246 <HAL_RCC_OscConfig+0x296>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800123c:	f7ff f904 	bl	8000448 <HAL_GetTick>
 8001240:	1bc0      	subs	r0, r0, r7
 8001242:	2864      	cmp	r0, #100	; 0x64
 8001244:	d819      	bhi.n	800127a <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001246:	682b      	ldr	r3, [r5, #0]
 8001248:	4233      	tst	r3, r6
 800124a:	d1f7      	bne.n	800123c <HAL_RCC_OscConfig+0x28c>
 800124c:	6823      	ldr	r3, [r4, #0]
 800124e:	e6e8      	b.n	8001022 <HAL_RCC_OscConfig+0x72>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001250:	6833      	ldr	r3, [r6, #0]
 8001252:	433b      	orrs	r3, r7
 8001254:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001256:	f7ff f8f7 	bl	8000448 <HAL_GetTick>
 800125a:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800125c:	e004      	b.n	8001268 <HAL_RCC_OscConfig+0x2b8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800125e:	f7ff f8f3 	bl	8000448 <HAL_GetTick>
 8001262:	1b40      	subs	r0, r0, r5
 8001264:	2864      	cmp	r0, #100	; 0x64
 8001266:	d808      	bhi.n	800127a <HAL_RCC_OscConfig+0x2ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001268:	6833      	ldr	r3, [r6, #0]
 800126a:	423b      	tst	r3, r7
 800126c:	d0f7      	beq.n	800125e <HAL_RCC_OscConfig+0x2ae>
 800126e:	e721      	b.n	80010b4 <HAL_RCC_OscConfig+0x104>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001270:	4919      	ldr	r1, [pc, #100]	; (80012d8 <HAL_RCC_OscConfig+0x328>)
 8001272:	6a0a      	ldr	r2, [r1, #32]
 8001274:	4313      	orrs	r3, r2
 8001276:	620b      	str	r3, [r1, #32]
 8001278:	e72f      	b.n	80010da <HAL_RCC_OscConfig+0x12a>
            return HAL_TIMEOUT;
 800127a:	2003      	movs	r0, #3
 800127c:	e779      	b.n	8001172 <HAL_RCC_OscConfig+0x1c2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800127e:	2201      	movs	r2, #1
 8001280:	4e15      	ldr	r6, [pc, #84]	; (80012d8 <HAL_RCC_OscConfig+0x328>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001282:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001284:	6a33      	ldr	r3, [r6, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001286:	4d18      	ldr	r5, [pc, #96]	; (80012e8 <HAL_RCC_OscConfig+0x338>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001288:	4393      	bics	r3, r2
 800128a:	6233      	str	r3, [r6, #32]
 800128c:	6a33      	ldr	r3, [r6, #32]
 800128e:	3203      	adds	r2, #3
 8001290:	4393      	bics	r3, r2
 8001292:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8001294:	f7ff f8d8 	bl	8000448 <HAL_GetTick>
 8001298:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800129a:	e005      	b.n	80012a8 <HAL_RCC_OscConfig+0x2f8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800129c:	f7ff f8d4 	bl	8000448 <HAL_GetTick>
 80012a0:	464b      	mov	r3, r9
 80012a2:	1ac0      	subs	r0, r0, r3
 80012a4:	42a8      	cmp	r0, r5
 80012a6:	d8e8      	bhi.n	800127a <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012a8:	6a33      	ldr	r3, [r6, #32]
 80012aa:	421f      	tst	r7, r3
 80012ac:	d1f6      	bne.n	800129c <HAL_RCC_OscConfig+0x2ec>
 80012ae:	e725      	b.n	80010fc <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_DISABLE();
 80012b0:	2201      	movs	r2, #1
 80012b2:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012b4:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 80012b6:	4393      	bics	r3, r2
 80012b8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80012ba:	f7ff f8c5 	bl	8000448 <HAL_GetTick>
 80012be:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012c0:	e004      	b.n	80012cc <HAL_RCC_OscConfig+0x31c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012c2:	f7ff f8c1 	bl	8000448 <HAL_GetTick>
 80012c6:	1bc0      	subs	r0, r0, r7
 80012c8:	2802      	cmp	r0, #2
 80012ca:	d8d6      	bhi.n	800127a <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012cc:	682b      	ldr	r3, [r5, #0]
 80012ce:	421e      	tst	r6, r3
 80012d0:	d1f7      	bne.n	80012c2 <HAL_RCC_OscConfig+0x312>
 80012d2:	6823      	ldr	r3, [r4, #0]
 80012d4:	e6d1      	b.n	800107a <HAL_RCC_OscConfig+0xca>
 80012d6:	46c0      	nop			; (mov r8, r8)
 80012d8:	40021000 	.word	0x40021000
 80012dc:	fffeffff 	.word	0xfffeffff
 80012e0:	fffbffff 	.word	0xfffbffff
 80012e4:	40007000 	.word	0x40007000
 80012e8:	00001388 	.word	0x00001388
 80012ec:	feffffff 	.word	0xfeffffff
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012f0:	2380      	movs	r3, #128	; 0x80
 80012f2:	4a47      	ldr	r2, [pc, #284]	; (8001410 <HAL_RCC_OscConfig+0x460>)
 80012f4:	025b      	lsls	r3, r3, #9
 80012f6:	6811      	ldr	r1, [r2, #0]
 80012f8:	430b      	orrs	r3, r1
 80012fa:	6013      	str	r3, [r2, #0]
 80012fc:	e680      	b.n	8001000 <HAL_RCC_OscConfig+0x50>
      __HAL_RCC_HSI14ADC_DISABLE();
 80012fe:	2204      	movs	r2, #4
 8001300:	4d43      	ldr	r5, [pc, #268]	; (8001410 <HAL_RCC_OscConfig+0x460>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001302:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001304:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001306:	4313      	orrs	r3, r2
 8001308:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 800130a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800130c:	3a03      	subs	r2, #3
 800130e:	4393      	bics	r3, r2
 8001310:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001312:	f7ff f899 	bl	8000448 <HAL_GetTick>
 8001316:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001318:	e004      	b.n	8001324 <HAL_RCC_OscConfig+0x374>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800131a:	f7ff f895 	bl	8000448 <HAL_GetTick>
 800131e:	1bc0      	subs	r0, r0, r7
 8001320:	2802      	cmp	r0, #2
 8001322:	d8aa      	bhi.n	800127a <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001324:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001326:	421e      	tst	r6, r3
 8001328:	d1f7      	bne.n	800131a <HAL_RCC_OscConfig+0x36a>
 800132a:	e701      	b.n	8001130 <HAL_RCC_OscConfig+0x180>
      __HAL_RCC_PWR_CLK_DISABLE();
 800132c:	4a38      	ldr	r2, [pc, #224]	; (8001410 <HAL_RCC_OscConfig+0x460>)
 800132e:	4939      	ldr	r1, [pc, #228]	; (8001414 <HAL_RCC_OscConfig+0x464>)
 8001330:	69d3      	ldr	r3, [r2, #28]
 8001332:	400b      	ands	r3, r1
 8001334:	61d3      	str	r3, [r2, #28]
 8001336:	6823      	ldr	r3, [r4, #0]
 8001338:	e6e5      	b.n	8001106 <HAL_RCC_OscConfig+0x156>
        __HAL_RCC_PLL_DISABLE();
 800133a:	682b      	ldr	r3, [r5, #0]
 800133c:	4a36      	ldr	r2, [pc, #216]	; (8001418 <HAL_RCC_OscConfig+0x468>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800133e:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001340:	4013      	ands	r3, r2
 8001342:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001344:	f7ff f880 	bl	8000448 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001348:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 800134a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800134c:	e004      	b.n	8001358 <HAL_RCC_OscConfig+0x3a8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800134e:	f7ff f87b 	bl	8000448 <HAL_GetTick>
 8001352:	1bc0      	subs	r0, r0, r7
 8001354:	2802      	cmp	r0, #2
 8001356:	d890      	bhi.n	800127a <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001358:	682b      	ldr	r3, [r5, #0]
 800135a:	4233      	tst	r3, r6
 800135c:	d1f7      	bne.n	800134e <HAL_RCC_OscConfig+0x39e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800135e:	220f      	movs	r2, #15
 8001360:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001362:	4393      	bics	r3, r2
 8001364:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001366:	4313      	orrs	r3, r2
 8001368:	62eb      	str	r3, [r5, #44]	; 0x2c
 800136a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800136c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800136e:	686a      	ldr	r2, [r5, #4]
 8001370:	430b      	orrs	r3, r1
 8001372:	492a      	ldr	r1, [pc, #168]	; (800141c <HAL_RCC_OscConfig+0x46c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001374:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001376:	400a      	ands	r2, r1
 8001378:	4313      	orrs	r3, r2
 800137a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800137c:	2380      	movs	r3, #128	; 0x80
 800137e:	682a      	ldr	r2, [r5, #0]
 8001380:	045b      	lsls	r3, r3, #17
 8001382:	4313      	orrs	r3, r2
 8001384:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001386:	f7ff f85f 	bl	8000448 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800138a:	4d21      	ldr	r5, [pc, #132]	; (8001410 <HAL_RCC_OscConfig+0x460>)
        tickstart = HAL_GetTick();
 800138c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800138e:	04a4      	lsls	r4, r4, #18
 8001390:	e005      	b.n	800139e <HAL_RCC_OscConfig+0x3ee>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001392:	f7ff f859 	bl	8000448 <HAL_GetTick>
 8001396:	1b80      	subs	r0, r0, r6
 8001398:	2802      	cmp	r0, #2
 800139a:	d900      	bls.n	800139e <HAL_RCC_OscConfig+0x3ee>
 800139c:	e76d      	b.n	800127a <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800139e:	682b      	ldr	r3, [r5, #0]
 80013a0:	4223      	tst	r3, r4
 80013a2:	d0f6      	beq.n	8001392 <HAL_RCC_OscConfig+0x3e2>
 80013a4:	e6e4      	b.n	8001170 <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013a6:	2280      	movs	r2, #128	; 0x80
 80013a8:	4b19      	ldr	r3, [pc, #100]	; (8001410 <HAL_RCC_OscConfig+0x460>)
 80013aa:	02d2      	lsls	r2, r2, #11
 80013ac:	6819      	ldr	r1, [r3, #0]
 80013ae:	430a      	orrs	r2, r1
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	2280      	movs	r2, #128	; 0x80
 80013b4:	6819      	ldr	r1, [r3, #0]
 80013b6:	0252      	lsls	r2, r2, #9
 80013b8:	430a      	orrs	r2, r1
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	e620      	b.n	8001000 <HAL_RCC_OscConfig+0x50>
      __HAL_RCC_HSI14ADC_DISABLE();
 80013be:	2104      	movs	r1, #4
 80013c0:	4d13      	ldr	r5, [pc, #76]	; (8001410 <HAL_RCC_OscConfig+0x460>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80013c2:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80013c4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80013c6:	430a      	orrs	r2, r1
 80013c8:	636a      	str	r2, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80013ca:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80013cc:	4313      	orrs	r3, r2
 80013ce:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80013d0:	f7ff f83a 	bl	8000448 <HAL_GetTick>
 80013d4:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80013d6:	e005      	b.n	80013e4 <HAL_RCC_OscConfig+0x434>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80013d8:	f7ff f836 	bl	8000448 <HAL_GetTick>
 80013dc:	1bc0      	subs	r0, r0, r7
 80013de:	2802      	cmp	r0, #2
 80013e0:	d900      	bls.n	80013e4 <HAL_RCC_OscConfig+0x434>
 80013e2:	e74a      	b.n	800127a <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80013e4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80013e6:	421e      	tst	r6, r3
 80013e8:	d0f6      	beq.n	80013d8 <HAL_RCC_OscConfig+0x428>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80013ea:	21f8      	movs	r1, #248	; 0xf8
 80013ec:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80013ee:	69a3      	ldr	r3, [r4, #24]
 80013f0:	438a      	bics	r2, r1
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	4313      	orrs	r3, r2
 80013f6:	636b      	str	r3, [r5, #52]	; 0x34
 80013f8:	e69a      	b.n	8001130 <HAL_RCC_OscConfig+0x180>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013fa:	2104      	movs	r1, #4
 80013fc:	4b04      	ldr	r3, [pc, #16]	; (8001410 <HAL_RCC_OscConfig+0x460>)
 80013fe:	6a1a      	ldr	r2, [r3, #32]
 8001400:	430a      	orrs	r2, r1
 8001402:	621a      	str	r2, [r3, #32]
 8001404:	6a1a      	ldr	r2, [r3, #32]
 8001406:	3903      	subs	r1, #3
 8001408:	430a      	orrs	r2, r1
 800140a:	621a      	str	r2, [r3, #32]
 800140c:	e665      	b.n	80010da <HAL_RCC_OscConfig+0x12a>
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	40021000 	.word	0x40021000
 8001414:	efffffff 	.word	0xefffffff
 8001418:	feffffff 	.word	0xfeffffff
 800141c:	ffc2ffff 	.word	0xffc2ffff

08001420 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001422:	46ce      	mov	lr, r9
 8001424:	4647      	mov	r7, r8
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001426:	2201      	movs	r2, #1
{
 8001428:	b580      	push	{r7, lr}
 800142a:	000c      	movs	r4, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800142c:	495c      	ldr	r1, [pc, #368]	; (80015a0 <HAL_RCC_ClockConfig+0x180>)
{
 800142e:	b089      	sub	sp, #36	; 0x24
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001430:	680b      	ldr	r3, [r1, #0]
{
 8001432:	0005      	movs	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001434:	4013      	ands	r3, r2
 8001436:	42a3      	cmp	r3, r4
 8001438:	d20d      	bcs.n	8001456 <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800143a:	680b      	ldr	r3, [r1, #0]
 800143c:	4393      	bics	r3, r2
 800143e:	4323      	orrs	r3, r4
 8001440:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001442:	680b      	ldr	r3, [r1, #0]
 8001444:	401a      	ands	r2, r3
 8001446:	4294      	cmp	r4, r2
 8001448:	d005      	beq.n	8001456 <HAL_RCC_ClockConfig+0x36>
    {
      return HAL_ERROR;
 800144a:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 800144c:	b009      	add	sp, #36	; 0x24
 800144e:	bc0c      	pop	{r2, r3}
 8001450:	4690      	mov	r8, r2
 8001452:	4699      	mov	r9, r3
 8001454:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001456:	682b      	ldr	r3, [r5, #0]
 8001458:	079a      	lsls	r2, r3, #30
 800145a:	d506      	bpl.n	800146a <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800145c:	20f0      	movs	r0, #240	; 0xf0
 800145e:	4951      	ldr	r1, [pc, #324]	; (80015a4 <HAL_RCC_ClockConfig+0x184>)
 8001460:	684a      	ldr	r2, [r1, #4]
 8001462:	4382      	bics	r2, r0
 8001464:	68a8      	ldr	r0, [r5, #8]
 8001466:	4302      	orrs	r2, r0
 8001468:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800146a:	07db      	lsls	r3, r3, #31
 800146c:	d524      	bpl.n	80014b8 <HAL_RCC_ClockConfig+0x98>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800146e:	4b4d      	ldr	r3, [pc, #308]	; (80015a4 <HAL_RCC_ClockConfig+0x184>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001470:	686a      	ldr	r2, [r5, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001472:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001474:	2a01      	cmp	r2, #1
 8001476:	d06a      	beq.n	800154e <HAL_RCC_ClockConfig+0x12e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001478:	2a02      	cmp	r2, #2
 800147a:	d063      	beq.n	8001544 <HAL_RCC_ClockConfig+0x124>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800147c:	079b      	lsls	r3, r3, #30
 800147e:	d5e4      	bpl.n	800144a <HAL_RCC_ClockConfig+0x2a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001480:	2103      	movs	r1, #3
 8001482:	4e48      	ldr	r6, [pc, #288]	; (80015a4 <HAL_RCC_ClockConfig+0x184>)
 8001484:	6873      	ldr	r3, [r6, #4]
 8001486:	438b      	bics	r3, r1
 8001488:	4313      	orrs	r3, r2
 800148a:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800148c:	f7fe ffdc 	bl	8000448 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001490:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001492:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001494:	2b01      	cmp	r3, #1
 8001496:	d05d      	beq.n	8001554 <HAL_RCC_ClockConfig+0x134>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001498:	2b02      	cmp	r3, #2
 800149a:	d06b      	beq.n	8001574 <HAL_RCC_ClockConfig+0x154>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800149c:	230c      	movs	r3, #12
 800149e:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014a0:	4b41      	ldr	r3, [pc, #260]	; (80015a8 <HAL_RCC_ClockConfig+0x188>)
 80014a2:	4699      	mov	r9, r3
 80014a4:	e004      	b.n	80014b0 <HAL_RCC_ClockConfig+0x90>
 80014a6:	f7fe ffcf 	bl	8000448 <HAL_GetTick>
 80014aa:	1bc0      	subs	r0, r0, r7
 80014ac:	4548      	cmp	r0, r9
 80014ae:	d84c      	bhi.n	800154a <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80014b0:	4642      	mov	r2, r8
 80014b2:	6873      	ldr	r3, [r6, #4]
 80014b4:	421a      	tst	r2, r3
 80014b6:	d1f6      	bne.n	80014a6 <HAL_RCC_ClockConfig+0x86>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80014b8:	2101      	movs	r1, #1
 80014ba:	4a39      	ldr	r2, [pc, #228]	; (80015a0 <HAL_RCC_ClockConfig+0x180>)
 80014bc:	6813      	ldr	r3, [r2, #0]
 80014be:	400b      	ands	r3, r1
 80014c0:	429c      	cmp	r4, r3
 80014c2:	d205      	bcs.n	80014d0 <HAL_RCC_ClockConfig+0xb0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014c4:	6813      	ldr	r3, [r2, #0]
 80014c6:	438b      	bics	r3, r1
 80014c8:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014ca:	6813      	ldr	r3, [r2, #0]
 80014cc:	4219      	tst	r1, r3
 80014ce:	d1bc      	bne.n	800144a <HAL_RCC_ClockConfig+0x2a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014d0:	682b      	ldr	r3, [r5, #0]
 80014d2:	075b      	lsls	r3, r3, #29
 80014d4:	d506      	bpl.n	80014e4 <HAL_RCC_ClockConfig+0xc4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80014d6:	4a33      	ldr	r2, [pc, #204]	; (80015a4 <HAL_RCC_ClockConfig+0x184>)
 80014d8:	4934      	ldr	r1, [pc, #208]	; (80015ac <HAL_RCC_ClockConfig+0x18c>)
 80014da:	6853      	ldr	r3, [r2, #4]
 80014dc:	400b      	ands	r3, r1
 80014de:	68e9      	ldr	r1, [r5, #12]
 80014e0:	430b      	orrs	r3, r1
 80014e2:	6053      	str	r3, [r2, #4]
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80014e4:	4b32      	ldr	r3, [pc, #200]	; (80015b0 <HAL_RCC_ClockConfig+0x190>)
 80014e6:	466a      	mov	r2, sp
 80014e8:	0018      	movs	r0, r3
 80014ea:	c870      	ldmia	r0!, {r4, r5, r6}
 80014ec:	c270      	stmia	r2!, {r4, r5, r6}
 80014ee:	6800      	ldr	r0, [r0, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80014f0:	3310      	adds	r3, #16
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80014f2:	6010      	str	r0, [r2, #0]
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80014f4:	aa04      	add	r2, sp, #16
 80014f6:	0010      	movs	r0, r2
 80014f8:	cb70      	ldmia	r3!, {r4, r5, r6}
 80014fa:	c070      	stmia	r0!, {r4, r5, r6}
 80014fc:	681b      	ldr	r3, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80014fe:	4d29      	ldr	r5, [pc, #164]	; (80015a4 <HAL_RCC_ClockConfig+0x184>)
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001500:	6003      	str	r3, [r0, #0]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001502:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8001504:	6868      	ldr	r0, [r5, #4]
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001506:	4669      	mov	r1, sp
  switch (tmpreg & RCC_CFGR_SWS)
 8001508:	4003      	ands	r3, r0
 800150a:	2b08      	cmp	r3, #8
 800150c:	d10b      	bne.n	8001526 <HAL_RCC_ClockConfig+0x106>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800150e:	3307      	adds	r3, #7
 8001510:	0c84      	lsrs	r4, r0, #18
 8001512:	401c      	ands	r4, r3
 8001514:	5d0c      	ldrb	r4, [r1, r4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001516:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8001518:	400b      	ands	r3, r1
 800151a:	5cd1      	ldrb	r1, [r2, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800151c:	03c3      	lsls	r3, r0, #15
 800151e:	d439      	bmi.n	8001594 <HAL_RCC_ClockConfig+0x174>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8001520:	4824      	ldr	r0, [pc, #144]	; (80015b4 <HAL_RCC_ClockConfig+0x194>)
 8001522:	4360      	muls	r0, r4
 8001524:	e000      	b.n	8001528 <HAL_RCC_ClockConfig+0x108>
      sysclockfreq = HSE_VALUE;
 8001526:	4824      	ldr	r0, [pc, #144]	; (80015b8 <HAL_RCC_ClockConfig+0x198>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001528:	4b1e      	ldr	r3, [pc, #120]	; (80015a4 <HAL_RCC_ClockConfig+0x184>)
 800152a:	4a24      	ldr	r2, [pc, #144]	; (80015bc <HAL_RCC_ClockConfig+0x19c>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	061b      	lsls	r3, r3, #24
 8001530:	0f1b      	lsrs	r3, r3, #28
 8001532:	5cd3      	ldrb	r3, [r2, r3]
 8001534:	40d8      	lsrs	r0, r3
 8001536:	4b22      	ldr	r3, [pc, #136]	; (80015c0 <HAL_RCC_ClockConfig+0x1a0>)
 8001538:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800153a:	2000      	movs	r0, #0
 800153c:	f7fe ff5a 	bl	80003f4 <HAL_InitTick>
  return HAL_OK;
 8001540:	2000      	movs	r0, #0
 8001542:	e783      	b.n	800144c <HAL_RCC_ClockConfig+0x2c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001544:	019b      	lsls	r3, r3, #6
 8001546:	d49b      	bmi.n	8001480 <HAL_RCC_ClockConfig+0x60>
 8001548:	e77f      	b.n	800144a <HAL_RCC_ClockConfig+0x2a>
          return HAL_TIMEOUT;
 800154a:	2003      	movs	r0, #3
 800154c:	e77e      	b.n	800144c <HAL_RCC_ClockConfig+0x2c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800154e:	039b      	lsls	r3, r3, #14
 8001550:	d496      	bmi.n	8001480 <HAL_RCC_ClockConfig+0x60>
 8001552:	e77a      	b.n	800144a <HAL_RCC_ClockConfig+0x2a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001554:	330b      	adds	r3, #11
 8001556:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001558:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <HAL_RCC_ClockConfig+0x188>)
 800155a:	4699      	mov	r9, r3
 800155c:	e004      	b.n	8001568 <HAL_RCC_ClockConfig+0x148>
 800155e:	f7fe ff73 	bl	8000448 <HAL_GetTick>
 8001562:	1bc0      	subs	r0, r0, r7
 8001564:	4548      	cmp	r0, r9
 8001566:	d8f0      	bhi.n	800154a <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001568:	4642      	mov	r2, r8
 800156a:	6873      	ldr	r3, [r6, #4]
 800156c:	4013      	ands	r3, r2
 800156e:	2b04      	cmp	r3, #4
 8001570:	d1f5      	bne.n	800155e <HAL_RCC_ClockConfig+0x13e>
 8001572:	e7a1      	b.n	80014b8 <HAL_RCC_ClockConfig+0x98>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001574:	330a      	adds	r3, #10
 8001576:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001578:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <HAL_RCC_ClockConfig+0x188>)
 800157a:	4699      	mov	r9, r3
 800157c:	e004      	b.n	8001588 <HAL_RCC_ClockConfig+0x168>
 800157e:	f7fe ff63 	bl	8000448 <HAL_GetTick>
 8001582:	1bc0      	subs	r0, r0, r7
 8001584:	4548      	cmp	r0, r9
 8001586:	d8e0      	bhi.n	800154a <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001588:	4642      	mov	r2, r8
 800158a:	6873      	ldr	r3, [r6, #4]
 800158c:	4013      	ands	r3, r2
 800158e:	2b08      	cmp	r3, #8
 8001590:	d1f5      	bne.n	800157e <HAL_RCC_ClockConfig+0x15e>
 8001592:	e791      	b.n	80014b8 <HAL_RCC_ClockConfig+0x98>
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001594:	4808      	ldr	r0, [pc, #32]	; (80015b8 <HAL_RCC_ClockConfig+0x198>)
 8001596:	f7fe fdb7 	bl	8000108 <__udivsi3>
 800159a:	4360      	muls	r0, r4
 800159c:	e7c4      	b.n	8001528 <HAL_RCC_ClockConfig+0x108>
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	40022000 	.word	0x40022000
 80015a4:	40021000 	.word	0x40021000
 80015a8:	00001388 	.word	0x00001388
 80015ac:	fffff8ff 	.word	0xfffff8ff
 80015b0:	08004b30 	.word	0x08004b30
 80015b4:	003d0900 	.word	0x003d0900
 80015b8:	007a1200 	.word	0x007a1200
 80015bc:	08004b6c 	.word	0x08004b6c
 80015c0:	20000040 	.word	0x20000040

080015c4 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80015c4:	4b01      	ldr	r3, [pc, #4]	; (80015cc <HAL_RCC_GetHCLKFreq+0x8>)
 80015c6:	6818      	ldr	r0, [r3, #0]
}
 80015c8:	4770      	bx	lr
 80015ca:	46c0      	nop			; (mov r8, r8)
 80015cc:	20000040 	.word	0x20000040

080015d0 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80015d0:	b510      	push	{r4, lr}
 80015d2:	1e04      	subs	r4, r0, #0
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80015d4:	d064      	beq.n	80016a0 <HAL_TIM_Base_Init+0xd0>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80015d6:	233d      	movs	r3, #61	; 0x3d
 80015d8:	5cc3      	ldrb	r3, [r0, r3]
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d03d      	beq.n	800165c <HAL_TIM_Base_Init+0x8c>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80015e0:	2202      	movs	r2, #2
 80015e2:	233d      	movs	r3, #61	; 0x3d
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80015e4:	492f      	ldr	r1, [pc, #188]	; (80016a4 <HAL_TIM_Base_Init+0xd4>)
  htim->State= HAL_TIM_STATE_BUSY;
 80015e6:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015e8:	6823      	ldr	r3, [r4, #0]
  tmpcr1 = TIMx->CR1;
 80015ea:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80015ec:	428b      	cmp	r3, r1
 80015ee:	d021      	beq.n	8001634 <HAL_TIM_Base_Init+0x64>
 80015f0:	2180      	movs	r1, #128	; 0x80
 80015f2:	05c9      	lsls	r1, r1, #23
 80015f4:	428b      	cmp	r3, r1
 80015f6:	d036      	beq.n	8001666 <HAL_TIM_Base_Init+0x96>
 80015f8:	492b      	ldr	r1, [pc, #172]	; (80016a8 <HAL_TIM_Base_Init+0xd8>)
 80015fa:	428b      	cmp	r3, r1
 80015fc:	d033      	beq.n	8001666 <HAL_TIM_Base_Init+0x96>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80015fe:	492b      	ldr	r1, [pc, #172]	; (80016ac <HAL_TIM_Base_Init+0xdc>)
 8001600:	428b      	cmp	r3, r1
 8001602:	d048      	beq.n	8001696 <HAL_TIM_Base_Init+0xc6>
 8001604:	492a      	ldr	r1, [pc, #168]	; (80016b0 <HAL_TIM_Base_Init+0xe0>)
 8001606:	428b      	cmp	r3, r1
 8001608:	d018      	beq.n	800163c <HAL_TIM_Base_Init+0x6c>
 800160a:	492a      	ldr	r1, [pc, #168]	; (80016b4 <HAL_TIM_Base_Init+0xe4>)
 800160c:	428b      	cmp	r3, r1
 800160e:	d015      	beq.n	800163c <HAL_TIM_Base_Init+0x6c>
 8001610:	4929      	ldr	r1, [pc, #164]	; (80016b8 <HAL_TIM_Base_Init+0xe8>)
 8001612:	428b      	cmp	r3, r1
 8001614:	d012      	beq.n	800163c <HAL_TIM_Base_Init+0x6c>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001616:	2180      	movs	r1, #128	; 0x80
 8001618:	438a      	bics	r2, r1
 800161a:	69a1      	ldr	r1, [r4, #24]
 800161c:	430a      	orrs	r2, r1

  TIMx->CR1 = tmpcr1;
 800161e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001620:	68e2      	ldr	r2, [r4, #12]
 8001622:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001624:	6862      	ldr	r2, [r4, #4]
 8001626:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001628:	2201      	movs	r2, #1
 800162a:	615a      	str	r2, [r3, #20]
  htim->State= HAL_TIM_STATE_READY;
 800162c:	233d      	movs	r3, #61	; 0x3d
  return HAL_OK;
 800162e:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001630:	54e2      	strb	r2, [r4, r3]
}
 8001632:	bd10      	pop	{r4, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001634:	2170      	movs	r1, #112	; 0x70
 8001636:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 8001638:	68a1      	ldr	r1, [r4, #8]
 800163a:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800163c:	491f      	ldr	r1, [pc, #124]	; (80016bc <HAL_TIM_Base_Init+0xec>)
 800163e:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001640:	6921      	ldr	r1, [r4, #16]
 8001642:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001644:	2180      	movs	r1, #128	; 0x80
 8001646:	438a      	bics	r2, r1
 8001648:	69a1      	ldr	r1, [r4, #24]
 800164a:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 800164c:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800164e:	68e2      	ldr	r2, [r4, #12]
 8001650:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001652:	6862      	ldr	r2, [r4, #4]
 8001654:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8001656:	6962      	ldr	r2, [r4, #20]
 8001658:	631a      	str	r2, [r3, #48]	; 0x30
 800165a:	e7e5      	b.n	8001628 <HAL_TIM_Base_Init+0x58>
    htim->Lock = HAL_UNLOCKED;
 800165c:	223c      	movs	r2, #60	; 0x3c
 800165e:	5483      	strb	r3, [r0, r2]
    HAL_TIM_Base_MspInit(htim);
 8001660:	f003 f8f2 	bl	8004848 <HAL_TIM_Base_MspInit>
 8001664:	e7bc      	b.n	80015e0 <HAL_TIM_Base_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001666:	2170      	movs	r1, #112	; 0x70
 8001668:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 800166a:	68a1      	ldr	r1, [r4, #8]
 800166c:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800166e:	4913      	ldr	r1, [pc, #76]	; (80016bc <HAL_TIM_Base_Init+0xec>)
 8001670:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001672:	6921      	ldr	r1, [r4, #16]
 8001674:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001676:	2180      	movs	r1, #128	; 0x80
 8001678:	438a      	bics	r2, r1
 800167a:	69a1      	ldr	r1, [r4, #24]
 800167c:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 800167e:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001680:	68e2      	ldr	r2, [r4, #12]
 8001682:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001684:	6862      	ldr	r2, [r4, #4]
 8001686:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001688:	4a0a      	ldr	r2, [pc, #40]	; (80016b4 <HAL_TIM_Base_Init+0xe4>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d0e3      	beq.n	8001656 <HAL_TIM_Base_Init+0x86>
 800168e:	4a0a      	ldr	r2, [pc, #40]	; (80016b8 <HAL_TIM_Base_Init+0xe8>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d0e0      	beq.n	8001656 <HAL_TIM_Base_Init+0x86>
 8001694:	e7c8      	b.n	8001628 <HAL_TIM_Base_Init+0x58>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001696:	4909      	ldr	r1, [pc, #36]	; (80016bc <HAL_TIM_Base_Init+0xec>)
 8001698:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800169a:	6921      	ldr	r1, [r4, #16]
 800169c:	430a      	orrs	r2, r1
 800169e:	e7ba      	b.n	8001616 <HAL_TIM_Base_Init+0x46>
    return HAL_ERROR;
 80016a0:	2001      	movs	r0, #1
 80016a2:	e7c6      	b.n	8001632 <HAL_TIM_Base_Init+0x62>
 80016a4:	40012c00 	.word	0x40012c00
 80016a8:	40000400 	.word	0x40000400
 80016ac:	40002000 	.word	0x40002000
 80016b0:	40014000 	.word	0x40014000
 80016b4:	40014400 	.word	0x40014400
 80016b8:	40014800 	.word	0x40014800
 80016bc:	fffffcff 	.word	0xfffffcff

080016c0 <HAL_TIM_Base_Start>:
  htim->State= HAL_TIM_STATE_BUSY;
 80016c0:	223d      	movs	r2, #61	; 0x3d
 80016c2:	2302      	movs	r3, #2
  __HAL_TIM_ENABLE(htim);
 80016c4:	2101      	movs	r1, #1
{
 80016c6:	b510      	push	{r4, lr}
  __HAL_TIM_ENABLE(htim);
 80016c8:	6804      	ldr	r4, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80016ca:	5483      	strb	r3, [r0, r2]
  __HAL_TIM_ENABLE(htim);
 80016cc:	6823      	ldr	r3, [r4, #0]
 80016ce:	430b      	orrs	r3, r1
 80016d0:	6023      	str	r3, [r4, #0]
  htim->State= HAL_TIM_STATE_READY;
 80016d2:	5481      	strb	r1, [r0, r2]
}
 80016d4:	2000      	movs	r0, #0
 80016d6:	bd10      	pop	{r4, pc}

080016d8 <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80016d8:	6803      	ldr	r3, [r0, #0]
 80016da:	2001      	movs	r0, #1
 80016dc:	68d9      	ldr	r1, [r3, #12]
 80016de:	4301      	orrs	r1, r0
 80016e0:	60d9      	str	r1, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	4302      	orrs	r2, r0
 80016e6:	601a      	str	r2, [r3, #0]
}
 80016e8:	2000      	movs	r0, #0
 80016ea:	4770      	bx	lr

080016ec <HAL_TIM_OC_Start_IT>:
 80016ec:	2904      	cmp	r1, #4
 80016ee:	d023      	beq.n	8001738 <HAL_TIM_OC_Start_IT+0x4c>
 80016f0:	d92d      	bls.n	800174e <HAL_TIM_OC_Start_IT+0x62>
 80016f2:	2908      	cmp	r1, #8
 80016f4:	d020      	beq.n	8001738 <HAL_TIM_OC_Start_IT+0x4c>
 80016f6:	290c      	cmp	r1, #12
 80016f8:	d131      	bne.n	800175e <HAL_TIM_OC_Start_IT+0x72>
 80016fa:	6803      	ldr	r3, [r0, #0]
 80016fc:	2010      	movs	r0, #16
 80016fe:	68da      	ldr	r2, [r3, #12]
 8001700:	4302      	orrs	r2, r0
 8001702:	60da      	str	r2, [r3, #12]
 8001704:	2201      	movs	r2, #1
 8001706:	408a      	lsls	r2, r1
 8001708:	6a19      	ldr	r1, [r3, #32]
 800170a:	4391      	bics	r1, r2
 800170c:	6219      	str	r1, [r3, #32]
 800170e:	6a19      	ldr	r1, [r3, #32]
 8001710:	430a      	orrs	r2, r1
 8001712:	621a      	str	r2, [r3, #32]
 8001714:	4a13      	ldr	r2, [pc, #76]	; (8001764 <HAL_TIM_OC_Start_IT+0x78>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d013      	beq.n	8001742 <HAL_TIM_OC_Start_IT+0x56>
 800171a:	4a13      	ldr	r2, [pc, #76]	; (8001768 <HAL_TIM_OC_Start_IT+0x7c>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d010      	beq.n	8001742 <HAL_TIM_OC_Start_IT+0x56>
 8001720:	4a12      	ldr	r2, [pc, #72]	; (800176c <HAL_TIM_OC_Start_IT+0x80>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d00d      	beq.n	8001742 <HAL_TIM_OC_Start_IT+0x56>
 8001726:	4a12      	ldr	r2, [pc, #72]	; (8001770 <HAL_TIM_OC_Start_IT+0x84>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d00a      	beq.n	8001742 <HAL_TIM_OC_Start_IT+0x56>
 800172c:	2101      	movs	r1, #1
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	2000      	movs	r0, #0
 8001732:	430a      	orrs	r2, r1
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	4770      	bx	lr
 8001738:	6803      	ldr	r3, [r0, #0]
 800173a:	68da      	ldr	r2, [r3, #12]
 800173c:	430a      	orrs	r2, r1
 800173e:	60da      	str	r2, [r3, #12]
 8001740:	e7e0      	b.n	8001704 <HAL_TIM_OC_Start_IT+0x18>
 8001742:	2280      	movs	r2, #128	; 0x80
 8001744:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001746:	0212      	lsls	r2, r2, #8
 8001748:	430a      	orrs	r2, r1
 800174a:	645a      	str	r2, [r3, #68]	; 0x44
 800174c:	e7ee      	b.n	800172c <HAL_TIM_OC_Start_IT+0x40>
 800174e:	2900      	cmp	r1, #0
 8001750:	d105      	bne.n	800175e <HAL_TIM_OC_Start_IT+0x72>
 8001752:	6803      	ldr	r3, [r0, #0]
 8001754:	2002      	movs	r0, #2
 8001756:	68da      	ldr	r2, [r3, #12]
 8001758:	4302      	orrs	r2, r0
 800175a:	60da      	str	r2, [r3, #12]
 800175c:	e7d2      	b.n	8001704 <HAL_TIM_OC_Start_IT+0x18>
 800175e:	6803      	ldr	r3, [r0, #0]
 8001760:	e7d0      	b.n	8001704 <HAL_TIM_OC_Start_IT+0x18>
 8001762:	46c0      	nop			; (mov r8, r8)
 8001764:	40012c00 	.word	0x40012c00
 8001768:	40014000 	.word	0x40014000
 800176c:	40014400 	.word	0x40014400
 8001770:	40014800 	.word	0x40014800

08001774 <HAL_TIM_PWM_MspInit>:
 8001774:	4770      	bx	lr
 8001776:	46c0      	nop			; (mov r8, r8)

08001778 <HAL_TIM_PWM_Init>:
{
 8001778:	b510      	push	{r4, lr}
 800177a:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 800177c:	d064      	beq.n	8001848 <HAL_TIM_PWM_Init+0xd0>
  if(htim->State == HAL_TIM_STATE_RESET)
 800177e:	233d      	movs	r3, #61	; 0x3d
 8001780:	5cc3      	ldrb	r3, [r0, r3]
 8001782:	b2db      	uxtb	r3, r3
 8001784:	2b00      	cmp	r3, #0
 8001786:	d03d      	beq.n	8001804 <HAL_TIM_PWM_Init+0x8c>
  htim->State= HAL_TIM_STATE_BUSY;
 8001788:	2202      	movs	r2, #2
 800178a:	233d      	movs	r3, #61	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800178c:	492f      	ldr	r1, [pc, #188]	; (800184c <HAL_TIM_PWM_Init+0xd4>)
  htim->State= HAL_TIM_STATE_BUSY;
 800178e:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001790:	6823      	ldr	r3, [r4, #0]
  tmpcr1 = TIMx->CR1;
 8001792:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001794:	428b      	cmp	r3, r1
 8001796:	d021      	beq.n	80017dc <HAL_TIM_PWM_Init+0x64>
 8001798:	2180      	movs	r1, #128	; 0x80
 800179a:	05c9      	lsls	r1, r1, #23
 800179c:	428b      	cmp	r3, r1
 800179e:	d036      	beq.n	800180e <HAL_TIM_PWM_Init+0x96>
 80017a0:	492b      	ldr	r1, [pc, #172]	; (8001850 <HAL_TIM_PWM_Init+0xd8>)
 80017a2:	428b      	cmp	r3, r1
 80017a4:	d033      	beq.n	800180e <HAL_TIM_PWM_Init+0x96>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80017a6:	492b      	ldr	r1, [pc, #172]	; (8001854 <HAL_TIM_PWM_Init+0xdc>)
 80017a8:	428b      	cmp	r3, r1
 80017aa:	d048      	beq.n	800183e <HAL_TIM_PWM_Init+0xc6>
 80017ac:	492a      	ldr	r1, [pc, #168]	; (8001858 <HAL_TIM_PWM_Init+0xe0>)
 80017ae:	428b      	cmp	r3, r1
 80017b0:	d018      	beq.n	80017e4 <HAL_TIM_PWM_Init+0x6c>
 80017b2:	492a      	ldr	r1, [pc, #168]	; (800185c <HAL_TIM_PWM_Init+0xe4>)
 80017b4:	428b      	cmp	r3, r1
 80017b6:	d015      	beq.n	80017e4 <HAL_TIM_PWM_Init+0x6c>
 80017b8:	4929      	ldr	r1, [pc, #164]	; (8001860 <HAL_TIM_PWM_Init+0xe8>)
 80017ba:	428b      	cmp	r3, r1
 80017bc:	d012      	beq.n	80017e4 <HAL_TIM_PWM_Init+0x6c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017be:	2180      	movs	r1, #128	; 0x80
 80017c0:	438a      	bics	r2, r1
 80017c2:	69a1      	ldr	r1, [r4, #24]
 80017c4:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 80017c6:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017c8:	68e2      	ldr	r2, [r4, #12]
 80017ca:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80017cc:	6862      	ldr	r2, [r4, #4]
 80017ce:	629a      	str	r2, [r3, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80017d0:	2201      	movs	r2, #1
 80017d2:	615a      	str	r2, [r3, #20]
  htim->State= HAL_TIM_STATE_READY;
 80017d4:	233d      	movs	r3, #61	; 0x3d
  return HAL_OK;
 80017d6:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80017d8:	54e2      	strb	r2, [r4, r3]
}
 80017da:	bd10      	pop	{r4, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017dc:	2170      	movs	r1, #112	; 0x70
 80017de:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 80017e0:	68a1      	ldr	r1, [r4, #8]
 80017e2:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80017e4:	491f      	ldr	r1, [pc, #124]	; (8001864 <HAL_TIM_PWM_Init+0xec>)
 80017e6:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017e8:	6921      	ldr	r1, [r4, #16]
 80017ea:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017ec:	2180      	movs	r1, #128	; 0x80
 80017ee:	438a      	bics	r2, r1
 80017f0:	69a1      	ldr	r1, [r4, #24]
 80017f2:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 80017f4:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017f6:	68e2      	ldr	r2, [r4, #12]
 80017f8:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80017fa:	6862      	ldr	r2, [r4, #4]
 80017fc:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80017fe:	6962      	ldr	r2, [r4, #20]
 8001800:	631a      	str	r2, [r3, #48]	; 0x30
 8001802:	e7e5      	b.n	80017d0 <HAL_TIM_PWM_Init+0x58>
    htim->Lock = HAL_UNLOCKED;
 8001804:	223c      	movs	r2, #60	; 0x3c
 8001806:	5483      	strb	r3, [r0, r2]
    HAL_TIM_PWM_MspInit(htim);
 8001808:	f7ff ffb4 	bl	8001774 <HAL_TIM_PWM_MspInit>
 800180c:	e7bc      	b.n	8001788 <HAL_TIM_PWM_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800180e:	2170      	movs	r1, #112	; 0x70
 8001810:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 8001812:	68a1      	ldr	r1, [r4, #8]
 8001814:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8001816:	4913      	ldr	r1, [pc, #76]	; (8001864 <HAL_TIM_PWM_Init+0xec>)
 8001818:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800181a:	6921      	ldr	r1, [r4, #16]
 800181c:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800181e:	2180      	movs	r1, #128	; 0x80
 8001820:	438a      	bics	r2, r1
 8001822:	69a1      	ldr	r1, [r4, #24]
 8001824:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8001826:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001828:	68e2      	ldr	r2, [r4, #12]
 800182a:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800182c:	6862      	ldr	r2, [r4, #4]
 800182e:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001830:	4a0a      	ldr	r2, [pc, #40]	; (800185c <HAL_TIM_PWM_Init+0xe4>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d0e3      	beq.n	80017fe <HAL_TIM_PWM_Init+0x86>
 8001836:	4a0a      	ldr	r2, [pc, #40]	; (8001860 <HAL_TIM_PWM_Init+0xe8>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d0e0      	beq.n	80017fe <HAL_TIM_PWM_Init+0x86>
 800183c:	e7c8      	b.n	80017d0 <HAL_TIM_PWM_Init+0x58>
    tmpcr1 &= ~TIM_CR1_CKD;
 800183e:	4909      	ldr	r1, [pc, #36]	; (8001864 <HAL_TIM_PWM_Init+0xec>)
 8001840:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001842:	6921      	ldr	r1, [r4, #16]
 8001844:	430a      	orrs	r2, r1
 8001846:	e7ba      	b.n	80017be <HAL_TIM_PWM_Init+0x46>
    return HAL_ERROR;
 8001848:	2001      	movs	r0, #1
 800184a:	e7c6      	b.n	80017da <HAL_TIM_PWM_Init+0x62>
 800184c:	40012c00 	.word	0x40012c00
 8001850:	40000400 	.word	0x40000400
 8001854:	40002000 	.word	0x40002000
 8001858:	40014000 	.word	0x40014000
 800185c:	40014400 	.word	0x40014400
 8001860:	40014800 	.word	0x40014800
 8001864:	fffffcff 	.word	0xfffffcff

08001868 <HAL_TIM_PWM_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8001868:	2201      	movs	r2, #1
 800186a:	408a      	lsls	r2, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800186c:	6803      	ldr	r3, [r0, #0]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800186e:	6a19      	ldr	r1, [r3, #32]
 8001870:	4391      	bics	r1, r2
 8001872:	6219      	str	r1, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001874:	6a19      	ldr	r1, [r3, #32]
 8001876:	430a      	orrs	r2, r1
 8001878:	621a      	str	r2, [r3, #32]
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800187a:	4a0c      	ldr	r2, [pc, #48]	; (80018ac <HAL_TIM_PWM_Start+0x44>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d00e      	beq.n	800189e <HAL_TIM_PWM_Start+0x36>
 8001880:	4a0b      	ldr	r2, [pc, #44]	; (80018b0 <HAL_TIM_PWM_Start+0x48>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d00b      	beq.n	800189e <HAL_TIM_PWM_Start+0x36>
 8001886:	4a0b      	ldr	r2, [pc, #44]	; (80018b4 <HAL_TIM_PWM_Start+0x4c>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d008      	beq.n	800189e <HAL_TIM_PWM_Start+0x36>
 800188c:	4a0a      	ldr	r2, [pc, #40]	; (80018b8 <HAL_TIM_PWM_Start+0x50>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d005      	beq.n	800189e <HAL_TIM_PWM_Start+0x36>
  __HAL_TIM_ENABLE(htim);
 8001892:	2101      	movs	r1, #1
 8001894:	681a      	ldr	r2, [r3, #0]
}
 8001896:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8001898:	430a      	orrs	r2, r1
 800189a:	601a      	str	r2, [r3, #0]
}
 800189c:	4770      	bx	lr
    __HAL_TIM_MOE_ENABLE(htim);
 800189e:	2280      	movs	r2, #128	; 0x80
 80018a0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80018a2:	0212      	lsls	r2, r2, #8
 80018a4:	430a      	orrs	r2, r1
 80018a6:	645a      	str	r2, [r3, #68]	; 0x44
 80018a8:	e7f3      	b.n	8001892 <HAL_TIM_PWM_Start+0x2a>
 80018aa:	46c0      	nop			; (mov r8, r8)
 80018ac:	40012c00 	.word	0x40012c00
 80018b0:	40014000 	.word	0x40014000
 80018b4:	40014400 	.word	0x40014400
 80018b8:	40014800 	.word	0x40014800

080018bc <HAL_TIM_IC_MspInit>:
 80018bc:	4770      	bx	lr
 80018be:	46c0      	nop			; (mov r8, r8)

080018c0 <HAL_TIM_IC_Init>:
{
 80018c0:	b510      	push	{r4, lr}
 80018c2:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 80018c4:	d064      	beq.n	8001990 <HAL_TIM_IC_Init+0xd0>
  if(htim->State == HAL_TIM_STATE_RESET)
 80018c6:	233d      	movs	r3, #61	; 0x3d
 80018c8:	5cc3      	ldrb	r3, [r0, r3]
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d03d      	beq.n	800194c <HAL_TIM_IC_Init+0x8c>
  htim->State= HAL_TIM_STATE_BUSY;
 80018d0:	2202      	movs	r2, #2
 80018d2:	233d      	movs	r3, #61	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018d4:	492f      	ldr	r1, [pc, #188]	; (8001994 <HAL_TIM_IC_Init+0xd4>)
  htim->State= HAL_TIM_STATE_BUSY;
 80018d6:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018d8:	6823      	ldr	r3, [r4, #0]
  tmpcr1 = TIMx->CR1;
 80018da:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018dc:	428b      	cmp	r3, r1
 80018de:	d021      	beq.n	8001924 <HAL_TIM_IC_Init+0x64>
 80018e0:	2180      	movs	r1, #128	; 0x80
 80018e2:	05c9      	lsls	r1, r1, #23
 80018e4:	428b      	cmp	r3, r1
 80018e6:	d036      	beq.n	8001956 <HAL_TIM_IC_Init+0x96>
 80018e8:	492b      	ldr	r1, [pc, #172]	; (8001998 <HAL_TIM_IC_Init+0xd8>)
 80018ea:	428b      	cmp	r3, r1
 80018ec:	d033      	beq.n	8001956 <HAL_TIM_IC_Init+0x96>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80018ee:	492b      	ldr	r1, [pc, #172]	; (800199c <HAL_TIM_IC_Init+0xdc>)
 80018f0:	428b      	cmp	r3, r1
 80018f2:	d048      	beq.n	8001986 <HAL_TIM_IC_Init+0xc6>
 80018f4:	492a      	ldr	r1, [pc, #168]	; (80019a0 <HAL_TIM_IC_Init+0xe0>)
 80018f6:	428b      	cmp	r3, r1
 80018f8:	d018      	beq.n	800192c <HAL_TIM_IC_Init+0x6c>
 80018fa:	492a      	ldr	r1, [pc, #168]	; (80019a4 <HAL_TIM_IC_Init+0xe4>)
 80018fc:	428b      	cmp	r3, r1
 80018fe:	d015      	beq.n	800192c <HAL_TIM_IC_Init+0x6c>
 8001900:	4929      	ldr	r1, [pc, #164]	; (80019a8 <HAL_TIM_IC_Init+0xe8>)
 8001902:	428b      	cmp	r3, r1
 8001904:	d012      	beq.n	800192c <HAL_TIM_IC_Init+0x6c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001906:	2180      	movs	r1, #128	; 0x80
 8001908:	438a      	bics	r2, r1
 800190a:	69a1      	ldr	r1, [r4, #24]
 800190c:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 800190e:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001910:	68e2      	ldr	r2, [r4, #12]
 8001912:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001914:	6862      	ldr	r2, [r4, #4]
 8001916:	629a      	str	r2, [r3, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8001918:	2201      	movs	r2, #1
 800191a:	615a      	str	r2, [r3, #20]
  htim->State= HAL_TIM_STATE_READY;
 800191c:	233d      	movs	r3, #61	; 0x3d
  return HAL_OK;
 800191e:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001920:	54e2      	strb	r2, [r4, r3]
}
 8001922:	bd10      	pop	{r4, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001924:	2170      	movs	r1, #112	; 0x70
 8001926:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 8001928:	68a1      	ldr	r1, [r4, #8]
 800192a:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800192c:	491f      	ldr	r1, [pc, #124]	; (80019ac <HAL_TIM_IC_Init+0xec>)
 800192e:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001930:	6921      	ldr	r1, [r4, #16]
 8001932:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001934:	2180      	movs	r1, #128	; 0x80
 8001936:	438a      	bics	r2, r1
 8001938:	69a1      	ldr	r1, [r4, #24]
 800193a:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 800193c:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800193e:	68e2      	ldr	r2, [r4, #12]
 8001940:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001942:	6862      	ldr	r2, [r4, #4]
 8001944:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8001946:	6962      	ldr	r2, [r4, #20]
 8001948:	631a      	str	r2, [r3, #48]	; 0x30
 800194a:	e7e5      	b.n	8001918 <HAL_TIM_IC_Init+0x58>
    htim->Lock = HAL_UNLOCKED;
 800194c:	223c      	movs	r2, #60	; 0x3c
 800194e:	5483      	strb	r3, [r0, r2]
    HAL_TIM_IC_MspInit(htim);
 8001950:	f7ff ffb4 	bl	80018bc <HAL_TIM_IC_MspInit>
 8001954:	e7bc      	b.n	80018d0 <HAL_TIM_IC_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001956:	2170      	movs	r1, #112	; 0x70
 8001958:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 800195a:	68a1      	ldr	r1, [r4, #8]
 800195c:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800195e:	4913      	ldr	r1, [pc, #76]	; (80019ac <HAL_TIM_IC_Init+0xec>)
 8001960:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001962:	6921      	ldr	r1, [r4, #16]
 8001964:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001966:	2180      	movs	r1, #128	; 0x80
 8001968:	438a      	bics	r2, r1
 800196a:	69a1      	ldr	r1, [r4, #24]
 800196c:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 800196e:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001970:	68e2      	ldr	r2, [r4, #12]
 8001972:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001974:	6862      	ldr	r2, [r4, #4]
 8001976:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001978:	4a0a      	ldr	r2, [pc, #40]	; (80019a4 <HAL_TIM_IC_Init+0xe4>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d0e3      	beq.n	8001946 <HAL_TIM_IC_Init+0x86>
 800197e:	4a0a      	ldr	r2, [pc, #40]	; (80019a8 <HAL_TIM_IC_Init+0xe8>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d0e0      	beq.n	8001946 <HAL_TIM_IC_Init+0x86>
 8001984:	e7c8      	b.n	8001918 <HAL_TIM_IC_Init+0x58>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001986:	4909      	ldr	r1, [pc, #36]	; (80019ac <HAL_TIM_IC_Init+0xec>)
 8001988:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800198a:	6921      	ldr	r1, [r4, #16]
 800198c:	430a      	orrs	r2, r1
 800198e:	e7ba      	b.n	8001906 <HAL_TIM_IC_Init+0x46>
    return HAL_ERROR;
 8001990:	2001      	movs	r0, #1
 8001992:	e7c6      	b.n	8001922 <HAL_TIM_IC_Init+0x62>
 8001994:	40012c00 	.word	0x40012c00
 8001998:	40000400 	.word	0x40000400
 800199c:	40002000 	.word	0x40002000
 80019a0:	40014000 	.word	0x40014000
 80019a4:	40014400 	.word	0x40014400
 80019a8:	40014800 	.word	0x40014800
 80019ac:	fffffcff 	.word	0xfffffcff

080019b0 <HAL_TIM_IC_Start_DMA>:
{
 80019b0:	b570      	push	{r4, r5, r6, lr}
 80019b2:	000d      	movs	r5, r1
  if((htim->State == HAL_TIM_STATE_BUSY))
 80019b4:	213d      	movs	r1, #61	; 0x3d
 80019b6:	5c46      	ldrb	r6, [r0, r1]
{
 80019b8:	0004      	movs	r4, r0
     return HAL_BUSY;
 80019ba:	2002      	movs	r0, #2
  if((htim->State == HAL_TIM_STATE_BUSY))
 80019bc:	2e02      	cmp	r6, #2
 80019be:	d026      	beq.n	8001a0e <HAL_TIM_IC_Start_DMA+0x5e>
  else if((htim->State == HAL_TIM_STATE_READY))
 80019c0:	5c61      	ldrb	r1, [r4, r1]
 80019c2:	2901      	cmp	r1, #1
 80019c4:	d024      	beq.n	8001a10 <HAL_TIM_IC_Start_DMA+0x60>
  switch (Channel)
 80019c6:	2d04      	cmp	r5, #4
 80019c8:	d03a      	beq.n	8001a40 <HAL_TIM_IC_Start_DMA+0x90>
 80019ca:	2d04      	cmp	r5, #4
 80019cc:	d948      	bls.n	8001a60 <HAL_TIM_IC_Start_DMA+0xb0>
 80019ce:	2d08      	cmp	r5, #8
 80019d0:	d026      	beq.n	8001a20 <HAL_TIM_IC_Start_DMA+0x70>
 80019d2:	2d0c      	cmp	r5, #12
 80019d4:	d156      	bne.n	8001a84 <HAL_TIM_IC_Start_DMA+0xd4>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 80019d6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80019d8:	492d      	ldr	r1, [pc, #180]	; (8001a90 <HAL_TIM_IC_Start_DMA+0xe0>)
 80019da:	6281      	str	r1, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80019dc:	492d      	ldr	r1, [pc, #180]	; (8001a94 <HAL_TIM_IC_Start_DMA+0xe4>)
 80019de:	6301      	str	r1, [r0, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length);
 80019e0:	6821      	ldr	r1, [r4, #0]
 80019e2:	3140      	adds	r1, #64	; 0x40
 80019e4:	f7ff f93c 	bl	8000c60 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80019e8:	2280      	movs	r2, #128	; 0x80
 80019ea:	6823      	ldr	r3, [r4, #0]
 80019ec:	0152      	lsls	r2, r2, #5
 80019ee:	68d9      	ldr	r1, [r3, #12]
 80019f0:	430a      	orrs	r2, r1
 80019f2:	60da      	str	r2, [r3, #12]
  tmp = TIM_CCER_CC1E << Channel;
 80019f4:	2001      	movs	r0, #1
 80019f6:	0002      	movs	r2, r0
 80019f8:	40aa      	lsls	r2, r5
  TIMx->CCER &= ~tmp;
 80019fa:	6a19      	ldr	r1, [r3, #32]
 80019fc:	4391      	bics	r1, r2
 80019fe:	6219      	str	r1, [r3, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001a00:	6a19      	ldr	r1, [r3, #32]
 8001a02:	430a      	orrs	r2, r1
 8001a04:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4302      	orrs	r2, r0
  return HAL_OK;
 8001a0a:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8001a0c:	601a      	str	r2, [r3, #0]
}
 8001a0e:	bd70      	pop	{r4, r5, r6, pc}
    if((pData == 0U ) && (Length > 0U))
 8001a10:	2a00      	cmp	r2, #0
 8001a12:	d039      	beq.n	8001a88 <HAL_TIM_IC_Start_DMA+0xd8>
      htim->State = HAL_TIM_STATE_BUSY;
 8001a14:	2002      	movs	r0, #2
 8001a16:	213d      	movs	r1, #61	; 0x3d
 8001a18:	5460      	strb	r0, [r4, r1]
  switch (Channel)
 8001a1a:	2d04      	cmp	r5, #4
 8001a1c:	d1d5      	bne.n	80019ca <HAL_TIM_IC_Start_DMA+0x1a>
 8001a1e:	e00f      	b.n	8001a40 <HAL_TIM_IC_Start_DMA+0x90>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8001a20:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001a22:	491b      	ldr	r1, [pc, #108]	; (8001a90 <HAL_TIM_IC_Start_DMA+0xe0>)
 8001a24:	6281      	str	r1, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8001a26:	491b      	ldr	r1, [pc, #108]	; (8001a94 <HAL_TIM_IC_Start_DMA+0xe4>)
 8001a28:	6301      	str	r1, [r0, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length);
 8001a2a:	6821      	ldr	r1, [r4, #0]
 8001a2c:	313c      	adds	r1, #60	; 0x3c
 8001a2e:	f7ff f917 	bl	8000c60 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8001a32:	2280      	movs	r2, #128	; 0x80
 8001a34:	6823      	ldr	r3, [r4, #0]
 8001a36:	0112      	lsls	r2, r2, #4
 8001a38:	68d9      	ldr	r1, [r3, #12]
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	60da      	str	r2, [r3, #12]
    break;
 8001a3e:	e7d9      	b.n	80019f4 <HAL_TIM_IC_Start_DMA+0x44>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8001a40:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001a42:	4913      	ldr	r1, [pc, #76]	; (8001a90 <HAL_TIM_IC_Start_DMA+0xe0>)
 8001a44:	6281      	str	r1, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8001a46:	4913      	ldr	r1, [pc, #76]	; (8001a94 <HAL_TIM_IC_Start_DMA+0xe4>)
 8001a48:	6301      	str	r1, [r0, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length);
 8001a4a:	6821      	ldr	r1, [r4, #0]
 8001a4c:	3138      	adds	r1, #56	; 0x38
 8001a4e:	f7ff f907 	bl	8000c60 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8001a52:	2280      	movs	r2, #128	; 0x80
 8001a54:	6823      	ldr	r3, [r4, #0]
 8001a56:	00d2      	lsls	r2, r2, #3
 8001a58:	68d9      	ldr	r1, [r3, #12]
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	60da      	str	r2, [r3, #12]
    break;
 8001a5e:	e7c9      	b.n	80019f4 <HAL_TIM_IC_Start_DMA+0x44>
  switch (Channel)
 8001a60:	2d00      	cmp	r5, #0
 8001a62:	d10f      	bne.n	8001a84 <HAL_TIM_IC_Start_DMA+0xd4>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8001a64:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001a66:	490a      	ldr	r1, [pc, #40]	; (8001a90 <HAL_TIM_IC_Start_DMA+0xe0>)
 8001a68:	6281      	str	r1, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8001a6a:	490a      	ldr	r1, [pc, #40]	; (8001a94 <HAL_TIM_IC_Start_DMA+0xe4>)
 8001a6c:	6301      	str	r1, [r0, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length);
 8001a6e:	6821      	ldr	r1, [r4, #0]
 8001a70:	3134      	adds	r1, #52	; 0x34
 8001a72:	f7ff f8f5 	bl	8000c60 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8001a76:	2280      	movs	r2, #128	; 0x80
 8001a78:	6823      	ldr	r3, [r4, #0]
 8001a7a:	0092      	lsls	r2, r2, #2
 8001a7c:	68d9      	ldr	r1, [r3, #12]
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	60da      	str	r2, [r3, #12]
    break;
 8001a82:	e7b7      	b.n	80019f4 <HAL_TIM_IC_Start_DMA+0x44>
 8001a84:	6823      	ldr	r3, [r4, #0]
 8001a86:	e7b5      	b.n	80019f4 <HAL_TIM_IC_Start_DMA+0x44>
      return HAL_ERROR;
 8001a88:	3801      	subs	r0, #1
    if((pData == 0U ) && (Length > 0U))
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d0c2      	beq.n	8001a14 <HAL_TIM_IC_Start_DMA+0x64>
 8001a8e:	e7be      	b.n	8001a0e <HAL_TIM_IC_Start_DMA+0x5e>
 8001a90:	08002051 	.word	0x08002051
 8001a94:	080021f5 	.word	0x080021f5

08001a98 <HAL_TIM_IC_ConfigChannel>:
{
 8001a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a9a:	46ce      	mov	lr, r9
 8001a9c:	4647      	mov	r7, r8
  __HAL_LOCK(htim);
 8001a9e:	243c      	movs	r4, #60	; 0x3c
{
 8001aa0:	b580      	push	{r7, lr}
  __HAL_LOCK(htim);
 8001aa2:	5d05      	ldrb	r5, [r0, r4]
{
 8001aa4:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8001aa6:	2002      	movs	r0, #2
 8001aa8:	2d01      	cmp	r5, #1
 8001aaa:	d038      	beq.n	8001b1e <HAL_TIM_IC_ConfigChannel+0x86>
 8001aac:	2501      	movs	r5, #1
 8001aae:	551d      	strb	r5, [r3, r4]
  htim->State = HAL_TIM_STATE_BUSY;
 8001ab0:	3401      	adds	r4, #1
 8001ab2:	5518      	strb	r0, [r3, r4]
  if (Channel == TIM_CHANNEL_1)
 8001ab4:	2a00      	cmp	r2, #0
 8001ab6:	d036      	beq.n	8001b26 <HAL_TIM_IC_ConfigChannel+0x8e>
  else if (Channel == TIM_CHANNEL_2)
 8001ab8:	2a04      	cmp	r2, #4
 8001aba:	d063      	beq.n	8001b84 <HAL_TIM_IC_ConfigChannel+0xec>
  else if (Channel == TIM_CHANNEL_3)
 8001abc:	2a08      	cmp	r2, #8
 8001abe:	d100      	bne.n	8001ac2 <HAL_TIM_IC_ConfigChannel+0x2a>
 8001ac0:	e086      	b.n	8001bd0 <HAL_TIM_IC_ConfigChannel+0x138>
    TIM_TI4_SetConfig(htim->Instance,
 8001ac2:	6808      	ldr	r0, [r1, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	4680      	mov	r8, r0
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001ac8:	6a16      	ldr	r6, [r2, #32]
 8001aca:	4f58      	ldr	r7, [pc, #352]	; (8001c2c <HAL_TIM_IC_ConfigChannel+0x194>)
    TIM_TI4_SetConfig(htim->Instance,
 8001acc:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001ace:	403e      	ands	r6, r7
    TIM_TI4_SetConfig(htim->Instance,
 8001ad0:	68cc      	ldr	r4, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001ad2:	6216      	str	r6, [r2, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001ad4:	69d7      	ldr	r7, [r2, #28]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8001ad6:	4856      	ldr	r0, [pc, #344]	; (8001c30 <HAL_TIM_IC_ConfigChannel+0x198>)
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8001ad8:	022d      	lsls	r5, r5, #8
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8001ada:	4007      	ands	r7, r0
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8001adc:	433d      	orrs	r5, r7
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8001ade:	4f55      	ldr	r7, [pc, #340]	; (8001c34 <HAL_TIM_IC_ConfigChannel+0x19c>)
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001ae0:	0724      	lsls	r4, r4, #28
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8001ae2:	403d      	ands	r5, r7
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001ae4:	0c24      	lsrs	r4, r4, #16
  tmpccer = TIMx->CCER;
 8001ae6:	6a16      	ldr	r6, [r2, #32]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001ae8:	432c      	orrs	r4, r5
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8001aea:	4d53      	ldr	r5, [pc, #332]	; (8001c38 <HAL_TIM_IC_ConfigChannel+0x1a0>)
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001aec:	4640      	mov	r0, r8
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8001aee:	4035      	ands	r5, r6
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001af0:	26a0      	movs	r6, #160	; 0xa0
 8001af2:	0300      	lsls	r0, r0, #12
 8001af4:	0236      	lsls	r6, r6, #8
 8001af6:	4030      	ands	r0, r6
 8001af8:	4328      	orrs	r0, r5
  TIMx->CCMR2 = tmpccmr2;
 8001afa:	61d4      	str	r4, [r2, #28]
  TIMx->CCER = tmpccer ;
 8001afc:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001afe:	69d0      	ldr	r0, [r2, #28]
 8001b00:	4c4e      	ldr	r4, [pc, #312]	; (8001c3c <HAL_TIM_IC_ConfigChannel+0x1a4>)
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001b02:	6889      	ldr	r1, [r1, #8]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001b04:	4020      	ands	r0, r4
 8001b06:	61d0      	str	r0, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001b08:	69d0      	ldr	r0, [r2, #28]
 8001b0a:	0209      	lsls	r1, r1, #8
 8001b0c:	4301      	orrs	r1, r0
 8001b0e:	61d1      	str	r1, [r2, #28]
  htim->State = HAL_TIM_STATE_READY;
 8001b10:	2101      	movs	r1, #1
 8001b12:	223d      	movs	r2, #61	; 0x3d
 8001b14:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(htim);
 8001b16:	2100      	movs	r1, #0
  return HAL_OK;
 8001b18:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8001b1a:	3a01      	subs	r2, #1
 8001b1c:	5499      	strb	r1, [r3, r2]
}
 8001b1e:	bc0c      	pop	{r2, r3}
 8001b20:	4690      	mov	r8, r2
 8001b22:	4699      	mov	r9, r3
 8001b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    TIM_TI1_SetConfig(htim->Instance,
 8001b26:	6848      	ldr	r0, [r1, #4]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	4680      	mov	r8, r0
 8001b2c:	68c8      	ldr	r0, [r1, #12]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001b2e:	4c44      	ldr	r4, [pc, #272]	; (8001c40 <HAL_TIM_IC_ConfigChannel+0x1a8>)
    TIM_TI1_SetConfig(htim->Instance,
 8001b30:	4681      	mov	r9, r0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b32:	6a10      	ldr	r0, [r2, #32]
    TIM_TI1_SetConfig(htim->Instance,
 8001b34:	680f      	ldr	r7, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b36:	43a8      	bics	r0, r5
 8001b38:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001b3a:	6990      	ldr	r0, [r2, #24]
  tmpccer = TIMx->CCER;
 8001b3c:	6a16      	ldr	r6, [r2, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001b3e:	42a2      	cmp	r2, r4
 8001b40:	d06d      	beq.n	8001c1e <HAL_TIM_IC_ConfigChannel+0x186>
 8001b42:	2480      	movs	r4, #128	; 0x80
 8001b44:	05e4      	lsls	r4, r4, #23
 8001b46:	42a2      	cmp	r2, r4
 8001b48:	d069      	beq.n	8001c1e <HAL_TIM_IC_ConfigChannel+0x186>
 8001b4a:	4c3e      	ldr	r4, [pc, #248]	; (8001c44 <HAL_TIM_IC_ConfigChannel+0x1ac>)
 8001b4c:	42a2      	cmp	r2, r4
 8001b4e:	d066      	beq.n	8001c1e <HAL_TIM_IC_ConfigChannel+0x186>
 8001b50:	4c3d      	ldr	r4, [pc, #244]	; (8001c48 <HAL_TIM_IC_ConfigChannel+0x1b0>)
 8001b52:	42a2      	cmp	r2, r4
 8001b54:	d063      	beq.n	8001c1e <HAL_TIM_IC_ConfigChannel+0x186>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8001b56:	4305      	orrs	r5, r0
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001b58:	20f0      	movs	r0, #240	; 0xf0
 8001b5a:	4385      	bics	r5, r0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001b5c:	4648      	mov	r0, r9
 8001b5e:	24ff      	movs	r4, #255	; 0xff
 8001b60:	0100      	lsls	r0, r0, #4
 8001b62:	4004      	ands	r4, r0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001b64:	200a      	movs	r0, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001b66:	4325      	orrs	r5, r4
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001b68:	240c      	movs	r4, #12
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001b6a:	4386      	bics	r6, r0
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001b6c:	4038      	ands	r0, r7
 8001b6e:	4330      	orrs	r0, r6
  TIMx->CCMR1 = tmpccmr1;
 8001b70:	6195      	str	r5, [r2, #24]
  TIMx->CCER = tmpccer;
 8001b72:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001b74:	6990      	ldr	r0, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001b76:	6889      	ldr	r1, [r1, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001b78:	43a0      	bics	r0, r4
 8001b7a:	6190      	str	r0, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001b7c:	6990      	ldr	r0, [r2, #24]
 8001b7e:	4301      	orrs	r1, r0
 8001b80:	6191      	str	r1, [r2, #24]
 8001b82:	e7c5      	b.n	8001b10 <HAL_TIM_IC_ConfigChannel+0x78>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001b84:	2710      	movs	r7, #16
    TIM_TI2_SetConfig(htim->Instance,
 8001b86:	68c8      	ldr	r0, [r1, #12]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	4680      	mov	r8, r0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001b8c:	6a15      	ldr	r5, [r2, #32]
    TIM_TI2_SetConfig(htim->Instance,
 8001b8e:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001b90:	43bd      	bics	r5, r7
    TIM_TI2_SetConfig(htim->Instance,
 8001b92:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001b94:	6215      	str	r5, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001b96:	6997      	ldr	r7, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8001b98:	4825      	ldr	r0, [pc, #148]	; (8001c30 <HAL_TIM_IC_ConfigChannel+0x198>)
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8001b9a:	0224      	lsls	r4, r4, #8
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8001b9c:	4007      	ands	r7, r0
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001b9e:	4640      	mov	r0, r8
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8001ba0:	433c      	orrs	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001ba2:	4f24      	ldr	r7, [pc, #144]	; (8001c34 <HAL_TIM_IC_ConfigChannel+0x19c>)
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001ba4:	0700      	lsls	r0, r0, #28
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001ba6:	403c      	ands	r4, r7
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001ba8:	0c00      	lsrs	r0, r0, #16
 8001baa:	4320      	orrs	r0, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001bac:	24a0      	movs	r4, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8001bae:	6a15      	ldr	r5, [r2, #32]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001bb0:	0136      	lsls	r6, r6, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001bb2:	43a5      	bics	r5, r4
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001bb4:	4034      	ands	r4, r6
 8001bb6:	4325      	orrs	r5, r4
  TIMx->CCMR1 = tmpccmr1 ;
 8001bb8:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 8001bba:	6215      	str	r5, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001bbc:	6990      	ldr	r0, [r2, #24]
 8001bbe:	4c1f      	ldr	r4, [pc, #124]	; (8001c3c <HAL_TIM_IC_ConfigChannel+0x1a4>)
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001bc0:	6889      	ldr	r1, [r1, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001bc2:	4020      	ands	r0, r4
 8001bc4:	6190      	str	r0, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001bc6:	6990      	ldr	r0, [r2, #24]
 8001bc8:	0209      	lsls	r1, r1, #8
 8001bca:	4301      	orrs	r1, r0
 8001bcc:	6191      	str	r1, [r2, #24]
 8001bce:	e79f      	b.n	8001b10 <HAL_TIM_IC_ConfigChannel+0x78>
    TIM_TI3_SetConfig(htim->Instance,
 8001bd0:	6808      	ldr	r0, [r1, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4680      	mov	r8, r0
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8001bd6:	2003      	movs	r0, #3
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001bd8:	6a16      	ldr	r6, [r2, #32]
 8001bda:	4f1c      	ldr	r7, [pc, #112]	; (8001c4c <HAL_TIM_IC_ConfigChannel+0x1b4>)
    TIM_TI3_SetConfig(htim->Instance,
 8001bdc:	68cc      	ldr	r4, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001bde:	403e      	ands	r6, r7
    TIM_TI3_SetConfig(htim->Instance,
 8001be0:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001be2:	6216      	str	r6, [r2, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001be4:	69d7      	ldr	r7, [r2, #28]
  tmpccer = TIMx->CCER;
 8001be6:	6a16      	ldr	r6, [r2, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8001be8:	4387      	bics	r7, r0
  tmpccmr2 |= TIM_ICSelection;
 8001bea:	433d      	orrs	r5, r7
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8001bec:	27f0      	movs	r7, #240	; 0xf0
 8001bee:	43bd      	bics	r5, r7
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8001bf0:	0127      	lsls	r7, r4, #4
 8001bf2:	24ff      	movs	r4, #255	; 0xff
 8001bf4:	403c      	ands	r4, r7
 8001bf6:	432c      	orrs	r4, r5
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8001bf8:	4d15      	ldr	r5, [pc, #84]	; (8001c50 <HAL_TIM_IC_ConfigChannel+0x1b8>)
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001bfa:	4640      	mov	r0, r8
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8001bfc:	4035      	ands	r5, r6
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001bfe:	26a0      	movs	r6, #160	; 0xa0
  TIMx->CCMR2 = tmpccmr2;
 8001c00:	61d4      	str	r4, [r2, #28]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001c02:	240c      	movs	r4, #12
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001c04:	0200      	lsls	r0, r0, #8
 8001c06:	0136      	lsls	r6, r6, #4
 8001c08:	4030      	ands	r0, r6
 8001c0a:	4328      	orrs	r0, r5
  TIMx->CCER = tmpccer;
 8001c0c:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001c0e:	69d0      	ldr	r0, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001c10:	6889      	ldr	r1, [r1, #8]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001c12:	43a0      	bics	r0, r4
 8001c14:	61d0      	str	r0, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001c16:	69d0      	ldr	r0, [r2, #28]
 8001c18:	4301      	orrs	r1, r0
 8001c1a:	61d1      	str	r1, [r2, #28]
 8001c1c:	e778      	b.n	8001b10 <HAL_TIM_IC_ConfigChannel+0x78>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8001c1e:	2503      	movs	r5, #3
 8001c20:	43a8      	bics	r0, r5
 8001c22:	0005      	movs	r5, r0
    tmpccmr1 |= TIM_ICSelection;
 8001c24:	4640      	mov	r0, r8
 8001c26:	4328      	orrs	r0, r5
 8001c28:	0005      	movs	r5, r0
 8001c2a:	e795      	b.n	8001b58 <HAL_TIM_IC_ConfigChannel+0xc0>
 8001c2c:	ffffefff 	.word	0xffffefff
 8001c30:	fffffcff 	.word	0xfffffcff
 8001c34:	ffff0fff 	.word	0xffff0fff
 8001c38:	ffff5fff 	.word	0xffff5fff
 8001c3c:	fffff3ff 	.word	0xfffff3ff
 8001c40:	40012c00 	.word	0x40012c00
 8001c44:	40000400 	.word	0x40000400
 8001c48:	40014000 	.word	0x40014000
 8001c4c:	fffffeff 	.word	0xfffffeff
 8001c50:	fffff5ff 	.word	0xfffff5ff

08001c54 <HAL_TIM_PWM_ConfigChannel>:
{
 8001c54:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8001c56:	243c      	movs	r4, #60	; 0x3c
 8001c58:	5d05      	ldrb	r5, [r0, r4]
{
 8001c5a:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8001c5c:	2002      	movs	r0, #2
 8001c5e:	2d01      	cmp	r5, #1
 8001c60:	d048      	beq.n	8001cf4 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8001c62:	2501      	movs	r5, #1
 8001c64:	551d      	strb	r5, [r3, r4]
  htim->State = HAL_TIM_STATE_BUSY;
 8001c66:	3401      	adds	r4, #1
 8001c68:	5518      	strb	r0, [r3, r4]
  switch (Channel)
 8001c6a:	2a04      	cmp	r2, #4
 8001c6c:	d043      	beq.n	8001cf6 <HAL_TIM_PWM_ConfigChannel+0xa2>
 8001c6e:	d800      	bhi.n	8001c72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001c70:	e0a6      	b.n	8001dc0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001c72:	2a08      	cmp	r2, #8
 8001c74:	d100      	bne.n	8001c78 <HAL_TIM_PWM_ConfigChannel+0x24>
 8001c76:	e074      	b.n	8001d62 <HAL_TIM_PWM_ConfigChannel+0x10e>
 8001c78:	2a0c      	cmp	r2, #12
 8001c7a:	d134      	bne.n	8001ce6 <HAL_TIM_PWM_ConfigChannel+0x92>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001c7c:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001c7e:	4c81      	ldr	r4, [pc, #516]	; (8001e84 <HAL_TIM_PWM_ConfigChannel+0x230>)
 8001c80:	6a10      	ldr	r0, [r2, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001c82:	4d81      	ldr	r5, [pc, #516]	; (8001e88 <HAL_TIM_PWM_ConfigChannel+0x234>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001c84:	4020      	ands	r0, r4
 8001c86:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8001c88:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8001c8a:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8001c8c:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001c8e:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c90:	680d      	ldr	r5, [r1, #0]
 8001c92:	022d      	lsls	r5, r5, #8
 8001c94:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC4P;
 8001c96:	4c7d      	ldr	r4, [pc, #500]	; (8001e8c <HAL_TIM_PWM_ConfigChannel+0x238>)
 8001c98:	4004      	ands	r4, r0
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001c9a:	6888      	ldr	r0, [r1, #8]
 8001c9c:	0300      	lsls	r0, r0, #12
 8001c9e:	4320      	orrs	r0, r4
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001ca0:	4c7b      	ldr	r4, [pc, #492]	; (8001e90 <HAL_TIM_PWM_ConfigChannel+0x23c>)
 8001ca2:	42a2      	cmp	r2, r4
 8001ca4:	d100      	bne.n	8001ca8 <HAL_TIM_PWM_ConfigChannel+0x54>
 8001ca6:	e0ca      	b.n	8001e3e <HAL_TIM_PWM_ConfigChannel+0x1ea>
 8001ca8:	4c7a      	ldr	r4, [pc, #488]	; (8001e94 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8001caa:	42a2      	cmp	r2, r4
 8001cac:	d100      	bne.n	8001cb0 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001cae:	e0c6      	b.n	8001e3e <HAL_TIM_PWM_ConfigChannel+0x1ea>
 8001cb0:	4c79      	ldr	r4, [pc, #484]	; (8001e98 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8001cb2:	42a2      	cmp	r2, r4
 8001cb4:	d100      	bne.n	8001cb8 <HAL_TIM_PWM_ConfigChannel+0x64>
 8001cb6:	e0c2      	b.n	8001e3e <HAL_TIM_PWM_ConfigChannel+0x1ea>
 8001cb8:	4c78      	ldr	r4, [pc, #480]	; (8001e9c <HAL_TIM_PWM_ConfigChannel+0x248>)
 8001cba:	42a2      	cmp	r2, r4
 8001cbc:	d100      	bne.n	8001cc0 <HAL_TIM_PWM_ConfigChannel+0x6c>
 8001cbe:	e0be      	b.n	8001e3e <HAL_TIM_PWM_ConfigChannel+0x1ea>
  TIMx->CCR4 = OC_Config->Pulse;
 8001cc0:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001cc2:	6056      	str	r6, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001cc4:	61d5      	str	r5, [r2, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8001cc6:	6414      	str	r4, [r2, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8001cc8:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001cca:	2080      	movs	r0, #128	; 0x80
 8001ccc:	69d4      	ldr	r4, [r2, #28]
 8001cce:	0100      	lsls	r0, r0, #4
 8001cd0:	4320      	orrs	r0, r4
 8001cd2:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001cd4:	69d0      	ldr	r0, [r2, #28]
 8001cd6:	4c72      	ldr	r4, [pc, #456]	; (8001ea0 <HAL_TIM_PWM_ConfigChannel+0x24c>)
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001cd8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001cda:	4020      	ands	r0, r4
 8001cdc:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001cde:	69d0      	ldr	r0, [r2, #28]
 8001ce0:	0209      	lsls	r1, r1, #8
 8001ce2:	4301      	orrs	r1, r0
 8001ce4:	61d1      	str	r1, [r2, #28]
  htim->State = HAL_TIM_STATE_READY;
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	223d      	movs	r2, #61	; 0x3d
 8001cea:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(htim);
 8001cec:	2100      	movs	r1, #0
  return HAL_OK;
 8001cee:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8001cf0:	3a01      	subs	r2, #1
 8001cf2:	5499      	strb	r1, [r3, r2]
}
 8001cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001cf6:	2410      	movs	r4, #16
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001cf8:	681a      	ldr	r2, [r3, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001cfa:	4d63      	ldr	r5, [pc, #396]	; (8001e88 <HAL_TIM_PWM_ConfigChannel+0x234>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001cfc:	6a10      	ldr	r0, [r2, #32]
 8001cfe:	43a0      	bics	r0, r4
 8001d00:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8001d02:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8001d04:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8001d06:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001d08:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001d0a:	680d      	ldr	r5, [r1, #0]
 8001d0c:	022d      	lsls	r5, r5, #8
 8001d0e:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC2P;
 8001d10:	2420      	movs	r4, #32
 8001d12:	43a0      	bics	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001d14:	688c      	ldr	r4, [r1, #8]
 8001d16:	0124      	lsls	r4, r4, #4
 8001d18:	4320      	orrs	r0, r4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001d1a:	4c5d      	ldr	r4, [pc, #372]	; (8001e90 <HAL_TIM_PWM_ConfigChannel+0x23c>)
 8001d1c:	42a2      	cmp	r2, r4
 8001d1e:	d100      	bne.n	8001d22 <HAL_TIM_PWM_ConfigChannel+0xce>
 8001d20:	e093      	b.n	8001e4a <HAL_TIM_PWM_ConfigChannel+0x1f6>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001d22:	4c5c      	ldr	r4, [pc, #368]	; (8001e94 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8001d24:	42a2      	cmp	r2, r4
 8001d26:	d100      	bne.n	8001d2a <HAL_TIM_PWM_ConfigChannel+0xd6>
 8001d28:	e096      	b.n	8001e58 <HAL_TIM_PWM_ConfigChannel+0x204>
 8001d2a:	4c5b      	ldr	r4, [pc, #364]	; (8001e98 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8001d2c:	42a2      	cmp	r2, r4
 8001d2e:	d100      	bne.n	8001d32 <HAL_TIM_PWM_ConfigChannel+0xde>
 8001d30:	e092      	b.n	8001e58 <HAL_TIM_PWM_ConfigChannel+0x204>
 8001d32:	4c5a      	ldr	r4, [pc, #360]	; (8001e9c <HAL_TIM_PWM_ConfigChannel+0x248>)
 8001d34:	42a2      	cmp	r2, r4
 8001d36:	d100      	bne.n	8001d3a <HAL_TIM_PWM_ConfigChannel+0xe6>
 8001d38:	e08e      	b.n	8001e58 <HAL_TIM_PWM_ConfigChannel+0x204>
  TIMx->CCR2 = OC_Config->Pulse;
 8001d3a:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001d3c:	6056      	str	r6, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001d3e:	6195      	str	r5, [r2, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001d40:	6394      	str	r4, [r2, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001d42:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001d44:	2080      	movs	r0, #128	; 0x80
 8001d46:	6994      	ldr	r4, [r2, #24]
 8001d48:	0100      	lsls	r0, r0, #4
 8001d4a:	4320      	orrs	r0, r4
 8001d4c:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001d4e:	6990      	ldr	r0, [r2, #24]
 8001d50:	4c53      	ldr	r4, [pc, #332]	; (8001ea0 <HAL_TIM_PWM_ConfigChannel+0x24c>)
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001d52:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001d54:	4020      	ands	r0, r4
 8001d56:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001d58:	6990      	ldr	r0, [r2, #24]
 8001d5a:	0209      	lsls	r1, r1, #8
 8001d5c:	4301      	orrs	r1, r0
 8001d5e:	6191      	str	r1, [r2, #24]
    break;
 8001d60:	e7c1      	b.n	8001ce6 <HAL_TIM_PWM_ConfigChannel+0x92>
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001d62:	2673      	movs	r6, #115	; 0x73
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001d64:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001d66:	4c4f      	ldr	r4, [pc, #316]	; (8001ea4 <HAL_TIM_PWM_ConfigChannel+0x250>)
 8001d68:	6a10      	ldr	r0, [r2, #32]
 8001d6a:	4020      	ands	r0, r4
 8001d6c:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8001d6e:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8001d70:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8001d72:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001d74:	43b4      	bics	r4, r6
  tmpccmrx |= OC_Config->OCMode;
 8001d76:	680e      	ldr	r6, [r1, #0]
 8001d78:	4326      	orrs	r6, r4
  tmpccer &= ~TIM_CCER_CC3P;
 8001d7a:	4c4b      	ldr	r4, [pc, #300]	; (8001ea8 <HAL_TIM_PWM_ConfigChannel+0x254>)
 8001d7c:	4020      	ands	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001d7e:	688c      	ldr	r4, [r1, #8]
 8001d80:	0224      	lsls	r4, r4, #8
 8001d82:	4320      	orrs	r0, r4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001d84:	4c42      	ldr	r4, [pc, #264]	; (8001e90 <HAL_TIM_PWM_ConfigChannel+0x23c>)
 8001d86:	42a2      	cmp	r2, r4
 8001d88:	d04a      	beq.n	8001e20 <HAL_TIM_PWM_ConfigChannel+0x1cc>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001d8a:	4c42      	ldr	r4, [pc, #264]	; (8001e94 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8001d8c:	42a2      	cmp	r2, r4
 8001d8e:	d04e      	beq.n	8001e2e <HAL_TIM_PWM_ConfigChannel+0x1da>
 8001d90:	4c41      	ldr	r4, [pc, #260]	; (8001e98 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8001d92:	42a2      	cmp	r2, r4
 8001d94:	d04b      	beq.n	8001e2e <HAL_TIM_PWM_ConfigChannel+0x1da>
 8001d96:	4c41      	ldr	r4, [pc, #260]	; (8001e9c <HAL_TIM_PWM_ConfigChannel+0x248>)
 8001d98:	42a2      	cmp	r2, r4
 8001d9a:	d048      	beq.n	8001e2e <HAL_TIM_PWM_ConfigChannel+0x1da>
  TIMx->CCR3 = OC_Config->Pulse;
 8001d9c:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001d9e:	6055      	str	r5, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001da0:	61d6      	str	r6, [r2, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8001da2:	63d4      	str	r4, [r2, #60]	; 0x3c
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001da4:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 8001da6:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001da8:	69d0      	ldr	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001daa:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001dac:	4320      	orrs	r0, r4
 8001dae:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001db0:	69d0      	ldr	r0, [r2, #28]
 8001db2:	3c04      	subs	r4, #4
 8001db4:	43a0      	bics	r0, r4
 8001db6:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001db8:	69d0      	ldr	r0, [r2, #28]
 8001dba:	4301      	orrs	r1, r0
 8001dbc:	61d1      	str	r1, [r2, #28]
    break;
 8001dbe:	e792      	b.n	8001ce6 <HAL_TIM_PWM_ConfigChannel+0x92>
  switch (Channel)
 8001dc0:	2a00      	cmp	r2, #0
 8001dc2:	d000      	beq.n	8001dc6 <HAL_TIM_PWM_ConfigChannel+0x172>
 8001dc4:	e78f      	b.n	8001ce6 <HAL_TIM_PWM_ConfigChannel+0x92>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001dc6:	681a      	ldr	r2, [r3, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001dc8:	2773      	movs	r7, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001dca:	6a14      	ldr	r4, [r2, #32]
 8001dcc:	43ac      	bics	r4, r5
 8001dce:	6214      	str	r4, [r2, #32]
  tmpccer = TIMx->CCER;
 8001dd0:	6a14      	ldr	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8001dd2:	6856      	ldr	r6, [r2, #4]
  tmpccer &= ~TIM_CCER_CC1P;
 8001dd4:	4384      	bics	r4, r0
 8001dd6:	0020      	movs	r0, r4
  tmpccmrx = TIMx->CCMR1;
 8001dd8:	6995      	ldr	r5, [r2, #24]
  tmpccer |= OC_Config->OCPolarity;
 8001dda:	688c      	ldr	r4, [r1, #8]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001ddc:	43bd      	bics	r5, r7
  tmpccer |= OC_Config->OCPolarity;
 8001dde:	4320      	orrs	r0, r4
  tmpccmrx |= OC_Config->OCMode;
 8001de0:	680f      	ldr	r7, [r1, #0]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001de2:	4c2b      	ldr	r4, [pc, #172]	; (8001e90 <HAL_TIM_PWM_ConfigChannel+0x23c>)
  tmpccmrx |= OC_Config->OCMode;
 8001de4:	433d      	orrs	r5, r7
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001de6:	42a2      	cmp	r2, r4
 8001de8:	d03e      	beq.n	8001e68 <HAL_TIM_PWM_ConfigChannel+0x214>
 8001dea:	4c2a      	ldr	r4, [pc, #168]	; (8001e94 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8001dec:	42a2      	cmp	r2, r4
 8001dee:	d03b      	beq.n	8001e68 <HAL_TIM_PWM_ConfigChannel+0x214>
 8001df0:	4c29      	ldr	r4, [pc, #164]	; (8001e98 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8001df2:	42a2      	cmp	r2, r4
 8001df4:	d038      	beq.n	8001e68 <HAL_TIM_PWM_ConfigChannel+0x214>
 8001df6:	4c29      	ldr	r4, [pc, #164]	; (8001e9c <HAL_TIM_PWM_ConfigChannel+0x248>)
 8001df8:	42a2      	cmp	r2, r4
 8001dfa:	d035      	beq.n	8001e68 <HAL_TIM_PWM_ConfigChannel+0x214>
  TIMx->CCR1 = OC_Config->Pulse;
 8001dfc:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001dfe:	6056      	str	r6, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001e00:	6195      	str	r5, [r2, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8001e02:	6354      	str	r4, [r2, #52]	; 0x34
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001e04:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 8001e06:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001e08:	6990      	ldr	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001e0a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001e0c:	4320      	orrs	r0, r4
 8001e0e:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001e10:	6990      	ldr	r0, [r2, #24]
 8001e12:	3c04      	subs	r4, #4
 8001e14:	43a0      	bics	r0, r4
 8001e16:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001e18:	6990      	ldr	r0, [r2, #24]
 8001e1a:	4301      	orrs	r1, r0
 8001e1c:	6191      	str	r1, [r2, #24]
    break;
 8001e1e:	e762      	b.n	8001ce6 <HAL_TIM_PWM_ConfigChannel+0x92>
    tmpccer &= ~TIM_CCER_CC3NP;
 8001e20:	4c22      	ldr	r4, [pc, #136]	; (8001eac <HAL_TIM_PWM_ConfigChannel+0x258>)
 8001e22:	4004      	ands	r4, r0
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001e24:	68c8      	ldr	r0, [r1, #12]
 8001e26:	0200      	lsls	r0, r0, #8
 8001e28:	4320      	orrs	r0, r4
    tmpccer &= ~TIM_CCER_CC3NE;
 8001e2a:	4c1d      	ldr	r4, [pc, #116]	; (8001ea0 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 8001e2c:	4020      	ands	r0, r4
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001e2e:	4c20      	ldr	r4, [pc, #128]	; (8001eb0 <HAL_TIM_PWM_ConfigChannel+0x25c>)
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001e30:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001e32:	402c      	ands	r4, r5
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001e34:	698d      	ldr	r5, [r1, #24]
 8001e36:	433d      	orrs	r5, r7
 8001e38:	012d      	lsls	r5, r5, #4
 8001e3a:	4325      	orrs	r5, r4
 8001e3c:	e7ae      	b.n	8001d9c <HAL_TIM_PWM_ConfigChannel+0x148>
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001e3e:	4c1d      	ldr	r4, [pc, #116]	; (8001eb4 <HAL_TIM_PWM_ConfigChannel+0x260>)
 8001e40:	4034      	ands	r4, r6
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001e42:	694e      	ldr	r6, [r1, #20]
 8001e44:	01b6      	lsls	r6, r6, #6
 8001e46:	4326      	orrs	r6, r4
 8001e48:	e73a      	b.n	8001cc0 <HAL_TIM_PWM_ConfigChannel+0x6c>
    tmpccer &= ~TIM_CCER_CC2NP;
 8001e4a:	2480      	movs	r4, #128	; 0x80
 8001e4c:	43a0      	bics	r0, r4
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001e4e:	68cc      	ldr	r4, [r1, #12]
 8001e50:	0127      	lsls	r7, r4, #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8001e52:	2440      	movs	r4, #64	; 0x40
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001e54:	4338      	orrs	r0, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 8001e56:	43a0      	bics	r0, r4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001e58:	4c17      	ldr	r4, [pc, #92]	; (8001eb8 <HAL_TIM_PWM_ConfigChannel+0x264>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001e5a:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001e5c:	4034      	ands	r4, r6
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001e5e:	698e      	ldr	r6, [r1, #24]
 8001e60:	433e      	orrs	r6, r7
 8001e62:	00b6      	lsls	r6, r6, #2
 8001e64:	4326      	orrs	r6, r4
 8001e66:	e768      	b.n	8001d3a <HAL_TIM_PWM_ConfigChannel+0xe6>
    tmpccer &= ~TIM_CCER_CC1NP;
 8001e68:	2408      	movs	r4, #8
 8001e6a:	43a0      	bics	r0, r4
    tmpccer |= OC_Config->OCNPolarity;
 8001e6c:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8001e6e:	698f      	ldr	r7, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 8001e70:	4320      	orrs	r0, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 8001e72:	2404      	movs	r4, #4
 8001e74:	43a0      	bics	r0, r4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001e76:	4c11      	ldr	r4, [pc, #68]	; (8001ebc <HAL_TIM_PWM_ConfigChannel+0x268>)
 8001e78:	4026      	ands	r6, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001e7a:	694c      	ldr	r4, [r1, #20]
 8001e7c:	433c      	orrs	r4, r7
 8001e7e:	4326      	orrs	r6, r4
 8001e80:	e7bc      	b.n	8001dfc <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8001e82:	46c0      	nop			; (mov r8, r8)
 8001e84:	ffffefff 	.word	0xffffefff
 8001e88:	ffff8cff 	.word	0xffff8cff
 8001e8c:	ffffdfff 	.word	0xffffdfff
 8001e90:	40012c00 	.word	0x40012c00
 8001e94:	40014000 	.word	0x40014000
 8001e98:	40014400 	.word	0x40014400
 8001e9c:	40014800 	.word	0x40014800
 8001ea0:	fffffbff 	.word	0xfffffbff
 8001ea4:	fffffeff 	.word	0xfffffeff
 8001ea8:	fffffdff 	.word	0xfffffdff
 8001eac:	fffff7ff 	.word	0xfffff7ff
 8001eb0:	ffffcfff 	.word	0xffffcfff
 8001eb4:	ffffbfff 	.word	0xffffbfff
 8001eb8:	fffff3ff 	.word	0xfffff3ff
 8001ebc:	fffffcff 	.word	0xfffffcff

08001ec0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001ec0:	223c      	movs	r2, #60	; 0x3c
{
 8001ec2:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001ec4:	5c84      	ldrb	r4, [r0, r2]
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	2c01      	cmp	r4, #1
 8001eca:	d03d      	beq.n	8001f48 <HAL_TIM_ConfigClockSource+0x88>
 8001ecc:	2401      	movs	r4, #1
 8001ece:	5484      	strb	r4, [r0, r2]
  htim->State = HAL_TIM_STATE_BUSY;
 8001ed0:	3201      	adds	r2, #1
 8001ed2:	5483      	strb	r3, [r0, r2]
  tmpsmcr = htim->Instance->SMCR;
 8001ed4:	6803      	ldr	r3, [r0, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ed6:	4d59      	ldr	r5, [pc, #356]	; (800203c <HAL_TIM_ConfigClockSource+0x17c>)
  tmpsmcr = htim->Instance->SMCR;
 8001ed8:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001eda:	402a      	ands	r2, r5
  htim->Instance->SMCR = tmpsmcr;
 8001edc:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8001ede:	680a      	ldr	r2, [r1, #0]
 8001ee0:	2a40      	cmp	r2, #64	; 0x40
 8001ee2:	d100      	bne.n	8001ee6 <HAL_TIM_ConfigClockSource+0x26>
 8001ee4:	e074      	b.n	8001fd0 <HAL_TIM_ConfigClockSource+0x110>
 8001ee6:	d91b      	bls.n	8001f20 <HAL_TIM_ConfigClockSource+0x60>
 8001ee8:	2a70      	cmp	r2, #112	; 0x70
 8001eea:	d061      	beq.n	8001fb0 <HAL_TIM_ConfigClockSource+0xf0>
 8001eec:	d92e      	bls.n	8001f4c <HAL_TIM_ConfigClockSource+0x8c>
 8001eee:	2480      	movs	r4, #128	; 0x80
 8001ef0:	0164      	lsls	r4, r4, #5
 8001ef2:	42a2      	cmp	r2, r4
 8001ef4:	d057      	beq.n	8001fa6 <HAL_TIM_ConfigClockSource+0xe6>
 8001ef6:	2480      	movs	r4, #128	; 0x80
 8001ef8:	01a4      	lsls	r4, r4, #6
 8001efa:	42a2      	cmp	r2, r4
 8001efc:	d11d      	bne.n	8001f3a <HAL_TIM_ConfigClockSource+0x7a>
  tmpsmcr = TIMx->SMCR;
 8001efe:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f00:	4c4f      	ldr	r4, [pc, #316]	; (8002040 <HAL_TIM_ConfigClockSource+0x180>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f02:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f04:	4014      	ands	r4, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f06:	688a      	ldr	r2, [r1, #8]
 8001f08:	68c9      	ldr	r1, [r1, #12]
 8001f0a:	432a      	orrs	r2, r5
 8001f0c:	0209      	lsls	r1, r1, #8
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001f12:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f14:	2280      	movs	r2, #128	; 0x80
 8001f16:	6899      	ldr	r1, [r3, #8]
 8001f18:	01d2      	lsls	r2, r2, #7
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	609a      	str	r2, [r3, #8]
    break;
 8001f1e:	e00c      	b.n	8001f3a <HAL_TIM_ConfigClockSource+0x7a>
  switch (sClockSourceConfig->ClockSource)
 8001f20:	2a10      	cmp	r2, #16
 8001f22:	d030      	beq.n	8001f86 <HAL_TIM_ConfigClockSource+0xc6>
 8001f24:	d936      	bls.n	8001f94 <HAL_TIM_ConfigClockSource+0xd4>
 8001f26:	2a20      	cmp	r2, #32
 8001f28:	d069      	beq.n	8001ffe <HAL_TIM_ConfigClockSource+0x13e>
 8001f2a:	2a30      	cmp	r2, #48	; 0x30
 8001f2c:	d105      	bne.n	8001f3a <HAL_TIM_ConfigClockSource+0x7a>
   tmpsmcr &= ~TIM_SMCR_TS;
 8001f2e:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8001f30:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001f32:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001f34:	3939      	subs	r1, #57	; 0x39
 8001f36:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 8001f38:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	233d      	movs	r3, #61	; 0x3d
 8001f3e:	54c2      	strb	r2, [r0, r3]
  __HAL_UNLOCK(htim);
 8001f40:	2200      	movs	r2, #0
 8001f42:	3b01      	subs	r3, #1
 8001f44:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	0018      	movs	r0, r3
 8001f4a:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001f4c:	2a50      	cmp	r2, #80	; 0x50
 8001f4e:	d05d      	beq.n	800200c <HAL_TIM_ConfigClockSource+0x14c>
 8001f50:	2a60      	cmp	r2, #96	; 0x60
 8001f52:	d1f2      	bne.n	8001f3a <HAL_TIM_ConfigClockSource+0x7a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f54:	2510      	movs	r5, #16
 8001f56:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f58:	684a      	ldr	r2, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f5a:	43ac      	bics	r4, r5
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f5c:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f5e:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f60:	699d      	ldr	r5, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001f62:	4e38      	ldr	r6, [pc, #224]	; (8002044 <HAL_TIM_ConfigClockSource+0x184>)
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001f64:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001f66:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001f68:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001f6a:	25a0      	movs	r5, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8001f6c:	6a1c      	ldr	r4, [r3, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8001f6e:	6199      	str	r1, [r3, #24]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001f70:	2170      	movs	r1, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001f72:	43ac      	bics	r4, r5
  tmpccer |= (TIM_ICPolarity << 4U);
 8001f74:	0112      	lsls	r2, r2, #4
 8001f76:	4322      	orrs	r2, r4
  TIMx->CCER = tmpccer;
 8001f78:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001f7a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001f7c:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001f7e:	3909      	subs	r1, #9
 8001f80:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	e7d9      	b.n	8001f3a <HAL_TIM_ConfigClockSource+0x7a>
   tmpsmcr &= ~TIM_SMCR_TS;
 8001f86:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8001f88:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001f8a:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001f8c:	3959      	subs	r1, #89	; 0x59
 8001f8e:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 8001f90:	609a      	str	r2, [r3, #8]
 8001f92:	e7d2      	b.n	8001f3a <HAL_TIM_ConfigClockSource+0x7a>
  switch (sClockSourceConfig->ClockSource)
 8001f94:	2a00      	cmp	r2, #0
 8001f96:	d1d0      	bne.n	8001f3a <HAL_TIM_ConfigClockSource+0x7a>
   tmpsmcr &= ~TIM_SMCR_TS;
 8001f98:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8001f9a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001f9c:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001f9e:	3969      	subs	r1, #105	; 0x69
 8001fa0:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 8001fa2:	609a      	str	r2, [r3, #8]
 8001fa4:	e7c9      	b.n	8001f3a <HAL_TIM_ConfigClockSource+0x7a>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001fa6:	2107      	movs	r1, #7
 8001fa8:	689a      	ldr	r2, [r3, #8]
 8001faa:	438a      	bics	r2, r1
 8001fac:	609a      	str	r2, [r3, #8]
    break;
 8001fae:	e7c4      	b.n	8001f3a <HAL_TIM_ConfigClockSource+0x7a>
  tmpsmcr = TIMx->SMCR;
 8001fb0:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fb2:	4c23      	ldr	r4, [pc, #140]	; (8002040 <HAL_TIM_ConfigClockSource+0x180>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001fb4:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fb6:	4014      	ands	r4, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001fb8:	688a      	ldr	r2, [r1, #8]
 8001fba:	68c9      	ldr	r1, [r1, #12]
 8001fbc:	432a      	orrs	r2, r5
 8001fbe:	0209      	lsls	r1, r1, #8
 8001fc0:	430a      	orrs	r2, r1
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001fc2:	2177      	movs	r1, #119	; 0x77
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001fc4:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001fc6:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001fc8:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001fca:	430a      	orrs	r2, r1
      htim->Instance->SMCR = tmpsmcr;
 8001fcc:	609a      	str	r2, [r3, #8]
    break;
 8001fce:	e7b4      	b.n	8001f3a <HAL_TIM_ConfigClockSource+0x7a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fd0:	684d      	ldr	r5, [r1, #4]
 8001fd2:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 8001fd4:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fd6:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001fd8:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fda:	43a6      	bics	r6, r4
 8001fdc:	621e      	str	r6, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001fde:	26f0      	movs	r6, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8001fe0:	699c      	ldr	r4, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001fe2:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001fe4:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001fe6:	240a      	movs	r4, #10
 8001fe8:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8001fea:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8001fec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001fee:	6219      	str	r1, [r3, #32]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001ff0:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8001ff2:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001ff4:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001ff6:	3929      	subs	r1, #41	; 0x29
 8001ff8:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 8001ffa:	609a      	str	r2, [r3, #8]
 8001ffc:	e79d      	b.n	8001f3a <HAL_TIM_ConfigClockSource+0x7a>
   tmpsmcr &= ~TIM_SMCR_TS;
 8001ffe:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8002000:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002002:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002004:	3949      	subs	r1, #73	; 0x49
 8002006:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 8002008:	609a      	str	r2, [r3, #8]
 800200a:	e796      	b.n	8001f3a <HAL_TIM_ConfigClockSource+0x7a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800200c:	684d      	ldr	r5, [r1, #4]
 800200e:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 8002010:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002012:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002014:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002016:	43a6      	bics	r6, r4
 8002018:	621e      	str	r6, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800201a:	26f0      	movs	r6, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 800201c:	699c      	ldr	r4, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800201e:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002020:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002022:	240a      	movs	r4, #10
 8002024:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8002026:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8002028:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800202a:	6219      	str	r1, [r3, #32]
   tmpsmcr &= ~TIM_SMCR_TS;
 800202c:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 800202e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002030:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002032:	3919      	subs	r1, #25
 8002034:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	e77f      	b.n	8001f3a <HAL_TIM_ConfigClockSource+0x7a>
 800203a:	46c0      	nop			; (mov r8, r8)
 800203c:	ffff0088 	.word	0xffff0088
 8002040:	ffff00ff 	.word	0xffff00ff
 8002044:	ffff0fff 	.word	0xffff0fff

08002048 <HAL_TIM_OC_DelayElapsedCallback>:
 8002048:	4770      	bx	lr
 800204a:	46c0      	nop			; (mov r8, r8)

0800204c <HAL_TIM_IC_CaptureCallback>:
 800204c:	4770      	bx	lr
 800204e:	46c0      	nop			; (mov r8, r8)

08002050 <TIM_DMACaptureCplt>:
  htim->State= HAL_TIM_STATE_READY;
 8002050:	223d      	movs	r2, #61	; 0x3d
 8002052:	2301      	movs	r3, #1
{
 8002054:	b510      	push	{r4, lr}
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002056:	6a44      	ldr	r4, [r0, #36]	; 0x24
  htim->State= HAL_TIM_STATE_READY;
 8002058:	54a3      	strb	r3, [r4, r2]
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800205a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800205c:	4290      	cmp	r0, r2
 800205e:	d00f      	beq.n	8002080 <TIM_DMACaptureCplt+0x30>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002060:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002062:	4298      	cmp	r0, r3
 8002064:	d00e      	beq.n	8002084 <TIM_DMACaptureCplt+0x34>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002066:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002068:	4298      	cmp	r0, r3
 800206a:	d00e      	beq.n	800208a <TIM_DMACaptureCplt+0x3a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800206c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800206e:	4298      	cmp	r0, r3
 8002070:	d005      	beq.n	800207e <TIM_DMACaptureCplt+0x2e>
  HAL_TIM_IC_CaptureCallback(htim);
 8002072:	0020      	movs	r0, r4
 8002074:	f7ff ffea 	bl	800204c <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002078:	2300      	movs	r3, #0
 800207a:	7723      	strb	r3, [r4, #28]
}
 800207c:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800207e:	2308      	movs	r3, #8
 8002080:	7723      	strb	r3, [r4, #28]
 8002082:	e7f6      	b.n	8002072 <TIM_DMACaptureCplt+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002084:	2302      	movs	r3, #2
 8002086:	7723      	strb	r3, [r4, #28]
 8002088:	e7f3      	b.n	8002072 <TIM_DMACaptureCplt+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800208a:	2304      	movs	r3, #4
 800208c:	7723      	strb	r3, [r4, #28]
 800208e:	e7f0      	b.n	8002072 <TIM_DMACaptureCplt+0x22>

08002090 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002090:	4770      	bx	lr
 8002092:	46c0      	nop			; (mov r8, r8)

08002094 <HAL_TIM_TriggerCallback>:
 8002094:	4770      	bx	lr
 8002096:	46c0      	nop			; (mov r8, r8)

08002098 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002098:	2202      	movs	r2, #2
 800209a:	6803      	ldr	r3, [r0, #0]
{
 800209c:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800209e:	6919      	ldr	r1, [r3, #16]
{
 80020a0:	0004      	movs	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020a2:	420a      	tst	r2, r1
 80020a4:	d002      	beq.n	80020ac <HAL_TIM_IRQHandler+0x14>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80020a6:	68d9      	ldr	r1, [r3, #12]
 80020a8:	420a      	tst	r2, r1
 80020aa:	d168      	bne.n	800217e <HAL_TIM_IRQHandler+0xe6>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020ac:	2204      	movs	r2, #4
 80020ae:	6919      	ldr	r1, [r3, #16]
 80020b0:	420a      	tst	r2, r1
 80020b2:	d002      	beq.n	80020ba <HAL_TIM_IRQHandler+0x22>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80020b4:	68d9      	ldr	r1, [r3, #12]
 80020b6:	420a      	tst	r2, r1
 80020b8:	d14e      	bne.n	8002158 <HAL_TIM_IRQHandler+0xc0>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020ba:	2208      	movs	r2, #8
 80020bc:	6919      	ldr	r1, [r3, #16]
 80020be:	420a      	tst	r2, r1
 80020c0:	d002      	beq.n	80020c8 <HAL_TIM_IRQHandler+0x30>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80020c2:	68d9      	ldr	r1, [r3, #12]
 80020c4:	420a      	tst	r2, r1
 80020c6:	d136      	bne.n	8002136 <HAL_TIM_IRQHandler+0x9e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020c8:	2210      	movs	r2, #16
 80020ca:	6919      	ldr	r1, [r3, #16]
 80020cc:	420a      	tst	r2, r1
 80020ce:	d002      	beq.n	80020d6 <HAL_TIM_IRQHandler+0x3e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80020d0:	68d9      	ldr	r1, [r3, #12]
 80020d2:	420a      	tst	r2, r1
 80020d4:	d11c      	bne.n	8002110 <HAL_TIM_IRQHandler+0x78>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020d6:	2201      	movs	r2, #1
 80020d8:	6919      	ldr	r1, [r3, #16]
 80020da:	420a      	tst	r2, r1
 80020dc:	d002      	beq.n	80020e4 <HAL_TIM_IRQHandler+0x4c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80020de:	68d9      	ldr	r1, [r3, #12]
 80020e0:	420a      	tst	r2, r1
 80020e2:	d169      	bne.n	80021b8 <HAL_TIM_IRQHandler+0x120>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020e4:	2280      	movs	r2, #128	; 0x80
 80020e6:	6919      	ldr	r1, [r3, #16]
 80020e8:	420a      	tst	r2, r1
 80020ea:	d002      	beq.n	80020f2 <HAL_TIM_IRQHandler+0x5a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80020ec:	68d9      	ldr	r1, [r3, #12]
 80020ee:	420a      	tst	r2, r1
 80020f0:	d169      	bne.n	80021c6 <HAL_TIM_IRQHandler+0x12e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020f2:	2240      	movs	r2, #64	; 0x40
 80020f4:	6919      	ldr	r1, [r3, #16]
 80020f6:	420a      	tst	r2, r1
 80020f8:	d002      	beq.n	8002100 <HAL_TIM_IRQHandler+0x68>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80020fa:	68d9      	ldr	r1, [r3, #12]
 80020fc:	420a      	tst	r2, r1
 80020fe:	d154      	bne.n	80021aa <HAL_TIM_IRQHandler+0x112>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002100:	2220      	movs	r2, #32
 8002102:	6919      	ldr	r1, [r3, #16]
 8002104:	420a      	tst	r2, r1
 8002106:	d002      	beq.n	800210e <HAL_TIM_IRQHandler+0x76>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002108:	68d9      	ldr	r1, [r3, #12]
 800210a:	420a      	tst	r2, r1
 800210c:	d147      	bne.n	800219e <HAL_TIM_IRQHandler+0x106>
}
 800210e:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002110:	3a21      	subs	r2, #33	; 0x21
 8002112:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002114:	3219      	adds	r2, #25
 8002116:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002118:	69da      	ldr	r2, [r3, #28]
 800211a:	23c0      	movs	r3, #192	; 0xc0
 800211c:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800211e:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002120:	421a      	tst	r2, r3
 8002122:	d15b      	bne.n	80021dc <HAL_TIM_IRQHandler+0x144>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002124:	f7ff ff90 	bl	8002048 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002128:	0020      	movs	r0, r4
 800212a:	f7ff ffb1 	bl	8002090 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800212e:	2300      	movs	r3, #0
 8002130:	7723      	strb	r3, [r4, #28]
 8002132:	6823      	ldr	r3, [r4, #0]
 8002134:	e7cf      	b.n	80020d6 <HAL_TIM_IRQHandler+0x3e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002136:	3a11      	subs	r2, #17
 8002138:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800213a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800213c:	320d      	adds	r2, #13
 800213e:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8002140:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002142:	079b      	lsls	r3, r3, #30
 8002144:	d150      	bne.n	80021e8 <HAL_TIM_IRQHandler+0x150>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002146:	f7ff ff7f 	bl	8002048 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800214a:	0020      	movs	r0, r4
 800214c:	f7ff ffa0 	bl	8002090 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002150:	2300      	movs	r3, #0
 8002152:	7723      	strb	r3, [r4, #28]
 8002154:	6823      	ldr	r3, [r4, #0]
 8002156:	e7b7      	b.n	80020c8 <HAL_TIM_IRQHandler+0x30>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002158:	3a09      	subs	r2, #9
 800215a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800215c:	3207      	adds	r2, #7
 800215e:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002160:	699a      	ldr	r2, [r3, #24]
 8002162:	23c0      	movs	r3, #192	; 0xc0
 8002164:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8002166:	0020      	movs	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002168:	421a      	tst	r2, r3
 800216a:	d13a      	bne.n	80021e2 <HAL_TIM_IRQHandler+0x14a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800216c:	f7ff ff6c 	bl	8002048 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002170:	0020      	movs	r0, r4
 8002172:	f7ff ff8d 	bl	8002090 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002176:	2300      	movs	r3, #0
 8002178:	7723      	strb	r3, [r4, #28]
 800217a:	6823      	ldr	r3, [r4, #0]
 800217c:	e79d      	b.n	80020ba <HAL_TIM_IRQHandler+0x22>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800217e:	3a05      	subs	r2, #5
 8002180:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002182:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002184:	3204      	adds	r2, #4
 8002186:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002188:	079b      	lsls	r3, r3, #30
 800218a:	d124      	bne.n	80021d6 <HAL_TIM_IRQHandler+0x13e>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800218c:	f7ff ff5c 	bl	8002048 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002190:	0020      	movs	r0, r4
 8002192:	f7ff ff7d 	bl	8002090 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002196:	2300      	movs	r3, #0
 8002198:	7723      	strb	r3, [r4, #28]
 800219a:	6823      	ldr	r3, [r4, #0]
 800219c:	e786      	b.n	80020ac <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800219e:	3a41      	subs	r2, #65	; 0x41
 80021a0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80021a2:	0020      	movs	r0, r4
 80021a4:	f000 f89e 	bl	80022e4 <HAL_TIMEx_CommutationCallback>
}
 80021a8:	e7b1      	b.n	800210e <HAL_TIM_IRQHandler+0x76>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021aa:	3a81      	subs	r2, #129	; 0x81
 80021ac:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80021ae:	0020      	movs	r0, r4
 80021b0:	f7ff ff70 	bl	8002094 <HAL_TIM_TriggerCallback>
 80021b4:	6823      	ldr	r3, [r4, #0]
 80021b6:	e7a3      	b.n	8002100 <HAL_TIM_IRQHandler+0x68>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021b8:	3a03      	subs	r2, #3
 80021ba:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80021bc:	0020      	movs	r0, r4
 80021be:	f000 fe55 	bl	8002e6c <HAL_TIM_PeriodElapsedCallback>
 80021c2:	6823      	ldr	r3, [r4, #0]
 80021c4:	e78e      	b.n	80020e4 <HAL_TIM_IRQHandler+0x4c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021c6:	3a02      	subs	r2, #2
 80021c8:	3aff      	subs	r2, #255	; 0xff
 80021ca:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80021cc:	0020      	movs	r0, r4
 80021ce:	f000 f88b 	bl	80022e8 <HAL_TIMEx_BreakCallback>
 80021d2:	6823      	ldr	r3, [r4, #0]
 80021d4:	e78d      	b.n	80020f2 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_IC_CaptureCallback(htim);
 80021d6:	f7ff ff39 	bl	800204c <HAL_TIM_IC_CaptureCallback>
 80021da:	e7dc      	b.n	8002196 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 80021dc:	f7ff ff36 	bl	800204c <HAL_TIM_IC_CaptureCallback>
 80021e0:	e7a5      	b.n	800212e <HAL_TIM_IRQHandler+0x96>
        HAL_TIM_IC_CaptureCallback(htim);
 80021e2:	f7ff ff33 	bl	800204c <HAL_TIM_IC_CaptureCallback>
 80021e6:	e7c6      	b.n	8002176 <HAL_TIM_IRQHandler+0xde>
        HAL_TIM_IC_CaptureCallback(htim);
 80021e8:	f7ff ff30 	bl	800204c <HAL_TIM_IC_CaptureCallback>
 80021ec:	e7b0      	b.n	8002150 <HAL_TIM_IRQHandler+0xb8>
 80021ee:	46c0      	nop			; (mov r8, r8)

080021f0 <HAL_TIM_ErrorCallback>:
}
 80021f0:	4770      	bx	lr
 80021f2:	46c0      	nop			; (mov r8, r8)

080021f4 <TIM_DMAError>:
  htim->State= HAL_TIM_STATE_READY;
 80021f4:	2201      	movs	r2, #1
 80021f6:	233d      	movs	r3, #61	; 0x3d
{
 80021f8:	b510      	push	{r4, lr}
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021fa:	6a40      	ldr	r0, [r0, #36]	; 0x24
  htim->State= HAL_TIM_STATE_READY;
 80021fc:	54c2      	strb	r2, [r0, r3]
  HAL_TIM_ErrorCallback(htim);
 80021fe:	f7ff fff7 	bl	80021f0 <HAL_TIM_ErrorCallback>
}
 8002202:	bd10      	pop	{r4, pc}

08002204 <HAL_TIMEx_PWMN_Start>:
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelNState)
{
  uint32_t tmp = 0U;

  tmp = TIM_CCER_CC1NE << Channel;
 8002204:	2204      	movs	r2, #4
 8002206:	408a      	lsls	r2, r1
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8002208:	6803      	ldr	r3, [r0, #0]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800220a:	6a19      	ldr	r1, [r3, #32]
}
 800220c:	2000      	movs	r0, #0
  TIMx->CCER &=  ~tmp;
 800220e:	4391      	bics	r1, r2
 8002210:	6219      	str	r1, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelNState << Channel);
 8002212:	6a19      	ldr	r1, [r3, #32]
 8002214:	430a      	orrs	r2, r1
 8002216:	621a      	str	r2, [r3, #32]
  __HAL_TIM_MOE_ENABLE(htim);
 8002218:	2280      	movs	r2, #128	; 0x80
 800221a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800221c:	0212      	lsls	r2, r2, #8
 800221e:	430a      	orrs	r2, r1
  __HAL_TIM_ENABLE(htim);
 8002220:	2101      	movs	r1, #1
  __HAL_TIM_MOE_ENABLE(htim);
 8002222:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	430a      	orrs	r2, r1
 8002228:	601a      	str	r2, [r3, #0]
}
 800222a:	4770      	bx	lr

0800222c <HAL_TIMEx_MasterConfigSynchronization>:
{
 800222c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800222e:	243c      	movs	r4, #60	; 0x3c
 8002230:	5d03      	ldrb	r3, [r0, r4]
{
 8002232:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 8002234:	2002      	movs	r0, #2
 8002236:	2b01      	cmp	r3, #1
 8002238:	d017      	beq.n	800226a <HAL_TIMEx_MasterConfigSynchronization+0x3e>
  htim->State = HAL_TIM_STATE_BUSY;
 800223a:	253d      	movs	r5, #61	; 0x3d
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800223c:	2670      	movs	r6, #112	; 0x70
 800223e:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002240:	5550      	strb	r0, [r2, r5]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002242:	6858      	ldr	r0, [r3, #4]
 8002244:	43b0      	bics	r0, r6
 8002246:	6058      	str	r0, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002248:	6858      	ldr	r0, [r3, #4]
 800224a:	680e      	ldr	r6, [r1, #0]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800224c:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800224e:	4330      	orrs	r0, r6
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002250:	2680      	movs	r6, #128	; 0x80
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002252:	6058      	str	r0, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002254:	6898      	ldr	r0, [r3, #8]
 8002256:	43b0      	bics	r0, r6
 8002258:	6098      	str	r0, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800225a:	6898      	ldr	r0, [r3, #8]
 800225c:	4301      	orrs	r1, r0
 800225e:	6099      	str	r1, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 8002260:	2301      	movs	r3, #1
 8002262:	5553      	strb	r3, [r2, r5]
  __HAL_UNLOCK(htim);
 8002264:	2300      	movs	r3, #0
  return HAL_OK;
 8002266:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8002268:	5513      	strb	r3, [r2, r4]
}
 800226a:	bd70      	pop	{r4, r5, r6, pc}

0800226c <HAL_TIMEx_ConfigBreakDeadTime>:
{
 800226c:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 800226e:	243c      	movs	r4, #60	; 0x3c
 8002270:	5d03      	ldrb	r3, [r0, r4]
{
 8002272:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 8002274:	2002      	movs	r0, #2
 8002276:	2b01      	cmp	r3, #1
 8002278:	d024      	beq.n	80022c4 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  htim->State = HAL_TIM_STATE_BUSY;
 800227a:	253d      	movs	r5, #61	; 0x3d
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800227c:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800227e:	5550      	strb	r0, [r2, r5]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002280:	68c8      	ldr	r0, [r1, #12]
 8002282:	4003      	ands	r3, r0
 8002284:	6888      	ldr	r0, [r1, #8]
 8002286:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002288:	4810      	ldr	r0, [pc, #64]	; (80022cc <HAL_TIMEx_ConfigBreakDeadTime+0x60>)
 800228a:	4003      	ands	r3, r0
 800228c:	6848      	ldr	r0, [r1, #4]
 800228e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002290:	480f      	ldr	r0, [pc, #60]	; (80022d0 <HAL_TIMEx_ConfigBreakDeadTime+0x64>)
 8002292:	4003      	ands	r3, r0
 8002294:	6808      	ldr	r0, [r1, #0]
 8002296:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002298:	480e      	ldr	r0, [pc, #56]	; (80022d4 <HAL_TIMEx_ConfigBreakDeadTime+0x68>)
 800229a:	4003      	ands	r3, r0
 800229c:	6908      	ldr	r0, [r1, #16]
 800229e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80022a0:	480d      	ldr	r0, [pc, #52]	; (80022d8 <HAL_TIMEx_ConfigBreakDeadTime+0x6c>)
 80022a2:	4003      	ands	r3, r0
 80022a4:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80022a6:	6989      	ldr	r1, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80022a8:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80022aa:	480c      	ldr	r0, [pc, #48]	; (80022dc <HAL_TIMEx_ConfigBreakDeadTime+0x70>)
 80022ac:	4003      	ands	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80022ae:	480c      	ldr	r0, [pc, #48]	; (80022e0 <HAL_TIMEx_ConfigBreakDeadTime+0x74>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80022b0:	430b      	orrs	r3, r1
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80022b2:	4003      	ands	r3, r0
 80022b4:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 80022b6:	6811      	ldr	r1, [r2, #0]
  return HAL_OK;
 80022b8:	2000      	movs	r0, #0
  htim->Instance->BDTR = tmpbdtr;
 80022ba:	644b      	str	r3, [r1, #68]	; 0x44
  htim->State = HAL_TIM_STATE_READY;
 80022bc:	2301      	movs	r3, #1
 80022be:	5553      	strb	r3, [r2, r5]
  __HAL_UNLOCK(htim);
 80022c0:	2300      	movs	r3, #0
 80022c2:	5513      	strb	r3, [r2, r4]
}
 80022c4:	bd30      	pop	{r4, r5, pc}
 80022c6:	46c0      	nop			; (mov r8, r8)
 80022c8:	fffffcff 	.word	0xfffffcff
 80022cc:	fffffbff 	.word	0xfffffbff
 80022d0:	fffff7ff 	.word	0xfffff7ff
 80022d4:	ffffefff 	.word	0xffffefff
 80022d8:	ffffdfff 	.word	0xffffdfff
 80022dc:	ffffbfff 	.word	0xffffbfff
 80022e0:	ffff7fff 	.word	0xffff7fff

080022e4 <HAL_TIMEx_CommutationCallback>:
 80022e4:	4770      	bx	lr
 80022e6:	46c0      	nop			; (mov r8, r8)

080022e8 <HAL_TIMEx_BreakCallback>:
}
 80022e8:	4770      	bx	lr
 80022ea:	46c0      	nop			; (mov r8, r8)

080022ec <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80022ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ee:	46de      	mov	lr, fp
 80022f0:	464e      	mov	r6, r9
 80022f2:	4657      	mov	r7, sl
 80022f4:	4645      	mov	r5, r8
 80022f6:	b5e0      	push	{r5, r6, r7, lr}
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80022f8:	680e      	ldr	r6, [r1, #0]
{
 80022fa:	468b      	mov	fp, r1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80022fc:	2e00      	cmp	r6, #0
 80022fe:	d100      	bne.n	8002302 <LL_GPIO_Init+0x16>
 8002300:	e073      	b.n	80023ea <LL_GPIO_Init+0xfe>
 8002302:	684b      	ldr	r3, [r1, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	469c      	mov	ip, r3
 8002308:	2301      	movs	r3, #1
 800230a:	425b      	negs	r3, r3
 800230c:	4463      	add	r3, ip
 800230e:	4698      	mov	r8, r3
 8002310:	e00a      	b.n	8002328 <LL_GPIO_Init+0x3c>
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8002312:	4659      	mov	r1, fp
 8002314:	6909      	ldr	r1, [r1, #16]
 8002316:	68c3      	ldr	r3, [r0, #12]
 8002318:	434d      	muls	r5, r1
 800231a:	401c      	ands	r4, r3
 800231c:	432c      	orrs	r4, r5
 800231e:	60c4      	str	r4, [r0, #12]
 8002320:	0033      	movs	r3, r6
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
      }
    }
    pinpos++;
 8002322:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002324:	40d3      	lsrs	r3, r2
 8002326:	d042      	beq.n	80023ae <LL_GPIO_Init+0xc2>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002328:	2301      	movs	r3, #1
 800232a:	4093      	lsls	r3, r2
 800232c:	4033      	ands	r3, r6
    if (currentpin)
 800232e:	d0f7      	beq.n	8002320 <LL_GPIO_Init+0x34>
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8002330:	001d      	movs	r5, r3
 8002332:	6804      	ldr	r4, [r0, #0]
 8002334:	435d      	muls	r5, r3
 8002336:	46a1      	mov	r9, r4
 8002338:	006c      	lsls	r4, r5, #1
 800233a:	1964      	adds	r4, r4, r5
 800233c:	464f      	mov	r7, r9
 800233e:	43e4      	mvns	r4, r4
 8002340:	4027      	ands	r7, r4
 8002342:	46b9      	mov	r9, r7
 8002344:	4667      	mov	r7, ip
 8002346:	436f      	muls	r7, r5
 8002348:	46ba      	mov	sl, r7
 800234a:	464f      	mov	r7, r9
 800234c:	4651      	mov	r1, sl
 800234e:	430f      	orrs	r7, r1
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002350:	4641      	mov	r1, r8
 8002352:	6007      	str	r7, [r0, #0]
 8002354:	2901      	cmp	r1, #1
 8002356:	d8dc      	bhi.n	8002312 <LL_GPIO_Init+0x26>
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 8002358:	6881      	ldr	r1, [r0, #8]
 800235a:	468a      	mov	sl, r1
 800235c:	4659      	mov	r1, fp
 800235e:	6889      	ldr	r1, [r1, #8]
 8002360:	4369      	muls	r1, r5
 8002362:	4689      	mov	r9, r1
 8002364:	4651      	mov	r1, sl
 8002366:	4021      	ands	r1, r4
 8002368:	468a      	mov	sl, r1
 800236a:	4649      	mov	r1, r9
 800236c:	4657      	mov	r7, sl
 800236e:	4339      	orrs	r1, r7
 8002370:	6081      	str	r1, [r0, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8002372:	68c1      	ldr	r1, [r0, #12]
 8002374:	468a      	mov	sl, r1
 8002376:	4659      	mov	r1, fp
 8002378:	6909      	ldr	r1, [r1, #16]
 800237a:	4369      	muls	r1, r5
 800237c:	4689      	mov	r9, r1
 800237e:	4651      	mov	r1, sl
 8002380:	400c      	ands	r4, r1
 8002382:	4649      	mov	r1, r9
 8002384:	430c      	orrs	r4, r1
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002386:	4661      	mov	r1, ip
 8002388:	60c4      	str	r4, [r0, #12]
 800238a:	2902      	cmp	r1, #2
 800238c:	d1c8      	bne.n	8002320 <LL_GPIO_Init+0x34>
        if (currentpin < LL_GPIO_PIN_8)
 800238e:	2bff      	cmp	r3, #255	; 0xff
 8002390:	d81e      	bhi.n	80023d0 <LL_GPIO_Init+0xe4>
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8002392:	4659      	mov	r1, fp
 8002394:	436d      	muls	r5, r5
 8002396:	6949      	ldr	r1, [r1, #20]
 8002398:	012c      	lsls	r4, r5, #4
 800239a:	1b64      	subs	r4, r4, r5
 800239c:	434d      	muls	r5, r1
 800239e:	6a03      	ldr	r3, [r0, #32]
    pinpos++;
 80023a0:	3201      	adds	r2, #1
 80023a2:	43a3      	bics	r3, r4
 80023a4:	431d      	orrs	r5, r3
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80023a6:	0033      	movs	r3, r6
 80023a8:	6205      	str	r5, [r0, #32]
 80023aa:	40d3      	lsrs	r3, r2
 80023ac:	d1bc      	bne.n	8002328 <LL_GPIO_Init+0x3c>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80023ae:	4643      	mov	r3, r8
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d806      	bhi.n	80023c2 <LL_GPIO_Init+0xd6>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80023b4:	465a      	mov	r2, fp
 80023b6:	6843      	ldr	r3, [r0, #4]
 80023b8:	68d2      	ldr	r2, [r2, #12]
 80023ba:	43b3      	bics	r3, r6
 80023bc:	4356      	muls	r6, r2
 80023be:	431e      	orrs	r6, r3
 80023c0:	6046      	str	r6, [r0, #4]
    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);

  }
  return (SUCCESS);
}
 80023c2:	2001      	movs	r0, #1
 80023c4:	bc3c      	pop	{r2, r3, r4, r5}
 80023c6:	4690      	mov	r8, r2
 80023c8:	4699      	mov	r9, r3
 80023ca:	46a2      	mov	sl, r4
 80023cc:	46ab      	mov	fp, r5
 80023ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80023d0:	4659      	mov	r1, fp
 80023d2:	0a1b      	lsrs	r3, r3, #8
 80023d4:	435b      	muls	r3, r3
 80023d6:	435b      	muls	r3, r3
 80023d8:	6949      	ldr	r1, [r1, #20]
 80023da:	011d      	lsls	r5, r3, #4
 80023dc:	1aed      	subs	r5, r5, r3
 80023de:	434b      	muls	r3, r1
 80023e0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80023e2:	43ac      	bics	r4, r5
 80023e4:	4323      	orrs	r3, r4
 80023e6:	6243      	str	r3, [r0, #36]	; 0x24
 80023e8:	e79a      	b.n	8002320 <LL_GPIO_Init+0x34>
 80023ea:	684b      	ldr	r3, [r1, #4]
 80023ec:	3b01      	subs	r3, #1
 80023ee:	4698      	mov	r8, r3
 80023f0:	e7dd      	b.n	80023ae <LL_GPIO_Init+0xc2>
 80023f2:	46c0      	nop			; (mov r8, r8)

080023f4 <allOff>:
	}

}

void allOff() {
	phaseA(floating);
 80023f4:	4b54      	ldr	r3, [pc, #336]	; (8002548 <allOff+0x154>)
void allOff() {
 80023f6:	b510      	push	{r4, lr}
	phaseA(floating);
 80023f8:	681b      	ldr	r3, [r3, #0]
	if (newPhase == 1) {
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d100      	bne.n	8002400 <allOff+0xc>
 80023fe:	e076      	b.n	80024ee <allOff+0xfa>
	if (newPhase == 2) {
 8002400:	2b02      	cmp	r3, #2
 8002402:	d03b      	beq.n	800247c <allOff+0x88>
	if (newPhase == 3) {          // low mosfet on
 8002404:	2b03      	cmp	r3, #3
 8002406:	d138      	bne.n	800247a <allOff+0x86>
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8002408:	4a50      	ldr	r2, [pc, #320]	; (800254c <allOff+0x158>)
 800240a:	4851      	ldr	r0, [pc, #324]	; (8002550 <allOff+0x15c>)
 800240c:	6811      	ldr	r1, [r2, #0]
 800240e:	4399      	bics	r1, r3
 8002410:	000b      	movs	r3, r1
 8002412:	2101      	movs	r1, #1
 8002414:	430b      	orrs	r3, r1
 8002416:	6013      	str	r3, [r2, #0]
 8002418:	2390      	movs	r3, #144	; 0x90
		GPIOB->BSRR = GPIO_PIN_0;
 800241a:	6191      	str	r1, [r2, #24]
 800241c:	05db      	lsls	r3, r3, #23
 800241e:	6819      	ldr	r1, [r3, #0]
 8002420:	4008      	ands	r0, r1
 8002422:	2180      	movs	r1, #128	; 0x80
 8002424:	02c9      	lsls	r1, r1, #11
 8002426:	4301      	orrs	r1, r0
 8002428:	6019      	str	r1, [r3, #0]
		GPIOA->BRR = GPIO_PIN_9;
 800242a:	2180      	movs	r1, #128	; 0x80
 800242c:	0089      	lsls	r1, r1, #2
 800242e:	6299      	str	r1, [r3, #40]	; 0x28
 8002430:	6819      	ldr	r1, [r3, #0]
 8002432:	4848      	ldr	r0, [pc, #288]	; (8002554 <allOff+0x160>)
 8002434:	4008      	ands	r0, r1
 8002436:	2180      	movs	r1, #128	; 0x80
 8002438:	01c9      	lsls	r1, r1, #7
 800243a:	4301      	orrs	r1, r0
 800243c:	6019      	str	r1, [r3, #0]
		GPIOA->BSRR = GPIO_PIN_7;
 800243e:	2180      	movs	r1, #128	; 0x80
 8002440:	6199      	str	r1, [r3, #24]
 8002442:	6819      	ldr	r1, [r3, #0]
 8002444:	4844      	ldr	r0, [pc, #272]	; (8002558 <allOff+0x164>)
 8002446:	4008      	ands	r0, r1
 8002448:	2180      	movs	r1, #128	; 0x80
 800244a:	0249      	lsls	r1, r1, #9
 800244c:	4301      	orrs	r1, r0
 800244e:	6019      	str	r1, [r3, #0]
		GPIOA->BRR = GPIO_PIN_8;
 8002450:	2180      	movs	r1, #128	; 0x80
 8002452:	200c      	movs	r0, #12
 8002454:	0049      	lsls	r1, r1, #1
 8002456:	6299      	str	r1, [r3, #40]	; 0x28
 8002458:	6811      	ldr	r1, [r2, #0]
 800245a:	4381      	bics	r1, r0
 800245c:	3808      	subs	r0, #8
 800245e:	4301      	orrs	r1, r0
 8002460:	6011      	str	r1, [r2, #0]
		GPIOB->BSRR = GPIO_PIN_1;
 8002462:	2102      	movs	r1, #2
 8002464:	6191      	str	r1, [r2, #24]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	493c      	ldr	r1, [pc, #240]	; (800255c <allOff+0x168>)
 800246a:	4011      	ands	r1, r2
 800246c:	2280      	movs	r2, #128	; 0x80
 800246e:	0352      	lsls	r2, r2, #13
 8002470:	430a      	orrs	r2, r1
 8002472:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_10;
 8002474:	2280      	movs	r2, #128	; 0x80
 8002476:	00d2      	lsls	r2, r2, #3
 8002478:	629a      	str	r2, [r3, #40]	; 0x28
	phaseB(floating);
	phaseC(floating);
}
 800247a:	bd10      	pop	{r4, pc}
 800247c:	2003      	movs	r0, #3
 800247e:	4933      	ldr	r1, [pc, #204]	; (800254c <allOff+0x158>)
 8002480:	4c33      	ldr	r4, [pc, #204]	; (8002550 <allOff+0x15c>)
 8002482:	680a      	ldr	r2, [r1, #0]
 8002484:	4382      	bics	r2, r0
 8002486:	3802      	subs	r0, #2
 8002488:	4302      	orrs	r2, r0
 800248a:	600a      	str	r2, [r1, #0]
 800248c:	2290      	movs	r2, #144	; 0x90
		GPIOB->BRR = GPIO_PIN_0;
 800248e:	6288      	str	r0, [r1, #40]	; 0x28
 8002490:	05d2      	lsls	r2, r2, #23
 8002492:	6810      	ldr	r0, [r2, #0]
 8002494:	4004      	ands	r4, r0
 8002496:	2080      	movs	r0, #128	; 0x80
 8002498:	02c0      	lsls	r0, r0, #11
 800249a:	4320      	orrs	r0, r4
 800249c:	6010      	str	r0, [r2, #0]
		GPIOA->BRR = GPIO_PIN_9;
 800249e:	2080      	movs	r0, #128	; 0x80
 80024a0:	0080      	lsls	r0, r0, #2
 80024a2:	6290      	str	r0, [r2, #40]	; 0x28
 80024a4:	6810      	ldr	r0, [r2, #0]
 80024a6:	4c2b      	ldr	r4, [pc, #172]	; (8002554 <allOff+0x160>)
 80024a8:	4004      	ands	r4, r0
 80024aa:	2080      	movs	r0, #128	; 0x80
 80024ac:	01c0      	lsls	r0, r0, #7
 80024ae:	4320      	orrs	r0, r4
 80024b0:	6010      	str	r0, [r2, #0]
		GPIOA->BRR = GPIO_PIN_7;
 80024b2:	2080      	movs	r0, #128	; 0x80
 80024b4:	6290      	str	r0, [r2, #40]	; 0x28
 80024b6:	6810      	ldr	r0, [r2, #0]
 80024b8:	4c27      	ldr	r4, [pc, #156]	; (8002558 <allOff+0x164>)
 80024ba:	4004      	ands	r4, r0
 80024bc:	2080      	movs	r0, #128	; 0x80
 80024be:	0240      	lsls	r0, r0, #9
 80024c0:	4320      	orrs	r0, r4
 80024c2:	6010      	str	r0, [r2, #0]
		GPIOA->BRR = GPIO_PIN_8;
 80024c4:	2080      	movs	r0, #128	; 0x80
 80024c6:	240c      	movs	r4, #12
 80024c8:	0040      	lsls	r0, r0, #1
 80024ca:	6290      	str	r0, [r2, #40]	; 0x28
 80024cc:	6808      	ldr	r0, [r1, #0]
 80024ce:	43a0      	bics	r0, r4
 80024d0:	3c08      	subs	r4, #8
 80024d2:	4320      	orrs	r0, r4
 80024d4:	6008      	str	r0, [r1, #0]
		GPIOB->BRR = GPIO_PIN_1;
 80024d6:	628b      	str	r3, [r1, #40]	; 0x28
 80024d8:	6813      	ldr	r3, [r2, #0]
 80024da:	4920      	ldr	r1, [pc, #128]	; (800255c <allOff+0x168>)
 80024dc:	4019      	ands	r1, r3
 80024de:	2380      	movs	r3, #128	; 0x80
 80024e0:	035b      	lsls	r3, r3, #13
 80024e2:	430b      	orrs	r3, r1
 80024e4:	6013      	str	r3, [r2, #0]
		GPIOA->BRR = GPIO_PIN_10;
 80024e6:	2380      	movs	r3, #128	; 0x80
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	6293      	str	r3, [r2, #40]	; 0x28
 80024ec:	e7c5      	b.n	800247a <allOff+0x86>
 80024ee:	2203      	movs	r2, #3
 80024f0:	4916      	ldr	r1, [pc, #88]	; (800254c <allOff+0x158>)
 80024f2:	4817      	ldr	r0, [pc, #92]	; (8002550 <allOff+0x15c>)
 80024f4:	680b      	ldr	r3, [r1, #0]
 80024f6:	4393      	bics	r3, r2
 80024f8:	3a01      	subs	r2, #1
 80024fa:	4313      	orrs	r3, r2
 80024fc:	600b      	str	r3, [r1, #0]
 80024fe:	2390      	movs	r3, #144	; 0x90
 8002500:	05db      	lsls	r3, r3, #23
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	4010      	ands	r0, r2
 8002506:	2280      	movs	r2, #128	; 0x80
 8002508:	0312      	lsls	r2, r2, #12
 800250a:	4302      	orrs	r2, r0
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	4810      	ldr	r0, [pc, #64]	; (8002554 <allOff+0x160>)
 8002512:	4010      	ands	r0, r2
 8002514:	2280      	movs	r2, #128	; 0x80
 8002516:	0212      	lsls	r2, r2, #8
 8002518:	4302      	orrs	r2, r0
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	480e      	ldr	r0, [pc, #56]	; (8002558 <allOff+0x164>)
 8002520:	4010      	ands	r0, r2
 8002522:	2280      	movs	r2, #128	; 0x80
 8002524:	0292      	lsls	r2, r2, #10
 8002526:	4302      	orrs	r2, r0
 8002528:	200c      	movs	r0, #12
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	680a      	ldr	r2, [r1, #0]
 800252e:	4382      	bics	r2, r0
 8002530:	3804      	subs	r0, #4
 8002532:	4302      	orrs	r2, r0
 8002534:	600a      	str	r2, [r1, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	4908      	ldr	r1, [pc, #32]	; (800255c <allOff+0x168>)
 800253a:	4011      	ands	r1, r2
 800253c:	2280      	movs	r2, #128	; 0x80
 800253e:	0392      	lsls	r2, r2, #14
 8002540:	430a      	orrs	r2, r1
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	e799      	b.n	800247a <allOff+0x86>
 8002546:	46c0      	nop			; (mov r8, r8)
 8002548:	2000000c 	.word	0x2000000c
 800254c:	48000400 	.word	0x48000400
 8002550:	fff3ffff 	.word	0xfff3ffff
 8002554:	ffff3fff 	.word	0xffff3fff
 8002558:	fffcffff 	.word	0xfffcffff
 800255c:	ffcfffff 	.word	0xffcfffff

08002560 <fullBrake>:

void fullBrake(){
	phaseA(lowside);
 8002560:	4b54      	ldr	r3, [pc, #336]	; (80026b4 <fullBrake+0x154>)
void fullBrake(){
 8002562:	b510      	push	{r4, lr}
	phaseA(lowside);
 8002564:	681b      	ldr	r3, [r3, #0]
	if (newPhase == 1) {
 8002566:	2b01      	cmp	r3, #1
 8002568:	d100      	bne.n	800256c <fullBrake+0xc>
 800256a:	e076      	b.n	800265a <fullBrake+0xfa>
	if (newPhase == 2) {
 800256c:	2b02      	cmp	r3, #2
 800256e:	d03b      	beq.n	80025e8 <fullBrake+0x88>
	if (newPhase == 3) {          // low mosfet on
 8002570:	2b03      	cmp	r3, #3
 8002572:	d138      	bne.n	80025e6 <fullBrake+0x86>
 8002574:	4a50      	ldr	r2, [pc, #320]	; (80026b8 <fullBrake+0x158>)
 8002576:	4851      	ldr	r0, [pc, #324]	; (80026bc <fullBrake+0x15c>)
 8002578:	6811      	ldr	r1, [r2, #0]
 800257a:	4399      	bics	r1, r3
 800257c:	000b      	movs	r3, r1
 800257e:	2101      	movs	r1, #1
 8002580:	430b      	orrs	r3, r1
 8002582:	6013      	str	r3, [r2, #0]
 8002584:	2390      	movs	r3, #144	; 0x90
		GPIOB->BSRR = GPIO_PIN_0;
 8002586:	6191      	str	r1, [r2, #24]
 8002588:	05db      	lsls	r3, r3, #23
 800258a:	6819      	ldr	r1, [r3, #0]
 800258c:	4008      	ands	r0, r1
 800258e:	2180      	movs	r1, #128	; 0x80
 8002590:	02c9      	lsls	r1, r1, #11
 8002592:	4301      	orrs	r1, r0
 8002594:	6019      	str	r1, [r3, #0]
		GPIOA->BRR = GPIO_PIN_9;
 8002596:	2180      	movs	r1, #128	; 0x80
 8002598:	0089      	lsls	r1, r1, #2
 800259a:	6299      	str	r1, [r3, #40]	; 0x28
 800259c:	6819      	ldr	r1, [r3, #0]
 800259e:	4848      	ldr	r0, [pc, #288]	; (80026c0 <fullBrake+0x160>)
 80025a0:	4008      	ands	r0, r1
 80025a2:	2180      	movs	r1, #128	; 0x80
 80025a4:	01c9      	lsls	r1, r1, #7
 80025a6:	4301      	orrs	r1, r0
 80025a8:	6019      	str	r1, [r3, #0]
		GPIOA->BSRR = GPIO_PIN_7;
 80025aa:	2180      	movs	r1, #128	; 0x80
 80025ac:	6199      	str	r1, [r3, #24]
 80025ae:	6819      	ldr	r1, [r3, #0]
 80025b0:	4844      	ldr	r0, [pc, #272]	; (80026c4 <fullBrake+0x164>)
 80025b2:	4008      	ands	r0, r1
 80025b4:	2180      	movs	r1, #128	; 0x80
 80025b6:	0249      	lsls	r1, r1, #9
 80025b8:	4301      	orrs	r1, r0
 80025ba:	6019      	str	r1, [r3, #0]
		GPIOA->BRR = GPIO_PIN_8;
 80025bc:	2180      	movs	r1, #128	; 0x80
 80025be:	200c      	movs	r0, #12
 80025c0:	0049      	lsls	r1, r1, #1
 80025c2:	6299      	str	r1, [r3, #40]	; 0x28
 80025c4:	6811      	ldr	r1, [r2, #0]
 80025c6:	4381      	bics	r1, r0
 80025c8:	3808      	subs	r0, #8
 80025ca:	4301      	orrs	r1, r0
 80025cc:	6011      	str	r1, [r2, #0]
		GPIOB->BSRR = GPIO_PIN_1;
 80025ce:	2102      	movs	r1, #2
 80025d0:	6191      	str	r1, [r2, #24]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	493c      	ldr	r1, [pc, #240]	; (80026c8 <fullBrake+0x168>)
 80025d6:	4011      	ands	r1, r2
 80025d8:	2280      	movs	r2, #128	; 0x80
 80025da:	0352      	lsls	r2, r2, #13
 80025dc:	430a      	orrs	r2, r1
 80025de:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_10;
 80025e0:	2280      	movs	r2, #128	; 0x80
 80025e2:	00d2      	lsls	r2, r2, #3
 80025e4:	629a      	str	r2, [r3, #40]	; 0x28
	phaseB(lowside);
	phaseC(lowside);
}
 80025e6:	bd10      	pop	{r4, pc}
 80025e8:	2003      	movs	r0, #3
 80025ea:	4933      	ldr	r1, [pc, #204]	; (80026b8 <fullBrake+0x158>)
 80025ec:	4c33      	ldr	r4, [pc, #204]	; (80026bc <fullBrake+0x15c>)
 80025ee:	680a      	ldr	r2, [r1, #0]
 80025f0:	4382      	bics	r2, r0
 80025f2:	3802      	subs	r0, #2
 80025f4:	4302      	orrs	r2, r0
 80025f6:	600a      	str	r2, [r1, #0]
 80025f8:	2290      	movs	r2, #144	; 0x90
		GPIOB->BRR = GPIO_PIN_0;
 80025fa:	6288      	str	r0, [r1, #40]	; 0x28
 80025fc:	05d2      	lsls	r2, r2, #23
 80025fe:	6810      	ldr	r0, [r2, #0]
 8002600:	4004      	ands	r4, r0
 8002602:	2080      	movs	r0, #128	; 0x80
 8002604:	02c0      	lsls	r0, r0, #11
 8002606:	4320      	orrs	r0, r4
 8002608:	6010      	str	r0, [r2, #0]
		GPIOA->BRR = GPIO_PIN_9;
 800260a:	2080      	movs	r0, #128	; 0x80
 800260c:	0080      	lsls	r0, r0, #2
 800260e:	6290      	str	r0, [r2, #40]	; 0x28
 8002610:	6810      	ldr	r0, [r2, #0]
 8002612:	4c2b      	ldr	r4, [pc, #172]	; (80026c0 <fullBrake+0x160>)
 8002614:	4004      	ands	r4, r0
 8002616:	2080      	movs	r0, #128	; 0x80
 8002618:	01c0      	lsls	r0, r0, #7
 800261a:	4320      	orrs	r0, r4
 800261c:	6010      	str	r0, [r2, #0]
		GPIOA->BRR = GPIO_PIN_7;
 800261e:	2080      	movs	r0, #128	; 0x80
 8002620:	6290      	str	r0, [r2, #40]	; 0x28
 8002622:	6810      	ldr	r0, [r2, #0]
 8002624:	4c27      	ldr	r4, [pc, #156]	; (80026c4 <fullBrake+0x164>)
 8002626:	4004      	ands	r4, r0
 8002628:	2080      	movs	r0, #128	; 0x80
 800262a:	0240      	lsls	r0, r0, #9
 800262c:	4320      	orrs	r0, r4
 800262e:	6010      	str	r0, [r2, #0]
		GPIOA->BRR = GPIO_PIN_8;
 8002630:	2080      	movs	r0, #128	; 0x80
 8002632:	240c      	movs	r4, #12
 8002634:	0040      	lsls	r0, r0, #1
 8002636:	6290      	str	r0, [r2, #40]	; 0x28
 8002638:	6808      	ldr	r0, [r1, #0]
 800263a:	43a0      	bics	r0, r4
 800263c:	3c08      	subs	r4, #8
 800263e:	4320      	orrs	r0, r4
 8002640:	6008      	str	r0, [r1, #0]
		GPIOB->BRR = GPIO_PIN_1;
 8002642:	628b      	str	r3, [r1, #40]	; 0x28
 8002644:	6813      	ldr	r3, [r2, #0]
 8002646:	4920      	ldr	r1, [pc, #128]	; (80026c8 <fullBrake+0x168>)
 8002648:	4019      	ands	r1, r3
 800264a:	2380      	movs	r3, #128	; 0x80
 800264c:	035b      	lsls	r3, r3, #13
 800264e:	430b      	orrs	r3, r1
 8002650:	6013      	str	r3, [r2, #0]
		GPIOA->BRR = GPIO_PIN_10;
 8002652:	2380      	movs	r3, #128	; 0x80
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	6293      	str	r3, [r2, #40]	; 0x28
 8002658:	e7c5      	b.n	80025e6 <fullBrake+0x86>
 800265a:	2203      	movs	r2, #3
 800265c:	4916      	ldr	r1, [pc, #88]	; (80026b8 <fullBrake+0x158>)
 800265e:	4817      	ldr	r0, [pc, #92]	; (80026bc <fullBrake+0x15c>)
 8002660:	680b      	ldr	r3, [r1, #0]
 8002662:	4393      	bics	r3, r2
 8002664:	3a01      	subs	r2, #1
 8002666:	4313      	orrs	r3, r2
 8002668:	600b      	str	r3, [r1, #0]
 800266a:	2390      	movs	r3, #144	; 0x90
 800266c:	05db      	lsls	r3, r3, #23
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	4010      	ands	r0, r2
 8002672:	2280      	movs	r2, #128	; 0x80
 8002674:	0312      	lsls	r2, r2, #12
 8002676:	4302      	orrs	r2, r0
 8002678:	601a      	str	r2, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	4810      	ldr	r0, [pc, #64]	; (80026c0 <fullBrake+0x160>)
 800267e:	4010      	ands	r0, r2
 8002680:	2280      	movs	r2, #128	; 0x80
 8002682:	0212      	lsls	r2, r2, #8
 8002684:	4302      	orrs	r2, r0
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	480e      	ldr	r0, [pc, #56]	; (80026c4 <fullBrake+0x164>)
 800268c:	4010      	ands	r0, r2
 800268e:	2280      	movs	r2, #128	; 0x80
 8002690:	0292      	lsls	r2, r2, #10
 8002692:	4302      	orrs	r2, r0
 8002694:	200c      	movs	r0, #12
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	680a      	ldr	r2, [r1, #0]
 800269a:	4382      	bics	r2, r0
 800269c:	3804      	subs	r0, #4
 800269e:	4302      	orrs	r2, r0
 80026a0:	600a      	str	r2, [r1, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	4908      	ldr	r1, [pc, #32]	; (80026c8 <fullBrake+0x168>)
 80026a6:	4011      	ands	r1, r2
 80026a8:	2280      	movs	r2, #128	; 0x80
 80026aa:	0392      	lsls	r2, r2, #14
 80026ac:	430a      	orrs	r2, r1
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	e799      	b.n	80025e6 <fullBrake+0x86>
 80026b2:	46c0      	nop			; (mov r8, r8)
 80026b4:	20000018 	.word	0x20000018
 80026b8:	48000400 	.word	0x48000400
 80026bc:	fff3ffff 	.word	0xfff3ffff
 80026c0:	ffff3fff 	.word	0xffff3fff
 80026c4:	fffcffff 	.word	0xfffcffff
 80026c8:	ffcfffff 	.word	0xffcfffff

080026cc <commutate>:
}


void commutate() {

	if (forward == 1){
 80026cc:	4bc5      	ldr	r3, [pc, #788]	; (80029e4 <commutate+0x318>)
void commutate() {
 80026ce:	b570      	push	{r4, r5, r6, lr}
	if (forward == 1){
 80026d0:	681a      	ldr	r2, [r3, #0]
		step++;
 80026d2:	4cc5      	ldr	r4, [pc, #788]	; (80029e8 <commutate+0x31c>)
 80026d4:	6823      	ldr	r3, [r4, #0]
	if (forward == 1){
 80026d6:	2a01      	cmp	r2, #1
 80026d8:	d100      	bne.n	80026dc <commutate+0x10>
 80026da:	e1c9      	b.n	8002a70 <commutate+0x3a4>
		}
		if (step == 2 || step == 4 || step == 6) {
			rising = 0;
		}
	}
	if (forward == 0){
 80026dc:	2a00      	cmp	r2, #0
 80026de:	d150      	bne.n	8002782 <commutate+0xb6>
		step--;
 80026e0:	3b01      	subs	r3, #1
 80026e2:	6023      	str	r3, [r4, #0]
		if (step < 1) {
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	dd47      	ble.n	8002778 <commutate+0xac>
			step = 6;
		}
		if (step == 1 || step == 3 || step == 5) {
 80026e8:	2202      	movs	r2, #2
 80026ea:	0019      	movs	r1, r3
 80026ec:	4391      	bics	r1, r2
 80026ee:	2901      	cmp	r1, #1
 80026f0:	d100      	bne.n	80026f4 <commutate+0x28>
 80026f2:	e080      	b.n	80027f6 <commutate+0x12a>
 80026f4:	2b05      	cmp	r3, #5
 80026f6:	d07e      	beq.n	80027f6 <commutate+0x12a>
 80026f8:	2204      	movs	r2, #4
 80026fa:	0019      	movs	r1, r3
 80026fc:	4391      	bics	r1, r2
			rising = 0;
		}
		if (step == 2 || step == 4 || step == 6) {
 80026fe:	2902      	cmp	r1, #2
 8002700:	d03c      	beq.n	800277c <commutate+0xb0>
 8002702:	2b04      	cmp	r3, #4
 8002704:	d03a      	beq.n	800277c <commutate+0xb0>
	if (newStep == 1) {			//A-B
 8002706:	2b01      	cmp	r3, #1
 8002708:	d100      	bne.n	800270c <commutate+0x40>
 800270a:	e1d0      	b.n	8002aae <commutate+0x3e2>
	if (newStep == 3) {		// C-A
 800270c:	2b03      	cmp	r3, #3
 800270e:	d100      	bne.n	8002712 <commutate+0x46>
 8002710:	e206      	b.n	8002b20 <commutate+0x454>
	if (newStep == 4) {    // B-A
 8002712:	2b04      	cmp	r3, #4
 8002714:	d100      	bne.n	8002718 <commutate+0x4c>
 8002716:	e093      	b.n	8002840 <commutate+0x174>
	if (newStep == 5) {          // B-C
 8002718:	2b05      	cmp	r3, #5
 800271a:	d070      	beq.n	80027fe <commutate+0x132>
	if (newStep == 6) {       // A-C
 800271c:	2b06      	cmp	r3, #6
 800271e:	d100      	bne.n	8002722 <commutate+0x56>
 8002720:	e13f      	b.n	80029a2 <commutate+0x2d6>
	HAL_COMP_Stop(&hcomp1);
 8002722:	4db2      	ldr	r5, [pc, #712]	; (80029ec <commutate+0x320>)
 8002724:	0028      	movs	r0, r5
 8002726:	f7fe f9a9 	bl	8000a7c <HAL_COMP_Stop>
	if (step == 1 || step == 4) {   // c floating
 800272a:	6823      	ldr	r3, [r4, #0]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d020      	beq.n	8002772 <commutate+0xa6>
 8002730:	2b04      	cmp	r3, #4
 8002732:	d01e      	beq.n	8002772 <commutate+0xa6>
	if (step == 2 || step == 5) {     // a floating
 8002734:	2b02      	cmp	r3, #2
 8002736:	d019      	beq.n	800276c <commutate+0xa0>
 8002738:	2b05      	cmp	r3, #5
 800273a:	d017      	beq.n	800276c <commutate+0xa0>
	if (step == 3 || step == 6) {      // b floating
 800273c:	2b03      	cmp	r3, #3
 800273e:	d007      	beq.n	8002750 <commutate+0x84>
 8002740:	2b06      	cmp	r3, #6
 8002742:	d005      	beq.n	8002750 <commutate+0x84>
	if (HAL_COMP_Init(&hcomp1) != HAL_OK) {
 8002744:	0028      	movs	r0, r5
 8002746:	f7fe f929 	bl	800099c <HAL_COMP_Init>
 800274a:	2800      	cmp	r0, #0
 800274c:	d007      	beq.n	800275e <commutate+0x92>
 800274e:	e7fe      	b.n	800274e <commutate+0x82>
		hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_DAC2;
 8002750:	2350      	movs	r3, #80	; 0x50
	if (HAL_COMP_Init(&hcomp1) != HAL_OK) {
 8002752:	0028      	movs	r0, r5
		hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_DAC2;
 8002754:	606b      	str	r3, [r5, #4]
	if (HAL_COMP_Init(&hcomp1) != HAL_OK) {
 8002756:	f7fe f921 	bl	800099c <HAL_COMP_Init>
 800275a:	2800      	cmp	r0, #0
 800275c:	d1f7      	bne.n	800274e <commutate+0x82>
	if (HAL_COMP_Start(&hcomp1) != HAL_OK) {
 800275e:	0028      	movs	r0, r5
 8002760:	f7fe f96c 	bl	8000a3c <HAL_COMP_Start>
 8002764:	2800      	cmp	r0, #0
 8002766:	d100      	bne.n	800276a <commutate+0x9e>
 8002768:	e191      	b.n	8002a8e <commutate+0x3c2>
 800276a:	e7fe      	b.n	800276a <commutate+0x9e>
		hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1;
 800276c:	2240      	movs	r2, #64	; 0x40
 800276e:	606a      	str	r2, [r5, #4]
 8002770:	e7e4      	b.n	800273c <commutate+0x70>
		hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_IO1;
 8002772:	2260      	movs	r2, #96	; 0x60
 8002774:	606a      	str	r2, [r5, #4]
 8002776:	e7dd      	b.n	8002734 <commutate+0x68>
			step = 6;
 8002778:	2306      	movs	r3, #6
 800277a:	6023      	str	r3, [r4, #0]
			rising = 1;
 800277c:	2101      	movs	r1, #1
 800277e:	4a9c      	ldr	r2, [pc, #624]	; (80029f0 <commutate+0x324>)
 8002780:	6011      	str	r1, [r2, #0]
	if (newStep == 1) {			//A-B
 8002782:	2b01      	cmp	r3, #1
 8002784:	d100      	bne.n	8002788 <commutate+0xbc>
 8002786:	e192      	b.n	8002aae <commutate+0x3e2>
	if (newStep == 2) {			// C-B
 8002788:	2b02      	cmp	r3, #2
 800278a:	d1bf      	bne.n	800270c <commutate+0x40>
		phaseA(floating);
 800278c:	4a99      	ldr	r2, [pc, #612]	; (80029f4 <commutate+0x328>)
 800278e:	6812      	ldr	r2, [r2, #0]
	if (newPhase == 1) {
 8002790:	2a01      	cmp	r2, #1
 8002792:	d100      	bne.n	8002796 <commutate+0xca>
 8002794:	e259      	b.n	8002c4a <commutate+0x57e>
	if (newPhase == 2) {
 8002796:	2a02      	cmp	r2, #2
 8002798:	d100      	bne.n	800279c <commutate+0xd0>
 800279a:	e24d      	b.n	8002c38 <commutate+0x56c>
	if (newPhase == 3) {          // low mosfet on
 800279c:	2a03      	cmp	r2, #3
 800279e:	d100      	bne.n	80027a2 <commutate+0xd6>
 80027a0:	e236      	b.n	8002c10 <commutate+0x544>
		phaseB(lowside);
 80027a2:	4b95      	ldr	r3, [pc, #596]	; (80029f8 <commutate+0x32c>)
 80027a4:	681b      	ldr	r3, [r3, #0]
	if (newPhase == 1) {  // pwm
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d100      	bne.n	80027ac <commutate+0xe0>
 80027aa:	e220      	b.n	8002bee <commutate+0x522>
	if (newPhase == 2) {            // floating
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d100      	bne.n	80027b2 <commutate+0xe6>
 80027b0:	e211      	b.n	8002bd6 <commutate+0x50a>
	if (newPhase == 3) {              // lowside
 80027b2:	2b03      	cmp	r3, #3
 80027b4:	d100      	bne.n	80027b8 <commutate+0xec>
 80027b6:	e1f8      	b.n	8002baa <commutate+0x4de>
		phaseC(pwm);
 80027b8:	4b90      	ldr	r3, [pc, #576]	; (80029fc <commutate+0x330>)
 80027ba:	681b      	ldr	r3, [r3, #0]
	if (newPhase == 1) {
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d053      	beq.n	8002868 <commutate+0x19c>
	if (newPhase == 2) {
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d100      	bne.n	80027c6 <commutate+0xfa>
 80027c4:	e1dc      	b.n	8002b80 <commutate+0x4b4>
	if (newPhase == 3) {
 80027c6:	2b03      	cmp	r3, #3
 80027c8:	d1ab      	bne.n	8002722 <commutate+0x56>
 80027ca:	210c      	movs	r1, #12
 80027cc:	4a8c      	ldr	r2, [pc, #560]	; (8002a00 <commutate+0x334>)
 80027ce:	6813      	ldr	r3, [r2, #0]
 80027d0:	438b      	bics	r3, r1
 80027d2:	3908      	subs	r1, #8
 80027d4:	430b      	orrs	r3, r1
 80027d6:	6013      	str	r3, [r2, #0]
		GPIOB->BSRR = GPIO_PIN_1;
 80027d8:	2302      	movs	r3, #2
 80027da:	6193      	str	r3, [r2, #24]
 80027dc:	2390      	movs	r3, #144	; 0x90
 80027de:	05db      	lsls	r3, r3, #23
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	4988      	ldr	r1, [pc, #544]	; (8002a04 <commutate+0x338>)
 80027e4:	4011      	ands	r1, r2
 80027e6:	2280      	movs	r2, #128	; 0x80
 80027e8:	0352      	lsls	r2, r2, #13
 80027ea:	430a      	orrs	r2, r1
 80027ec:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_10;
 80027ee:	2280      	movs	r2, #128	; 0x80
 80027f0:	00d2      	lsls	r2, r2, #3
 80027f2:	629a      	str	r2, [r3, #40]	; 0x28
 80027f4:	e795      	b.n	8002722 <commutate+0x56>
			rising = 0;
 80027f6:	2100      	movs	r1, #0
 80027f8:	4a7d      	ldr	r2, [pc, #500]	; (80029f0 <commutate+0x324>)
 80027fa:	6011      	str	r1, [r2, #0]
 80027fc:	e77c      	b.n	80026f8 <commutate+0x2c>
		phaseA(floating);
 80027fe:	4b7d      	ldr	r3, [pc, #500]	; (80029f4 <commutate+0x328>)
 8002800:	681a      	ldr	r2, [r3, #0]
	if (newPhase == 1) {
 8002802:	2a01      	cmp	r2, #1
 8002804:	d100      	bne.n	8002808 <commutate+0x13c>
 8002806:	e122      	b.n	8002a4e <commutate+0x382>
	if (newPhase == 2) {
 8002808:	2a02      	cmp	r2, #2
 800280a:	d100      	bne.n	800280e <commutate+0x142>
 800280c:	e116      	b.n	8002a3c <commutate+0x370>
	if (newPhase == 3) {          // low mosfet on
 800280e:	2a03      	cmp	r2, #3
 8002810:	d100      	bne.n	8002814 <commutate+0x148>
 8002812:	e0ff      	b.n	8002a14 <commutate+0x348>
		phaseB(pwm);
 8002814:	4b79      	ldr	r3, [pc, #484]	; (80029fc <commutate+0x330>)
 8002816:	681b      	ldr	r3, [r3, #0]
	if (newPhase == 1) {  // pwm
 8002818:	2b01      	cmp	r3, #1
 800281a:	d100      	bne.n	800281e <commutate+0x152>
 800281c:	e0d1      	b.n	80029c2 <commutate+0x2f6>
	if (newPhase == 2) {            // floating
 800281e:	2b02      	cmp	r3, #2
 8002820:	d100      	bne.n	8002824 <commutate+0x158>
 8002822:	e0b2      	b.n	800298a <commutate+0x2be>
	if (newPhase == 3) {              // lowside
 8002824:	2b03      	cmp	r3, #3
 8002826:	d100      	bne.n	800282a <commutate+0x15e>
 8002828:	e099      	b.n	800295e <commutate+0x292>
		phaseC(lowside);
 800282a:	4b73      	ldr	r3, [pc, #460]	; (80029f8 <commutate+0x32c>)
 800282c:	681a      	ldr	r2, [r3, #0]
	if (newPhase == 1) {
 800282e:	2a01      	cmp	r2, #1
 8002830:	d01a      	beq.n	8002868 <commutate+0x19c>
	if (newPhase == 2) {
 8002832:	2a02      	cmp	r2, #2
 8002834:	d100      	bne.n	8002838 <commutate+0x16c>
 8002836:	e089      	b.n	800294c <commutate+0x280>
	if (newPhase == 3) {
 8002838:	2a03      	cmp	r2, #3
 800283a:	d000      	beq.n	800283e <commutate+0x172>
 800283c:	e771      	b.n	8002722 <commutate+0x56>
 800283e:	e7c4      	b.n	80027ca <commutate+0xfe>
		phaseA(lowside);
 8002840:	4b6d      	ldr	r3, [pc, #436]	; (80029f8 <commutate+0x32c>)
 8002842:	681a      	ldr	r2, [r3, #0]
	if (newPhase == 1) {
 8002844:	2a01      	cmp	r2, #1
 8002846:	d070      	beq.n	800292a <commutate+0x25e>
	if (newPhase == 2) {
 8002848:	2a02      	cmp	r2, #2
 800284a:	d065      	beq.n	8002918 <commutate+0x24c>
	if (newPhase == 3) {          // low mosfet on
 800284c:	2a03      	cmp	r2, #3
 800284e:	d04f      	beq.n	80028f0 <commutate+0x224>
		phaseB(pwm);
 8002850:	4b6a      	ldr	r3, [pc, #424]	; (80029fc <commutate+0x330>)
 8002852:	681b      	ldr	r3, [r3, #0]
	if (newPhase == 1) {  // pwm
 8002854:	2b01      	cmp	r3, #1
 8002856:	d03a      	beq.n	80028ce <commutate+0x202>
	if (newPhase == 2) {            // floating
 8002858:	2b02      	cmp	r3, #2
 800285a:	d02c      	beq.n	80028b6 <commutate+0x1ea>
	if (newPhase == 3) {              // lowside
 800285c:	2b03      	cmp	r3, #3
 800285e:	d014      	beq.n	800288a <commutate+0x1be>
		phaseC(floating);
 8002860:	4b64      	ldr	r3, [pc, #400]	; (80029f4 <commutate+0x328>)
 8002862:	681a      	ldr	r2, [r3, #0]
	if (newPhase == 1) {
 8002864:	2a01      	cmp	r2, #1
 8002866:	d1e4      	bne.n	8002832 <commutate+0x166>
 8002868:	210c      	movs	r1, #12
 800286a:	4a65      	ldr	r2, [pc, #404]	; (8002a00 <commutate+0x334>)
 800286c:	6813      	ldr	r3, [r2, #0]
 800286e:	438b      	bics	r3, r1
 8002870:	3904      	subs	r1, #4
 8002872:	430b      	orrs	r3, r1
 8002874:	2190      	movs	r1, #144	; 0x90
 8002876:	6013      	str	r3, [r2, #0]
 8002878:	05c9      	lsls	r1, r1, #23
 800287a:	680b      	ldr	r3, [r1, #0]
 800287c:	4a61      	ldr	r2, [pc, #388]	; (8002a04 <commutate+0x338>)
 800287e:	401a      	ands	r2, r3
 8002880:	2380      	movs	r3, #128	; 0x80
 8002882:	039b      	lsls	r3, r3, #14
 8002884:	4313      	orrs	r3, r2
 8002886:	600b      	str	r3, [r1, #0]
 8002888:	e74b      	b.n	8002722 <commutate+0x56>
 800288a:	2390      	movs	r3, #144	; 0x90
 800288c:	05db      	lsls	r3, r3, #23
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	495d      	ldr	r1, [pc, #372]	; (8002a08 <commutate+0x33c>)
 8002892:	4011      	ands	r1, r2
 8002894:	2280      	movs	r2, #128	; 0x80
 8002896:	01d2      	lsls	r2, r2, #7
 8002898:	430a      	orrs	r2, r1
 800289a:	601a      	str	r2, [r3, #0]
		GPIOA->BSRR = GPIO_PIN_7;
 800289c:	2280      	movs	r2, #128	; 0x80
 800289e:	619a      	str	r2, [r3, #24]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	495a      	ldr	r1, [pc, #360]	; (8002a0c <commutate+0x340>)
 80028a4:	4011      	ands	r1, r2
 80028a6:	2280      	movs	r2, #128	; 0x80
 80028a8:	0252      	lsls	r2, r2, #9
 80028aa:	430a      	orrs	r2, r1
 80028ac:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_8;
 80028ae:	2280      	movs	r2, #128	; 0x80
 80028b0:	0052      	lsls	r2, r2, #1
 80028b2:	629a      	str	r2, [r3, #40]	; 0x28
 80028b4:	e7d4      	b.n	8002860 <commutate+0x194>
 80028b6:	2390      	movs	r3, #144	; 0x90
 80028b8:	05db      	lsls	r3, r3, #23
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	4952      	ldr	r1, [pc, #328]	; (8002a08 <commutate+0x33c>)
 80028be:	4011      	ands	r1, r2
 80028c0:	2280      	movs	r2, #128	; 0x80
 80028c2:	01d2      	lsls	r2, r2, #7
 80028c4:	430a      	orrs	r2, r1
 80028c6:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_7;
 80028c8:	2280      	movs	r2, #128	; 0x80
 80028ca:	629a      	str	r2, [r3, #40]	; 0x28
 80028cc:	e7e8      	b.n	80028a0 <commutate+0x1d4>
 80028ce:	2390      	movs	r3, #144	; 0x90
 80028d0:	05db      	lsls	r3, r3, #23
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	494c      	ldr	r1, [pc, #304]	; (8002a08 <commutate+0x33c>)
 80028d6:	4011      	ands	r1, r2
 80028d8:	2280      	movs	r2, #128	; 0x80
 80028da:	0212      	lsls	r2, r2, #8
 80028dc:	430a      	orrs	r2, r1
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	494a      	ldr	r1, [pc, #296]	; (8002a0c <commutate+0x340>)
 80028e4:	4011      	ands	r1, r2
 80028e6:	2280      	movs	r2, #128	; 0x80
 80028e8:	0292      	lsls	r2, r2, #10
 80028ea:	430a      	orrs	r2, r1
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	e7b7      	b.n	8002860 <commutate+0x194>
 80028f0:	4943      	ldr	r1, [pc, #268]	; (8002a00 <commutate+0x334>)
 80028f2:	680b      	ldr	r3, [r1, #0]
 80028f4:	4393      	bics	r3, r2
 80028f6:	3a02      	subs	r2, #2
 80028f8:	4313      	orrs	r3, r2
 80028fa:	600b      	str	r3, [r1, #0]
		GPIOB->BSRR = GPIO_PIN_0;
 80028fc:	618a      	str	r2, [r1, #24]
 80028fe:	2390      	movs	r3, #144	; 0x90
 8002900:	05db      	lsls	r3, r3, #23
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	4942      	ldr	r1, [pc, #264]	; (8002a10 <commutate+0x344>)
 8002906:	4011      	ands	r1, r2
 8002908:	2280      	movs	r2, #128	; 0x80
 800290a:	02d2      	lsls	r2, r2, #11
 800290c:	430a      	orrs	r2, r1
 800290e:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_9;
 8002910:	2280      	movs	r2, #128	; 0x80
 8002912:	0092      	lsls	r2, r2, #2
 8002914:	629a      	str	r2, [r3, #40]	; 0x28
 8002916:	e79b      	b.n	8002850 <commutate+0x184>
 8002918:	2103      	movs	r1, #3
 800291a:	4a39      	ldr	r2, [pc, #228]	; (8002a00 <commutate+0x334>)
 800291c:	6813      	ldr	r3, [r2, #0]
 800291e:	438b      	bics	r3, r1
 8002920:	3902      	subs	r1, #2
 8002922:	430b      	orrs	r3, r1
 8002924:	6013      	str	r3, [r2, #0]
		GPIOB->BRR = GPIO_PIN_0;
 8002926:	6291      	str	r1, [r2, #40]	; 0x28
 8002928:	e7e9      	b.n	80028fe <commutate+0x232>
 800292a:	2103      	movs	r1, #3
 800292c:	4a34      	ldr	r2, [pc, #208]	; (8002a00 <commutate+0x334>)
 800292e:	6813      	ldr	r3, [r2, #0]
 8002930:	438b      	bics	r3, r1
 8002932:	3901      	subs	r1, #1
 8002934:	430b      	orrs	r3, r1
 8002936:	2190      	movs	r1, #144	; 0x90
 8002938:	6013      	str	r3, [r2, #0]
 800293a:	05c9      	lsls	r1, r1, #23
 800293c:	680b      	ldr	r3, [r1, #0]
 800293e:	4a34      	ldr	r2, [pc, #208]	; (8002a10 <commutate+0x344>)
 8002940:	401a      	ands	r2, r3
 8002942:	2380      	movs	r3, #128	; 0x80
 8002944:	031b      	lsls	r3, r3, #12
 8002946:	4313      	orrs	r3, r2
 8002948:	600b      	str	r3, [r1, #0]
 800294a:	e781      	b.n	8002850 <commutate+0x184>
 800294c:	200c      	movs	r0, #12
 800294e:	492c      	ldr	r1, [pc, #176]	; (8002a00 <commutate+0x334>)
 8002950:	680b      	ldr	r3, [r1, #0]
 8002952:	4383      	bics	r3, r0
 8002954:	3808      	subs	r0, #8
 8002956:	4303      	orrs	r3, r0
 8002958:	600b      	str	r3, [r1, #0]
		GPIOB->BRR = GPIO_PIN_1;
 800295a:	628a      	str	r2, [r1, #40]	; 0x28
 800295c:	e73e      	b.n	80027dc <commutate+0x110>
 800295e:	2390      	movs	r3, #144	; 0x90
 8002960:	05db      	lsls	r3, r3, #23
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	4928      	ldr	r1, [pc, #160]	; (8002a08 <commutate+0x33c>)
 8002966:	4011      	ands	r1, r2
 8002968:	2280      	movs	r2, #128	; 0x80
 800296a:	01d2      	lsls	r2, r2, #7
 800296c:	430a      	orrs	r2, r1
 800296e:	601a      	str	r2, [r3, #0]
		GPIOA->BSRR = GPIO_PIN_7;
 8002970:	2280      	movs	r2, #128	; 0x80
 8002972:	619a      	str	r2, [r3, #24]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	4925      	ldr	r1, [pc, #148]	; (8002a0c <commutate+0x340>)
 8002978:	4011      	ands	r1, r2
 800297a:	2280      	movs	r2, #128	; 0x80
 800297c:	0252      	lsls	r2, r2, #9
 800297e:	430a      	orrs	r2, r1
 8002980:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_8;
 8002982:	2280      	movs	r2, #128	; 0x80
 8002984:	0052      	lsls	r2, r2, #1
 8002986:	629a      	str	r2, [r3, #40]	; 0x28
 8002988:	e74f      	b.n	800282a <commutate+0x15e>
 800298a:	2390      	movs	r3, #144	; 0x90
 800298c:	05db      	lsls	r3, r3, #23
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	491d      	ldr	r1, [pc, #116]	; (8002a08 <commutate+0x33c>)
 8002992:	4011      	ands	r1, r2
 8002994:	2280      	movs	r2, #128	; 0x80
 8002996:	01d2      	lsls	r2, r2, #7
 8002998:	430a      	orrs	r2, r1
 800299a:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_7;
 800299c:	2280      	movs	r2, #128	; 0x80
 800299e:	629a      	str	r2, [r3, #40]	; 0x28
 80029a0:	e7e8      	b.n	8002974 <commutate+0x2a8>
		phaseA(pwm);
 80029a2:	4b16      	ldr	r3, [pc, #88]	; (80029fc <commutate+0x330>)
 80029a4:	681a      	ldr	r2, [r3, #0]
	if (newPhase == 1) {
 80029a6:	2a01      	cmp	r2, #1
 80029a8:	d100      	bne.n	80029ac <commutate+0x2e0>
 80029aa:	e167      	b.n	8002c7c <commutate+0x5b0>
	if (newPhase == 2) {
 80029ac:	2a02      	cmp	r2, #2
 80029ae:	d100      	bne.n	80029b2 <commutate+0x2e6>
 80029b0:	e15b      	b.n	8002c6a <commutate+0x59e>
	if (newPhase == 3) {          // low mosfet on
 80029b2:	2a03      	cmp	r2, #3
 80029b4:	d100      	bne.n	80029b8 <commutate+0x2ec>
 80029b6:	e0cf      	b.n	8002b58 <commutate+0x48c>
		phaseB(floating);
 80029b8:	4b0e      	ldr	r3, [pc, #56]	; (80029f4 <commutate+0x328>)
 80029ba:	681b      	ldr	r3, [r3, #0]
	if (newPhase == 1) {  // pwm
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d000      	beq.n	80029c2 <commutate+0x2f6>
 80029c0:	e72d      	b.n	800281e <commutate+0x152>
 80029c2:	2390      	movs	r3, #144	; 0x90
 80029c4:	05db      	lsls	r3, r3, #23
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	490f      	ldr	r1, [pc, #60]	; (8002a08 <commutate+0x33c>)
 80029ca:	4011      	ands	r1, r2
 80029cc:	2280      	movs	r2, #128	; 0x80
 80029ce:	0212      	lsls	r2, r2, #8
 80029d0:	430a      	orrs	r2, r1
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	490d      	ldr	r1, [pc, #52]	; (8002a0c <commutate+0x340>)
 80029d8:	4011      	ands	r1, r2
 80029da:	2280      	movs	r2, #128	; 0x80
 80029dc:	0292      	lsls	r2, r2, #10
 80029de:	430a      	orrs	r2, r1
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	e722      	b.n	800282a <commutate+0x15e>
 80029e4:	20000010 	.word	0x20000010
 80029e8:	20000028 	.word	0x20000028
 80029ec:	20000188 	.word	0x20000188
 80029f0:	20000020 	.word	0x20000020
 80029f4:	2000000c 	.word	0x2000000c
 80029f8:	20000018 	.word	0x20000018
 80029fc:	2000001c 	.word	0x2000001c
 8002a00:	48000400 	.word	0x48000400
 8002a04:	ffcfffff 	.word	0xffcfffff
 8002a08:	ffff3fff 	.word	0xffff3fff
 8002a0c:	fffcffff 	.word	0xfffcffff
 8002a10:	fff3ffff 	.word	0xfff3ffff
 8002a14:	49d3      	ldr	r1, [pc, #844]	; (8002d64 <commutate+0x698>)
 8002a16:	680b      	ldr	r3, [r1, #0]
 8002a18:	4393      	bics	r3, r2
 8002a1a:	3a02      	subs	r2, #2
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	600b      	str	r3, [r1, #0]
		GPIOB->BSRR = GPIO_PIN_0;
 8002a20:	618a      	str	r2, [r1, #24]
 8002a22:	2390      	movs	r3, #144	; 0x90
 8002a24:	05db      	lsls	r3, r3, #23
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	49cf      	ldr	r1, [pc, #828]	; (8002d68 <commutate+0x69c>)
 8002a2a:	4011      	ands	r1, r2
 8002a2c:	2280      	movs	r2, #128	; 0x80
 8002a2e:	02d2      	lsls	r2, r2, #11
 8002a30:	430a      	orrs	r2, r1
 8002a32:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_9;
 8002a34:	2280      	movs	r2, #128	; 0x80
 8002a36:	0092      	lsls	r2, r2, #2
 8002a38:	629a      	str	r2, [r3, #40]	; 0x28
 8002a3a:	e6eb      	b.n	8002814 <commutate+0x148>
 8002a3c:	2103      	movs	r1, #3
 8002a3e:	4ac9      	ldr	r2, [pc, #804]	; (8002d64 <commutate+0x698>)
 8002a40:	6813      	ldr	r3, [r2, #0]
 8002a42:	438b      	bics	r3, r1
 8002a44:	3902      	subs	r1, #2
 8002a46:	430b      	orrs	r3, r1
 8002a48:	6013      	str	r3, [r2, #0]
		GPIOB->BRR = GPIO_PIN_0;
 8002a4a:	6291      	str	r1, [r2, #40]	; 0x28
 8002a4c:	e7e9      	b.n	8002a22 <commutate+0x356>
 8002a4e:	2103      	movs	r1, #3
 8002a50:	4ac4      	ldr	r2, [pc, #784]	; (8002d64 <commutate+0x698>)
 8002a52:	6813      	ldr	r3, [r2, #0]
 8002a54:	438b      	bics	r3, r1
 8002a56:	3901      	subs	r1, #1
 8002a58:	430b      	orrs	r3, r1
 8002a5a:	2190      	movs	r1, #144	; 0x90
 8002a5c:	6013      	str	r3, [r2, #0]
 8002a5e:	05c9      	lsls	r1, r1, #23
 8002a60:	680b      	ldr	r3, [r1, #0]
 8002a62:	4ac1      	ldr	r2, [pc, #772]	; (8002d68 <commutate+0x69c>)
 8002a64:	401a      	ands	r2, r3
 8002a66:	2380      	movs	r3, #128	; 0x80
 8002a68:	031b      	lsls	r3, r3, #12
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	600b      	str	r3, [r1, #0]
 8002a6e:	e6d1      	b.n	8002814 <commutate+0x148>
		step++;
 8002a70:	3301      	adds	r3, #1
 8002a72:	6023      	str	r3, [r4, #0]
		if (step > 6) {
 8002a74:	2b06      	cmp	r3, #6
 8002a76:	dd46      	ble.n	8002b06 <commutate+0x43a>
		if (step == 1 || step == 3 || step == 5) {
 8002a78:	2301      	movs	r3, #1
			step = 1;
 8002a7a:	6022      	str	r2, [r4, #0]
			rising = 1;
 8002a7c:	2001      	movs	r0, #1
 8002a7e:	49bb      	ldr	r1, [pc, #748]	; (8002d6c <commutate+0x6a0>)
 8002a80:	6008      	str	r0, [r1, #0]
		if (step == 2 || step == 4 || step == 6) {
 8002a82:	2a02      	cmp	r2, #2
 8002a84:	d00c      	beq.n	8002aa0 <commutate+0x3d4>
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	d00a      	beq.n	8002aa0 <commutate+0x3d4>
 8002a8a:	6823      	ldr	r3, [r4, #0]
 8002a8c:	e63b      	b.n	8002706 <commutate+0x3a>
	}


	comStep(step);
	changeCompInput();
	zcfound = 0;
 8002a8e:	4bb8      	ldr	r3, [pc, #736]	; (8002d70 <commutate+0x6a4>)
 8002a90:	6018      	str	r0, [r3, #0]
	falseAlarm = 0;
 8002a92:	4bb8      	ldr	r3, [pc, #736]	; (8002d74 <commutate+0x6a8>)
 8002a94:	6018      	str	r0, [r3, #0]
	compCount = 0;
 8002a96:	4bb8      	ldr	r3, [pc, #736]	; (8002d78 <commutate+0x6ac>)
 8002a98:	6018      	str	r0, [r3, #0]
	upcompCount = 0;
 8002a9a:	4bb8      	ldr	r3, [pc, #736]	; (8002d7c <commutate+0x6b0>)
 8002a9c:	6018      	str	r0, [r3, #0]
	//	TIM2->CNT = 0;
}
 8002a9e:	bd70      	pop	{r4, r5, r6, pc}
			rising = 0;
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	4bb2      	ldr	r3, [pc, #712]	; (8002d6c <commutate+0x6a0>)
 8002aa4:	601a      	str	r2, [r3, #0]
 8002aa6:	6823      	ldr	r3, [r4, #0]
	if (newStep == 1) {			//A-B
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d000      	beq.n	8002aae <commutate+0x3e2>
 8002aac:	e66c      	b.n	8002788 <commutate+0xbc>
		phaseA(pwm);
 8002aae:	4bb4      	ldr	r3, [pc, #720]	; (8002d80 <commutate+0x6b4>)
 8002ab0:	681a      	ldr	r2, [r3, #0]
	if (newPhase == 1) {
 8002ab2:	2a01      	cmp	r2, #1
 8002ab4:	d100      	bne.n	8002ab8 <commutate+0x3ec>
 8002ab6:	e144      	b.n	8002d42 <commutate+0x676>
	if (newPhase == 2) {
 8002ab8:	2a02      	cmp	r2, #2
 8002aba:	d100      	bne.n	8002abe <commutate+0x3f2>
 8002abc:	e138      	b.n	8002d30 <commutate+0x664>
	if (newPhase == 3) {          // low mosfet on
 8002abe:	2a03      	cmp	r2, #3
 8002ac0:	d100      	bne.n	8002ac4 <commutate+0x3f8>
 8002ac2:	e121      	b.n	8002d08 <commutate+0x63c>
		phaseB(lowside);
 8002ac4:	4baf      	ldr	r3, [pc, #700]	; (8002d84 <commutate+0x6b8>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
	if (newPhase == 1) {  // pwm
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d100      	bne.n	8002ace <commutate+0x402>
 8002acc:	e10b      	b.n	8002ce6 <commutate+0x61a>
	if (newPhase == 2) {            // floating
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d100      	bne.n	8002ad4 <commutate+0x408>
 8002ad2:	e0fc      	b.n	8002cce <commutate+0x602>
	if (newPhase == 3) {              // lowside
 8002ad4:	2b03      	cmp	r3, #3
 8002ad6:	d100      	bne.n	8002ada <commutate+0x40e>
 8002ad8:	e0e3      	b.n	8002ca2 <commutate+0x5d6>
		phaseC(floating);
 8002ada:	4bab      	ldr	r3, [pc, #684]	; (8002d88 <commutate+0x6bc>)
 8002adc:	681a      	ldr	r2, [r3, #0]
	if (newPhase == 1) {
 8002ade:	2a01      	cmp	r2, #1
 8002ae0:	d100      	bne.n	8002ae4 <commutate+0x418>
 8002ae2:	e6c1      	b.n	8002868 <commutate+0x19c>
	if (newPhase == 2) {
 8002ae4:	2a02      	cmp	r2, #2
 8002ae6:	d100      	bne.n	8002aea <commutate+0x41e>
 8002ae8:	e730      	b.n	800294c <commutate+0x280>
	if (newPhase == 3) {
 8002aea:	2301      	movs	r3, #1
 8002aec:	2a03      	cmp	r2, #3
 8002aee:	d000      	beq.n	8002af2 <commutate+0x426>
 8002af0:	e614      	b.n	800271c <commutate+0x50>
 8002af2:	200c      	movs	r0, #12
 8002af4:	499b      	ldr	r1, [pc, #620]	; (8002d64 <commutate+0x698>)
 8002af6:	680a      	ldr	r2, [r1, #0]
 8002af8:	4382      	bics	r2, r0
 8002afa:	3808      	subs	r0, #8
 8002afc:	4302      	orrs	r2, r0
 8002afe:	600a      	str	r2, [r1, #0]
		GPIOB->BSRR = GPIO_PIN_1;
 8002b00:	2202      	movs	r2, #2
 8002b02:	618a      	str	r2, [r1, #24]
 8002b04:	e044      	b.n	8002b90 <commutate+0x4c4>
		if (step == 1 || step == 3 || step == 5) {
 8002b06:	2102      	movs	r1, #2
 8002b08:	0018      	movs	r0, r3
 8002b0a:	4388      	bics	r0, r1
 8002b0c:	2801      	cmp	r0, #1
 8002b0e:	d100      	bne.n	8002b12 <commutate+0x446>
 8002b10:	e0c5      	b.n	8002c9e <commutate+0x5d2>
 8002b12:	2b05      	cmp	r3, #5
 8002b14:	d0b2      	beq.n	8002a7c <commutate+0x3b0>
 8002b16:	2204      	movs	r2, #4
 8002b18:	0019      	movs	r1, r3
 8002b1a:	4391      	bics	r1, r2
 8002b1c:	000a      	movs	r2, r1
 8002b1e:	e7b0      	b.n	8002a82 <commutate+0x3b6>
		phaseA(lowside);
 8002b20:	4a98      	ldr	r2, [pc, #608]	; (8002d84 <commutate+0x6b8>)
 8002b22:	6812      	ldr	r2, [r2, #0]
	if (newPhase == 1) {
 8002b24:	2a01      	cmp	r2, #1
 8002b26:	d100      	bne.n	8002b2a <commutate+0x45e>
 8002b28:	e187      	b.n	8002e3a <commutate+0x76e>
	if (newPhase == 2) {
 8002b2a:	2a02      	cmp	r2, #2
 8002b2c:	d100      	bne.n	8002b30 <commutate+0x464>
 8002b2e:	e17b      	b.n	8002e28 <commutate+0x75c>
	if (newPhase == 3) {          // low mosfet on
 8002b30:	2a03      	cmp	r2, #3
 8002b32:	d100      	bne.n	8002b36 <commutate+0x46a>
 8002b34:	e163      	b.n	8002dfe <commutate+0x732>
		phaseB(floating);
 8002b36:	4b94      	ldr	r3, [pc, #592]	; (8002d88 <commutate+0x6bc>)
 8002b38:	681b      	ldr	r3, [r3, #0]
	if (newPhase == 1) {  // pwm
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d100      	bne.n	8002b40 <commutate+0x474>
 8002b3e:	e14d      	b.n	8002ddc <commutate+0x710>
	if (newPhase == 2) {            // floating
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d100      	bne.n	8002b46 <commutate+0x47a>
 8002b44:	e13e      	b.n	8002dc4 <commutate+0x6f8>
	if (newPhase == 3) {              // lowside
 8002b46:	2b03      	cmp	r3, #3
 8002b48:	d100      	bne.n	8002b4c <commutate+0x480>
 8002b4a:	e125      	b.n	8002d98 <commutate+0x6cc>
		phaseC(pwm);
 8002b4c:	4b8c      	ldr	r3, [pc, #560]	; (8002d80 <commutate+0x6b4>)
 8002b4e:	681a      	ldr	r2, [r3, #0]
	if (newPhase == 1) {
 8002b50:	2a01      	cmp	r2, #1
 8002b52:	d000      	beq.n	8002b56 <commutate+0x48a>
 8002b54:	e66d      	b.n	8002832 <commutate+0x166>
 8002b56:	e687      	b.n	8002868 <commutate+0x19c>
 8002b58:	4982      	ldr	r1, [pc, #520]	; (8002d64 <commutate+0x698>)
 8002b5a:	680b      	ldr	r3, [r1, #0]
 8002b5c:	4393      	bics	r3, r2
 8002b5e:	3a02      	subs	r2, #2
 8002b60:	4313      	orrs	r3, r2
 8002b62:	600b      	str	r3, [r1, #0]
		GPIOB->BSRR = GPIO_PIN_0;
 8002b64:	618a      	str	r2, [r1, #24]
 8002b66:	2390      	movs	r3, #144	; 0x90
 8002b68:	05db      	lsls	r3, r3, #23
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	497e      	ldr	r1, [pc, #504]	; (8002d68 <commutate+0x69c>)
 8002b6e:	4011      	ands	r1, r2
 8002b70:	2280      	movs	r2, #128	; 0x80
 8002b72:	02d2      	lsls	r2, r2, #11
 8002b74:	430a      	orrs	r2, r1
 8002b76:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_9;
 8002b78:	2280      	movs	r2, #128	; 0x80
 8002b7a:	0092      	lsls	r2, r2, #2
 8002b7c:	629a      	str	r2, [r3, #40]	; 0x28
 8002b7e:	e71b      	b.n	80029b8 <commutate+0x2ec>
 8002b80:	200c      	movs	r0, #12
 8002b82:	4978      	ldr	r1, [pc, #480]	; (8002d64 <commutate+0x698>)
 8002b84:	680a      	ldr	r2, [r1, #0]
 8002b86:	4382      	bics	r2, r0
 8002b88:	3808      	subs	r0, #8
 8002b8a:	4302      	orrs	r2, r0
 8002b8c:	600a      	str	r2, [r1, #0]
		GPIOB->BRR = GPIO_PIN_1;
 8002b8e:	628b      	str	r3, [r1, #40]	; 0x28
 8002b90:	2290      	movs	r2, #144	; 0x90
 8002b92:	05d2      	lsls	r2, r2, #23
 8002b94:	6811      	ldr	r1, [r2, #0]
 8002b96:	487d      	ldr	r0, [pc, #500]	; (8002d8c <commutate+0x6c0>)
 8002b98:	4008      	ands	r0, r1
 8002b9a:	2180      	movs	r1, #128	; 0x80
 8002b9c:	0349      	lsls	r1, r1, #13
 8002b9e:	4301      	orrs	r1, r0
 8002ba0:	6011      	str	r1, [r2, #0]
		GPIOA->BRR = GPIO_PIN_10;
 8002ba2:	2180      	movs	r1, #128	; 0x80
 8002ba4:	00c9      	lsls	r1, r1, #3
 8002ba6:	6291      	str	r1, [r2, #40]	; 0x28
 8002ba8:	e5b8      	b.n	800271c <commutate+0x50>
 8002baa:	2390      	movs	r3, #144	; 0x90
 8002bac:	05db      	lsls	r3, r3, #23
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	4977      	ldr	r1, [pc, #476]	; (8002d90 <commutate+0x6c4>)
 8002bb2:	4011      	ands	r1, r2
 8002bb4:	2280      	movs	r2, #128	; 0x80
 8002bb6:	01d2      	lsls	r2, r2, #7
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	601a      	str	r2, [r3, #0]
		GPIOA->BSRR = GPIO_PIN_7;
 8002bbc:	2280      	movs	r2, #128	; 0x80
 8002bbe:	619a      	str	r2, [r3, #24]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	4974      	ldr	r1, [pc, #464]	; (8002d94 <commutate+0x6c8>)
 8002bc4:	4011      	ands	r1, r2
 8002bc6:	2280      	movs	r2, #128	; 0x80
 8002bc8:	0252      	lsls	r2, r2, #9
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_8;
 8002bce:	2280      	movs	r2, #128	; 0x80
 8002bd0:	0052      	lsls	r2, r2, #1
 8002bd2:	629a      	str	r2, [r3, #40]	; 0x28
 8002bd4:	e5f0      	b.n	80027b8 <commutate+0xec>
 8002bd6:	2390      	movs	r3, #144	; 0x90
 8002bd8:	05db      	lsls	r3, r3, #23
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	496c      	ldr	r1, [pc, #432]	; (8002d90 <commutate+0x6c4>)
 8002bde:	4011      	ands	r1, r2
 8002be0:	2280      	movs	r2, #128	; 0x80
 8002be2:	01d2      	lsls	r2, r2, #7
 8002be4:	430a      	orrs	r2, r1
 8002be6:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_7;
 8002be8:	2280      	movs	r2, #128	; 0x80
 8002bea:	629a      	str	r2, [r3, #40]	; 0x28
 8002bec:	e7e8      	b.n	8002bc0 <commutate+0x4f4>
 8002bee:	2390      	movs	r3, #144	; 0x90
 8002bf0:	05db      	lsls	r3, r3, #23
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	4966      	ldr	r1, [pc, #408]	; (8002d90 <commutate+0x6c4>)
 8002bf6:	4011      	ands	r1, r2
 8002bf8:	2280      	movs	r2, #128	; 0x80
 8002bfa:	0212      	lsls	r2, r2, #8
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	601a      	str	r2, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	4964      	ldr	r1, [pc, #400]	; (8002d94 <commutate+0x6c8>)
 8002c04:	4011      	ands	r1, r2
 8002c06:	2280      	movs	r2, #128	; 0x80
 8002c08:	0292      	lsls	r2, r2, #10
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	e5d3      	b.n	80027b8 <commutate+0xec>
 8002c10:	4954      	ldr	r1, [pc, #336]	; (8002d64 <commutate+0x698>)
 8002c12:	680b      	ldr	r3, [r1, #0]
 8002c14:	4393      	bics	r3, r2
 8002c16:	3a02      	subs	r2, #2
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	600b      	str	r3, [r1, #0]
		GPIOB->BSRR = GPIO_PIN_0;
 8002c1c:	618a      	str	r2, [r1, #24]
 8002c1e:	2390      	movs	r3, #144	; 0x90
 8002c20:	05db      	lsls	r3, r3, #23
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	4950      	ldr	r1, [pc, #320]	; (8002d68 <commutate+0x69c>)
 8002c26:	4011      	ands	r1, r2
 8002c28:	2280      	movs	r2, #128	; 0x80
 8002c2a:	02d2      	lsls	r2, r2, #11
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_9;
 8002c30:	2280      	movs	r2, #128	; 0x80
 8002c32:	0092      	lsls	r2, r2, #2
 8002c34:	629a      	str	r2, [r3, #40]	; 0x28
 8002c36:	e5b4      	b.n	80027a2 <commutate+0xd6>
 8002c38:	2103      	movs	r1, #3
 8002c3a:	4a4a      	ldr	r2, [pc, #296]	; (8002d64 <commutate+0x698>)
 8002c3c:	6813      	ldr	r3, [r2, #0]
 8002c3e:	438b      	bics	r3, r1
 8002c40:	3902      	subs	r1, #2
 8002c42:	430b      	orrs	r3, r1
 8002c44:	6013      	str	r3, [r2, #0]
		GPIOB->BRR = GPIO_PIN_0;
 8002c46:	6291      	str	r1, [r2, #40]	; 0x28
 8002c48:	e7e9      	b.n	8002c1e <commutate+0x552>
 8002c4a:	2003      	movs	r0, #3
 8002c4c:	4945      	ldr	r1, [pc, #276]	; (8002d64 <commutate+0x698>)
 8002c4e:	680a      	ldr	r2, [r1, #0]
 8002c50:	4382      	bics	r2, r0
 8002c52:	4313      	orrs	r3, r2
 8002c54:	600b      	str	r3, [r1, #0]
 8002c56:	2190      	movs	r1, #144	; 0x90
 8002c58:	05c9      	lsls	r1, r1, #23
 8002c5a:	680b      	ldr	r3, [r1, #0]
 8002c5c:	4a42      	ldr	r2, [pc, #264]	; (8002d68 <commutate+0x69c>)
 8002c5e:	401a      	ands	r2, r3
 8002c60:	2380      	movs	r3, #128	; 0x80
 8002c62:	031b      	lsls	r3, r3, #12
 8002c64:	4313      	orrs	r3, r2
 8002c66:	600b      	str	r3, [r1, #0]
 8002c68:	e59b      	b.n	80027a2 <commutate+0xd6>
 8002c6a:	2103      	movs	r1, #3
 8002c6c:	4a3d      	ldr	r2, [pc, #244]	; (8002d64 <commutate+0x698>)
 8002c6e:	6813      	ldr	r3, [r2, #0]
 8002c70:	438b      	bics	r3, r1
 8002c72:	3902      	subs	r1, #2
 8002c74:	430b      	orrs	r3, r1
 8002c76:	6013      	str	r3, [r2, #0]
 8002c78:	6291      	str	r1, [r2, #40]	; 0x28
 8002c7a:	e774      	b.n	8002b66 <commutate+0x49a>
 8002c7c:	2103      	movs	r1, #3
 8002c7e:	4a39      	ldr	r2, [pc, #228]	; (8002d64 <commutate+0x698>)
 8002c80:	6813      	ldr	r3, [r2, #0]
 8002c82:	438b      	bics	r3, r1
 8002c84:	3901      	subs	r1, #1
 8002c86:	430b      	orrs	r3, r1
 8002c88:	2190      	movs	r1, #144	; 0x90
 8002c8a:	6013      	str	r3, [r2, #0]
 8002c8c:	05c9      	lsls	r1, r1, #23
 8002c8e:	680b      	ldr	r3, [r1, #0]
 8002c90:	4a35      	ldr	r2, [pc, #212]	; (8002d68 <commutate+0x69c>)
 8002c92:	401a      	ands	r2, r3
 8002c94:	2380      	movs	r3, #128	; 0x80
 8002c96:	031b      	lsls	r3, r3, #12
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	600b      	str	r3, [r1, #0]
 8002c9c:	e68c      	b.n	80029b8 <commutate+0x2ec>
		if (step == 1 || step == 3 || step == 5) {
 8002c9e:	001a      	movs	r2, r3
 8002ca0:	e6ec      	b.n	8002a7c <commutate+0x3b0>
 8002ca2:	2390      	movs	r3, #144	; 0x90
 8002ca4:	05db      	lsls	r3, r3, #23
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	4939      	ldr	r1, [pc, #228]	; (8002d90 <commutate+0x6c4>)
 8002caa:	4011      	ands	r1, r2
 8002cac:	2280      	movs	r2, #128	; 0x80
 8002cae:	01d2      	lsls	r2, r2, #7
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	601a      	str	r2, [r3, #0]
		GPIOA->BSRR = GPIO_PIN_7;
 8002cb4:	2280      	movs	r2, #128	; 0x80
 8002cb6:	619a      	str	r2, [r3, #24]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	4936      	ldr	r1, [pc, #216]	; (8002d94 <commutate+0x6c8>)
 8002cbc:	4011      	ands	r1, r2
 8002cbe:	2280      	movs	r2, #128	; 0x80
 8002cc0:	0252      	lsls	r2, r2, #9
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_8;
 8002cc6:	2280      	movs	r2, #128	; 0x80
 8002cc8:	0052      	lsls	r2, r2, #1
 8002cca:	629a      	str	r2, [r3, #40]	; 0x28
 8002ccc:	e705      	b.n	8002ada <commutate+0x40e>
 8002cce:	2390      	movs	r3, #144	; 0x90
 8002cd0:	05db      	lsls	r3, r3, #23
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	492e      	ldr	r1, [pc, #184]	; (8002d90 <commutate+0x6c4>)
 8002cd6:	4011      	ands	r1, r2
 8002cd8:	2280      	movs	r2, #128	; 0x80
 8002cda:	01d2      	lsls	r2, r2, #7
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_7;
 8002ce0:	2280      	movs	r2, #128	; 0x80
 8002ce2:	629a      	str	r2, [r3, #40]	; 0x28
 8002ce4:	e7e8      	b.n	8002cb8 <commutate+0x5ec>
 8002ce6:	2390      	movs	r3, #144	; 0x90
 8002ce8:	05db      	lsls	r3, r3, #23
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	4928      	ldr	r1, [pc, #160]	; (8002d90 <commutate+0x6c4>)
 8002cee:	4011      	ands	r1, r2
 8002cf0:	2280      	movs	r2, #128	; 0x80
 8002cf2:	0212      	lsls	r2, r2, #8
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	4926      	ldr	r1, [pc, #152]	; (8002d94 <commutate+0x6c8>)
 8002cfc:	4011      	ands	r1, r2
 8002cfe:	2280      	movs	r2, #128	; 0x80
 8002d00:	0292      	lsls	r2, r2, #10
 8002d02:	430a      	orrs	r2, r1
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	e6e8      	b.n	8002ada <commutate+0x40e>
 8002d08:	4916      	ldr	r1, [pc, #88]	; (8002d64 <commutate+0x698>)
 8002d0a:	680b      	ldr	r3, [r1, #0]
 8002d0c:	4393      	bics	r3, r2
 8002d0e:	3a02      	subs	r2, #2
 8002d10:	4313      	orrs	r3, r2
 8002d12:	600b      	str	r3, [r1, #0]
		GPIOB->BSRR = GPIO_PIN_0;
 8002d14:	618a      	str	r2, [r1, #24]
 8002d16:	2390      	movs	r3, #144	; 0x90
 8002d18:	05db      	lsls	r3, r3, #23
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	4912      	ldr	r1, [pc, #72]	; (8002d68 <commutate+0x69c>)
 8002d1e:	4011      	ands	r1, r2
 8002d20:	2280      	movs	r2, #128	; 0x80
 8002d22:	02d2      	lsls	r2, r2, #11
 8002d24:	430a      	orrs	r2, r1
 8002d26:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_9;
 8002d28:	2280      	movs	r2, #128	; 0x80
 8002d2a:	0092      	lsls	r2, r2, #2
 8002d2c:	629a      	str	r2, [r3, #40]	; 0x28
 8002d2e:	e6c9      	b.n	8002ac4 <commutate+0x3f8>
 8002d30:	2103      	movs	r1, #3
 8002d32:	4a0c      	ldr	r2, [pc, #48]	; (8002d64 <commutate+0x698>)
 8002d34:	6813      	ldr	r3, [r2, #0]
 8002d36:	438b      	bics	r3, r1
 8002d38:	3902      	subs	r1, #2
 8002d3a:	430b      	orrs	r3, r1
 8002d3c:	6013      	str	r3, [r2, #0]
		GPIOB->BRR = GPIO_PIN_0;
 8002d3e:	6291      	str	r1, [r2, #40]	; 0x28
 8002d40:	e7e9      	b.n	8002d16 <commutate+0x64a>
 8002d42:	2103      	movs	r1, #3
 8002d44:	4a07      	ldr	r2, [pc, #28]	; (8002d64 <commutate+0x698>)
 8002d46:	6813      	ldr	r3, [r2, #0]
 8002d48:	438b      	bics	r3, r1
 8002d4a:	3901      	subs	r1, #1
 8002d4c:	430b      	orrs	r3, r1
 8002d4e:	2190      	movs	r1, #144	; 0x90
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	05c9      	lsls	r1, r1, #23
 8002d54:	680b      	ldr	r3, [r1, #0]
 8002d56:	4a04      	ldr	r2, [pc, #16]	; (8002d68 <commutate+0x69c>)
 8002d58:	401a      	ands	r2, r3
 8002d5a:	2380      	movs	r3, #128	; 0x80
 8002d5c:	031b      	lsls	r3, r3, #12
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	600b      	str	r3, [r1, #0]
 8002d62:	e6af      	b.n	8002ac4 <commutate+0x3f8>
 8002d64:	48000400 	.word	0x48000400
 8002d68:	fff3ffff 	.word	0xfff3ffff
 8002d6c:	20000020 	.word	0x20000020
 8002d70:	2000003c 	.word	0x2000003c
 8002d74:	200000d0 	.word	0x200000d0
 8002d78:	2000007c 	.word	0x2000007c
 8002d7c:	20000114 	.word	0x20000114
 8002d80:	2000001c 	.word	0x2000001c
 8002d84:	20000018 	.word	0x20000018
 8002d88:	2000000c 	.word	0x2000000c
 8002d8c:	ffcfffff 	.word	0xffcfffff
 8002d90:	ffff3fff 	.word	0xffff3fff
 8002d94:	fffcffff 	.word	0xfffcffff
 8002d98:	2390      	movs	r3, #144	; 0x90
 8002d9a:	05db      	lsls	r3, r3, #23
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	492f      	ldr	r1, [pc, #188]	; (8002e5c <commutate+0x790>)
 8002da0:	4011      	ands	r1, r2
 8002da2:	2280      	movs	r2, #128	; 0x80
 8002da4:	01d2      	lsls	r2, r2, #7
 8002da6:	430a      	orrs	r2, r1
 8002da8:	601a      	str	r2, [r3, #0]
		GPIOA->BSRR = GPIO_PIN_7;
 8002daa:	2280      	movs	r2, #128	; 0x80
 8002dac:	619a      	str	r2, [r3, #24]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	492b      	ldr	r1, [pc, #172]	; (8002e60 <commutate+0x794>)
 8002db2:	4011      	ands	r1, r2
 8002db4:	2280      	movs	r2, #128	; 0x80
 8002db6:	0252      	lsls	r2, r2, #9
 8002db8:	430a      	orrs	r2, r1
 8002dba:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_8;
 8002dbc:	2280      	movs	r2, #128	; 0x80
 8002dbe:	0052      	lsls	r2, r2, #1
 8002dc0:	629a      	str	r2, [r3, #40]	; 0x28
 8002dc2:	e6c3      	b.n	8002b4c <commutate+0x480>
 8002dc4:	2390      	movs	r3, #144	; 0x90
 8002dc6:	05db      	lsls	r3, r3, #23
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	4924      	ldr	r1, [pc, #144]	; (8002e5c <commutate+0x790>)
 8002dcc:	4011      	ands	r1, r2
 8002dce:	2280      	movs	r2, #128	; 0x80
 8002dd0:	01d2      	lsls	r2, r2, #7
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_7;
 8002dd6:	2280      	movs	r2, #128	; 0x80
 8002dd8:	629a      	str	r2, [r3, #40]	; 0x28
 8002dda:	e7e8      	b.n	8002dae <commutate+0x6e2>
 8002ddc:	2390      	movs	r3, #144	; 0x90
 8002dde:	05db      	lsls	r3, r3, #23
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	491e      	ldr	r1, [pc, #120]	; (8002e5c <commutate+0x790>)
 8002de4:	4011      	ands	r1, r2
 8002de6:	2280      	movs	r2, #128	; 0x80
 8002de8:	0212      	lsls	r2, r2, #8
 8002dea:	430a      	orrs	r2, r1
 8002dec:	601a      	str	r2, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	491b      	ldr	r1, [pc, #108]	; (8002e60 <commutate+0x794>)
 8002df2:	4011      	ands	r1, r2
 8002df4:	2280      	movs	r2, #128	; 0x80
 8002df6:	0292      	lsls	r2, r2, #10
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	e6a6      	b.n	8002b4c <commutate+0x480>
 8002dfe:	4919      	ldr	r1, [pc, #100]	; (8002e64 <commutate+0x798>)
 8002e00:	680a      	ldr	r2, [r1, #0]
 8002e02:	439a      	bics	r2, r3
 8002e04:	0013      	movs	r3, r2
 8002e06:	2201      	movs	r2, #1
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	600b      	str	r3, [r1, #0]
		GPIOB->BSRR = GPIO_PIN_0;
 8002e0c:	618a      	str	r2, [r1, #24]
 8002e0e:	2390      	movs	r3, #144	; 0x90
 8002e10:	05db      	lsls	r3, r3, #23
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	4914      	ldr	r1, [pc, #80]	; (8002e68 <commutate+0x79c>)
 8002e16:	4011      	ands	r1, r2
 8002e18:	2280      	movs	r2, #128	; 0x80
 8002e1a:	02d2      	lsls	r2, r2, #11
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_9;
 8002e20:	2280      	movs	r2, #128	; 0x80
 8002e22:	0092      	lsls	r2, r2, #2
 8002e24:	629a      	str	r2, [r3, #40]	; 0x28
 8002e26:	e686      	b.n	8002b36 <commutate+0x46a>
 8002e28:	490e      	ldr	r1, [pc, #56]	; (8002e64 <commutate+0x798>)
 8002e2a:	680a      	ldr	r2, [r1, #0]
 8002e2c:	439a      	bics	r2, r3
 8002e2e:	0013      	movs	r3, r2
 8002e30:	2201      	movs	r2, #1
 8002e32:	4313      	orrs	r3, r2
 8002e34:	600b      	str	r3, [r1, #0]
		GPIOB->BRR = GPIO_PIN_0;
 8002e36:	628a      	str	r2, [r1, #40]	; 0x28
 8002e38:	e7e9      	b.n	8002e0e <commutate+0x742>
 8002e3a:	490a      	ldr	r1, [pc, #40]	; (8002e64 <commutate+0x798>)
 8002e3c:	680a      	ldr	r2, [r1, #0]
 8002e3e:	439a      	bics	r2, r3
 8002e40:	0013      	movs	r3, r2
 8002e42:	2202      	movs	r2, #2
 8002e44:	4313      	orrs	r3, r2
 8002e46:	600b      	str	r3, [r1, #0]
 8002e48:	2190      	movs	r1, #144	; 0x90
 8002e4a:	05c9      	lsls	r1, r1, #23
 8002e4c:	680b      	ldr	r3, [r1, #0]
 8002e4e:	4a06      	ldr	r2, [pc, #24]	; (8002e68 <commutate+0x79c>)
 8002e50:	401a      	ands	r2, r3
 8002e52:	2380      	movs	r3, #128	; 0x80
 8002e54:	031b      	lsls	r3, r3, #12
 8002e56:	4313      	orrs	r3, r2
 8002e58:	600b      	str	r3, [r1, #0]
 8002e5a:	e66c      	b.n	8002b36 <commutate+0x46a>
 8002e5c:	ffff3fff 	.word	0xffff3fff
 8002e60:	fffcffff 	.word	0xfffcffff
 8002e64:	48000400 	.word	0x48000400
 8002e68:	fff3ffff 	.word	0xfff3ffff

08002e6c <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { // for forced commutation -- open loop

	if (htim->Instance == TIM2)
 8002e6c:	2280      	movs	r2, #128	; 0x80
 8002e6e:	6803      	ldr	r3, [r0, #0]
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { // for forced commutation -- open loop
 8002e70:	b510      	push	{r4, lr}
	if (htim->Instance == TIM2)
 8002e72:	05d2      	lsls	r2, r2, #23
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d000      	beq.n	8002e7a <HAL_TIM_PeriodElapsedCallback+0xe>
				//				falseAlarm = 0;
				//				compCount = 0;
			}
		}
	}
}
 8002e78:	bd10      	pop	{r4, pc}
		if (!sensorless) {
 8002e7a:	4a0a      	ldr	r2, [pc, #40]	; (8002ea4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002e7c:	6812      	ldr	r2, [r2, #0]
 8002e7e:	2a00      	cmp	r2, #0
 8002e80:	d1fa      	bne.n	8002e78 <HAL_TIM_PeriodElapsedCallback+0xc>
			waitTime = TIM2->ARR / 2;
 8002e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e84:	4a08      	ldr	r2, [pc, #32]	; (8002ea8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002e86:	085b      	lsrs	r3, r3, #1
 8002e88:	6013      	str	r3, [r2, #0]
			if (running == 1) {
 8002e8a:	4b08      	ldr	r3, [pc, #32]	; (8002eac <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d1f2      	bne.n	8002e78 <HAL_TIM_PeriodElapsedCallback+0xc>
				GPIOA->BRR = GPIO_PIN_15;
 8002e92:	2280      	movs	r2, #128	; 0x80
 8002e94:	2390      	movs	r3, #144	; 0x90
 8002e96:	0212      	lsls	r2, r2, #8
 8002e98:	05db      	lsls	r3, r3, #23
 8002e9a:	629a      	str	r2, [r3, #40]	; 0x28
				commutate();
 8002e9c:	f7ff fc16 	bl	80026cc <commutate>
}
 8002ea0:	e7ea      	b.n	8002e78 <HAL_TIM_PeriodElapsedCallback+0xc>
 8002ea2:	46c0      	nop			; (mov r8, r8)
 8002ea4:	20000104 	.word	0x20000104
 8002ea8:	20000124 	.word	0x20000124
 8002eac:	20000100 	.word	0x20000100

08002eb0 <startMotor>:



void startMotor() {

	TIM1->CCR1 = 110;				// set duty cycle to 110 out of 999 to start.
 8002eb0:	226e      	movs	r2, #110	; 0x6e
void startMotor() {
 8002eb2:	b570      	push	{r4, r5, r6, lr}
	TIM1->CCR2 = 110;
	TIM1->CCR3 = 110;

	for (int i = 10; i > 0; i--){
 8002eb4:	240a      	movs	r4, #10
	TIM1->CCR1 = 110;				// set duty cycle to 110 out of 999 to start.
 8002eb6:	4b11      	ldr	r3, [pc, #68]	; (8002efc <startMotor+0x4c>)
 8002eb8:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 110;
 8002eba:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 110;
 8002ebc:	63da      	str	r2, [r3, #60]	; 0x3c
		//		step++;
		//		if (step > 6) {
		//		step=1;
		//		}
		//		comStep(step);
		commutate();
 8002ebe:	f7ff fc05 	bl	80026cc <commutate>
		HAL_Delay(i);
 8002ec2:	0020      	movs	r0, r4
	for (int i = 10; i > 0; i--){
 8002ec4:	3c01      	subs	r4, #1
		HAL_Delay(i);
 8002ec6:	f7fd fac5 	bl	8000454 <HAL_Delay>
	for (int i = 10; i > 0; i--){
 8002eca:	2c00      	cmp	r4, #0
 8002ecc:	d1f7      	bne.n	8002ebe <startMotor+0xe>


	}
	zcfound = 1; //supress bemf detection for speedup
 8002ece:	2501      	movs	r5, #1

	TIM2->ARR = tim2_start_arr;
	commutation_interval = tim2_start_arr- 1000;
 8002ed0:	490b      	ldr	r1, [pc, #44]	; (8002f00 <startMotor+0x50>)
	TIM2->ARR = tim2_start_arr;
 8002ed2:	2280      	movs	r2, #128	; 0x80
	commutation_interval = tim2_start_arr- 1000;
 8002ed4:	468c      	mov	ip, r1
	zcfound = 1; //supress bemf detection for speedup
 8002ed6:	4b0b      	ldr	r3, [pc, #44]	; (8002f04 <startMotor+0x54>)
	TIM2->ARR = tim2_start_arr;
 8002ed8:	05d2      	lsls	r2, r2, #23
	zcfound = 1; //supress bemf detection for speedup
 8002eda:	601d      	str	r5, [r3, #0]
	TIM2->ARR = tim2_start_arr;
 8002edc:	4b0a      	ldr	r3, [pc, #40]	; (8002f08 <startMotor+0x58>)
	commutation_interval = tim2_start_arr- 1000;
 8002ede:	490b      	ldr	r1, [pc, #44]	; (8002f0c <startMotor+0x5c>)
	TIM2->ARR = tim2_start_arr;
 8002ee0:	681b      	ldr	r3, [r3, #0]
	TIM2->CNT = 0;
	HAL_Delay(5);
 8002ee2:	2005      	movs	r0, #5
	TIM2->ARR = tim2_start_arr;
 8002ee4:	62d3      	str	r3, [r2, #44]	; 0x2c
	commutation_interval = tim2_start_arr- 1000;
 8002ee6:	4463      	add	r3, ip
 8002ee8:	600b      	str	r3, [r1, #0]
	TIM2->CNT = 0;
 8002eea:	6254      	str	r4, [r2, #36]	; 0x24
	HAL_Delay(5);
 8002eec:	f7fd fab2 	bl	8000454 <HAL_Delay>
	running = 1;
 8002ef0:	4b07      	ldr	r3, [pc, #28]	; (8002f10 <startMotor+0x60>)
 8002ef2:	601d      	str	r5, [r3, #0]
	sensorless = 1;
 8002ef4:	4b07      	ldr	r3, [pc, #28]	; (8002f14 <startMotor+0x64>)
 8002ef6:	601d      	str	r5, [r3, #0]

	//					sensorless = 1;
}
 8002ef8:	bd70      	pop	{r4, r5, r6, pc}
 8002efa:	46c0      	nop			; (mov r8, r8)
 8002efc:	40012c00 	.word	0x40012c00
 8002f00:	fffffc18 	.word	0xfffffc18
 8002f04:	2000003c 	.word	0x2000003c
 8002f08:	20000030 	.word	0x20000030
 8002f0c:	20000078 	.word	0x20000078
 8002f10:	20000100 	.word	0x20000100
 8002f14:	20000104 	.word	0x20000104

08002f18 <HAL_COMP_TriggerCallback>:


void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp) {          // not used
	/* Turn On LED3 */

	if (TIM1->CNT > duty_cycle) {
 8002f18:	4b09      	ldr	r3, [pc, #36]	; (8002f40 <HAL_COMP_TriggerCallback+0x28>)
 8002f1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f1c:	4b09      	ldr	r3, [pc, #36]	; (8002f44 <HAL_COMP_TriggerCallback+0x2c>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d90c      	bls.n	8002f3e <HAL_COMP_TriggerCallback+0x26>
		GPIOA->BSRR = GPIO_PIN_15;
 8002f24:	2280      	movs	r2, #128	; 0x80
 8002f26:	2390      	movs	r3, #144	; 0x90
 8002f28:	0212      	lsls	r2, r2, #8
 8002f2a:	05db      	lsls	r3, r3, #23
 8002f2c:	619a      	str	r2, [r3, #24]

		if (!zcfound) {
 8002f2e:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <HAL_COMP_TriggerCallback+0x30>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d103      	bne.n	8002f3e <HAL_COMP_TriggerCallback+0x26>
			compCount++;
 8002f36:	4a05      	ldr	r2, [pc, #20]	; (8002f4c <HAL_COMP_TriggerCallback+0x34>)
 8002f38:	6813      	ldr	r3, [r2, #0]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	6013      	str	r3, [r2, #0]
		}
	}
}
 8002f3e:	4770      	bx	lr
 8002f40:	40012c00 	.word	0x40012c00
 8002f44:	20000004 	.word	0x20000004
 8002f48:	2000003c 	.word	0x2000003c
 8002f4c:	2000007c 	.word	0x2000007c

08002f50 <playStartupTune>:

void playStartupTune(){
	TIM1->PSC = 75;
 8002f50:	224b      	movs	r2, #75	; 0x4b
 8002f52:	4bba      	ldr	r3, [pc, #744]	; (800323c <playStartupTune+0x2ec>)
void playStartupTune(){
 8002f54:	b570      	push	{r4, r5, r6, lr}
	TIM1->PSC = 75;
 8002f56:	629a      	str	r2, [r3, #40]	; 0x28
	TIM1->CCR1 = 5;
 8002f58:	3a46      	subs	r2, #70	; 0x46
 8002f5a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 5;
 8002f5c:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 5;
 8002f5e:	63da      	str	r2, [r3, #60]	; 0x3c
		phaseA(pwm);
 8002f60:	4bb7      	ldr	r3, [pc, #732]	; (8003240 <playStartupTune+0x2f0>)
 8002f62:	681b      	ldr	r3, [r3, #0]
	if (newPhase == 1) {
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d100      	bne.n	8002f6a <playStartupTune+0x1a>
 8002f68:	e0b3      	b.n	80030d2 <playStartupTune+0x182>
	if (newPhase == 2) {
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d100      	bne.n	8002f70 <playStartupTune+0x20>
 8002f6e:	e0a7      	b.n	80030c0 <playStartupTune+0x170>
	if (newPhase == 3) {          // low mosfet on
 8002f70:	2b03      	cmp	r3, #3
 8002f72:	d113      	bne.n	8002f9c <playStartupTune+0x4c>
 8002f74:	49b3      	ldr	r1, [pc, #716]	; (8003244 <playStartupTune+0x2f4>)
 8002f76:	680a      	ldr	r2, [r1, #0]
 8002f78:	439a      	bics	r2, r3
 8002f7a:	0013      	movs	r3, r2
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	600b      	str	r3, [r1, #0]
		GPIOB->BSRR = GPIO_PIN_0;
 8002f82:	618a      	str	r2, [r1, #24]
 8002f84:	2390      	movs	r3, #144	; 0x90
 8002f86:	05db      	lsls	r3, r3, #23
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	49af      	ldr	r1, [pc, #700]	; (8003248 <playStartupTune+0x2f8>)
 8002f8c:	4011      	ands	r1, r2
 8002f8e:	2280      	movs	r2, #128	; 0x80
 8002f90:	02d2      	lsls	r2, r2, #11
 8002f92:	430a      	orrs	r2, r1
 8002f94:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_9;
 8002f96:	2280      	movs	r2, #128	; 0x80
 8002f98:	0092      	lsls	r2, r2, #2
 8002f9a:	629a      	str	r2, [r3, #40]	; 0x28
		phaseB(lowside);
 8002f9c:	4bab      	ldr	r3, [pc, #684]	; (800324c <playStartupTune+0x2fc>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
	if (newPhase == 1) {  // pwm
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d100      	bne.n	8002fa6 <playStartupTune+0x56>
 8002fa4:	e0aa      	b.n	80030fc <playStartupTune+0x1ac>
	if (newPhase == 2) {            // floating
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d100      	bne.n	8002fac <playStartupTune+0x5c>
 8002faa:	e0cd      	b.n	8003148 <playStartupTune+0x1f8>
	if (newPhase == 3) {              // lowside
 8002fac:	2b03      	cmp	r3, #3
 8002fae:	d114      	bne.n	8002fda <playStartupTune+0x8a>
 8002fb0:	2390      	movs	r3, #144	; 0x90
 8002fb2:	05db      	lsls	r3, r3, #23
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	49a6      	ldr	r1, [pc, #664]	; (8003250 <playStartupTune+0x300>)
 8002fb8:	4011      	ands	r1, r2
 8002fba:	2280      	movs	r2, #128	; 0x80
 8002fbc:	01d2      	lsls	r2, r2, #7
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	601a      	str	r2, [r3, #0]
		GPIOA->BSRR = GPIO_PIN_7;
 8002fc2:	2280      	movs	r2, #128	; 0x80
 8002fc4:	619a      	str	r2, [r3, #24]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	49a2      	ldr	r1, [pc, #648]	; (8003254 <playStartupTune+0x304>)
 8002fca:	4011      	ands	r1, r2
 8002fcc:	2280      	movs	r2, #128	; 0x80
 8002fce:	0252      	lsls	r2, r2, #9
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_8;
 8002fd4:	2280      	movs	r2, #128	; 0x80
 8002fd6:	0052      	lsls	r2, r2, #1
 8002fd8:	629a      	str	r2, [r3, #40]	; 0x28
		phaseC(floating);
 8002fda:	4c9f      	ldr	r4, [pc, #636]	; (8003258 <playStartupTune+0x308>)
 8002fdc:	6823      	ldr	r3, [r4, #0]
	if (newPhase == 1) {
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d100      	bne.n	8002fe4 <playStartupTune+0x94>
 8002fe2:	e0a0      	b.n	8003126 <playStartupTune+0x1d6>
	if (newPhase == 2) {
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d100      	bne.n	8002fea <playStartupTune+0x9a>
 8002fe8:	e11f      	b.n	800322a <playStartupTune+0x2da>
	if (newPhase == 3) {
 8002fea:	2b03      	cmp	r3, #3
 8002fec:	d114      	bne.n	8003018 <playStartupTune+0xc8>
 8002fee:	210c      	movs	r1, #12
 8002ff0:	4a94      	ldr	r2, [pc, #592]	; (8003244 <playStartupTune+0x2f4>)
 8002ff2:	6813      	ldr	r3, [r2, #0]
 8002ff4:	438b      	bics	r3, r1
 8002ff6:	3908      	subs	r1, #8
 8002ff8:	430b      	orrs	r3, r1
 8002ffa:	6013      	str	r3, [r2, #0]
		GPIOB->BSRR = GPIO_PIN_1;
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	6193      	str	r3, [r2, #24]
 8003000:	2390      	movs	r3, #144	; 0x90
 8003002:	05db      	lsls	r3, r3, #23
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	4995      	ldr	r1, [pc, #596]	; (800325c <playStartupTune+0x30c>)
 8003008:	4011      	ands	r1, r2
 800300a:	2280      	movs	r2, #128	; 0x80
 800300c:	0352      	lsls	r2, r2, #13
 800300e:	430a      	orrs	r2, r1
 8003010:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_10;
 8003012:	2280      	movs	r2, #128	; 0x80
 8003014:	00d2      	lsls	r2, r2, #3
 8003016:	629a      	str	r2, [r3, #40]	; 0x28
	comStep(1);
	HAL_Delay(100);
 8003018:	2064      	movs	r0, #100	; 0x64
 800301a:	f7fd fa1b 	bl	8000454 <HAL_Delay>
	TIM1->PSC = 50;
 800301e:	2332      	movs	r3, #50	; 0x32
 8003020:	4d86      	ldr	r5, [pc, #536]	; (800323c <playStartupTune+0x2ec>)
	HAL_Delay(100);
 8003022:	2064      	movs	r0, #100	; 0x64
	TIM1->PSC = 50;
 8003024:	62ab      	str	r3, [r5, #40]	; 0x28
	HAL_Delay(100);
 8003026:	f7fd fa15 	bl	8000454 <HAL_Delay>
	TIM1->PSC = 25;
 800302a:	2319      	movs	r3, #25
	HAL_Delay(100);
 800302c:	2064      	movs	r0, #100	; 0x64
	TIM1->PSC = 25;
 800302e:	62ab      	str	r3, [r5, #40]	; 0x28
	HAL_Delay(100);
 8003030:	f7fd fa10 	bl	8000454 <HAL_Delay>
	phaseA(floating);
 8003034:	6823      	ldr	r3, [r4, #0]
	if (newPhase == 1) {
 8003036:	2b01      	cmp	r3, #1
 8003038:	d100      	bne.n	800303c <playStartupTune+0xec>
 800303a:	e0ca      	b.n	80031d2 <playStartupTune+0x282>
	if (newPhase == 2) {
 800303c:	2b02      	cmp	r3, #2
 800303e:	d100      	bne.n	8003042 <playStartupTune+0xf2>
 8003040:	e08e      	b.n	8003160 <playStartupTune+0x210>
	if (newPhase == 3) {          // low mosfet on
 8003042:	2b03      	cmp	r3, #3
 8003044:	d138      	bne.n	80030b8 <playStartupTune+0x168>
 8003046:	4a7f      	ldr	r2, [pc, #508]	; (8003244 <playStartupTune+0x2f4>)
 8003048:	487f      	ldr	r0, [pc, #508]	; (8003248 <playStartupTune+0x2f8>)
 800304a:	6811      	ldr	r1, [r2, #0]
 800304c:	4399      	bics	r1, r3
 800304e:	000b      	movs	r3, r1
 8003050:	2101      	movs	r1, #1
 8003052:	430b      	orrs	r3, r1
 8003054:	6013      	str	r3, [r2, #0]
 8003056:	2390      	movs	r3, #144	; 0x90
		GPIOB->BSRR = GPIO_PIN_0;
 8003058:	6191      	str	r1, [r2, #24]
 800305a:	05db      	lsls	r3, r3, #23
 800305c:	6819      	ldr	r1, [r3, #0]
 800305e:	4008      	ands	r0, r1
 8003060:	2180      	movs	r1, #128	; 0x80
 8003062:	02c9      	lsls	r1, r1, #11
 8003064:	4301      	orrs	r1, r0
 8003066:	6019      	str	r1, [r3, #0]
		GPIOA->BRR = GPIO_PIN_9;
 8003068:	2180      	movs	r1, #128	; 0x80
 800306a:	0089      	lsls	r1, r1, #2
 800306c:	6299      	str	r1, [r3, #40]	; 0x28
 800306e:	6819      	ldr	r1, [r3, #0]
 8003070:	4877      	ldr	r0, [pc, #476]	; (8003250 <playStartupTune+0x300>)
 8003072:	4008      	ands	r0, r1
 8003074:	2180      	movs	r1, #128	; 0x80
 8003076:	01c9      	lsls	r1, r1, #7
 8003078:	4301      	orrs	r1, r0
 800307a:	6019      	str	r1, [r3, #0]
		GPIOA->BSRR = GPIO_PIN_7;
 800307c:	2180      	movs	r1, #128	; 0x80
 800307e:	6199      	str	r1, [r3, #24]
 8003080:	6819      	ldr	r1, [r3, #0]
 8003082:	4874      	ldr	r0, [pc, #464]	; (8003254 <playStartupTune+0x304>)
 8003084:	4008      	ands	r0, r1
 8003086:	2180      	movs	r1, #128	; 0x80
 8003088:	0249      	lsls	r1, r1, #9
 800308a:	4301      	orrs	r1, r0
 800308c:	6019      	str	r1, [r3, #0]
		GPIOA->BRR = GPIO_PIN_8;
 800308e:	2180      	movs	r1, #128	; 0x80
 8003090:	200c      	movs	r0, #12
 8003092:	0049      	lsls	r1, r1, #1
 8003094:	6299      	str	r1, [r3, #40]	; 0x28
 8003096:	6811      	ldr	r1, [r2, #0]
 8003098:	4381      	bics	r1, r0
 800309a:	3808      	subs	r0, #8
 800309c:	4301      	orrs	r1, r0
 800309e:	6011      	str	r1, [r2, #0]
		GPIOB->BSRR = GPIO_PIN_1;
 80030a0:	2102      	movs	r1, #2
 80030a2:	6191      	str	r1, [r2, #24]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	496d      	ldr	r1, [pc, #436]	; (800325c <playStartupTune+0x30c>)
 80030a8:	4011      	ands	r1, r2
 80030aa:	2280      	movs	r2, #128	; 0x80
 80030ac:	0352      	lsls	r2, r2, #13
 80030ae:	430a      	orrs	r2, r1
 80030b0:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_10;
 80030b2:	2280      	movs	r2, #128	; 0x80
 80030b4:	00d2      	lsls	r2, r2, #3
 80030b6:	629a      	str	r2, [r3, #40]	; 0x28
	allOff();
	TIM1->PSC = 0;
 80030b8:	2200      	movs	r2, #0
 80030ba:	4b60      	ldr	r3, [pc, #384]	; (800323c <playStartupTune+0x2ec>)
 80030bc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030be:	bd70      	pop	{r4, r5, r6, pc}
 80030c0:	2103      	movs	r1, #3
 80030c2:	4a60      	ldr	r2, [pc, #384]	; (8003244 <playStartupTune+0x2f4>)
 80030c4:	6813      	ldr	r3, [r2, #0]
 80030c6:	438b      	bics	r3, r1
 80030c8:	3902      	subs	r1, #2
 80030ca:	430b      	orrs	r3, r1
 80030cc:	6013      	str	r3, [r2, #0]
		GPIOB->BRR = GPIO_PIN_0;
 80030ce:	6291      	str	r1, [r2, #40]	; 0x28
 80030d0:	e758      	b.n	8002f84 <playStartupTune+0x34>
 80030d2:	2103      	movs	r1, #3
 80030d4:	4a5b      	ldr	r2, [pc, #364]	; (8003244 <playStartupTune+0x2f4>)
 80030d6:	6813      	ldr	r3, [r2, #0]
 80030d8:	438b      	bics	r3, r1
 80030da:	3901      	subs	r1, #1
 80030dc:	430b      	orrs	r3, r1
 80030de:	2190      	movs	r1, #144	; 0x90
 80030e0:	6013      	str	r3, [r2, #0]
 80030e2:	05c9      	lsls	r1, r1, #23
 80030e4:	680b      	ldr	r3, [r1, #0]
 80030e6:	4a58      	ldr	r2, [pc, #352]	; (8003248 <playStartupTune+0x2f8>)
 80030e8:	401a      	ands	r2, r3
 80030ea:	2380      	movs	r3, #128	; 0x80
 80030ec:	031b      	lsls	r3, r3, #12
 80030ee:	4313      	orrs	r3, r2
 80030f0:	600b      	str	r3, [r1, #0]
		phaseB(lowside);
 80030f2:	4b56      	ldr	r3, [pc, #344]	; (800324c <playStartupTune+0x2fc>)
 80030f4:	681b      	ldr	r3, [r3, #0]
	if (newPhase == 1) {  // pwm
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d000      	beq.n	80030fc <playStartupTune+0x1ac>
 80030fa:	e754      	b.n	8002fa6 <playStartupTune+0x56>
 80030fc:	2390      	movs	r3, #144	; 0x90
 80030fe:	05db      	lsls	r3, r3, #23
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	4953      	ldr	r1, [pc, #332]	; (8003250 <playStartupTune+0x300>)
		phaseC(floating);
 8003104:	4c54      	ldr	r4, [pc, #336]	; (8003258 <playStartupTune+0x308>)
 8003106:	4011      	ands	r1, r2
 8003108:	2280      	movs	r2, #128	; 0x80
 800310a:	0212      	lsls	r2, r2, #8
 800310c:	430a      	orrs	r2, r1
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	4950      	ldr	r1, [pc, #320]	; (8003254 <playStartupTune+0x304>)
 8003114:	4011      	ands	r1, r2
 8003116:	2280      	movs	r2, #128	; 0x80
 8003118:	0292      	lsls	r2, r2, #10
 800311a:	430a      	orrs	r2, r1
 800311c:	601a      	str	r2, [r3, #0]
 800311e:	6823      	ldr	r3, [r4, #0]
	if (newPhase == 1) {
 8003120:	2b01      	cmp	r3, #1
 8003122:	d000      	beq.n	8003126 <playStartupTune+0x1d6>
 8003124:	e75e      	b.n	8002fe4 <playStartupTune+0x94>
 8003126:	210c      	movs	r1, #12
 8003128:	4a46      	ldr	r2, [pc, #280]	; (8003244 <playStartupTune+0x2f4>)
 800312a:	6813      	ldr	r3, [r2, #0]
 800312c:	438b      	bics	r3, r1
 800312e:	3904      	subs	r1, #4
 8003130:	430b      	orrs	r3, r1
 8003132:	2190      	movs	r1, #144	; 0x90
 8003134:	6013      	str	r3, [r2, #0]
 8003136:	05c9      	lsls	r1, r1, #23
 8003138:	680b      	ldr	r3, [r1, #0]
 800313a:	4a48      	ldr	r2, [pc, #288]	; (800325c <playStartupTune+0x30c>)
 800313c:	401a      	ands	r2, r3
 800313e:	2380      	movs	r3, #128	; 0x80
 8003140:	039b      	lsls	r3, r3, #14
 8003142:	4313      	orrs	r3, r2
 8003144:	600b      	str	r3, [r1, #0]
 8003146:	e767      	b.n	8003018 <playStartupTune+0xc8>
 8003148:	2390      	movs	r3, #144	; 0x90
 800314a:	05db      	lsls	r3, r3, #23
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	4940      	ldr	r1, [pc, #256]	; (8003250 <playStartupTune+0x300>)
 8003150:	4011      	ands	r1, r2
 8003152:	2280      	movs	r2, #128	; 0x80
 8003154:	01d2      	lsls	r2, r2, #7
 8003156:	430a      	orrs	r2, r1
 8003158:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_7;
 800315a:	2280      	movs	r2, #128	; 0x80
 800315c:	629a      	str	r2, [r3, #40]	; 0x28
 800315e:	e732      	b.n	8002fc6 <playStartupTune+0x76>
 8003160:	2003      	movs	r0, #3
 8003162:	4938      	ldr	r1, [pc, #224]	; (8003244 <playStartupTune+0x2f4>)
 8003164:	4c38      	ldr	r4, [pc, #224]	; (8003248 <playStartupTune+0x2f8>)
 8003166:	680a      	ldr	r2, [r1, #0]
 8003168:	4382      	bics	r2, r0
 800316a:	3802      	subs	r0, #2
 800316c:	4302      	orrs	r2, r0
 800316e:	600a      	str	r2, [r1, #0]
 8003170:	2290      	movs	r2, #144	; 0x90
		GPIOB->BRR = GPIO_PIN_0;
 8003172:	6288      	str	r0, [r1, #40]	; 0x28
 8003174:	05d2      	lsls	r2, r2, #23
 8003176:	6810      	ldr	r0, [r2, #0]
 8003178:	4004      	ands	r4, r0
 800317a:	2080      	movs	r0, #128	; 0x80
 800317c:	02c0      	lsls	r0, r0, #11
 800317e:	4320      	orrs	r0, r4
 8003180:	6010      	str	r0, [r2, #0]
		GPIOA->BRR = GPIO_PIN_9;
 8003182:	2080      	movs	r0, #128	; 0x80
 8003184:	0080      	lsls	r0, r0, #2
 8003186:	6290      	str	r0, [r2, #40]	; 0x28
 8003188:	6810      	ldr	r0, [r2, #0]
 800318a:	4c31      	ldr	r4, [pc, #196]	; (8003250 <playStartupTune+0x300>)
 800318c:	4004      	ands	r4, r0
 800318e:	2080      	movs	r0, #128	; 0x80
 8003190:	01c0      	lsls	r0, r0, #7
 8003192:	4320      	orrs	r0, r4
 8003194:	6010      	str	r0, [r2, #0]
		GPIOA->BRR = GPIO_PIN_7;
 8003196:	2080      	movs	r0, #128	; 0x80
 8003198:	6290      	str	r0, [r2, #40]	; 0x28
 800319a:	6810      	ldr	r0, [r2, #0]
 800319c:	4c2d      	ldr	r4, [pc, #180]	; (8003254 <playStartupTune+0x304>)
 800319e:	4004      	ands	r4, r0
 80031a0:	2080      	movs	r0, #128	; 0x80
 80031a2:	0240      	lsls	r0, r0, #9
 80031a4:	4320      	orrs	r0, r4
 80031a6:	6010      	str	r0, [r2, #0]
		GPIOA->BRR = GPIO_PIN_8;
 80031a8:	2080      	movs	r0, #128	; 0x80
 80031aa:	240c      	movs	r4, #12
 80031ac:	0040      	lsls	r0, r0, #1
 80031ae:	6290      	str	r0, [r2, #40]	; 0x28
 80031b0:	6808      	ldr	r0, [r1, #0]
 80031b2:	43a0      	bics	r0, r4
 80031b4:	3c08      	subs	r4, #8
 80031b6:	4320      	orrs	r0, r4
 80031b8:	6008      	str	r0, [r1, #0]
		GPIOB->BRR = GPIO_PIN_1;
 80031ba:	628b      	str	r3, [r1, #40]	; 0x28
 80031bc:	6813      	ldr	r3, [r2, #0]
 80031be:	4927      	ldr	r1, [pc, #156]	; (800325c <playStartupTune+0x30c>)
 80031c0:	4019      	ands	r1, r3
 80031c2:	2380      	movs	r3, #128	; 0x80
 80031c4:	035b      	lsls	r3, r3, #13
 80031c6:	430b      	orrs	r3, r1
 80031c8:	6013      	str	r3, [r2, #0]
		GPIOA->BRR = GPIO_PIN_10;
 80031ca:	2380      	movs	r3, #128	; 0x80
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	6293      	str	r3, [r2, #40]	; 0x28
 80031d0:	e772      	b.n	80030b8 <playStartupTune+0x168>
 80031d2:	2203      	movs	r2, #3
 80031d4:	491b      	ldr	r1, [pc, #108]	; (8003244 <playStartupTune+0x2f4>)
 80031d6:	481c      	ldr	r0, [pc, #112]	; (8003248 <playStartupTune+0x2f8>)
 80031d8:	680b      	ldr	r3, [r1, #0]
 80031da:	4393      	bics	r3, r2
 80031dc:	3a01      	subs	r2, #1
 80031de:	4313      	orrs	r3, r2
 80031e0:	600b      	str	r3, [r1, #0]
 80031e2:	2390      	movs	r3, #144	; 0x90
 80031e4:	05db      	lsls	r3, r3, #23
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	4010      	ands	r0, r2
 80031ea:	2280      	movs	r2, #128	; 0x80
 80031ec:	0312      	lsls	r2, r2, #12
 80031ee:	4302      	orrs	r2, r0
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	4816      	ldr	r0, [pc, #88]	; (8003250 <playStartupTune+0x300>)
 80031f6:	4010      	ands	r0, r2
 80031f8:	2280      	movs	r2, #128	; 0x80
 80031fa:	0212      	lsls	r2, r2, #8
 80031fc:	4302      	orrs	r2, r0
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	4814      	ldr	r0, [pc, #80]	; (8003254 <playStartupTune+0x304>)
 8003204:	4010      	ands	r0, r2
 8003206:	2280      	movs	r2, #128	; 0x80
 8003208:	0292      	lsls	r2, r2, #10
 800320a:	4302      	orrs	r2, r0
 800320c:	200c      	movs	r0, #12
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	680a      	ldr	r2, [r1, #0]
 8003212:	4382      	bics	r2, r0
 8003214:	3804      	subs	r0, #4
 8003216:	4302      	orrs	r2, r0
 8003218:	600a      	str	r2, [r1, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	490f      	ldr	r1, [pc, #60]	; (800325c <playStartupTune+0x30c>)
 800321e:	4011      	ands	r1, r2
 8003220:	2280      	movs	r2, #128	; 0x80
 8003222:	0392      	lsls	r2, r2, #14
 8003224:	430a      	orrs	r2, r1
 8003226:	601a      	str	r2, [r3, #0]
 8003228:	e746      	b.n	80030b8 <playStartupTune+0x168>
 800322a:	200c      	movs	r0, #12
 800322c:	4905      	ldr	r1, [pc, #20]	; (8003244 <playStartupTune+0x2f4>)
 800322e:	680a      	ldr	r2, [r1, #0]
 8003230:	4382      	bics	r2, r0
 8003232:	3808      	subs	r0, #8
 8003234:	4302      	orrs	r2, r0
 8003236:	600a      	str	r2, [r1, #0]
		GPIOB->BRR = GPIO_PIN_1;
 8003238:	628b      	str	r3, [r1, #40]	; 0x28
 800323a:	e6e1      	b.n	8003000 <playStartupTune+0xb0>
 800323c:	40012c00 	.word	0x40012c00
 8003240:	2000001c 	.word	0x2000001c
 8003244:	48000400 	.word	0x48000400
 8003248:	fff3ffff 	.word	0xfff3ffff
 800324c:	20000018 	.word	0x20000018
 8003250:	ffff3fff 	.word	0xffff3fff
 8003254:	fffcffff 	.word	0xfffcffff
 8003258:	2000000c 	.word	0x2000000c
 800325c:	ffcfffff 	.word	0xffcfffff

08003260 <playInputTune>:

void playInputTune(){
	TIM1->PSC = 100;
 8003260:	2264      	movs	r2, #100	; 0x64
 8003262:	4bb8      	ldr	r3, [pc, #736]	; (8003544 <playInputTune+0x2e4>)
void playInputTune(){
 8003264:	b510      	push	{r4, lr}
	TIM1->PSC = 100;
 8003266:	629a      	str	r2, [r3, #40]	; 0x28
	TIM1->CCR1 = 5;
 8003268:	3a5f      	subs	r2, #95	; 0x5f
 800326a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 5;
 800326c:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 5;
 800326e:	63da      	str	r2, [r3, #60]	; 0x3c
		phaseA(pwm);
 8003270:	4bb5      	ldr	r3, [pc, #724]	; (8003548 <playInputTune+0x2e8>)
 8003272:	681b      	ldr	r3, [r3, #0]
	if (newPhase == 1) {
 8003274:	2b01      	cmp	r3, #1
 8003276:	d100      	bne.n	800327a <playInputTune+0x1a>
 8003278:	e0ae      	b.n	80033d8 <playInputTune+0x178>
	if (newPhase == 2) {
 800327a:	2b02      	cmp	r3, #2
 800327c:	d100      	bne.n	8003280 <playInputTune+0x20>
 800327e:	e0a2      	b.n	80033c6 <playInputTune+0x166>
	if (newPhase == 3) {          // low mosfet on
 8003280:	2b03      	cmp	r3, #3
 8003282:	d113      	bne.n	80032ac <playInputTune+0x4c>
 8003284:	49b1      	ldr	r1, [pc, #708]	; (800354c <playInputTune+0x2ec>)
 8003286:	680a      	ldr	r2, [r1, #0]
 8003288:	439a      	bics	r2, r3
 800328a:	0013      	movs	r3, r2
 800328c:	2201      	movs	r2, #1
 800328e:	4313      	orrs	r3, r2
 8003290:	600b      	str	r3, [r1, #0]
		GPIOB->BSRR = GPIO_PIN_0;
 8003292:	618a      	str	r2, [r1, #24]
 8003294:	2390      	movs	r3, #144	; 0x90
 8003296:	05db      	lsls	r3, r3, #23
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	49ad      	ldr	r1, [pc, #692]	; (8003550 <playInputTune+0x2f0>)
 800329c:	4011      	ands	r1, r2
 800329e:	2280      	movs	r2, #128	; 0x80
 80032a0:	02d2      	lsls	r2, r2, #11
 80032a2:	430a      	orrs	r2, r1
 80032a4:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_9;
 80032a6:	2280      	movs	r2, #128	; 0x80
 80032a8:	0092      	lsls	r2, r2, #2
 80032aa:	629a      	str	r2, [r3, #40]	; 0x28
		phaseB(lowside);
 80032ac:	4ba9      	ldr	r3, [pc, #676]	; (8003554 <playInputTune+0x2f4>)
 80032ae:	681b      	ldr	r3, [r3, #0]
	if (newPhase == 1) {  // pwm
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d100      	bne.n	80032b6 <playInputTune+0x56>
 80032b4:	e0a5      	b.n	8003402 <playInputTune+0x1a2>
	if (newPhase == 2) {            // floating
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d100      	bne.n	80032bc <playInputTune+0x5c>
 80032ba:	e0c8      	b.n	800344e <playInputTune+0x1ee>
	if (newPhase == 3) {              // lowside
 80032bc:	2b03      	cmp	r3, #3
 80032be:	d114      	bne.n	80032ea <playInputTune+0x8a>
 80032c0:	2390      	movs	r3, #144	; 0x90
 80032c2:	05db      	lsls	r3, r3, #23
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	49a4      	ldr	r1, [pc, #656]	; (8003558 <playInputTune+0x2f8>)
 80032c8:	4011      	ands	r1, r2
 80032ca:	2280      	movs	r2, #128	; 0x80
 80032cc:	01d2      	lsls	r2, r2, #7
 80032ce:	430a      	orrs	r2, r1
 80032d0:	601a      	str	r2, [r3, #0]
		GPIOA->BSRR = GPIO_PIN_7;
 80032d2:	2280      	movs	r2, #128	; 0x80
 80032d4:	619a      	str	r2, [r3, #24]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	49a0      	ldr	r1, [pc, #640]	; (800355c <playInputTune+0x2fc>)
 80032da:	4011      	ands	r1, r2
 80032dc:	2280      	movs	r2, #128	; 0x80
 80032de:	0252      	lsls	r2, r2, #9
 80032e0:	430a      	orrs	r2, r1
 80032e2:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_8;
 80032e4:	2280      	movs	r2, #128	; 0x80
 80032e6:	0052      	lsls	r2, r2, #1
 80032e8:	629a      	str	r2, [r3, #40]	; 0x28
		phaseC(floating);
 80032ea:	4c9d      	ldr	r4, [pc, #628]	; (8003560 <playInputTune+0x300>)
 80032ec:	6823      	ldr	r3, [r4, #0]
	if (newPhase == 1) {
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d100      	bne.n	80032f4 <playInputTune+0x94>
 80032f2:	e09b      	b.n	800342c <playInputTune+0x1cc>
	if (newPhase == 2) {
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d100      	bne.n	80032fa <playInputTune+0x9a>
 80032f8:	e11a      	b.n	8003530 <playInputTune+0x2d0>
	if (newPhase == 3) {
 80032fa:	2b03      	cmp	r3, #3
 80032fc:	d114      	bne.n	8003328 <playInputTune+0xc8>
 80032fe:	210c      	movs	r1, #12
 8003300:	4a92      	ldr	r2, [pc, #584]	; (800354c <playInputTune+0x2ec>)
 8003302:	6813      	ldr	r3, [r2, #0]
 8003304:	438b      	bics	r3, r1
 8003306:	3908      	subs	r1, #8
 8003308:	430b      	orrs	r3, r1
 800330a:	6013      	str	r3, [r2, #0]
		GPIOB->BSRR = GPIO_PIN_1;
 800330c:	2302      	movs	r3, #2
 800330e:	6193      	str	r3, [r2, #24]
 8003310:	2390      	movs	r3, #144	; 0x90
 8003312:	05db      	lsls	r3, r3, #23
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	4993      	ldr	r1, [pc, #588]	; (8003564 <playInputTune+0x304>)
 8003318:	4011      	ands	r1, r2
 800331a:	2280      	movs	r2, #128	; 0x80
 800331c:	0352      	lsls	r2, r2, #13
 800331e:	430a      	orrs	r2, r1
 8003320:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_10;
 8003322:	2280      	movs	r2, #128	; 0x80
 8003324:	00d2      	lsls	r2, r2, #3
 8003326:	629a      	str	r2, [r3, #40]	; 0x28
	comStep(1);
	HAL_Delay(100);
 8003328:	2064      	movs	r0, #100	; 0x64
 800332a:	f7fd f893 	bl	8000454 <HAL_Delay>
	TIM1->PSC = 50;
 800332e:	2232      	movs	r2, #50	; 0x32
 8003330:	4b84      	ldr	r3, [pc, #528]	; (8003544 <playInputTune+0x2e4>)
	HAL_Delay(100);
 8003332:	2064      	movs	r0, #100	; 0x64
	TIM1->PSC = 50;
 8003334:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_Delay(100);
 8003336:	f7fd f88d 	bl	8000454 <HAL_Delay>
	phaseA(floating);
 800333a:	6823      	ldr	r3, [r4, #0]
	if (newPhase == 1) {
 800333c:	2b01      	cmp	r3, #1
 800333e:	d100      	bne.n	8003342 <playInputTune+0xe2>
 8003340:	e0ca      	b.n	80034d8 <playInputTune+0x278>
	if (newPhase == 2) {
 8003342:	2b02      	cmp	r3, #2
 8003344:	d100      	bne.n	8003348 <playInputTune+0xe8>
 8003346:	e08e      	b.n	8003466 <playInputTune+0x206>
	if (newPhase == 3) {          // low mosfet on
 8003348:	2b03      	cmp	r3, #3
 800334a:	d138      	bne.n	80033be <playInputTune+0x15e>
 800334c:	4a7f      	ldr	r2, [pc, #508]	; (800354c <playInputTune+0x2ec>)
 800334e:	4880      	ldr	r0, [pc, #512]	; (8003550 <playInputTune+0x2f0>)
 8003350:	6811      	ldr	r1, [r2, #0]
 8003352:	4399      	bics	r1, r3
 8003354:	000b      	movs	r3, r1
 8003356:	2101      	movs	r1, #1
 8003358:	430b      	orrs	r3, r1
 800335a:	6013      	str	r3, [r2, #0]
 800335c:	2390      	movs	r3, #144	; 0x90
		GPIOB->BSRR = GPIO_PIN_0;
 800335e:	6191      	str	r1, [r2, #24]
 8003360:	05db      	lsls	r3, r3, #23
 8003362:	6819      	ldr	r1, [r3, #0]
 8003364:	4008      	ands	r0, r1
 8003366:	2180      	movs	r1, #128	; 0x80
 8003368:	02c9      	lsls	r1, r1, #11
 800336a:	4301      	orrs	r1, r0
 800336c:	6019      	str	r1, [r3, #0]
		GPIOA->BRR = GPIO_PIN_9;
 800336e:	2180      	movs	r1, #128	; 0x80
 8003370:	0089      	lsls	r1, r1, #2
 8003372:	6299      	str	r1, [r3, #40]	; 0x28
 8003374:	6819      	ldr	r1, [r3, #0]
 8003376:	4878      	ldr	r0, [pc, #480]	; (8003558 <playInputTune+0x2f8>)
 8003378:	4008      	ands	r0, r1
 800337a:	2180      	movs	r1, #128	; 0x80
 800337c:	01c9      	lsls	r1, r1, #7
 800337e:	4301      	orrs	r1, r0
 8003380:	6019      	str	r1, [r3, #0]
		GPIOA->BSRR = GPIO_PIN_7;
 8003382:	2180      	movs	r1, #128	; 0x80
 8003384:	6199      	str	r1, [r3, #24]
 8003386:	6819      	ldr	r1, [r3, #0]
 8003388:	4874      	ldr	r0, [pc, #464]	; (800355c <playInputTune+0x2fc>)
 800338a:	4008      	ands	r0, r1
 800338c:	2180      	movs	r1, #128	; 0x80
 800338e:	0249      	lsls	r1, r1, #9
 8003390:	4301      	orrs	r1, r0
 8003392:	6019      	str	r1, [r3, #0]
		GPIOA->BRR = GPIO_PIN_8;
 8003394:	2180      	movs	r1, #128	; 0x80
 8003396:	200c      	movs	r0, #12
 8003398:	0049      	lsls	r1, r1, #1
 800339a:	6299      	str	r1, [r3, #40]	; 0x28
 800339c:	6811      	ldr	r1, [r2, #0]
 800339e:	4381      	bics	r1, r0
 80033a0:	3808      	subs	r0, #8
 80033a2:	4301      	orrs	r1, r0
 80033a4:	6011      	str	r1, [r2, #0]
		GPIOB->BSRR = GPIO_PIN_1;
 80033a6:	2102      	movs	r1, #2
 80033a8:	6191      	str	r1, [r2, #24]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	496d      	ldr	r1, [pc, #436]	; (8003564 <playInputTune+0x304>)
 80033ae:	4011      	ands	r1, r2
 80033b0:	2280      	movs	r2, #128	; 0x80
 80033b2:	0352      	lsls	r2, r2, #13
 80033b4:	430a      	orrs	r2, r1
 80033b6:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_10;
 80033b8:	2280      	movs	r2, #128	; 0x80
 80033ba:	00d2      	lsls	r2, r2, #3
 80033bc:	629a      	str	r2, [r3, #40]	; 0x28
	allOff();
	TIM1->PSC = 0;
 80033be:	2200      	movs	r2, #0
 80033c0:	4b60      	ldr	r3, [pc, #384]	; (8003544 <playInputTune+0x2e4>)
 80033c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80033c4:	bd10      	pop	{r4, pc}
 80033c6:	2103      	movs	r1, #3
 80033c8:	4a60      	ldr	r2, [pc, #384]	; (800354c <playInputTune+0x2ec>)
 80033ca:	6813      	ldr	r3, [r2, #0]
 80033cc:	438b      	bics	r3, r1
 80033ce:	3902      	subs	r1, #2
 80033d0:	430b      	orrs	r3, r1
 80033d2:	6013      	str	r3, [r2, #0]
		GPIOB->BRR = GPIO_PIN_0;
 80033d4:	6291      	str	r1, [r2, #40]	; 0x28
 80033d6:	e75d      	b.n	8003294 <playInputTune+0x34>
 80033d8:	2103      	movs	r1, #3
 80033da:	4a5c      	ldr	r2, [pc, #368]	; (800354c <playInputTune+0x2ec>)
 80033dc:	6813      	ldr	r3, [r2, #0]
 80033de:	438b      	bics	r3, r1
 80033e0:	3901      	subs	r1, #1
 80033e2:	430b      	orrs	r3, r1
 80033e4:	2190      	movs	r1, #144	; 0x90
 80033e6:	6013      	str	r3, [r2, #0]
 80033e8:	05c9      	lsls	r1, r1, #23
 80033ea:	680b      	ldr	r3, [r1, #0]
 80033ec:	4a58      	ldr	r2, [pc, #352]	; (8003550 <playInputTune+0x2f0>)
 80033ee:	401a      	ands	r2, r3
 80033f0:	2380      	movs	r3, #128	; 0x80
 80033f2:	031b      	lsls	r3, r3, #12
 80033f4:	4313      	orrs	r3, r2
 80033f6:	600b      	str	r3, [r1, #0]
		phaseB(lowside);
 80033f8:	4b56      	ldr	r3, [pc, #344]	; (8003554 <playInputTune+0x2f4>)
 80033fa:	681b      	ldr	r3, [r3, #0]
	if (newPhase == 1) {  // pwm
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d000      	beq.n	8003402 <playInputTune+0x1a2>
 8003400:	e759      	b.n	80032b6 <playInputTune+0x56>
 8003402:	2390      	movs	r3, #144	; 0x90
 8003404:	05db      	lsls	r3, r3, #23
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	4953      	ldr	r1, [pc, #332]	; (8003558 <playInputTune+0x2f8>)
		phaseC(floating);
 800340a:	4c55      	ldr	r4, [pc, #340]	; (8003560 <playInputTune+0x300>)
 800340c:	4011      	ands	r1, r2
 800340e:	2280      	movs	r2, #128	; 0x80
 8003410:	0212      	lsls	r2, r2, #8
 8003412:	430a      	orrs	r2, r1
 8003414:	601a      	str	r2, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	4950      	ldr	r1, [pc, #320]	; (800355c <playInputTune+0x2fc>)
 800341a:	4011      	ands	r1, r2
 800341c:	2280      	movs	r2, #128	; 0x80
 800341e:	0292      	lsls	r2, r2, #10
 8003420:	430a      	orrs	r2, r1
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	6823      	ldr	r3, [r4, #0]
	if (newPhase == 1) {
 8003426:	2b01      	cmp	r3, #1
 8003428:	d000      	beq.n	800342c <playInputTune+0x1cc>
 800342a:	e763      	b.n	80032f4 <playInputTune+0x94>
 800342c:	210c      	movs	r1, #12
 800342e:	4a47      	ldr	r2, [pc, #284]	; (800354c <playInputTune+0x2ec>)
 8003430:	6813      	ldr	r3, [r2, #0]
 8003432:	438b      	bics	r3, r1
 8003434:	3904      	subs	r1, #4
 8003436:	430b      	orrs	r3, r1
 8003438:	2190      	movs	r1, #144	; 0x90
 800343a:	6013      	str	r3, [r2, #0]
 800343c:	05c9      	lsls	r1, r1, #23
 800343e:	680b      	ldr	r3, [r1, #0]
 8003440:	4a48      	ldr	r2, [pc, #288]	; (8003564 <playInputTune+0x304>)
 8003442:	401a      	ands	r2, r3
 8003444:	2380      	movs	r3, #128	; 0x80
 8003446:	039b      	lsls	r3, r3, #14
 8003448:	4313      	orrs	r3, r2
 800344a:	600b      	str	r3, [r1, #0]
 800344c:	e76c      	b.n	8003328 <playInputTune+0xc8>
 800344e:	2390      	movs	r3, #144	; 0x90
 8003450:	05db      	lsls	r3, r3, #23
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	4940      	ldr	r1, [pc, #256]	; (8003558 <playInputTune+0x2f8>)
 8003456:	4011      	ands	r1, r2
 8003458:	2280      	movs	r2, #128	; 0x80
 800345a:	01d2      	lsls	r2, r2, #7
 800345c:	430a      	orrs	r2, r1
 800345e:	601a      	str	r2, [r3, #0]
		GPIOA->BRR = GPIO_PIN_7;
 8003460:	2280      	movs	r2, #128	; 0x80
 8003462:	629a      	str	r2, [r3, #40]	; 0x28
 8003464:	e737      	b.n	80032d6 <playInputTune+0x76>
 8003466:	2003      	movs	r0, #3
 8003468:	4938      	ldr	r1, [pc, #224]	; (800354c <playInputTune+0x2ec>)
 800346a:	4c39      	ldr	r4, [pc, #228]	; (8003550 <playInputTune+0x2f0>)
 800346c:	680a      	ldr	r2, [r1, #0]
 800346e:	4382      	bics	r2, r0
 8003470:	3802      	subs	r0, #2
 8003472:	4302      	orrs	r2, r0
 8003474:	600a      	str	r2, [r1, #0]
 8003476:	2290      	movs	r2, #144	; 0x90
		GPIOB->BRR = GPIO_PIN_0;
 8003478:	6288      	str	r0, [r1, #40]	; 0x28
 800347a:	05d2      	lsls	r2, r2, #23
 800347c:	6810      	ldr	r0, [r2, #0]
 800347e:	4004      	ands	r4, r0
 8003480:	2080      	movs	r0, #128	; 0x80
 8003482:	02c0      	lsls	r0, r0, #11
 8003484:	4320      	orrs	r0, r4
 8003486:	6010      	str	r0, [r2, #0]
		GPIOA->BRR = GPIO_PIN_9;
 8003488:	2080      	movs	r0, #128	; 0x80
 800348a:	0080      	lsls	r0, r0, #2
 800348c:	6290      	str	r0, [r2, #40]	; 0x28
 800348e:	6810      	ldr	r0, [r2, #0]
 8003490:	4c31      	ldr	r4, [pc, #196]	; (8003558 <playInputTune+0x2f8>)
 8003492:	4004      	ands	r4, r0
 8003494:	2080      	movs	r0, #128	; 0x80
 8003496:	01c0      	lsls	r0, r0, #7
 8003498:	4320      	orrs	r0, r4
 800349a:	6010      	str	r0, [r2, #0]
		GPIOA->BRR = GPIO_PIN_7;
 800349c:	2080      	movs	r0, #128	; 0x80
 800349e:	6290      	str	r0, [r2, #40]	; 0x28
 80034a0:	6810      	ldr	r0, [r2, #0]
 80034a2:	4c2e      	ldr	r4, [pc, #184]	; (800355c <playInputTune+0x2fc>)
 80034a4:	4004      	ands	r4, r0
 80034a6:	2080      	movs	r0, #128	; 0x80
 80034a8:	0240      	lsls	r0, r0, #9
 80034aa:	4320      	orrs	r0, r4
 80034ac:	6010      	str	r0, [r2, #0]
		GPIOA->BRR = GPIO_PIN_8;
 80034ae:	2080      	movs	r0, #128	; 0x80
 80034b0:	240c      	movs	r4, #12
 80034b2:	0040      	lsls	r0, r0, #1
 80034b4:	6290      	str	r0, [r2, #40]	; 0x28
 80034b6:	6808      	ldr	r0, [r1, #0]
 80034b8:	43a0      	bics	r0, r4
 80034ba:	3c08      	subs	r4, #8
 80034bc:	4320      	orrs	r0, r4
 80034be:	6008      	str	r0, [r1, #0]
		GPIOB->BRR = GPIO_PIN_1;
 80034c0:	628b      	str	r3, [r1, #40]	; 0x28
 80034c2:	6813      	ldr	r3, [r2, #0]
 80034c4:	4927      	ldr	r1, [pc, #156]	; (8003564 <playInputTune+0x304>)
 80034c6:	4019      	ands	r1, r3
 80034c8:	2380      	movs	r3, #128	; 0x80
 80034ca:	035b      	lsls	r3, r3, #13
 80034cc:	430b      	orrs	r3, r1
 80034ce:	6013      	str	r3, [r2, #0]
		GPIOA->BRR = GPIO_PIN_10;
 80034d0:	2380      	movs	r3, #128	; 0x80
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	6293      	str	r3, [r2, #40]	; 0x28
 80034d6:	e772      	b.n	80033be <playInputTune+0x15e>
 80034d8:	2203      	movs	r2, #3
 80034da:	491c      	ldr	r1, [pc, #112]	; (800354c <playInputTune+0x2ec>)
 80034dc:	481c      	ldr	r0, [pc, #112]	; (8003550 <playInputTune+0x2f0>)
 80034de:	680b      	ldr	r3, [r1, #0]
 80034e0:	4393      	bics	r3, r2
 80034e2:	3a01      	subs	r2, #1
 80034e4:	4313      	orrs	r3, r2
 80034e6:	600b      	str	r3, [r1, #0]
 80034e8:	2390      	movs	r3, #144	; 0x90
 80034ea:	05db      	lsls	r3, r3, #23
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	4010      	ands	r0, r2
 80034f0:	2280      	movs	r2, #128	; 0x80
 80034f2:	0312      	lsls	r2, r2, #12
 80034f4:	4302      	orrs	r2, r0
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	4817      	ldr	r0, [pc, #92]	; (8003558 <playInputTune+0x2f8>)
 80034fc:	4010      	ands	r0, r2
 80034fe:	2280      	movs	r2, #128	; 0x80
 8003500:	0212      	lsls	r2, r2, #8
 8003502:	4302      	orrs	r2, r0
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	4814      	ldr	r0, [pc, #80]	; (800355c <playInputTune+0x2fc>)
 800350a:	4010      	ands	r0, r2
 800350c:	2280      	movs	r2, #128	; 0x80
 800350e:	0292      	lsls	r2, r2, #10
 8003510:	4302      	orrs	r2, r0
 8003512:	200c      	movs	r0, #12
 8003514:	601a      	str	r2, [r3, #0]
 8003516:	680a      	ldr	r2, [r1, #0]
 8003518:	4382      	bics	r2, r0
 800351a:	3804      	subs	r0, #4
 800351c:	4302      	orrs	r2, r0
 800351e:	600a      	str	r2, [r1, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	4910      	ldr	r1, [pc, #64]	; (8003564 <playInputTune+0x304>)
 8003524:	4011      	ands	r1, r2
 8003526:	2280      	movs	r2, #128	; 0x80
 8003528:	0392      	lsls	r2, r2, #14
 800352a:	430a      	orrs	r2, r1
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	e746      	b.n	80033be <playInputTune+0x15e>
 8003530:	200c      	movs	r0, #12
 8003532:	4906      	ldr	r1, [pc, #24]	; (800354c <playInputTune+0x2ec>)
 8003534:	680a      	ldr	r2, [r1, #0]
 8003536:	4382      	bics	r2, r0
 8003538:	3808      	subs	r0, #8
 800353a:	4302      	orrs	r2, r0
 800353c:	600a      	str	r2, [r1, #0]
		GPIOB->BRR = GPIO_PIN_1;
 800353e:	628b      	str	r3, [r1, #40]	; 0x28
 8003540:	e6e6      	b.n	8003310 <playInputTune+0xb0>
 8003542:	46c0      	nop			; (mov r8, r8)
 8003544:	40012c00 	.word	0x40012c00
 8003548:	2000001c 	.word	0x2000001c
 800354c:	48000400 	.word	0x48000400
 8003550:	fff3ffff 	.word	0xfff3ffff
 8003554:	20000018 	.word	0x20000018
 8003558:	ffff3fff 	.word	0xffff3fff
 800355c:	fffcffff 	.word	0xfffcffff
 8003560:	2000000c 	.word	0x2000000c
 8003564:	ffcfffff 	.word	0xffcfffff

08003568 <HAL_ADC_ConvCpltCallback>:

void getADCs(){
	voltageraw = ADC1ConvertedValues[0];
 8003568:	4b03      	ldr	r3, [pc, #12]	; (8003578 <HAL_ADC_ConvCpltCallback+0x10>)
 800356a:	4a04      	ldr	r2, [pc, #16]	; (800357c <HAL_ADC_ConvCpltCallback+0x14>)
 800356c:	6819      	ldr	r1, [r3, #0]
 800356e:	6011      	str	r1, [r2, #0]
	currentraw = ADC1ConvertedValues[1];
 8003570:	685a      	ldr	r2, [r3, #4]
 8003572:	4b03      	ldr	r3, [pc, #12]	; (8003580 <HAL_ADC_ConvCpltCallback+0x18>)
 8003574:	601a      	str	r2, [r3, #0]


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
	getADCs();
}
 8003576:	4770      	bx	lr
 8003578:	20000060 	.word	0x20000060
 800357c:	20000120 	.word	0x20000120
 8003580:	20000084 	.word	0x20000084

08003584 <detectInput>:


void detectInput(){
 8003584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003586:	464e      	mov	r6, r9
 8003588:	4645      	mov	r5, r8
 800358a:	46de      	mov	lr, fp
 800358c:	4657      	mov	r7, sl
	smallestnumber = 20000;
 800358e:	4b46      	ldr	r3, [pc, #280]	; (80036a8 <detectInput+0x124>)
void detectInput(){
 8003590:	b5e0      	push	{r5, r6, r7, lr}
	smallestnumber = 20000;
 8003592:	4e46      	ldr	r6, [pc, #280]	; (80036ac <detectInput+0x128>)
 8003594:	469b      	mov	fp, r3
 8003596:	601e      	str	r6, [r3, #0]
	dshot = 0;
 8003598:	4b45      	ldr	r3, [pc, #276]	; (80036b0 <detectInput+0x12c>)
 800359a:	469a      	mov	sl, r3
 800359c:	2300      	movs	r3, #0
 800359e:	4652      	mov	r2, sl
 80035a0:	7013      	strb	r3, [r2, #0]
	proshot = 0;
 80035a2:	4a44      	ldr	r2, [pc, #272]	; (80036b4 <detectInput+0x130>)
 80035a4:	7013      	strb	r3, [r2, #0]
 80035a6:	4691      	mov	r9, r2
	multishot = 0;
 80035a8:	4a43      	ldr	r2, [pc, #268]	; (80036b8 <detectInput+0x134>)
 80035aa:	7013      	strb	r3, [r2, #0]
 80035ac:	4690      	mov	r8, r2
	oneshot42 = 0;
 80035ae:	4a43      	ldr	r2, [pc, #268]	; (80036bc <detectInput+0x138>)
 80035b0:	7013      	strb	r3, [r2, #0]
	oneshot125 = 0;
 80035b2:	4a43      	ldr	r2, [pc, #268]	; (80036c0 <detectInput+0x13c>)
 80035b4:	7013      	strb	r3, [r2, #0]
	servoPwm = 0;
 80035b6:	4a43      	ldr	r2, [pc, #268]	; (80036c4 <detectInput+0x140>)
 80035b8:	7013      	strb	r3, [r2, #0]
	int lastnumber = dma_buffer[0];
	for ( int j = 1 ; j < input_buffer_size; j++){
 80035ba:	4a43      	ldr	r2, [pc, #268]	; (80036c8 <detectInput+0x144>)
	int lastnumber = dma_buffer[0];
 80035bc:	4b43      	ldr	r3, [pc, #268]	; (80036cc <detectInput+0x148>)
	for ( int j = 1 ; j < input_buffer_size; j++){
 80035be:	6815      	ldr	r5, [r2, #0]
	int lastnumber = dma_buffer[0];
 80035c0:	681b      	ldr	r3, [r3, #0]
	for ( int j = 1 ; j < input_buffer_size; j++){
 80035c2:	2d01      	cmp	r5, #1
 80035c4:	dd69      	ble.n	800369a <detectInput+0x116>
 80035c6:	4941      	ldr	r1, [pc, #260]	; (80036cc <detectInput+0x148>)
 80035c8:	2700      	movs	r7, #0
 80035ca:	468c      	mov	ip, r1
 80035cc:	0031      	movs	r1, r6
 80035ce:	4a3f      	ldr	r2, [pc, #252]	; (80036cc <detectInput+0x148>)
 80035d0:	00ad      	lsls	r5, r5, #2
 80035d2:	3204      	adds	r2, #4
 80035d4:	4465      	add	r5, ip

		if((dma_buffer[j] - lastnumber) < smallestnumber){ // blank space
 80035d6:	6810      	ldr	r0, [r2, #0]
 80035d8:	000c      	movs	r4, r1
 80035da:	1ac3      	subs	r3, r0, r3
 80035dc:	428b      	cmp	r3, r1
 80035de:	d203      	bcs.n	80035e8 <detectInput+0x64>
			smallestnumber = dma_buffer[j] - lastnumber;
 80035e0:	0019      	movs	r1, r3
 80035e2:	001c      	movs	r4, r3
 80035e4:	001e      	movs	r6, r3
 80035e6:	2701      	movs	r7, #1
 80035e8:	3204      	adds	r2, #4

		}
		lastnumber = dma_buffer[j];
 80035ea:	0003      	movs	r3, r0
	for ( int j = 1 ; j < input_buffer_size; j++){
 80035ec:	42aa      	cmp	r2, r5
 80035ee:	d1f2      	bne.n	80035d6 <detectInput+0x52>
 80035f0:	2f00      	cmp	r7, #0
 80035f2:	d156      	bne.n	80036a2 <detectInput+0x11e>
	}

	if ((smallestnumber > 3)&&(smallestnumber < 22)){
 80035f4:	1f23      	subs	r3, r4, #4
 80035f6:	2b11      	cmp	r3, #17
 80035f8:	d83e      	bhi.n	8003678 <detectInput+0xf4>
		dshot = 1;
 80035fa:	2301      	movs	r3, #1
 80035fc:	4652      	mov	r2, sl
 80035fe:	0025      	movs	r5, r4
 8003600:	7013      	strb	r3, [r2, #0]
 8003602:	4b33      	ldr	r3, [pc, #204]	; (80036d0 <detectInput+0x14c>)
 8003604:	3d65      	subs	r5, #101	; 0x65
 8003606:	18e0      	adds	r0, r4, r3
 8003608:	4b32      	ldr	r3, [pc, #200]	; (80036d4 <detectInput+0x150>)
 800360a:	18e2      	adds	r2, r4, r3
	if ((smallestnumber > 40 )&&(smallestnumber < 80)){
		proshot = 1;
		TIM15->PSC=1;
		TIM15->CNT = 0xffff;
	}
	if ((smallestnumber > 100 )&&(smallestnumber < 400)){
 800360c:	2395      	movs	r3, #149	; 0x95
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	429d      	cmp	r5, r3
 8003612:	d803      	bhi.n	800361c <detectInput+0x98>
		multishot = 1;
 8003614:	4644      	mov	r4, r8
 8003616:	3b2a      	subs	r3, #42	; 0x2a
 8003618:	3bff      	subs	r3, #255	; 0xff
 800361a:	7023      	strb	r3, [r4, #0]
	}
	if ((smallestnumber > 2000 )&&(smallestnumber < 3000)){
 800361c:	4b2e      	ldr	r3, [pc, #184]	; (80036d8 <detectInput+0x154>)
 800361e:	4298      	cmp	r0, r3
 8003620:	d802      	bhi.n	8003628 <detectInput+0xa4>
		oneshot42 = 1;
 8003622:	2301      	movs	r3, #1
 8003624:	4825      	ldr	r0, [pc, #148]	; (80036bc <detectInput+0x138>)
 8003626:	7003      	strb	r3, [r0, #0]
	}
	if ((smallestnumber > 3000 )&&(smallestnumber < 15000)){
 8003628:	4b2c      	ldr	r3, [pc, #176]	; (80036dc <detectInput+0x158>)
 800362a:	429a      	cmp	r2, r3
 800362c:	d812      	bhi.n	8003654 <detectInput+0xd0>
		oneshot125 = 1;
 800362e:	2301      	movs	r3, #1
 8003630:	4a23      	ldr	r2, [pc, #140]	; (80036c0 <detectInput+0x13c>)
 8003632:	7013      	strb	r3, [r2, #0]
		servoPwm = 1;
		TIM15->PSC = 47;
		TIM15->CNT = 0xffff;
	}

	if (smallestnumber == 0){
 8003634:	2900      	cmp	r1, #0
 8003636:	d118      	bne.n	800366a <detectInput+0xe6>
		inputSet = 0;
 8003638:	4b29      	ldr	r3, [pc, #164]	; (80036e0 <detectInput+0x15c>)
 800363a:	7019      	strb	r1, [r3, #0]
		inputSet = 1;

		HAL_Delay(50);
		//	playInputTune();
	}
	HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , 64);
 800363c:	2340      	movs	r3, #64	; 0x40
 800363e:	4a23      	ldr	r2, [pc, #140]	; (80036cc <detectInput+0x148>)
 8003640:	2100      	movs	r1, #0
 8003642:	4828      	ldr	r0, [pc, #160]	; (80036e4 <detectInput+0x160>)
 8003644:	f7fe f9b4 	bl	80019b0 <HAL_TIM_IC_Start_DMA>
}
 8003648:	bc3c      	pop	{r2, r3, r4, r5}
 800364a:	4690      	mov	r8, r2
 800364c:	4699      	mov	r9, r3
 800364e:	46a2      	mov	sl, r4
 8003650:	46ab      	mov	fp, r5
 8003652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (smallestnumber > 15000 ){
 8003654:	4b24      	ldr	r3, [pc, #144]	; (80036e8 <detectInput+0x164>)
 8003656:	4299      	cmp	r1, r3
 8003658:	ddec      	ble.n	8003634 <detectInput+0xb0>
		servoPwm = 1;
 800365a:	2301      	movs	r3, #1
 800365c:	4a19      	ldr	r2, [pc, #100]	; (80036c4 <detectInput+0x140>)
 800365e:	7013      	strb	r3, [r2, #0]
		TIM15->PSC = 47;
 8003660:	222f      	movs	r2, #47	; 0x2f
 8003662:	4b22      	ldr	r3, [pc, #136]	; (80036ec <detectInput+0x168>)
 8003664:	629a      	str	r2, [r3, #40]	; 0x28
		TIM15->CNT = 0xffff;
 8003666:	4a22      	ldr	r2, [pc, #136]	; (80036f0 <detectInput+0x16c>)
 8003668:	625a      	str	r2, [r3, #36]	; 0x24
		inputSet = 1;
 800366a:	2201      	movs	r2, #1
 800366c:	4b1c      	ldr	r3, [pc, #112]	; (80036e0 <detectInput+0x15c>)
		HAL_Delay(50);
 800366e:	2032      	movs	r0, #50	; 0x32
		inputSet = 1;
 8003670:	701a      	strb	r2, [r3, #0]
		HAL_Delay(50);
 8003672:	f7fc feef 	bl	8000454 <HAL_Delay>
 8003676:	e7e1      	b.n	800363c <detectInput+0xb8>
 8003678:	0025      	movs	r5, r4
 800367a:	4b15      	ldr	r3, [pc, #84]	; (80036d0 <detectInput+0x14c>)
 800367c:	3d65      	subs	r5, #101	; 0x65
 800367e:	18e0      	adds	r0, r4, r3
 8003680:	4b14      	ldr	r3, [pc, #80]	; (80036d4 <detectInput+0x150>)
 8003682:	18e2      	adds	r2, r4, r3
	if ((smallestnumber > 40 )&&(smallestnumber < 80)){
 8003684:	3c29      	subs	r4, #41	; 0x29
 8003686:	2c26      	cmp	r4, #38	; 0x26
 8003688:	d8c0      	bhi.n	800360c <detectInput+0x88>
		proshot = 1;
 800368a:	2401      	movs	r4, #1
 800368c:	464b      	mov	r3, r9
 800368e:	701c      	strb	r4, [r3, #0]
		TIM15->PSC=1;
 8003690:	4b16      	ldr	r3, [pc, #88]	; (80036ec <detectInput+0x168>)
 8003692:	629c      	str	r4, [r3, #40]	; 0x28
		TIM15->CNT = 0xffff;
 8003694:	4c16      	ldr	r4, [pc, #88]	; (80036f0 <detectInput+0x16c>)
 8003696:	625c      	str	r4, [r3, #36]	; 0x24
 8003698:	e7b8      	b.n	800360c <detectInput+0x88>
	for ( int j = 1 ; j < input_buffer_size; j++){
 800369a:	4a16      	ldr	r2, [pc, #88]	; (80036f4 <detectInput+0x170>)
 800369c:	4816      	ldr	r0, [pc, #88]	; (80036f8 <detectInput+0x174>)
	if ((smallestnumber > 3)&&(smallestnumber < 22)){
 800369e:	0031      	movs	r1, r6
 80036a0:	e7bc      	b.n	800361c <detectInput+0x98>
 80036a2:	465b      	mov	r3, fp
 80036a4:	601e      	str	r6, [r3, #0]
 80036a6:	e7a5      	b.n	80035f4 <detectInput+0x70>
 80036a8:	20000024 	.word	0x20000024
 80036ac:	00004e20 	.word	0x00004e20
 80036b0:	200000c8 	.word	0x200000c8
 80036b4:	200000fc 	.word	0x200000fc
 80036b8:	200000e0 	.word	0x200000e0
 80036bc:	200000e9 	.word	0x200000e9
 80036c0:	200000e8 	.word	0x200000e8
 80036c4:	20000108 	.word	0x20000108
 80036c8:	20000014 	.word	0x20000014
 80036cc:	200001f4 	.word	0x200001f4
 80036d0:	fffff82f 	.word	0xfffff82f
 80036d4:	fffff447 	.word	0xfffff447
 80036d8:	000003e6 	.word	0x000003e6
 80036dc:	00002ede 	.word	0x00002ede
 80036e0:	200000d8 	.word	0x200000d8
 80036e4:	20000130 	.word	0x20000130
 80036e8:	00003a98 	.word	0x00003a98
 80036ec:	40014000 	.word	0x40014000
 80036f0:	0000ffff 	.word	0x0000ffff
 80036f4:	00004267 	.word	0x00004267
 80036f8:	0000464f 	.word	0x0000464f

080036fc <computeProshotDMA>:

void computeProshotDMA(){
 80036fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036fe:	46d6      	mov	lr, sl
 8003700:	464f      	mov	r7, r9
 8003702:	4646      	mov	r6, r8
	int lastnumber = dma_buffer[0];
	for ( int j = 1 ; j < 9; j++){

		if(((dma_buffer[j] - lastnumber) > 1500) && ((dma_buffer[j] - lastnumber) < 50000)){ // blank space
 8003704:	4c67      	ldr	r4, [pc, #412]	; (80038a4 <computeProshotDMA+0x1a8>)
 8003706:	4a68      	ldr	r2, [pc, #416]	; (80038a8 <computeProshotDMA+0x1ac>)
 8003708:	6863      	ldr	r3, [r4, #4]
void computeProshotDMA(){
 800370a:	b5c0      	push	{r6, r7, lr}
		if(((dma_buffer[j] - lastnumber) > 1500) && ((dma_buffer[j] - lastnumber) < 50000)){ // blank space
 800370c:	1899      	adds	r1, r3, r2
 800370e:	6822      	ldr	r2, [r4, #0]
 8003710:	1a89      	subs	r1, r1, r2
 8003712:	4a66      	ldr	r2, [pc, #408]	; (80038ac <computeProshotDMA+0x1b0>)
 8003714:	4291      	cmp	r1, r2
 8003716:	d935      	bls.n	8003784 <computeProshotDMA+0x88>
 8003718:	68a0      	ldr	r0, [r4, #8]
 800371a:	4963      	ldr	r1, [pc, #396]	; (80038a8 <computeProshotDMA+0x1ac>)
 800371c:	1841      	adds	r1, r0, r1
 800371e:	1acb      	subs	r3, r1, r3
 8003720:	4293      	cmp	r3, r2
 8003722:	d800      	bhi.n	8003726 <computeProshotDMA+0x2a>
 8003724:	e0a3      	b.n	800386e <computeProshotDMA+0x172>
 8003726:	68e3      	ldr	r3, [r4, #12]
 8003728:	495f      	ldr	r1, [pc, #380]	; (80038a8 <computeProshotDMA+0x1ac>)
 800372a:	1859      	adds	r1, r3, r1
 800372c:	1a09      	subs	r1, r1, r0
 800372e:	4291      	cmp	r1, r2
 8003730:	d800      	bhi.n	8003734 <computeProshotDMA+0x38>
 8003732:	e09f      	b.n	8003874 <computeProshotDMA+0x178>
 8003734:	6920      	ldr	r0, [r4, #16]
 8003736:	495c      	ldr	r1, [pc, #368]	; (80038a8 <computeProshotDMA+0x1ac>)
 8003738:	1841      	adds	r1, r0, r1
 800373a:	1acb      	subs	r3, r1, r3
 800373c:	4293      	cmp	r3, r2
 800373e:	d800      	bhi.n	8003742 <computeProshotDMA+0x46>
 8003740:	e09a      	b.n	8003878 <computeProshotDMA+0x17c>
 8003742:	6963      	ldr	r3, [r4, #20]
 8003744:	4958      	ldr	r1, [pc, #352]	; (80038a8 <computeProshotDMA+0x1ac>)
 8003746:	1859      	adds	r1, r3, r1
 8003748:	1a09      	subs	r1, r1, r0
 800374a:	4291      	cmp	r1, r2
 800374c:	d800      	bhi.n	8003750 <computeProshotDMA+0x54>
 800374e:	e096      	b.n	800387e <computeProshotDMA+0x182>
 8003750:	69a0      	ldr	r0, [r4, #24]
 8003752:	4955      	ldr	r1, [pc, #340]	; (80038a8 <computeProshotDMA+0x1ac>)
 8003754:	1841      	adds	r1, r0, r1
 8003756:	1acb      	subs	r3, r1, r3
 8003758:	4293      	cmp	r3, r2
 800375a:	d800      	bhi.n	800375e <computeProshotDMA+0x62>
 800375c:	e091      	b.n	8003882 <computeProshotDMA+0x186>
 800375e:	69e3      	ldr	r3, [r4, #28]
 8003760:	4951      	ldr	r1, [pc, #324]	; (80038a8 <computeProshotDMA+0x1ac>)
 8003762:	1859      	adds	r1, r3, r1
 8003764:	1a09      	subs	r1, r1, r0
 8003766:	4291      	cmp	r1, r2
 8003768:	d800      	bhi.n	800376c <computeProshotDMA+0x70>
 800376a:	e08d      	b.n	8003888 <computeProshotDMA+0x18c>
 800376c:	6a20      	ldr	r0, [r4, #32]
 800376e:	494e      	ldr	r1, [pc, #312]	; (80038a8 <computeProshotDMA+0x1ac>)
 8003770:	1841      	adds	r1, r0, r1
 8003772:	1acb      	subs	r3, r1, r3
 8003774:	4293      	cmp	r3, r2
 8003776:	d800      	bhi.n	800377a <computeProshotDMA+0x7e>
 8003778:	e088      	b.n	800388c <computeProshotDMA+0x190>
            }
			break;
		}
		lastnumber = dma_buffer[j];
	}
}
 800377a:	bc1c      	pop	{r2, r3, r4}
 800377c:	4690      	mov	r8, r2
 800377e:	4699      	mov	r9, r3
 8003780:	46a2      	mov	sl, r4
 8003782:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for ( int j = 1 ; j < 9; j++){
 8003784:	2501      	movs	r5, #1
			if ((dma_buffer[j+7] - dma_buffer[j])<10000){
 8003786:	1dea      	adds	r2, r5, #7
 8003788:	0092      	lsls	r2, r2, #2
 800378a:	58a7      	ldr	r7, [r4, r2]
 800378c:	4a48      	ldr	r2, [pc, #288]	; (80038b0 <computeProshotDMA+0x1b4>)
 800378e:	1afb      	subs	r3, r7, r3
 8003790:	4293      	cmp	r3, r2
 8003792:	d921      	bls.n	80037d8 <computeProshotDMA+0xdc>
 8003794:	4b47      	ldr	r3, [pc, #284]	; (80038b4 <computeProshotDMA+0x1b8>)
 8003796:	781a      	ldrb	r2, [r3, #0]
 8003798:	4b47      	ldr	r3, [pc, #284]	; (80038b8 <computeProshotDMA+0x1bc>)
 800379a:	781b      	ldrb	r3, [r3, #0]
            if (calcCRC == checkCRC){
 800379c:	429a      	cmp	r2, r3
 800379e:	d1ec      	bne.n	800377a <computeProshotDMA+0x7e>
			int tocheck = ((propulse[0]<<7 | propulse[1]<<3 | propulse[2]>>1));
 80037a0:	4a46      	ldr	r2, [pc, #280]	; (80038bc <computeProshotDMA+0x1c0>)
 80037a2:	6813      	ldr	r3, [r2, #0]
 80037a4:	6851      	ldr	r1, [r2, #4]
 80037a6:	6892      	ldr	r2, [r2, #8]
 80037a8:	01db      	lsls	r3, r3, #7
 80037aa:	00c9      	lsls	r1, r1, #3
 80037ac:	1052      	asrs	r2, r2, #1
 80037ae:	430b      	orrs	r3, r1
 80037b0:	4313      	orrs	r3, r2
			if (tocheck > 2047 || tocheck < 0){
 80037b2:	4a43      	ldr	r2, [pc, #268]	; (80038c0 <computeProshotDMA+0x1c4>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d8e0      	bhi.n	800377a <computeProshotDMA+0x7e>
				if(tocheck > 47){
 80037b8:	2b2f      	cmp	r3, #47	; 0x2f
 80037ba:	dd04      	ble.n	80037c6 <computeProshotDMA+0xca>
					dshotcommand = 0;
 80037bc:	2100      	movs	r1, #0
					newinput = tocheck;
 80037be:	4a41      	ldr	r2, [pc, #260]	; (80038c4 <computeProshotDMA+0x1c8>)
 80037c0:	6013      	str	r3, [r2, #0]
					dshotcommand = 0;
 80037c2:	4a41      	ldr	r2, [pc, #260]	; (80038c8 <computeProshotDMA+0x1cc>)
 80037c4:	6011      	str	r1, [r2, #0]
				if ((tocheck <= 47)&& (tocheck > 0)){
 80037c6:	1e5a      	subs	r2, r3, #1
 80037c8:	2a2e      	cmp	r2, #46	; 0x2e
 80037ca:	d862      	bhi.n	8003892 <computeProshotDMA+0x196>
					newinput = 0;
 80037cc:	2100      	movs	r1, #0
 80037ce:	4a3d      	ldr	r2, [pc, #244]	; (80038c4 <computeProshotDMA+0x1c8>)
 80037d0:	6011      	str	r1, [r2, #0]
					dshotcommand = tocheck;    //  todo
 80037d2:	4a3d      	ldr	r2, [pc, #244]	; (80038c8 <computeProshotDMA+0x1cc>)
 80037d4:	6013      	str	r3, [r2, #0]
 80037d6:	e7d0      	b.n	800377a <computeProshotDMA+0x7e>
					propulse[i] = (((dma_buffer[j + i*2 +1] - dma_buffer[j + i*2])) - 23)/3;
 80037d8:	1c6b      	adds	r3, r5, #1
 80037da:	00aa      	lsls	r2, r5, #2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	58e0      	ldr	r0, [r4, r3]
 80037e0:	58a3      	ldr	r3, [r4, r2]
 80037e2:	2103      	movs	r1, #3
 80037e4:	1ac0      	subs	r0, r0, r3
 80037e6:	3817      	subs	r0, #23
 80037e8:	f7fc fc8e 	bl	8000108 <__udivsi3>
 80037ec:	4b33      	ldr	r3, [pc, #204]	; (80038bc <computeProshotDMA+0x1c0>)
 80037ee:	1cea      	adds	r2, r5, #3
 80037f0:	4698      	mov	r8, r3
 80037f2:	6018      	str	r0, [r3, #0]
 80037f4:	1cab      	adds	r3, r5, #2
 80037f6:	0092      	lsls	r2, r2, #2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	58e3      	ldr	r3, [r4, r3]
 80037fc:	4682      	mov	sl, r0
 80037fe:	58a0      	ldr	r0, [r4, r2]
 8003800:	2103      	movs	r1, #3
 8003802:	1ac0      	subs	r0, r0, r3
 8003804:	3817      	subs	r0, #23
 8003806:	f7fc fc7f 	bl	8000108 <__udivsi3>
 800380a:	4643      	mov	r3, r8
 800380c:	1d6a      	adds	r2, r5, #5
 800380e:	6058      	str	r0, [r3, #4]
 8003810:	1d2b      	adds	r3, r5, #4
 8003812:	0092      	lsls	r2, r2, #2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	58e3      	ldr	r3, [r4, r3]
 8003818:	0006      	movs	r6, r0
 800381a:	58a0      	ldr	r0, [r4, r2]
 800381c:	2103      	movs	r1, #3
 800381e:	1ac0      	subs	r0, r0, r3
 8003820:	3817      	subs	r0, #23
 8003822:	f7fc fc71 	bl	8000108 <__udivsi3>
 8003826:	4643      	mov	r3, r8
 8003828:	3506      	adds	r5, #6
 800382a:	00ad      	lsls	r5, r5, #2
 800382c:	6098      	str	r0, [r3, #8]
 800382e:	4681      	mov	r9, r0
 8003830:	5960      	ldr	r0, [r4, r5]
 8003832:	2103      	movs	r1, #3
 8003834:	1a38      	subs	r0, r7, r0
 8003836:	3817      	subs	r0, #23
 8003838:	f7fc fc66 	bl	8000108 <__udivsi3>
 800383c:	4643      	mov	r3, r8
 800383e:	60d8      	str	r0, [r3, #12]
				calcCRC = ((propulse[0]^propulse[1]^propulse[2])<<3
 8003840:	4653      	mov	r3, sl
 8003842:	405e      	eors	r6, r3
 8003844:	464b      	mov	r3, r9
 8003846:	405e      	eors	r6, r3
						|(propulse[0]^propulse[1]^propulse[2])<<2
 8003848:	00b3      	lsls	r3, r6, #2
				calcCRC = ((propulse[0]^propulse[1]^propulse[2])<<3
 800384a:	00f2      	lsls	r2, r6, #3
						|(propulse[0]^propulse[1]^propulse[2])<<2
 800384c:	431a      	orrs	r2, r3
						|(propulse[0]^propulse[1]^propulse[2]));
 800384e:	4332      	orrs	r2, r6
						|(propulse[0]^propulse[1]^propulse[2])<<1
 8003850:	0076      	lsls	r6, r6, #1
				calcCRC = ((propulse[0]^propulse[1]^propulse[2])<<3
 8003852:	4b18      	ldr	r3, [pc, #96]	; (80038b4 <computeProshotDMA+0x1b8>)
						|(propulse[0]^propulse[1]^propulse[2]));
 8003854:	4332      	orrs	r2, r6
 8003856:	b2d2      	uxtb	r2, r2
				checkCRC = (propulse[3]<<3 | propulse[3]<<2 | propulse[3]<<1 | propulse[3]);
 8003858:	0081      	lsls	r1, r0, #2
				calcCRC = ((propulse[0]^propulse[1]^propulse[2])<<3
 800385a:	701a      	strb	r2, [r3, #0]
				checkCRC = (propulse[3]<<3 | propulse[3]<<2 | propulse[3]<<1 | propulse[3]);
 800385c:	00c3      	lsls	r3, r0, #3
 800385e:	430b      	orrs	r3, r1
 8003860:	4303      	orrs	r3, r0
 8003862:	0040      	lsls	r0, r0, #1
 8003864:	4303      	orrs	r3, r0
 8003866:	4914      	ldr	r1, [pc, #80]	; (80038b8 <computeProshotDMA+0x1bc>)
 8003868:	b2db      	uxtb	r3, r3
 800386a:	700b      	strb	r3, [r1, #0]
 800386c:	e796      	b.n	800379c <computeProshotDMA+0xa0>
		if(((dma_buffer[j] - lastnumber) > 1500) && ((dma_buffer[j] - lastnumber) < 50000)){ // blank space
 800386e:	0003      	movs	r3, r0
	for ( int j = 1 ; j < 9; j++){
 8003870:	2502      	movs	r5, #2
 8003872:	e788      	b.n	8003786 <computeProshotDMA+0x8a>
 8003874:	2503      	movs	r5, #3
 8003876:	e786      	b.n	8003786 <computeProshotDMA+0x8a>
		if(((dma_buffer[j] - lastnumber) > 1500) && ((dma_buffer[j] - lastnumber) < 50000)){ // blank space
 8003878:	0003      	movs	r3, r0
	for ( int j = 1 ; j < 9; j++){
 800387a:	2504      	movs	r5, #4
 800387c:	e783      	b.n	8003786 <computeProshotDMA+0x8a>
 800387e:	2505      	movs	r5, #5
 8003880:	e781      	b.n	8003786 <computeProshotDMA+0x8a>
		if(((dma_buffer[j] - lastnumber) > 1500) && ((dma_buffer[j] - lastnumber) < 50000)){ // blank space
 8003882:	0003      	movs	r3, r0
	for ( int j = 1 ; j < 9; j++){
 8003884:	2506      	movs	r5, #6
 8003886:	e77e      	b.n	8003786 <computeProshotDMA+0x8a>
 8003888:	2507      	movs	r5, #7
 800388a:	e77c      	b.n	8003786 <computeProshotDMA+0x8a>
		if(((dma_buffer[j] - lastnumber) > 1500) && ((dma_buffer[j] - lastnumber) < 50000)){ // blank space
 800388c:	0003      	movs	r3, r0
	for ( int j = 1 ; j < 9; j++){
 800388e:	2508      	movs	r5, #8
 8003890:	e779      	b.n	8003786 <computeProshotDMA+0x8a>
				if (tocheck == 0){
 8003892:	2b00      	cmp	r3, #0
 8003894:	d000      	beq.n	8003898 <computeProshotDMA+0x19c>
 8003896:	e770      	b.n	800377a <computeProshotDMA+0x7e>
					newinput = 0;
 8003898:	4a0a      	ldr	r2, [pc, #40]	; (80038c4 <computeProshotDMA+0x1c8>)
 800389a:	6013      	str	r3, [r2, #0]
					dshotcommand = 0;
 800389c:	4a0a      	ldr	r2, [pc, #40]	; (80038c8 <computeProshotDMA+0x1cc>)
 800389e:	6013      	str	r3, [r2, #0]
}
 80038a0:	e76b      	b.n	800377a <computeProshotDMA+0x7e>
 80038a2:	46c0      	nop			; (mov r8, r8)
 80038a4:	200001f4 	.word	0x200001f4
 80038a8:	fffffa23 	.word	0xfffffa23
 80038ac:	0000bd72 	.word	0x0000bd72
 80038b0:	0000270f 	.word	0x0000270f
 80038b4:	20000170 	.word	0x20000170
 80038b8:	20000184 	.word	0x20000184
 80038bc:	200000ec 	.word	0x200000ec
 80038c0:	000007ff 	.word	0x000007ff
 80038c4:	200000e4 	.word	0x200000e4
 80038c8:	200000cc 	.word	0x200000cc

080038cc <computeDshotDMA>:
		lastnumber = dma_buffer[j];
	}
}


void computeDshotDMA(){
 80038cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038ce:	464e      	mov	r6, r9
 80038d0:	4645      	mov	r5, r8
 80038d2:	46de      	mov	lr, fp
 80038d4:	4657      	mov	r7, sl
 80038d6:	b5e0      	push	{r5, r6, r7, lr}

	int lastnumber = dma_buffer[0];
	for ( int j = 1 ; j < input_buffer_size; j++){
 80038d8:	4baf      	ldr	r3, [pc, #700]	; (8003b98 <computeDshotDMA+0x2cc>)
	int lastnumber = dma_buffer[0];
 80038da:	4db0      	ldr	r5, [pc, #704]	; (8003b9c <computeDshotDMA+0x2d0>)
	for ( int j = 1 ; j < input_buffer_size; j++){
 80038dc:	681e      	ldr	r6, [r3, #0]
void computeDshotDMA(){
 80038de:	b08b      	sub	sp, #44	; 0x2c
	int lastnumber = dma_buffer[0];
 80038e0:	6829      	ldr	r1, [r5, #0]
	for ( int j = 1 ; j < input_buffer_size; j++){
 80038e2:	2e01      	cmp	r6, #1
 80038e4:	dd15      	ble.n	8003912 <computeDshotDMA+0x46>

		if(((dma_buffer[j] - lastnumber) > 50) && ((dma_buffer[j] - lastnumber) < 65000)){ // blank space
 80038e6:	686b      	ldr	r3, [r5, #4]
 80038e8:	48ad      	ldr	r0, [pc, #692]	; (8003ba0 <computeDshotDMA+0x2d4>)
 80038ea:	001a      	movs	r2, r3
 80038ec:	3a33      	subs	r2, #51	; 0x33
 80038ee:	1a52      	subs	r2, r2, r1
 80038f0:	4282      	cmp	r2, r0
 80038f2:	d915      	bls.n	8003920 <computeDshotDMA+0x54>
 80038f4:	0029      	movs	r1, r5
 80038f6:	2733      	movs	r7, #51	; 0x33
 80038f8:	3108      	adds	r1, #8
 80038fa:	2401      	movs	r4, #1
 80038fc:	427f      	negs	r7, r7
 80038fe:	e005      	b.n	800390c <computeDshotDMA+0x40>
 8003900:	c904      	ldmia	r1!, {r2}
 8003902:	1afb      	subs	r3, r7, r3
 8003904:	189b      	adds	r3, r3, r2
 8003906:	4283      	cmp	r3, r0
 8003908:	d90b      	bls.n	8003922 <computeDshotDMA+0x56>
 800390a:	0013      	movs	r3, r2
	for ( int j = 1 ; j < input_buffer_size; j++){
 800390c:	3401      	adds	r4, #1
 800390e:	42b4      	cmp	r4, r6
 8003910:	d1f6      	bne.n	8003900 <computeDshotDMA+0x34>

			break;
		}
		lastnumber = dma_buffer[j];
	}
}
 8003912:	b00b      	add	sp, #44	; 0x2c
 8003914:	bc3c      	pop	{r2, r3, r4, r5}
 8003916:	4690      	mov	r8, r2
 8003918:	4699      	mov	r9, r3
 800391a:	46a2      	mov	sl, r4
 800391c:	46ab      	mov	fp, r5
 800391e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for ( int j = 1 ; j < input_buffer_size; j++){
 8003920:	2401      	movs	r4, #1
				dpulse[i] = ((dma_buffer[j + i*2 +1] - dma_buffer[j + i*2]) / 13) - 1;
 8003922:	1c63      	adds	r3, r4, #1
 8003924:	00a2      	lsls	r2, r4, #2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	58e8      	ldr	r0, [r5, r3]
 800392a:	58ab      	ldr	r3, [r5, r2]
 800392c:	210d      	movs	r1, #13
 800392e:	1ac0      	subs	r0, r0, r3
 8003930:	f7fc fbea 	bl	8000108 <__udivsi3>
 8003934:	1ce2      	adds	r2, r4, #3
 8003936:	1ca3      	adds	r3, r4, #2
 8003938:	0092      	lsls	r2, r2, #2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4f99      	ldr	r7, [pc, #612]	; (8003ba4 <computeDshotDMA+0x2d8>)
 800393e:	1e46      	subs	r6, r0, #1
 8003940:	58eb      	ldr	r3, [r5, r3]
 8003942:	58a8      	ldr	r0, [r5, r2]
 8003944:	603e      	str	r6, [r7, #0]
 8003946:	1ac0      	subs	r0, r0, r3
 8003948:	210d      	movs	r1, #13
 800394a:	f7fc fbdd 	bl	8000108 <__udivsi3>
 800394e:	1e43      	subs	r3, r0, #1
 8003950:	607b      	str	r3, [r7, #4]
 8003952:	9302      	str	r3, [sp, #8]
 8003954:	1d62      	adds	r2, r4, #5
 8003956:	1d23      	adds	r3, r4, #4
 8003958:	0092      	lsls	r2, r2, #2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	58a8      	ldr	r0, [r5, r2]
 800395e:	58eb      	ldr	r3, [r5, r3]
 8003960:	210d      	movs	r1, #13
 8003962:	1ac0      	subs	r0, r0, r3
 8003964:	f7fc fbd0 	bl	8000108 <__udivsi3>
 8003968:	1e42      	subs	r2, r0, #1
 800396a:	4691      	mov	r9, r2
 800396c:	60ba      	str	r2, [r7, #8]
 800396e:	1da3      	adds	r3, r4, #6
 8003970:	1de2      	adds	r2, r4, #7
 8003972:	0092      	lsls	r2, r2, #2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	58a8      	ldr	r0, [r5, r2]
 8003978:	58eb      	ldr	r3, [r5, r3]
 800397a:	210d      	movs	r1, #13
 800397c:	1ac0      	subs	r0, r0, r3
 800397e:	f7fc fbc3 	bl	8000108 <__udivsi3>
 8003982:	0021      	movs	r1, r4
 8003984:	1e42      	subs	r2, r0, #1
 8003986:	3109      	adds	r1, #9
 8003988:	60fa      	str	r2, [r7, #12]
 800398a:	9203      	str	r2, [sp, #12]
 800398c:	008a      	lsls	r2, r1, #2
 800398e:	3901      	subs	r1, #1
 8003990:	008b      	lsls	r3, r1, #2
 8003992:	58a8      	ldr	r0, [r5, r2]
 8003994:	58eb      	ldr	r3, [r5, r3]
 8003996:	210d      	movs	r1, #13
 8003998:	1ac0      	subs	r0, r0, r3
 800399a:	f7fc fbb5 	bl	8000108 <__udivsi3>
 800399e:	1e41      	subs	r1, r0, #1
 80039a0:	0020      	movs	r0, r4
 80039a2:	300b      	adds	r0, #11
 80039a4:	0082      	lsls	r2, r0, #2
 80039a6:	3801      	subs	r0, #1
 80039a8:	0083      	lsls	r3, r0, #2
 80039aa:	58eb      	ldr	r3, [r5, r3]
 80039ac:	58a8      	ldr	r0, [r5, r2]
 80039ae:	6139      	str	r1, [r7, #16]
 80039b0:	9104      	str	r1, [sp, #16]
 80039b2:	1ac0      	subs	r0, r0, r3
 80039b4:	210d      	movs	r1, #13
 80039b6:	f7fc fba7 	bl	8000108 <__udivsi3>
 80039ba:	0022      	movs	r2, r4
 80039bc:	0023      	movs	r3, r4
 80039be:	320d      	adds	r2, #13
 80039c0:	330c      	adds	r3, #12
 80039c2:	3801      	subs	r0, #1
 80039c4:	0092      	lsls	r2, r2, #2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	58eb      	ldr	r3, [r5, r3]
 80039ca:	6178      	str	r0, [r7, #20]
 80039cc:	9005      	str	r0, [sp, #20]
 80039ce:	58a8      	ldr	r0, [r5, r2]
 80039d0:	210d      	movs	r1, #13
 80039d2:	1ac0      	subs	r0, r0, r3
 80039d4:	f7fc fb98 	bl	8000108 <__udivsi3>
 80039d8:	1e43      	subs	r3, r0, #1
 80039da:	4698      	mov	r8, r3
 80039dc:	61bb      	str	r3, [r7, #24]
 80039de:	0022      	movs	r2, r4
 80039e0:	0023      	movs	r3, r4
 80039e2:	320f      	adds	r2, #15
 80039e4:	330e      	adds	r3, #14
 80039e6:	0092      	lsls	r2, r2, #2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	58a8      	ldr	r0, [r5, r2]
 80039ec:	58eb      	ldr	r3, [r5, r3]
 80039ee:	210d      	movs	r1, #13
 80039f0:	1ac0      	subs	r0, r0, r3
 80039f2:	f7fc fb89 	bl	8000108 <__udivsi3>
 80039f6:	1e43      	subs	r3, r0, #1
 80039f8:	469a      	mov	sl, r3
 80039fa:	61fb      	str	r3, [r7, #28]
 80039fc:	0022      	movs	r2, r4
 80039fe:	0023      	movs	r3, r4
 8003a00:	3211      	adds	r2, #17
 8003a02:	3310      	adds	r3, #16
 8003a04:	0092      	lsls	r2, r2, #2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	58a8      	ldr	r0, [r5, r2]
 8003a0a:	58eb      	ldr	r3, [r5, r3]
 8003a0c:	210d      	movs	r1, #13
 8003a0e:	1ac0      	subs	r0, r0, r3
 8003a10:	f7fc fb7a 	bl	8000108 <__udivsi3>
 8003a14:	0022      	movs	r2, r4
 8003a16:	1e43      	subs	r3, r0, #1
 8003a18:	0020      	movs	r0, r4
 8003a1a:	3213      	adds	r2, #19
 8003a1c:	3012      	adds	r0, #18
 8003a1e:	623b      	str	r3, [r7, #32]
 8003a20:	0092      	lsls	r2, r2, #2
 8003a22:	9300      	str	r3, [sp, #0]
 8003a24:	0083      	lsls	r3, r0, #2
 8003a26:	58eb      	ldr	r3, [r5, r3]
 8003a28:	58a8      	ldr	r0, [r5, r2]
 8003a2a:	210d      	movs	r1, #13
 8003a2c:	1ac0      	subs	r0, r0, r3
 8003a2e:	f7fc fb6b 	bl	8000108 <__udivsi3>
 8003a32:	1e42      	subs	r2, r0, #1
 8003a34:	0020      	movs	r0, r4
 8003a36:	3015      	adds	r0, #21
 8003a38:	627a      	str	r2, [r7, #36]	; 0x24
 8003a3a:	9201      	str	r2, [sp, #4]
 8003a3c:	0082      	lsls	r2, r0, #2
 8003a3e:	3801      	subs	r0, #1
 8003a40:	0083      	lsls	r3, r0, #2
 8003a42:	58eb      	ldr	r3, [r5, r3]
 8003a44:	58a8      	ldr	r0, [r5, r2]
 8003a46:	210d      	movs	r1, #13
 8003a48:	1ac0      	subs	r0, r0, r3
 8003a4a:	f7fc fb5d 	bl	8000108 <__udivsi3>
 8003a4e:	3801      	subs	r0, #1
 8003a50:	4683      	mov	fp, r0
 8003a52:	62b8      	str	r0, [r7, #40]	; 0x28
 8003a54:	0020      	movs	r0, r4
 8003a56:	3017      	adds	r0, #23
 8003a58:	0082      	lsls	r2, r0, #2
 8003a5a:	3801      	subs	r0, #1
 8003a5c:	0083      	lsls	r3, r0, #2
 8003a5e:	58eb      	ldr	r3, [r5, r3]
 8003a60:	58a8      	ldr	r0, [r5, r2]
 8003a62:	210d      	movs	r1, #13
 8003a64:	1ac0      	subs	r0, r0, r3
 8003a66:	f7fc fb4f 	bl	8000108 <__udivsi3>
 8003a6a:	0022      	movs	r2, r4
 8003a6c:	0023      	movs	r3, r4
 8003a6e:	3219      	adds	r2, #25
 8003a70:	3318      	adds	r3, #24
 8003a72:	3801      	subs	r0, #1
 8003a74:	0092      	lsls	r2, r2, #2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	58eb      	ldr	r3, [r5, r3]
 8003a7a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003a7c:	9006      	str	r0, [sp, #24]
 8003a7e:	58a8      	ldr	r0, [r5, r2]
 8003a80:	210d      	movs	r1, #13
 8003a82:	1ac0      	subs	r0, r0, r3
 8003a84:	f7fc fb40 	bl	8000108 <__udivsi3>
 8003a88:	0022      	movs	r2, r4
 8003a8a:	0023      	movs	r3, r4
 8003a8c:	321b      	adds	r2, #27
 8003a8e:	331a      	adds	r3, #26
 8003a90:	0092      	lsls	r2, r2, #2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	1e41      	subs	r1, r0, #1
 8003a96:	58eb      	ldr	r3, [r5, r3]
 8003a98:	58a8      	ldr	r0, [r5, r2]
 8003a9a:	6339      	str	r1, [r7, #48]	; 0x30
 8003a9c:	9107      	str	r1, [sp, #28]
 8003a9e:	1ac0      	subs	r0, r0, r3
 8003aa0:	210d      	movs	r1, #13
 8003aa2:	f7fc fb31 	bl	8000108 <__udivsi3>
 8003aa6:	1e43      	subs	r3, r0, #1
 8003aa8:	637b      	str	r3, [r7, #52]	; 0x34
 8003aaa:	9308      	str	r3, [sp, #32]
 8003aac:	0022      	movs	r2, r4
 8003aae:	0023      	movs	r3, r4
 8003ab0:	321d      	adds	r2, #29
 8003ab2:	331c      	adds	r3, #28
 8003ab4:	0092      	lsls	r2, r2, #2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	58a8      	ldr	r0, [r5, r2]
 8003aba:	58eb      	ldr	r3, [r5, r3]
 8003abc:	210d      	movs	r1, #13
 8003abe:	1ac0      	subs	r0, r0, r3
 8003ac0:	f7fc fb22 	bl	8000108 <__udivsi3>
 8003ac4:	0023      	movs	r3, r4
 8003ac6:	341e      	adds	r4, #30
 8003ac8:	331f      	adds	r3, #31
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	00a4      	lsls	r4, r4, #2
 8003ace:	1e42      	subs	r2, r0, #1
 8003ad0:	58e8      	ldr	r0, [r5, r3]
 8003ad2:	592b      	ldr	r3, [r5, r4]
 8003ad4:	63ba      	str	r2, [r7, #56]	; 0x38
 8003ad6:	1ac0      	subs	r0, r0, r3
 8003ad8:	210d      	movs	r1, #13
 8003ada:	9209      	str	r2, [sp, #36]	; 0x24
 8003adc:	f7fc fb14 	bl	8000108 <__udivsi3>
			int tocheck = (
 8003ae0:	465d      	mov	r5, fp
				dpulse[i] = ((dma_buffer[j + i*2 +1] - dma_buffer[j + i*2]) / 13) - 1;
 8003ae2:	1e42      	subs	r2, r0, #1
					dpulse[0]<<10 | dpulse[1]<<9 | dpulse[2]<<8 | dpulse[3]<<7
 8003ae4:	9802      	ldr	r0, [sp, #8]
 8003ae6:	02b3      	lsls	r3, r6, #10
 8003ae8:	0241      	lsls	r1, r0, #9
 8003aea:	430b      	orrs	r3, r1
			int tocheck = (
 8003aec:	432b      	orrs	r3, r5
					dpulse[0]<<10 | dpulse[1]<<9 | dpulse[2]<<8 | dpulse[3]<<7
 8003aee:	464d      	mov	r5, r9
 8003af0:	9c03      	ldr	r4, [sp, #12]
 8003af2:	0229      	lsls	r1, r5, #8
					| dpulse[4]<<6 | dpulse[5]<<5 | dpulse[6]<<4 | dpulse[7]<<3
 8003af4:	9d04      	ldr	r5, [sp, #16]
				dpulse[i] = ((dma_buffer[j + i*2 +1] - dma_buffer[j + i*2]) / 13) - 1;
 8003af6:	63fa      	str	r2, [r7, #60]	; 0x3c
			int tocheck = (
 8003af8:	430b      	orrs	r3, r1
					| dpulse[4]<<6 | dpulse[5]<<5 | dpulse[6]<<4 | dpulse[7]<<3
 8003afa:	9f05      	ldr	r7, [sp, #20]
					dpulse[0]<<10 | dpulse[1]<<9 | dpulse[2]<<8 | dpulse[3]<<7
 8003afc:	01e1      	lsls	r1, r4, #7
			int tocheck = (
 8003afe:	430b      	orrs	r3, r1
					| dpulse[4]<<6 | dpulse[5]<<5 | dpulse[6]<<4 | dpulse[7]<<3
 8003b00:	01a9      	lsls	r1, r5, #6
			int tocheck = (
 8003b02:	430b      	orrs	r3, r1
					| dpulse[4]<<6 | dpulse[5]<<5 | dpulse[6]<<4 | dpulse[7]<<3
 8003b04:	0179      	lsls	r1, r7, #5
			int tocheck = (
 8003b06:	430b      	orrs	r3, r1
					| dpulse[4]<<6 | dpulse[5]<<5 | dpulse[6]<<4 | dpulse[7]<<3
 8003b08:	4641      	mov	r1, r8
 8003b0a:	0109      	lsls	r1, r1, #4
			int tocheck = (
 8003b0c:	430b      	orrs	r3, r1
					| dpulse[4]<<6 | dpulse[5]<<5 | dpulse[6]<<4 | dpulse[7]<<3
 8003b0e:	4651      	mov	r1, sl
 8003b10:	00c9      	lsls	r1, r1, #3
			int tocheck = (
 8003b12:	430b      	orrs	r3, r1
					| dpulse[8]<<2 | dpulse[9]<<1 | dpulse[10]);
 8003b14:	9900      	ldr	r1, [sp, #0]
					|(dpulse[1]^dpulse[5]^dpulse[9])<<2
 8003b16:	4078      	eors	r0, r7
					| dpulse[8]<<2 | dpulse[9]<<1 | dpulse[10]);
 8003b18:	0089      	lsls	r1, r1, #2
			int tocheck = (
 8003b1a:	430b      	orrs	r3, r1
					| dpulse[8]<<2 | dpulse[9]<<1 | dpulse[10]);
 8003b1c:	9901      	ldr	r1, [sp, #4]
 8003b1e:	0049      	lsls	r1, r1, #1
			int tocheck = (
 8003b20:	430b      	orrs	r3, r1
			uint8_t calcCRC = ((dpulse[0]^dpulse[4]^dpulse[8])<<3
 8003b22:	0029      	movs	r1, r5
 8003b24:	9d00      	ldr	r5, [sp, #0]
 8003b26:	4071      	eors	r1, r6
 8003b28:	4069      	eors	r1, r5
					|(dpulse[1]^dpulse[5]^dpulse[9])<<2
 8003b2a:	9d01      	ldr	r5, [sp, #4]
			uint8_t calcCRC = ((dpulse[0]^dpulse[4]^dpulse[8])<<3
 8003b2c:	00c9      	lsls	r1, r1, #3
					|(dpulse[1]^dpulse[5]^dpulse[9])<<2
 8003b2e:	4068      	eors	r0, r5
 8003b30:	0080      	lsls	r0, r0, #2
 8003b32:	4301      	orrs	r1, r0
					|(dpulse[3]^dpulse[7]^dpulse[11])
 8003b34:	4655      	mov	r5, sl
 8003b36:	0020      	movs	r0, r4
					|(dpulse[2]^dpulse[6]^dpulse[10])<<1
 8003b38:	4646      	mov	r6, r8
					|(dpulse[3]^dpulse[7]^dpulse[11])
 8003b3a:	4068      	eors	r0, r5
					|(dpulse[2]^dpulse[6]^dpulse[10])<<1
 8003b3c:	464d      	mov	r5, r9
					|(dpulse[3]^dpulse[7]^dpulse[11])
 8003b3e:	9c06      	ldr	r4, [sp, #24]
					|(dpulse[2]^dpulse[6]^dpulse[10])<<1
 8003b40:	4075      	eors	r5, r6
					|(dpulse[3]^dpulse[7]^dpulse[11])
 8003b42:	4060      	eors	r0, r4
 8003b44:	4301      	orrs	r1, r0
					|(dpulse[2]^dpulse[6]^dpulse[10])<<1
 8003b46:	0028      	movs	r0, r5
 8003b48:	465d      	mov	r5, fp
 8003b4a:	4068      	eors	r0, r5
 8003b4c:	0040      	lsls	r0, r0, #1
					|(dpulse[3]^dpulse[7]^dpulse[11])
 8003b4e:	4301      	orrs	r1, r0
			uint8_t checkCRC = (dpulse[12]<<3 | dpulse[13]<<2 | dpulse[14]<<1 | dpulse[15]);
 8003b50:	9c08      	ldr	r4, [sp, #32]
 8003b52:	9807      	ldr	r0, [sp, #28]
 8003b54:	00a4      	lsls	r4, r4, #2
 8003b56:	00c0      	lsls	r0, r0, #3
 8003b58:	4320      	orrs	r0, r4
 8003b5a:	4302      	orrs	r2, r0
 8003b5c:	9809      	ldr	r0, [sp, #36]	; 0x24
			if(calcCRC == checkCRC){
 8003b5e:	b249      	sxtb	r1, r1
			uint8_t checkCRC = (dpulse[12]<<3 | dpulse[13]<<2 | dpulse[14]<<1 | dpulse[15]);
 8003b60:	0040      	lsls	r0, r0, #1
 8003b62:	4302      	orrs	r2, r0
			if(calcCRC == checkCRC){
 8003b64:	b252      	sxtb	r2, r2
 8003b66:	4291      	cmp	r1, r2
 8003b68:	d00e      	beq.n	8003b88 <computeDshotDMA+0x2bc>
			if ((tocheck <= 47)&& (tocheck > 0)){
 8003b6a:	1e5a      	subs	r2, r3, #1
 8003b6c:	2a2e      	cmp	r2, #46	; 0x2e
 8003b6e:	d805      	bhi.n	8003b7c <computeDshotDMA+0x2b0>
				newinput = 0;
 8003b70:	2100      	movs	r1, #0
 8003b72:	4a0d      	ldr	r2, [pc, #52]	; (8003ba8 <computeDshotDMA+0x2dc>)
 8003b74:	6011      	str	r1, [r2, #0]
				dshotcommand = tocheck;    //  todo
 8003b76:	4a0d      	ldr	r2, [pc, #52]	; (8003bac <computeDshotDMA+0x2e0>)
 8003b78:	6013      	str	r3, [r2, #0]
 8003b7a:	e6ca      	b.n	8003912 <computeDshotDMA+0x46>
			if (tocheck == 0){
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d000      	beq.n	8003b82 <computeDshotDMA+0x2b6>
 8003b80:	e6c7      	b.n	8003912 <computeDshotDMA+0x46>
				newinput = 0;
 8003b82:	4a09      	ldr	r2, [pc, #36]	; (8003ba8 <computeDshotDMA+0x2dc>)
 8003b84:	6013      	str	r3, [r2, #0]
 8003b86:	e6c4      	b.n	8003912 <computeDshotDMA+0x46>
				if (tocheck > 47){
 8003b88:	2b2f      	cmp	r3, #47	; 0x2f
 8003b8a:	ddee      	ble.n	8003b6a <computeDshotDMA+0x29e>
                    dshotcommand = 0;
 8003b8c:	2100      	movs	r1, #0
					newinput = tocheck;
 8003b8e:	4a06      	ldr	r2, [pc, #24]	; (8003ba8 <computeDshotDMA+0x2dc>)
 8003b90:	6013      	str	r3, [r2, #0]
                    dshotcommand = 0;
 8003b92:	4a06      	ldr	r2, [pc, #24]	; (8003bac <computeDshotDMA+0x2e0>)
 8003b94:	6011      	str	r1, [r2, #0]
 8003b96:	e7e8      	b.n	8003b6a <computeDshotDMA+0x29e>
 8003b98:	20000014 	.word	0x20000014
 8003b9c:	200001f4 	.word	0x200001f4
 8003ba0:	0000fdb4 	.word	0x0000fdb4
 8003ba4:	20000088 	.word	0x20000088
 8003ba8:	200000e4 	.word	0x200000e4
 8003bac:	200000cc 	.word	0x200000cc

08003bb0 <transferComplete>:

void transferComplete(){
 8003bb0:	b510      	push	{r4, lr}
	//	TIM15->CNT = 1;

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 8003bb2:	2108      	movs	r1, #8
 8003bb4:	4864      	ldr	r0, [pc, #400]	; (8003d48 <transferComplete+0x198>)
 8003bb6:	f7fd f9c1 	bl	8000f3c <HAL_GPIO_TogglePin>


	if (inputSet == 1){
 8003bba:	4b64      	ldr	r3, [pc, #400]	; (8003d4c <transferComplete+0x19c>)
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d000      	beq.n	8003bc4 <transferComplete+0x14>
			computeOS42Input();
			HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , 3);

		}
	}
}
 8003bc2:	bd10      	pop	{r4, pc}
		if (dshot == 1){
 8003bc4:	4b62      	ldr	r3, [pc, #392]	; (8003d50 <transferComplete+0x1a0>)
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d063      	beq.n	8003c94 <transferComplete+0xe4>
		if (proshot == 1){
 8003bcc:	4b61      	ldr	r3, [pc, #388]	; (8003d54 <transferComplete+0x1a4>)
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d056      	beq.n	8003c82 <transferComplete+0xd2>
		if  (servoPwm == 1){
 8003bd4:	4b60      	ldr	r3, [pc, #384]	; (8003d58 <transferComplete+0x1a8>)
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d03b      	beq.n	8003c54 <transferComplete+0xa4>
		if  (multishot){
 8003bdc:	4b5f      	ldr	r3, [pc, #380]	; (8003d5c <transferComplete+0x1ac>)
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d127      	bne.n	8003c34 <transferComplete+0x84>
		if  (oneshot125){
 8003be4:	4b5e      	ldr	r3, [pc, #376]	; (8003d60 <transferComplete+0x1b0>)
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d113      	bne.n	8003c14 <transferComplete+0x64>
		if  (oneshot42){
 8003bec:	4b5d      	ldr	r3, [pc, #372]	; (8003d64 <transferComplete+0x1b4>)
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d0e6      	beq.n	8003bc2 <transferComplete+0x12>
	int lastnumber = dma_buffer[0];
 8003bf4:	4c5c      	ldr	r4, [pc, #368]	; (8003d68 <transferComplete+0x1b8>)
		if(((dma_buffer[j] - lastnumber) < 4500) && ((dma_buffer[j] - lastnumber) > 0)){ // blank space
 8003bf6:	485d      	ldr	r0, [pc, #372]	; (8003d6c <transferComplete+0x1bc>)
	int lastnumber = dma_buffer[0];
 8003bf8:	6823      	ldr	r3, [r4, #0]
		if(((dma_buffer[j] - lastnumber) < 4500) && ((dma_buffer[j] - lastnumber) > 0)){ // blank space
 8003bfa:	6862      	ldr	r2, [r4, #4]
 8003bfc:	1ad1      	subs	r1, r2, r3
 8003bfe:	4281      	cmp	r1, r0
 8003c00:	d801      	bhi.n	8003c06 <transferComplete+0x56>
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d164      	bne.n	8003cd0 <transferComplete+0x120>
			HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , 3);
 8003c06:	2303      	movs	r3, #3
 8003c08:	0022      	movs	r2, r4
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	4858      	ldr	r0, [pc, #352]	; (8003d70 <transferComplete+0x1c0>)
 8003c0e:	f7fd fecf 	bl	80019b0 <HAL_TIM_IC_Start_DMA>
}
 8003c12:	e7d6      	b.n	8003bc2 <transferComplete+0x12>
	int lastnumber = dma_buffer[0];
 8003c14:	4c54      	ldr	r4, [pc, #336]	; (8003d68 <transferComplete+0x1b8>)
		if(((dma_buffer[j] - lastnumber) < 12300) && ((dma_buffer[j] - lastnumber) > 0)){ // blank space
 8003c16:	4857      	ldr	r0, [pc, #348]	; (8003d74 <transferComplete+0x1c4>)
	int lastnumber = dma_buffer[0];
 8003c18:	6822      	ldr	r2, [r4, #0]
		if(((dma_buffer[j] - lastnumber) < 12300) && ((dma_buffer[j] - lastnumber) > 0)){ // blank space
 8003c1a:	6863      	ldr	r3, [r4, #4]
 8003c1c:	1a99      	subs	r1, r3, r2
 8003c1e:	4281      	cmp	r1, r0
 8003c20:	d801      	bhi.n	8003c26 <transferComplete+0x76>
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d17b      	bne.n	8003d1e <transferComplete+0x16e>
			HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , 3);
 8003c26:	2303      	movs	r3, #3
 8003c28:	0022      	movs	r2, r4
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	4850      	ldr	r0, [pc, #320]	; (8003d70 <transferComplete+0x1c0>)
 8003c2e:	f7fd febf 	bl	80019b0 <HAL_TIM_IC_Start_DMA>
 8003c32:	e7db      	b.n	8003bec <transferComplete+0x3c>
	int lastnumber = dma_buffer[0];
 8003c34:	4c4c      	ldr	r4, [pc, #304]	; (8003d68 <transferComplete+0x1b8>)
		if(((dma_buffer[j] - lastnumber) < 1500) && ((dma_buffer[j] - lastnumber) > 0)){ // blank space
 8003c36:	4850      	ldr	r0, [pc, #320]	; (8003d78 <transferComplete+0x1c8>)
	int lastnumber = dma_buffer[0];
 8003c38:	6822      	ldr	r2, [r4, #0]
		if(((dma_buffer[j] - lastnumber) < 1500) && ((dma_buffer[j] - lastnumber) > 0)){ // blank space
 8003c3a:	6863      	ldr	r3, [r4, #4]
 8003c3c:	1a99      	subs	r1, r3, r2
 8003c3e:	4281      	cmp	r1, r0
 8003c40:	d801      	bhi.n	8003c46 <transferComplete+0x96>
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d159      	bne.n	8003cfa <transferComplete+0x14a>
			HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , 3);
 8003c46:	2303      	movs	r3, #3
 8003c48:	0022      	movs	r2, r4
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	4848      	ldr	r0, [pc, #288]	; (8003d70 <transferComplete+0x1c0>)
 8003c4e:	f7fd feaf 	bl	80019b0 <HAL_TIM_IC_Start_DMA>
 8003c52:	e7c7      	b.n	8003be4 <transferComplete+0x34>
		if(((dma_buffer[j] - lastnumber) >1000 ) && ((dma_buffer[j] - lastnumber) < 2010)){ // blank space
 8003c54:	4c44      	ldr	r4, [pc, #272]	; (8003d68 <transferComplete+0x1b8>)
 8003c56:	4a49      	ldr	r2, [pc, #292]	; (8003d7c <transferComplete+0x1cc>)
 8003c58:	6861      	ldr	r1, [r4, #4]
 8003c5a:	6823      	ldr	r3, [r4, #0]
 8003c5c:	1acb      	subs	r3, r1, r3
 8003c5e:	1898      	adds	r0, r3, r2
 8003c60:	22fc      	movs	r2, #252	; 0xfc
 8003c62:	0092      	lsls	r2, r2, #2
 8003c64:	4290      	cmp	r0, r2
 8003c66:	d91e      	bls.n	8003ca6 <transferComplete+0xf6>
 8003c68:	68a3      	ldr	r3, [r4, #8]
 8003c6a:	1a5b      	subs	r3, r3, r1
 8003c6c:	4943      	ldr	r1, [pc, #268]	; (8003d7c <transferComplete+0x1cc>)
 8003c6e:	1859      	adds	r1, r3, r1
 8003c70:	4291      	cmp	r1, r2
 8003c72:	d918      	bls.n	8003ca6 <transferComplete+0xf6>
			HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , 3);
 8003c74:	2303      	movs	r3, #3
 8003c76:	0022      	movs	r2, r4
 8003c78:	2100      	movs	r1, #0
 8003c7a:	483d      	ldr	r0, [pc, #244]	; (8003d70 <transferComplete+0x1c0>)
 8003c7c:	f7fd fe98 	bl	80019b0 <HAL_TIM_IC_Start_DMA>
 8003c80:	e7ac      	b.n	8003bdc <transferComplete+0x2c>
			computeProshotDMA();
 8003c82:	f7ff fd3b 	bl	80036fc <computeProshotDMA>
			HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , 16);
 8003c86:	2310      	movs	r3, #16
 8003c88:	4a37      	ldr	r2, [pc, #220]	; (8003d68 <transferComplete+0x1b8>)
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	4838      	ldr	r0, [pc, #224]	; (8003d70 <transferComplete+0x1c0>)
 8003c8e:	f7fd fe8f 	bl	80019b0 <HAL_TIM_IC_Start_DMA>
 8003c92:	e79f      	b.n	8003bd4 <transferComplete+0x24>
			computeDshotDMA();
 8003c94:	f7ff fe1a 	bl	80038cc <computeDshotDMA>
			HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , 64);
 8003c98:	2340      	movs	r3, #64	; 0x40
 8003c9a:	4a33      	ldr	r2, [pc, #204]	; (8003d68 <transferComplete+0x1b8>)
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	4834      	ldr	r0, [pc, #208]	; (8003d70 <transferComplete+0x1c0>)
 8003ca0:	f7fd fe86 	bl	80019b0 <HAL_TIM_IC_Start_DMA>
 8003ca4:	e792      	b.n	8003bcc <transferComplete+0x1c>
	if (x < in_min){
 8003ca6:	4a36      	ldr	r2, [pc, #216]	; (8003d80 <transferComplete+0x1d0>)
 8003ca8:	2000      	movs	r0, #0
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d90d      	bls.n	8003cca <transferComplete+0x11a>
 8003cae:	22fa      	movs	r2, #250	; 0xfa
 8003cb0:	00d2      	lsls	r2, r2, #3
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	dd00      	ble.n	8003cb8 <transferComplete+0x108>
 8003cb6:	0013      	movs	r3, r2
 8003cb8:	4a32      	ldr	r2, [pc, #200]	; (8003d84 <transferComplete+0x1d4>)
 8003cba:	20fa      	movs	r0, #250	; 0xfa
 8003cbc:	4694      	mov	ip, r2
 8003cbe:	00c0      	lsls	r0, r0, #3
 8003cc0:	4463      	add	r3, ip
 8003cc2:	4358      	muls	r0, r3
 8003cc4:	4930      	ldr	r1, [pc, #192]	; (8003d88 <transferComplete+0x1d8>)
 8003cc6:	f7fc faa9 	bl	800021c <__divsi3>
			newinput = map((dma_buffer[j] - lastnumber), 1090, 2000, 0, 2000);
 8003cca:	4b30      	ldr	r3, [pc, #192]	; (8003d8c <transferComplete+0x1dc>)
 8003ccc:	6018      	str	r0, [r3, #0]
 8003cce:	e7d1      	b.n	8003c74 <transferComplete+0xc4>
	if (x < in_min){
 8003cd0:	4b2f      	ldr	r3, [pc, #188]	; (8003d90 <transferComplete+0x1e0>)
 8003cd2:	2000      	movs	r0, #0
 8003cd4:	4299      	cmp	r1, r3
 8003cd6:	d90d      	bls.n	8003cf4 <transferComplete+0x144>
 8003cd8:	23fc      	movs	r3, #252	; 0xfc
 8003cda:	011b      	lsls	r3, r3, #4
 8003cdc:	4299      	cmp	r1, r3
 8003cde:	dd00      	ble.n	8003ce2 <transferComplete+0x132>
 8003ce0:	0019      	movs	r1, r3
 8003ce2:	4b2c      	ldr	r3, [pc, #176]	; (8003d94 <transferComplete+0x1e4>)
 8003ce4:	20fa      	movs	r0, #250	; 0xfa
 8003ce6:	469c      	mov	ip, r3
 8003ce8:	00c0      	lsls	r0, r0, #3
 8003cea:	4461      	add	r1, ip
 8003cec:	4348      	muls	r0, r1
 8003cee:	492a      	ldr	r1, [pc, #168]	; (8003d98 <transferComplete+0x1e8>)
 8003cf0:	f7fc fa94 	bl	800021c <__divsi3>
			newinput = map((dma_buffer[j] - lastnumber),2020, 4032, 0, 2000);
 8003cf4:	4b25      	ldr	r3, [pc, #148]	; (8003d8c <transferComplete+0x1dc>)
 8003cf6:	6018      	str	r0, [r3, #0]
 8003cf8:	e785      	b.n	8003c06 <transferComplete+0x56>
	if (x < in_min){
 8003cfa:	2000      	movs	r0, #0
 8003cfc:	29f2      	cmp	r1, #242	; 0xf2
 8003cfe:	d90b      	bls.n	8003d18 <transferComplete+0x168>
 8003d00:	2396      	movs	r3, #150	; 0x96
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	4299      	cmp	r1, r3
 8003d06:	dd00      	ble.n	8003d0a <transferComplete+0x15a>
 8003d08:	0019      	movs	r1, r3
 8003d0a:	20fa      	movs	r0, #250	; 0xfa
 8003d0c:	39f3      	subs	r1, #243	; 0xf3
 8003d0e:	00c0      	lsls	r0, r0, #3
 8003d10:	4348      	muls	r0, r1
 8003d12:	4922      	ldr	r1, [pc, #136]	; (8003d9c <transferComplete+0x1ec>)
 8003d14:	f7fc fa82 	bl	800021c <__divsi3>
			newinput = map((dma_buffer[j] - lastnumber),243,1200, 0, 2000);
 8003d18:	4b1c      	ldr	r3, [pc, #112]	; (8003d8c <transferComplete+0x1dc>)
 8003d1a:	6018      	str	r0, [r3, #0]
 8003d1c:	e793      	b.n	8003c46 <transferComplete+0x96>
	if (x < in_min){
 8003d1e:	4b20      	ldr	r3, [pc, #128]	; (8003da0 <transferComplete+0x1f0>)
 8003d20:	2000      	movs	r0, #0
 8003d22:	4299      	cmp	r1, r3
 8003d24:	d90c      	bls.n	8003d40 <transferComplete+0x190>
 8003d26:	4b1f      	ldr	r3, [pc, #124]	; (8003da4 <transferComplete+0x1f4>)
 8003d28:	4299      	cmp	r1, r3
 8003d2a:	dd00      	ble.n	8003d2e <transferComplete+0x17e>
 8003d2c:	0019      	movs	r1, r3
 8003d2e:	4b1e      	ldr	r3, [pc, #120]	; (8003da8 <transferComplete+0x1f8>)
 8003d30:	20fa      	movs	r0, #250	; 0xfa
 8003d32:	469c      	mov	ip, r3
 8003d34:	00c0      	lsls	r0, r0, #3
 8003d36:	4461      	add	r1, ip
 8003d38:	4348      	muls	r0, r1
 8003d3a:	491c      	ldr	r1, [pc, #112]	; (8003dac <transferComplete+0x1fc>)
 8003d3c:	f7fc fa6e 	bl	800021c <__divsi3>
			newinput = map((dma_buffer[j] - lastnumber),6500,12000, 0, 2000);
 8003d40:	4b12      	ldr	r3, [pc, #72]	; (8003d8c <transferComplete+0x1dc>)
 8003d42:	6018      	str	r0, [r3, #0]
 8003d44:	e76f      	b.n	8003c26 <transferComplete+0x76>
 8003d46:	46c0      	nop			; (mov r8, r8)
 8003d48:	48000800 	.word	0x48000800
 8003d4c:	200000d8 	.word	0x200000d8
 8003d50:	200000c8 	.word	0x200000c8
 8003d54:	200000fc 	.word	0x200000fc
 8003d58:	20000108 	.word	0x20000108
 8003d5c:	200000e0 	.word	0x200000e0
 8003d60:	200000e8 	.word	0x200000e8
 8003d64:	200000e9 	.word	0x200000e9
 8003d68:	200001f4 	.word	0x200001f4
 8003d6c:	00001193 	.word	0x00001193
 8003d70:	20000130 	.word	0x20000130
 8003d74:	0000300b 	.word	0x0000300b
 8003d78:	000005db 	.word	0x000005db
 8003d7c:	fffffc17 	.word	0xfffffc17
 8003d80:	00000441 	.word	0x00000441
 8003d84:	fffffbbe 	.word	0xfffffbbe
 8003d88:	0000038e 	.word	0x0000038e
 8003d8c:	200000e4 	.word	0x200000e4
 8003d90:	000007e3 	.word	0x000007e3
 8003d94:	fffff81c 	.word	0xfffff81c
 8003d98:	000007dc 	.word	0x000007dc
 8003d9c:	000003bd 	.word	0x000003bd
 8003da0:	00001963 	.word	0x00001963
 8003da4:	00002ee0 	.word	0x00002ee0
 8003da8:	ffffe69c 	.word	0xffffe69c
 8003dac:	0000157c 	.word	0x0000157c

08003db0 <SystemClock_Config>:
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_LSI
 8003db0:	2319      	movs	r3, #25
{
 8003db2:	b510      	push	{r4, lr}
 8003db4:	b090      	sub	sp, #64	; 0x40
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_LSI
 8003db6:	9304      	str	r3, [sp, #16]
			|RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003db8:	3b18      	subs	r3, #24
 8003dba:	9305      	str	r3, [sp, #20]
	RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8003dbc:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_OscInitStruct.HSI14CalibrationValue = 16;
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003dbe:	930b      	str	r3, [sp, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003dc0:	2380      	movs	r3, #128	; 0x80
 8003dc2:	025b      	lsls	r3, r3, #9
 8003dc4:	930d      	str	r3, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8003dc6:	2380      	movs	r3, #128	; 0x80
 8003dc8:	035b      	lsls	r3, r3, #13
	RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8003dca:	2210      	movs	r2, #16
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003dcc:	2402      	movs	r4, #2
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8003dce:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8003dd0:	2300      	movs	r3, #0
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003dd2:	a804      	add	r0, sp, #16
	RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8003dd4:	920a      	str	r2, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003dd6:	940c      	str	r4, [sp, #48]	; 0x30
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8003dd8:	930f      	str	r3, [sp, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003dda:	f7fd f8e9 	bl	8000fb0 <HAL_RCC_OscConfig>
 8003dde:	2800      	cmp	r0, #0
 8003de0:	d000      	beq.n	8003de4 <SystemClock_Config+0x34>
 8003de2:	e7fe      	b.n	8003de2 <SystemClock_Config+0x32>
		_Error_Handler(__FILE__, __LINE__);
	}

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003de4:	2307      	movs	r3, #7
			|RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003de6:	9002      	str	r0, [sp, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003de8:	9003      	str	r0, [sp, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003dea:	2101      	movs	r1, #1
 8003dec:	4668      	mov	r0, sp
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003dee:	9300      	str	r3, [sp, #0]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003df0:	9401      	str	r4, [sp, #4]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003df2:	f7fd fb15 	bl	8001420 <HAL_RCC_ClockConfig>
 8003df6:	2800      	cmp	r0, #0
 8003df8:	d000      	beq.n	8003dfc <SystemClock_Config+0x4c>
 8003dfa:	e7fe      	b.n	8003dfa <SystemClock_Config+0x4a>
		_Error_Handler(__FILE__, __LINE__);
	}

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003dfc:	f7fd fbe2 	bl	80015c4 <HAL_RCC_GetHCLKFreq>
 8003e00:	21fa      	movs	r1, #250	; 0xfa
 8003e02:	0089      	lsls	r1, r1, #2
 8003e04:	f7fc f980 	bl	8000108 <__udivsi3>
 8003e08:	f7fc fec2 	bl	8000b90 <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003e0c:	2004      	movs	r0, #4
 8003e0e:	f7fc fedb 	bl	8000bc8 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003e12:	2001      	movs	r0, #1
 8003e14:	2200      	movs	r2, #0
 8003e16:	2100      	movs	r1, #0
 8003e18:	4240      	negs	r0, r0
 8003e1a:	f7fc fe7b 	bl	8000b14 <HAL_NVIC_SetPriority>
}
 8003e1e:	b010      	add	sp, #64	; 0x40
 8003e20:	bd10      	pop	{r4, pc}
 8003e22:	46c0      	nop			; (mov r8, r8)

08003e24 <main>:
{
 8003e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e26:	46de      	mov	lr, fp
 8003e28:	4657      	mov	r7, sl
 8003e2a:	464e      	mov	r6, r9
 8003e2c:	4645      	mov	r5, r8
 8003e2e:	b5e0      	push	{r5, r6, r7, lr}
 8003e30:	b09d      	sub	sp, #116	; 0x74
	HAL_Init();
 8003e32:	f7fc faf1 	bl	8000418 <HAL_Init>
	SystemClock_Config();
 8003e36:	f7ff ffbb 	bl	8003db0 <SystemClock_Config>
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8003e3a:	2180      	movs	r1, #128	; 0x80
 8003e3c:	4cd3      	ldr	r4, [pc, #844]	; (800418c <main+0x368>)
 8003e3e:	03c9      	lsls	r1, r1, #15
 8003e40:	6962      	ldr	r2, [r4, #20]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8003e42:	2090      	movs	r0, #144	; 0x90
 8003e44:	430a      	orrs	r2, r1
 8003e46:	6162      	str	r2, [r4, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8003e48:	6963      	ldr	r3, [r4, #20]
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_15);

	/**/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003e4a:	2500      	movs	r5, #0
 8003e4c:	400b      	ands	r3, r1
  SET_BIT(RCC->AHBENR, Periphs);
 8003e4e:	2180      	movs	r1, #128	; 0x80
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8003e50:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 8003e52:	9b05      	ldr	r3, [sp, #20]
  SET_BIT(RCC->AHBENR, Periphs);
 8003e54:	6962      	ldr	r2, [r4, #20]
 8003e56:	0289      	lsls	r1, r1, #10
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	6162      	str	r2, [r4, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8003e5c:	6963      	ldr	r3, [r4, #20]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003e5e:	2701      	movs	r7, #1
 8003e60:	400b      	ands	r3, r1
  SET_BIT(RCC->AHBENR, Periphs);
 8003e62:	2180      	movs	r1, #128	; 0x80
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8003e64:	9306      	str	r3, [sp, #24]
  (void)tmpreg;
 8003e66:	9b06      	ldr	r3, [sp, #24]
  SET_BIT(RCC->AHBENR, Periphs);
 8003e68:	6962      	ldr	r2, [r4, #20]
 8003e6a:	02c9      	lsls	r1, r1, #11
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	6162      	str	r2, [r4, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8003e70:	6963      	ldr	r3, [r4, #20]
 8003e72:	05c0      	lsls	r0, r0, #23
 8003e74:	400b      	ands	r3, r1
 8003e76:	9307      	str	r3, [sp, #28]
  (void)tmpreg;
 8003e78:	9b07      	ldr	r3, [sp, #28]
 8003e7a:	2380      	movs	r3, #128	; 0x80
 8003e7c:	021b      	lsls	r3, r3, #8
 8003e7e:	6283      	str	r3, [r0, #40]	; 0x28
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e80:	a915      	add	r1, sp, #84	; 0x54
	GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8003e82:	9315      	str	r3, [sp, #84]	; 0x54
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003e84:	9716      	str	r7, [sp, #88]	; 0x58
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003e86:	9517      	str	r5, [sp, #92]	; 0x5c
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003e88:	9518      	str	r5, [sp, #96]	; 0x60
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003e8a:	9519      	str	r5, [sp, #100]	; 0x64
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e8c:	f7fe fa2e 	bl	80022ec <LL_GPIO_Init>
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003e90:	6963      	ldr	r3, [r4, #20]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003e92:	2200      	movs	r2, #0
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003e94:	433b      	orrs	r3, r7
 8003e96:	6163      	str	r3, [r4, #20]
 8003e98:	6963      	ldr	r3, [r4, #20]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003e9a:	2100      	movs	r1, #0
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003e9c:	403b      	ands	r3, r7
 8003e9e:	9304      	str	r3, [sp, #16]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003ea0:	2009      	movs	r0, #9
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003ea2:	9b04      	ldr	r3, [sp, #16]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003ea4:	f7fc fe36 	bl	8000b14 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003ea8:	2009      	movs	r0, #9
 8003eaa:	f7fc fe67 	bl	8000b7c <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8003eae:	2200      	movs	r2, #0
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	200b      	movs	r0, #11
 8003eb4:	f7fc fe2e 	bl	8000b14 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8003eb8:	200b      	movs	r0, #11
 8003eba:	f7fc fe5f 	bl	8000b7c <HAL_NVIC_EnableIRQ>
	hadc.Instance = ADC1;
 8003ebe:	4eb4      	ldr	r6, [pc, #720]	; (8004190 <main+0x36c>)
 8003ec0:	4bb4      	ldr	r3, [pc, #720]	; (8004194 <main+0x370>)
	if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003ec2:	0030      	movs	r0, r6
	hadc.Instance = ADC1;
 8003ec4:	6033      	str	r3, [r6, #0]
	hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003ec6:	2308      	movs	r3, #8
 8003ec8:	6173      	str	r3, [r6, #20]
	hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC4;
 8003eca:	3338      	adds	r3, #56	; 0x38
 8003ecc:	62b3      	str	r3, [r6, #40]	; 0x28
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003ece:	2380      	movs	r3, #128	; 0x80
 8003ed0:	00db      	lsls	r3, r3, #3
	hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003ed2:	6075      	str	r5, [r6, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003ed4:	60b5      	str	r5, [r6, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003ed6:	60f5      	str	r5, [r6, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003ed8:	6137      	str	r7, [r6, #16]
	hadc.Init.LowPowerAutoWait = DISABLE;
 8003eda:	61b5      	str	r5, [r6, #24]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003edc:	61f5      	str	r5, [r6, #28]
	hadc.Init.ContinuousConvMode = DISABLE;
 8003ede:	6235      	str	r5, [r6, #32]
	hadc.Init.DiscontinuousConvMode = ENABLE;
 8003ee0:	6277      	str	r7, [r6, #36]	; 0x24
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003ee2:	62f3      	str	r3, [r6, #44]	; 0x2c
	hadc.Init.DMAContinuousRequests = ENABLE;
 8003ee4:	6337      	str	r7, [r6, #48]	; 0x30
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003ee6:	6377      	str	r7, [r6, #52]	; 0x34
	if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003ee8:	f7fc fb1a 	bl	8000520 <HAL_ADC_Init>
 8003eec:	2800      	cmp	r0, #0
 8003eee:	d000      	beq.n	8003ef2 <main+0xce>
 8003ef0:	e7fe      	b.n	8003ef0 <main+0xcc>
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003ef2:	2780      	movs	r7, #128	; 0x80
	sConfig.Channel = ADC_CHANNEL_3;
 8003ef4:	2403      	movs	r4, #3
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8003ef6:	2307      	movs	r3, #7
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003ef8:	017f      	lsls	r7, r7, #5
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003efa:	a915      	add	r1, sp, #84	; 0x54
 8003efc:	0030      	movs	r0, r6
	sConfig.Channel = ADC_CHANNEL_3;
 8003efe:	9415      	str	r4, [sp, #84]	; 0x54
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003f00:	9716      	str	r7, [sp, #88]	; 0x58
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8003f02:	9317      	str	r3, [sp, #92]	; 0x5c
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003f04:	f7fc fcc0 	bl	8000888 <HAL_ADC_ConfigChannel>
 8003f08:	2800      	cmp	r0, #0
 8003f0a:	d000      	beq.n	8003f0e <main+0xea>
 8003f0c:	e7fe      	b.n	8003f0c <main+0xe8>
	sConfig.Channel = ADC_CHANNEL_6;
 8003f0e:	2306      	movs	r3, #6
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003f10:	a915      	add	r1, sp, #84	; 0x54
 8003f12:	0030      	movs	r0, r6
	sConfig.Channel = ADC_CHANNEL_6;
 8003f14:	9315      	str	r3, [sp, #84]	; 0x54
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003f16:	f7fc fcb7 	bl	8000888 <HAL_ADC_ConfigChannel>
 8003f1a:	2800      	cmp	r0, #0
 8003f1c:	d000      	beq.n	8003f20 <main+0xfc>
 8003f1e:	e7fe      	b.n	8003f1e <main+0xfa>
	hcomp1.Instance = COMP1;
 8003f20:	4d9d      	ldr	r5, [pc, #628]	; (8004198 <main+0x374>)
 8003f22:	4b9e      	ldr	r3, [pc, #632]	; (800419c <main+0x378>)
	hcomp1.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8003f24:	60a8      	str	r0, [r5, #8]
	hcomp1.Instance = COMP1;
 8003f26:	602b      	str	r3, [r5, #0]
	hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_DAC2;
 8003f28:	2350      	movs	r3, #80	; 0x50
	hcomp1.Init.Output = COMP_OUTPUT_NONE;
 8003f2a:	60e8      	str	r0, [r5, #12]
	hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8003f2c:	6128      	str	r0, [r5, #16]
	hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8003f2e:	6168      	str	r0, [r5, #20]
	hcomp1.Init.Mode = COMP_MODE_HIGHSPEED;
 8003f30:	61a8      	str	r0, [r5, #24]
	hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8003f32:	61e8      	str	r0, [r5, #28]
	if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8003f34:	0028      	movs	r0, r5
	hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_DAC2;
 8003f36:	606b      	str	r3, [r5, #4]
	hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 8003f38:	622c      	str	r4, [r5, #32]
	if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8003f3a:	f7fc fd2f 	bl	800099c <HAL_COMP_Init>
 8003f3e:	2800      	cmp	r0, #0
 8003f40:	d000      	beq.n	8003f44 <main+0x120>
 8003f42:	e7fe      	b.n	8003f42 <main+0x11e>
	htim1.Instance = TIM1;
 8003f44:	4c96      	ldr	r4, [pc, #600]	; (80041a0 <main+0x37c>)
 8003f46:	4b97      	ldr	r3, [pc, #604]	; (80041a4 <main+0x380>)
	htim1.Init.Prescaler = 0;
 8003f48:	6060      	str	r0, [r4, #4]
	htim1.Instance = TIM1;
 8003f4a:	6023      	str	r3, [r4, #0]
	htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8003f4c:	2320      	movs	r3, #32
 8003f4e:	60a3      	str	r3, [r4, #8]
	htim1.Init.Period = 999;
 8003f50:	4b95      	ldr	r3, [pc, #596]	; (80041a8 <main+0x384>)
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f52:	6120      	str	r0, [r4, #16]
	htim1.Init.RepetitionCounter = 0;
 8003f54:	6160      	str	r0, [r4, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f56:	61a0      	str	r0, [r4, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003f58:	0020      	movs	r0, r4
	htim1.Init.Period = 999;
 8003f5a:	60e3      	str	r3, [r4, #12]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003f5c:	f7fd fb38 	bl	80015d0 <HAL_TIM_Base_Init>
 8003f60:	2800      	cmp	r0, #0
 8003f62:	d000      	beq.n	8003f66 <main+0x142>
 8003f64:	e7fe      	b.n	8003f64 <main+0x140>
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003f66:	a90a      	add	r1, sp, #40	; 0x28
 8003f68:	0020      	movs	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f6a:	970a      	str	r7, [sp, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003f6c:	f7fd ffa8 	bl	8001ec0 <HAL_TIM_ConfigClockSource>
 8003f70:	2800      	cmp	r0, #0
 8003f72:	d000      	beq.n	8003f76 <main+0x152>
 8003f74:	e7fe      	b.n	8003f74 <main+0x150>
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003f76:	0020      	movs	r0, r4
 8003f78:	f7fd fbfe 	bl	8001778 <HAL_TIM_PWM_Init>
 8003f7c:	2800      	cmp	r0, #0
 8003f7e:	d000      	beq.n	8003f82 <main+0x15e>
 8003f80:	e7fe      	b.n	8003f80 <main+0x15c>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8003f82:	2370      	movs	r3, #112	; 0x70
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f84:	9009      	str	r0, [sp, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003f86:	a908      	add	r1, sp, #32
 8003f88:	0020      	movs	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8003f8a:	9308      	str	r3, [sp, #32]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003f8c:	f7fe f94e 	bl	800222c <HAL_TIMEx_MasterConfigSynchronization>
 8003f90:	2800      	cmp	r0, #0
 8003f92:	d000      	beq.n	8003f96 <main+0x172>
 8003f94:	e7fe      	b.n	8003f94 <main+0x170>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f96:	2360      	movs	r3, #96	; 0x60
	sConfigOC.Pulse = 0;
 8003f98:	900f      	str	r0, [sp, #60]	; 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f9a:	9010      	str	r0, [sp, #64]	; 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003f9c:	9011      	str	r0, [sp, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f9e:	9012      	str	r0, [sp, #72]	; 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003fa0:	9013      	str	r0, [sp, #76]	; 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003fa2:	9014      	str	r0, [sp, #80]	; 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	a90e      	add	r1, sp, #56	; 0x38
 8003fa8:	0020      	movs	r0, r4
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003faa:	930e      	str	r3, [sp, #56]	; 0x38
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003fac:	f7fd fe52 	bl	8001c54 <HAL_TIM_PWM_ConfigChannel>
 8003fb0:	2800      	cmp	r0, #0
 8003fb2:	d000      	beq.n	8003fb6 <main+0x192>
 8003fb4:	e7fe      	b.n	8003fb4 <main+0x190>
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003fb6:	2204      	movs	r2, #4
 8003fb8:	a90e      	add	r1, sp, #56	; 0x38
 8003fba:	0020      	movs	r0, r4
 8003fbc:	f7fd fe4a 	bl	8001c54 <HAL_TIM_PWM_ConfigChannel>
 8003fc0:	2800      	cmp	r0, #0
 8003fc2:	d000      	beq.n	8003fc6 <main+0x1a2>
 8003fc4:	e7fe      	b.n	8003fc4 <main+0x1a0>
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003fc6:	2208      	movs	r2, #8
 8003fc8:	a90e      	add	r1, sp, #56	; 0x38
 8003fca:	0020      	movs	r0, r4
 8003fcc:	f7fd fe42 	bl	8001c54 <HAL_TIM_PWM_ConfigChannel>
 8003fd0:	2800      	cmp	r0, #0
 8003fd2:	d000      	beq.n	8003fd6 <main+0x1b2>
 8003fd4:	e7fe      	b.n	8003fd4 <main+0x1b0>
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003fd6:	220c      	movs	r2, #12
 8003fd8:	a90e      	add	r1, sp, #56	; 0x38
 8003fda:	0020      	movs	r0, r4
 8003fdc:	f7fd fe3a 	bl	8001c54 <HAL_TIM_PWM_ConfigChannel>
 8003fe0:	2800      	cmp	r0, #0
 8003fe2:	d000      	beq.n	8003fe6 <main+0x1c2>
 8003fe4:	e7fe      	b.n	8003fe4 <main+0x1c0>
	sBreakDeadTimeConfig.DeadTime = 60;
 8003fe6:	233c      	movs	r3, #60	; 0x3c
 8003fe8:	9318      	str	r3, [sp, #96]	; 0x60
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003fea:	2380      	movs	r3, #128	; 0x80
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003fec:	9015      	str	r0, [sp, #84]	; 0x54
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003fee:	9016      	str	r0, [sp, #88]	; 0x58
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003ff0:	9017      	str	r0, [sp, #92]	; 0x5c
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003ff2:	9019      	str	r0, [sp, #100]	; 0x64
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003ff4:	019b      	lsls	r3, r3, #6
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003ff6:	901b      	str	r0, [sp, #108]	; 0x6c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003ff8:	a915      	add	r1, sp, #84	; 0x54
 8003ffa:	0020      	movs	r0, r4
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003ffc:	931a      	str	r3, [sp, #104]	; 0x68
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003ffe:	f7fe f935 	bl	800226c <HAL_TIMEx_ConfigBreakDeadTime>
 8004002:	1e07      	subs	r7, r0, #0
 8004004:	d000      	beq.n	8004008 <main+0x1e4>
 8004006:	e7fe      	b.n	8004006 <main+0x1e2>
	HAL_TIM_MspPostInit(&htim1);
 8004008:	0020      	movs	r0, r4
 800400a:	f000 fca5 	bl	8004958 <HAL_TIM_MspPostInit>
	htim2.Instance = TIM2;
 800400e:	4b67      	ldr	r3, [pc, #412]	; (80041ac <main+0x388>)
 8004010:	4699      	mov	r9, r3
 8004012:	2380      	movs	r3, #128	; 0x80
 8004014:	464a      	mov	r2, r9
 8004016:	05db      	lsls	r3, r3, #23
 8004018:	6013      	str	r3, [r2, #0]
	htim2.Init.Prescaler = 10;
 800401a:	230a      	movs	r3, #10
 800401c:	469a      	mov	sl, r3
 800401e:	464b      	mov	r3, r9
 8004020:	4652      	mov	r2, sl
 8004022:	605a      	str	r2, [r3, #4]
	htim2.Init.Period = 50000;
 8004024:	464a      	mov	r2, r9
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004026:	609f      	str	r7, [r3, #8]
	htim2.Init.Period = 50000;
 8004028:	4b61      	ldr	r3, [pc, #388]	; (80041b0 <main+0x38c>)
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800402a:	4648      	mov	r0, r9
	htim2.Init.Period = 50000;
 800402c:	60d3      	str	r3, [r2, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800402e:	6117      	str	r7, [r2, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004030:	6197      	str	r7, [r2, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004032:	f7fd facd 	bl	80015d0 <HAL_TIM_Base_Init>
 8004036:	2800      	cmp	r0, #0
 8004038:	d000      	beq.n	800403c <main+0x218>
 800403a:	e7fe      	b.n	800403a <main+0x216>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800403c:	2780      	movs	r7, #128	; 0x80
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800403e:	a915      	add	r1, sp, #84	; 0x54
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004040:	017f      	lsls	r7, r7, #5
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004042:	4648      	mov	r0, r9
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004044:	9715      	str	r7, [sp, #84]	; 0x54
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004046:	f7fd ff3b 	bl	8001ec0 <HAL_TIM_ConfigClockSource>
 800404a:	2800      	cmp	r0, #0
 800404c:	d000      	beq.n	8004050 <main+0x22c>
 800404e:	e7fe      	b.n	800404e <main+0x22a>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004050:	900e      	str	r0, [sp, #56]	; 0x38
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004052:	900f      	str	r0, [sp, #60]	; 0x3c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004054:	a90e      	add	r1, sp, #56	; 0x38
 8004056:	4648      	mov	r0, r9
 8004058:	f7fe f8e8 	bl	800222c <HAL_TIMEx_MasterConfigSynchronization>
 800405c:	2800      	cmp	r0, #0
 800405e:	d000      	beq.n	8004062 <main+0x23e>
 8004060:	e7fe      	b.n	8004060 <main+0x23c>
	htim3.Instance = TIM3;
 8004062:	4b54      	ldr	r3, [pc, #336]	; (80041b4 <main+0x390>)
 8004064:	4698      	mov	r8, r3
 8004066:	4642      	mov	r2, r8
 8004068:	4b53      	ldr	r3, [pc, #332]	; (80041b8 <main+0x394>)
 800406a:	6013      	str	r3, [r2, #0]
	htim3.Init.Prescaler = 10;
 800406c:	4643      	mov	r3, r8
 800406e:	4652      	mov	r2, sl
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004070:	6098      	str	r0, [r3, #8]
	htim3.Init.Prescaler = 10;
 8004072:	605a      	str	r2, [r3, #4]
	htim3.Init.Period = 65535;
 8004074:	4b51      	ldr	r3, [pc, #324]	; (80041bc <main+0x398>)
 8004076:	469a      	mov	sl, r3
 8004078:	4643      	mov	r3, r8
 800407a:	4652      	mov	r2, sl
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800407c:	6118      	str	r0, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800407e:	6198      	str	r0, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004080:	4640      	mov	r0, r8
	htim3.Init.Period = 65535;
 8004082:	60da      	str	r2, [r3, #12]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004084:	f7fd faa4 	bl	80015d0 <HAL_TIM_Base_Init>
 8004088:	2800      	cmp	r0, #0
 800408a:	d000      	beq.n	800408e <main+0x26a>
 800408c:	e7fe      	b.n	800408c <main+0x268>
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800408e:	a915      	add	r1, sp, #84	; 0x54
 8004090:	4640      	mov	r0, r8
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004092:	9715      	str	r7, [sp, #84]	; 0x54
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004094:	f7fd ff14 	bl	8001ec0 <HAL_TIM_ConfigClockSource>
 8004098:	2800      	cmp	r0, #0
 800409a:	d000      	beq.n	800409e <main+0x27a>
 800409c:	e7fe      	b.n	800409c <main+0x278>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800409e:	900e      	str	r0, [sp, #56]	; 0x38
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040a0:	900f      	str	r0, [sp, #60]	; 0x3c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80040a2:	a90e      	add	r1, sp, #56	; 0x38
 80040a4:	4640      	mov	r0, r8
 80040a6:	f7fe f8c1 	bl	800222c <HAL_TIMEx_MasterConfigSynchronization>
 80040aa:	2800      	cmp	r0, #0
 80040ac:	d000      	beq.n	80040b0 <main+0x28c>
 80040ae:	e7fe      	b.n	80040ae <main+0x28a>
	htim15.Instance = TIM15;
 80040b0:	4f43      	ldr	r7, [pc, #268]	; (80041c0 <main+0x39c>)
 80040b2:	4b44      	ldr	r3, [pc, #272]	; (80041c4 <main+0x3a0>)
	htim15.Init.Prescaler = 0;
 80040b4:	6078      	str	r0, [r7, #4]
	htim15.Instance = TIM15;
 80040b6:	603b      	str	r3, [r7, #0]
	htim15.Init.Period = 0xffff;
 80040b8:	4653      	mov	r3, sl
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040ba:	60b8      	str	r0, [r7, #8]
	htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040bc:	6138      	str	r0, [r7, #16]
	htim15.Init.RepetitionCounter = 0;
 80040be:	6178      	str	r0, [r7, #20]
	htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040c0:	61b8      	str	r0, [r7, #24]
	if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80040c2:	0038      	movs	r0, r7
	htim15.Init.Period = 0xffff;
 80040c4:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80040c6:	f7fd fa83 	bl	80015d0 <HAL_TIM_Base_Init>
 80040ca:	2800      	cmp	r0, #0
 80040cc:	d000      	beq.n	80040d0 <main+0x2ac>
 80040ce:	e7fe      	b.n	80040ce <main+0x2aa>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040d0:	2380      	movs	r3, #128	; 0x80
	if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80040d2:	a90e      	add	r1, sp, #56	; 0x38
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040d4:	015b      	lsls	r3, r3, #5
	if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80040d6:	0038      	movs	r0, r7
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040d8:	930e      	str	r3, [sp, #56]	; 0x38
	if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80040da:	f7fd fef1 	bl	8001ec0 <HAL_TIM_ConfigClockSource>
 80040de:	2800      	cmp	r0, #0
 80040e0:	d000      	beq.n	80040e4 <main+0x2c0>
 80040e2:	e7fe      	b.n	80040e2 <main+0x2be>
	if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 80040e4:	0038      	movs	r0, r7
 80040e6:	f7fd fbeb 	bl	80018c0 <HAL_TIM_IC_Init>
 80040ea:	2800      	cmp	r0, #0
 80040ec:	d000      	beq.n	80040f0 <main+0x2cc>
 80040ee:	e7fe      	b.n	80040ee <main+0x2ca>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040f0:	900a      	str	r0, [sp, #40]	; 0x28
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040f2:	900b      	str	r0, [sp, #44]	; 0x2c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80040f4:	a90a      	add	r1, sp, #40	; 0x28
 80040f6:	0038      	movs	r0, r7
 80040f8:	f7fe f898 	bl	800222c <HAL_TIMEx_MasterConfigSynchronization>
 80040fc:	2800      	cmp	r0, #0
 80040fe:	d000      	beq.n	8004102 <main+0x2de>
 8004100:	e7fe      	b.n	8004100 <main+0x2dc>
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8004102:	230a      	movs	r3, #10
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004104:	9017      	str	r0, [sp, #92]	; 0x5c
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8004106:	9315      	str	r3, [sp, #84]	; 0x54
	sConfigIC.ICFilter = 0;
 8004108:	9018      	str	r0, [sp, #96]	; 0x60
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800410a:	3b09      	subs	r3, #9
	if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800410c:	2200      	movs	r2, #0
 800410e:	a915      	add	r1, sp, #84	; 0x54
 8004110:	0038      	movs	r0, r7
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004112:	9316      	str	r3, [sp, #88]	; 0x58
	if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004114:	f7fd fcc0 	bl	8001a98 <HAL_TIM_IC_ConfigChannel>
 8004118:	2800      	cmp	r0, #0
 800411a:	d000      	beq.n	800411e <main+0x2fa>
 800411c:	e7fe      	b.n	800411c <main+0x2f8>
	hiwdg.Instance = IWDG;
 800411e:	4a2a      	ldr	r2, [pc, #168]	; (80041c8 <main+0x3a4>)
 8004120:	4b2a      	ldr	r3, [pc, #168]	; (80041cc <main+0x3a8>)
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8004122:	0010      	movs	r0, r2
	hiwdg.Instance = IWDG;
 8004124:	6013      	str	r3, [r2, #0]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_16;
 8004126:	2302      	movs	r3, #2
 8004128:	6053      	str	r3, [r2, #4]
	hiwdg.Init.Window = IWDG_WINDOW_DISABLE;
 800412a:	4b29      	ldr	r3, [pc, #164]	; (80041d0 <main+0x3ac>)
 800412c:	60d3      	str	r3, [r2, #12]
	hiwdg.Init.Reload = 1000;
 800412e:	23fa      	movs	r3, #250	; 0xfa
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	6093      	str	r3, [r2, #8]
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8004134:	f7fc ff06 	bl	8000f44 <HAL_IWDG_Init>
 8004138:	2800      	cmp	r0, #0
 800413a:	d000      	beq.n	800413e <main+0x31a>
 800413c:	e7fe      	b.n	800413c <main+0x318>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800413e:	2100      	movs	r1, #0
 8004140:	0020      	movs	r0, r4
 8004142:	f7fd fb91 	bl	8001868 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8004146:	2100      	movs	r1, #0
 8004148:	0020      	movs	r0, r4
 800414a:	f7fe f85b 	bl	8002204 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800414e:	2104      	movs	r1, #4
 8004150:	0020      	movs	r0, r4
 8004152:	f7fd fb89 	bl	8001868 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8004156:	2104      	movs	r1, #4
 8004158:	0020      	movs	r0, r4
 800415a:	f7fe f853 	bl	8002204 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800415e:	2108      	movs	r1, #8
 8004160:	0020      	movs	r0, r4
 8004162:	f7fd fb81 	bl	8001868 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8004166:	2108      	movs	r1, #8
 8004168:	0020      	movs	r0, r4
 800416a:	f7fe f84b 	bl	8002204 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 800416e:	4648      	mov	r0, r9
 8004170:	f7fd fab2 	bl	80016d8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim3);
 8004174:	4640      	mov	r0, r8
 8004176:	f7fd faa3 	bl	80016c0 <HAL_TIM_Base_Start>
	playStartupTune();
 800417a:	f7fe fee9 	bl	8002f50 <playStartupTune>
	if (HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_4) != HAL_OK)
 800417e:	210c      	movs	r1, #12
 8004180:	0020      	movs	r0, r4
 8004182:	f7fd fab3 	bl	80016ec <HAL_TIM_OC_Start_IT>
 8004186:	2800      	cmp	r0, #0
 8004188:	d024      	beq.n	80041d4 <main+0x3b0>
 800418a:	e7fe      	b.n	800418a <main+0x366>
 800418c:	40021000 	.word	0x40021000
 8004190:	20000400 	.word	0x20000400
 8004194:	40012400 	.word	0x40012400
 8004198:	20000188 	.word	0x20000188
 800419c:	4001001c 	.word	0x4001001c
 80041a0:	2000033c 	.word	0x2000033c
 80041a4:	40012c00 	.word	0x40012c00
 80041a8:	000003e7 	.word	0x000003e7
 80041ac:	2000037c 	.word	0x2000037c
 80041b0:	0000c350 	.word	0x0000c350
 80041b4:	200001b4 	.word	0x200001b4
 80041b8:	40000400 	.word	0x40000400
 80041bc:	0000ffff 	.word	0x0000ffff
 80041c0:	20000130 	.word	0x20000130
 80041c4:	40014000 	.word	0x40014000
 80041c8:	20000174 	.word	0x20000174
 80041cc:	40003000 	.word	0x40003000
 80041d0:	00000fff 	.word	0x00000fff
	HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buffer , 64);
 80041d4:	4ac8      	ldr	r2, [pc, #800]	; (80044f8 <main+0x6d4>)
 80041d6:	2100      	movs	r1, #0
 80041d8:	2340      	movs	r3, #64	; 0x40
 80041da:	0038      	movs	r0, r7
 80041dc:	f7fd fbe8 	bl	80019b0 <HAL_TIM_IC_Start_DMA>
	if (HAL_ADC_Start_DMA(&hadc, (uint32_t*)ADC1ConvertedValues, 2) != HAL_OK)
 80041e0:	2202      	movs	r2, #2
 80041e2:	49c6      	ldr	r1, [pc, #792]	; (80044fc <main+0x6d8>)
 80041e4:	0030      	movs	r0, r6
 80041e6:	f7fc fa43 	bl	8000670 <HAL_ADC_Start_DMA>
 80041ea:	2800      	cmp	r0, #0
 80041ec:	d007      	beq.n	80041fe <main+0x3da>
}
 80041ee:	2000      	movs	r0, #0
 80041f0:	b01d      	add	sp, #116	; 0x74
 80041f2:	bc3c      	pop	{r2, r3, r4, r5}
 80041f4:	4690      	mov	r8, r2
 80041f6:	4699      	mov	r9, r3
 80041f8:	46a2      	mov	sl, r4
 80041fa:	46ab      	mov	fp, r5
 80041fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(HAL_COMP_Start(&hcomp1) != HAL_OK)
 80041fe:	0028      	movs	r0, r5
 8004200:	f7fc fc1c 	bl	8000a3c <HAL_COMP_Start>
 8004204:	2800      	cmp	r0, #0
 8004206:	d000      	beq.n	800420a <main+0x3e6>
 8004208:	e7fe      	b.n	8004208 <main+0x3e4>
	if(HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800420a:	48bd      	ldr	r0, [pc, #756]	; (8004500 <main+0x6dc>)
 800420c:	f7fc fe9a 	bl	8000f44 <HAL_IWDG_Init>
 8004210:	2800      	cmp	r0, #0
 8004212:	d000      	beq.n	8004216 <main+0x3f2>
 8004214:	e7fe      	b.n	8004214 <main+0x3f0>
	TIM1->CCR1 = duty_cycle;												// set duty cycle to 50 out of 768 to start.
 8004216:	4bbb      	ldr	r3, [pc, #748]	; (8004504 <main+0x6e0>)
 8004218:	4ebb      	ldr	r6, [pc, #748]	; (8004508 <main+0x6e4>)
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	4bbb      	ldr	r3, [pc, #748]	; (800450c <main+0x6e8>)
 800421e:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = duty_cycle;
 8004220:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = duty_cycle;
 8004222:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = 800;
 8004224:	22c8      	movs	r2, #200	; 0xc8
 8004226:	0092      	lsls	r2, r2, #2
 8004228:	641a      	str	r2, [r3, #64]	; 0x40
 800422a:	4bb9      	ldr	r3, [pc, #740]	; (8004510 <main+0x6ec>)
 800422c:	469a      	mov	sl, r3
 800422e:	4bb9      	ldr	r3, [pc, #740]	; (8004514 <main+0x6f0>)
 8004230:	4698      	mov	r8, r3
 8004232:	4bb9      	ldr	r3, [pc, #740]	; (8004518 <main+0x6f4>)
 8004234:	469b      	mov	fp, r3
 8004236:	4bb9      	ldr	r3, [pc, #740]	; (800451c <main+0x6f8>)
 8004238:	4699      	mov	r9, r3
				forward = 0;
 800423a:	2700      	movs	r7, #0
		if (dshotcommand > 0){
 800423c:	4bb8      	ldr	r3, [pc, #736]	; (8004520 <main+0x6fc>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	dd0d      	ble.n	8004260 <main+0x43c>
			if (dshotcommand == 2){
 8004244:	2b02      	cmp	r3, #2
 8004246:	d103      	bne.n	8004250 <main+0x42c>
				playInputTune();
 8004248:	f7ff f80a 	bl	8003260 <playInputTune>
 800424c:	4bb4      	ldr	r3, [pc, #720]	; (8004520 <main+0x6fc>)
 800424e:	681b      	ldr	r3, [r3, #0]
			if (dshotcommand == 21){
 8004250:	2b15      	cmp	r3, #21
 8004252:	d100      	bne.n	8004256 <main+0x432>
 8004254:	e143      	b.n	80044de <main+0x6ba>
			if (dshotcommand == 20){
 8004256:	2b14      	cmp	r3, #20
 8004258:	d102      	bne.n	8004260 <main+0x43c>
				forward = 1;
 800425a:	2201      	movs	r2, #1
 800425c:	4bb1      	ldr	r3, [pc, #708]	; (8004524 <main+0x700>)
 800425e:	601a      	str	r2, [r3, #0]
		if(HAL_IWDG_Refresh(&hiwdg) != HAL_OK)                   // watchdog refresh
 8004260:	48a7      	ldr	r0, [pc, #668]	; (8004500 <main+0x6dc>)
 8004262:	f7fc fe9d 	bl	8000fa0 <HAL_IWDG_Refresh>
 8004266:	2800      	cmp	r0, #0
 8004268:	d000      	beq.n	800426c <main+0x448>
 800426a:	e135      	b.n	80044d8 <main+0x6b4>
		if (newinput > 100){
 800426c:	4bae      	ldr	r3, [pc, #696]	; (8004528 <main+0x704>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2b64      	cmp	r3, #100	; 0x64
 8004272:	dc00      	bgt.n	8004276 <main+0x452>
 8004274:	e131      	b.n	80044da <main+0x6b6>
			if (newinput > 2000){
 8004276:	22fa      	movs	r2, #250	; 0xfa
 8004278:	00d2      	lsls	r2, r2, #3
 800427a:	4293      	cmp	r3, r2
 800427c:	dd02      	ble.n	8004284 <main+0x460>
				newinput = 2000;
 800427e:	4baa      	ldr	r3, [pc, #680]	; (8004528 <main+0x704>)
 8004280:	601a      	str	r2, [r3, #0]
 8004282:	0013      	movs	r3, r2
			if (newinput >= input){
 8004284:	6832      	ldr	r2, [r6, #0]
 8004286:	429a      	cmp	r2, r3
 8004288:	dc10      	bgt.n	80042ac <main+0x488>
				if (newinput - input > 50){
 800428a:	1a99      	subs	r1, r3, r2
 800428c:	2932      	cmp	r1, #50	; 0x32
 800428e:	dc00      	bgt.n	8004292 <main+0x46e>
 8004290:	e123      	b.n	80044da <main+0x6b6>
					count++;
 8004292:	49a6      	ldr	r1, [pc, #664]	; (800452c <main+0x708>)
 8004294:	48a5      	ldr	r0, [pc, #660]	; (800452c <main+0x708>)
 8004296:	6809      	ldr	r1, [r1, #0]
 8004298:	9101      	str	r1, [sp, #4]
 800429a:	3101      	adds	r1, #1
 800429c:	6001      	str	r1, [r0, #0]
					if (count > 10){
 800429e:	290a      	cmp	r1, #10
 80042a0:	dd0a      	ble.n	80042b8 <main+0x494>
						input += 10;
 80042a2:	320a      	adds	r2, #10
 80042a4:	6032      	str	r2, [r6, #0]
						count = 0;
 80042a6:	6007      	str	r7, [r0, #0]
			if (newinput < input){
 80042a8:	429a      	cmp	r2, r3
 80042aa:	dd05      	ble.n	80042b8 <main+0x494>
				if (input - newinput > 50){
 80042ac:	1ad1      	subs	r1, r2, r3
 80042ae:	2932      	cmp	r1, #50	; 0x32
 80042b0:	dc00      	bgt.n	80042b4 <main+0x490>
 80042b2:	e112      	b.n	80044da <main+0x6b6>
					input--;
 80042b4:	3a01      	subs	r2, #1
 80042b6:	6032      	str	r2, [r6, #0]
		if (inputSet == 0){
 80042b8:	4b9d      	ldr	r3, [pc, #628]	; (8004530 <main+0x70c>)
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d104      	bne.n	80042ca <main+0x4a6>
			HAL_Delay(10);
 80042c0:	200a      	movs	r0, #10
 80042c2:	f7fc f8c7 	bl	8000454 <HAL_Delay>
			detectInput();
 80042c6:	f7ff f95d 	bl	8003584 <detectInput>
		if (!armed){
 80042ca:	4b9a      	ldr	r3, [pc, #616]	; (8004534 <main+0x710>)
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d100      	bne.n	80042d4 <main+0x4b0>
 80042d2:	e0ab      	b.n	800442c <main+0x608>
 80042d4:	6833      	ldr	r3, [r6, #0]
		if ((input > 100)&&(armed == 1)) {
 80042d6:	2b64      	cmp	r3, #100	; 0x64
 80042d8:	dc00      	bgt.n	80042dc <main+0x4b8>
 80042da:	e09b      	b.n	8004414 <main+0x5f0>
 80042dc:	4a95      	ldr	r2, [pc, #596]	; (8004534 <main+0x710>)
 80042de:	7812      	ldrb	r2, [r2, #0]
 80042e0:	2a01      	cmp	r2, #1
 80042e2:	d106      	bne.n	80042f2 <main+0x4ce>
			started = 1;
 80042e4:	4994      	ldr	r1, [pc, #592]	; (8004538 <main+0x714>)
			duty_cycle = 40 + (input - 100)/2;
 80042e6:	3b64      	subs	r3, #100	; 0x64
			started = 1;
 80042e8:	600a      	str	r2, [r1, #0]
			duty_cycle = 40 + (input - 100)/2;
 80042ea:	105b      	asrs	r3, r3, #1
 80042ec:	4a85      	ldr	r2, [pc, #532]	; (8004504 <main+0x6e0>)
 80042ee:	3328      	adds	r3, #40	; 0x28
 80042f0:	6013      	str	r3, [r2, #0]
		zctimeout++;
 80042f2:	4b92      	ldr	r3, [pc, #584]	; (800453c <main+0x718>)
 80042f4:	4a91      	ldr	r2, [pc, #580]	; (800453c <main+0x718>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	3301      	adds	r3, #1
 80042fa:	6013      	str	r3, [r2, #0]
		if (zctimeout > zc_timeout_threshold) {
 80042fc:	4a90      	ldr	r2, [pc, #576]	; (8004540 <main+0x71c>)
 80042fe:	6812      	ldr	r2, [r2, #0]
 8004300:	9201      	str	r2, [sp, #4]
 8004302:	4293      	cmp	r3, r2
 8004304:	dd00      	ble.n	8004308 <main+0x4e4>
 8004306:	e13d      	b.n	8004584 <main+0x760>
		if (started == 1) {
 8004308:	4b8b      	ldr	r3, [pc, #556]	; (8004538 <main+0x714>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	9301      	str	r3, [sp, #4]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d100      	bne.n	8004314 <main+0x4f0>
 8004312:	e0e7      	b.n	80044e4 <main+0x6c0>
				if (rising == 0){
 8004314:	4b8b      	ldr	r3, [pc, #556]	; (8004544 <main+0x720>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d100      	bne.n	800431e <main+0x4fa>
 800431c:	e13f      	b.n	800459e <main+0x77a>
				if (rising == 1){
 800431e:	2b01      	cmp	r3, #1
 8004320:	d18c      	bne.n	800423c <main+0x418>
					if (HAL_COMP_GetOutputLevel(&hcomp1) == COMP_OUTPUTLEVEL_HIGH){
 8004322:	0028      	movs	r0, r5
 8004324:	f7fc fbcc 	bl	8000ac0 <HAL_COMP_GetOutputLevel>
 8004328:	2380      	movs	r3, #128	; 0x80
 800432a:	01db      	lsls	r3, r3, #7
 800432c:	4298      	cmp	r0, r3
 800432e:	d100      	bne.n	8004332 <main+0x50e>
 8004330:	e0a7      	b.n	8004482 <main+0x65e>
					if (HAL_COMP_GetOutputLevel(&hcomp1) == COMP_OUTPUTLEVEL_LOW){
 8004332:	0028      	movs	r0, r5
 8004334:	f7fc fbc4 	bl	8000ac0 <HAL_COMP_GetOutputLevel>
 8004338:	2800      	cmp	r0, #0
 800433a:	d104      	bne.n	8004346 <main+0x522>
						upcompCount++;
 800433c:	464b      	mov	r3, r9
 800433e:	464a      	mov	r2, r9
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	3301      	adds	r3, #1
 8004344:	6013      	str	r3, [r2, #0]
					if (running == 1){
 8004346:	4653      	mov	r3, sl
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d000      	beq.n	8004350 <main+0x52c>
 800434e:	e775      	b.n	800423c <main+0x418>
						TIM1->CCR1 = duty_cycle;												// set duty cycle to 50 out of 768 to start.
 8004350:	4b6c      	ldr	r3, [pc, #432]	; (8004504 <main+0x6e0>)
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	4b6d      	ldr	r3, [pc, #436]	; (800450c <main+0x6e8>)
 8004356:	635a      	str	r2, [r3, #52]	; 0x34
						TIM1->CCR2 = duty_cycle;
 8004358:	639a      	str	r2, [r3, #56]	; 0x38
						TIM1->CCR3 = duty_cycle;
 800435a:	63da      	str	r2, [r3, #60]	; 0x3c
						if (!sensorless){
 800435c:	4b7a      	ldr	r3, [pc, #488]	; (8004548 <main+0x724>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	9302      	str	r3, [sp, #8]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d106      	bne.n	8004374 <main+0x550>
							TIM2->ARR = tim2_start_arr;
 8004366:	4b79      	ldr	r3, [pc, #484]	; (800454c <main+0x728>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	9301      	str	r3, [sp, #4]
 800436c:	2380      	movs	r3, #128	; 0x80
 800436e:	9a01      	ldr	r2, [sp, #4]
 8004370:	05db      	lsls	r3, r3, #23
 8004372:	62da      	str	r2, [r3, #44]	; 0x2c
						if (TIM2->CNT > TIM2->ARR){
 8004374:	2380      	movs	r3, #128	; 0x80
 8004376:	05db      	lsls	r3, r3, #23
 8004378:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800437a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800437c:	4291      	cmp	r1, r2
 800437e:	d901      	bls.n	8004384 <main+0x560>
							TIM2->CNT=0;
 8004380:	2200      	movs	r2, #0
 8004382:	625a      	str	r2, [r3, #36]	; 0x24
						if (!zcfound){
 8004384:	4b72      	ldr	r3, [pc, #456]	; (8004550 <main+0x72c>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d000      	beq.n	800438e <main+0x56a>
 800438c:	e755      	b.n	800423a <main+0x416>
							if (upcompCount > upthreshold){
 800438e:	4a71      	ldr	r2, [pc, #452]	; (8004554 <main+0x730>)
 8004390:	6812      	ldr	r2, [r2, #0]
 8004392:	9201      	str	r2, [sp, #4]
 8004394:	464a      	mov	r2, r9
 8004396:	9901      	ldr	r1, [sp, #4]
 8004398:	6812      	ldr	r2, [r2, #0]
 800439a:	428a      	cmp	r2, r1
 800439c:	dc00      	bgt.n	80043a0 <main+0x57c>
 800439e:	e74c      	b.n	800423a <main+0x416>
								zcfound = 1;
 80043a0:	2101      	movs	r1, #1
 80043a2:	4a6b      	ldr	r2, [pc, #428]	; (8004550 <main+0x72c>)
 80043a4:	6011      	str	r1, [r2, #0]
								zctimeout = 0;
 80043a6:	4a65      	ldr	r2, [pc, #404]	; (800453c <main+0x718>)
 80043a8:	6013      	str	r3, [r2, #0]
								upcompCount = 0;
 80043aa:	464a      	mov	r2, r9
 80043ac:	6013      	str	r3, [r2, #0]
								falseAlarm = 0;
 80043ae:	4642      	mov	r2, r8
 80043b0:	6013      	str	r3, [r2, #0]
								GPIOA->BSRR = GPIO_PIN_15;
 80043b2:	2280      	movs	r2, #128	; 0x80
 80043b4:	2390      	movs	r3, #144	; 0x90
 80043b6:	0212      	lsls	r2, r2, #8
 80043b8:	05db      	lsls	r3, r3, #23
 80043ba:	619a      	str	r2, [r3, #24]
									upthiszctime = TIM3->CNT;
 80043bc:	4b66      	ldr	r3, [pc, #408]	; (8004558 <main+0x734>)
 80043be:	6a5f      	ldr	r7, [r3, #36]	; 0x24
 80043c0:	4b66      	ldr	r3, [pc, #408]	; (800455c <main+0x738>)
 80043c2:	9701      	str	r7, [sp, #4]
 80043c4:	601f      	str	r7, [r3, #0]
									if (upthiszctime > uplastzctime){
 80043c6:	4b66      	ldr	r3, [pc, #408]	; (8004560 <main+0x73c>)
 80043c8:	681c      	ldr	r4, [r3, #0]
 80043ca:	42a7      	cmp	r7, r4
 80043cc:	dd0f      	ble.n	80043ee <main+0x5ca>
										if ((upthiszctime - uplastzctime > (commutation_interval * 2) + 300) || (upthiszctime - uplastzctime < commutation_interval)){
 80043ce:	4b65      	ldr	r3, [pc, #404]	; (8004564 <main+0x740>)
 80043d0:	1b3c      	subs	r4, r7, r4
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	001a      	movs	r2, r3
 80043d6:	3296      	adds	r2, #150	; 0x96
 80043d8:	0052      	lsls	r2, r2, #1
 80043da:	4294      	cmp	r4, r2
 80043dc:	dc01      	bgt.n	80043e2 <main+0x5be>
 80043de:	429c      	cmp	r4, r3
 80043e0:	da66      	bge.n	80044b0 <main+0x68c>
											if (commutation_interval > 3000){
 80043e2:	4a61      	ldr	r2, [pc, #388]	; (8004568 <main+0x744>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	dd02      	ble.n	80043ee <main+0x5ca>
												commutation_interval = commutation_interval + 50;
 80043e8:	4a5e      	ldr	r2, [pc, #376]	; (8004564 <main+0x740>)
 80043ea:	3332      	adds	r3, #50	; 0x32
 80043ec:	6013      	str	r3, [r2, #0]
									if (sensorless){
 80043ee:	9b02      	ldr	r3, [sp, #8]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00b      	beq.n	800440c <main+0x5e8>
 80043f4:	4b5d      	ldr	r3, [pc, #372]	; (800456c <main+0x748>)
										while (TIM3->CNT - upthiszctime < waitTime){
 80043f6:	4a58      	ldr	r2, [pc, #352]	; (8004558 <main+0x734>)
 80043f8:	6819      	ldr	r1, [r3, #0]
 80043fa:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80043fc:	1bdb      	subs	r3, r3, r7
 80043fe:	428b      	cmp	r3, r1
 8004400:	d3fb      	bcc.n	80043fa <main+0x5d6>
										commutate();
 8004402:	f7fe f963 	bl	80026cc <commutate>
 8004406:	4b55      	ldr	r3, [pc, #340]	; (800455c <main+0x738>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	9301      	str	r3, [sp, #4]
									uplastzctime = upthiszctime;
 800440c:	4b54      	ldr	r3, [pc, #336]	; (8004560 <main+0x73c>)
 800440e:	9a01      	ldr	r2, [sp, #4]
 8004410:	601a      	str	r2, [r3, #0]
 8004412:	e712      	b.n	800423a <main+0x416>
			started = 0;
 8004414:	4b48      	ldr	r3, [pc, #288]	; (8004538 <main+0x714>)
 8004416:	601f      	str	r7, [r3, #0]
			running = 0;
 8004418:	4653      	mov	r3, sl
 800441a:	601f      	str	r7, [r3, #0]
			if (!brake){
 800441c:	4b54      	ldr	r3, [pc, #336]	; (8004570 <main+0x74c>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	9301      	str	r3, [sp, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00c      	beq.n	8004440 <main+0x61c>
				fullBrake();
 8004426:	f7fe f89b 	bl	8002560 <fullBrake>
 800442a:	e762      	b.n	80042f2 <main+0x4ce>
			if ((inputSet == 1)&&(input == 0)){
 800442c:	4b40      	ldr	r3, [pc, #256]	; (8004530 <main+0x70c>)
 800442e:	781c      	ldrb	r4, [r3, #0]
 8004430:	6833      	ldr	r3, [r6, #0]
 8004432:	2c01      	cmp	r4, #1
 8004434:	d00d      	beq.n	8004452 <main+0x62e>
			if (input > 1){
 8004436:	2b01      	cmp	r3, #1
 8004438:	ddec      	ble.n	8004414 <main+0x5f0>
				armedcount = 0;
 800443a:	4a4e      	ldr	r2, [pc, #312]	; (8004574 <main+0x750>)
 800443c:	6017      	str	r7, [r2, #0]
 800443e:	e74a      	b.n	80042d6 <main+0x4b2>
				allOff();
 8004440:	f7fd ffd8 	bl	80023f4 <allOff>
			if(brake){
 8004444:	4b4a      	ldr	r3, [pc, #296]	; (8004570 <main+0x74c>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	9301      	str	r3, [sp, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d100      	bne.n	8004450 <main+0x62c>
 800444e:	e750      	b.n	80042f2 <main+0x4ce>
 8004450:	e7e9      	b.n	8004426 <main+0x602>
			if ((inputSet == 1)&&(input == 0)){
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1ef      	bne.n	8004436 <main+0x612>
				armedcount++;
 8004456:	4b47      	ldr	r3, [pc, #284]	; (8004574 <main+0x750>)
 8004458:	4a46      	ldr	r2, [pc, #280]	; (8004574 <main+0x750>)
 800445a:	681b      	ldr	r3, [r3, #0]
				HAL_Delay(1);
 800445c:	2001      	movs	r0, #1
				armedcount++;
 800445e:	9301      	str	r3, [sp, #4]
 8004460:	3301      	adds	r3, #1
 8004462:	6013      	str	r3, [r2, #0]
				HAL_Delay(1);
 8004464:	f7fb fff6 	bl	8000454 <HAL_Delay>
				if (armedcount > 500){
 8004468:	23fa      	movs	r3, #250	; 0xfa
 800446a:	4a42      	ldr	r2, [pc, #264]	; (8004574 <main+0x750>)
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	6812      	ldr	r2, [r2, #0]
 8004470:	9201      	str	r2, [sp, #4]
 8004472:	429a      	cmp	r2, r3
 8004474:	dd03      	ble.n	800447e <main+0x65a>
					armed = 1;
 8004476:	4b2f      	ldr	r3, [pc, #188]	; (8004534 <main+0x710>)
 8004478:	701c      	strb	r4, [r3, #0]
					playInputTune();
 800447a:	f7fe fef1 	bl	8003260 <playInputTune>
 800447e:	6833      	ldr	r3, [r6, #0]
 8004480:	e7d9      	b.n	8004436 <main+0x612>
						falseAlarm++;
 8004482:	4643      	mov	r3, r8
 8004484:	4642      	mov	r2, r8
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	3301      	adds	r3, #1
 800448a:	6013      	str	r3, [r2, #0]
						if (falseAlarm > falseThreshold){
 800448c:	4a3a      	ldr	r2, [pc, #232]	; (8004578 <main+0x754>)
 800448e:	6812      	ldr	r2, [r2, #0]
 8004490:	9201      	str	r2, [sp, #4]
 8004492:	4293      	cmp	r3, r2
 8004494:	dc00      	bgt.n	8004498 <main+0x674>
 8004496:	e74c      	b.n	8004332 <main+0x50e>
							upcompCount = 0;
 8004498:	464b      	mov	r3, r9
 800449a:	601f      	str	r7, [r3, #0]
							zcfound = 0;
 800449c:	4b2c      	ldr	r3, [pc, #176]	; (8004550 <main+0x72c>)
							GPIOA->BRR = GPIO_PIN_15;
 800449e:	2280      	movs	r2, #128	; 0x80
							zcfound = 0;
 80044a0:	601f      	str	r7, [r3, #0]
							GPIOA->BRR = GPIO_PIN_15;
 80044a2:	2390      	movs	r3, #144	; 0x90
 80044a4:	0212      	lsls	r2, r2, #8
 80044a6:	05db      	lsls	r3, r3, #23
 80044a8:	629a      	str	r2, [r3, #40]	; 0x28
							falseAlarm = 0;
 80044aa:	4643      	mov	r3, r8
 80044ac:	601f      	str	r7, [r3, #0]
 80044ae:	e740      	b.n	8004332 <main+0x50e>
											commutation_interval = (upthiszctime - uplastzctime)/2;
 80044b0:	0fe0      	lsrs	r0, r4, #31
 80044b2:	1900      	adds	r0, r0, r4
 80044b4:	4b2b      	ldr	r3, [pc, #172]	; (8004564 <main+0x740>)
 80044b6:	1040      	asrs	r0, r0, #1
 80044b8:	6018      	str	r0, [r3, #0]
											advance = commutation_interval/ advancedivisor;
 80044ba:	4b30      	ldr	r3, [pc, #192]	; (800457c <main+0x758>)
 80044bc:	7819      	ldrb	r1, [r3, #0]
 80044be:	f7fb fead 	bl	800021c <__divsi3>
 80044c2:	4b2f      	ldr	r3, [pc, #188]	; (8004580 <main+0x75c>)
											waitTime = commutation_interval / 2 - advance;
 80044c4:	17e2      	asrs	r2, r4, #31
											advance = commutation_interval/ advancedivisor;
 80044c6:	6018      	str	r0, [r3, #0]
											waitTime = commutation_interval / 2 - advance;
 80044c8:	2303      	movs	r3, #3
 80044ca:	4013      	ands	r3, r2
 80044cc:	191c      	adds	r4, r3, r4
 80044ce:	10a4      	asrs	r4, r4, #2
 80044d0:	4b26      	ldr	r3, [pc, #152]	; (800456c <main+0x748>)
 80044d2:	1a20      	subs	r0, r4, r0
 80044d4:	6018      	str	r0, [r3, #0]
 80044d6:	e78a      	b.n	80043ee <main+0x5ca>
 80044d8:	e7fe      	b.n	80044d8 <main+0x6b4>
			input = newinput;
 80044da:	6033      	str	r3, [r6, #0]
 80044dc:	e6ec      	b.n	80042b8 <main+0x494>
				forward = 0;
 80044de:	4b11      	ldr	r3, [pc, #68]	; (8004524 <main+0x700>)
 80044e0:	601f      	str	r7, [r3, #0]
 80044e2:	e6bd      	b.n	8004260 <main+0x43c>
			if (running == 0) {
 80044e4:	4653      	mov	r3, sl
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d000      	beq.n	80044ee <main+0x6ca>
 80044ec:	e712      	b.n	8004314 <main+0x4f0>
				allOff();
 80044ee:	f7fd ff81 	bl	80023f4 <allOff>
							startMotor();  // safety on for input testing   ************************************************
 80044f2:	f7fe fcdd 	bl	8002eb0 <startMotor>
 80044f6:	e70d      	b.n	8004314 <main+0x4f0>
 80044f8:	200001f4 	.word	0x200001f4
 80044fc:	20000060 	.word	0x20000060
 8004500:	20000174 	.word	0x20000174
 8004504:	20000004 	.word	0x20000004
 8004508:	200000d4 	.word	0x200000d4
 800450c:	40012c00 	.word	0x40012c00
 8004510:	20000100 	.word	0x20000100
 8004514:	200000d0 	.word	0x200000d0
 8004518:	2000007c 	.word	0x2000007c
 800451c:	20000114 	.word	0x20000114
 8004520:	200000cc 	.word	0x200000cc
 8004524:	20000010 	.word	0x20000010
 8004528:	200000e4 	.word	0x200000e4
 800452c:	20000080 	.word	0x20000080
 8004530:	200000d8 	.word	0x200000d8
 8004534:	2000006c 	.word	0x2000006c
 8004538:	2000010c 	.word	0x2000010c
 800453c:	20000128 	.word	0x20000128
 8004540:	20000038 	.word	0x20000038
 8004544:	20000020 	.word	0x20000020
 8004548:	20000104 	.word	0x20000104
 800454c:	20000030 	.word	0x20000030
 8004550:	2000003c 	.word	0x2000003c
 8004554:	20000034 	.word	0x20000034
 8004558:	40000400 	.word	0x40000400
 800455c:	2000011c 	.word	0x2000011c
 8004560:	20000118 	.word	0x20000118
 8004564:	20000078 	.word	0x20000078
 8004568:	00000bb8 	.word	0x00000bb8
 800456c:	20000124 	.word	0x20000124
 8004570:	20000074 	.word	0x20000074
 8004574:	20000070 	.word	0x20000070
 8004578:	20000008 	.word	0x20000008
 800457c:	20000000 	.word	0x20000000
 8004580:	20000068 	.word	0x20000068
			allOff();
 8004584:	f7fd ff36 	bl	80023f4 <allOff>
			running = 0;
 8004588:	4653      	mov	r3, sl
 800458a:	601f      	str	r7, [r3, #0]
			zctimeout = 0;
 800458c:	4b54      	ldr	r3, [pc, #336]	; (80046e0 <main+0x8bc>)
 800458e:	601f      	str	r7, [r3, #0]
		if (started == 1) {
 8004590:	4b54      	ldr	r3, [pc, #336]	; (80046e4 <main+0x8c0>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	9301      	str	r3, [sp, #4]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d000      	beq.n	800459c <main+0x778>
 800459a:	e6bb      	b.n	8004314 <main+0x4f0>
 800459c:	e7a7      	b.n	80044ee <main+0x6ca>
					if (HAL_COMP_GetOutputLevel(&hcomp1) == COMP_OUTPUTLEVEL_LOW){
 800459e:	0028      	movs	r0, r5
 80045a0:	f7fc fa8e 	bl	8000ac0 <HAL_COMP_GetOutputLevel>
 80045a4:	2800      	cmp	r0, #0
 80045a6:	d114      	bne.n	80045d2 <main+0x7ae>
						falseAlarm++;
 80045a8:	4643      	mov	r3, r8
 80045aa:	4642      	mov	r2, r8
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	3301      	adds	r3, #1
 80045b0:	6013      	str	r3, [r2, #0]
						if (falseAlarm > falseThreshold){
 80045b2:	4a4d      	ldr	r2, [pc, #308]	; (80046e8 <main+0x8c4>)
 80045b4:	6812      	ldr	r2, [r2, #0]
 80045b6:	9201      	str	r2, [sp, #4]
 80045b8:	4293      	cmp	r3, r2
 80045ba:	dd0a      	ble.n	80045d2 <main+0x7ae>
							compCount = 0;
 80045bc:	465b      	mov	r3, fp
 80045be:	6018      	str	r0, [r3, #0]
							zcfound = 0;
 80045c0:	4b4a      	ldr	r3, [pc, #296]	; (80046ec <main+0x8c8>)
							GPIOA->BRR = GPIO_PIN_15;
 80045c2:	2280      	movs	r2, #128	; 0x80
							zcfound = 0;
 80045c4:	6018      	str	r0, [r3, #0]
							GPIOA->BRR = GPIO_PIN_15;
 80045c6:	2390      	movs	r3, #144	; 0x90
 80045c8:	0212      	lsls	r2, r2, #8
 80045ca:	05db      	lsls	r3, r3, #23
 80045cc:	629a      	str	r2, [r3, #40]	; 0x28
							falseAlarm = 0;
 80045ce:	4643      	mov	r3, r8
 80045d0:	6018      	str	r0, [r3, #0]
					if (HAL_COMP_GetOutputLevel(&hcomp1) == COMP_OUTPUTLEVEL_HIGH){
 80045d2:	0028      	movs	r0, r5
 80045d4:	f7fc fa74 	bl	8000ac0 <HAL_COMP_GetOutputLevel>
 80045d8:	2380      	movs	r3, #128	; 0x80
 80045da:	01db      	lsls	r3, r3, #7
 80045dc:	4298      	cmp	r0, r3
 80045de:	d104      	bne.n	80045ea <main+0x7c6>
						compCount++;
 80045e0:	465b      	mov	r3, fp
 80045e2:	465a      	mov	r2, fp
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	3301      	adds	r3, #1
 80045e8:	6013      	str	r3, [r2, #0]
					if (running == 1){
 80045ea:	4653      	mov	r3, sl
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d002      	beq.n	80045f8 <main+0x7d4>
 80045f2:	4b3f      	ldr	r3, [pc, #252]	; (80046f0 <main+0x8cc>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	e692      	b.n	800431e <main+0x4fa>
						TIM1->CCR1 = duty_cycle;												// set duty cycle to 50 out of 768 to start.
 80045f8:	4b3e      	ldr	r3, [pc, #248]	; (80046f4 <main+0x8d0>)
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	4b3e      	ldr	r3, [pc, #248]	; (80046f8 <main+0x8d4>)
 80045fe:	635a      	str	r2, [r3, #52]	; 0x34
						TIM1->CCR2 = duty_cycle;
 8004600:	639a      	str	r2, [r3, #56]	; 0x38
						TIM1->CCR3 = duty_cycle;
 8004602:	63da      	str	r2, [r3, #60]	; 0x3c
						if (!sensorless){
 8004604:	4b3d      	ldr	r3, [pc, #244]	; (80046fc <main+0x8d8>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	9302      	str	r3, [sp, #8]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d106      	bne.n	800461c <main+0x7f8>
							TIM2->ARR = tim2_start_arr;
 800460e:	4b3c      	ldr	r3, [pc, #240]	; (8004700 <main+0x8dc>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	9301      	str	r3, [sp, #4]
 8004614:	2380      	movs	r3, #128	; 0x80
 8004616:	9a01      	ldr	r2, [sp, #4]
 8004618:	05db      	lsls	r3, r3, #23
 800461a:	62da      	str	r2, [r3, #44]	; 0x2c
						if (TIM2->CNT > TIM2->ARR){
 800461c:	2380      	movs	r3, #128	; 0x80
 800461e:	05db      	lsls	r3, r3, #23
 8004620:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004624:	4291      	cmp	r1, r2
 8004626:	d900      	bls.n	800462a <main+0x806>
							TIM2->CNT=0;
 8004628:	625f      	str	r7, [r3, #36]	; 0x24
						if (!zcfound){
 800462a:	4b30      	ldr	r3, [pc, #192]	; (80046ec <main+0x8c8>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1df      	bne.n	80045f2 <main+0x7ce>
							if (compCount > threshold){
 8004632:	4a34      	ldr	r2, [pc, #208]	; (8004704 <main+0x8e0>)
 8004634:	6812      	ldr	r2, [r2, #0]
 8004636:	9201      	str	r2, [sp, #4]
 8004638:	465a      	mov	r2, fp
 800463a:	9901      	ldr	r1, [sp, #4]
 800463c:	6812      	ldr	r2, [r2, #0]
 800463e:	428a      	cmp	r2, r1
 8004640:	ddd7      	ble.n	80045f2 <main+0x7ce>
								zcfound = 1;
 8004642:	2101      	movs	r1, #1
 8004644:	4a29      	ldr	r2, [pc, #164]	; (80046ec <main+0x8c8>)
 8004646:	6011      	str	r1, [r2, #0]
								zctimeout = 0;
 8004648:	4a25      	ldr	r2, [pc, #148]	; (80046e0 <main+0x8bc>)
 800464a:	6013      	str	r3, [r2, #0]
								compCount = 0;
 800464c:	465a      	mov	r2, fp
 800464e:	6013      	str	r3, [r2, #0]
								falseAlarm = 0;
 8004650:	4642      	mov	r2, r8
 8004652:	6013      	str	r3, [r2, #0]
								GPIOA->BSRR = GPIO_PIN_15;
 8004654:	2280      	movs	r2, #128	; 0x80
 8004656:	2390      	movs	r3, #144	; 0x90
 8004658:	0212      	lsls	r2, r2, #8
 800465a:	05db      	lsls	r3, r3, #23
 800465c:	619a      	str	r2, [r3, #24]
								thiszctime = TIM3->CNT;
 800465e:	4b2a      	ldr	r3, [pc, #168]	; (8004708 <main+0x8e4>)
 8004660:	4a2a      	ldr	r2, [pc, #168]	; (800470c <main+0x8e8>)
 8004662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004664:	6013      	str	r3, [r2, #0]
								if (thiszctime > lastzctime){
 8004666:	4a2a      	ldr	r2, [pc, #168]	; (8004710 <main+0x8ec>)
								thiszctime = TIM3->CNT;
 8004668:	9303      	str	r3, [sp, #12]
								if (thiszctime > lastzctime){
 800466a:	6814      	ldr	r4, [r2, #0]
								thiszctime = TIM3->CNT;
 800466c:	9301      	str	r3, [sp, #4]
								if (thiszctime > lastzctime){
 800466e:	42a3      	cmp	r3, r4
 8004670:	dd0e      	ble.n	8004690 <main+0x86c>
									if ((thiszctime - lastzctime > (commutation_interval * 3)) || (thiszctime - lastzctime < commutation_interval)){
 8004672:	1b1c      	subs	r4, r3, r4
 8004674:	4b27      	ldr	r3, [pc, #156]	; (8004714 <main+0x8f0>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	005a      	lsls	r2, r3, #1
 800467a:	18d2      	adds	r2, r2, r3
 800467c:	4294      	cmp	r4, r2
 800467e:	dc01      	bgt.n	8004684 <main+0x860>
 8004680:	429c      	cmp	r4, r3
 8004682:	da19      	bge.n	80046b8 <main+0x894>
										if (commutation_interval > 3000){
 8004684:	4a24      	ldr	r2, [pc, #144]	; (8004718 <main+0x8f4>)
 8004686:	4293      	cmp	r3, r2
 8004688:	dd02      	ble.n	8004690 <main+0x86c>
											commutation_interval = commutation_interval + 50;
 800468a:	4a22      	ldr	r2, [pc, #136]	; (8004714 <main+0x8f0>)
 800468c:	3332      	adds	r3, #50	; 0x32
 800468e:	6013      	str	r3, [r2, #0]
								if (sensorless){
 8004690:	9b02      	ldr	r3, [sp, #8]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00c      	beq.n	80046b0 <main+0x88c>
 8004696:	4b21      	ldr	r3, [pc, #132]	; (800471c <main+0x8f8>)
									while (TIM3->CNT - thiszctime < waitTime){
 8004698:	4a1b      	ldr	r2, [pc, #108]	; (8004708 <main+0x8e4>)
 800469a:	6819      	ldr	r1, [r3, #0]
 800469c:	9803      	ldr	r0, [sp, #12]
 800469e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80046a0:	1a1b      	subs	r3, r3, r0
 80046a2:	428b      	cmp	r3, r1
 80046a4:	d3fb      	bcc.n	800469e <main+0x87a>
									commutate();
 80046a6:	f7fe f811 	bl	80026cc <commutate>
 80046aa:	4b18      	ldr	r3, [pc, #96]	; (800470c <main+0x8e8>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	9301      	str	r3, [sp, #4]
								lastzctime = thiszctime;
 80046b0:	4b17      	ldr	r3, [pc, #92]	; (8004710 <main+0x8ec>)
 80046b2:	9a01      	ldr	r2, [sp, #4]
 80046b4:	601a      	str	r2, [r3, #0]
 80046b6:	e79c      	b.n	80045f2 <main+0x7ce>
										commutation_interval = (thiszctime - lastzctime)/2;
 80046b8:	0fe0      	lsrs	r0, r4, #31
 80046ba:	1900      	adds	r0, r0, r4
 80046bc:	4b15      	ldr	r3, [pc, #84]	; (8004714 <main+0x8f0>)
 80046be:	1040      	asrs	r0, r0, #1
 80046c0:	6018      	str	r0, [r3, #0]
										advance = commutation_interval / advancedivisor;
 80046c2:	4b17      	ldr	r3, [pc, #92]	; (8004720 <main+0x8fc>)
 80046c4:	7819      	ldrb	r1, [r3, #0]
 80046c6:	f7fb fda9 	bl	800021c <__divsi3>
 80046ca:	4b16      	ldr	r3, [pc, #88]	; (8004724 <main+0x900>)
										waitTime = commutation_interval /2 - advance;
 80046cc:	17e2      	asrs	r2, r4, #31
										advance = commutation_interval / advancedivisor;
 80046ce:	6018      	str	r0, [r3, #0]
										waitTime = commutation_interval /2 - advance;
 80046d0:	2303      	movs	r3, #3
 80046d2:	4013      	ands	r3, r2
 80046d4:	191c      	adds	r4, r3, r4
 80046d6:	10a4      	asrs	r4, r4, #2
 80046d8:	4b10      	ldr	r3, [pc, #64]	; (800471c <main+0x8f8>)
 80046da:	1a20      	subs	r0, r4, r0
 80046dc:	6018      	str	r0, [r3, #0]
 80046de:	e7d7      	b.n	8004690 <main+0x86c>
 80046e0:	20000128 	.word	0x20000128
 80046e4:	2000010c 	.word	0x2000010c
 80046e8:	20000008 	.word	0x20000008
 80046ec:	2000003c 	.word	0x2000003c
 80046f0:	20000020 	.word	0x20000020
 80046f4:	20000004 	.word	0x20000004
 80046f8:	40012c00 	.word	0x40012c00
 80046fc:	20000104 	.word	0x20000104
 8004700:	20000030 	.word	0x20000030
 8004704:	2000002c 	.word	0x2000002c
 8004708:	40000400 	.word	0x40000400
 800470c:	20000110 	.word	0x20000110
 8004710:	200000dc 	.word	0x200000dc
 8004714:	20000078 	.word	0x20000078
 8004718:	00000bb8 	.word	0x00000bb8
 800471c:	20000124 	.word	0x20000124
 8004720:	20000000 	.word	0x20000000
 8004724:	20000068 	.word	0x20000068

08004728 <_Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
void _Error_Handler(char * file, int line)
{
 8004728:	e7fe      	b.n	8004728 <_Error_Handler>
 800472a:	46c0      	nop			; (mov r8, r8)

0800472c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800472c:	2301      	movs	r3, #1

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 800472e:	2005      	movs	r0, #5
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004730:	4a0e      	ldr	r2, [pc, #56]	; (800476c <HAL_MspInit+0x40>)
{
 8004732:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004734:	6991      	ldr	r1, [r2, #24]
{
 8004736:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004738:	4319      	orrs	r1, r3
 800473a:	6191      	str	r1, [r2, #24]
 800473c:	6992      	ldr	r2, [r2, #24]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 800473e:	2100      	movs	r1, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004740:	4013      	ands	r3, r2
 8004742:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8004744:	2200      	movs	r2, #0
 8004746:	4240      	negs	r0, r0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004748:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 800474a:	f7fc f9e3 	bl	8000b14 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800474e:	2002      	movs	r0, #2
 8004750:	2200      	movs	r2, #0
 8004752:	2100      	movs	r1, #0
 8004754:	4240      	negs	r0, r0
 8004756:	f7fc f9dd 	bl	8000b14 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800475a:	2001      	movs	r0, #1
 800475c:	2200      	movs	r2, #0
 800475e:	2100      	movs	r1, #0
 8004760:	4240      	negs	r0, r0
 8004762:	f7fc f9d7 	bl	8000b14 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004766:	b003      	add	sp, #12
 8004768:	bd00      	pop	{pc}
 800476a:	46c0      	nop			; (mov r8, r8)
 800476c:	40021000 	.word	0x40021000

08004770 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004770:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8004772:	4b21      	ldr	r3, [pc, #132]	; (80047f8 <HAL_ADC_MspInit+0x88>)
 8004774:	6802      	ldr	r2, [r0, #0]
{
 8004776:	b087      	sub	sp, #28
 8004778:	0004      	movs	r4, r0
  if(hadc->Instance==ADC1)
 800477a:	429a      	cmp	r2, r3
 800477c:	d001      	beq.n	8004782 <HAL_ADC_MspInit+0x12>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800477e:	b007      	add	sp, #28
 8004780:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004782:	2680      	movs	r6, #128	; 0x80
 8004784:	4b1d      	ldr	r3, [pc, #116]	; (80047fc <HAL_ADC_MspInit+0x8c>)
 8004786:	00b6      	lsls	r6, r6, #2
 8004788:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800478a:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_ADC1_CLK_ENABLE();
 800478c:	4332      	orrs	r2, r6
 800478e:	619a      	str	r2, [r3, #24]
 8004790:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004792:	2700      	movs	r7, #0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004794:	4033      	ands	r3, r6
 8004796:	9300      	str	r3, [sp, #0]
 8004798:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 800479a:	2348      	movs	r3, #72	; 0x48
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800479c:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 800479e:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047a0:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80047a2:	3b45      	subs	r3, #69	; 0x45
 80047a4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a6:	9703      	str	r7, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047a8:	f7fc fae4 	bl	8000d74 <HAL_GPIO_Init>
    hdma_adc.Instance = DMA1_Channel1;
 80047ac:	4d14      	ldr	r5, [pc, #80]	; (8004800 <HAL_ADC_MspInit+0x90>)
 80047ae:	4b15      	ldr	r3, [pc, #84]	; (8004804 <HAL_ADC_MspInit+0x94>)
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80047b0:	0028      	movs	r0, r5
    hdma_adc.Instance = DMA1_Channel1;
 80047b2:	602b      	str	r3, [r5, #0]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80047b4:	2380      	movs	r3, #128	; 0x80
 80047b6:	60eb      	str	r3, [r5, #12]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80047b8:	2380      	movs	r3, #128	; 0x80
 80047ba:	011b      	lsls	r3, r3, #4
 80047bc:	616b      	str	r3, [r5, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80047be:	2320      	movs	r3, #32
 80047c0:	61ab      	str	r3, [r5, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_MEDIUM;
 80047c2:	2380      	movs	r3, #128	; 0x80
 80047c4:	015b      	lsls	r3, r3, #5
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80047c6:	606f      	str	r7, [r5, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80047c8:	60af      	str	r7, [r5, #8]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80047ca:	612e      	str	r6, [r5, #16]
    hdma_adc.Init.Priority = DMA_PRIORITY_MEDIUM;
 80047cc:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80047ce:	f7fc fa0f 	bl	8000bf0 <HAL_DMA_Init>
 80047d2:	2800      	cmp	r0, #0
 80047d4:	d10a      	bne.n	80047ec <HAL_ADC_MspInit+0x7c>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80047d6:	63e5      	str	r5, [r4, #60]	; 0x3c
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 80047d8:	2200      	movs	r2, #0
 80047da:	2100      	movs	r1, #0
 80047dc:	200c      	movs	r0, #12
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80047de:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 80047e0:	f7fc f998 	bl	8000b14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 80047e4:	200c      	movs	r0, #12
 80047e6:	f7fc f9c9 	bl	8000b7c <HAL_NVIC_EnableIRQ>
}
 80047ea:	e7c8      	b.n	800477e <HAL_ADC_MspInit+0xe>
      _Error_Handler(__FILE__, __LINE__);
 80047ec:	216b      	movs	r1, #107	; 0x6b
 80047ee:	4806      	ldr	r0, [pc, #24]	; (8004808 <HAL_ADC_MspInit+0x98>)
 80047f0:	f7ff ff9a 	bl	8004728 <_Error_Handler>
 80047f4:	e7ef      	b.n	80047d6 <HAL_ADC_MspInit+0x66>
 80047f6:	46c0      	nop			; (mov r8, r8)
 80047f8:	40012400 	.word	0x40012400
 80047fc:	40021000 	.word	0x40021000
 8004800:	200003bc 	.word	0x200003bc
 8004804:	40020008 	.word	0x40020008
 8004808:	08004b50 	.word	0x08004b50

0800480c <HAL_COMP_MspInit>:
  }

}

void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 800480c:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcomp->Instance==COMP1)
 800480e:	4b0d      	ldr	r3, [pc, #52]	; (8004844 <HAL_COMP_MspInit+0x38>)
 8004810:	6802      	ldr	r2, [r0, #0]
{
 8004812:	b087      	sub	sp, #28
  if(hcomp->Instance==COMP1)
 8004814:	429a      	cmp	r2, r3
 8004816:	d001      	beq.n	800481c <HAL_COMP_MspInit+0x10>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 8004818:	b007      	add	sp, #28
 800481a:	bd00      	pop	{pc}
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800481c:	2322      	movs	r3, #34	; 0x22
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800481e:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8004820:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004822:	3b1f      	subs	r3, #31
 8004824:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004826:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004828:	a901      	add	r1, sp, #4
 800482a:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800482c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800482e:	f7fc faa1 	bl	8000d74 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8004832:	2200      	movs	r2, #0
 8004834:	2100      	movs	r1, #0
 8004836:	200c      	movs	r0, #12
 8004838:	f7fc f96c 	bl	8000b14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 800483c:	200c      	movs	r0, #12
 800483e:	f7fc f99d 	bl	8000b7c <HAL_NVIC_EnableIRQ>
}
 8004842:	e7e9      	b.n	8004818 <HAL_COMP_MspInit+0xc>
 8004844:	4001001c 	.word	0x4001001c

08004848 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004848:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_base->Instance==TIM1)
 800484a:	6803      	ldr	r3, [r0, #0]
 800484c:	4a3b      	ldr	r2, [pc, #236]	; (800493c <HAL_TIM_Base_MspInit+0xf4>)
{
 800484e:	b088      	sub	sp, #32
 8004850:	0004      	movs	r4, r0
  if(htim_base->Instance==TIM1)
 8004852:	4293      	cmp	r3, r2
 8004854:	d047      	beq.n	80048e6 <HAL_TIM_Base_MspInit+0x9e>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8004856:	2280      	movs	r2, #128	; 0x80
 8004858:	05d2      	lsls	r2, r2, #23
 800485a:	4293      	cmp	r3, r2
 800485c:	d056      	beq.n	800490c <HAL_TIM_Base_MspInit+0xc4>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 800485e:	4a38      	ldr	r2, [pc, #224]	; (8004940 <HAL_TIM_Base_MspInit+0xf8>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d004      	beq.n	800486e <HAL_TIM_Base_MspInit+0x26>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM15)
 8004864:	4a37      	ldr	r2, [pc, #220]	; (8004944 <HAL_TIM_Base_MspInit+0xfc>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d00b      	beq.n	8004882 <HAL_TIM_Base_MspInit+0x3a>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800486a:	b008      	add	sp, #32
 800486c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 800486e:	2302      	movs	r3, #2
 8004870:	4a35      	ldr	r2, [pc, #212]	; (8004948 <HAL_TIM_Base_MspInit+0x100>)
 8004872:	69d1      	ldr	r1, [r2, #28]
 8004874:	4319      	orrs	r1, r3
 8004876:	61d1      	str	r1, [r2, #28]
 8004878:	69d2      	ldr	r2, [r2, #28]
 800487a:	4013      	ands	r3, r2
 800487c:	9303      	str	r3, [sp, #12]
 800487e:	9b03      	ldr	r3, [sp, #12]
 8004880:	e7f3      	b.n	800486a <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004882:	2080      	movs	r0, #128	; 0x80
 8004884:	4a30      	ldr	r2, [pc, #192]	; (8004948 <HAL_TIM_Base_MspInit+0x100>)
 8004886:	0240      	lsls	r0, r0, #9
 8004888:	6991      	ldr	r1, [r2, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800488a:	2600      	movs	r6, #0
    __HAL_RCC_TIM15_CLK_ENABLE();
 800488c:	4301      	orrs	r1, r0
 800488e:	6191      	str	r1, [r2, #24]
 8004890:	6993      	ldr	r3, [r2, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004892:	a903      	add	r1, sp, #12
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004894:	4003      	ands	r3, r0
 8004896:	9302      	str	r3, [sp, #8]
 8004898:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800489a:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800489c:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800489e:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80048a0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048a2:	3b02      	subs	r3, #2
 80048a4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048a6:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048a8:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM15;
 80048aa:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048ac:	f7fc fa62 	bl	8000d74 <HAL_GPIO_Init>
    hdma_tim15_ch1_up_trig_com.Instance = DMA1_Channel5;
 80048b0:	4d26      	ldr	r5, [pc, #152]	; (800494c <HAL_TIM_Base_MspInit+0x104>)
 80048b2:	4b27      	ldr	r3, [pc, #156]	; (8004950 <HAL_TIM_Base_MspInit+0x108>)
    if (HAL_DMA_Init(&hdma_tim15_ch1_up_trig_com) != HAL_OK)
 80048b4:	0028      	movs	r0, r5
    hdma_tim15_ch1_up_trig_com.Instance = DMA1_Channel5;
 80048b6:	602b      	str	r3, [r5, #0]
    hdma_tim15_ch1_up_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 80048b8:	2380      	movs	r3, #128	; 0x80
 80048ba:	60eb      	str	r3, [r5, #12]
    hdma_tim15_ch1_up_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80048bc:	3380      	adds	r3, #128	; 0x80
 80048be:	612b      	str	r3, [r5, #16]
    hdma_tim15_ch1_up_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80048c0:	2380      	movs	r3, #128	; 0x80
 80048c2:	011b      	lsls	r3, r3, #4
 80048c4:	616b      	str	r3, [r5, #20]
    hdma_tim15_ch1_up_trig_com.Init.Priority = DMA_PRIORITY_HIGH;
 80048c6:	2380      	movs	r3, #128	; 0x80
 80048c8:	019b      	lsls	r3, r3, #6
    hdma_tim15_ch1_up_trig_com.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80048ca:	606e      	str	r6, [r5, #4]
    hdma_tim15_ch1_up_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 80048cc:	60ae      	str	r6, [r5, #8]
    hdma_tim15_ch1_up_trig_com.Init.Mode = DMA_NORMAL;
 80048ce:	61ae      	str	r6, [r5, #24]
    hdma_tim15_ch1_up_trig_com.Init.Priority = DMA_PRIORITY_HIGH;
 80048d0:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_tim15_ch1_up_trig_com) != HAL_OK)
 80048d2:	f7fc f98d 	bl	8000bf0 <HAL_DMA_Init>
 80048d6:	2800      	cmp	r0, #0
 80048d8:	d12a      	bne.n	8004930 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim15_ch1_up_trig_com);
 80048da:	6265      	str	r5, [r4, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim15_ch1_up_trig_com);
 80048dc:	6225      	str	r5, [r4, #32]
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim15_ch1_up_trig_com);
 80048de:	63a5      	str	r5, [r4, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim15_ch1_up_trig_com);
 80048e0:	626c      	str	r4, [r5, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim15_ch1_up_trig_com);
 80048e2:	6365      	str	r5, [r4, #52]	; 0x34
}
 80048e4:	e7c1      	b.n	800486a <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM1_CLK_ENABLE();
 80048e6:	2080      	movs	r0, #128	; 0x80
 80048e8:	4a17      	ldr	r2, [pc, #92]	; (8004948 <HAL_TIM_Base_MspInit+0x100>)
 80048ea:	0100      	lsls	r0, r0, #4
 80048ec:	6991      	ldr	r1, [r2, #24]
 80048ee:	4301      	orrs	r1, r0
 80048f0:	6191      	str	r1, [r2, #24]
 80048f2:	6993      	ldr	r3, [r2, #24]
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80048f4:	2100      	movs	r1, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 80048f6:	4003      	ands	r3, r0
 80048f8:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80048fa:	2200      	movs	r2, #0
 80048fc:	200e      	movs	r0, #14
    __HAL_RCC_TIM1_CLK_ENABLE();
 80048fe:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8004900:	f7fc f908 	bl	8000b14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004904:	200e      	movs	r0, #14
 8004906:	f7fc f939 	bl	8000b7c <HAL_NVIC_EnableIRQ>
 800490a:	e7ae      	b.n	800486a <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800490c:	2301      	movs	r3, #1
 800490e:	4a0e      	ldr	r2, [pc, #56]	; (8004948 <HAL_TIM_Base_MspInit+0x100>)
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004910:	200f      	movs	r0, #15
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004912:	69d1      	ldr	r1, [r2, #28]
 8004914:	4319      	orrs	r1, r3
 8004916:	61d1      	str	r1, [r2, #28]
 8004918:	69d2      	ldr	r2, [r2, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800491a:	2100      	movs	r1, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 800491c:	4013      	ands	r3, r2
 800491e:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004920:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004922:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004924:	f7fc f8f6 	bl	8000b14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004928:	200f      	movs	r0, #15
 800492a:	f7fc f927 	bl	8000b7c <HAL_NVIC_EnableIRQ>
 800492e:	e79c      	b.n	800486a <HAL_TIM_Base_MspInit+0x22>
      _Error_Handler(__FILE__, __LINE__);
 8004930:	2124      	movs	r1, #36	; 0x24
 8004932:	4808      	ldr	r0, [pc, #32]	; (8004954 <HAL_TIM_Base_MspInit+0x10c>)
 8004934:	31ff      	adds	r1, #255	; 0xff
 8004936:	f7ff fef7 	bl	8004728 <_Error_Handler>
 800493a:	e7ce      	b.n	80048da <HAL_TIM_Base_MspInit+0x92>
 800493c:	40012c00 	.word	0x40012c00
 8004940:	40000400 	.word	0x40000400
 8004944:	40014000 	.word	0x40014000
 8004948:	40021000 	.word	0x40021000
 800494c:	200002f8 	.word	0x200002f8
 8004950:	40020058 	.word	0x40020058
 8004954:	08004b50 	.word	0x08004b50

08004958 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004958:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 800495a:	4b10      	ldr	r3, [pc, #64]	; (800499c <HAL_TIM_MspPostInit+0x44>)
 800495c:	6802      	ldr	r2, [r0, #0]
{
 800495e:	b087      	sub	sp, #28
  if(htim->Instance==TIM1)
 8004960:	429a      	cmp	r2, r3
 8004962:	d001      	beq.n	8004968 <HAL_TIM_MspPostInit+0x10>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004964:	b007      	add	sp, #28
 8004966:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8004968:	23f8      	movs	r3, #248	; 0xf8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800496a:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800496c:	2402      	movs	r4, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800496e:	2500      	movs	r5, #0
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8004970:	011b      	lsls	r3, r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004972:	a901      	add	r1, sp, #4
 8004974:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8004976:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004978:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800497a:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800497c:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800497e:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004980:	f7fc f9f8 	bl	8000d74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004984:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004986:	a901      	add	r1, sp, #4
 8004988:	4805      	ldr	r0, [pc, #20]	; (80049a0 <HAL_TIM_MspPostInit+0x48>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800498a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800498c:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800498e:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004990:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004992:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004994:	f7fc f9ee 	bl	8000d74 <HAL_GPIO_Init>
}
 8004998:	e7e4      	b.n	8004964 <HAL_TIM_MspPostInit+0xc>
 800499a:	46c0      	nop			; (mov r8, r8)
 800499c:	40012c00 	.word	0x40012c00
 80049a0:	48000400 	.word	0x48000400

080049a4 <NMI_Handler>:
 80049a4:	4770      	bx	lr
 80049a6:	46c0      	nop			; (mov r8, r8)

080049a8 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80049a8:	e7fe      	b.n	80049a8 <HardFault_Handler>
 80049aa:	46c0      	nop			; (mov r8, r8)

080049ac <SVC_Handler>:
 80049ac:	4770      	bx	lr
 80049ae:	46c0      	nop			; (mov r8, r8)

080049b0 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80049b0:	4770      	bx	lr
 80049b2:	46c0      	nop			; (mov r8, r8)

080049b4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80049b4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80049b6:	f7fb fd3f 	bl	8000438 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80049ba:	f7fc f915 	bl	8000be8 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80049be:	bd10      	pop	{r4, pc}

080049c0 <DMA1_Channel1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt.
*/
void DMA1_Channel1_IRQHandler(void)
{
 80049c0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80049c2:	4802      	ldr	r0, [pc, #8]	; (80049cc <DMA1_Channel1_IRQHandler+0xc>)
 80049c4:	f7fc f988 	bl	8000cd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80049c8:	bd10      	pop	{r4, pc}
 80049ca:	46c0      	nop			; (mov r8, r8)
 80049cc:	200003bc 	.word	0x200003bc

080049d0 <DMA1_Channel4_5_IRQHandler>:

/**
* @brief This function handles DMA1 channel 4 and 5 interrupts.
*/
void DMA1_Channel4_5_IRQHandler(void)
{
 80049d0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim15_ch1_up_trig_com);
 80049d2:	4803      	ldr	r0, [pc, #12]	; (80049e0 <DMA1_Channel4_5_IRQHandler+0x10>)
 80049d4:	f7fc f980 	bl	8000cd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */
  transferComplete();
 80049d8:	f7ff f8ea 	bl	8003bb0 <transferComplete>
  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 80049dc:	bd10      	pop	{r4, pc}
 80049de:	46c0      	nop			; (mov r8, r8)
 80049e0:	200002f8 	.word	0x200002f8

080049e4 <ADC1_COMP_IRQHandler>:

/**
* @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
*/
void ADC1_COMP_IRQHandler(void)
{
 80049e4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80049e6:	4803      	ldr	r0, [pc, #12]	; (80049f4 <ADC1_COMP_IRQHandler+0x10>)
 80049e8:	f7fb fede 	bl	80007a8 <HAL_ADC_IRQHandler>
  HAL_COMP_IRQHandler(&hcomp1);
 80049ec:	4802      	ldr	r0, [pc, #8]	; (80049f8 <ADC1_COMP_IRQHandler+0x14>)
 80049ee:	f7fc f87b 	bl	8000ae8 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 80049f2:	bd10      	pop	{r4, pc}
 80049f4:	20000400 	.word	0x20000400
 80049f8:	20000188 	.word	0x20000188

080049fc <TIM1_CC_IRQHandler>:

/**
* @brief This function handles TIM1 capture compare interrupt.
*/
void TIM1_CC_IRQHandler(void)
{
 80049fc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80049fe:	4802      	ldr	r0, [pc, #8]	; (8004a08 <TIM1_CC_IRQHandler+0xc>)
 8004a00:	f7fd fb4a 	bl	8002098 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8004a04:	bd10      	pop	{r4, pc}
 8004a06:	46c0      	nop			; (mov r8, r8)
 8004a08:	2000033c 	.word	0x2000033c

08004a0c <TIM2_IRQHandler>:

/**
* @brief This function handles TIM2 global interrupt.
*/
void TIM2_IRQHandler(void)
{
 8004a0c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004a0e:	4802      	ldr	r0, [pc, #8]	; (8004a18 <TIM2_IRQHandler+0xc>)
 8004a10:	f7fd fb42 	bl	8002098 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004a14:	bd10      	pop	{r4, pc}
 8004a16:	46c0      	nop			; (mov r8, r8)
 8004a18:	2000037c 	.word	0x2000037c

08004a1c <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8004a1c:	2101      	movs	r1, #1
 8004a1e:	4b11      	ldr	r3, [pc, #68]	; (8004a64 <SystemInit+0x48>)

#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 8004a20:	4811      	ldr	r0, [pc, #68]	; (8004a68 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	430a      	orrs	r2, r1
 8004a26:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 8004a28:	685a      	ldr	r2, [r3, #4]
 8004a2a:	4002      	ands	r2, r0
 8004a2c:	605a      	str	r2, [r3, #4]
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	480e      	ldr	r0, [pc, #56]	; (8004a6c <SystemInit+0x50>)
 8004a32:	4002      	ands	r2, r0
 8004a34:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	480d      	ldr	r0, [pc, #52]	; (8004a70 <SystemInit+0x54>)
 8004a3a:	4002      	ands	r2, r0
 8004a3c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8004a3e:	685a      	ldr	r2, [r3, #4]
 8004a40:	480c      	ldr	r0, [pc, #48]	; (8004a74 <SystemInit+0x58>)
 8004a42:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8004a44:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8004a46:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8004a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a4a:	4382      	bics	r2, r0
 8004a4c:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
#elif defined (STM32F051x8) || defined (STM32F058xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
 8004a4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a50:	4809      	ldr	r0, [pc, #36]	; (8004a78 <SystemInit+0x5c>)
 8004a52:	4002      	ands	r2, r0
 8004a54:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8004a56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a58:	438a      	bics	r2, r1
 8004a5a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	609a      	str	r2, [r3, #8]

}
 8004a60:	4770      	bx	lr
 8004a62:	46c0      	nop			; (mov r8, r8)
 8004a64:	40021000 	.word	0x40021000
 8004a68:	f8ffb80c 	.word	0xf8ffb80c
 8004a6c:	fef6ffff 	.word	0xfef6ffff
 8004a70:	fffbffff 	.word	0xfffbffff
 8004a74:	ffc0ffff 	.word	0xffc0ffff
 8004a78:	fffffeac 	.word	0xfffffeac

08004a7c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004a7c:	480d      	ldr	r0, [pc, #52]	; (8004ab4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004a7e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004a80:	480d      	ldr	r0, [pc, #52]	; (8004ab8 <LoopForever+0x6>)
  ldr r1, =_edata
 8004a82:	490e      	ldr	r1, [pc, #56]	; (8004abc <LoopForever+0xa>)
  ldr r2, =_sidata
 8004a84:	4a0e      	ldr	r2, [pc, #56]	; (8004ac0 <LoopForever+0xe>)
  movs r3, #0
 8004a86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a88:	e002      	b.n	8004a90 <LoopCopyDataInit>

08004a8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a8e:	3304      	adds	r3, #4

08004a90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a94:	d3f9      	bcc.n	8004a8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a96:	4a0b      	ldr	r2, [pc, #44]	; (8004ac4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004a98:	4c0b      	ldr	r4, [pc, #44]	; (8004ac8 <LoopForever+0x16>)
  movs r3, #0
 8004a9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a9c:	e001      	b.n	8004aa2 <LoopFillZerobss>

08004a9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004aa0:	3204      	adds	r2, #4

08004aa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004aa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004aa4:	d3fb      	bcc.n	8004a9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004aa6:	f7ff ffb9 	bl	8004a1c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8004aaa:	f000 f811 	bl	8004ad0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004aae:	f7ff f9b9 	bl	8003e24 <main>

08004ab2 <LoopForever>:

LoopForever:
    b LoopForever
 8004ab2:	e7fe      	b.n	8004ab2 <LoopForever>
  ldr   r0, =_estack
 8004ab4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8004ab8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004abc:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 8004ac0:	08004b84 	.word	0x08004b84
  ldr r2, =_sbss
 8004ac4:	20000044 	.word	0x20000044
  ldr r4, =_ebss
 8004ac8:	2000044c 	.word	0x2000044c

08004acc <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004acc:	e7fe      	b.n	8004acc <CEC_CAN_IRQHandler>
	...

08004ad0 <__libc_init_array>:
 8004ad0:	b570      	push	{r4, r5, r6, lr}
 8004ad2:	2600      	movs	r6, #0
 8004ad4:	4d0c      	ldr	r5, [pc, #48]	; (8004b08 <__libc_init_array+0x38>)
 8004ad6:	4c0d      	ldr	r4, [pc, #52]	; (8004b0c <__libc_init_array+0x3c>)
 8004ad8:	1b64      	subs	r4, r4, r5
 8004ada:	10a4      	asrs	r4, r4, #2
 8004adc:	42a6      	cmp	r6, r4
 8004ade:	d109      	bne.n	8004af4 <__libc_init_array+0x24>
 8004ae0:	2600      	movs	r6, #0
 8004ae2:	f000 f819 	bl	8004b18 <_init>
 8004ae6:	4d0a      	ldr	r5, [pc, #40]	; (8004b10 <__libc_init_array+0x40>)
 8004ae8:	4c0a      	ldr	r4, [pc, #40]	; (8004b14 <__libc_init_array+0x44>)
 8004aea:	1b64      	subs	r4, r4, r5
 8004aec:	10a4      	asrs	r4, r4, #2
 8004aee:	42a6      	cmp	r6, r4
 8004af0:	d105      	bne.n	8004afe <__libc_init_array+0x2e>
 8004af2:	bd70      	pop	{r4, r5, r6, pc}
 8004af4:	00b3      	lsls	r3, r6, #2
 8004af6:	58eb      	ldr	r3, [r5, r3]
 8004af8:	4798      	blx	r3
 8004afa:	3601      	adds	r6, #1
 8004afc:	e7ee      	b.n	8004adc <__libc_init_array+0xc>
 8004afe:	00b3      	lsls	r3, r6, #2
 8004b00:	58eb      	ldr	r3, [r5, r3]
 8004b02:	4798      	blx	r3
 8004b04:	3601      	adds	r6, #1
 8004b06:	e7f2      	b.n	8004aee <__libc_init_array+0x1e>
 8004b08:	08004b7c 	.word	0x08004b7c
 8004b0c:	08004b7c 	.word	0x08004b7c
 8004b10:	08004b7c 	.word	0x08004b7c
 8004b14:	08004b80 	.word	0x08004b80

08004b18 <_init>:
 8004b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b1a:	46c0      	nop			; (mov r8, r8)
 8004b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b1e:	bc08      	pop	{r3}
 8004b20:	469e      	mov	lr, r3
 8004b22:	4770      	bx	lr

08004b24 <_fini>:
 8004b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b26:	46c0      	nop			; (mov r8, r8)
 8004b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b2a:	bc08      	pop	{r3}
 8004b2c:	469e      	mov	lr, r3
 8004b2e:	4770      	bx	lr
